
GINGAAAN_1STLOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077dc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079c0  080079c0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080079c0  080079c0  000179c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079c8  080079c8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079c8  080079c8  000179c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080079d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  2000002c  080079fc  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  080079fc  00020934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c06e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003393  00000000  00000000  0003c0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0003f460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  000404c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f1f  00000000  00000000  00041408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ead  00000000  00000000  00065327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4210  00000000  00000000  0007b1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f3e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004450  00000000  00000000  0014f438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007988 	.word	0x08007988

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000030 	.word	0x20000030
 8000200:	08007988 	.word	0x08007988

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <appInit>:
#include <stdbool.h>
#include <math.h>
#include "app.h"

//初期化
int appInit(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	//D_CAN_SetReceiveAddress(8,9,10,11);
	D_CAN_SetReceiveAddressAll();
 8000502:	f001 f9e9 	bl	80018d8 <D_CAN_SetReceiveAddressAll>
	for(int i=0; i<8; i++){
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	e01b      	b.n	8000544 <appInit+0x48>
		for(int j=0; j<4; j++){
 800050c:	2300      	movs	r3, #0
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	e012      	b.n	8000538 <appInit+0x3c>
			rcvData[j][i] = 0;
 8000512:	4a11      	ldr	r2, [pc, #68]	; (8000558 <appInit+0x5c>)
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	00db      	lsls	r3, r3, #3
 8000518:	441a      	add	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4413      	add	r3, r2
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
			sndData[j][i] = 0;
 8000522:	4a0e      	ldr	r2, [pc, #56]	; (800055c <appInit+0x60>)
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	441a      	add	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<4; j++){
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	2b03      	cmp	r3, #3
 800053c:	dde9      	ble.n	8000512 <appInit+0x16>
	for(int i=0; i<8; i++){
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3301      	adds	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b07      	cmp	r3, #7
 8000548:	dde0      	ble.n	800050c <appInit+0x10>
		}
	}
	D_PWM_Init();
 800054a:	f002 fe6b 	bl	8003224 <D_PWM_Init>
	return 0;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000068 	.word	0x20000068
 800055c:	20000048 	.word	0x20000048

08000560 <appTask>:

int appTask(void){
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
		sndData[i][sendLength-1] = (uint8_t)checkSum;
	}
	*/

	//SMsndTime += G_System_MicroCounter - recent_System_counter;
	int diff = G_System_counter - recent_System_counter;
 8000566:	4ba2      	ldr	r3, [pc, #648]	; (80007f0 <appTask+0x290>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	4ba2      	ldr	r3, [pc, #648]	; (80007f4 <appTask+0x294>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	613b      	str	r3, [r7, #16]
	sndTime += diff;
 8000572:	4ba1      	ldr	r3, [pc, #644]	; (80007f8 <appTask+0x298>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	4413      	add	r3, r2
 800057a:	4a9f      	ldr	r2, [pc, #636]	; (80007f8 <appTask+0x298>)
 800057c:	6013      	str	r3, [r2, #0]
	rcvTime += diff;
 800057e:	4b9f      	ldr	r3, [pc, #636]	; (80007fc <appTask+0x29c>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	4413      	add	r3, r2
 8000586:	4a9d      	ldr	r2, [pc, #628]	; (80007fc <appTask+0x29c>)
 8000588:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_counter;
 800058a:	4b99      	ldr	r3, [pc, #612]	; (80007f0 <appTask+0x290>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a99      	ldr	r2, [pc, #612]	; (80007f4 <appTask+0x294>)
 8000590:	6013      	str	r3, [r2, #0]
	//CAN送信タイミングの場合送信
	if(sndTime >= CAN_SEND_INTERVAL){
 8000592:	4b99      	ldr	r3, [pc, #612]	; (80007f8 <appTask+0x298>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b63      	cmp	r3, #99	; 0x63
 8000598:	f240 8083 	bls.w	80006a2 <appTask+0x142>
		sndTime = 0;
 800059c:	4b96      	ldr	r3, [pc, #600]	; (80007f8 <appTask+0x298>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
		static int sendLength = 8;
		sndData[0][0] = testSendData;
 80005a2:	4b97      	ldr	r3, [pc, #604]	; (8000800 <appTask+0x2a0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b96      	ldr	r3, [pc, #600]	; (8000804 <appTask+0x2a4>)
 80005aa:	701a      	strb	r2, [r3, #0]
		sndData[0][1] = testSendData2;
 80005ac:	4b96      	ldr	r3, [pc, #600]	; (8000808 <appTask+0x2a8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b94      	ldr	r3, [pc, #592]	; (8000804 <appTask+0x2a4>)
 80005b4:	705a      	strb	r2, [r3, #1]
		sndData[0][2] = testSendData2;
 80005b6:	4b94      	ldr	r3, [pc, #592]	; (8000808 <appTask+0x2a8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b91      	ldr	r3, [pc, #580]	; (8000804 <appTask+0x2a4>)
 80005be:	709a      	strb	r2, [r3, #2]
		sndData[0][3] = testSendData2;
 80005c0:	4b91      	ldr	r3, [pc, #580]	; (8000808 <appTask+0x2a8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b8f      	ldr	r3, [pc, #572]	; (8000804 <appTask+0x2a4>)
 80005c8:	70da      	strb	r2, [r3, #3]
		sndData[0][4] = testSendData2;
 80005ca:	4b8f      	ldr	r3, [pc, #572]	; (8000808 <appTask+0x2a8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b8c      	ldr	r3, [pc, #560]	; (8000804 <appTask+0x2a4>)
 80005d2:	711a      	strb	r2, [r3, #4]
		sndData[0][5] = testSendData2;
 80005d4:	4b8c      	ldr	r3, [pc, #560]	; (8000808 <appTask+0x2a8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b8a      	ldr	r3, [pc, #552]	; (8000804 <appTask+0x2a4>)
 80005dc:	715a      	strb	r2, [r3, #5]
		sndData[0][6] = testSendData2;
 80005de:	4b8a      	ldr	r3, [pc, #552]	; (8000808 <appTask+0x2a8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b87      	ldr	r3, [pc, #540]	; (8000804 <appTask+0x2a4>)
 80005e6:	719a      	strb	r2, [r3, #6]
		sndData[0][7] = testSendData2;
 80005e8:	4b87      	ldr	r3, [pc, #540]	; (8000808 <appTask+0x2a8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b85      	ldr	r3, [pc, #532]	; (8000804 <appTask+0x2a4>)
 80005f0:	71da      	strb	r2, [r3, #7]
		uint8_t dataSum = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	77fb      	strb	r3, [r7, #31]
		for(int j=0; j<sendLength-1; j++){
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	e009      	b.n	8000610 <appTask+0xb0>
			dataSum += sndData[0][j];
 80005fc:	4a81      	ldr	r2, [pc, #516]	; (8000804 <appTask+0x2a4>)
 80005fe:	69bb      	ldr	r3, [r7, #24]
 8000600:	4413      	add	r3, r2
 8000602:	781a      	ldrb	r2, [r3, #0]
 8000604:	7ffb      	ldrb	r3, [r7, #31]
 8000606:	4413      	add	r3, r2
 8000608:	77fb      	strb	r3, [r7, #31]
		for(int j=0; j<sendLength-1; j++){
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	3301      	adds	r3, #1
 800060e:	61bb      	str	r3, [r7, #24]
 8000610:	4b7e      	ldr	r3, [pc, #504]	; (800080c <appTask+0x2ac>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3b01      	subs	r3, #1
 8000616:	69ba      	ldr	r2, [r7, #24]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbef      	blt.n	80005fc <appTask+0x9c>
		}
		//int checkSum = 256 - (int)dataSum;
		sndData[0][sendLength-1] = (uint8_t)dataSum;
 800061c:	4b7b      	ldr	r3, [pc, #492]	; (800080c <appTask+0x2ac>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3b01      	subs	r3, #1
 8000622:	4978      	ldr	r1, [pc, #480]	; (8000804 <appTask+0x2a4>)
 8000624:	7ffa      	ldrb	r2, [r7, #31]
 8000626:	54ca      	strb	r2, [r1, r3]


		errorHandle = D_CAN_Transmit(0x7ff/*testSendData*/,sndData[0],sendLength);
 8000628:	4b78      	ldr	r3, [pc, #480]	; (800080c <appTask+0x2ac>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	b29b      	uxth	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	4974      	ldr	r1, [pc, #464]	; (8000804 <appTask+0x2a4>)
 8000632:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000636:	f001 f8f7 	bl	8001828 <D_CAN_Transmit>
 800063a:	4603      	mov	r3, r0
 800063c:	4a74      	ldr	r2, [pc, #464]	; (8000810 <appTask+0x2b0>)
 800063e:	6013      	str	r3, [r2, #0]
		sndTime = 0;
 8000640:	4b6d      	ldr	r3, [pc, #436]	; (80007f8 <appTask+0x298>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
		count1++;
 8000646:	4b73      	ldr	r3, [pc, #460]	; (8000814 <appTask+0x2b4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	4a71      	ldr	r2, [pc, #452]	; (8000814 <appTask+0x2b4>)
 800064e:	6013      	str	r3, [r2, #0]
		if(count1 >= 1 ){//&& errorHandle == 0){
 8000650:	4b70      	ldr	r3, [pc, #448]	; (8000814 <appTask+0x2b4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	dd02      	ble.n	800065e <appTask+0xfe>
			count1 = 0;
 8000658:	4b6e      	ldr	r3, [pc, #440]	; (8000814 <appTask+0x2b4>)
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
			//testSendData++;
		}
		if(testSendData >= 1000){ //&& errorHandle == 0){
 800065e:	4b68      	ldr	r3, [pc, #416]	; (8000800 <appTask+0x2a0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000666:	db0c      	blt.n	8000682 <appTask+0x122>
			testSendData = 0;
 8000668:	4b65      	ldr	r3, [pc, #404]	; (8000800 <appTask+0x2a0>)
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
			testSendData2++;
 800066e:	4b66      	ldr	r3, [pc, #408]	; (8000808 <appTask+0x2a8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	3301      	adds	r3, #1
 8000674:	4a64      	ldr	r2, [pc, #400]	; (8000808 <appTask+0x2a8>)
 8000676:	6013      	str	r3, [r2, #0]
			ownIdCount++;
 8000678:	4b67      	ldr	r3, [pc, #412]	; (8000818 <appTask+0x2b8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	4a66      	ldr	r2, [pc, #408]	; (8000818 <appTask+0x2b8>)
 8000680:	6013      	str	r3, [r2, #0]
		}
		if(testSendData2 >= 256 && errorHandle == 0){
 8000682:	4b61      	ldr	r3, [pc, #388]	; (8000808 <appTask+0x2a8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2bff      	cmp	r3, #255	; 0xff
 8000688:	dd0b      	ble.n	80006a2 <appTask+0x142>
 800068a:	4b61      	ldr	r3, [pc, #388]	; (8000810 <appTask+0x2b0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d107      	bne.n	80006a2 <appTask+0x142>
			testSendData2 = 1;
 8000692:	4b5d      	ldr	r3, [pc, #372]	; (8000808 <appTask+0x2a8>)
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
			testSendData3++;
 8000698:	4b60      	ldr	r3, [pc, #384]	; (800081c <appTask+0x2bc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3301      	adds	r3, #1
 800069e:	4a5f      	ldr	r2, [pc, #380]	; (800081c <appTask+0x2bc>)
 80006a0:	6013      	str	r3, [r2, #0]
			ownIdCount++;
		}
		*/
	}
	//CAN受信処理
	D_CAN_Receive(0,rcvData[0],receiveLength);
 80006a2:	4b5f      	ldr	r3, [pc, #380]	; (8000820 <appTask+0x2c0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	461a      	mov	r2, r3
 80006aa:	495e      	ldr	r1, [pc, #376]	; (8000824 <appTask+0x2c4>)
 80006ac:	2000      	movs	r0, #0
 80006ae:	f001 f945 	bl	800193c <D_CAN_Receive>
	D_CAN_Receive(1,rcvData[1],receiveLength);
 80006b2:	4b5b      	ldr	r3, [pc, #364]	; (8000820 <appTask+0x2c0>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	495b      	ldr	r1, [pc, #364]	; (8000828 <appTask+0x2c8>)
 80006bc:	2001      	movs	r0, #1
 80006be:	f001 f93d 	bl	800193c <D_CAN_Receive>

	static bool _first = false;

	if(!_first){
 80006c2:	4b5a      	ldr	r3, [pc, #360]	; (800082c <appTask+0x2cc>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	f083 0301 	eor.w	r3, r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d00a      	beq.n	80006e6 <appTask+0x186>
		D_Slider_SetLightingR(SL_NORMAL_FLASH,0);
 80006d0:	2100      	movs	r1, #0
 80006d2:	2002      	movs	r0, #2
 80006d4:	f001 fa92 	bl	8001bfc <D_Slider_SetLightingR>
		D_Slider_SetLightingL(SL_NORMAL_FLASH,0);
 80006d8:	2100      	movs	r1, #0
 80006da:	2002      	movs	r0, #2
 80006dc:	f001 face 	bl	8001c7c <D_Slider_SetLightingL>
		_first = true;
 80006e0:	4b52      	ldr	r3, [pc, #328]	; (800082c <appTask+0x2cc>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
	}
	int pocketR = D_Slider_GetPocketR(false);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f002 faa8 	bl	8002c3c <D_Slider_GetPocketR>
 80006ec:	60f8      	str	r0, [r7, #12]
	if(pocketR != -1){
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006f4:	d006      	beq.n	8000704 <appTask+0x1a4>
		D_Slider_SetLightingR(SL_POCKET_IN,pocketR);
 80006f6:	68f9      	ldr	r1, [r7, #12]
 80006f8:	2003      	movs	r0, #3
 80006fa:	f001 fa7f 	bl	8001bfc <D_Slider_SetLightingR>
		D_Slider_GetPocketR(true);
 80006fe:	2001      	movs	r0, #1
 8000700:	f002 fa9c 	bl	8002c3c <D_Slider_GetPocketR>
	}
	int pocketL = D_Slider_GetPocketL(false);
 8000704:	2000      	movs	r0, #0
 8000706:	f002 fad5 	bl	8002cb4 <D_Slider_GetPocketL>
 800070a:	60b8      	str	r0, [r7, #8]
	if(pocketL != -1){
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000712:	d006      	beq.n	8000722 <appTask+0x1c2>
		D_Slider_SetLightingL(SL_POCKET_IN,pocketL);
 8000714:	68b9      	ldr	r1, [r7, #8]
 8000716:	2003      	movs	r0, #3
 8000718:	f001 fab0 	bl	8001c7c <D_Slider_SetLightingL>
		D_Slider_GetPocketL(true);
 800071c:	2001      	movs	r0, #1
 800071e:	f002 fac9 	bl	8002cb4 <D_Slider_GetPocketL>

	//D_Mess_printf("%d\n", G_System_counter);
	//D_PWM_Set(1,100);
	//D_PWM_Set(2,100);
	//IO_SET_BLDC2_DIR();
	if(IO_READ_USERBUTTON()){
 8000722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000726:	4842      	ldr	r0, [pc, #264]	; (8000830 <appTask+0x2d0>)
 8000728:	f002 fd1c 	bl	8003164 <D_GPIO_Read>
 800072c:	4603      	mov	r3, r0
 800072e:	f083 0301 	eor.w	r3, r3, #1
 8000732:	b2db      	uxtb	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d018      	beq.n	800076a <appTask+0x20a>
		IO_SET_USERLED();
 8000738:	2120      	movs	r1, #32
 800073a:	483e      	ldr	r0, [pc, #248]	; (8000834 <appTask+0x2d4>)
 800073c:	f002 fcf2 	bl	8003124 <D_GPIO_Set>
		if(_userButton){
 8000740:	4b3d      	ldr	r3, [pc, #244]	; (8000838 <appTask+0x2d8>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d007      	beq.n	8000758 <appTask+0x1f8>
			_userButton = false;
 8000748:	4b3b      	ldr	r3, [pc, #236]	; (8000838 <appTask+0x2d8>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
			testSendData += 100;
 800074e:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <appTask+0x2a0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	3364      	adds	r3, #100	; 0x64
 8000754:	4a2a      	ldr	r2, [pc, #168]	; (8000800 <appTask+0x2a0>)
 8000756:	6013      	str	r3, [r2, #0]
		/*
		for(int i=1; i<7; i++){
			D_PWM_Set(i,1000);
		}
		*/
		IO_SET_SHOOTER_R();
 8000758:	2101      	movs	r1, #1
 800075a:	4835      	ldr	r0, [pc, #212]	; (8000830 <appTask+0x2d0>)
 800075c:	f002 fce2 	bl	8003124 <D_GPIO_Set>
		IO_SET_SHOOTER_L();
 8000760:	2108      	movs	r1, #8
 8000762:	4833      	ldr	r0, [pc, #204]	; (8000830 <appTask+0x2d0>)
 8000764:	f002 fcde 	bl	8003124 <D_GPIO_Set>
 8000768:	e00e      	b.n	8000788 <appTask+0x228>
		//Lottery_JP_SetSpeed(JPC_MAX_SPEED,0);

		//IO_SET_ROOMLIGHT();
		//JP_Lift_Down();
	}else{
		_userButton = true;
 800076a:	4b33      	ldr	r3, [pc, #204]	; (8000838 <appTask+0x2d8>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
		IO_RESET_USERLED();
 8000770:	2120      	movs	r1, #32
 8000772:	4830      	ldr	r0, [pc, #192]	; (8000834 <appTask+0x2d4>)
 8000774:	f002 fce6 	bl	8003144 <D_GPIO_Reset>
		/*
		for(int i=1; i<7; i++){
			D_PWM_Set(i,0);
		}
		*/
		IO_RESET_SHOOTER_R();
 8000778:	2101      	movs	r1, #1
 800077a:	482d      	ldr	r0, [pc, #180]	; (8000830 <appTask+0x2d0>)
 800077c:	f002 fce2 	bl	8003144 <D_GPIO_Reset>
		IO_RESET_SHOOTER_L();
 8000780:	2108      	movs	r1, #8
 8000782:	482b      	ldr	r0, [pc, #172]	; (8000830 <appTask+0x2d0>)
 8000784:	f002 fcde 	bl	8003144 <D_GPIO_Reset>
		//D_PWM_Set(BLDC2,3000);
		//D_PWM_Set(BLDC3,3500);
		//JP_Lift_Up();
	}

	if(IO_READ_WAITBALL_R()){
 8000788:	2110      	movs	r1, #16
 800078a:	482c      	ldr	r0, [pc, #176]	; (800083c <appTask+0x2dc>)
 800078c:	f002 fcea 	bl	8003164 <D_GPIO_Read>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d006      	beq.n	80007a4 <appTask+0x244>
		D_PWM_Set(LED_RIGHT_R, testSendData);
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <appTask+0x2a0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f002 fd61 	bl	8003264 <D_PWM_Set>
 80007a2:	e003      	b.n	80007ac <appTask+0x24c>
	}else{
		D_PWM_Set(LED_RIGHT_R,0);
 80007a4:	2100      	movs	r1, #0
 80007a6:	2005      	movs	r0, #5
 80007a8:	f002 fd5c 	bl	8003264 <D_PWM_Set>
	}
	if(IO_READ_SHOOTCOUNT_R()){
 80007ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b0:	4822      	ldr	r0, [pc, #136]	; (800083c <appTask+0x2dc>)
 80007b2:	f002 fcd7 	bl	8003164 <D_GPIO_Read>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d006      	beq.n	80007ca <appTask+0x26a>
		D_PWM_Set(LED_RIGHT_G, testSendData);
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <appTask+0x2a0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	2006      	movs	r0, #6
 80007c4:	f002 fd4e 	bl	8003264 <D_PWM_Set>
 80007c8:	e003      	b.n	80007d2 <appTask+0x272>
	}else{
		D_PWM_Set(LED_RIGHT_G,0);
 80007ca:	2100      	movs	r1, #0
 80007cc:	2006      	movs	r0, #6
 80007ce:	f002 fd49 	bl	8003264 <D_PWM_Set>
	}
	if(IO_READ_SOLENOID_R()){
 80007d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d6:	4819      	ldr	r0, [pc, #100]	; (800083c <appTask+0x2dc>)
 80007d8:	f002 fcc4 	bl	8003164 <D_GPIO_Read>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d02e      	beq.n	8000840 <appTask+0x2e0>
		D_PWM_Set(LED_RIGHT_B, testSendData);
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <appTask+0x2a0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	2003      	movs	r0, #3
 80007ea:	f002 fd3b 	bl	8003264 <D_PWM_Set>
 80007ee:	e02b      	b.n	8000848 <appTask+0x2e8>
 80007f0:	200000b0 	.word	0x200000b0
 80007f4:	20000090 	.word	0x20000090
 80007f8:	20000094 	.word	0x20000094
 80007fc:	20000098 	.word	0x20000098
 8000800:	2000009c 	.word	0x2000009c
 8000804:	20000048 	.word	0x20000048
 8000808:	20000000 	.word	0x20000000
 800080c:	20000004 	.word	0x20000004
 8000810:	200000a0 	.word	0x200000a0
 8000814:	200000a4 	.word	0x200000a4
 8000818:	20000008 	.word	0x20000008
 800081c:	200000a8 	.word	0x200000a8
 8000820:	2000000c 	.word	0x2000000c
 8000824:	20000068 	.word	0x20000068
 8000828:	20000070 	.word	0x20000070
 800082c:	200000ac 	.word	0x200000ac
 8000830:	40020800 	.word	0x40020800
 8000834:	40020000 	.word	0x40020000
 8000838:	200000ad 	.word	0x200000ad
 800083c:	40020400 	.word	0x40020400
	}else{
		D_PWM_Set(LED_RIGHT_B,0);
 8000840:	2100      	movs	r1, #0
 8000842:	2003      	movs	r0, #3
 8000844:	f002 fd0e 	bl	8003264 <D_PWM_Set>
	}

	if(IO_READ_WAITBALL_L()){
 8000848:	2110      	movs	r1, #16
 800084a:	483a      	ldr	r0, [pc, #232]	; (8000934 <appTask+0x3d4>)
 800084c:	f002 fc8a 	bl	8003164 <D_GPIO_Read>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d006      	beq.n	8000864 <appTask+0x304>
		D_PWM_Set(LED_LEFT_R, testSendData);
 8000856:	4b38      	ldr	r3, [pc, #224]	; (8000938 <appTask+0x3d8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	2001      	movs	r0, #1
 800085e:	f002 fd01 	bl	8003264 <D_PWM_Set>
 8000862:	e003      	b.n	800086c <appTask+0x30c>
	}else{
		D_PWM_Set(LED_LEFT_R,0);
 8000864:	2100      	movs	r1, #0
 8000866:	2001      	movs	r0, #1
 8000868:	f002 fcfc 	bl	8003264 <D_PWM_Set>
	}
	if(IO_READ_SHOOTCOUNT_L()){
 800086c:	2120      	movs	r1, #32
 800086e:	4833      	ldr	r0, [pc, #204]	; (800093c <appTask+0x3dc>)
 8000870:	f002 fc78 	bl	8003164 <D_GPIO_Read>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d006      	beq.n	8000888 <appTask+0x328>
		D_PWM_Set(LED_LEFT_G, testSendData);
 800087a:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <appTask+0x3d8>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4619      	mov	r1, r3
 8000880:	2002      	movs	r0, #2
 8000882:	f002 fcef 	bl	8003264 <D_PWM_Set>
 8000886:	e003      	b.n	8000890 <appTask+0x330>
	}else{
		D_PWM_Set(LED_LEFT_G,0);
 8000888:	2100      	movs	r1, #0
 800088a:	2002      	movs	r0, #2
 800088c:	f002 fcea 	bl	8003264 <D_PWM_Set>
	}
	if(IO_READ_SOLENOID_L()){
 8000890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000894:	4829      	ldr	r0, [pc, #164]	; (800093c <appTask+0x3dc>)
 8000896:	f002 fc65 	bl	8003164 <D_GPIO_Read>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d006      	beq.n	80008ae <appTask+0x34e>
		D_PWM_Set(LED_LEFT_B, testSendData);
 80008a0:	4b25      	ldr	r3, [pc, #148]	; (8000938 <appTask+0x3d8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	2004      	movs	r0, #4
 80008a8:	f002 fcdc 	bl	8003264 <D_PWM_Set>
 80008ac:	e003      	b.n	80008b6 <appTask+0x356>
	}else{
		D_PWM_Set(LED_LEFT_B,0);
 80008ae:	2100      	movs	r1, #0
 80008b0:	2004      	movs	r0, #4
 80008b2:	f002 fcd7 	bl	8003264 <D_PWM_Set>
	}

	for(int i=0; i<8; i++){
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	e011      	b.n	80008e0 <appTask+0x380>
		if(rcvData[0][i] != 0) rcvDataJudge[i] = rcvData[0][i];
 80008bc:	4a20      	ldr	r2, [pc, #128]	; (8000940 <appTask+0x3e0>)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	4413      	add	r3, r2
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d008      	beq.n	80008da <appTask+0x37a>
 80008c8:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <appTask+0x3e0>)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	4413      	add	r3, r2
 80008ce:	7819      	ldrb	r1, [r3, #0]
 80008d0:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <appTask+0x3e4>)
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	4413      	add	r3, r2
 80008d6:	460a      	mov	r2, r1
 80008d8:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<8; i++){
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3301      	adds	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	2b07      	cmp	r3, #7
 80008e4:	ddea      	ble.n	80008bc <appTask+0x35c>
	}
	//デバッグ用
	int16_t debug_bits = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	80fb      	strh	r3, [r7, #6]
	debug_bits &= 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_SM_R() << 2);
 80008ee:	2101      	movs	r1, #1
 80008f0:	4810      	ldr	r0, [pc, #64]	; (8000934 <appTask+0x3d4>)
 80008f2:	f002 fc37 	bl	8003164 <D_GPIO_Read>
 80008f6:	4603      	mov	r3, r0
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	4313      	orrs	r3, r2
 8000900:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_SM_C() << 1);
 8000902:	2104      	movs	r1, #4
 8000904:	480b      	ldr	r0, [pc, #44]	; (8000934 <appTask+0x3d4>)
 8000906:	f002 fc2d 	bl	8003164 <D_GPIO_Read>
 800090a:	4603      	mov	r3, r0
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	b21a      	sxth	r2, r3
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	4313      	orrs	r3, r2
 8000914:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_SM_L() << 0);
 8000916:	2102      	movs	r1, #2
 8000918:	4806      	ldr	r0, [pc, #24]	; (8000934 <appTask+0x3d4>)
 800091a:	f002 fc23 	bl	8003164 <D_GPIO_Read>
 800091e:	4603      	mov	r3, r0
 8000920:	b21a      	sxth	r2, r3
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	4313      	orrs	r3, r2
 8000926:	80fb      	strh	r3, [r7, #6]
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", sndData[0][0],sndData[0][1],sndData[0][2],sndData[0][3],sndData[0][4],sndData[0][5],sndData[0][6],sndData[0][7]);
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", rcvData[0][0],rcvData[0][1],rcvData[0][2],rcvData[0][3],rcvData[0][4],rcvData[0][5],rcvData[0][6],rcvData[0][7]);
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", rcvDataJudge[0],rcvDataJudge[1],rcvDataJudge[2],rcvDataJudge[3],rcvDataJudge[4],rcvDataJudge[5],rcvDataJudge[6],rcvDataJudge[7]);
	D_Mess_printf("id : %3d, err : %3d\n", rcvData[1][0],rcvData[1][1]);
	*/
	return 0;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3720      	adds	r7, #32
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40020800 	.word	0x40020800
 8000938:	2000009c 	.word	0x2000009c
 800093c:	40020400 	.word	0x40020400
 8000940:	20000068 	.word	0x20000068
 8000944:	20000088 	.word	0x20000088

08000948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094c:	f002 fcca 	bl	80032e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000950:	f000 f81c 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000954:	f000 fa6e 	bl	8000e34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000958:	f000 fa26 	bl	8000da8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800095c:	f000 f9d0 	bl	8000d00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000960:	f000 f9f8 	bl	8000d54 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000964:	f000 f934 	bl	8000bd0 <MX_TIM3_Init>
  MX_CAN1_Init();
 8000968:	f000 f87c 	bl	8000a64 <MX_CAN1_Init>
  MX_TIM2_Init();
 800096c:	f000 f8b0 	bl	8000ad0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  D_PWM_Init();
 8000970:	f002 fc58 	bl	8003224 <D_PWM_Init>
  D_CAN_Init();
 8000974:	f000 ff1c 	bl	80017b0 <D_CAN_Init>

  //HAL_TIM_Base_Start_IT(&htim2);

  appInit();
 8000978:	f7ff fdc0 	bl	80004fc <appInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //メインタスクの処理
	  appTask();
 800097c:	f7ff fdf0 	bl	8000560 <appTask>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
//		  D_Mess_printf("tes2");
//		  D_Mess_flush();
	  }*/
	  D_Slider_SystickUpdate();
 8000980:	f001 f89e 	bl	8001ac0 <D_Slider_SystickUpdate>
	  D_Mess_flush();
 8000984:	f002 fc04 	bl	8003190 <D_Mess_flush>
	  appTask();
 8000988:	e7f8      	b.n	800097c <main+0x34>
	...

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b094      	sub	sp, #80	; 0x50
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2234      	movs	r2, #52	; 0x34
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f006 ffec 	bl	8007978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <SystemClock_Config+0xd0>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a28      	ldr	r2, [pc, #160]	; (8000a5c <SystemClock_Config+0xd0>)
 80009ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <SystemClock_Config+0xd0>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009cc:	2300      	movs	r3, #0
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <SystemClock_Config+0xd4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009d8:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <SystemClock_Config+0xd4>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <SystemClock_Config+0xd4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f0:	2301      	movs	r3, #1
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f4:	2310      	movs	r3, #16
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f8:	2302      	movs	r3, #2
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a00:	2308      	movs	r3, #8
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a04:	2350      	movs	r3, #80	; 0x50
 8000a06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f004 fd39 	bl	8005490 <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a24:	f000 fb50 	bl	80010c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	230f      	movs	r3, #15
 8000a2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	2102      	movs	r1, #2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f004 fa57 	bl	8004ef8 <HAL_RCC_ClockConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a50:	f000 fb3a 	bl	80010c8 <Error_Handler>
  }
}
 8000a54:	bf00      	nop
 8000a56:	3750      	adds	r7, #80	; 0x50
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40007000 	.word	0x40007000

08000a64 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_CAN1_Init+0x64>)
 8000a6a:	4a18      	ldr	r2, [pc, #96]	; (8000acc <MX_CAN1_Init+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_CAN1_Init+0x64>)
 8000a70:	2204      	movs	r2, #4
 8000a72:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_CAN1_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_CAN1_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_CAN1_Init+0x64>)
 8000a82:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000a86:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_CAN1_Init+0x64>)
 8000a8a:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000a8e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <MX_CAN1_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_CAN1_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <MX_CAN1_Init+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_CAN1_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <MX_CAN1_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_CAN1_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_CAN1_Init+0x64>)
 8000ab6:	f002 fc87 	bl	80033c8 <HAL_CAN_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ac0:	f000 fb02 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200008fc 	.word	0x200008fc
 8000acc:	40006400 	.word	0x40006400

08000ad0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	; 0x38
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	f107 0320 	add.w	r3, r7, #32
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	615a      	str	r2, [r3, #20]
 8000afe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b00:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <MX_TIM2_Init+0xfc>)
 8000b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <MX_TIM2_Init+0xfc>)
 8000b0a:	2220      	movs	r2, #32
 8000b0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <MX_TIM2_Init+0xfc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <MX_TIM2_Init+0xfc>)
 8000b16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <MX_TIM2_Init+0xfc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <MX_TIM2_Init+0xfc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b28:	4828      	ldr	r0, [pc, #160]	; (8000bcc <MX_TIM2_Init+0xfc>)
 8000b2a:	f004 ff4f 	bl	80059cc <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b34:	f000 fac8 	bl	80010c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b42:	4619      	mov	r1, r3
 8000b44:	4821      	ldr	r0, [pc, #132]	; (8000bcc <MX_TIM2_Init+0xfc>)
 8000b46:	f005 f973 	bl	8005e30 <HAL_TIM_ConfigClockSource>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b50:	f000 faba 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b54:	481d      	ldr	r0, [pc, #116]	; (8000bcc <MX_TIM2_Init+0xfc>)
 8000b56:	f004 ff88 	bl	8005a6a <HAL_TIM_PWM_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000b60:	f000 fab2 	bl	80010c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6c:	f107 0320 	add.w	r3, r7, #32
 8000b70:	4619      	mov	r1, r3
 8000b72:	4816      	ldr	r0, [pc, #88]	; (8000bcc <MX_TIM2_Init+0xfc>)
 8000b74:	f005 fd34 	bl	80065e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b7e:	f000 faa3 	bl	80010c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b82:	2360      	movs	r3, #96	; 0x60
 8000b84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <MX_TIM2_Init+0xfc>)
 8000b9a:	f005 f887 	bl	8005cac <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ba4:	f000 fa90 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2204      	movs	r2, #4
 8000bac:	4619      	mov	r1, r3
 8000bae:	4807      	ldr	r0, [pc, #28]	; (8000bcc <MX_TIM2_Init+0xfc>)
 8000bb0:	f005 f87c 	bl	8005cac <HAL_TIM_PWM_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000bba:	f000 fa85 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bbe:	4803      	ldr	r0, [pc, #12]	; (8000bcc <MX_TIM2_Init+0xfc>)
 8000bc0:	f000 fb4e 	bl	8001260 <HAL_TIM_MspPostInit>

}
 8000bc4:	bf00      	nop
 8000bc6:	3738      	adds	r7, #56	; 0x38
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000870 	.word	0x20000870

08000bd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	; 0x38
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be4:	f107 0320 	add.w	r3, r7, #32
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	615a      	str	r2, [r3, #20]
 8000bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c00:	4b3d      	ldr	r3, [pc, #244]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000c02:	4a3e      	ldr	r2, [pc, #248]	; (8000cfc <MX_TIM3_Init+0x12c>)
 8000c04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 8000c06:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000c08:	2220      	movs	r2, #32
 8000c0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000c12:	4b39      	ldr	r3, [pc, #228]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000c14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1a:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c26:	4834      	ldr	r0, [pc, #208]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000c28:	f004 fed0 	bl	80059cc <HAL_TIM_Base_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c32:	f000 fa49 	bl	80010c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c40:	4619      	mov	r1, r3
 8000c42:	482d      	ldr	r0, [pc, #180]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000c44:	f005 f8f4 	bl	8005e30 <HAL_TIM_ConfigClockSource>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c4e:	f000 fa3b 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c52:	4829      	ldr	r0, [pc, #164]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000c54:	f004 ff09 	bl	8005a6a <HAL_TIM_PWM_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c5e:	f000 fa33 	bl	80010c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4821      	ldr	r0, [pc, #132]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000c72:	f005 fcb5 	bl	80065e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c7c:	f000 fa24 	bl	80010c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c80:	2360      	movs	r3, #96	; 0x60
 8000c82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	4619      	mov	r1, r3
 8000c96:	4818      	ldr	r0, [pc, #96]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000c98:	f005 f808 	bl	8005cac <HAL_TIM_PWM_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ca2:	f000 fa11 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2204      	movs	r2, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4812      	ldr	r0, [pc, #72]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000cae:	f004 fffd 	bl	8005cac <HAL_TIM_PWM_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000cb8:	f000 fa06 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000cc4:	f004 fff2 	bl	8005cac <HAL_TIM_PWM_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000cce:	f000 f9fb 	bl	80010c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000cda:	f004 ffe7 	bl	8005cac <HAL_TIM_PWM_ConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000ce4:	f000 f9f0 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ce8:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <MX_TIM3_Init+0x128>)
 8000cea:	f000 fab9 	bl	8001260 <HAL_TIM_MspPostInit>

}
 8000cee:	bf00      	nop
 8000cf0:	3738      	adds	r7, #56	; 0x38
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200006c4 	.word	0x200006c4
 8000cfc:	40000400 	.word	0x40000400

08000d00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <MX_USART1_UART_Init+0x50>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d38:	f005 fcce 	bl	80066d8 <HAL_UART_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d42:	f000 f9c1 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000082c 	.word	0x2000082c
 8000d50:	40011000 	.word	0x40011000

08000d54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <MX_USART2_UART_Init+0x50>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	f005 fca4 	bl	80066d8 <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d96:	f000 f997 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200008b8 	.word	0x200008b8
 8000da4:	40004400 	.word	0x40004400

08000da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <MX_DMA_Init+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <MX_DMA_Init+0x88>)
 8000db8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <MX_DMA_Init+0x88>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_DMA_Init+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <MX_DMA_Init+0x88>)
 8000dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_DMA_Init+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2010      	movs	r0, #16
 8000dec:	f003 fa85 	bl	80042fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000df0:	2010      	movs	r0, #16
 8000df2:	f003 fa9e 	bl	8004332 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2011      	movs	r0, #17
 8000dfc:	f003 fa7d 	bl	80042fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e00:	2011      	movs	r0, #17
 8000e02:	f003 fa96 	bl	8004332 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	203a      	movs	r0, #58	; 0x3a
 8000e0c:	f003 fa75 	bl	80042fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e10:	203a      	movs	r0, #58	; 0x3a
 8000e12:	f003 fa8e 	bl	8004332 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2046      	movs	r0, #70	; 0x46
 8000e1c:	f003 fa6d 	bl	80042fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000e20:	2046      	movs	r0, #70	; 0x46
 8000e22:	f003 fa86 	bl	8004332 <HAL_NVIC_EnableIRQ>

}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b65      	ldr	r3, [pc, #404]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a64      	ldr	r2, [pc, #400]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b62      	ldr	r3, [pc, #392]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b5e      	ldr	r3, [pc, #376]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a5d      	ldr	r2, [pc, #372]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b5b      	ldr	r3, [pc, #364]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b57      	ldr	r3, [pc, #348]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a56      	ldr	r2, [pc, #344]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b54      	ldr	r3, [pc, #336]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b50      	ldr	r3, [pc, #320]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a4f      	ldr	r2, [pc, #316]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b4d      	ldr	r3, [pc, #308]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b49      	ldr	r3, [pc, #292]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a48      	ldr	r2, [pc, #288]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b46      	ldr	r3, [pc, #280]	; (8000fe4 <MX_GPIO_Init+0x1b0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f641 716f 	movw	r1, #8047	; 0x1f6f
 8000edc:	4842      	ldr	r0, [pc, #264]	; (8000fe8 <MX_GPIO_Init+0x1b4>)
 8000ede:	f003 fff1 	bl	8004ec4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2131      	movs	r1, #49	; 0x31
 8000ee6:	4841      	ldr	r0, [pc, #260]	; (8000fec <MX_GPIO_Init+0x1b8>)
 8000ee8:	f003 ffec 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2104      	movs	r1, #4
 8000ef0:	483f      	ldr	r0, [pc, #252]	; (8000ff0 <MX_GPIO_Init+0x1bc>)
 8000ef2:	f003 ffe7 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	483e      	ldr	r0, [pc, #248]	; (8000ff4 <MX_GPIO_Init+0x1c0>)
 8000efc:	f003 ffe2 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4834      	ldr	r0, [pc, #208]	; (8000fe8 <MX_GPIO_Init+0x1b4>)
 8000f18:	f003 fe28 	bl	8004b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC5 PC6 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f1c:	f641 736f 	movw	r3, #8047	; 0x1f6f
 8000f20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	482c      	ldr	r0, [pc, #176]	; (8000fe8 <MX_GPIO_Init+0x1b4>)
 8000f36:	f003 fe19 	bl	8004b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|LD2_Pin;
 8000f3a:	2331      	movs	r3, #49	; 0x31
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4826      	ldr	r0, [pc, #152]	; (8000fec <MX_GPIO_Init+0x1b8>)
 8000f52:	f003 fe0b 	bl	8004b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8000f56:	2390      	movs	r3, #144	; 0x90
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <MX_GPIO_Init+0x1b4>)
 8000f6a:	f003 fdff 	bl	8004b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB13
                           PB14 PB15 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 8000f6e:	f24f 4374 	movw	r3, #62580	; 0xf474
 8000f72:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	481c      	ldr	r0, [pc, #112]	; (8000ff4 <MX_GPIO_Init+0x1c0>)
 8000f84:	f003 fdf2 	bl	8004b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f88:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4813      	ldr	r0, [pc, #76]	; (8000fec <MX_GPIO_Init+0x1b8>)
 8000f9e:	f003 fde5 	bl	8004b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <MX_GPIO_Init+0x1bc>)
 8000fba:	f003 fdd7 	bl	8004b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <MX_GPIO_Init+0x1c0>)
 8000fd6:	f003 fdc9 	bl	8004b6c <HAL_GPIO_Init>

}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020c00 	.word	0x40020c00
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_UART_TxCpltCallback+0x30>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d102      	bne.n	8001010 <HAL_UART_TxCpltCallback+0x18>
	  D_Mess_TransitionCompletedCallBack();
 800100a:	f002 f8f3 	bl	80031f4 <D_Mess_TransitionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_TransitionCompletedCallBack();
  }
}
 800100e:	e006      	b.n	800101e <HAL_UART_TxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <HAL_UART_TxCpltCallback+0x34>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_UART_TxCpltCallback+0x26>
	  D_Slider_TransitionCompletedCallBack();
 800101a:	f002 f867 	bl	80030ec <D_Slider_TransitionCompletedCallBack>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40004400 	.word	0x40004400
 800102c:	40011000 	.word	0x40011000

08001030 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_UART_RxCpltCallback+0x30>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d102      	bne.n	8001048 <HAL_UART_RxCpltCallback+0x18>
	  D_Mess_ReceptionCompletedCallBack();
 8001042:	f002 f8e3 	bl	800320c <D_Mess_ReceptionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_ReceptionCompletedCallBack();
  }
}
 8001046:	e006      	b.n	8001056 <HAL_UART_RxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <HAL_UART_RxCpltCallback+0x34>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <HAL_UART_RxCpltCallback+0x26>
	  D_Slider_ReceptionCompletedCallBack();
 8001052:	f002 f857 	bl	8003104 <D_Slider_ReceptionCompletedCallBack>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40004400 	.word	0x40004400
 8001064:	40011000 	.word	0x40011000

08001068 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  D_CAN_ReceiveCallBack(hcan);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 fcb5 	bl	80019e0 <D_CAN_ReceiveCallBack>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_CAN_TxMailboxCompleteCallback>:
void HAL_CAN_TxMailboxCompleteCallback(){
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailboxComplete\n");
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailbox0Complete\n");
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailbox1Complete\n");
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailbox2Complete\n");
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <Error_Handler+0x8>
	...

080010d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_MspInit+0x4c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <HAL_MspInit+0x4c>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <HAL_MspInit+0x4c>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_MspInit+0x4c>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_MspInit+0x4c>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_MspInit+0x4c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001112:	2007      	movs	r0, #7
 8001114:	f003 f8e6 	bl	80042e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800

08001124 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a29      	ldr	r2, [pc, #164]	; (80011e8 <HAL_CAN_MspInit+0xc4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d14c      	bne.n	80011e0 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HAL_CAN_MspInit+0xc8>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a27      	ldr	r2, [pc, #156]	; (80011ec <HAL_CAN_MspInit+0xc8>)
 8001150:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <HAL_CAN_MspInit+0xc8>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_CAN_MspInit+0xc8>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a20      	ldr	r2, [pc, #128]	; (80011ec <HAL_CAN_MspInit+0xc8>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <HAL_CAN_MspInit+0xc8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800117e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001190:	2309      	movs	r3, #9
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4815      	ldr	r0, [pc, #84]	; (80011f0 <HAL_CAN_MspInit+0xcc>)
 800119c:	f003 fce6 	bl	8004b6c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2013      	movs	r0, #19
 80011a6:	f003 f8a8 	bl	80042fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80011aa:	2013      	movs	r0, #19
 80011ac:	f003 f8c1 	bl	8004332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2014      	movs	r0, #20
 80011b6:	f003 f8a0 	bl	80042fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011ba:	2014      	movs	r0, #20
 80011bc:	f003 f8b9 	bl	8004332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2015      	movs	r0, #21
 80011c6:	f003 f898 	bl	80042fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80011ca:	2015      	movs	r0, #21
 80011cc:	f003 f8b1 	bl	8004332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	2016      	movs	r0, #22
 80011d6:	f003 f890 	bl	80042fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80011da:	2016      	movs	r0, #22
 80011dc:	f003 f8a9 	bl	8004332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40006400 	.word	0x40006400
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400

080011f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001204:	d10e      	bne.n	8001224 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_TIM_Base_MspInit+0x64>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <HAL_TIM_Base_MspInit+0x64>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_TIM_Base_MspInit+0x64>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001222:	e012      	b.n	800124a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <HAL_TIM_Base_MspInit+0x68>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10d      	bne.n	800124a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_TIM_Base_MspInit+0x64>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_TIM_Base_MspInit+0x64>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_TIM_Base_MspInit+0x64>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40000400 	.word	0x40000400

08001260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001280:	d11f      	bne.n	80012c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b31      	ldr	r3, [pc, #196]	; (800134c <HAL_TIM_MspPostInit+0xec>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a30      	ldr	r2, [pc, #192]	; (800134c <HAL_TIM_MspPostInit+0xec>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b2e      	ldr	r3, [pc, #184]	; (800134c <HAL_TIM_MspPostInit+0xec>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800129e:	f248 0302 	movw	r3, #32770	; 0x8002
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012b0:	2301      	movs	r3, #1
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	4825      	ldr	r0, [pc, #148]	; (8001350 <HAL_TIM_MspPostInit+0xf0>)
 80012bc:	f003 fc56 	bl	8004b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012c0:	e040      	b.n	8001344 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a23      	ldr	r2, [pc, #140]	; (8001354 <HAL_TIM_MspPostInit+0xf4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d13b      	bne.n	8001344 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_TIM_MspPostInit+0xec>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <HAL_TIM_MspPostInit+0xec>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6313      	str	r3, [r2, #48]	; 0x30
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_TIM_MspPostInit+0xec>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_TIM_MspPostInit+0xec>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a16      	ldr	r2, [pc, #88]	; (800134c <HAL_TIM_MspPostInit+0xec>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_TIM_MspPostInit+0xec>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001304:	23c0      	movs	r3, #192	; 0xc0
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001314:	2302      	movs	r3, #2
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	480c      	ldr	r0, [pc, #48]	; (8001350 <HAL_TIM_MspPostInit+0xf0>)
 8001320:	f003 fc24 	bl	8004b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001324:	2303      	movs	r3, #3
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001334:	2302      	movs	r3, #2
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <HAL_TIM_MspPostInit+0xf8>)
 8001340:	f003 fc14 	bl	8004b6c <HAL_GPIO_Init>
}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000
 8001354:	40000400 	.word	0x40000400
 8001358:	40020400 	.word	0x40020400

0800135c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a97      	ldr	r2, [pc, #604]	; (80015d8 <HAL_UART_MspInit+0x27c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	f040 8092 	bne.w	80014a4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
 8001384:	4b95      	ldr	r3, [pc, #596]	; (80015dc <HAL_UART_MspInit+0x280>)
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	4a94      	ldr	r2, [pc, #592]	; (80015dc <HAL_UART_MspInit+0x280>)
 800138a:	f043 0310 	orr.w	r3, r3, #16
 800138e:	6453      	str	r3, [r2, #68]	; 0x44
 8001390:	4b92      	ldr	r3, [pc, #584]	; (80015dc <HAL_UART_MspInit+0x280>)
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	4b8e      	ldr	r3, [pc, #568]	; (80015dc <HAL_UART_MspInit+0x280>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4a8d      	ldr	r2, [pc, #564]	; (80015dc <HAL_UART_MspInit+0x280>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6313      	str	r3, [r2, #48]	; 0x30
 80013ac:	4b8b      	ldr	r3, [pc, #556]	; (80015dc <HAL_UART_MspInit+0x280>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013ca:	2307      	movs	r3, #7
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4882      	ldr	r0, [pc, #520]	; (80015e0 <HAL_UART_MspInit+0x284>)
 80013d6:	f003 fbc9 	bl	8004b6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80013da:	4b82      	ldr	r3, [pc, #520]	; (80015e4 <HAL_UART_MspInit+0x288>)
 80013dc:	4a82      	ldr	r2, [pc, #520]	; (80015e8 <HAL_UART_MspInit+0x28c>)
 80013de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80013e0:	4b80      	ldr	r3, [pc, #512]	; (80015e4 <HAL_UART_MspInit+0x288>)
 80013e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013e8:	4b7e      	ldr	r3, [pc, #504]	; (80015e4 <HAL_UART_MspInit+0x288>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ee:	4b7d      	ldr	r3, [pc, #500]	; (80015e4 <HAL_UART_MspInit+0x288>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013f4:	4b7b      	ldr	r3, [pc, #492]	; (80015e4 <HAL_UART_MspInit+0x288>)
 80013f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013fc:	4b79      	ldr	r3, [pc, #484]	; (80015e4 <HAL_UART_MspInit+0x288>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001402:	4b78      	ldr	r3, [pc, #480]	; (80015e4 <HAL_UART_MspInit+0x288>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001408:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <HAL_UART_MspInit+0x288>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800140e:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <HAL_UART_MspInit+0x288>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001414:	4b73      	ldr	r3, [pc, #460]	; (80015e4 <HAL_UART_MspInit+0x288>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800141a:	4872      	ldr	r0, [pc, #456]	; (80015e4 <HAL_UART_MspInit+0x288>)
 800141c:	f002 ffa4 	bl	8004368 <HAL_DMA_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001426:	f7ff fe4f 	bl	80010c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a6d      	ldr	r2, [pc, #436]	; (80015e4 <HAL_UART_MspInit+0x288>)
 800142e:	639a      	str	r2, [r3, #56]	; 0x38
 8001430:	4a6c      	ldr	r2, [pc, #432]	; (80015e4 <HAL_UART_MspInit+0x288>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001436:	4b6d      	ldr	r3, [pc, #436]	; (80015ec <HAL_UART_MspInit+0x290>)
 8001438:	4a6d      	ldr	r2, [pc, #436]	; (80015f0 <HAL_UART_MspInit+0x294>)
 800143a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800143c:	4b6b      	ldr	r3, [pc, #428]	; (80015ec <HAL_UART_MspInit+0x290>)
 800143e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001442:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001444:	4b69      	ldr	r3, [pc, #420]	; (80015ec <HAL_UART_MspInit+0x290>)
 8001446:	2240      	movs	r2, #64	; 0x40
 8001448:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144a:	4b68      	ldr	r3, [pc, #416]	; (80015ec <HAL_UART_MspInit+0x290>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001450:	4b66      	ldr	r3, [pc, #408]	; (80015ec <HAL_UART_MspInit+0x290>)
 8001452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001456:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001458:	4b64      	ldr	r3, [pc, #400]	; (80015ec <HAL_UART_MspInit+0x290>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800145e:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_UART_MspInit+0x290>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001464:	4b61      	ldr	r3, [pc, #388]	; (80015ec <HAL_UART_MspInit+0x290>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800146a:	4b60      	ldr	r3, [pc, #384]	; (80015ec <HAL_UART_MspInit+0x290>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001470:	4b5e      	ldr	r3, [pc, #376]	; (80015ec <HAL_UART_MspInit+0x290>)
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001476:	485d      	ldr	r0, [pc, #372]	; (80015ec <HAL_UART_MspInit+0x290>)
 8001478:	f002 ff76 	bl	8004368 <HAL_DMA_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001482:	f7ff fe21 	bl	80010c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a58      	ldr	r2, [pc, #352]	; (80015ec <HAL_UART_MspInit+0x290>)
 800148a:	635a      	str	r2, [r3, #52]	; 0x34
 800148c:	4a57      	ldr	r2, [pc, #348]	; (80015ec <HAL_UART_MspInit+0x290>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2025      	movs	r0, #37	; 0x25
 8001498:	f002 ff2f 	bl	80042fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800149c:	2025      	movs	r0, #37	; 0x25
 800149e:	f002 ff48 	bl	8004332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014a2:	e095      	b.n	80015d0 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a52      	ldr	r2, [pc, #328]	; (80015f4 <HAL_UART_MspInit+0x298>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	f040 8090 	bne.w	80015d0 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	4b49      	ldr	r3, [pc, #292]	; (80015dc <HAL_UART_MspInit+0x280>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a48      	ldr	r2, [pc, #288]	; (80015dc <HAL_UART_MspInit+0x280>)
 80014ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b46      	ldr	r3, [pc, #280]	; (80015dc <HAL_UART_MspInit+0x280>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	4b42      	ldr	r3, [pc, #264]	; (80015dc <HAL_UART_MspInit+0x280>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	4a41      	ldr	r2, [pc, #260]	; (80015dc <HAL_UART_MspInit+0x280>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6313      	str	r3, [r2, #48]	; 0x30
 80014dc:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <HAL_UART_MspInit+0x280>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014e8:	230c      	movs	r3, #12
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f8:	2307      	movs	r3, #7
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	4837      	ldr	r0, [pc, #220]	; (80015e0 <HAL_UART_MspInit+0x284>)
 8001504:	f003 fb32 	bl	8004b6c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001508:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <HAL_UART_MspInit+0x29c>)
 800150a:	4a3c      	ldr	r2, [pc, #240]	; (80015fc <HAL_UART_MspInit+0x2a0>)
 800150c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <HAL_UART_MspInit+0x29c>)
 8001510:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001514:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001516:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <HAL_UART_MspInit+0x29c>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800151c:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <HAL_UART_MspInit+0x29c>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001522:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <HAL_UART_MspInit+0x29c>)
 8001524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001528:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800152a:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <HAL_UART_MspInit+0x29c>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001530:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_UART_MspInit+0x29c>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001536:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <HAL_UART_MspInit+0x29c>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_UART_MspInit+0x29c>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001542:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <HAL_UART_MspInit+0x29c>)
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001548:	482b      	ldr	r0, [pc, #172]	; (80015f8 <HAL_UART_MspInit+0x29c>)
 800154a:	f002 ff0d 	bl	8004368 <HAL_DMA_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001554:	f7ff fdb8 	bl	80010c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <HAL_UART_MspInit+0x29c>)
 800155c:	639a      	str	r2, [r3, #56]	; 0x38
 800155e:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <HAL_UART_MspInit+0x29c>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001564:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_UART_MspInit+0x2a4>)
 8001566:	4a27      	ldr	r2, [pc, #156]	; (8001604 <HAL_UART_MspInit+0x2a8>)
 8001568:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <HAL_UART_MspInit+0x2a4>)
 800156c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001570:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <HAL_UART_MspInit+0x2a4>)
 8001574:	2240      	movs	r2, #64	; 0x40
 8001576:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_UART_MspInit+0x2a4>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <HAL_UART_MspInit+0x2a4>)
 8001580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001584:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <HAL_UART_MspInit+0x2a4>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <HAL_UART_MspInit+0x2a4>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_UART_MspInit+0x2a4>)
 8001594:	2200      	movs	r2, #0
 8001596:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_UART_MspInit+0x2a4>)
 800159a:	2200      	movs	r2, #0
 800159c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_UART_MspInit+0x2a4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015a4:	4816      	ldr	r0, [pc, #88]	; (8001600 <HAL_UART_MspInit+0x2a4>)
 80015a6:	f002 fedf 	bl	8004368 <HAL_DMA_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80015b0:	f7ff fd8a 	bl	80010c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_UART_MspInit+0x2a4>)
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
 80015ba:	4a11      	ldr	r2, [pc, #68]	; (8001600 <HAL_UART_MspInit+0x2a4>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2026      	movs	r0, #38	; 0x26
 80015c6:	f002 fe98 	bl	80042fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015ca:	2026      	movs	r0, #38	; 0x26
 80015cc:	f002 feb1 	bl	8004332 <HAL_NVIC_EnableIRQ>
}
 80015d0:	bf00      	nop
 80015d2:	3730      	adds	r7, #48	; 0x30
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40011000 	.word	0x40011000
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	2000076c 	.word	0x2000076c
 80015e8:	40026440 	.word	0x40026440
 80015ec:	2000070c 	.word	0x2000070c
 80015f0:	400264b8 	.word	0x400264b8
 80015f4:	40004400 	.word	0x40004400
 80015f8:	20000664 	.word	0x20000664
 80015fc:	40026088 	.word	0x40026088
 8001600:	200007cc 	.word	0x200007cc
 8001604:	400260a0 	.word	0x400260a0

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800160c:	e7fe      	b.n	800160c <NMI_Handler+0x4>

0800160e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <MemManage_Handler+0x4>

0800161a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <UsageFault_Handler+0x4>

08001626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001654:	f001 fe98 	bl	8003388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <SysTick_Handler+0x18>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	4a02      	ldr	r2, [pc, #8]	; (8001668 <SysTick_Handler+0x18>)
 8001660:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200000b0 	.word	0x200000b0

0800166c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <DMA1_Stream5_IRQHandler+0x10>)
 8001672:	f003 f811 	bl	8004698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000664 	.word	0x20000664

08001680 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <DMA1_Stream6_IRQHandler+0x10>)
 8001686:	f003 f807 	bl	8004698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200007cc 	.word	0x200007cc

08001694 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
  HAL_CAN_TxMailboxCompleteCallback();
 8001698:	f7ff fcf1 	bl	800107e <HAL_CAN_TxMailboxCompleteCallback>
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <CAN1_TX_IRQHandler+0x14>)
 800169e:	f002 fb40 	bl	8003d22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200008fc 	.word	0x200008fc

080016ac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <CAN1_RX0_IRQHandler+0x10>)
 80016b2:	f002 fb36 	bl	8003d22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200008fc 	.word	0x200008fc

080016c0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <CAN1_RX1_IRQHandler+0x10>)
 80016c6:	f002 fb2c 	bl	8003d22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200008fc 	.word	0x200008fc

080016d4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <CAN1_SCE_IRQHandler+0x10>)
 80016da:	f002 fb22 	bl	8003d22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200008fc 	.word	0x200008fc

080016e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <USART1_IRQHandler+0x10>)
 80016ee:	f005 f8ef 	bl	80068d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000082c 	.word	0x2000082c

080016fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <USART2_IRQHandler+0x10>)
 8001702:	f005 f8e5 	bl	80068d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200008b8 	.word	0x200008b8

08001710 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <DMA2_Stream2_IRQHandler+0x10>)
 8001716:	f002 ffbf 	bl	8004698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000076c 	.word	0x2000076c

08001724 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <DMA2_Stream7_IRQHandler+0x10>)
 800172a:	f002 ffb5 	bl	8004698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000070c 	.word	0x2000070c

08001738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800175c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001794 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001762:	490e      	ldr	r1, [pc, #56]	; (800179c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001778:	4c0b      	ldr	r4, [pc, #44]	; (80017a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001786:	f7ff ffd7 	bl	8001738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178a:	f006 f8d1 	bl	8007930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178e:	f7ff f8db 	bl	8000948 <main>
  bx  lr    
 8001792:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80017a0:	080079d0 	.word	0x080079d0
  ldr r2, =_sbss
 80017a4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80017a8:	20000934 	.word	0x20000934

080017ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC_IRQHandler>
	...

080017b0 <D_CAN_Init>:

#include "../Inc/CAN.h"
#include <stdlib.h>
#include "stm32f4xx_hal.h"

void D_CAN_Init(void){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
	HAL_CAN_Start(&hcan1);
 80017b6:	4818      	ldr	r0, [pc, #96]	; (8001818 <D_CAN_Init+0x68>)
 80017b8:	f001 ffe2 	bl	8003780 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80017bc:	2102      	movs	r1, #2
 80017be:	4816      	ldr	r0, [pc, #88]	; (8001818 <D_CAN_Init+0x68>)
 80017c0:	f002 fa89 	bl	8003cd6 <HAL_CAN_ActivateNotification>
	for(int i=0; i<8; i++){
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	e01d      	b.n	8001806 <D_CAN_Init+0x56>
		TxData[i] = 0;
 80017ca:	4a14      	ldr	r2, [pc, #80]	; (800181c <D_CAN_Init+0x6c>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
		RxData[i] = 0;
 80017d4:	4a12      	ldr	r2, [pc, #72]	; (8001820 <D_CAN_Init+0x70>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<5; j++){
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	e00a      	b.n	80017fa <D_CAN_Init+0x4a>
			AllData[j][i] = 0;
 80017e4:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <D_CAN_Init+0x74>)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	441a      	add	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<5; j++){
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	ddf1      	ble.n	80017e4 <D_CAN_Init+0x34>
	for(int i=0; i<8; i++){
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3301      	adds	r3, #1
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b07      	cmp	r3, #7
 800180a:	ddde      	ble.n	80017ca <D_CAN_Init+0x1a>
		}
	}
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200008fc 	.word	0x200008fc
 800181c:	2000061c 	.word	0x2000061c
 8001820:	20000628 	.word	0x20000628
 8001824:	200005f4 	.word	0x200005f4

08001828 <D_CAN_Transmit>:

int D_CAN_Transmit(uint16_t ownAddress, const uint8_t *data, uint16_t size){
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	80fb      	strh	r3, [r7, #6]
 8001834:	4613      	mov	r3, r2
 8001836:	80bb      	strh	r3, [r7, #4]
	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0){
 8001838:	4823      	ldr	r0, [pc, #140]	; (80018c8 <D_CAN_Transmit+0xa0>)
 800183a:	f002 f905 	bl	8003a48 <HAL_CAN_GetTxMailboxesFreeLevel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d02d      	beq.n	80018a0 <D_CAN_Transmit+0x78>
		TxHeader.StdId = ownAddress;
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	4a21      	ldr	r2, [pc, #132]	; (80018cc <D_CAN_Transmit+0xa4>)
 8001848:	6013      	str	r3, [r2, #0]
		TxHeader.RTR = CAN_RTR_DATA;
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <D_CAN_Transmit+0xa4>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
		TxHeader.IDE = CAN_ID_STD;
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <D_CAN_Transmit+0xa4>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
		TxHeader.DLC = size;
 8001856:	88bb      	ldrh	r3, [r7, #4]
 8001858:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <D_CAN_Transmit+0xa4>)
 800185a:	6113      	str	r3, [r2, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <D_CAN_Transmit+0xa4>)
 800185e:	2200      	movs	r2, #0
 8001860:	751a      	strb	r2, [r3, #20]
		for(int i=0; i<size; i++){
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	e00b      	b.n	8001880 <D_CAN_Transmit+0x58>
			TxData[i] = data[i];
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	4413      	add	r3, r2
 800186e:	7819      	ldrb	r1, [r3, #0]
 8001870:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <D_CAN_Transmit+0xa8>)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4413      	add	r3, r2
 8001876:	460a      	mov	r2, r1
 8001878:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<size; i++){
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3301      	adds	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	dbef      	blt.n	8001868 <D_CAN_Transmit+0x40>
		}
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <D_CAN_Transmit+0xac>)
 800188a:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <D_CAN_Transmit+0xa8>)
 800188c:	490f      	ldr	r1, [pc, #60]	; (80018cc <D_CAN_Transmit+0xa4>)
 800188e:	480e      	ldr	r0, [pc, #56]	; (80018c8 <D_CAN_Transmit+0xa0>)
 8001890:	f001 ffba 	bl	8003808 <HAL_CAN_AddTxMessage>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d011      	beq.n	80018be <D_CAN_Transmit+0x96>
			return -2;
 800189a:	f06f 0301 	mvn.w	r3, #1
 800189e:	e00f      	b.n	80018c0 <D_CAN_Transmit+0x98>
		}
	}else{
		HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX0);
 80018a0:	2101      	movs	r1, #1
 80018a2:	4809      	ldr	r0, [pc, #36]	; (80018c8 <D_CAN_Transmit+0xa0>)
 80018a4:	f002 f88b 	bl	80039be <HAL_CAN_AbortTxRequest>
		HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX1);
 80018a8:	2102      	movs	r1, #2
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <D_CAN_Transmit+0xa0>)
 80018ac:	f002 f887 	bl	80039be <HAL_CAN_AbortTxRequest>
		HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX2);
 80018b0:	2104      	movs	r1, #4
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <D_CAN_Transmit+0xa0>)
 80018b4:	f002 f883 	bl	80039be <HAL_CAN_AbortTxRequest>
		return -1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018bc:	e000      	b.n	80018c0 <D_CAN_Transmit+0x98>
	}
	return 0;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200008fc 	.word	0x200008fc
 80018cc:	20000630 	.word	0x20000630
 80018d0:	2000061c 	.word	0x2000061c
 80018d4:	20000624 	.word	0x20000624

080018d8 <D_CAN_SetReceiveAddressAll>:
	}

	return 0;
}

int D_CAN_SetReceiveAddressAll(void){
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	sFilterConfig.FilterBank = 0;
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <D_CAN_SetReceiveAddressAll+0x5c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <D_CAN_SetReceiveAddressAll+0x5c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <D_CAN_SetReceiveAddressAll+0x5c>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <D_CAN_SetReceiveAddressAll+0x5c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <D_CAN_SetReceiveAddressAll+0x5c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <D_CAN_SetReceiveAddressAll+0x5c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <D_CAN_SetReceiveAddressAll+0x5c>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <D_CAN_SetReceiveAddressAll+0x5c>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <D_CAN_SetReceiveAddressAll+0x5c>)
 800190e:	2201      	movs	r2, #1
 8001910:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <D_CAN_SetReceiveAddressAll+0x5c>)
 8001914:	220e      	movs	r2, #14
 8001916:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8001918:	4906      	ldr	r1, [pc, #24]	; (8001934 <D_CAN_SetReceiveAddressAll+0x5c>)
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <D_CAN_SetReceiveAddressAll+0x60>)
 800191c:	f001 fe50 	bl	80035c0 <HAL_CAN_ConfigFilter>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <D_CAN_SetReceiveAddressAll+0x54>
		return -1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192a:	e000      	b.n	800192e <D_CAN_SetReceiveAddressAll+0x56>
	}

	return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200005cc 	.word	0x200005cc
 8001938:	200008fc 	.word	0x200008fc

0800193c <D_CAN_Receive>:

int D_CAN_Receive(uint16_t SenderAddress, uint8_t *data, uint16_t size){
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	80fb      	strh	r3, [r7, #6]
 8001948:	4613      	mov	r3, r2
 800194a:	80bb      	strh	r3, [r7, #4]
	int setIdx = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
	switch(SenderAddress){
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001956:	d01b      	beq.n	8001990 <D_CAN_Receive+0x54>
 8001958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195c:	dc1e      	bgt.n	800199c <D_CAN_Receive+0x60>
 800195e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001962:	d012      	beq.n	800198a <D_CAN_Receive+0x4e>
 8001964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001968:	dc18      	bgt.n	800199c <D_CAN_Receive+0x60>
 800196a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800196e:	d009      	beq.n	8001984 <D_CAN_Receive+0x48>
 8001970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001974:	dc12      	bgt.n	800199c <D_CAN_Receive+0x60>
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00d      	beq.n	8001996 <D_CAN_Receive+0x5a>
 800197a:	2b09      	cmp	r3, #9
 800197c:	d10e      	bne.n	800199c <D_CAN_Receive+0x60>
	case CAN_MECH1_ADDRESS:
		setIdx = CAN_MECH1;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
		break;
 8001982:	e00e      	b.n	80019a2 <D_CAN_Receive+0x66>
	case CAN_ST2_ADDRESS:
		setIdx = CAN_ST2;
 8001984:	2301      	movs	r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
		break;
 8001988:	e00b      	b.n	80019a2 <D_CAN_Receive+0x66>
	case CAN_ST3_ADDRESS:
		setIdx = CAN_ST3;
 800198a:	2302      	movs	r3, #2
 800198c:	60bb      	str	r3, [r7, #8]
		break;
 800198e:	e008      	b.n	80019a2 <D_CAN_Receive+0x66>
	case CAN_ST4_ADDRESS:
		setIdx = CAN_ST4;
 8001990:	2303      	movs	r3, #3
 8001992:	60bb      	str	r3, [r7, #8]
		break;
 8001994:	e005      	b.n	80019a2 <D_CAN_Receive+0x66>
	case CAN_MAIN_ADDRESS:
		setIdx = CAN_MAIN;
 8001996:	2304      	movs	r3, #4
 8001998:	60bb      	str	r3, [r7, #8]
		break;
 800199a:	e002      	b.n	80019a2 <D_CAN_Receive+0x66>
	default:
		setIdx = CAN_MAIN;
 800199c:	2304      	movs	r3, #4
 800199e:	60bb      	str	r3, [r7, #8]
		break;
 80019a0:	bf00      	nop
	}
	//test
	for(int i=0; i<size; i++){
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e00d      	b.n	80019c4 <D_CAN_Receive+0x88>
		data[i] = AllData[SenderAddress][i];
 80019a8:	88fa      	ldrh	r2, [r7, #6]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6839      	ldr	r1, [r7, #0]
 80019ae:	440b      	add	r3, r1
 80019b0:	490a      	ldr	r1, [pc, #40]	; (80019dc <D_CAN_Receive+0xa0>)
 80019b2:	00d2      	lsls	r2, r2, #3
 80019b4:	4411      	add	r1, r2
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	440a      	add	r2, r1
 80019ba:	7812      	ldrb	r2, [r2, #0]
 80019bc:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++){
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3301      	adds	r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	88bb      	ldrh	r3, [r7, #4]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbed      	blt.n	80019a8 <D_CAN_Receive+0x6c>
		data[i] = AllData[setIdx][i];
	}
	*/


	return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	200005f4 	.word	0x200005f4

080019e0 <D_CAN_ReceiveCallBack>:

void D_CAN_ReceiveCallBack(CAN_HandleTypeDef *hcan){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08e      	sub	sp, #56	; 0x38
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 80019e8:	f107 020c 	add.w	r2, r7, #12
 80019ec:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <D_CAN_ReceiveCallBack+0xd8>)
 80019ee:	2100      	movs	r1, #0
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f002 f85e 	bl	8003ab2 <HAL_CAN_GetRxMessage>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d155      	bne.n	8001aa8 <D_CAN_ReceiveCallBack+0xc8>
		uint32_t id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <D_CAN_ReceiveCallBack+0x26>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	e000      	b.n	8001a08 <D_CAN_ReceiveCallBack+0x28>
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t size = RxHeader.DLC;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		int setIdx = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
		switch(id){
 8001a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a18:	d022      	beq.n	8001a60 <D_CAN_ReceiveCallBack+0x80>
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a20:	d824      	bhi.n	8001a6c <D_CAN_ReceiveCallBack+0x8c>
 8001a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a28:	d017      	beq.n	8001a5a <D_CAN_ReceiveCallBack+0x7a>
 8001a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a30:	d81c      	bhi.n	8001a6c <D_CAN_ReceiveCallBack+0x8c>
 8001a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a38:	d00c      	beq.n	8001a54 <D_CAN_ReceiveCallBack+0x74>
 8001a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a40:	d814      	bhi.n	8001a6c <D_CAN_ReceiveCallBack+0x8c>
 8001a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00e      	beq.n	8001a66 <D_CAN_ReceiveCallBack+0x86>
 8001a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4a:	2b09      	cmp	r3, #9
 8001a4c:	d10e      	bne.n	8001a6c <D_CAN_ReceiveCallBack+0x8c>
		case CAN_MECH1_ADDRESS:
			setIdx = CAN_MECH1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001a52:	e00e      	b.n	8001a72 <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST2_ADDRESS:
			setIdx = CAN_ST2;
 8001a54:	2301      	movs	r3, #1
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001a58:	e00b      	b.n	8001a72 <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST3_ADDRESS:
			setIdx = CAN_ST3;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001a5e:	e008      	b.n	8001a72 <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST4_ADDRESS:
			setIdx = CAN_ST4;
 8001a60:	2303      	movs	r3, #3
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001a64:	e005      	b.n	8001a72 <D_CAN_ReceiveCallBack+0x92>
		case CAN_MAIN_ADDRESS:
			setIdx = CAN_MAIN;
 8001a66:	2304      	movs	r3, #4
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001a6a:	e002      	b.n	8001a72 <D_CAN_ReceiveCallBack+0x92>
		default:
			setIdx = CAN_MAIN;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001a70:	bf00      	nop
		}
		//test
		for(int i=0; i<size; i++){
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
 8001a76:	e00b      	b.n	8001a90 <D_CAN_ReceiveCallBack+0xb0>
			AllData[0][i] = RxData[i];
 8001a78:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <D_CAN_ReceiveCallBack+0xd8>)
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	4413      	add	r3, r2
 8001a7e:	7819      	ldrb	r1, [r3, #0]
 8001a80:	4a0e      	ldr	r2, [pc, #56]	; (8001abc <D_CAN_ReceiveCallBack+0xdc>)
 8001a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a84:	4413      	add	r3, r2
 8001a86:	460a      	mov	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<size; i++){
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8ef      	bhi.n	8001a78 <D_CAN_ReceiveCallBack+0x98>
		}
		AllData[1][0] = id;
 8001a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <D_CAN_ReceiveCallBack+0xdc>)
 8001a9e:	721a      	strb	r2, [r3, #8]
		AllData[1][1] = 254;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <D_CAN_ReceiveCallBack+0xdc>)
 8001aa2:	22fe      	movs	r2, #254	; 0xfe
 8001aa4:	725a      	strb	r2, [r3, #9]
		}
		*/
	}else{
		AllData[1][1] = 255;
	}
}
 8001aa6:	e002      	b.n	8001aae <D_CAN_ReceiveCallBack+0xce>
		AllData[1][1] = 255;
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <D_CAN_ReceiveCallBack+0xdc>)
 8001aaa:	22ff      	movs	r2, #255	; 0xff
 8001aac:	725a      	strb	r2, [r3, #9]
}
 8001aae:	bf00      	nop
 8001ab0:	3738      	adds	r7, #56	; 0x38
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000628 	.word	0x20000628
 8001abc:	200005f4 	.word	0x200005f4

08001ac0 <D_Slider_SystickUpdate>:
//static volatile uint32_t SndErrTime = 0;
//static volatile uint32_t RcvErrTime = 0;

//static volatile int SndCount = 0;

void D_Slider_SystickUpdate(){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
	static uint32_t sndTime = 0;
	static uint32_t rcvTime = 0;

	static uint8_t count = 0;

	int deltaT = G_System_counter - recent_System_counter;
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <D_Slider_SystickUpdate+0xb4>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <D_Slider_SystickUpdate+0xb8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	607b      	str	r3, [r7, #4]
	sndTime += deltaT;
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <D_Slider_SystickUpdate+0xbc>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a28      	ldr	r2, [pc, #160]	; (8001b7c <D_Slider_SystickUpdate+0xbc>)
 8001adc:	6013      	str	r3, [r2, #0]
	rcvTime += deltaT;
 8001ade:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <D_Slider_SystickUpdate+0xc0>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <D_Slider_SystickUpdate+0xc0>)
 8001ae8:	6013      	str	r3, [r2, #0]
	//SndErrTime += deltaT;
	//RcvErrTime += deltaT;
	recent_System_counter = G_System_counter;
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <D_Slider_SystickUpdate+0xb4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <D_Slider_SystickUpdate+0xb8>)
 8001af0:	6013      	str	r3, [r2, #0]

	if(!_firstSend){
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <D_Slider_SystickUpdate+0xc4>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	f083 0301 	eor.w	r3, r3, #1
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <D_Slider_SystickUpdate+0x4c>
		_firstSend = true;
 8001b00:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <D_Slider_SystickUpdate+0xc4>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
		D_Slider_Start();
 8001b06:	f000 f849 	bl	8001b9c <D_Slider_Start>
		//D_Slider_InitColorData();
		return;
 8001b0a:	e030      	b.n	8001b6e <D_Slider_SystickUpdate+0xae>
	}
	if(sndTime >= SLIDER_SEND_INTERVAL){
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <D_Slider_SystickUpdate+0xbc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d91f      	bls.n	8001b54 <D_Slider_SystickUpdate+0x94>
		sndTime = 0;
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <D_Slider_SystickUpdate+0xbc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
		count++;
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <D_Slider_SystickUpdate+0xc8>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <D_Slider_SystickUpdate+0xc8>)
 8001b24:	701a      	strb	r2, [r3, #0]
		if(count == 1){
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <D_Slider_SystickUpdate+0xc8>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d107      	bne.n	8001b3e <D_Slider_SystickUpdate+0x7e>
			D_Slider_Send((uint8_t*)SendData, COLORSEND_LENGTH + AdditionalPacket);
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <D_Slider_SystickUpdate+0xcc>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	330a      	adds	r3, #10
 8001b34:	4619      	mov	r1, r3
 8001b36:	4816      	ldr	r0, [pc, #88]	; (8001b90 <D_Slider_SystickUpdate+0xd0>)
 8001b38:	f001 f8fa 	bl	8002d30 <D_Slider_Send>
 8001b3c:	e003      	b.n	8001b46 <D_Slider_SystickUpdate+0x86>
		}else{
			D_Slider_Send((uint8_t*)SensorGetSendData, SENSORGET_LENGTH);
 8001b3e:	2106      	movs	r1, #6
 8001b40:	4814      	ldr	r0, [pc, #80]	; (8001b94 <D_Slider_SystickUpdate+0xd4>)
 8001b42:	f001 f8f5 	bl	8002d30 <D_Slider_Send>
		}
		if(count >= 10) count = 0;
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <D_Slider_SystickUpdate+0xc8>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b09      	cmp	r3, #9
 8001b4c:	d902      	bls.n	8001b54 <D_Slider_SystickUpdate+0x94>
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <D_Slider_SystickUpdate+0xc8>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
	}

	if(rcvTime >= SLIDER_RECEIVE_INTERVAL){
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <D_Slider_SystickUpdate+0xc0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d906      	bls.n	8001b6a <D_Slider_SystickUpdate+0xaa>
		rcvTime = 0;
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <D_Slider_SystickUpdate+0xc0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
		D_Slider_Receive((uint8_t*)RecvData, 10);
 8001b62:	210a      	movs	r1, #10
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <D_Slider_SystickUpdate+0xd8>)
 8001b66:	f001 f90b 	bl	8002d80 <D_Slider_Receive>
		//D_Slider_Receive((uint8_t*)RecvData, 10);
		RcvErrTime = 0;
	}
	*/

	D_Slider_LightingUpdate();
 8001b6a:	f000 f8c7 	bl	8001cfc <D_Slider_LightingUpdate>
	if(receiveFaultCount >= 30){
		D_Slider_Start();
		receiveFaultCount = 0;
	}
	*/
}
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200000b0 	.word	0x200000b0
 8001b78:	2000014c 	.word	0x2000014c
 8001b7c:	20000150 	.word	0x20000150
 8001b80:	20000154 	.word	0x20000154
 8001b84:	20000141 	.word	0x20000141
 8001b88:	20000158 	.word	0x20000158
 8001b8c:	200000f4 	.word	0x200000f4
 8001b90:	200000b4 	.word	0x200000b4
 8001b94:	200000d4 	.word	0x200000d4
 8001b98:	200000f8 	.word	0x200000f8

08001b9c <D_Slider_Start>:

void D_Slider_Start(void){
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
	SensorGetSendData[0] = FIRSTBYTE;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <D_Slider_Start+0x5c>)
 8001ba4:	22e0      	movs	r2, #224	; 0xe0
 8001ba6:	701a      	strb	r2, [r3, #0]
	SensorGetSendData[1] = ADDRESS;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <D_Slider_Start+0x5c>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	705a      	strb	r2, [r3, #1]
	SensorGetSendData[2] = SENSORGET_SEQNUM;
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <D_Slider_Start+0x5c>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	709a      	strb	r2, [r3, #2]
	SensorGetSendData[3] = SENSORGET_DATANUM;
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <D_Slider_Start+0x5c>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	70da      	strb	r2, [r3, #3]
	SensorGetSendData[4] = SENSORGET_CMD;
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <D_Slider_Start+0x5c>)
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	711a      	strb	r2, [r3, #4]
	uint8_t dataSum = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	e009      	b.n	8001bde <D_Slider_Start+0x42>
		dataSum += SensorGetSendData[i];
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <D_Slider_Start+0x5c>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	781a      	ldrb	r2, [r3, #0]
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	ddf2      	ble.n	8001bca <D_Slider_Start+0x2e>
	}
	SensorGetSendData[SENSORGET_LENGTH-1] = (uint8_t)dataSum;
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <D_Slider_Start+0x5c>)
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	7153      	strb	r3, [r2, #5]
	data[3] = 0xfe;
	had_completed_tx = true;
	had_completed_rx = true;
	D_Slider_Send((uint8_t*)data, 4);
	*/
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	200000d4 	.word	0x200000d4

08001bfc <D_Slider_SetLightingR>:

void D_Slider_SetLightingR(SliderLightingMode rightType, int pocketR){
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
	//LightingMode[0] = rightType;
	inPocket[0] = pocketR;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <D_Slider_SetLightingR+0x78>)
 8001c0e:	701a      	strb	r2, [r3, #0]
	if(rightType == SL_POCKET_IN){
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d124      	bne.n	8001c60 <D_Slider_SetLightingR+0x64>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d825      	bhi.n	8001c68 <D_Slider_SetLightingR+0x6c>
 8001c1c:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <D_Slider_SetLightingR+0x28>)
 8001c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c22:	bf00      	nop
 8001c24:	08001c39 	.word	0x08001c39
 8001c28:	08001c41 	.word	0x08001c41
 8001c2c:	08001c49 	.word	0x08001c49
 8001c30:	08001c51 	.word	0x08001c51
 8001c34:	08001c59 	.word	0x08001c59
		switch(pocketR){
		case 0:
			LightingMode[0] = SL_POCKET_IN_OUT;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <D_Slider_SetLightingR+0x7c>)
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	701a      	strb	r2, [r3, #0]
			break;
 8001c3e:	e013      	b.n	8001c68 <D_Slider_SetLightingR+0x6c>
		case 1:
			LightingMode[0] = SL_POCKET_IN_DIA;
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <D_Slider_SetLightingR+0x7c>)
 8001c42:	2206      	movs	r2, #6
 8001c44:	701a      	strb	r2, [r3, #0]
			break;
 8001c46:	e00f      	b.n	8001c68 <D_Slider_SetLightingR+0x6c>
		case 2:
			LightingMode[0] = SL_POCKET_IN_UP;
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <D_Slider_SetLightingR+0x7c>)
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	701a      	strb	r2, [r3, #0]
			break;
 8001c4e:	e00b      	b.n	8001c68 <D_Slider_SetLightingR+0x6c>
		case 3:
			LightingMode[0] = SL_POCKET_IN_DIA;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <D_Slider_SetLightingR+0x7c>)
 8001c52:	2206      	movs	r2, #6
 8001c54:	701a      	strb	r2, [r3, #0]
			break;
 8001c56:	e007      	b.n	8001c68 <D_Slider_SetLightingR+0x6c>
		case 4:
			LightingMode[0] = SL_POCKET_IN_OUT;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <D_Slider_SetLightingR+0x7c>)
 8001c5a:	2205      	movs	r2, #5
 8001c5c:	701a      	strb	r2, [r3, #0]
			break;
 8001c5e:	e003      	b.n	8001c68 <D_Slider_SetLightingR+0x6c>
		}
	}else{
		LightingMode[0] = rightType;
 8001c60:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <D_Slider_SetLightingR+0x7c>)
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	7013      	strb	r3, [r2, #0]
	}
}
 8001c66:	e7ff      	b.n	8001c68 <D_Slider_SetLightingR+0x6c>
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	20000148 	.word	0x20000148
 8001c78:	20000144 	.word	0x20000144

08001c7c <D_Slider_SetLightingL>:

void D_Slider_SetLightingL(SliderLightingMode leftType, int pocketL){
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
	//LightingMode[1] = leftType;
	inPocket[1] = pocketL;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <D_Slider_SetLightingL+0x78>)
 8001c8e:	705a      	strb	r2, [r3, #1]
	if(leftType == SL_POCKET_IN){
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d124      	bne.n	8001ce0 <D_Slider_SetLightingL+0x64>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d825      	bhi.n	8001ce8 <D_Slider_SetLightingL+0x6c>
 8001c9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <D_Slider_SetLightingL+0x28>)
 8001c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca2:	bf00      	nop
 8001ca4:	08001cb9 	.word	0x08001cb9
 8001ca8:	08001cc1 	.word	0x08001cc1
 8001cac:	08001cc9 	.word	0x08001cc9
 8001cb0:	08001cd1 	.word	0x08001cd1
 8001cb4:	08001cd9 	.word	0x08001cd9
		switch(pocketL){
		case 0:
			LightingMode[1] = SL_POCKET_IN_OUT;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <D_Slider_SetLightingL+0x7c>)
 8001cba:	2205      	movs	r2, #5
 8001cbc:	705a      	strb	r2, [r3, #1]
			break;
 8001cbe:	e013      	b.n	8001ce8 <D_Slider_SetLightingL+0x6c>
		case 1:
			LightingMode[1] = SL_POCKET_IN_DIA;
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <D_Slider_SetLightingL+0x7c>)
 8001cc2:	2206      	movs	r2, #6
 8001cc4:	705a      	strb	r2, [r3, #1]
			break;
 8001cc6:	e00f      	b.n	8001ce8 <D_Slider_SetLightingL+0x6c>
		case 2:
			LightingMode[1] = SL_POCKET_IN_UP;
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <D_Slider_SetLightingL+0x7c>)
 8001cca:	2204      	movs	r2, #4
 8001ccc:	705a      	strb	r2, [r3, #1]
			break;
 8001cce:	e00b      	b.n	8001ce8 <D_Slider_SetLightingL+0x6c>
		case 3:
			LightingMode[1] = SL_POCKET_IN_DIA;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <D_Slider_SetLightingL+0x7c>)
 8001cd2:	2206      	movs	r2, #6
 8001cd4:	705a      	strb	r2, [r3, #1]
			break;
 8001cd6:	e007      	b.n	8001ce8 <D_Slider_SetLightingL+0x6c>
		case 4:
			LightingMode[1] = SL_POCKET_IN_OUT;
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <D_Slider_SetLightingL+0x7c>)
 8001cda:	2205      	movs	r2, #5
 8001cdc:	705a      	strb	r2, [r3, #1]
			break;
 8001cde:	e003      	b.n	8001ce8 <D_Slider_SetLightingL+0x6c>
		}
	}else{
		LightingMode[1] = leftType;
 8001ce0:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <D_Slider_SetLightingL+0x7c>)
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	7053      	strb	r3, [r2, #1]
	}
}
 8001ce6:	e7ff      	b.n	8001ce8 <D_Slider_SetLightingL+0x6c>
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	20000148 	.word	0x20000148
 8001cf8:	20000144 	.word	0x20000144

08001cfc <D_Slider_LightingUpdate>:

void D_Slider_LightingUpdate(void){
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
	static bool _changeMode[2] = {false};
	static bool _animUpdate_1[2] = {false};
	static bool _animUpdate_2[2] = {false};
	static int counter1[2] = {0};

	int nowCount = G_System_counter;
 8001d02:	4ba9      	ldr	r3, [pc, #676]	; (8001fa8 <D_Slider_LightingUpdate+0x2ac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	607b      	str	r3, [r7, #4]

	for(int side = 0; side < 2; side++){
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	f000 bf6f 	b.w	8002bee <D_Slider_LightingUpdate+0xef2>
		updateCount[side] += nowCount - recentUpdateCount;
 8001d10:	4aa6      	ldr	r2, [pc, #664]	; (8001fac <D_Slider_LightingUpdate+0x2b0>)
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d18:	4ba5      	ldr	r3, [pc, #660]	; (8001fb0 <D_Slider_LightingUpdate+0x2b4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	1acb      	subs	r3, r1, r3
 8001d20:	441a      	add	r2, r3
 8001d22:	49a2      	ldr	r1, [pc, #648]	; (8001fac <D_Slider_LightingUpdate+0x2b0>)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(LightingMode[side] != recentMode[side] || inPocket[side] != recentInPocket[side]){
 8001d2a:	4aa2      	ldr	r2, [pc, #648]	; (8001fb4 <D_Slider_LightingUpdate+0x2b8>)
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	4413      	add	r3, r2
 8001d30:	781a      	ldrb	r2, [r3, #0]
 8001d32:	49a1      	ldr	r1, [pc, #644]	; (8001fb8 <D_Slider_LightingUpdate+0x2bc>)
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	440b      	add	r3, r1
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d109      	bne.n	8001d52 <D_Slider_LightingUpdate+0x56>
 8001d3e:	4a9f      	ldr	r2, [pc, #636]	; (8001fbc <D_Slider_LightingUpdate+0x2c0>)
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	4413      	add	r3, r2
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	499e      	ldr	r1, [pc, #632]	; (8001fc0 <D_Slider_LightingUpdate+0x2c4>)
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	440b      	add	r3, r1
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d013      	beq.n	8001d7a <D_Slider_LightingUpdate+0x7e>
			_changeMode[side] = true;
 8001d52:	4a9c      	ldr	r2, [pc, #624]	; (8001fc4 <D_Slider_LightingUpdate+0x2c8>)
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	4413      	add	r3, r2
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
			updateCount[side] = 0;
 8001d5c:	4a93      	ldr	r2, [pc, #588]	; (8001fac <D_Slider_LightingUpdate+0x2b0>)
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	2100      	movs	r1, #0
 8001d62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			_animUpdate_1[side] = false;
 8001d66:	4a98      	ldr	r2, [pc, #608]	; (8001fc8 <D_Slider_LightingUpdate+0x2cc>)
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	4413      	add	r3, r2
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
			_animUpdate_2[side] = false;
 8001d70:	4a96      	ldr	r2, [pc, #600]	; (8001fcc <D_Slider_LightingUpdate+0x2d0>)
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	4413      	add	r3, r2
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
		}
		recentMode[side] = LightingMode[side];
 8001d7a:	4a8e      	ldr	r2, [pc, #568]	; (8001fb4 <D_Slider_LightingUpdate+0x2b8>)
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	4413      	add	r3, r2
 8001d80:	7819      	ldrb	r1, [r3, #0]
 8001d82:	4a8d      	ldr	r2, [pc, #564]	; (8001fb8 <D_Slider_LightingUpdate+0x2bc>)
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	4413      	add	r3, r2
 8001d88:	460a      	mov	r2, r1
 8001d8a:	701a      	strb	r2, [r3, #0]
		recentInPocket[side] = inPocket[side];
 8001d8c:	4a8b      	ldr	r2, [pc, #556]	; (8001fbc <D_Slider_LightingUpdate+0x2c0>)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	4413      	add	r3, r2
 8001d92:	7819      	ldrb	r1, [r3, #0]
 8001d94:	4a8a      	ldr	r2, [pc, #552]	; (8001fc0 <D_Slider_LightingUpdate+0x2c4>)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	4413      	add	r3, r2
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	701a      	strb	r2, [r3, #0]
		switch(LightingMode[side]){
 8001d9e:	4a85      	ldr	r2, [pc, #532]	; (8001fb4 <D_Slider_LightingUpdate+0x2b8>)
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	4413      	add	r3, r2
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	f200 871e 	bhi.w	8002be8 <D_Slider_LightingUpdate+0xeec>
 8001dac:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <D_Slider_LightingUpdate+0xb8>)
 8001dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db2:	bf00      	nop
 8001db4:	08001dd1 	.word	0x08001dd1
 8001db8:	08001e51 	.word	0x08001e51
 8001dbc:	08001ed1 	.word	0x08001ed1
 8001dc0:	08002be9 	.word	0x08002be9
 8001dc4:	0800297b 	.word	0x0800297b
 8001dc8:	08002051 	.word	0x08002051
 8001dcc:	0800243b 	.word	0x0800243b
		case SL_DISABLE:
			if(_changeMode[side]){
 8001dd0:	4a7c      	ldr	r2, [pc, #496]	; (8001fc4 <D_Slider_LightingUpdate+0x2c8>)
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	4413      	add	r3, r2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 86fa 	beq.w	8002bd2 <D_Slider_LightingUpdate+0xed6>
				for(int i=0; i<5; i++){
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
 8001de2:	e02b      	b.n	8001e3c <D_Slider_LightingUpdate+0x140>
					slideColor[side][i][0] = false;
 8001de4:	487a      	ldr	r0, [pc, #488]	; (8001fd0 <D_Slider_LightingUpdate+0x2d4>)
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dea:	461a      	mov	r2, r3
 8001dec:	0052      	lsls	r2, r2, #1
 8001dee:	441a      	add	r2, r3
 8001df0:	460b      	mov	r3, r1
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	1a5b      	subs	r3, r3, r1
 8001df6:	4413      	add	r3, r2
 8001df8:	4403      	add	r3, r0
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 8001dfe:	4874      	ldr	r0, [pc, #464]	; (8001fd0 <D_Slider_LightingUpdate+0x2d4>)
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e04:	461a      	mov	r2, r3
 8001e06:	0052      	lsls	r2, r2, #1
 8001e08:	441a      	add	r2, r3
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1a5b      	subs	r3, r3, r1
 8001e10:	4413      	add	r3, r2
 8001e12:	4403      	add	r3, r0
 8001e14:	3301      	adds	r3, #1
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 8001e1a:	486d      	ldr	r0, [pc, #436]	; (8001fd0 <D_Slider_LightingUpdate+0x2d4>)
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e20:	461a      	mov	r2, r3
 8001e22:	0052      	lsls	r2, r2, #1
 8001e24:	441a      	add	r2, r3
 8001e26:	460b      	mov	r3, r1
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	1a5b      	subs	r3, r3, r1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4403      	add	r3, r0
 8001e30:	3302      	adds	r3, #2
 8001e32:	2200      	movs	r2, #0
 8001e34:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	623b      	str	r3, [r7, #32]
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	ddd0      	ble.n	8001de4 <D_Slider_LightingUpdate+0xe8>
				}
				_changeMode[side] = false;
 8001e42:	4a60      	ldr	r2, [pc, #384]	; (8001fc4 <D_Slider_LightingUpdate+0x2c8>)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	4413      	add	r3, r2
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001e4c:	f000 bec1 	b.w	8002bd2 <D_Slider_LightingUpdate+0xed6>

		case SL_NORMAL:
			if(_changeMode[side]){
 8001e50:	4a5c      	ldr	r2, [pc, #368]	; (8001fc4 <D_Slider_LightingUpdate+0x2c8>)
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	4413      	add	r3, r2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 86bc 	beq.w	8002bd6 <D_Slider_LightingUpdate+0xeda>
				for(int i=0; i<5; i++){
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	e02b      	b.n	8001ebc <D_Slider_LightingUpdate+0x1c0>
					slideColor[side][i][0] = true;
 8001e64:	485a      	ldr	r0, [pc, #360]	; (8001fd0 <D_Slider_LightingUpdate+0x2d4>)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	0052      	lsls	r2, r2, #1
 8001e6e:	441a      	add	r2, r3
 8001e70:	460b      	mov	r3, r1
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	1a5b      	subs	r3, r3, r1
 8001e76:	4413      	add	r3, r2
 8001e78:	4403      	add	r3, r0
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = true;
 8001e7e:	4854      	ldr	r0, [pc, #336]	; (8001fd0 <D_Slider_LightingUpdate+0x2d4>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e84:	461a      	mov	r2, r3
 8001e86:	0052      	lsls	r2, r2, #1
 8001e88:	441a      	add	r2, r3
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	011b      	lsls	r3, r3, #4
 8001e8e:	1a5b      	subs	r3, r3, r1
 8001e90:	4413      	add	r3, r2
 8001e92:	4403      	add	r3, r0
 8001e94:	3301      	adds	r3, #1
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = true;
 8001e9a:	484d      	ldr	r0, [pc, #308]	; (8001fd0 <D_Slider_LightingUpdate+0x2d4>)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	0052      	lsls	r2, r2, #1
 8001ea4:	441a      	add	r2, r3
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	1a5b      	subs	r3, r3, r1
 8001eac:	4413      	add	r3, r2
 8001eae:	4403      	add	r3, r0
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	ddd0      	ble.n	8001e64 <D_Slider_LightingUpdate+0x168>
				}
				_changeMode[side] = false;
 8001ec2:	4a40      	ldr	r2, [pc, #256]	; (8001fc4 <D_Slider_LightingUpdate+0x2c8>)
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	4413      	add	r3, r2
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001ecc:	f000 be83 	b.w	8002bd6 <D_Slider_LightingUpdate+0xeda>

		case SL_NORMAL_FLASH:
			if(updateCount[side] <= 1700 && !_animUpdate_1[side]){
 8001ed0:	4a36      	ldr	r2, [pc, #216]	; (8001fac <D_Slider_LightingUpdate+0x2b0>)
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001edc:	4293      	cmp	r3, r2
 8001ede:	dc44      	bgt.n	8001f6a <D_Slider_LightingUpdate+0x26e>
 8001ee0:	4a39      	ldr	r2, [pc, #228]	; (8001fc8 <D_Slider_LightingUpdate+0x2cc>)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	4413      	add	r3, r2
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	f083 0301 	eor.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d03b      	beq.n	8001f6a <D_Slider_LightingUpdate+0x26e>
				_animUpdate_1[side] = true;
 8001ef2:	4a35      	ldr	r2, [pc, #212]	; (8001fc8 <D_Slider_LightingUpdate+0x2cc>)
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	4413      	add	r3, r2
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8001efc:	4a33      	ldr	r2, [pc, #204]	; (8001fcc <D_Slider_LightingUpdate+0x2d0>)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	4413      	add	r3, r2
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	e02b      	b.n	8001f64 <D_Slider_LightingUpdate+0x268>
					slideColor[side][i][0] = true;
 8001f0c:	4830      	ldr	r0, [pc, #192]	; (8001fd0 <D_Slider_LightingUpdate+0x2d4>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f12:	461a      	mov	r2, r3
 8001f14:	0052      	lsls	r2, r2, #1
 8001f16:	441a      	add	r2, r3
 8001f18:	460b      	mov	r3, r1
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	1a5b      	subs	r3, r3, r1
 8001f1e:	4413      	add	r3, r2
 8001f20:	4403      	add	r3, r0
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = true;
 8001f26:	482a      	ldr	r0, [pc, #168]	; (8001fd0 <D_Slider_LightingUpdate+0x2d4>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	0052      	lsls	r2, r2, #1
 8001f30:	441a      	add	r2, r3
 8001f32:	460b      	mov	r3, r1
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	1a5b      	subs	r3, r3, r1
 8001f38:	4413      	add	r3, r2
 8001f3a:	4403      	add	r3, r0
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = true;
 8001f42:	4823      	ldr	r0, [pc, #140]	; (8001fd0 <D_Slider_LightingUpdate+0x2d4>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f48:	461a      	mov	r2, r3
 8001f4a:	0052      	lsls	r2, r2, #1
 8001f4c:	441a      	add	r2, r3
 8001f4e:	460b      	mov	r3, r1
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	1a5b      	subs	r3, r3, r1
 8001f54:	4413      	add	r3, r2
 8001f56:	4403      	add	r3, r0
 8001f58:	3302      	adds	r3, #2
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	3301      	adds	r3, #1
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	ddd0      	ble.n	8001f0c <D_Slider_LightingUpdate+0x210>
				}
			}
			if(updateCount[side] > 1700 && !_animUpdate_2[side]){
 8001f6a:	4a10      	ldr	r2, [pc, #64]	; (8001fac <D_Slider_LightingUpdate+0x2b0>)
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f72:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001f76:	4293      	cmp	r3, r2
 8001f78:	dd5b      	ble.n	8002032 <D_Slider_LightingUpdate+0x336>
 8001f7a:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <D_Slider_LightingUpdate+0x2d0>)
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	4413      	add	r3, r2
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f083 0301 	eor.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d052      	beq.n	8002032 <D_Slider_LightingUpdate+0x336>
				_animUpdate_1[side] = false;
 8001f8c:	4a0e      	ldr	r2, [pc, #56]	; (8001fc8 <D_Slider_LightingUpdate+0x2cc>)
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	4413      	add	r3, r2
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8001f96:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <D_Slider_LightingUpdate+0x2d0>)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	4413      	add	r3, r2
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e042      	b.n	800202c <D_Slider_LightingUpdate+0x330>
 8001fa6:	bf00      	nop
 8001fa8:	200000b0 	.word	0x200000b0
 8001fac:	2000015c 	.word	0x2000015c
 8001fb0:	20000164 	.word	0x20000164
 8001fb4:	20000144 	.word	0x20000144
 8001fb8:	20000168 	.word	0x20000168
 8001fbc:	20000148 	.word	0x20000148
 8001fc0:	2000016c 	.word	0x2000016c
 8001fc4:	20000170 	.word	0x20000170
 8001fc8:	20000174 	.word	0x20000174
 8001fcc:	20000178 	.word	0x20000178
 8001fd0:	2000017c 	.word	0x2000017c
					slideColor[side][i][0] = false;
 8001fd4:	4823      	ldr	r0, [pc, #140]	; (8002064 <D_Slider_LightingUpdate+0x368>)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fda:	461a      	mov	r2, r3
 8001fdc:	0052      	lsls	r2, r2, #1
 8001fde:	441a      	add	r2, r3
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	1a5b      	subs	r3, r3, r1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4403      	add	r3, r0
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 8001fee:	481d      	ldr	r0, [pc, #116]	; (8002064 <D_Slider_LightingUpdate+0x368>)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	0052      	lsls	r2, r2, #1
 8001ff8:	441a      	add	r2, r3
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	1a5b      	subs	r3, r3, r1
 8002000:	4413      	add	r3, r2
 8002002:	4403      	add	r3, r0
 8002004:	3301      	adds	r3, #1
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 800200a:	4816      	ldr	r0, [pc, #88]	; (8002064 <D_Slider_LightingUpdate+0x368>)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002010:	461a      	mov	r2, r3
 8002012:	0052      	lsls	r2, r2, #1
 8002014:	441a      	add	r2, r3
 8002016:	460b      	mov	r3, r1
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	1a5b      	subs	r3, r3, r1
 800201c:	4413      	add	r3, r2
 800201e:	4403      	add	r3, r0
 8002020:	3302      	adds	r3, #2
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3301      	adds	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b04      	cmp	r3, #4
 8002030:	ddd0      	ble.n	8001fd4 <D_Slider_LightingUpdate+0x2d8>
				}
			}
			if(updateCount[side] >= 2000) updateCount[side] = 0;
 8002032:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <D_Slider_LightingUpdate+0x36c>)
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800203e:	f2c0 85cc 	blt.w	8002bda <D_Slider_LightingUpdate+0xede>
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <D_Slider_LightingUpdate+0x36c>)
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	2100      	movs	r1, #0
 8002048:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800204c:	f000 bdc5 	b.w	8002bda <D_Slider_LightingUpdate+0xede>

		case SL_POCKET_IN_OUT:
			if(_changeMode[side]){
 8002050:	4a06      	ldr	r2, [pc, #24]	; (800206c <D_Slider_LightingUpdate+0x370>)
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	4413      	add	r3, r2
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d03d      	beq.n	80020d8 <D_Slider_LightingUpdate+0x3dc>
				for(int i=0; i<5; i++){
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	e032      	b.n	80020c8 <D_Slider_LightingUpdate+0x3cc>
 8002062:	bf00      	nop
 8002064:	2000017c 	.word	0x2000017c
 8002068:	2000015c 	.word	0x2000015c
 800206c:	20000170 	.word	0x20000170
					slideColor[side][i][0] = false;
 8002070:	48ba      	ldr	r0, [pc, #744]	; (800235c <D_Slider_LightingUpdate+0x660>)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002076:	461a      	mov	r2, r3
 8002078:	0052      	lsls	r2, r2, #1
 800207a:	441a      	add	r2, r3
 800207c:	460b      	mov	r3, r1
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	1a5b      	subs	r3, r3, r1
 8002082:	4413      	add	r3, r2
 8002084:	4403      	add	r3, r0
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 800208a:	48b4      	ldr	r0, [pc, #720]	; (800235c <D_Slider_LightingUpdate+0x660>)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002090:	461a      	mov	r2, r3
 8002092:	0052      	lsls	r2, r2, #1
 8002094:	441a      	add	r2, r3
 8002096:	460b      	mov	r3, r1
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a5b      	subs	r3, r3, r1
 800209c:	4413      	add	r3, r2
 800209e:	4403      	add	r3, r0
 80020a0:	3301      	adds	r3, #1
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 80020a6:	48ad      	ldr	r0, [pc, #692]	; (800235c <D_Slider_LightingUpdate+0x660>)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ac:	461a      	mov	r2, r3
 80020ae:	0052      	lsls	r2, r2, #1
 80020b0:	441a      	add	r2, r3
 80020b2:	460b      	mov	r3, r1
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	1a5b      	subs	r3, r3, r1
 80020b8:	4413      	add	r3, r2
 80020ba:	4403      	add	r3, r0
 80020bc:	3302      	adds	r3, #2
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	3301      	adds	r3, #1
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	ddd0      	ble.n	8002070 <D_Slider_LightingUpdate+0x374>
				}
				_changeMode[side] = false;
 80020ce:	4aa4      	ldr	r2, [pc, #656]	; (8002360 <D_Slider_LightingUpdate+0x664>)
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	4413      	add	r3, r2
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] < 100 && !_animUpdate_1[side]){
 80020d8:	4aa2      	ldr	r2, [pc, #648]	; (8002364 <D_Slider_LightingUpdate+0x668>)
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	2b63      	cmp	r3, #99	; 0x63
 80020e2:	dc44      	bgt.n	800216e <D_Slider_LightingUpdate+0x472>
 80020e4:	4aa0      	ldr	r2, [pc, #640]	; (8002368 <D_Slider_LightingUpdate+0x66c>)
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	f083 0301 	eor.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d03b      	beq.n	800216e <D_Slider_LightingUpdate+0x472>
				_animUpdate_1[side] = true;
 80020f6:	4a9c      	ldr	r2, [pc, #624]	; (8002368 <D_Slider_LightingUpdate+0x66c>)
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	4413      	add	r3, r2
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8002100:	4a9a      	ldr	r2, [pc, #616]	; (800236c <D_Slider_LightingUpdate+0x670>)
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	4413      	add	r3, r2
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 800210a:	4a99      	ldr	r2, [pc, #612]	; (8002370 <D_Slider_LightingUpdate+0x674>)
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	4413      	add	r3, r2
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	4892      	ldr	r0, [pc, #584]	; (800235c <D_Slider_LightingUpdate+0x660>)
 8002114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002116:	461a      	mov	r2, r3
 8002118:	0052      	lsls	r2, r2, #1
 800211a:	441a      	add	r2, r3
 800211c:	460b      	mov	r3, r1
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	1a5b      	subs	r3, r3, r1
 8002122:	4413      	add	r3, r2
 8002124:	4403      	add	r3, r0
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 800212a:	4a91      	ldr	r2, [pc, #580]	; (8002370 <D_Slider_LightingUpdate+0x674>)
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	488a      	ldr	r0, [pc, #552]	; (800235c <D_Slider_LightingUpdate+0x660>)
 8002134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002136:	461a      	mov	r2, r3
 8002138:	0052      	lsls	r2, r2, #1
 800213a:	441a      	add	r2, r3
 800213c:	460b      	mov	r3, r1
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a5b      	subs	r3, r3, r1
 8002142:	4413      	add	r3, r2
 8002144:	4403      	add	r3, r0
 8002146:	3301      	adds	r3, #1
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 800214c:	4a88      	ldr	r2, [pc, #544]	; (8002370 <D_Slider_LightingUpdate+0x674>)
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	4413      	add	r3, r2
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4881      	ldr	r0, [pc, #516]	; (800235c <D_Slider_LightingUpdate+0x660>)
 8002156:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002158:	461a      	mov	r2, r3
 800215a:	0052      	lsls	r2, r2, #1
 800215c:	441a      	add	r2, r3
 800215e:	460b      	mov	r3, r1
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	1a5b      	subs	r3, r3, r1
 8002164:	4413      	add	r3, r2
 8002166:	4403      	add	r3, r0
 8002168:	3302      	adds	r3, #2
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 100 && updateCount[side] < 200 && !_animUpdate_2[side]){
 800216e:	4a7d      	ldr	r2, [pc, #500]	; (8002364 <D_Slider_LightingUpdate+0x668>)
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002176:	2b63      	cmp	r3, #99	; 0x63
 8002178:	dd4a      	ble.n	8002210 <D_Slider_LightingUpdate+0x514>
 800217a:	4a7a      	ldr	r2, [pc, #488]	; (8002364 <D_Slider_LightingUpdate+0x668>)
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002182:	2bc7      	cmp	r3, #199	; 0xc7
 8002184:	dc44      	bgt.n	8002210 <D_Slider_LightingUpdate+0x514>
 8002186:	4a79      	ldr	r2, [pc, #484]	; (800236c <D_Slider_LightingUpdate+0x670>)
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	4413      	add	r3, r2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	f083 0301 	eor.w	r3, r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d03b      	beq.n	8002210 <D_Slider_LightingUpdate+0x514>
				_animUpdate_1[side] = false;
 8002198:	4a73      	ldr	r2, [pc, #460]	; (8002368 <D_Slider_LightingUpdate+0x66c>)
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	4413      	add	r3, r2
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 80021a2:	4a72      	ldr	r2, [pc, #456]	; (800236c <D_Slider_LightingUpdate+0x670>)
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	4413      	add	r3, r2
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 80021ac:	4a70      	ldr	r2, [pc, #448]	; (8002370 <D_Slider_LightingUpdate+0x674>)
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	4413      	add	r3, r2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4869      	ldr	r0, [pc, #420]	; (800235c <D_Slider_LightingUpdate+0x660>)
 80021b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021b8:	461a      	mov	r2, r3
 80021ba:	0052      	lsls	r2, r2, #1
 80021bc:	441a      	add	r2, r3
 80021be:	460b      	mov	r3, r1
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	1a5b      	subs	r3, r3, r1
 80021c4:	4413      	add	r3, r2
 80021c6:	4403      	add	r3, r0
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = false;
 80021cc:	4a68      	ldr	r2, [pc, #416]	; (8002370 <D_Slider_LightingUpdate+0x674>)
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	4413      	add	r3, r2
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4861      	ldr	r0, [pc, #388]	; (800235c <D_Slider_LightingUpdate+0x660>)
 80021d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d8:	461a      	mov	r2, r3
 80021da:	0052      	lsls	r2, r2, #1
 80021dc:	441a      	add	r2, r3
 80021de:	460b      	mov	r3, r1
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	1a5b      	subs	r3, r3, r1
 80021e4:	4413      	add	r3, r2
 80021e6:	4403      	add	r3, r0
 80021e8:	3301      	adds	r3, #1
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = false;
 80021ee:	4a60      	ldr	r2, [pc, #384]	; (8002370 <D_Slider_LightingUpdate+0x674>)
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	4413      	add	r3, r2
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	4859      	ldr	r0, [pc, #356]	; (800235c <D_Slider_LightingUpdate+0x660>)
 80021f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021fa:	461a      	mov	r2, r3
 80021fc:	0052      	lsls	r2, r2, #1
 80021fe:	441a      	add	r2, r3
 8002200:	460b      	mov	r3, r1
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a5b      	subs	r3, r3, r1
 8002206:	4413      	add	r3, r2
 8002208:	4403      	add	r3, r0
 800220a:	3302      	adds	r3, #2
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 200 && updateCount[side] < 375 && !_animUpdate_1[side]){
 8002210:	4a54      	ldr	r2, [pc, #336]	; (8002364 <D_Slider_LightingUpdate+0x668>)
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002218:	2bc7      	cmp	r3, #199	; 0xc7
 800221a:	dd4b      	ble.n	80022b4 <D_Slider_LightingUpdate+0x5b8>
 800221c:	4a51      	ldr	r2, [pc, #324]	; (8002364 <D_Slider_LightingUpdate+0x668>)
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002224:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 8002228:	dc44      	bgt.n	80022b4 <D_Slider_LightingUpdate+0x5b8>
 800222a:	4a4f      	ldr	r2, [pc, #316]	; (8002368 <D_Slider_LightingUpdate+0x66c>)
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	4413      	add	r3, r2
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	f083 0301 	eor.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d03b      	beq.n	80022b4 <D_Slider_LightingUpdate+0x5b8>
				_animUpdate_1[side] = true;
 800223c:	4a4a      	ldr	r2, [pc, #296]	; (8002368 <D_Slider_LightingUpdate+0x66c>)
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	4413      	add	r3, r2
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8002246:	4a49      	ldr	r2, [pc, #292]	; (800236c <D_Slider_LightingUpdate+0x670>)
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	4413      	add	r3, r2
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8002250:	4a47      	ldr	r2, [pc, #284]	; (8002370 <D_Slider_LightingUpdate+0x674>)
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	4413      	add	r3, r2
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4840      	ldr	r0, [pc, #256]	; (800235c <D_Slider_LightingUpdate+0x660>)
 800225a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800225c:	461a      	mov	r2, r3
 800225e:	0052      	lsls	r2, r2, #1
 8002260:	441a      	add	r2, r3
 8002262:	460b      	mov	r3, r1
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	1a5b      	subs	r3, r3, r1
 8002268:	4413      	add	r3, r2
 800226a:	4403      	add	r3, r0
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8002270:	4a3f      	ldr	r2, [pc, #252]	; (8002370 <D_Slider_LightingUpdate+0x674>)
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	4413      	add	r3, r2
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	4838      	ldr	r0, [pc, #224]	; (800235c <D_Slider_LightingUpdate+0x660>)
 800227a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227c:	461a      	mov	r2, r3
 800227e:	0052      	lsls	r2, r2, #1
 8002280:	441a      	add	r2, r3
 8002282:	460b      	mov	r3, r1
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	1a5b      	subs	r3, r3, r1
 8002288:	4413      	add	r3, r2
 800228a:	4403      	add	r3, r0
 800228c:	3301      	adds	r3, #1
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8002292:	4a37      	ldr	r2, [pc, #220]	; (8002370 <D_Slider_LightingUpdate+0x674>)
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	4413      	add	r3, r2
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	4830      	ldr	r0, [pc, #192]	; (800235c <D_Slider_LightingUpdate+0x660>)
 800229c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800229e:	461a      	mov	r2, r3
 80022a0:	0052      	lsls	r2, r2, #1
 80022a2:	441a      	add	r2, r3
 80022a4:	460b      	mov	r3, r1
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a5b      	subs	r3, r3, r1
 80022aa:	4413      	add	r3, r2
 80022ac:	4403      	add	r3, r0
 80022ae:	3302      	adds	r3, #2
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 375 &&updateCount[side] < 475 && !_animUpdate_2[side]){
 80022b4:	4a2b      	ldr	r2, [pc, #172]	; (8002364 <D_Slider_LightingUpdate+0x668>)
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022bc:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 80022c0:	dd58      	ble.n	8002374 <D_Slider_LightingUpdate+0x678>
 80022c2:	4a28      	ldr	r2, [pc, #160]	; (8002364 <D_Slider_LightingUpdate+0x668>)
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ca:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 80022ce:	dc51      	bgt.n	8002374 <D_Slider_LightingUpdate+0x678>
 80022d0:	4a26      	ldr	r2, [pc, #152]	; (800236c <D_Slider_LightingUpdate+0x670>)
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	4413      	add	r3, r2
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	f083 0301 	eor.w	r3, r3, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d048      	beq.n	8002374 <D_Slider_LightingUpdate+0x678>
				_animUpdate_1[side] = false;
 80022e2:	4a21      	ldr	r2, [pc, #132]	; (8002368 <D_Slider_LightingUpdate+0x66c>)
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	4413      	add	r3, r2
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 80022ec:	4a1f      	ldr	r2, [pc, #124]	; (800236c <D_Slider_LightingUpdate+0x670>)
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	4413      	add	r3, r2
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 80022f6:	4a1e      	ldr	r2, [pc, #120]	; (8002370 <D_Slider_LightingUpdate+0x674>)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	4413      	add	r3, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	4817      	ldr	r0, [pc, #92]	; (800235c <D_Slider_LightingUpdate+0x660>)
 8002300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002302:	461a      	mov	r2, r3
 8002304:	0052      	lsls	r2, r2, #1
 8002306:	441a      	add	r2, r3
 8002308:	460b      	mov	r3, r1
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a5b      	subs	r3, r3, r1
 800230e:	4413      	add	r3, r2
 8002310:	4403      	add	r3, r0
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = false;
 8002316:	4a16      	ldr	r2, [pc, #88]	; (8002370 <D_Slider_LightingUpdate+0x674>)
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	4413      	add	r3, r2
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	480f      	ldr	r0, [pc, #60]	; (800235c <D_Slider_LightingUpdate+0x660>)
 8002320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002322:	461a      	mov	r2, r3
 8002324:	0052      	lsls	r2, r2, #1
 8002326:	441a      	add	r2, r3
 8002328:	460b      	mov	r3, r1
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1a5b      	subs	r3, r3, r1
 800232e:	4413      	add	r3, r2
 8002330:	4403      	add	r3, r0
 8002332:	3301      	adds	r3, #1
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = false;
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <D_Slider_LightingUpdate+0x674>)
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	4413      	add	r3, r2
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4806      	ldr	r0, [pc, #24]	; (800235c <D_Slider_LightingUpdate+0x660>)
 8002342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002344:	461a      	mov	r2, r3
 8002346:	0052      	lsls	r2, r2, #1
 8002348:	441a      	add	r2, r3
 800234a:	460b      	mov	r3, r1
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a5b      	subs	r3, r3, r1
 8002350:	4413      	add	r3, r2
 8002352:	4403      	add	r3, r0
 8002354:	3302      	adds	r3, #2
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e00b      	b.n	8002374 <D_Slider_LightingUpdate+0x678>
 800235c:	2000017c 	.word	0x2000017c
 8002360:	20000170 	.word	0x20000170
 8002364:	2000015c 	.word	0x2000015c
 8002368:	20000174 	.word	0x20000174
 800236c:	20000178 	.word	0x20000178
 8002370:	20000148 	.word	0x20000148
			}
			if(updateCount[side] >= 475 &&updateCount[side] < 650 && !_animUpdate_1[side]){
 8002374:	4a35      	ldr	r2, [pc, #212]	; (800244c <D_Slider_LightingUpdate+0x750>)
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237c:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 8002380:	dd4c      	ble.n	800241c <D_Slider_LightingUpdate+0x720>
 8002382:	4a32      	ldr	r2, [pc, #200]	; (800244c <D_Slider_LightingUpdate+0x750>)
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238a:	f240 2289 	movw	r2, #649	; 0x289
 800238e:	4293      	cmp	r3, r2
 8002390:	dc44      	bgt.n	800241c <D_Slider_LightingUpdate+0x720>
 8002392:	4a2f      	ldr	r2, [pc, #188]	; (8002450 <D_Slider_LightingUpdate+0x754>)
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	4413      	add	r3, r2
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	f083 0301 	eor.w	r3, r3, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d03b      	beq.n	800241c <D_Slider_LightingUpdate+0x720>
				_animUpdate_1[side] = true;
 80023a4:	4a2a      	ldr	r2, [pc, #168]	; (8002450 <D_Slider_LightingUpdate+0x754>)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	4413      	add	r3, r2
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 80023ae:	4a29      	ldr	r2, [pc, #164]	; (8002454 <D_Slider_LightingUpdate+0x758>)
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	4413      	add	r3, r2
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 80023b8:	4a27      	ldr	r2, [pc, #156]	; (8002458 <D_Slider_LightingUpdate+0x75c>)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	4413      	add	r3, r2
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	4826      	ldr	r0, [pc, #152]	; (800245c <D_Slider_LightingUpdate+0x760>)
 80023c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c4:	461a      	mov	r2, r3
 80023c6:	0052      	lsls	r2, r2, #1
 80023c8:	441a      	add	r2, r3
 80023ca:	460b      	mov	r3, r1
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	1a5b      	subs	r3, r3, r1
 80023d0:	4413      	add	r3, r2
 80023d2:	4403      	add	r3, r0
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 80023d8:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <D_Slider_LightingUpdate+0x75c>)
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	4413      	add	r3, r2
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	481e      	ldr	r0, [pc, #120]	; (800245c <D_Slider_LightingUpdate+0x760>)
 80023e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e4:	461a      	mov	r2, r3
 80023e6:	0052      	lsls	r2, r2, #1
 80023e8:	441a      	add	r2, r3
 80023ea:	460b      	mov	r3, r1
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a5b      	subs	r3, r3, r1
 80023f0:	4413      	add	r3, r2
 80023f2:	4403      	add	r3, r0
 80023f4:	3301      	adds	r3, #1
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 80023fa:	4a17      	ldr	r2, [pc, #92]	; (8002458 <D_Slider_LightingUpdate+0x75c>)
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	4413      	add	r3, r2
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	4816      	ldr	r0, [pc, #88]	; (800245c <D_Slider_LightingUpdate+0x760>)
 8002404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002406:	461a      	mov	r2, r3
 8002408:	0052      	lsls	r2, r2, #1
 800240a:	441a      	add	r2, r3
 800240c:	460b      	mov	r3, r1
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	1a5b      	subs	r3, r3, r1
 8002412:	4413      	add	r3, r2
 8002414:	4403      	add	r3, r0
 8002416:	3302      	adds	r3, #2
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
			}

			if(updateCount[side] > 650) LightingMode[side] = SL_NORMAL_FLASH;
 800241c:	4a0b      	ldr	r2, [pc, #44]	; (800244c <D_Slider_LightingUpdate+0x750>)
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	f240 228a 	movw	r2, #650	; 0x28a
 8002428:	4293      	cmp	r3, r2
 800242a:	f340 83d8 	ble.w	8002bde <D_Slider_LightingUpdate+0xee2>
 800242e:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <D_Slider_LightingUpdate+0x764>)
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	4413      	add	r3, r2
 8002434:	2202      	movs	r2, #2
 8002436:	701a      	strb	r2, [r3, #0]

			break;
 8002438:	e3d1      	b.n	8002bde <D_Slider_LightingUpdate+0xee2>

		case SL_POCKET_IN_DIA:
			if(_changeMode[side]){
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <D_Slider_LightingUpdate+0x768>)
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	4413      	add	r3, r2
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d044      	beq.n	80024d0 <D_Slider_LightingUpdate+0x7d4>
				for(int i=0; i<5; i++){
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	e039      	b.n	80024c0 <D_Slider_LightingUpdate+0x7c4>
 800244c:	2000015c 	.word	0x2000015c
 8002450:	20000174 	.word	0x20000174
 8002454:	20000178 	.word	0x20000178
 8002458:	20000148 	.word	0x20000148
 800245c:	2000017c 	.word	0x2000017c
 8002460:	20000144 	.word	0x20000144
 8002464:	20000170 	.word	0x20000170
					slideColor[side][i][0] = false;
 8002468:	48ba      	ldr	r0, [pc, #744]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800246e:	461a      	mov	r2, r3
 8002470:	0052      	lsls	r2, r2, #1
 8002472:	441a      	add	r2, r3
 8002474:	460b      	mov	r3, r1
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a5b      	subs	r3, r3, r1
 800247a:	4413      	add	r3, r2
 800247c:	4403      	add	r3, r0
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 8002482:	48b4      	ldr	r0, [pc, #720]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002488:	461a      	mov	r2, r3
 800248a:	0052      	lsls	r2, r2, #1
 800248c:	441a      	add	r2, r3
 800248e:	460b      	mov	r3, r1
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	1a5b      	subs	r3, r3, r1
 8002494:	4413      	add	r3, r2
 8002496:	4403      	add	r3, r0
 8002498:	3301      	adds	r3, #1
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 800249e:	48ad      	ldr	r0, [pc, #692]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a4:	461a      	mov	r2, r3
 80024a6:	0052      	lsls	r2, r2, #1
 80024a8:	441a      	add	r2, r3
 80024aa:	460b      	mov	r3, r1
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a5b      	subs	r3, r3, r1
 80024b0:	4413      	add	r3, r2
 80024b2:	4403      	add	r3, r0
 80024b4:	3302      	adds	r3, #2
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3301      	adds	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	ddd0      	ble.n	8002468 <D_Slider_LightingUpdate+0x76c>
				}
				_changeMode[side] = false;
 80024c6:	4aa4      	ldr	r2, [pc, #656]	; (8002758 <D_Slider_LightingUpdate+0xa5c>)
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	4413      	add	r3, r2
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] < 100 && !_animUpdate_1[side]){
 80024d0:	4aa2      	ldr	r2, [pc, #648]	; (800275c <D_Slider_LightingUpdate+0xa60>)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d8:	2b63      	cmp	r3, #99	; 0x63
 80024da:	dc44      	bgt.n	8002566 <D_Slider_LightingUpdate+0x86a>
 80024dc:	4aa0      	ldr	r2, [pc, #640]	; (8002760 <D_Slider_LightingUpdate+0xa64>)
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	4413      	add	r3, r2
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	f083 0301 	eor.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d03b      	beq.n	8002566 <D_Slider_LightingUpdate+0x86a>
				_animUpdate_1[side] = true;
 80024ee:	4a9c      	ldr	r2, [pc, #624]	; (8002760 <D_Slider_LightingUpdate+0xa64>)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	4413      	add	r3, r2
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 80024f8:	4a9a      	ldr	r2, [pc, #616]	; (8002764 <D_Slider_LightingUpdate+0xa68>)
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	4413      	add	r3, r2
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8002502:	4a99      	ldr	r2, [pc, #612]	; (8002768 <D_Slider_LightingUpdate+0xa6c>)
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	4413      	add	r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	4892      	ldr	r0, [pc, #584]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 800250c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800250e:	461a      	mov	r2, r3
 8002510:	0052      	lsls	r2, r2, #1
 8002512:	441a      	add	r2, r3
 8002514:	460b      	mov	r3, r1
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a5b      	subs	r3, r3, r1
 800251a:	4413      	add	r3, r2
 800251c:	4403      	add	r3, r0
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8002522:	4a91      	ldr	r2, [pc, #580]	; (8002768 <D_Slider_LightingUpdate+0xa6c>)
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	4413      	add	r3, r2
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	488a      	ldr	r0, [pc, #552]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 800252c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800252e:	461a      	mov	r2, r3
 8002530:	0052      	lsls	r2, r2, #1
 8002532:	441a      	add	r2, r3
 8002534:	460b      	mov	r3, r1
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a5b      	subs	r3, r3, r1
 800253a:	4413      	add	r3, r2
 800253c:	4403      	add	r3, r0
 800253e:	3301      	adds	r3, #1
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8002544:	4a88      	ldr	r2, [pc, #544]	; (8002768 <D_Slider_LightingUpdate+0xa6c>)
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	4413      	add	r3, r2
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4881      	ldr	r0, [pc, #516]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 800254e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002550:	461a      	mov	r2, r3
 8002552:	0052      	lsls	r2, r2, #1
 8002554:	441a      	add	r2, r3
 8002556:	460b      	mov	r3, r1
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	1a5b      	subs	r3, r3, r1
 800255c:	4413      	add	r3, r2
 800255e:	4403      	add	r3, r0
 8002560:	3302      	adds	r3, #2
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 100 && updateCount[side] < 180 && !_animUpdate_2[side]){
 8002566:	4a7d      	ldr	r2, [pc, #500]	; (800275c <D_Slider_LightingUpdate+0xa60>)
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	2b63      	cmp	r3, #99	; 0x63
 8002570:	dd4a      	ble.n	8002608 <D_Slider_LightingUpdate+0x90c>
 8002572:	4a7a      	ldr	r2, [pc, #488]	; (800275c <D_Slider_LightingUpdate+0xa60>)
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257a:	2bb3      	cmp	r3, #179	; 0xb3
 800257c:	dc44      	bgt.n	8002608 <D_Slider_LightingUpdate+0x90c>
 800257e:	4a79      	ldr	r2, [pc, #484]	; (8002764 <D_Slider_LightingUpdate+0xa68>)
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	4413      	add	r3, r2
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	f083 0301 	eor.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d03b      	beq.n	8002608 <D_Slider_LightingUpdate+0x90c>
				_animUpdate_1[side] = false;
 8002590:	4a73      	ldr	r2, [pc, #460]	; (8002760 <D_Slider_LightingUpdate+0xa64>)
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	4413      	add	r3, r2
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 800259a:	4a72      	ldr	r2, [pc, #456]	; (8002764 <D_Slider_LightingUpdate+0xa68>)
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	4413      	add	r3, r2
 80025a0:	2201      	movs	r2, #1
 80025a2:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 80025a4:	4a70      	ldr	r2, [pc, #448]	; (8002768 <D_Slider_LightingUpdate+0xa6c>)
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	4413      	add	r3, r2
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4869      	ldr	r0, [pc, #420]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 80025ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025b0:	461a      	mov	r2, r3
 80025b2:	0052      	lsls	r2, r2, #1
 80025b4:	441a      	add	r2, r3
 80025b6:	460b      	mov	r3, r1
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a5b      	subs	r3, r3, r1
 80025bc:	4413      	add	r3, r2
 80025be:	4403      	add	r3, r0
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 80025c4:	4a68      	ldr	r2, [pc, #416]	; (8002768 <D_Slider_LightingUpdate+0xa6c>)
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	4413      	add	r3, r2
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4861      	ldr	r0, [pc, #388]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 80025ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d0:	461a      	mov	r2, r3
 80025d2:	0052      	lsls	r2, r2, #1
 80025d4:	441a      	add	r2, r3
 80025d6:	460b      	mov	r3, r1
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a5b      	subs	r3, r3, r1
 80025dc:	4413      	add	r3, r2
 80025de:	4403      	add	r3, r0
 80025e0:	3301      	adds	r3, #1
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 80025e6:	4a60      	ldr	r2, [pc, #384]	; (8002768 <D_Slider_LightingUpdate+0xa6c>)
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	4413      	add	r3, r2
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	4859      	ldr	r0, [pc, #356]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 80025f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f2:	461a      	mov	r2, r3
 80025f4:	0052      	lsls	r2, r2, #1
 80025f6:	441a      	add	r2, r3
 80025f8:	460b      	mov	r3, r1
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a5b      	subs	r3, r3, r1
 80025fe:	4413      	add	r3, r2
 8002600:	4403      	add	r3, r0
 8002602:	3302      	adds	r3, #2
 8002604:	2201      	movs	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 180 && updateCount[side] < 300 && !_animUpdate_1[side]){
 8002608:	4a54      	ldr	r2, [pc, #336]	; (800275c <D_Slider_LightingUpdate+0xa60>)
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	2bb3      	cmp	r3, #179	; 0xb3
 8002612:	dd4b      	ble.n	80026ac <D_Slider_LightingUpdate+0x9b0>
 8002614:	4a51      	ldr	r2, [pc, #324]	; (800275c <D_Slider_LightingUpdate+0xa60>)
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002620:	da44      	bge.n	80026ac <D_Slider_LightingUpdate+0x9b0>
 8002622:	4a4f      	ldr	r2, [pc, #316]	; (8002760 <D_Slider_LightingUpdate+0xa64>)
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	4413      	add	r3, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	f083 0301 	eor.w	r3, r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d03b      	beq.n	80026ac <D_Slider_LightingUpdate+0x9b0>
				_animUpdate_1[side] = true;
 8002634:	4a4a      	ldr	r2, [pc, #296]	; (8002760 <D_Slider_LightingUpdate+0xa64>)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	4413      	add	r3, r2
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 800263e:	4a49      	ldr	r2, [pc, #292]	; (8002764 <D_Slider_LightingUpdate+0xa68>)
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	4413      	add	r3, r2
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8002648:	4a47      	ldr	r2, [pc, #284]	; (8002768 <D_Slider_LightingUpdate+0xa6c>)
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	4413      	add	r3, r2
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	4840      	ldr	r0, [pc, #256]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 8002652:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002654:	461a      	mov	r2, r3
 8002656:	0052      	lsls	r2, r2, #1
 8002658:	441a      	add	r2, r3
 800265a:	460b      	mov	r3, r1
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	1a5b      	subs	r3, r3, r1
 8002660:	4413      	add	r3, r2
 8002662:	4403      	add	r3, r0
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8002668:	4a3f      	ldr	r2, [pc, #252]	; (8002768 <D_Slider_LightingUpdate+0xa6c>)
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	4413      	add	r3, r2
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	4838      	ldr	r0, [pc, #224]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 8002672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002674:	461a      	mov	r2, r3
 8002676:	0052      	lsls	r2, r2, #1
 8002678:	441a      	add	r2, r3
 800267a:	460b      	mov	r3, r1
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	1a5b      	subs	r3, r3, r1
 8002680:	4413      	add	r3, r2
 8002682:	4403      	add	r3, r0
 8002684:	3301      	adds	r3, #1
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 800268a:	4a37      	ldr	r2, [pc, #220]	; (8002768 <D_Slider_LightingUpdate+0xa6c>)
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	4413      	add	r3, r2
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	4830      	ldr	r0, [pc, #192]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 8002694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002696:	461a      	mov	r2, r3
 8002698:	0052      	lsls	r2, r2, #1
 800269a:	441a      	add	r2, r3
 800269c:	460b      	mov	r3, r1
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a5b      	subs	r3, r3, r1
 80026a2:	4413      	add	r3, r2
 80026a4:	4403      	add	r3, r0
 80026a6:	3302      	adds	r3, #2
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 300 &&updateCount[side] < 380 && !_animUpdate_2[side]){
 80026ac:	4a2b      	ldr	r2, [pc, #172]	; (800275c <D_Slider_LightingUpdate+0xa60>)
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80026b8:	db58      	blt.n	800276c <D_Slider_LightingUpdate+0xa70>
 80026ba:	4a28      	ldr	r2, [pc, #160]	; (800275c <D_Slider_LightingUpdate+0xa60>)
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c2:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 80026c6:	da51      	bge.n	800276c <D_Slider_LightingUpdate+0xa70>
 80026c8:	4a26      	ldr	r2, [pc, #152]	; (8002764 <D_Slider_LightingUpdate+0xa68>)
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	f083 0301 	eor.w	r3, r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d048      	beq.n	800276c <D_Slider_LightingUpdate+0xa70>
				_animUpdate_1[side] = false;
 80026da:	4a21      	ldr	r2, [pc, #132]	; (8002760 <D_Slider_LightingUpdate+0xa64>)
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	4413      	add	r3, r2
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 80026e4:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <D_Slider_LightingUpdate+0xa68>)
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	4413      	add	r3, r2
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 80026ee:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <D_Slider_LightingUpdate+0xa6c>)
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	4413      	add	r3, r2
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	4817      	ldr	r0, [pc, #92]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 80026f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026fa:	461a      	mov	r2, r3
 80026fc:	0052      	lsls	r2, r2, #1
 80026fe:	441a      	add	r2, r3
 8002700:	460b      	mov	r3, r1
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a5b      	subs	r3, r3, r1
 8002706:	4413      	add	r3, r2
 8002708:	4403      	add	r3, r0
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 800270e:	4a16      	ldr	r2, [pc, #88]	; (8002768 <D_Slider_LightingUpdate+0xa6c>)
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	4413      	add	r3, r2
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	480f      	ldr	r0, [pc, #60]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 8002718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800271a:	461a      	mov	r2, r3
 800271c:	0052      	lsls	r2, r2, #1
 800271e:	441a      	add	r2, r3
 8002720:	460b      	mov	r3, r1
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	1a5b      	subs	r3, r3, r1
 8002726:	4413      	add	r3, r2
 8002728:	4403      	add	r3, r0
 800272a:	3301      	adds	r3, #1
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <D_Slider_LightingUpdate+0xa6c>)
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	4413      	add	r3, r2
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4806      	ldr	r0, [pc, #24]	; (8002754 <D_Slider_LightingUpdate+0xa58>)
 800273a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800273c:	461a      	mov	r2, r3
 800273e:	0052      	lsls	r2, r2, #1
 8002740:	441a      	add	r2, r3
 8002742:	460b      	mov	r3, r1
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	1a5b      	subs	r3, r3, r1
 8002748:	4413      	add	r3, r2
 800274a:	4403      	add	r3, r0
 800274c:	3302      	adds	r3, #2
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	e00b      	b.n	800276c <D_Slider_LightingUpdate+0xa70>
 8002754:	2000017c 	.word	0x2000017c
 8002758:	20000170 	.word	0x20000170
 800275c:	2000015c 	.word	0x2000015c
 8002760:	20000174 	.word	0x20000174
 8002764:	20000178 	.word	0x20000178
 8002768:	20000148 	.word	0x20000148
			}
			if(updateCount[side] >= 380 &&updateCount[side] < 500 && !_animUpdate_1[side]){
 800276c:	4a87      	ldr	r2, [pc, #540]	; (800298c <D_Slider_LightingUpdate+0xc90>)
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002774:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002778:	db4b      	blt.n	8002812 <D_Slider_LightingUpdate+0xb16>
 800277a:	4a84      	ldr	r2, [pc, #528]	; (800298c <D_Slider_LightingUpdate+0xc90>)
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002782:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002786:	da44      	bge.n	8002812 <D_Slider_LightingUpdate+0xb16>
 8002788:	4a81      	ldr	r2, [pc, #516]	; (8002990 <D_Slider_LightingUpdate+0xc94>)
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	4413      	add	r3, r2
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	f083 0301 	eor.w	r3, r3, #1
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d03b      	beq.n	8002812 <D_Slider_LightingUpdate+0xb16>
				_animUpdate_1[side] = true;
 800279a:	4a7d      	ldr	r2, [pc, #500]	; (8002990 <D_Slider_LightingUpdate+0xc94>)
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	4413      	add	r3, r2
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 80027a4:	4a7b      	ldr	r2, [pc, #492]	; (8002994 <D_Slider_LightingUpdate+0xc98>)
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	4413      	add	r3, r2
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 80027ae:	4a7a      	ldr	r2, [pc, #488]	; (8002998 <D_Slider_LightingUpdate+0xc9c>)
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	4413      	add	r3, r2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	4879      	ldr	r0, [pc, #484]	; (800299c <D_Slider_LightingUpdate+0xca0>)
 80027b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ba:	461a      	mov	r2, r3
 80027bc:	0052      	lsls	r2, r2, #1
 80027be:	441a      	add	r2, r3
 80027c0:	460b      	mov	r3, r1
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a5b      	subs	r3, r3, r1
 80027c6:	4413      	add	r3, r2
 80027c8:	4403      	add	r3, r0
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 80027ce:	4a72      	ldr	r2, [pc, #456]	; (8002998 <D_Slider_LightingUpdate+0xc9c>)
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	4413      	add	r3, r2
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	4871      	ldr	r0, [pc, #452]	; (800299c <D_Slider_LightingUpdate+0xca0>)
 80027d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027da:	461a      	mov	r2, r3
 80027dc:	0052      	lsls	r2, r2, #1
 80027de:	441a      	add	r2, r3
 80027e0:	460b      	mov	r3, r1
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a5b      	subs	r3, r3, r1
 80027e6:	4413      	add	r3, r2
 80027e8:	4403      	add	r3, r0
 80027ea:	3301      	adds	r3, #1
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 80027f0:	4a69      	ldr	r2, [pc, #420]	; (8002998 <D_Slider_LightingUpdate+0xc9c>)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	4413      	add	r3, r2
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4868      	ldr	r0, [pc, #416]	; (800299c <D_Slider_LightingUpdate+0xca0>)
 80027fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027fc:	461a      	mov	r2, r3
 80027fe:	0052      	lsls	r2, r2, #1
 8002800:	441a      	add	r2, r3
 8002802:	460b      	mov	r3, r1
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a5b      	subs	r3, r3, r1
 8002808:	4413      	add	r3, r2
 800280a:	4403      	add	r3, r0
 800280c:	3302      	adds	r3, #2
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 500 &&updateCount[side] < 580 && !_animUpdate_2[side]){
 8002812:	4a5e      	ldr	r2, [pc, #376]	; (800298c <D_Slider_LightingUpdate+0xc90>)
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800281e:	db4b      	blt.n	80028b8 <D_Slider_LightingUpdate+0xbbc>
 8002820:	4a5a      	ldr	r2, [pc, #360]	; (800298c <D_Slider_LightingUpdate+0xc90>)
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002828:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 800282c:	da44      	bge.n	80028b8 <D_Slider_LightingUpdate+0xbbc>
 800282e:	4a59      	ldr	r2, [pc, #356]	; (8002994 <D_Slider_LightingUpdate+0xc98>)
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	4413      	add	r3, r2
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	f083 0301 	eor.w	r3, r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d03b      	beq.n	80028b8 <D_Slider_LightingUpdate+0xbbc>
				_animUpdate_1[side] = false;
 8002840:	4a53      	ldr	r2, [pc, #332]	; (8002990 <D_Slider_LightingUpdate+0xc94>)
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	4413      	add	r3, r2
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 800284a:	4a52      	ldr	r2, [pc, #328]	; (8002994 <D_Slider_LightingUpdate+0xc98>)
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	4413      	add	r3, r2
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8002854:	4a50      	ldr	r2, [pc, #320]	; (8002998 <D_Slider_LightingUpdate+0xc9c>)
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	4413      	add	r3, r2
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	484f      	ldr	r0, [pc, #316]	; (800299c <D_Slider_LightingUpdate+0xca0>)
 800285e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002860:	461a      	mov	r2, r3
 8002862:	0052      	lsls	r2, r2, #1
 8002864:	441a      	add	r2, r3
 8002866:	460b      	mov	r3, r1
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	1a5b      	subs	r3, r3, r1
 800286c:	4413      	add	r3, r2
 800286e:	4403      	add	r3, r0
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8002874:	4a48      	ldr	r2, [pc, #288]	; (8002998 <D_Slider_LightingUpdate+0xc9c>)
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	4413      	add	r3, r2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	4847      	ldr	r0, [pc, #284]	; (800299c <D_Slider_LightingUpdate+0xca0>)
 800287e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002880:	461a      	mov	r2, r3
 8002882:	0052      	lsls	r2, r2, #1
 8002884:	441a      	add	r2, r3
 8002886:	460b      	mov	r3, r1
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	1a5b      	subs	r3, r3, r1
 800288c:	4413      	add	r3, r2
 800288e:	4403      	add	r3, r0
 8002890:	3301      	adds	r3, #1
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8002896:	4a40      	ldr	r2, [pc, #256]	; (8002998 <D_Slider_LightingUpdate+0xc9c>)
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	4413      	add	r3, r2
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	483f      	ldr	r0, [pc, #252]	; (800299c <D_Slider_LightingUpdate+0xca0>)
 80028a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a2:	461a      	mov	r2, r3
 80028a4:	0052      	lsls	r2, r2, #1
 80028a6:	441a      	add	r2, r3
 80028a8:	460b      	mov	r3, r1
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a5b      	subs	r3, r3, r1
 80028ae:	4413      	add	r3, r2
 80028b0:	4403      	add	r3, r0
 80028b2:	3302      	adds	r3, #2
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 580 &&updateCount[side] < 700 && !_animUpdate_1[side]){
 80028b8:	4a34      	ldr	r2, [pc, #208]	; (800298c <D_Slider_LightingUpdate+0xc90>)
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c0:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 80028c4:	db4b      	blt.n	800295e <D_Slider_LightingUpdate+0xc62>
 80028c6:	4a31      	ldr	r2, [pc, #196]	; (800298c <D_Slider_LightingUpdate+0xc90>)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80028d2:	da44      	bge.n	800295e <D_Slider_LightingUpdate+0xc62>
 80028d4:	4a2e      	ldr	r2, [pc, #184]	; (8002990 <D_Slider_LightingUpdate+0xc94>)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	4413      	add	r3, r2
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	f083 0301 	eor.w	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d03b      	beq.n	800295e <D_Slider_LightingUpdate+0xc62>
				_animUpdate_1[side] = true;
 80028e6:	4a2a      	ldr	r2, [pc, #168]	; (8002990 <D_Slider_LightingUpdate+0xc94>)
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	4413      	add	r3, r2
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 80028f0:	4a28      	ldr	r2, [pc, #160]	; (8002994 <D_Slider_LightingUpdate+0xc98>)
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	4413      	add	r3, r2
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 80028fa:	4a27      	ldr	r2, [pc, #156]	; (8002998 <D_Slider_LightingUpdate+0xc9c>)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	4413      	add	r3, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	4826      	ldr	r0, [pc, #152]	; (800299c <D_Slider_LightingUpdate+0xca0>)
 8002904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002906:	461a      	mov	r2, r3
 8002908:	0052      	lsls	r2, r2, #1
 800290a:	441a      	add	r2, r3
 800290c:	460b      	mov	r3, r1
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a5b      	subs	r3, r3, r1
 8002912:	4413      	add	r3, r2
 8002914:	4403      	add	r3, r0
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 800291a:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <D_Slider_LightingUpdate+0xc9c>)
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	4413      	add	r3, r2
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	481e      	ldr	r0, [pc, #120]	; (800299c <D_Slider_LightingUpdate+0xca0>)
 8002924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002926:	461a      	mov	r2, r3
 8002928:	0052      	lsls	r2, r2, #1
 800292a:	441a      	add	r2, r3
 800292c:	460b      	mov	r3, r1
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	1a5b      	subs	r3, r3, r1
 8002932:	4413      	add	r3, r2
 8002934:	4403      	add	r3, r0
 8002936:	3301      	adds	r3, #1
 8002938:	2201      	movs	r2, #1
 800293a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 800293c:	4a16      	ldr	r2, [pc, #88]	; (8002998 <D_Slider_LightingUpdate+0xc9c>)
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	4413      	add	r3, r2
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4815      	ldr	r0, [pc, #84]	; (800299c <D_Slider_LightingUpdate+0xca0>)
 8002946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002948:	461a      	mov	r2, r3
 800294a:	0052      	lsls	r2, r2, #1
 800294c:	441a      	add	r2, r3
 800294e:	460b      	mov	r3, r1
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a5b      	subs	r3, r3, r1
 8002954:	4413      	add	r3, r2
 8002956:	4403      	add	r3, r0
 8002958:	3302      	adds	r3, #2
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
			}

			if(updateCount[side] > 700) LightingMode[side] = SL_NORMAL_FLASH;
 800295e:	4a0b      	ldr	r2, [pc, #44]	; (800298c <D_Slider_LightingUpdate+0xc90>)
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002966:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800296a:	f340 813a 	ble.w	8002be2 <D_Slider_LightingUpdate+0xee6>
 800296e:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <D_Slider_LightingUpdate+0xca4>)
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	4413      	add	r3, r2
 8002974:	2202      	movs	r2, #2
 8002976:	701a      	strb	r2, [r3, #0]

			break;
 8002978:	e133      	b.n	8002be2 <D_Slider_LightingUpdate+0xee6>

		case SL_POCKET_IN_UP:
			if(_changeMode[side]){
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <D_Slider_LightingUpdate+0xca8>)
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	4413      	add	r3, r2
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d049      	beq.n	8002a1a <D_Slider_LightingUpdate+0xd1e>
				for(int i=0; i<5; i++){
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	e039      	b.n	8002a00 <D_Slider_LightingUpdate+0xd04>
 800298c:	2000015c 	.word	0x2000015c
 8002990:	20000174 	.word	0x20000174
 8002994:	20000178 	.word	0x20000178
 8002998:	20000148 	.word	0x20000148
 800299c:	2000017c 	.word	0x2000017c
 80029a0:	20000144 	.word	0x20000144
 80029a4:	20000170 	.word	0x20000170
					slideColor[side][i][0] = false;
 80029a8:	4899      	ldr	r0, [pc, #612]	; (8002c10 <D_Slider_LightingUpdate+0xf14>)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ae:	461a      	mov	r2, r3
 80029b0:	0052      	lsls	r2, r2, #1
 80029b2:	441a      	add	r2, r3
 80029b4:	460b      	mov	r3, r1
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a5b      	subs	r3, r3, r1
 80029ba:	4413      	add	r3, r2
 80029bc:	4403      	add	r3, r0
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 80029c2:	4893      	ldr	r0, [pc, #588]	; (8002c10 <D_Slider_LightingUpdate+0xf14>)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c8:	461a      	mov	r2, r3
 80029ca:	0052      	lsls	r2, r2, #1
 80029cc:	441a      	add	r2, r3
 80029ce:	460b      	mov	r3, r1
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a5b      	subs	r3, r3, r1
 80029d4:	4413      	add	r3, r2
 80029d6:	4403      	add	r3, r0
 80029d8:	3301      	adds	r3, #1
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 80029de:	488c      	ldr	r0, [pc, #560]	; (8002c10 <D_Slider_LightingUpdate+0xf14>)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e4:	461a      	mov	r2, r3
 80029e6:	0052      	lsls	r2, r2, #1
 80029e8:	441a      	add	r2, r3
 80029ea:	460b      	mov	r3, r1
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	1a5b      	subs	r3, r3, r1
 80029f0:	4413      	add	r3, r2
 80029f2:	4403      	add	r3, r0
 80029f4:	3302      	adds	r3, #2
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	ddd0      	ble.n	80029a8 <D_Slider_LightingUpdate+0xcac>
				}
				_changeMode[side] = false;
 8002a06:	4a83      	ldr	r2, [pc, #524]	; (8002c14 <D_Slider_LightingUpdate+0xf18>)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	4413      	add	r3, r2
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
				counter1[side] = 0;
 8002a10:	4a81      	ldr	r2, [pc, #516]	; (8002c18 <D_Slider_LightingUpdate+0xf1c>)
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	2100      	movs	r1, #0
 8002a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if(updateCount[side] >= 100 + counter1[side]*200 && updateCount[side] < 180 + counter1[side]*200 && !_animUpdate_1[side]){
 8002a1a:	4a7f      	ldr	r2, [pc, #508]	; (8002c18 <D_Slider_LightingUpdate+0xf1c>)
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a22:	22c8      	movs	r2, #200	; 0xc8
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8002a2c:	497b      	ldr	r1, [pc, #492]	; (8002c1c <D_Slider_LightingUpdate+0xf20>)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	da53      	bge.n	8002ae0 <D_Slider_LightingUpdate+0xde4>
 8002a38:	4a77      	ldr	r2, [pc, #476]	; (8002c18 <D_Slider_LightingUpdate+0xf1c>)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a40:	22c8      	movs	r2, #200	; 0xc8
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 8002a4a:	4974      	ldr	r1, [pc, #464]	; (8002c1c <D_Slider_LightingUpdate+0xf20>)
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	db44      	blt.n	8002ae0 <D_Slider_LightingUpdate+0xde4>
 8002a56:	4a72      	ldr	r2, [pc, #456]	; (8002c20 <D_Slider_LightingUpdate+0xf24>)
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	4413      	add	r3, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	f083 0301 	eor.w	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d03b      	beq.n	8002ae0 <D_Slider_LightingUpdate+0xde4>
				_animUpdate_1[side] = true;
 8002a68:	4a6d      	ldr	r2, [pc, #436]	; (8002c20 <D_Slider_LightingUpdate+0xf24>)
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	4413      	add	r3, r2
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8002a72:	4a6c      	ldr	r2, [pc, #432]	; (8002c24 <D_Slider_LightingUpdate+0xf28>)
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	4413      	add	r3, r2
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8002a7c:	4a6a      	ldr	r2, [pc, #424]	; (8002c28 <D_Slider_LightingUpdate+0xf2c>)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	4413      	add	r3, r2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4862      	ldr	r0, [pc, #392]	; (8002c10 <D_Slider_LightingUpdate+0xf14>)
 8002a86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a88:	461a      	mov	r2, r3
 8002a8a:	0052      	lsls	r2, r2, #1
 8002a8c:	441a      	add	r2, r3
 8002a8e:	460b      	mov	r3, r1
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a5b      	subs	r3, r3, r1
 8002a94:	4413      	add	r3, r2
 8002a96:	4403      	add	r3, r0
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8002a9c:	4a62      	ldr	r2, [pc, #392]	; (8002c28 <D_Slider_LightingUpdate+0xf2c>)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	4413      	add	r3, r2
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	485a      	ldr	r0, [pc, #360]	; (8002c10 <D_Slider_LightingUpdate+0xf14>)
 8002aa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	0052      	lsls	r2, r2, #1
 8002aac:	441a      	add	r2, r3
 8002aae:	460b      	mov	r3, r1
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a5b      	subs	r3, r3, r1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	4403      	add	r3, r0
 8002ab8:	3301      	adds	r3, #1
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8002abe:	4a5a      	ldr	r2, [pc, #360]	; (8002c28 <D_Slider_LightingUpdate+0xf2c>)
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	4852      	ldr	r0, [pc, #328]	; (8002c10 <D_Slider_LightingUpdate+0xf14>)
 8002ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aca:	461a      	mov	r2, r3
 8002acc:	0052      	lsls	r2, r2, #1
 8002ace:	441a      	add	r2, r3
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a5b      	subs	r3, r3, r1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4403      	add	r3, r0
 8002ada:	3302      	adds	r3, #2
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 180 + counter1[side]*200 && updateCount[side] < 300 + counter1[side]*200 && !_animUpdate_2[side]){
 8002ae0:	4a4d      	ldr	r2, [pc, #308]	; (8002c18 <D_Slider_LightingUpdate+0xf1c>)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	22c8      	movs	r2, #200	; 0xc8
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 8002af2:	494a      	ldr	r1, [pc, #296]	; (8002c1c <D_Slider_LightingUpdate+0xf20>)
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	da5c      	bge.n	8002bb8 <D_Slider_LightingUpdate+0xebc>
 8002afe:	4a46      	ldr	r2, [pc, #280]	; (8002c18 <D_Slider_LightingUpdate+0xf1c>)
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b06:	22c8      	movs	r2, #200	; 0xc8
 8002b08:	fb02 f303 	mul.w	r3, r2, r3
 8002b0c:	f203 122b 	addw	r2, r3, #299	; 0x12b
 8002b10:	4942      	ldr	r1, [pc, #264]	; (8002c1c <D_Slider_LightingUpdate+0xf20>)
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	db4d      	blt.n	8002bb8 <D_Slider_LightingUpdate+0xebc>
 8002b1c:	4a41      	ldr	r2, [pc, #260]	; (8002c24 <D_Slider_LightingUpdate+0xf28>)
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	4413      	add	r3, r2
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	f083 0301 	eor.w	r3, r3, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d044      	beq.n	8002bb8 <D_Slider_LightingUpdate+0xebc>
				_animUpdate_1[side] = false;
 8002b2e:	4a3c      	ldr	r2, [pc, #240]	; (8002c20 <D_Slider_LightingUpdate+0xf24>)
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	4413      	add	r3, r2
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8002b38:	4a3a      	ldr	r2, [pc, #232]	; (8002c24 <D_Slider_LightingUpdate+0xf28>)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	4413      	add	r3, r2
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8002b42:	4a39      	ldr	r2, [pc, #228]	; (8002c28 <D_Slider_LightingUpdate+0xf2c>)
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	4413      	add	r3, r2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	4831      	ldr	r0, [pc, #196]	; (8002c10 <D_Slider_LightingUpdate+0xf14>)
 8002b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b4e:	461a      	mov	r2, r3
 8002b50:	0052      	lsls	r2, r2, #1
 8002b52:	441a      	add	r2, r3
 8002b54:	460b      	mov	r3, r1
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	1a5b      	subs	r3, r3, r1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	4403      	add	r3, r0
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = false;
 8002b62:	4a31      	ldr	r2, [pc, #196]	; (8002c28 <D_Slider_LightingUpdate+0xf2c>)
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	4829      	ldr	r0, [pc, #164]	; (8002c10 <D_Slider_LightingUpdate+0xf14>)
 8002b6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b6e:	461a      	mov	r2, r3
 8002b70:	0052      	lsls	r2, r2, #1
 8002b72:	441a      	add	r2, r3
 8002b74:	460b      	mov	r3, r1
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	1a5b      	subs	r3, r3, r1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4403      	add	r3, r0
 8002b7e:	3301      	adds	r3, #1
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = false;
 8002b84:	4a28      	ldr	r2, [pc, #160]	; (8002c28 <D_Slider_LightingUpdate+0xf2c>)
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	4413      	add	r3, r2
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	4820      	ldr	r0, [pc, #128]	; (8002c10 <D_Slider_LightingUpdate+0xf14>)
 8002b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b90:	461a      	mov	r2, r3
 8002b92:	0052      	lsls	r2, r2, #1
 8002b94:	441a      	add	r2, r3
 8002b96:	460b      	mov	r3, r1
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a5b      	subs	r3, r3, r1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4403      	add	r3, r0
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
				counter1[side]++;
 8002ba6:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <D_Slider_LightingUpdate+0xf1c>)
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	4919      	ldr	r1, [pc, #100]	; (8002c18 <D_Slider_LightingUpdate+0xf1c>)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			if(updateCount[side] > 2000) LightingMode[side] = SL_NORMAL_FLASH;
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <D_Slider_LightingUpdate+0xf20>)
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002bc4:	dd0f      	ble.n	8002be6 <D_Slider_LightingUpdate+0xeea>
 8002bc6:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <D_Slider_LightingUpdate+0xf30>)
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	4413      	add	r3, r2
 8002bcc:	2202      	movs	r2, #2
 8002bce:	701a      	strb	r2, [r3, #0]

			break;
 8002bd0:	e009      	b.n	8002be6 <D_Slider_LightingUpdate+0xeea>
			break;
 8002bd2:	bf00      	nop
 8002bd4:	e008      	b.n	8002be8 <D_Slider_LightingUpdate+0xeec>
			break;
 8002bd6:	bf00      	nop
 8002bd8:	e006      	b.n	8002be8 <D_Slider_LightingUpdate+0xeec>
			break;
 8002bda:	bf00      	nop
 8002bdc:	e004      	b.n	8002be8 <D_Slider_LightingUpdate+0xeec>
			break;
 8002bde:	bf00      	nop
 8002be0:	e002      	b.n	8002be8 <D_Slider_LightingUpdate+0xeec>
			break;
 8002be2:	bf00      	nop
 8002be4:	e000      	b.n	8002be8 <D_Slider_LightingUpdate+0xeec>
			break;
 8002be6:	bf00      	nop
	for(int side = 0; side < 2; side++){
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	3301      	adds	r3, #1
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	f77f a88d 	ble.w	8001d10 <D_Slider_LightingUpdate+0x14>
		}
	}

	recentUpdateCount = G_System_counter;
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <D_Slider_LightingUpdate+0xf34>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <D_Slider_LightingUpdate+0xf38>)
 8002bfe:	601a      	str	r2, [r3, #0]
	D_Slider_SetColorData(slideColor[0], slideColor[1]);
 8002c00:	490d      	ldr	r1, [pc, #52]	; (8002c38 <D_Slider_LightingUpdate+0xf3c>)
 8002c02:	4803      	ldr	r0, [pc, #12]	; (8002c10 <D_Slider_LightingUpdate+0xf14>)
 8002c04:	f000 f94a 	bl	8002e9c <D_Slider_SetColorData>
}
 8002c08:	bf00      	nop
 8002c0a:	3728      	adds	r7, #40	; 0x28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	2000017c 	.word	0x2000017c
 8002c14:	20000170 	.word	0x20000170
 8002c18:	2000019c 	.word	0x2000019c
 8002c1c:	2000015c 	.word	0x2000015c
 8002c20:	20000174 	.word	0x20000174
 8002c24:	20000178 	.word	0x20000178
 8002c28:	20000148 	.word	0x20000148
 8002c2c:	20000144 	.word	0x20000144
 8002c30:	200000b0 	.word	0x200000b0
 8002c34:	20000164 	.word	0x20000164
 8002c38:	2000018b 	.word	0x2000018b

08002c3c <D_Slider_GetPocketR>:

int D_Slider_GetPocketR(bool _reset){
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
	static int recentSensorCount[5] = {{0}};
	static int returnPocket = -1;
	if (_reset) {
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <D_Slider_GetPocketR+0x1e>
		returnPocket = -1;
 8002c4c:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <D_Slider_GetPocketR+0x6c>)
 8002c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c52:	601a      	str	r2, [r3, #0]
		return returnPocket;
 8002c54:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <D_Slider_GetPocketR+0x6c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	e01f      	b.n	8002c9a <D_Slider_GetPocketR+0x5e>
	}
	for(int i=0; i<5; i++){
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e017      	b.n	8002c90 <D_Slider_GetPocketR+0x54>
		if(SensorCount[0][i] != recentSensorCount[i]){
 8002c60:	4a12      	ldr	r2, [pc, #72]	; (8002cac <D_Slider_GetPocketR+0x70>)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c68:	4911      	ldr	r1, [pc, #68]	; (8002cb0 <D_Slider_GetPocketR+0x74>)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d002      	beq.n	8002c7a <D_Slider_GetPocketR+0x3e>
			returnPocket = i;
 8002c74:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <D_Slider_GetPocketR+0x6c>)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6013      	str	r3, [r2, #0]
		}
		recentSensorCount[i] = SensorCount[0][i];
 8002c7a:	4a0c      	ldr	r2, [pc, #48]	; (8002cac <D_Slider_GetPocketR+0x70>)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c82:	490b      	ldr	r1, [pc, #44]	; (8002cb0 <D_Slider_GetPocketR+0x74>)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	dde4      	ble.n	8002c60 <D_Slider_GetPocketR+0x24>
	}
	return returnPocket;
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <D_Slider_GetPocketR+0x6c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000018 	.word	0x20000018
 8002cac:	20000118 	.word	0x20000118
 8002cb0:	200001a4 	.word	0x200001a4

08002cb4 <D_Slider_GetPocketL>:

int D_Slider_GetPocketL(bool _reset){
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
	static int recentSensorCount[5] = {{0}};
	static int returnPocket = -1;
	if (_reset) {
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <D_Slider_GetPocketL+0x1e>
		returnPocket = -1;
 8002cc4:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <D_Slider_GetPocketL+0x70>)
 8002cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cca:	601a      	str	r2, [r3, #0]
		return returnPocket;
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <D_Slider_GetPocketL+0x70>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	e021      	b.n	8002d16 <D_Slider_GetPocketL+0x62>
	}
	for(int i=0; i<5; i++){
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	e019      	b.n	8002d0c <D_Slider_GetPocketL+0x58>
		if(SensorCount[1][i] != recentSensorCount[i]){
 8002cd8:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <D_Slider_GetPocketL+0x74>)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3305      	adds	r3, #5
 8002cde:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ce2:	4912      	ldr	r1, [pc, #72]	; (8002d2c <D_Slider_GetPocketL+0x78>)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d002      	beq.n	8002cf4 <D_Slider_GetPocketL+0x40>
			returnPocket = i;
 8002cee:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <D_Slider_GetPocketL+0x70>)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6013      	str	r3, [r2, #0]
		}
		recentSensorCount[i] = SensorCount[1][i];
 8002cf4:	4a0c      	ldr	r2, [pc, #48]	; (8002d28 <D_Slider_GetPocketL+0x74>)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3305      	adds	r3, #5
 8002cfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cfe:	490b      	ldr	r1, [pc, #44]	; (8002d2c <D_Slider_GetPocketL+0x78>)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	dde2      	ble.n	8002cd8 <D_Slider_GetPocketL+0x24>
	}
	return returnPocket;
 8002d12:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <D_Slider_GetPocketL+0x70>)
 8002d14:	681b      	ldr	r3, [r3, #0]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	2000001c 	.word	0x2000001c
 8002d28:	20000118 	.word	0x20000118
 8002d2c:	200001b8 	.word	0x200001b8

08002d30 <D_Slider_Send>:

int D_Slider_Send(uint8_t* data, int length){
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
	if(!had_completed_tx){
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <D_Slider_Send+0x44>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f083 0301 	eor.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <D_Slider_Send+0x20>
		return -1;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d4e:	e00d      	b.n	8002d6c <D_Slider_Send+0x3c>
	}
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data, length);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4807      	ldr	r0, [pc, #28]	; (8002d78 <D_Slider_Send+0x48>)
 8002d5a:	f003 fd0b 	bl	8006774 <HAL_UART_Transmit_DMA>
	_send = true;
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <D_Slider_Send+0x4c>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
	had_completed_tx = false;
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <D_Slider_Send+0x44>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
	return 0;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000014 	.word	0x20000014
 8002d78:	2000082c 	.word	0x2000082c
 8002d7c:	20000140 	.word	0x20000140

08002d80 <D_Slider_Receive>:

int D_Slider_Receive(uint8_t* data, int length){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
	if(!had_completed_rx){
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <D_Slider_Receive+0x40>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f083 0301 	eor.w	r3, r3, #1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <D_Slider_Receive+0x20>
		return -1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d9e:	e00a      	b.n	8002db6 <D_Slider_Receive+0x36>
	}
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)data, length);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4806      	ldr	r0, [pc, #24]	; (8002dc4 <D_Slider_Receive+0x44>)
 8002daa:	f003 fd61 	bl	8006870 <HAL_UART_Receive_DMA>
	had_completed_rx = false;
 8002dae:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <D_Slider_Receive+0x40>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
	return 0;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000015 	.word	0x20000015
 8002dc4:	2000082c 	.word	0x2000082c

08002dc8 <D_Slider_CheckData>:
	}else{
		return SensorCount[1][num];
	}
}

void D_Slider_CheckData(uint8_t* data, int length){
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2be0      	cmp	r3, #224	; 0xe0
 8002dd8:	d155      	bne.n	8002e86 <D_Slider_CheckData+0xbe>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d150      	bne.n	8002e86 <D_Slider_CheckData+0xbe>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3302      	adds	r3, #2
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d14b      	bne.n	8002e86 <D_Slider_CheckData+0xbe>
	uint8_t sum = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 8002df2:	2301      	movs	r3, #1
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	e009      	b.n	8002e0c <D_Slider_CheckData+0x44>
		sum += data[i];
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	4413      	add	r3, r2
 8002e04:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	ddf2      	ble.n	8002df8 <D_Slider_CheckData+0x30>
	}
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3309      	adds	r3, #9
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	7dfa      	ldrb	r2, [r7, #23]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d135      	bne.n	8002e8a <D_Slider_CheckData+0xc2>
	for(int i=0; i<5; i++){
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	e02c      	b.n	8002e7e <D_Slider_CheckData+0xb6>
		if(((data[7]>>i) & 1) == 1) SensorCount[1][i]++;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3307      	adds	r3, #7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	fa42 f303 	asr.w	r3, r2, r3
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <D_Slider_CheckData+0x88>
 8002e3a:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <D_Slider_CheckData+0xd0>)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3305      	adds	r3, #5
 8002e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	4914      	ldr	r1, [pc, #80]	; (8002e98 <D_Slider_CheckData+0xd0>)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3305      	adds	r3, #5
 8002e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(((data[8]>>i) & 1) == 1) SensorCount[0][i]++;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3308      	adds	r3, #8
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	fa42 f303 	asr.w	r3, r2, r3
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <D_Slider_CheckData+0xb0>
 8002e66:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <D_Slider_CheckData+0xd0>)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	4909      	ldr	r1, [pc, #36]	; (8002e98 <D_Slider_CheckData+0xd0>)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	ddcf      	ble.n	8002e24 <D_Slider_CheckData+0x5c>
 8002e84:	e002      	b.n	8002e8c <D_Slider_CheckData+0xc4>
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 8002e86:	bf00      	nop
 8002e88:	e000      	b.n	8002e8c <D_Slider_CheckData+0xc4>
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 8002e8a:	bf00      	nop
	}
}
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000118 	.word	0x20000118

08002e9c <D_Slider_SetColorData>:

void D_Slider_SetColorData(bool setColorR[][3], bool setColorL[][3]){
 8002e9c:	b4b0      	push	{r4, r5, r7}
 8002e9e:	b08b      	sub	sp, #44	; 0x2c
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
	if (!_send) return;
 8002ea6:	4b8d      	ldr	r3, [pc, #564]	; (80030dc <D_Slider_SetColorData+0x240>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	f083 0301 	eor.w	r3, r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f040 810e 	bne.w	80030d2 <D_Slider_SetColorData+0x236>
	_send = false;
 8002eb6:	4b89      	ldr	r3, [pc, #548]	; (80030dc <D_Slider_SetColorData+0x240>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
	SendData[0] = FIRSTBYTE;
 8002ebc:	4b88      	ldr	r3, [pc, #544]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002ebe:	22e0      	movs	r2, #224	; 0xe0
 8002ec0:	701a      	strb	r2, [r3, #0]
	SendData[1] = ADDRESS;
 8002ec2:	4b87      	ldr	r3, [pc, #540]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	705a      	strb	r2, [r3, #1]
	SendData[2] = COLORSEND_SEQNUM;
 8002ec8:	4b85      	ldr	r3, [pc, #532]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002eca:	2205      	movs	r2, #5
 8002ecc:	709a      	strb	r2, [r3, #2]
	SendData[3] = COLORSEND_DATANUM;
 8002ece:	4b84      	ldr	r3, [pc, #528]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002ed0:	2205      	movs	r2, #5
 8002ed2:	70da      	strb	r2, [r3, #3]
	SendData[4] = COLORSEND_CMD;
 8002ed4:	4b82      	ldr	r3, [pc, #520]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002ed6:	2232      	movs	r2, #50	; 0x32
 8002ed8:	711a      	strb	r2, [r3, #4]
	SendData[5] = 0;
 8002eda:	4b81      	ldr	r3, [pc, #516]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	715a      	strb	r2, [r3, #5]
	SendData[6] = 0;
 8002ee0:	4b7f      	ldr	r3, [pc, #508]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	719a      	strb	r2, [r3, #6]
	SendData[7] = 0;
 8002ee6:	4b7e      	ldr	r3, [pc, #504]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	71da      	strb	r2, [r3, #7]
	SendData[8] = 0;
 8002eec:	4b7c      	ldr	r3, [pc, #496]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	721a      	strb	r2, [r3, #8]
	SendData[9] = 0;
 8002ef2:	4b7b      	ldr	r3, [pc, #492]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	725a      	strb	r2, [r3, #9]
	SendData[10] = 0;
 8002ef8:	4b79      	ldr	r3, [pc, #484]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	729a      	strb	r2, [r3, #10]
	SendData[11] = 0;
 8002efe:	4b78      	ldr	r3, [pc, #480]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	72da      	strb	r2, [r3, #11]
	SendData[12] = 0;
 8002f04:	4b76      	ldr	r3, [pc, #472]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	731a      	strb	r2, [r3, #12]
	SendData[13] = 0;
 8002f0a:	4b75      	ldr	r3, [pc, #468]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	735a      	strb	r2, [r3, #13]
	SendData[14] = 0;
 8002f10:	4b73      	ldr	r3, [pc, #460]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	739a      	strb	r2, [r3, #14]
	for(int i=1; i<16; i++){
 8002f16:	2301      	movs	r3, #1
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1a:	e038      	b.n	8002f8e <D_Slider_SetColorData+0xf2>
		SendData[5 + (i/8)] |= (setColorR[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	da00      	bge.n	8002f24 <D_Slider_SetColorData+0x88>
 8002f22:	3307      	adds	r3, #7
 8002f24:	10db      	asrs	r3, r3, #3
 8002f26:	4618      	mov	r0, r3
 8002f28:	1d43      	adds	r3, r0, #5
 8002f2a:	4a6d      	ldr	r2, [pc, #436]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002f2c:	5cd3      	ldrb	r3, [r2, r3]
 8002f2e:	b25c      	sxtb	r4, r3
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	3b01      	subs	r3, #1
 8002f34:	4a6b      	ldr	r2, [pc, #428]	; (80030e4 <D_Slider_SetColorData+0x248>)
 8002f36:	fb82 1203 	smull	r1, r2, r2, r3
 8002f3a:	17db      	asrs	r3, r3, #31
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	3304      	adds	r3, #4
 8002f40:	461a      	mov	r2, r3
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	18d5      	adds	r5, r2, r3
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	1e59      	subs	r1, r3, #1
 8002f50:	4b64      	ldr	r3, [pc, #400]	; (80030e4 <D_Slider_SetColorData+0x248>)
 8002f52:	fb83 3201 	smull	r3, r2, r3, r1
 8002f56:	17cb      	asrs	r3, r1, #31
 8002f58:	1ad2      	subs	r2, r2, r3
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	1aca      	subs	r2, r1, r3
 8002f62:	5cab      	ldrb	r3, [r5, r2]
 8002f64:	4619      	mov	r1, r3
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	425a      	negs	r2, r3
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	f002 0207 	and.w	r2, r2, #7
 8002f72:	bf58      	it	pl
 8002f74:	4253      	negpl	r3, r2
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	b25b      	sxtb	r3, r3
 8002f7c:	4323      	orrs	r3, r4
 8002f7e:	b25a      	sxtb	r2, r3
 8002f80:	1d43      	adds	r3, r0, #5
 8002f82:	b2d1      	uxtb	r1, r2
 8002f84:	4a56      	ldr	r2, [pc, #344]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002f86:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	2b0f      	cmp	r3, #15
 8002f92:	ddc3      	ble.n	8002f1c <D_Slider_SetColorData+0x80>
	}
	for(int i=1; i<16; i++){
 8002f94:	2301      	movs	r3, #1
 8002f96:	623b      	str	r3, [r7, #32]
 8002f98:	e038      	b.n	800300c <D_Slider_SetColorData+0x170>
		SendData[7 + (i/8)] |= (setColorL[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	da00      	bge.n	8002fa2 <D_Slider_SetColorData+0x106>
 8002fa0:	3307      	adds	r3, #7
 8002fa2:	10db      	asrs	r3, r3, #3
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	1dc3      	adds	r3, r0, #7
 8002fa8:	4a4d      	ldr	r2, [pc, #308]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
 8002fac:	b25c      	sxtb	r4, r3
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	4a4c      	ldr	r2, [pc, #304]	; (80030e4 <D_Slider_SetColorData+0x248>)
 8002fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8002fb8:	17db      	asrs	r3, r3, #31
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	18d5      	adds	r5, r2, r3
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	1e59      	subs	r1, r3, #1
 8002fce:	4b45      	ldr	r3, [pc, #276]	; (80030e4 <D_Slider_SetColorData+0x248>)
 8002fd0:	fb83 3201 	smull	r3, r2, r3, r1
 8002fd4:	17cb      	asrs	r3, r1, #31
 8002fd6:	1ad2      	subs	r2, r2, r3
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	1aca      	subs	r2, r1, r3
 8002fe0:	5cab      	ldrb	r3, [r5, r2]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	425a      	negs	r2, r3
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	f002 0207 	and.w	r2, r2, #7
 8002ff0:	bf58      	it	pl
 8002ff2:	4253      	negpl	r3, r2
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	b25b      	sxtb	r3, r3
 8002ffa:	4323      	orrs	r3, r4
 8002ffc:	b25a      	sxtb	r2, r3
 8002ffe:	1dc3      	adds	r3, r0, #7
 8003000:	b2d1      	uxtb	r1, r2
 8003002:	4a37      	ldr	r2, [pc, #220]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8003004:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	3301      	adds	r3, #1
 800300a:	623b      	str	r3, [r7, #32]
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	2b0f      	cmp	r3, #15
 8003010:	ddc3      	ble.n	8002f9a <D_Slider_SetColorData+0xfe>
	}

	uint8_t dataSum = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	77fb      	strb	r3, [r7, #31]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 8003016:	2301      	movs	r3, #1
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	e009      	b.n	8003030 <D_Slider_SetColorData+0x194>
		dataSum += SendData[i];
 800301c:	4a30      	ldr	r2, [pc, #192]	; (80030e0 <D_Slider_SetColorData+0x244>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4413      	add	r3, r2
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	7ffb      	ldrb	r3, [r7, #31]
 8003026:	4413      	add	r3, r2
 8003028:	77fb      	strb	r3, [r7, #31]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	3301      	adds	r3, #1
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b08      	cmp	r3, #8
 8003034:	ddf2      	ble.n	800301c <D_Slider_SetColorData+0x180>
	}

	AdditionalPacket = 0;
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <D_Slider_SetColorData+0x24c>)
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
		//SendData[10] = SendData[9];
		//SendData[8] = SendData[7];
		SendData[10] = tempData;
	}
	*/
	for(int i=5; i<9+AdditionalPacket; i++){
 800303c:	2305      	movs	r3, #5
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	e03a      	b.n	80030b8 <D_Slider_SetColorData+0x21c>
		if(SendData[i] == ESCAPE_PACKET || SendData[i] == FIRSTBYTE) {
 8003042:	4a27      	ldr	r2, [pc, #156]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	4413      	add	r3, r2
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2bd0      	cmp	r3, #208	; 0xd0
 800304c:	d005      	beq.n	800305a <D_Slider_SetColorData+0x1be>
 800304e:	4a24      	ldr	r2, [pc, #144]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	4413      	add	r3, r2
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2be0      	cmp	r3, #224	; 0xe0
 8003058:	d12b      	bne.n	80030b2 <D_Slider_SetColorData+0x216>
			AdditionalPacket++;
 800305a:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <D_Slider_SetColorData+0x24c>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <D_Slider_SetColorData+0x24c>)
 8003064:	701a      	strb	r2, [r3, #0]
			uint8_t tempData = SendData[i] - 1;
 8003066:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4413      	add	r3, r2
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	3b01      	subs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
			SendData[i] = ESCAPE_PACKET;
 8003072:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	4413      	add	r3, r2
 8003078:	22d0      	movs	r2, #208	; 0xd0
 800307a:	701a      	strb	r2, [r3, #0]
			for(int j=i+3; j>i; j--){
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3303      	adds	r3, #3
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	e00a      	b.n	800309a <D_Slider_SetColorData+0x1fe>
				SendData[j+1] = SendData[j];
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	3301      	adds	r3, #1
 8003088:	4915      	ldr	r1, [pc, #84]	; (80030e0 <D_Slider_SetColorData+0x244>)
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	440a      	add	r2, r1
 800308e:	7811      	ldrb	r1, [r2, #0]
 8003090:	4a13      	ldr	r2, [pc, #76]	; (80030e0 <D_Slider_SetColorData+0x244>)
 8003092:	54d1      	strb	r1, [r2, r3]
			for(int j=i+3; j>i; j--){
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	3b01      	subs	r3, #1
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	429a      	cmp	r2, r3
 80030a0:	dcf0      	bgt.n	8003084 <D_Slider_SetColorData+0x1e8>
			}
			SendData[i+1] = tempData;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	3301      	adds	r3, #1
 80030a6:	490e      	ldr	r1, [pc, #56]	; (80030e0 <D_Slider_SetColorData+0x244>)
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	54ca      	strb	r2, [r1, r3]
			i++;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	3301      	adds	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
	for(int i=5; i<9+AdditionalPacket; i++){
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	3301      	adds	r3, #1
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <D_Slider_SetColorData+0x24c>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	3308      	adds	r3, #8
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	ddbe      	ble.n	8003042 <D_Slider_SetColorData+0x1a6>
		}
	}

	SendData[COLORSEND_LENGTH-1 + AdditionalPacket] = (uint8_t)dataSum;
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <D_Slider_SetColorData+0x24c>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	3309      	adds	r3, #9
 80030ca:	4905      	ldr	r1, [pc, #20]	; (80030e0 <D_Slider_SetColorData+0x244>)
 80030cc:	7ffa      	ldrb	r2, [r7, #31]
 80030ce:	54ca      	strb	r2, [r1, r3]
 80030d0:	e000      	b.n	80030d4 <D_Slider_SetColorData+0x238>
	if (!_send) return;
 80030d2:	bf00      	nop
}
 80030d4:	372c      	adds	r7, #44	; 0x2c
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bcb0      	pop	{r4, r5, r7}
 80030da:	4770      	bx	lr
 80030dc:	20000140 	.word	0x20000140
 80030e0:	200000b4 	.word	0x200000b4
 80030e4:	55555556 	.word	0x55555556
 80030e8:	200000f4 	.word	0x200000f4

080030ec <D_Slider_TransitionCompletedCallBack>:


void D_Slider_TransitionCompletedCallBack(){
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
	had_completed_tx = true;
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <D_Slider_TransitionCompletedCallBack+0x14>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
	//SndErrTime = 0;
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	20000014 	.word	0x20000014

08003104 <D_Slider_ReceptionCompletedCallBack>:

void D_Slider_ReceptionCompletedCallBack(){
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
	had_completed_rx = true;
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <D_Slider_ReceptionCompletedCallBack+0x18>)
 800310a:	2201      	movs	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
	//RcvErrTime = 0;
	D_Slider_CheckData((uint8_t*)RecvData, 10);
 800310e:	210a      	movs	r1, #10
 8003110:	4803      	ldr	r0, [pc, #12]	; (8003120 <D_Slider_ReceptionCompletedCallBack+0x1c>)
 8003112:	f7ff fe59 	bl	8002dc8 <D_Slider_CheckData>
			TouchData[i] = RecvData[i+3];
		}
	}
	*/
	//D_USBHID_SetSendData_Touch(TouchData);
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000015 	.word	0x20000015
 8003120:	200000f8 	.word	0x200000f8

08003124 <D_GPIO_Set>:
#include "../Inc/GPIO.h"
#include <stdlib.h>
#include <stdbool.h>
#include "stm32f4xx_hal.h"

void D_GPIO_Set(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_SET);
 8003130:	887b      	ldrh	r3, [r7, #2]
 8003132:	2201      	movs	r2, #1
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f001 fec4 	bl	8004ec4 <HAL_GPIO_WritePin>
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <D_GPIO_Reset>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
 8003150:	887b      	ldrh	r3, [r7, #2]
 8003152:	2200      	movs	r2, #0
 8003154:	4619      	mov	r1, r3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f001 feb4 	bl	8004ec4 <HAL_GPIO_WritePin>
}
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <D_GPIO_Read>:

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 8003170:	887b      	ldrh	r3, [r7, #2]
 8003172:	4619      	mov	r1, r3
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f001 fe8d 	bl	8004e94 <HAL_GPIO_ReadPin>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf14      	ite	ne
 8003180:	2301      	movne	r3, #1
 8003182:	2300      	moveq	r3, #0
 8003184:	b2db      	uxtb	r3, r3
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed_tx){
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <D_Mess_flush+0x54>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	f083 0301 	eor.w	r3, r3, #1
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <D_Mess_flush+0x1c>
		outptr = buff;
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <D_Mess_flush+0x58>)
 80031a6:	4a11      	ldr	r2, [pc, #68]	; (80031ec <D_Mess_flush+0x5c>)
 80031a8:	601a      	str	r2, [r3, #0]
		return;
 80031aa:	e01a      	b.n	80031e2 <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <D_Mess_flush+0x58>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <D_Mess_flush+0x58>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	490b      	ldr	r1, [pc, #44]	; (80031e8 <D_Mess_flush+0x58>)
 80031bc:	600a      	str	r2, [r1, #0]
 80031be:	220a      	movs	r2, #10
 80031c0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <D_Mess_flush+0x58>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a09      	ldr	r2, [pc, #36]	; (80031ec <D_Mess_flush+0x5c>)
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	461a      	mov	r2, r3
 80031ce:	4907      	ldr	r1, [pc, #28]	; (80031ec <D_Mess_flush+0x5c>)
 80031d0:	4807      	ldr	r0, [pc, #28]	; (80031f0 <D_Mess_flush+0x60>)
 80031d2:	f003 facf 	bl	8006774 <HAL_UART_Transmit_DMA>
		had_completed_tx = false;
 80031d6:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <D_Mess_flush+0x54>)
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 80031dc:	4b02      	ldr	r3, [pc, #8]	; (80031e8 <D_Mess_flush+0x58>)
 80031de:	4a03      	ldr	r2, [pc, #12]	; (80031ec <D_Mess_flush+0x5c>)
 80031e0:	601a      	str	r2, [r3, #0]
}
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000020 	.word	0x20000020
 80031e8:	2000092c 	.word	0x2000092c
 80031ec:	200001cc 	.word	0x200001cc
 80031f0:	200008b8 	.word	0x200008b8

080031f4 <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  had_completed_tx = true;
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <D_Mess_TransitionCompletedCallBack+0x14>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	20000020 	.word	0x20000020

0800320c <D_Mess_ReceptionCompletedCallBack>:
void D_Mess_ReceptionCompletedCallBack(void){
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  had_completed_rx = true;
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <D_Mess_ReceptionCompletedCallBack+0x14>)
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
}
 8003216:	bf00      	nop
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	20000021 	.word	0x20000021

08003224 <D_PWM_Init>:
#include <stdlib.h>
#include "stm32f4xx_hal.h"

//extern TIM_HandleTypeDef htim3;

void D_PWM_Init(void){
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003228:	2100      	movs	r1, #0
 800322a:	480c      	ldr	r0, [pc, #48]	; (800325c <D_PWM_Init+0x38>)
 800322c:	f002 fc76 	bl	8005b1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003230:	2104      	movs	r1, #4
 8003232:	480a      	ldr	r0, [pc, #40]	; (800325c <D_PWM_Init+0x38>)
 8003234:	f002 fc72 	bl	8005b1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003238:	2108      	movs	r1, #8
 800323a:	4808      	ldr	r0, [pc, #32]	; (800325c <D_PWM_Init+0x38>)
 800323c:	f002 fc6e 	bl	8005b1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003240:	210c      	movs	r1, #12
 8003242:	4806      	ldr	r0, [pc, #24]	; (800325c <D_PWM_Init+0x38>)
 8003244:	f002 fc6a 	bl	8005b1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003248:	2100      	movs	r1, #0
 800324a:	4805      	ldr	r0, [pc, #20]	; (8003260 <D_PWM_Init+0x3c>)
 800324c:	f002 fc66 	bl	8005b1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003250:	2104      	movs	r1, #4
 8003252:	4803      	ldr	r0, [pc, #12]	; (8003260 <D_PWM_Init+0x3c>)
 8003254:	f002 fc62 	bl	8005b1c <HAL_TIM_PWM_Start>
}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200006c4 	.word	0x200006c4
 8003260:	20000870 	.word	0x20000870

08003264 <D_PWM_Set>:

void D_PWM_Set(int channel, int value){
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3b01      	subs	r3, #1
 8003272:	2b05      	cmp	r3, #5
 8003274:	d82c      	bhi.n	80032d0 <D_PWM_Set+0x6c>
 8003276:	a201      	add	r2, pc, #4	; (adr r2, 800327c <D_PWM_Set+0x18>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	08003295 	.word	0x08003295
 8003280:	0800329f 	.word	0x0800329f
 8003284:	080032a9 	.word	0x080032a9
 8003288:	080032b3 	.word	0x080032b3
 800328c:	080032bd 	.word	0x080032bd
 8003290:	080032c7 	.word	0x080032c7
	switch(channel){
	case 1:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value);
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <D_PWM_Set+0x78>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800329c:	e018      	b.n	80032d0 <D_PWM_Set+0x6c>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, value);
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <D_PWM_Set+0x78>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80032a6:	e013      	b.n	80032d0 <D_PWM_Set+0x6c>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <D_PWM_Set+0x78>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80032b0:	e00e      	b.n	80032d0 <D_PWM_Set+0x6c>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, value);
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <D_PWM_Set+0x78>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80032ba:	e009      	b.n	80032d0 <D_PWM_Set+0x6c>
	case 5:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <D_PWM_Set+0x7c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80032c4:	e004      	b.n	80032d0 <D_PWM_Set+0x6c>
	case 6:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, value);
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <D_PWM_Set+0x7c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80032ce:	bf00      	nop
	}
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	200006c4 	.word	0x200006c4
 80032e0:	20000870 	.word	0x20000870

080032e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HAL_Init+0x40>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a0d      	ldr	r2, [pc, #52]	; (8003324 <HAL_Init+0x40>)
 80032ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_Init+0x40>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <HAL_Init+0x40>)
 80032fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_Init+0x40>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a07      	ldr	r2, [pc, #28]	; (8003324 <HAL_Init+0x40>)
 8003306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800330c:	2003      	movs	r0, #3
 800330e:	f000 ffe9 	bl	80042e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003312:	2000      	movs	r0, #0
 8003314:	f000 f808 	bl	8003328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003318:	f7fd fedc 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023c00 	.word	0x40023c00

08003328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003330:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_InitTick+0x54>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_InitTick+0x58>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	4619      	mov	r1, r3
 800333a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800333e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	4618      	mov	r0, r3
 8003348:	f001 f801 	bl	800434e <HAL_SYSTICK_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e00e      	b.n	8003374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b0f      	cmp	r3, #15
 800335a:	d80a      	bhi.n	8003372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800335c:	2200      	movs	r2, #0
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003364:	f000 ffc9 	bl	80042fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003368:	4a06      	ldr	r2, [pc, #24]	; (8003384 <HAL_InitTick+0x5c>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	e000      	b.n	8003374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000010 	.word	0x20000010
 8003380:	20000028 	.word	0x20000028
 8003384:	20000024 	.word	0x20000024

08003388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_IncTick+0x20>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_IncTick+0x24>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4413      	add	r3, r2
 8003398:	4a04      	ldr	r2, [pc, #16]	; (80033ac <HAL_IncTick+0x24>)
 800339a:	6013      	str	r3, [r2, #0]
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000028 	.word	0x20000028
 80033ac:	20000930 	.word	0x20000930

080033b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return uwTick;
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <HAL_GetTick+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000930 	.word	0x20000930

080033c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0ed      	b.n	80035b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd fe9c 	bl	8001124 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033fc:	f7ff ffd8 	bl	80033b0 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003402:	e012      	b.n	800342a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003404:	f7ff ffd4 	bl	80033b0 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b0a      	cmp	r3, #10
 8003410:	d90b      	bls.n	800342a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2205      	movs	r2, #5
 8003422:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0c5      	b.n	80035b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0e5      	beq.n	8003404 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0202 	bic.w	r2, r2, #2
 8003446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003448:	f7ff ffb2 	bl	80033b0 <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800344e:	e012      	b.n	8003476 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003450:	f7ff ffae 	bl	80033b0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b0a      	cmp	r3, #10
 800345c:	d90b      	bls.n	8003476 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2205      	movs	r2, #5
 800346e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e09f      	b.n	80035b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e5      	bne.n	8003450 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	7e1b      	ldrb	r3, [r3, #24]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d108      	bne.n	800349e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	e007      	b.n	80034ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7e5b      	ldrb	r3, [r3, #25]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d108      	bne.n	80034c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	e007      	b.n	80034d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7e9b      	ldrb	r3, [r3, #26]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d108      	bne.n	80034f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0220 	orr.w	r2, r2, #32
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e007      	b.n	8003502 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0220 	bic.w	r2, r2, #32
 8003500:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	7edb      	ldrb	r3, [r3, #27]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d108      	bne.n	800351c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0210 	bic.w	r2, r2, #16
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e007      	b.n	800352c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0210 	orr.w	r2, r2, #16
 800352a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7f1b      	ldrb	r3, [r3, #28]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d108      	bne.n	8003546 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0208 	orr.w	r2, r2, #8
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e007      	b.n	8003556 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0208 	bic.w	r2, r2, #8
 8003554:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7f5b      	ldrb	r3, [r3, #29]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d108      	bne.n	8003570 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0204 	orr.w	r2, r2, #4
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e007      	b.n	8003580 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0204 	bic.w	r2, r2, #4
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	ea42 0103 	orr.w	r1, r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	1e5a      	subs	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d003      	beq.n	80035e6 <HAL_CAN_ConfigFilter+0x26>
 80035de:	7cfb      	ldrb	r3, [r7, #19]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	f040 80be 	bne.w	8003762 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80035e6:	4b65      	ldr	r3, [pc, #404]	; (800377c <HAL_CAN_ConfigFilter+0x1bc>)
 80035e8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035f0:	f043 0201 	orr.w	r2, r3, #1
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003600:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	431a      	orrs	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	2201      	movs	r2, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	43db      	mvns	r3, r3
 8003638:	401a      	ands	r2, r3
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d123      	bne.n	8003690 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	43db      	mvns	r3, r3
 8003652:	401a      	ands	r2, r3
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800366a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3248      	adds	r2, #72	; 0x48
 8003670:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003684:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003686:	6979      	ldr	r1, [r7, #20]
 8003688:	3348      	adds	r3, #72	; 0x48
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	440b      	add	r3, r1
 800368e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d122      	bne.n	80036de <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036b8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	3248      	adds	r2, #72	; 0x48
 80036be:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036d2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036d4:	6979      	ldr	r1, [r7, #20]
 80036d6:	3348      	adds	r3, #72	; 0x48
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	440b      	add	r3, r1
 80036dc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	43db      	mvns	r3, r3
 80036f0:	401a      	ands	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80036f8:	e007      	b.n	800370a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	431a      	orrs	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	43db      	mvns	r3, r3
 800371c:	401a      	ands	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003724:	e007      	b.n	8003736 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	431a      	orrs	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	431a      	orrs	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003754:	f023 0201 	bic.w	r2, r3, #1
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e006      	b.n	8003770 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
  }
}
 8003770:	4618      	mov	r0, r3
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40006400 	.word	0x40006400

08003780 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d12e      	bne.n	80037f2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037ac:	f7ff fe00 	bl	80033b0 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037b2:	e012      	b.n	80037da <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037b4:	f7ff fdfc 	bl	80033b0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b0a      	cmp	r3, #10
 80037c0:	d90b      	bls.n	80037da <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2205      	movs	r2, #5
 80037d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e012      	b.n	8003800 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e5      	bne.n	80037b4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e006      	b.n	8003800 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800381c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003826:	7ffb      	ldrb	r3, [r7, #31]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d003      	beq.n	8003834 <HAL_CAN_AddTxMessage+0x2c>
 800382c:	7ffb      	ldrb	r3, [r7, #31]
 800382e:	2b02      	cmp	r3, #2
 8003830:	f040 80b8 	bne.w	80039a4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003844:	2b00      	cmp	r3, #0
 8003846:	d105      	bne.n	8003854 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80a0 	beq.w	8003994 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	0e1b      	lsrs	r3, r3, #24
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d907      	bls.n	8003874 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e09e      	b.n	80039b2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003874:	2201      	movs	r2, #1
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	409a      	lsls	r2, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10d      	bne.n	80038a2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003890:	68f9      	ldr	r1, [r7, #12]
 8003892:	6809      	ldr	r1, [r1, #0]
 8003894:	431a      	orrs	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	3318      	adds	r3, #24
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	440b      	add	r3, r1
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	e00f      	b.n	80038c2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038ac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038b2:	68f9      	ldr	r1, [r7, #12]
 80038b4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80038b6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	3318      	adds	r3, #24
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	440b      	add	r3, r1
 80038c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	3318      	adds	r3, #24
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	440b      	add	r3, r1
 80038d2:	3304      	adds	r3, #4
 80038d4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	7d1b      	ldrb	r3, [r3, #20]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d111      	bne.n	8003902 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	3318      	adds	r3, #24
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	4413      	add	r3, r2
 80038ea:	3304      	adds	r3, #4
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	6811      	ldr	r1, [r2, #0]
 80038f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	3318      	adds	r3, #24
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	440b      	add	r3, r1
 80038fe:	3304      	adds	r3, #4
 8003900:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3307      	adds	r3, #7
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	061a      	lsls	r2, r3, #24
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3306      	adds	r3, #6
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	041b      	lsls	r3, r3, #16
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3305      	adds	r3, #5
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	4313      	orrs	r3, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	3204      	adds	r2, #4
 8003922:	7812      	ldrb	r2, [r2, #0]
 8003924:	4610      	mov	r0, r2
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	6811      	ldr	r1, [r2, #0]
 800392a:	ea43 0200 	orr.w	r2, r3, r0
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	440b      	add	r3, r1
 8003934:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003938:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3303      	adds	r3, #3
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	061a      	lsls	r2, r3, #24
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3302      	adds	r3, #2
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	041b      	lsls	r3, r3, #16
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3301      	adds	r3, #1
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	4313      	orrs	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	7812      	ldrb	r2, [r2, #0]
 800395a:	4610      	mov	r0, r2
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	6811      	ldr	r1, [r2, #0]
 8003960:	ea43 0200 	orr.w	r2, r3, r0
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	440b      	add	r3, r1
 800396a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800396e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	3318      	adds	r3, #24
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	4413      	add	r3, r2
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	6811      	ldr	r1, [r2, #0]
 8003982:	f043 0201 	orr.w	r2, r3, #1
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	3318      	adds	r3, #24
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	440b      	add	r3, r1
 800398e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e00e      	b.n	80039b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e006      	b.n	80039b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
  }
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3724      	adds	r7, #36	; 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ce:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d002      	beq.n	80039dc <HAL_CAN_AbortTxRequest+0x1e>
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d128      	bne.n	8003a2e <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039f4:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0e:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003a28:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e006      	b.n	8003a3c <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
  }
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a5a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003a5c:	7afb      	ldrb	r3, [r7, #11]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d002      	beq.n	8003a68 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003a62:	7afb      	ldrb	r3, [r7, #11]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d11d      	bne.n	8003aa4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b087      	sub	sp, #28
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ac6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d003      	beq.n	8003ad6 <HAL_CAN_GetRxMessage+0x24>
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	f040 80f3 	bne.w	8003cbc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10e      	bne.n	8003afa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d116      	bne.n	8003b18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e0e7      	b.n	8003cca <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0d8      	b.n	8003cca <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	331b      	adds	r3, #27
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	4413      	add	r3, r2
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0204 	and.w	r2, r3, #4
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10c      	bne.n	8003b50 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	331b      	adds	r3, #27
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	4413      	add	r3, r2
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	0d5b      	lsrs	r3, r3, #21
 8003b46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	e00b      	b.n	8003b68 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	331b      	adds	r3, #27
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	4413      	add	r3, r2
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	08db      	lsrs	r3, r3, #3
 8003b60:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	331b      	adds	r3, #27
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	4413      	add	r3, r2
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0202 	and.w	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	331b      	adds	r3, #27
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	4413      	add	r3, r2
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 020f 	and.w	r2, r3, #15
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	331b      	adds	r3, #27
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	331b      	adds	r3, #27
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	4413      	add	r3, r2
 8003bba:	3304      	adds	r3, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	0c1b      	lsrs	r3, r3, #16
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0a1a      	lsrs	r2, r3, #8
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	0c1a      	lsrs	r2, r3, #16
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	0e1a      	lsrs	r2, r3, #24
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	3303      	adds	r3, #3
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	0a1a      	lsrs	r2, r3, #8
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	3305      	adds	r3, #5
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	0c1a      	lsrs	r2, r3, #16
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	3306      	adds	r3, #6
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	0e1a      	lsrs	r2, r3, #24
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	3307      	adds	r3, #7
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d108      	bne.n	8003ca8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0220 	orr.w	r2, r2, #32
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	e007      	b.n	8003cb8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0220 	orr.w	r2, r2, #32
 8003cb6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	e006      	b.n	8003cca <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d002      	beq.n	8003cf4 <HAL_CAN_ActivateNotification+0x1e>
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d109      	bne.n	8003d08 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6959      	ldr	r1, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e006      	b.n	8003d16 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b08a      	sub	sp, #40	; 0x28
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d07c      	beq.n	8003e62 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d023      	beq.n	8003dba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2201      	movs	r2, #1
 8003d78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7fd f981 	bl	800108c <HAL_CAN_TxMailbox0CompleteCallback>
 8003d8a:	e016      	b.n	8003dba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d004      	beq.n	8003da0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9e:	e00c      	b.n	8003dba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d004      	beq.n	8003db4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	e002      	b.n	8003dba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f96b 	bl	8004090 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d024      	beq.n	8003e0e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dcc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7fd f961 	bl	80010a0 <HAL_CAN_TxMailbox1CompleteCallback>
 8003dde:	e016      	b.n	8003e0e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
 8003df2:	e00c      	b.n	8003e0e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d004      	beq.n	8003e08 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	e002      	b.n	8003e0e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f94b 	bl	80040a4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d024      	beq.n	8003e62 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fd f941 	bl	80010b4 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e32:	e016      	b.n	8003e62 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
 8003e46:	e00c      	b.n	8003e62 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5a:	e002      	b.n	8003e62 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f92b 	bl	80040b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00c      	beq.n	8003e86 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2210      	movs	r2, #16
 8003e84:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00b      	beq.n	8003ea8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d006      	beq.n	8003ea8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f912 	bl	80040cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fd f8d1 	bl	8001068 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00c      	beq.n	8003eea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00b      	beq.n	8003f0c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d006      	beq.n	8003f0c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2208      	movs	r2, #8
 8003f04:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f8f4 	bl	80040f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f8db 	bl	80040e0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00b      	beq.n	8003f4c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d006      	beq.n	8003f4c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2210      	movs	r2, #16
 8003f44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f8de 	bl	8004108 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00b      	beq.n	8003f6e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d006      	beq.n	8003f6e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2208      	movs	r2, #8
 8003f66:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f8d7 	bl	800411c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d07b      	beq.n	8004070 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d072      	beq.n	8004068 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	f043 0302 	orr.w	r3, r3, #2
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	f043 0304 	orr.w	r3, r3, #4
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d043      	beq.n	8004068 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d03e      	beq.n	8004068 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ff0:	2b60      	cmp	r3, #96	; 0x60
 8003ff2:	d02b      	beq.n	800404c <HAL_CAN_IRQHandler+0x32a>
 8003ff4:	2b60      	cmp	r3, #96	; 0x60
 8003ff6:	d82e      	bhi.n	8004056 <HAL_CAN_IRQHandler+0x334>
 8003ff8:	2b50      	cmp	r3, #80	; 0x50
 8003ffa:	d022      	beq.n	8004042 <HAL_CAN_IRQHandler+0x320>
 8003ffc:	2b50      	cmp	r3, #80	; 0x50
 8003ffe:	d82a      	bhi.n	8004056 <HAL_CAN_IRQHandler+0x334>
 8004000:	2b40      	cmp	r3, #64	; 0x40
 8004002:	d019      	beq.n	8004038 <HAL_CAN_IRQHandler+0x316>
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d826      	bhi.n	8004056 <HAL_CAN_IRQHandler+0x334>
 8004008:	2b30      	cmp	r3, #48	; 0x30
 800400a:	d010      	beq.n	800402e <HAL_CAN_IRQHandler+0x30c>
 800400c:	2b30      	cmp	r3, #48	; 0x30
 800400e:	d822      	bhi.n	8004056 <HAL_CAN_IRQHandler+0x334>
 8004010:	2b10      	cmp	r3, #16
 8004012:	d002      	beq.n	800401a <HAL_CAN_IRQHandler+0x2f8>
 8004014:	2b20      	cmp	r3, #32
 8004016:	d005      	beq.n	8004024 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004018:	e01d      	b.n	8004056 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	f043 0308 	orr.w	r3, r3, #8
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004022:	e019      	b.n	8004058 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	f043 0310 	orr.w	r3, r3, #16
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800402c:	e014      	b.n	8004058 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	f043 0320 	orr.w	r3, r3, #32
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004036:	e00f      	b.n	8004058 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004040:	e00a      	b.n	8004058 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800404a:	e005      	b.n	8004058 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004054:	e000      	b.n	8004058 <HAL_CAN_IRQHandler+0x336>
            break;
 8004056:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004066:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2204      	movs	r2, #4
 800406e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f854 	bl	8004130 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004088:	bf00      	nop
 800408a:	3728      	adds	r7, #40	; 0x28
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <__NVIC_SetPriorityGrouping+0x44>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004160:	4013      	ands	r3, r2
 8004162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800416c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004176:	4a04      	ldr	r2, [pc, #16]	; (8004188 <__NVIC_SetPriorityGrouping+0x44>)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	60d3      	str	r3, [r2, #12]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000ed00 	.word	0xe000ed00

0800418c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	0a1b      	lsrs	r3, r3, #8
 8004196:	f003 0307 	and.w	r3, r3, #7
}
 800419a:	4618      	mov	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	db0b      	blt.n	80041d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	f003 021f 	and.w	r2, r3, #31
 80041c0:	4907      	ldr	r1, [pc, #28]	; (80041e0 <__NVIC_EnableIRQ+0x38>)
 80041c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	2001      	movs	r0, #1
 80041ca:	fa00 f202 	lsl.w	r2, r0, r2
 80041ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	e000e100 	.word	0xe000e100

080041e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	db0a      	blt.n	800420e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	490c      	ldr	r1, [pc, #48]	; (8004230 <__NVIC_SetPriority+0x4c>)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	440b      	add	r3, r1
 8004208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800420c:	e00a      	b.n	8004224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4908      	ldr	r1, [pc, #32]	; (8004234 <__NVIC_SetPriority+0x50>)
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	3b04      	subs	r3, #4
 800421c:	0112      	lsls	r2, r2, #4
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	440b      	add	r3, r1
 8004222:	761a      	strb	r2, [r3, #24]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000e100 	.word	0xe000e100
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	; 0x24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f1c3 0307 	rsb	r3, r3, #7
 8004252:	2b04      	cmp	r3, #4
 8004254:	bf28      	it	cs
 8004256:	2304      	movcs	r3, #4
 8004258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3304      	adds	r3, #4
 800425e:	2b06      	cmp	r3, #6
 8004260:	d902      	bls.n	8004268 <NVIC_EncodePriority+0x30>
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3b03      	subs	r3, #3
 8004266:	e000      	b.n	800426a <NVIC_EncodePriority+0x32>
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800426c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43da      	mvns	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	401a      	ands	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	43d9      	mvns	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004290:	4313      	orrs	r3, r2
         );
}
 8004292:	4618      	mov	r0, r3
 8004294:	3724      	adds	r7, #36	; 0x24
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042b0:	d301      	bcc.n	80042b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042b2:	2301      	movs	r3, #1
 80042b4:	e00f      	b.n	80042d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <SysTick_Config+0x40>)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042be:	210f      	movs	r1, #15
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042c4:	f7ff ff8e 	bl	80041e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <SysTick_Config+0x40>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ce:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <SysTick_Config+0x40>)
 80042d0:	2207      	movs	r2, #7
 80042d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	e000e010 	.word	0xe000e010

080042e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff ff29 	bl	8004144 <__NVIC_SetPriorityGrouping>
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b086      	sub	sp, #24
 80042fe:	af00      	add	r7, sp, #0
 8004300:	4603      	mov	r3, r0
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800430c:	f7ff ff3e 	bl	800418c <__NVIC_GetPriorityGrouping>
 8004310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	6978      	ldr	r0, [r7, #20]
 8004318:	f7ff ff8e 	bl	8004238 <NVIC_EncodePriority>
 800431c:	4602      	mov	r2, r0
 800431e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff5d 	bl	80041e4 <__NVIC_SetPriority>
}
 800432a:	bf00      	nop
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	4603      	mov	r3, r0
 800433a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800433c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff ff31 	bl	80041a8 <__NVIC_EnableIRQ>
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff ffa2 	bl	80042a0 <SysTick_Config>
 800435c:	4603      	mov	r3, r0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004374:	f7ff f81c 	bl	80033b0 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e099      	b.n	80044b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0201 	bic.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043a4:	e00f      	b.n	80043c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043a6:	f7ff f803 	bl	80033b0 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b05      	cmp	r3, #5
 80043b2:	d908      	bls.n	80043c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2203      	movs	r2, #3
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e078      	b.n	80044b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e8      	bne.n	80043a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4b38      	ldr	r3, [pc, #224]	; (80044c0 <HAL_DMA_Init+0x158>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800440a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	2b04      	cmp	r3, #4
 800441e:	d107      	bne.n	8004430 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	4313      	orrs	r3, r2
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f023 0307 	bic.w	r3, r3, #7
 8004446:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	2b04      	cmp	r3, #4
 8004458:	d117      	bne.n	800448a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00e      	beq.n	800448a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fb01 	bl	8004a74 <DMA_CheckFifoParam>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2240      	movs	r2, #64	; 0x40
 800447c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004486:	2301      	movs	r3, #1
 8004488:	e016      	b.n	80044b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fab8 	bl	8004a08 <DMA_CalcBaseAndBitshift>
 8004498:	4603      	mov	r3, r0
 800449a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a0:	223f      	movs	r2, #63	; 0x3f
 80044a2:	409a      	lsls	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	f010803f 	.word	0xf010803f

080044c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_DMA_Start_IT+0x26>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e040      	b.n	800456c <HAL_DMA_Start_IT+0xa8>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d12f      	bne.n	800455e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2202      	movs	r2, #2
 8004502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 fa4a 	bl	80049ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	223f      	movs	r2, #63	; 0x3f
 800451e:	409a      	lsls	r2, r3
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0216 	orr.w	r2, r2, #22
 8004532:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d007      	beq.n	800454c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0208 	orr.w	r2, r2, #8
 800454a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e005      	b.n	800456a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004566:	2302      	movs	r3, #2
 8004568:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800456a:	7dfb      	ldrb	r3, [r7, #23]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004580:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004582:	f7fe ff15 	bl	80033b0 <HAL_GetTick>
 8004586:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d008      	beq.n	80045a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2280      	movs	r2, #128	; 0x80
 8004598:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e052      	b.n	800464c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0216 	bic.w	r2, r2, #22
 80045b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695a      	ldr	r2, [r3, #20]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <HAL_DMA_Abort+0x62>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0208 	bic.w	r2, r2, #8
 80045e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045f6:	e013      	b.n	8004620 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045f8:	f7fe feda 	bl	80033b0 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b05      	cmp	r3, #5
 8004604:	d90c      	bls.n	8004620 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2203      	movs	r2, #3
 8004610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e015      	b.n	800464c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e4      	bne.n	80045f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004632:	223f      	movs	r2, #63	; 0x3f
 8004634:	409a      	lsls	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d004      	beq.n	8004672 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2280      	movs	r2, #128	; 0x80
 800466c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e00c      	b.n	800468c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2205      	movs	r2, #5
 8004676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046a4:	4b92      	ldr	r3, [pc, #584]	; (80048f0 <HAL_DMA_IRQHandler+0x258>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a92      	ldr	r2, [pc, #584]	; (80048f4 <HAL_DMA_IRQHandler+0x25c>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	0a9b      	lsrs	r3, r3, #10
 80046b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c2:	2208      	movs	r2, #8
 80046c4:	409a      	lsls	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01a      	beq.n	8004704 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d013      	beq.n	8004704 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0204 	bic.w	r2, r2, #4
 80046ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f0:	2208      	movs	r2, #8
 80046f2:	409a      	lsls	r2, r3
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fc:	f043 0201 	orr.w	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004708:	2201      	movs	r2, #1
 800470a:	409a      	lsls	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4013      	ands	r3, r2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d012      	beq.n	800473a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004726:	2201      	movs	r2, #1
 8004728:	409a      	lsls	r2, r3
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	f043 0202 	orr.w	r2, r3, #2
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473e:	2204      	movs	r2, #4
 8004740:	409a      	lsls	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4013      	ands	r3, r2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d012      	beq.n	8004770 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475c:	2204      	movs	r2, #4
 800475e:	409a      	lsls	r2, r3
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	f043 0204 	orr.w	r2, r3, #4
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004774:	2210      	movs	r2, #16
 8004776:	409a      	lsls	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d043      	beq.n	8004808 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d03c      	beq.n	8004808 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004792:	2210      	movs	r2, #16
 8004794:	409a      	lsls	r2, r3
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d018      	beq.n	80047da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d108      	bne.n	80047c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d024      	beq.n	8004808 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	4798      	blx	r3
 80047c6:	e01f      	b.n	8004808 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01b      	beq.n	8004808 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	4798      	blx	r3
 80047d8:	e016      	b.n	8004808 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d107      	bne.n	80047f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0208 	bic.w	r2, r2, #8
 80047f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480c:	2220      	movs	r2, #32
 800480e:	409a      	lsls	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 808e 	beq.w	8004936 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8086 	beq.w	8004936 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482e:	2220      	movs	r2, #32
 8004830:	409a      	lsls	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b05      	cmp	r3, #5
 8004840:	d136      	bne.n	80048b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0216 	bic.w	r2, r2, #22
 8004850:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695a      	ldr	r2, [r3, #20]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004860:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d103      	bne.n	8004872 <HAL_DMA_IRQHandler+0x1da>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486e:	2b00      	cmp	r3, #0
 8004870:	d007      	beq.n	8004882 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0208 	bic.w	r2, r2, #8
 8004880:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004886:	223f      	movs	r2, #63	; 0x3f
 8004888:	409a      	lsls	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d07d      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	4798      	blx	r3
        }
        return;
 80048ae:	e078      	b.n	80049a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01c      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d108      	bne.n	80048de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d030      	beq.n	8004936 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	4798      	blx	r3
 80048dc:	e02b      	b.n	8004936 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d027      	beq.n	8004936 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	4798      	blx	r3
 80048ee:	e022      	b.n	8004936 <HAL_DMA_IRQHandler+0x29e>
 80048f0:	20000010 	.word	0x20000010
 80048f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10f      	bne.n	8004926 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0210 	bic.w	r2, r2, #16
 8004914:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493a:	2b00      	cmp	r3, #0
 800493c:	d032      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d022      	beq.n	8004990 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2205      	movs	r2, #5
 800494e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0201 	bic.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	3301      	adds	r3, #1
 8004966:	60bb      	str	r3, [r7, #8]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	429a      	cmp	r2, r3
 800496c:	d307      	bcc.n	800497e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f2      	bne.n	8004962 <HAL_DMA_IRQHandler+0x2ca>
 800497c:	e000      	b.n	8004980 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800497e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4798      	blx	r3
 80049a0:	e000      	b.n	80049a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80049a2:	bf00      	nop
    }
  }
}
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop

080049ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b40      	cmp	r3, #64	; 0x40
 80049d8:	d108      	bne.n	80049ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049ea:	e007      	b.n	80049fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	60da      	str	r2, [r3, #12]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	3b10      	subs	r3, #16
 8004a18:	4a14      	ldr	r2, [pc, #80]	; (8004a6c <DMA_CalcBaseAndBitshift+0x64>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a22:	4a13      	ldr	r2, [pc, #76]	; (8004a70 <DMA_CalcBaseAndBitshift+0x68>)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4413      	add	r3, r2
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d909      	bls.n	8004a4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	1d1a      	adds	r2, r3, #4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	659a      	str	r2, [r3, #88]	; 0x58
 8004a48:	e007      	b.n	8004a5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	aaaaaaab 	.word	0xaaaaaaab
 8004a70:	080079b8 	.word	0x080079b8

08004a74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11f      	bne.n	8004ace <DMA_CheckFifoParam+0x5a>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d856      	bhi.n	8004b42 <DMA_CheckFifoParam+0xce>
 8004a94:	a201      	add	r2, pc, #4	; (adr r2, 8004a9c <DMA_CheckFifoParam+0x28>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004aad 	.word	0x08004aad
 8004aa0:	08004abf 	.word	0x08004abf
 8004aa4:	08004aad 	.word	0x08004aad
 8004aa8:	08004b43 	.word	0x08004b43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d046      	beq.n	8004b46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004abc:	e043      	b.n	8004b46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ac6:	d140      	bne.n	8004b4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004acc:	e03d      	b.n	8004b4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad6:	d121      	bne.n	8004b1c <DMA_CheckFifoParam+0xa8>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d837      	bhi.n	8004b4e <DMA_CheckFifoParam+0xda>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <DMA_CheckFifoParam+0x70>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004afb 	.word	0x08004afb
 8004aec:	08004af5 	.word	0x08004af5
 8004af0:	08004b0d 	.word	0x08004b0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
      break;
 8004af8:	e030      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d025      	beq.n	8004b52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b0a:	e022      	b.n	8004b52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b14:	d11f      	bne.n	8004b56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b1a:	e01c      	b.n	8004b56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d903      	bls.n	8004b2a <DMA_CheckFifoParam+0xb6>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d003      	beq.n	8004b30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b28:	e018      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b2e:	e015      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00e      	beq.n	8004b5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b40:	e00b      	b.n	8004b5a <DMA_CheckFifoParam+0xe6>
      break;
 8004b42:	bf00      	nop
 8004b44:	e00a      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      break;
 8004b46:	bf00      	nop
 8004b48:	e008      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      break;
 8004b4a:	bf00      	nop
 8004b4c:	e006      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      break;
 8004b4e:	bf00      	nop
 8004b50:	e004      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      break;
 8004b52:	bf00      	nop
 8004b54:	e002      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      break;   
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      break;
 8004b5a:	bf00      	nop
    }
  } 
  
  return status; 
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop

08004b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b089      	sub	sp, #36	; 0x24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	e165      	b.n	8004e54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b88:	2201      	movs	r2, #1
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	f040 8154 	bne.w	8004e4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d005      	beq.n	8004bbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d130      	bne.n	8004c20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	2203      	movs	r2, #3
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4013      	ands	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	f003 0201 	and.w	r2, r3, #1
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d017      	beq.n	8004c5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	2203      	movs	r2, #3
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4013      	ands	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 0303 	and.w	r3, r3, #3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d123      	bne.n	8004cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	08da      	lsrs	r2, r3, #3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3208      	adds	r2, #8
 8004c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	220f      	movs	r2, #15
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	08da      	lsrs	r2, r3, #3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3208      	adds	r2, #8
 8004caa:	69b9      	ldr	r1, [r7, #24]
 8004cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	2203      	movs	r2, #3
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 0203 	and.w	r2, r3, #3
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80ae 	beq.w	8004e4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	4b5d      	ldr	r3, [pc, #372]	; (8004e6c <HAL_GPIO_Init+0x300>)
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	4a5c      	ldr	r2, [pc, #368]	; (8004e6c <HAL_GPIO_Init+0x300>)
 8004cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d00:	6453      	str	r3, [r2, #68]	; 0x44
 8004d02:	4b5a      	ldr	r3, [pc, #360]	; (8004e6c <HAL_GPIO_Init+0x300>)
 8004d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d0e:	4a58      	ldr	r2, [pc, #352]	; (8004e70 <HAL_GPIO_Init+0x304>)
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	3302      	adds	r3, #2
 8004d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	220f      	movs	r2, #15
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a4f      	ldr	r2, [pc, #316]	; (8004e74 <HAL_GPIO_Init+0x308>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d025      	beq.n	8004d86 <HAL_GPIO_Init+0x21a>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a4e      	ldr	r2, [pc, #312]	; (8004e78 <HAL_GPIO_Init+0x30c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01f      	beq.n	8004d82 <HAL_GPIO_Init+0x216>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a4d      	ldr	r2, [pc, #308]	; (8004e7c <HAL_GPIO_Init+0x310>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d019      	beq.n	8004d7e <HAL_GPIO_Init+0x212>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a4c      	ldr	r2, [pc, #304]	; (8004e80 <HAL_GPIO_Init+0x314>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <HAL_GPIO_Init+0x20e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a4b      	ldr	r2, [pc, #300]	; (8004e84 <HAL_GPIO_Init+0x318>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00d      	beq.n	8004d76 <HAL_GPIO_Init+0x20a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a4a      	ldr	r2, [pc, #296]	; (8004e88 <HAL_GPIO_Init+0x31c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d007      	beq.n	8004d72 <HAL_GPIO_Init+0x206>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a49      	ldr	r2, [pc, #292]	; (8004e8c <HAL_GPIO_Init+0x320>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d101      	bne.n	8004d6e <HAL_GPIO_Init+0x202>
 8004d6a:	2306      	movs	r3, #6
 8004d6c:	e00c      	b.n	8004d88 <HAL_GPIO_Init+0x21c>
 8004d6e:	2307      	movs	r3, #7
 8004d70:	e00a      	b.n	8004d88 <HAL_GPIO_Init+0x21c>
 8004d72:	2305      	movs	r3, #5
 8004d74:	e008      	b.n	8004d88 <HAL_GPIO_Init+0x21c>
 8004d76:	2304      	movs	r3, #4
 8004d78:	e006      	b.n	8004d88 <HAL_GPIO_Init+0x21c>
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e004      	b.n	8004d88 <HAL_GPIO_Init+0x21c>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e002      	b.n	8004d88 <HAL_GPIO_Init+0x21c>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <HAL_GPIO_Init+0x21c>
 8004d86:	2300      	movs	r3, #0
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	f002 0203 	and.w	r2, r2, #3
 8004d8e:	0092      	lsls	r2, r2, #2
 8004d90:	4093      	lsls	r3, r2
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d98:	4935      	ldr	r1, [pc, #212]	; (8004e70 <HAL_GPIO_Init+0x304>)
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	089b      	lsrs	r3, r3, #2
 8004d9e:	3302      	adds	r3, #2
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004da6:	4b3a      	ldr	r3, [pc, #232]	; (8004e90 <HAL_GPIO_Init+0x324>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dca:	4a31      	ldr	r2, [pc, #196]	; (8004e90 <HAL_GPIO_Init+0x324>)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004dd0:	4b2f      	ldr	r3, [pc, #188]	; (8004e90 <HAL_GPIO_Init+0x324>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004df4:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <HAL_GPIO_Init+0x324>)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dfa:	4b25      	ldr	r3, [pc, #148]	; (8004e90 <HAL_GPIO_Init+0x324>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	43db      	mvns	r3, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4013      	ands	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e1e:	4a1c      	ldr	r2, [pc, #112]	; (8004e90 <HAL_GPIO_Init+0x324>)
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e24:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <HAL_GPIO_Init+0x324>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	4013      	ands	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e48:	4a11      	ldr	r2, [pc, #68]	; (8004e90 <HAL_GPIO_Init+0x324>)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	3301      	adds	r3, #1
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	2b0f      	cmp	r3, #15
 8004e58:	f67f ae96 	bls.w	8004b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	3724      	adds	r7, #36	; 0x24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	40013800 	.word	0x40013800
 8004e74:	40020000 	.word	0x40020000
 8004e78:	40020400 	.word	0x40020400
 8004e7c:	40020800 	.word	0x40020800
 8004e80:	40020c00 	.word	0x40020c00
 8004e84:	40021000 	.word	0x40021000
 8004e88:	40021400 	.word	0x40021400
 8004e8c:	40021800 	.word	0x40021800
 8004e90:	40013c00 	.word	0x40013c00

08004e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	887b      	ldrh	r3, [r7, #2]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004eac:	2301      	movs	r3, #1
 8004eae:	73fb      	strb	r3, [r7, #15]
 8004eb0:	e001      	b.n	8004eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	807b      	strh	r3, [r7, #2]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ed4:	787b      	ldrb	r3, [r7, #1]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eda:	887a      	ldrh	r2, [r7, #2]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ee0:	e003      	b.n	8004eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ee2:	887b      	ldrh	r3, [r7, #2]
 8004ee4:	041a      	lsls	r2, r3, #16
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	619a      	str	r2, [r3, #24]
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0cc      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b68      	ldr	r3, [pc, #416]	; (80050b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d90c      	bls.n	8004f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b65      	ldr	r3, [pc, #404]	; (80050b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f22:	4b63      	ldr	r3, [pc, #396]	; (80050b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0b8      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d020      	beq.n	8004f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f4c:	4b59      	ldr	r3, [pc, #356]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	4a58      	ldr	r2, [pc, #352]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f64:	4b53      	ldr	r3, [pc, #332]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	4a52      	ldr	r2, [pc, #328]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f70:	4b50      	ldr	r3, [pc, #320]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	494d      	ldr	r1, [pc, #308]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d044      	beq.n	8005018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d107      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f96:	4b47      	ldr	r3, [pc, #284]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d119      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e07f      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d003      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d107      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb6:	4b3f      	ldr	r3, [pc, #252]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e06f      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc6:	4b3b      	ldr	r3, [pc, #236]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e067      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fd6:	4b37      	ldr	r3, [pc, #220]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f023 0203 	bic.w	r2, r3, #3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	4934      	ldr	r1, [pc, #208]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe8:	f7fe f9e2 	bl	80033b0 <HAL_GetTick>
 8004fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fee:	e00a      	b.n	8005006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff0:	f7fe f9de 	bl	80033b0 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e04f      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005006:	4b2b      	ldr	r3, [pc, #172]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 020c 	and.w	r2, r3, #12
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	429a      	cmp	r2, r3
 8005016:	d1eb      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005018:	4b25      	ldr	r3, [pc, #148]	; (80050b0 <HAL_RCC_ClockConfig+0x1b8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d20c      	bcs.n	8005040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005026:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800502e:	4b20      	ldr	r3, [pc, #128]	; (80050b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d001      	beq.n	8005040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e032      	b.n	80050a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800504c:	4b19      	ldr	r3, [pc, #100]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4916      	ldr	r1, [pc, #88]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800506a:	4b12      	ldr	r3, [pc, #72]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	490e      	ldr	r1, [pc, #56]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800507e:	f000 f855 	bl	800512c <HAL_RCC_GetSysClockFreq>
 8005082:	4602      	mov	r2, r0
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	490a      	ldr	r1, [pc, #40]	; (80050b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005090:	5ccb      	ldrb	r3, [r1, r3]
 8005092:	fa22 f303 	lsr.w	r3, r2, r3
 8005096:	4a09      	ldr	r2, [pc, #36]	; (80050bc <HAL_RCC_ClockConfig+0x1c4>)
 8005098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800509a:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <HAL_RCC_ClockConfig+0x1c8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fe f942 	bl	8003328 <HAL_InitTick>

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40023c00 	.word	0x40023c00
 80050b4:	40023800 	.word	0x40023800
 80050b8:	080079a0 	.word	0x080079a0
 80050bc:	20000010 	.word	0x20000010
 80050c0:	20000024 	.word	0x20000024

080050c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050ca:	681b      	ldr	r3, [r3, #0]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000010 	.word	0x20000010

080050dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050e0:	f7ff fff0 	bl	80050c4 <HAL_RCC_GetHCLKFreq>
 80050e4:	4602      	mov	r2, r0
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	0a9b      	lsrs	r3, r3, #10
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	4903      	ldr	r1, [pc, #12]	; (8005100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050f2:	5ccb      	ldrb	r3, [r1, r3]
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40023800 	.word	0x40023800
 8005100:	080079b0 	.word	0x080079b0

08005104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005108:	f7ff ffdc 	bl	80050c4 <HAL_RCC_GetHCLKFreq>
 800510c:	4602      	mov	r2, r0
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	0b5b      	lsrs	r3, r3, #13
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	4903      	ldr	r1, [pc, #12]	; (8005128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800511a:	5ccb      	ldrb	r3, [r1, r3]
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40023800 	.word	0x40023800
 8005128:	080079b0 	.word	0x080079b0

0800512c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800512c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005130:	b088      	sub	sp, #32
 8005132:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005148:	4bce      	ldr	r3, [pc, #824]	; (8005484 <HAL_RCC_GetSysClockFreq+0x358>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	2b0c      	cmp	r3, #12
 8005152:	f200 818d 	bhi.w	8005470 <HAL_RCC_GetSysClockFreq+0x344>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <HAL_RCC_GetSysClockFreq+0x30>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	08005191 	.word	0x08005191
 8005160:	08005471 	.word	0x08005471
 8005164:	08005471 	.word	0x08005471
 8005168:	08005471 	.word	0x08005471
 800516c:	08005197 	.word	0x08005197
 8005170:	08005471 	.word	0x08005471
 8005174:	08005471 	.word	0x08005471
 8005178:	08005471 	.word	0x08005471
 800517c:	0800519d 	.word	0x0800519d
 8005180:	08005471 	.word	0x08005471
 8005184:	08005471 	.word	0x08005471
 8005188:	08005471 	.word	0x08005471
 800518c:	08005311 	.word	0x08005311
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005190:	4bbd      	ldr	r3, [pc, #756]	; (8005488 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005192:	61bb      	str	r3, [r7, #24]
       break;
 8005194:	e16f      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005196:	4bbd      	ldr	r3, [pc, #756]	; (800548c <HAL_RCC_GetSysClockFreq+0x360>)
 8005198:	61bb      	str	r3, [r7, #24]
      break;
 800519a:	e16c      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800519c:	4bb9      	ldr	r3, [pc, #740]	; (8005484 <HAL_RCC_GetSysClockFreq+0x358>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051a4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051a6:	4bb7      	ldr	r3, [pc, #732]	; (8005484 <HAL_RCC_GetSysClockFreq+0x358>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d053      	beq.n	800525a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051b2:	4bb4      	ldr	r3, [pc, #720]	; (8005484 <HAL_RCC_GetSysClockFreq+0x358>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	099b      	lsrs	r3, r3, #6
 80051b8:	461a      	mov	r2, r3
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051c2:	f04f 0100 	mov.w	r1, #0
 80051c6:	ea02 0400 	and.w	r4, r2, r0
 80051ca:	603c      	str	r4, [r7, #0]
 80051cc:	400b      	ands	r3, r1
 80051ce:	607b      	str	r3, [r7, #4]
 80051d0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051d4:	4620      	mov	r0, r4
 80051d6:	4629      	mov	r1, r5
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	014b      	lsls	r3, r1, #5
 80051e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051e6:	0142      	lsls	r2, r0, #5
 80051e8:	4610      	mov	r0, r2
 80051ea:	4619      	mov	r1, r3
 80051ec:	4623      	mov	r3, r4
 80051ee:	1ac0      	subs	r0, r0, r3
 80051f0:	462b      	mov	r3, r5
 80051f2:	eb61 0103 	sbc.w	r1, r1, r3
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	018b      	lsls	r3, r1, #6
 8005200:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005204:	0182      	lsls	r2, r0, #6
 8005206:	1a12      	subs	r2, r2, r0
 8005208:	eb63 0301 	sbc.w	r3, r3, r1
 800520c:	f04f 0000 	mov.w	r0, #0
 8005210:	f04f 0100 	mov.w	r1, #0
 8005214:	00d9      	lsls	r1, r3, #3
 8005216:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800521a:	00d0      	lsls	r0, r2, #3
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4621      	mov	r1, r4
 8005222:	1852      	adds	r2, r2, r1
 8005224:	4629      	mov	r1, r5
 8005226:	eb43 0101 	adc.w	r1, r3, r1
 800522a:	460b      	mov	r3, r1
 800522c:	f04f 0000 	mov.w	r0, #0
 8005230:	f04f 0100 	mov.w	r1, #0
 8005234:	0259      	lsls	r1, r3, #9
 8005236:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800523a:	0250      	lsls	r0, r2, #9
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4610      	mov	r0, r2
 8005242:	4619      	mov	r1, r3
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	461a      	mov	r2, r3
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	f7fa ffda 	bl	8000204 <__aeabi_uldivmod>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4613      	mov	r3, r2
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	e04c      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800525a:	4b8a      	ldr	r3, [pc, #552]	; (8005484 <HAL_RCC_GetSysClockFreq+0x358>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	099b      	lsrs	r3, r3, #6
 8005260:	461a      	mov	r2, r3
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	f240 10ff 	movw	r0, #511	; 0x1ff
 800526a:	f04f 0100 	mov.w	r1, #0
 800526e:	ea02 0a00 	and.w	sl, r2, r0
 8005272:	ea03 0b01 	and.w	fp, r3, r1
 8005276:	4650      	mov	r0, sl
 8005278:	4659      	mov	r1, fp
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	014b      	lsls	r3, r1, #5
 8005284:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005288:	0142      	lsls	r2, r0, #5
 800528a:	4610      	mov	r0, r2
 800528c:	4619      	mov	r1, r3
 800528e:	ebb0 000a 	subs.w	r0, r0, sl
 8005292:	eb61 010b 	sbc.w	r1, r1, fp
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	018b      	lsls	r3, r1, #6
 80052a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052a4:	0182      	lsls	r2, r0, #6
 80052a6:	1a12      	subs	r2, r2, r0
 80052a8:	eb63 0301 	sbc.w	r3, r3, r1
 80052ac:	f04f 0000 	mov.w	r0, #0
 80052b0:	f04f 0100 	mov.w	r1, #0
 80052b4:	00d9      	lsls	r1, r3, #3
 80052b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052ba:	00d0      	lsls	r0, r2, #3
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	eb12 020a 	adds.w	r2, r2, sl
 80052c4:	eb43 030b 	adc.w	r3, r3, fp
 80052c8:	f04f 0000 	mov.w	r0, #0
 80052cc:	f04f 0100 	mov.w	r1, #0
 80052d0:	0299      	lsls	r1, r3, #10
 80052d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052d6:	0290      	lsls	r0, r2, #10
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4610      	mov	r0, r2
 80052de:	4619      	mov	r1, r3
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	f7fa ff8c 	bl	8000204 <__aeabi_uldivmod>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4613      	mov	r3, r2
 80052f2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052f4:	4b63      	ldr	r3, [pc, #396]	; (8005484 <HAL_RCC_GetSysClockFreq+0x358>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	0c1b      	lsrs	r3, r3, #16
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	3301      	adds	r3, #1
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	61bb      	str	r3, [r7, #24]
      break;
 800530e:	e0b2      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005310:	4b5c      	ldr	r3, [pc, #368]	; (8005484 <HAL_RCC_GetSysClockFreq+0x358>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005318:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800531a:	4b5a      	ldr	r3, [pc, #360]	; (8005484 <HAL_RCC_GetSysClockFreq+0x358>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d04d      	beq.n	80053c2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005326:	4b57      	ldr	r3, [pc, #348]	; (8005484 <HAL_RCC_GetSysClockFreq+0x358>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	099b      	lsrs	r3, r3, #6
 800532c:	461a      	mov	r2, r3
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005336:	f04f 0100 	mov.w	r1, #0
 800533a:	ea02 0800 	and.w	r8, r2, r0
 800533e:	ea03 0901 	and.w	r9, r3, r1
 8005342:	4640      	mov	r0, r8
 8005344:	4649      	mov	r1, r9
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	014b      	lsls	r3, r1, #5
 8005350:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005354:	0142      	lsls	r2, r0, #5
 8005356:	4610      	mov	r0, r2
 8005358:	4619      	mov	r1, r3
 800535a:	ebb0 0008 	subs.w	r0, r0, r8
 800535e:	eb61 0109 	sbc.w	r1, r1, r9
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	018b      	lsls	r3, r1, #6
 800536c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005370:	0182      	lsls	r2, r0, #6
 8005372:	1a12      	subs	r2, r2, r0
 8005374:	eb63 0301 	sbc.w	r3, r3, r1
 8005378:	f04f 0000 	mov.w	r0, #0
 800537c:	f04f 0100 	mov.w	r1, #0
 8005380:	00d9      	lsls	r1, r3, #3
 8005382:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005386:	00d0      	lsls	r0, r2, #3
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	eb12 0208 	adds.w	r2, r2, r8
 8005390:	eb43 0309 	adc.w	r3, r3, r9
 8005394:	f04f 0000 	mov.w	r0, #0
 8005398:	f04f 0100 	mov.w	r1, #0
 800539c:	0259      	lsls	r1, r3, #9
 800539e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80053a2:	0250      	lsls	r0, r2, #9
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4610      	mov	r0, r2
 80053aa:	4619      	mov	r1, r3
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	f7fa ff26 	bl	8000204 <__aeabi_uldivmod>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4613      	mov	r3, r2
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	e04a      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053c2:	4b30      	ldr	r3, [pc, #192]	; (8005484 <HAL_RCC_GetSysClockFreq+0x358>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	099b      	lsrs	r3, r3, #6
 80053c8:	461a      	mov	r2, r3
 80053ca:	f04f 0300 	mov.w	r3, #0
 80053ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053d2:	f04f 0100 	mov.w	r1, #0
 80053d6:	ea02 0400 	and.w	r4, r2, r0
 80053da:	ea03 0501 	and.w	r5, r3, r1
 80053de:	4620      	mov	r0, r4
 80053e0:	4629      	mov	r1, r5
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	014b      	lsls	r3, r1, #5
 80053ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053f0:	0142      	lsls	r2, r0, #5
 80053f2:	4610      	mov	r0, r2
 80053f4:	4619      	mov	r1, r3
 80053f6:	1b00      	subs	r0, r0, r4
 80053f8:	eb61 0105 	sbc.w	r1, r1, r5
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	018b      	lsls	r3, r1, #6
 8005406:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800540a:	0182      	lsls	r2, r0, #6
 800540c:	1a12      	subs	r2, r2, r0
 800540e:	eb63 0301 	sbc.w	r3, r3, r1
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f04f 0100 	mov.w	r1, #0
 800541a:	00d9      	lsls	r1, r3, #3
 800541c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005420:	00d0      	lsls	r0, r2, #3
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	1912      	adds	r2, r2, r4
 8005428:	eb45 0303 	adc.w	r3, r5, r3
 800542c:	f04f 0000 	mov.w	r0, #0
 8005430:	f04f 0100 	mov.w	r1, #0
 8005434:	0299      	lsls	r1, r3, #10
 8005436:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800543a:	0290      	lsls	r0, r2, #10
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4610      	mov	r0, r2
 8005442:	4619      	mov	r1, r3
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	461a      	mov	r2, r3
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	f7fa feda 	bl	8000204 <__aeabi_uldivmod>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4613      	mov	r3, r2
 8005456:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <HAL_RCC_GetSysClockFreq+0x358>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	0f1b      	lsrs	r3, r3, #28
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	fbb2 f3f3 	udiv	r3, r2, r3
 800546c:	61bb      	str	r3, [r7, #24]
      break;
 800546e:	e002      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005472:	61bb      	str	r3, [r7, #24]
      break;
 8005474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005476:	69bb      	ldr	r3, [r7, #24]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3720      	adds	r7, #32
 800547c:	46bd      	mov	sp, r7
 800547e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005482:	bf00      	nop
 8005484:	40023800 	.word	0x40023800
 8005488:	00f42400 	.word	0x00f42400
 800548c:	007a1200 	.word	0x007a1200

08005490 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e28d      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 8083 	beq.w	80055b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054b0:	4b94      	ldr	r3, [pc, #592]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 030c 	and.w	r3, r3, #12
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d019      	beq.n	80054f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054bc:	4b91      	ldr	r3, [pc, #580]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d106      	bne.n	80054d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054c8:	4b8e      	ldr	r3, [pc, #568]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d4:	d00c      	beq.n	80054f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054d6:	4b8b      	ldr	r3, [pc, #556]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054de:	2b0c      	cmp	r3, #12
 80054e0:	d112      	bne.n	8005508 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054e2:	4b88      	ldr	r3, [pc, #544]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ee:	d10b      	bne.n	8005508 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f0:	4b84      	ldr	r3, [pc, #528]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d05b      	beq.n	80055b4 <HAL_RCC_OscConfig+0x124>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d157      	bne.n	80055b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e25a      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005510:	d106      	bne.n	8005520 <HAL_RCC_OscConfig+0x90>
 8005512:	4b7c      	ldr	r3, [pc, #496]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a7b      	ldr	r2, [pc, #492]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	e01d      	b.n	800555c <HAL_RCC_OscConfig+0xcc>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005528:	d10c      	bne.n	8005544 <HAL_RCC_OscConfig+0xb4>
 800552a:	4b76      	ldr	r3, [pc, #472]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a75      	ldr	r2, [pc, #468]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	4b73      	ldr	r3, [pc, #460]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a72      	ldr	r2, [pc, #456]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 800553c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e00b      	b.n	800555c <HAL_RCC_OscConfig+0xcc>
 8005544:	4b6f      	ldr	r3, [pc, #444]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a6e      	ldr	r2, [pc, #440]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 800554a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b6c      	ldr	r3, [pc, #432]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a6b      	ldr	r2, [pc, #428]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d013      	beq.n	800558c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fd ff24 	bl	80033b0 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800556c:	f7fd ff20 	bl	80033b0 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b64      	cmp	r3, #100	; 0x64
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e21f      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800557e:	4b61      	ldr	r3, [pc, #388]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0xdc>
 800558a:	e014      	b.n	80055b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558c:	f7fd ff10 	bl	80033b0 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005594:	f7fd ff0c 	bl	80033b0 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b64      	cmp	r3, #100	; 0x64
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e20b      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055a6:	4b57      	ldr	r3, [pc, #348]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f0      	bne.n	8005594 <HAL_RCC_OscConfig+0x104>
 80055b2:	e000      	b.n	80055b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d06f      	beq.n	80056a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055c2:	4b50      	ldr	r3, [pc, #320]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 030c 	and.w	r3, r3, #12
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d017      	beq.n	80055fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055ce:	4b4d      	ldr	r3, [pc, #308]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d105      	bne.n	80055e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055da:	4b4a      	ldr	r3, [pc, #296]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055e6:	4b47      	ldr	r3, [pc, #284]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055ee:	2b0c      	cmp	r3, #12
 80055f0:	d11c      	bne.n	800562c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055f2:	4b44      	ldr	r3, [pc, #272]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d116      	bne.n	800562c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055fe:	4b41      	ldr	r3, [pc, #260]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <HAL_RCC_OscConfig+0x186>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d001      	beq.n	8005616 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e1d3      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005616:	4b3b      	ldr	r3, [pc, #236]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4937      	ldr	r1, [pc, #220]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562a:	e03a      	b.n	80056a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d020      	beq.n	8005676 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005634:	4b34      	ldr	r3, [pc, #208]	; (8005708 <HAL_RCC_OscConfig+0x278>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563a:	f7fd feb9 	bl	80033b0 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005642:	f7fd feb5 	bl	80033b0 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e1b4      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005654:	4b2b      	ldr	r3, [pc, #172]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005660:	4b28      	ldr	r3, [pc, #160]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	4925      	ldr	r1, [pc, #148]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005670:	4313      	orrs	r3, r2
 8005672:	600b      	str	r3, [r1, #0]
 8005674:	e015      	b.n	80056a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005676:	4b24      	ldr	r3, [pc, #144]	; (8005708 <HAL_RCC_OscConfig+0x278>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fd fe98 	bl	80033b0 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005684:	f7fd fe94 	bl	80033b0 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e193      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005696:	4b1b      	ldr	r3, [pc, #108]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d036      	beq.n	800571c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d016      	beq.n	80056e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056b6:	4b15      	ldr	r3, [pc, #84]	; (800570c <HAL_RCC_OscConfig+0x27c>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056bc:	f7fd fe78 	bl	80033b0 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056c4:	f7fd fe74 	bl	80033b0 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e173      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80056d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCC_OscConfig+0x234>
 80056e2:	e01b      	b.n	800571c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <HAL_RCC_OscConfig+0x27c>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ea:	f7fd fe61 	bl	80033b0 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f0:	e00e      	b.n	8005710 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f2:	f7fd fe5d 	bl	80033b0 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d907      	bls.n	8005710 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e15c      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
 8005704:	40023800 	.word	0x40023800
 8005708:	42470000 	.word	0x42470000
 800570c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005710:	4b8a      	ldr	r3, [pc, #552]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ea      	bne.n	80056f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8097 	beq.w	8005858 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800572a:	2300      	movs	r3, #0
 800572c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800572e:	4b83      	ldr	r3, [pc, #524]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10f      	bne.n	800575a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	4b7f      	ldr	r3, [pc, #508]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	4a7e      	ldr	r2, [pc, #504]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005748:	6413      	str	r3, [r2, #64]	; 0x40
 800574a:	4b7c      	ldr	r3, [pc, #496]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005756:	2301      	movs	r3, #1
 8005758:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800575a:	4b79      	ldr	r3, [pc, #484]	; (8005940 <HAL_RCC_OscConfig+0x4b0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005762:	2b00      	cmp	r3, #0
 8005764:	d118      	bne.n	8005798 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005766:	4b76      	ldr	r3, [pc, #472]	; (8005940 <HAL_RCC_OscConfig+0x4b0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a75      	ldr	r2, [pc, #468]	; (8005940 <HAL_RCC_OscConfig+0x4b0>)
 800576c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005772:	f7fd fe1d 	bl	80033b0 <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800577a:	f7fd fe19 	bl	80033b0 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e118      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578c:	4b6c      	ldr	r3, [pc, #432]	; (8005940 <HAL_RCC_OscConfig+0x4b0>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d106      	bne.n	80057ae <HAL_RCC_OscConfig+0x31e>
 80057a0:	4b66      	ldr	r3, [pc, #408]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a4:	4a65      	ldr	r2, [pc, #404]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	6713      	str	r3, [r2, #112]	; 0x70
 80057ac:	e01c      	b.n	80057e8 <HAL_RCC_OscConfig+0x358>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	d10c      	bne.n	80057d0 <HAL_RCC_OscConfig+0x340>
 80057b6:	4b61      	ldr	r3, [pc, #388]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	4a60      	ldr	r2, [pc, #384]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057bc:	f043 0304 	orr.w	r3, r3, #4
 80057c0:	6713      	str	r3, [r2, #112]	; 0x70
 80057c2:	4b5e      	ldr	r3, [pc, #376]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	4a5d      	ldr	r2, [pc, #372]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057c8:	f043 0301 	orr.w	r3, r3, #1
 80057cc:	6713      	str	r3, [r2, #112]	; 0x70
 80057ce:	e00b      	b.n	80057e8 <HAL_RCC_OscConfig+0x358>
 80057d0:	4b5a      	ldr	r3, [pc, #360]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	4a59      	ldr	r2, [pc, #356]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	6713      	str	r3, [r2, #112]	; 0x70
 80057dc:	4b57      	ldr	r3, [pc, #348]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	4a56      	ldr	r2, [pc, #344]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057e2:	f023 0304 	bic.w	r3, r3, #4
 80057e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d015      	beq.n	800581c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f0:	f7fd fdde 	bl	80033b0 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f6:	e00a      	b.n	800580e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057f8:	f7fd fdda 	bl	80033b0 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	f241 3288 	movw	r2, #5000	; 0x1388
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e0d7      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580e:	4b4b      	ldr	r3, [pc, #300]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0ee      	beq.n	80057f8 <HAL_RCC_OscConfig+0x368>
 800581a:	e014      	b.n	8005846 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581c:	f7fd fdc8 	bl	80033b0 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005822:	e00a      	b.n	800583a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005824:	f7fd fdc4 	bl	80033b0 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005832:	4293      	cmp	r3, r2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e0c1      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800583a:	4b40      	ldr	r3, [pc, #256]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1ee      	bne.n	8005824 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005846:	7dfb      	ldrb	r3, [r7, #23]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d105      	bne.n	8005858 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800584c:	4b3b      	ldr	r3, [pc, #236]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	4a3a      	ldr	r2, [pc, #232]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005856:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80ad 	beq.w	80059bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005862:	4b36      	ldr	r3, [pc, #216]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b08      	cmp	r3, #8
 800586c:	d060      	beq.n	8005930 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d145      	bne.n	8005902 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005876:	4b33      	ldr	r3, [pc, #204]	; (8005944 <HAL_RCC_OscConfig+0x4b4>)
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587c:	f7fd fd98 	bl	80033b0 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005884:	f7fd fd94 	bl	80033b0 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e093      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005896:	4b29      	ldr	r3, [pc, #164]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f0      	bne.n	8005884 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69da      	ldr	r2, [r3, #28]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	019b      	lsls	r3, r3, #6
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	3b01      	subs	r3, #1
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	061b      	lsls	r3, r3, #24
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	071b      	lsls	r3, r3, #28
 80058ce:	491b      	ldr	r1, [pc, #108]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058d4:	4b1b      	ldr	r3, [pc, #108]	; (8005944 <HAL_RCC_OscConfig+0x4b4>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058da:	f7fd fd69 	bl	80033b0 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e2:	f7fd fd65 	bl	80033b0 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e064      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f4:	4b11      	ldr	r3, [pc, #68]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x452>
 8005900:	e05c      	b.n	80059bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005902:	4b10      	ldr	r3, [pc, #64]	; (8005944 <HAL_RCC_OscConfig+0x4b4>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005908:	f7fd fd52 	bl	80033b0 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005910:	f7fd fd4e 	bl	80033b0 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e04d      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f0      	bne.n	8005910 <HAL_RCC_OscConfig+0x480>
 800592e:	e045      	b.n	80059bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d107      	bne.n	8005948 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e040      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
 800593c:	40023800 	.word	0x40023800
 8005940:	40007000 	.word	0x40007000
 8005944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005948:	4b1f      	ldr	r3, [pc, #124]	; (80059c8 <HAL_RCC_OscConfig+0x538>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d030      	beq.n	80059b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005960:	429a      	cmp	r2, r3
 8005962:	d129      	bne.n	80059b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d122      	bne.n	80059b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005978:	4013      	ands	r3, r2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800597e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005980:	4293      	cmp	r3, r2
 8005982:	d119      	bne.n	80059b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	085b      	lsrs	r3, r3, #1
 8005990:	3b01      	subs	r3, #1
 8005992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005994:	429a      	cmp	r2, r3
 8005996:	d10f      	bne.n	80059b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d107      	bne.n	80059b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d001      	beq.n	80059bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40023800 	.word	0x40023800

080059cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e041      	b.n	8005a62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d106      	bne.n	80059f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fb fbfe 	bl	80011f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3304      	adds	r3, #4
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	f000 fad8 	bl	8005fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e041      	b.n	8005b00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d106      	bne.n	8005a96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f839 	bl	8005b08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f000 fa89 	bl	8005fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d109      	bne.n	8005b40 <HAL_TIM_PWM_Start+0x24>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	bf14      	ite	ne
 8005b38:	2301      	movne	r3, #1
 8005b3a:	2300      	moveq	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	e022      	b.n	8005b86 <HAL_TIM_PWM_Start+0x6a>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d109      	bne.n	8005b5a <HAL_TIM_PWM_Start+0x3e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	bf14      	ite	ne
 8005b52:	2301      	movne	r3, #1
 8005b54:	2300      	moveq	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	e015      	b.n	8005b86 <HAL_TIM_PWM_Start+0x6a>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d109      	bne.n	8005b74 <HAL_TIM_PWM_Start+0x58>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	bf14      	ite	ne
 8005b6c:	2301      	movne	r3, #1
 8005b6e:	2300      	moveq	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	e008      	b.n	8005b86 <HAL_TIM_PWM_Start+0x6a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	bf14      	ite	ne
 8005b80:	2301      	movne	r3, #1
 8005b82:	2300      	moveq	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e07c      	b.n	8005c88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d104      	bne.n	8005b9e <HAL_TIM_PWM_Start+0x82>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b9c:	e013      	b.n	8005bc6 <HAL_TIM_PWM_Start+0xaa>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d104      	bne.n	8005bae <HAL_TIM_PWM_Start+0x92>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bac:	e00b      	b.n	8005bc6 <HAL_TIM_PWM_Start+0xaa>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d104      	bne.n	8005bbe <HAL_TIM_PWM_Start+0xa2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bbc:	e003      	b.n	8005bc6 <HAL_TIM_PWM_Start+0xaa>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fce0 	bl	8006594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a2d      	ldr	r2, [pc, #180]	; (8005c90 <HAL_TIM_PWM_Start+0x174>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d004      	beq.n	8005be8 <HAL_TIM_PWM_Start+0xcc>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a2c      	ldr	r2, [pc, #176]	; (8005c94 <HAL_TIM_PWM_Start+0x178>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d101      	bne.n	8005bec <HAL_TIM_PWM_Start+0xd0>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <HAL_TIM_PWM_Start+0xd2>
 8005bec:	2300      	movs	r3, #0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a22      	ldr	r2, [pc, #136]	; (8005c90 <HAL_TIM_PWM_Start+0x174>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d022      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c14:	d01d      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1f      	ldr	r2, [pc, #124]	; (8005c98 <HAL_TIM_PWM_Start+0x17c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d018      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1d      	ldr	r2, [pc, #116]	; (8005c9c <HAL_TIM_PWM_Start+0x180>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d013      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ca0 <HAL_TIM_PWM_Start+0x184>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00e      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a16      	ldr	r2, [pc, #88]	; (8005c94 <HAL_TIM_PWM_Start+0x178>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d009      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a18      	ldr	r2, [pc, #96]	; (8005ca4 <HAL_TIM_PWM_Start+0x188>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d004      	beq.n	8005c52 <HAL_TIM_PWM_Start+0x136>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a16      	ldr	r2, [pc, #88]	; (8005ca8 <HAL_TIM_PWM_Start+0x18c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d111      	bne.n	8005c76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b06      	cmp	r3, #6
 8005c62:	d010      	beq.n	8005c86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c74:	e007      	b.n	8005c86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0201 	orr.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40010000 	.word	0x40010000
 8005c94:	40010400 	.word	0x40010400
 8005c98:	40000400 	.word	0x40000400
 8005c9c:	40000800 	.word	0x40000800
 8005ca0:	40000c00 	.word	0x40000c00
 8005ca4:	40014000 	.word	0x40014000
 8005ca8:	40001800 	.word	0x40001800

08005cac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e0ae      	b.n	8005e28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b0c      	cmp	r3, #12
 8005cd6:	f200 809f 	bhi.w	8005e18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005d15 	.word	0x08005d15
 8005ce4:	08005e19 	.word	0x08005e19
 8005ce8:	08005e19 	.word	0x08005e19
 8005cec:	08005e19 	.word	0x08005e19
 8005cf0:	08005d55 	.word	0x08005d55
 8005cf4:	08005e19 	.word	0x08005e19
 8005cf8:	08005e19 	.word	0x08005e19
 8005cfc:	08005e19 	.word	0x08005e19
 8005d00:	08005d97 	.word	0x08005d97
 8005d04:	08005e19 	.word	0x08005e19
 8005d08:	08005e19 	.word	0x08005e19
 8005d0c:	08005e19 	.word	0x08005e19
 8005d10:	08005dd7 	.word	0x08005dd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 f9f0 	bl	8006100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699a      	ldr	r2, [r3, #24]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0208 	orr.w	r2, r2, #8
 8005d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0204 	bic.w	r2, r2, #4
 8005d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6999      	ldr	r1, [r3, #24]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	619a      	str	r2, [r3, #24]
      break;
 8005d52:	e064      	b.n	8005e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fa40 	bl	80061e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699a      	ldr	r2, [r3, #24]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6999      	ldr	r1, [r3, #24]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	021a      	lsls	r2, r3, #8
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	619a      	str	r2, [r3, #24]
      break;
 8005d94:	e043      	b.n	8005e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fa95 	bl	80062cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69da      	ldr	r2, [r3, #28]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0208 	orr.w	r2, r2, #8
 8005db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69da      	ldr	r2, [r3, #28]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0204 	bic.w	r2, r2, #4
 8005dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69d9      	ldr	r1, [r3, #28]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	61da      	str	r2, [r3, #28]
      break;
 8005dd4:	e023      	b.n	8005e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fae9 	bl	80063b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69da      	ldr	r2, [r3, #28]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69da      	ldr	r2, [r3, #28]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69d9      	ldr	r1, [r3, #28]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	021a      	lsls	r2, r3, #8
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	61da      	str	r2, [r3, #28]
      break;
 8005e16:	e002      	b.n	8005e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <HAL_TIM_ConfigClockSource+0x1c>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e0b4      	b.n	8005fb6 <HAL_TIM_ConfigClockSource+0x186>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e84:	d03e      	beq.n	8005f04 <HAL_TIM_ConfigClockSource+0xd4>
 8005e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e8a:	f200 8087 	bhi.w	8005f9c <HAL_TIM_ConfigClockSource+0x16c>
 8005e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e92:	f000 8086 	beq.w	8005fa2 <HAL_TIM_ConfigClockSource+0x172>
 8005e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9a:	d87f      	bhi.n	8005f9c <HAL_TIM_ConfigClockSource+0x16c>
 8005e9c:	2b70      	cmp	r3, #112	; 0x70
 8005e9e:	d01a      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0xa6>
 8005ea0:	2b70      	cmp	r3, #112	; 0x70
 8005ea2:	d87b      	bhi.n	8005f9c <HAL_TIM_ConfigClockSource+0x16c>
 8005ea4:	2b60      	cmp	r3, #96	; 0x60
 8005ea6:	d050      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x11a>
 8005ea8:	2b60      	cmp	r3, #96	; 0x60
 8005eaa:	d877      	bhi.n	8005f9c <HAL_TIM_ConfigClockSource+0x16c>
 8005eac:	2b50      	cmp	r3, #80	; 0x50
 8005eae:	d03c      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0xfa>
 8005eb0:	2b50      	cmp	r3, #80	; 0x50
 8005eb2:	d873      	bhi.n	8005f9c <HAL_TIM_ConfigClockSource+0x16c>
 8005eb4:	2b40      	cmp	r3, #64	; 0x40
 8005eb6:	d058      	beq.n	8005f6a <HAL_TIM_ConfigClockSource+0x13a>
 8005eb8:	2b40      	cmp	r3, #64	; 0x40
 8005eba:	d86f      	bhi.n	8005f9c <HAL_TIM_ConfigClockSource+0x16c>
 8005ebc:	2b30      	cmp	r3, #48	; 0x30
 8005ebe:	d064      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ec0:	2b30      	cmp	r3, #48	; 0x30
 8005ec2:	d86b      	bhi.n	8005f9c <HAL_TIM_ConfigClockSource+0x16c>
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d060      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d867      	bhi.n	8005f9c <HAL_TIM_ConfigClockSource+0x16c>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d05c      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d05a      	beq.n	8005f8a <HAL_TIM_ConfigClockSource+0x15a>
 8005ed4:	e062      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6818      	ldr	r0, [r3, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6899      	ldr	r1, [r3, #8]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f000 fb35 	bl	8006554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ef8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	609a      	str	r2, [r3, #8]
      break;
 8005f02:	e04f      	b.n	8005fa4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6899      	ldr	r1, [r3, #8]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f000 fb1e 	bl	8006554 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f26:	609a      	str	r2, [r3, #8]
      break;
 8005f28:	e03c      	b.n	8005fa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6859      	ldr	r1, [r3, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	461a      	mov	r2, r3
 8005f38:	f000 fa92 	bl	8006460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2150      	movs	r1, #80	; 0x50
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 faeb 	bl	800651e <TIM_ITRx_SetConfig>
      break;
 8005f48:	e02c      	b.n	8005fa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6859      	ldr	r1, [r3, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f000 fab1 	bl	80064be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2160      	movs	r1, #96	; 0x60
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fadb 	bl	800651e <TIM_ITRx_SetConfig>
      break;
 8005f68:	e01c      	b.n	8005fa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6859      	ldr	r1, [r3, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	461a      	mov	r2, r3
 8005f78:	f000 fa72 	bl	8006460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2140      	movs	r1, #64	; 0x40
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 facb 	bl	800651e <TIM_ITRx_SetConfig>
      break;
 8005f88:	e00c      	b.n	8005fa4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4619      	mov	r1, r3
 8005f94:	4610      	mov	r0, r2
 8005f96:	f000 fac2 	bl	800651e <TIM_ITRx_SetConfig>
      break;
 8005f9a:	e003      	b.n	8005fa4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa0:	e000      	b.n	8005fa4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a40      	ldr	r2, [pc, #256]	; (80060d4 <TIM_Base_SetConfig+0x114>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d013      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d00f      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a3d      	ldr	r2, [pc, #244]	; (80060d8 <TIM_Base_SetConfig+0x118>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00b      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a3c      	ldr	r2, [pc, #240]	; (80060dc <TIM_Base_SetConfig+0x11c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d007      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a3b      	ldr	r2, [pc, #236]	; (80060e0 <TIM_Base_SetConfig+0x120>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d003      	beq.n	8006000 <TIM_Base_SetConfig+0x40>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a3a      	ldr	r2, [pc, #232]	; (80060e4 <TIM_Base_SetConfig+0x124>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d108      	bne.n	8006012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2f      	ldr	r2, [pc, #188]	; (80060d4 <TIM_Base_SetConfig+0x114>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d02b      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006020:	d027      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2c      	ldr	r2, [pc, #176]	; (80060d8 <TIM_Base_SetConfig+0x118>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d023      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2b      	ldr	r2, [pc, #172]	; (80060dc <TIM_Base_SetConfig+0x11c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01f      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2a      	ldr	r2, [pc, #168]	; (80060e0 <TIM_Base_SetConfig+0x120>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d01b      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a29      	ldr	r2, [pc, #164]	; (80060e4 <TIM_Base_SetConfig+0x124>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d017      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a28      	ldr	r2, [pc, #160]	; (80060e8 <TIM_Base_SetConfig+0x128>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d013      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a27      	ldr	r2, [pc, #156]	; (80060ec <TIM_Base_SetConfig+0x12c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00f      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a26      	ldr	r2, [pc, #152]	; (80060f0 <TIM_Base_SetConfig+0x130>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00b      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a25      	ldr	r2, [pc, #148]	; (80060f4 <TIM_Base_SetConfig+0x134>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d007      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a24      	ldr	r2, [pc, #144]	; (80060f8 <TIM_Base_SetConfig+0x138>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a23      	ldr	r2, [pc, #140]	; (80060fc <TIM_Base_SetConfig+0x13c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d108      	bne.n	8006084 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a0a      	ldr	r2, [pc, #40]	; (80060d4 <TIM_Base_SetConfig+0x114>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d003      	beq.n	80060b8 <TIM_Base_SetConfig+0xf8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a0c      	ldr	r2, [pc, #48]	; (80060e4 <TIM_Base_SetConfig+0x124>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d103      	bne.n	80060c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	615a      	str	r2, [r3, #20]
}
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40010000 	.word	0x40010000
 80060d8:	40000400 	.word	0x40000400
 80060dc:	40000800 	.word	0x40000800
 80060e0:	40000c00 	.word	0x40000c00
 80060e4:	40010400 	.word	0x40010400
 80060e8:	40014000 	.word	0x40014000
 80060ec:	40014400 	.word	0x40014400
 80060f0:	40014800 	.word	0x40014800
 80060f4:	40001800 	.word	0x40001800
 80060f8:	40001c00 	.word	0x40001c00
 80060fc:	40002000 	.word	0x40002000

08006100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f023 0201 	bic.w	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0303 	bic.w	r3, r3, #3
 8006136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f023 0302 	bic.w	r3, r3, #2
 8006148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a20      	ldr	r2, [pc, #128]	; (80061d8 <TIM_OC1_SetConfig+0xd8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d003      	beq.n	8006164 <TIM_OC1_SetConfig+0x64>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a1f      	ldr	r2, [pc, #124]	; (80061dc <TIM_OC1_SetConfig+0xdc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d10c      	bne.n	800617e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f023 0308 	bic.w	r3, r3, #8
 800616a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f023 0304 	bic.w	r3, r3, #4
 800617c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a15      	ldr	r2, [pc, #84]	; (80061d8 <TIM_OC1_SetConfig+0xd8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d003      	beq.n	800618e <TIM_OC1_SetConfig+0x8e>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a14      	ldr	r2, [pc, #80]	; (80061dc <TIM_OC1_SetConfig+0xdc>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d111      	bne.n	80061b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800619c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	621a      	str	r2, [r3, #32]
}
 80061cc:	bf00      	nop
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	40010000 	.word	0x40010000
 80061dc:	40010400 	.word	0x40010400

080061e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f023 0210 	bic.w	r2, r3, #16
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	021b      	lsls	r3, r3, #8
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4313      	orrs	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f023 0320 	bic.w	r3, r3, #32
 800622a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a22      	ldr	r2, [pc, #136]	; (80062c4 <TIM_OC2_SetConfig+0xe4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <TIM_OC2_SetConfig+0x68>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <TIM_OC2_SetConfig+0xe8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d10d      	bne.n	8006264 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800624e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006262:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a17      	ldr	r2, [pc, #92]	; (80062c4 <TIM_OC2_SetConfig+0xe4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_OC2_SetConfig+0x94>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a16      	ldr	r2, [pc, #88]	; (80062c8 <TIM_OC2_SetConfig+0xe8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d113      	bne.n	800629c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800627a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	621a      	str	r2, [r3, #32]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40010000 	.word	0x40010000
 80062c8:	40010400 	.word	0x40010400

080062cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a21      	ldr	r2, [pc, #132]	; (80063ac <TIM_OC3_SetConfig+0xe0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d003      	beq.n	8006332 <TIM_OC3_SetConfig+0x66>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a20      	ldr	r2, [pc, #128]	; (80063b0 <TIM_OC3_SetConfig+0xe4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d10d      	bne.n	800634e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800634c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a16      	ldr	r2, [pc, #88]	; (80063ac <TIM_OC3_SetConfig+0xe0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d003      	beq.n	800635e <TIM_OC3_SetConfig+0x92>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a15      	ldr	r2, [pc, #84]	; (80063b0 <TIM_OC3_SetConfig+0xe4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d113      	bne.n	8006386 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800636c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	621a      	str	r2, [r3, #32]
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	40010000 	.word	0x40010000
 80063b0:	40010400 	.word	0x40010400

080063b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	021b      	lsls	r3, r3, #8
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	031b      	lsls	r3, r3, #12
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a12      	ldr	r2, [pc, #72]	; (8006458 <TIM_OC4_SetConfig+0xa4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_OC4_SetConfig+0x68>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a11      	ldr	r2, [pc, #68]	; (800645c <TIM_OC4_SetConfig+0xa8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d109      	bne.n	8006430 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006422:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	019b      	lsls	r3, r3, #6
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40010000 	.word	0x40010000
 800645c:	40010400 	.word	0x40010400

08006460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	f023 0201 	bic.w	r2, r3, #1
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800648a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	011b      	lsls	r3, r3, #4
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f023 030a 	bic.w	r3, r3, #10
 800649c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	621a      	str	r2, [r3, #32]
}
 80064b2:	bf00      	nop
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064be:	b480      	push	{r7}
 80064c0:	b087      	sub	sp, #28
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f023 0210 	bic.w	r2, r3, #16
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	031b      	lsls	r3, r3, #12
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	621a      	str	r2, [r3, #32]
}
 8006512:	bf00      	nop
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800651e:	b480      	push	{r7}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	f043 0307 	orr.w	r3, r3, #7
 8006540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	609a      	str	r2, [r3, #8]
}
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800656e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	021a      	lsls	r2, r3, #8
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	431a      	orrs	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4313      	orrs	r3, r2
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	609a      	str	r2, [r3, #8]
}
 8006588:	bf00      	nop
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	2201      	movs	r2, #1
 80065a8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a1a      	ldr	r2, [r3, #32]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	43db      	mvns	r3, r3
 80065b6:	401a      	ands	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1a      	ldr	r2, [r3, #32]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	fa01 f303 	lsl.w	r3, r1, r3
 80065cc:	431a      	orrs	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	621a      	str	r2, [r3, #32]
}
 80065d2:	bf00      	nop
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
	...

080065e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e05a      	b.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a21      	ldr	r2, [pc, #132]	; (80066bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d022      	beq.n	8006682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006644:	d01d      	beq.n	8006682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1d      	ldr	r2, [pc, #116]	; (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d018      	beq.n	8006682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1b      	ldr	r2, [pc, #108]	; (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d013      	beq.n	8006682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a1a      	ldr	r2, [pc, #104]	; (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00e      	beq.n	8006682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a18      	ldr	r2, [pc, #96]	; (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d009      	beq.n	8006682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a17      	ldr	r2, [pc, #92]	; (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d004      	beq.n	8006682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a15      	ldr	r2, [pc, #84]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d10c      	bne.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	4313      	orrs	r3, r2
 8006692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	40010000 	.word	0x40010000
 80066c0:	40000400 	.word	0x40000400
 80066c4:	40000800 	.word	0x40000800
 80066c8:	40000c00 	.word	0x40000c00
 80066cc:	40010400 	.word	0x40010400
 80066d0:	40014000 	.word	0x40014000
 80066d4:	40001800 	.word	0x40001800

080066d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e03f      	b.n	800676a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fa fe2c 	bl	800135c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2224      	movs	r2, #36	; 0x24
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800671a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 ff3f 	bl	80075a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695a      	ldr	r2, [r3, #20]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006740:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006750:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2220      	movs	r2, #32
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08c      	sub	sp, #48	; 0x30
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4613      	mov	r3, r2
 8006780:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b20      	cmp	r3, #32
 800678c:	d165      	bne.n	800685a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <HAL_UART_Transmit_DMA+0x26>
 8006794:	88fb      	ldrh	r3, [r7, #6]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e05e      	b.n	800685c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_UART_Transmit_DMA+0x38>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e057      	b.n	800685c <HAL_UART_Transmit_DMA+0xe8>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	88fa      	ldrh	r2, [r7, #6]
 80067be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	88fa      	ldrh	r2, [r7, #6]
 80067c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2221      	movs	r2, #33	; 0x21
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d8:	4a22      	ldr	r2, [pc, #136]	; (8006864 <HAL_UART_Transmit_DMA+0xf0>)
 80067da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e0:	4a21      	ldr	r2, [pc, #132]	; (8006868 <HAL_UART_Transmit_DMA+0xf4>)
 80067e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e8:	4a20      	ldr	r2, [pc, #128]	; (800686c <HAL_UART_Transmit_DMA+0xf8>)
 80067ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f0:	2200      	movs	r2, #0
 80067f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80067f4:	f107 0308 	add.w	r3, r7, #8
 80067f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	6819      	ldr	r1, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3304      	adds	r3, #4
 8006808:	461a      	mov	r2, r3
 800680a:	88fb      	ldrh	r3, [r7, #6]
 800680c:	f7fd fe5a 	bl	80044c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006818:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3314      	adds	r3, #20
 8006828:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	617b      	str	r3, [r7, #20]
   return(result);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006838:	62bb      	str	r3, [r7, #40]	; 0x28
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3314      	adds	r3, #20
 8006840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006842:	627a      	str	r2, [r7, #36]	; 0x24
 8006844:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6a39      	ldr	r1, [r7, #32]
 8006848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	e000      	b.n	800685c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800685a:	2302      	movs	r3, #2
  }
}
 800685c:	4618      	mov	r0, r3
 800685e:	3730      	adds	r7, #48	; 0x30
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	08006e41 	.word	0x08006e41
 8006868:	08006edb 	.word	0x08006edb
 800686c:	08007053 	.word	0x08007053

08006870 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	4613      	mov	r3, r2
 800687c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b20      	cmp	r3, #32
 8006888:	d11d      	bne.n	80068c6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <HAL_UART_Receive_DMA+0x26>
 8006890:	88fb      	ldrh	r3, [r7, #6]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e016      	b.n	80068c8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d101      	bne.n	80068a8 <HAL_UART_Receive_DMA+0x38>
 80068a4:	2302      	movs	r3, #2
 80068a6:	e00f      	b.n	80068c8 <HAL_UART_Receive_DMA+0x58>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80068b6:	88fb      	ldrh	r3, [r7, #6]
 80068b8:	461a      	mov	r2, r3
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fc13 	bl	80070e8 <UART_Start_Receive_DMA>
 80068c2:	4603      	mov	r3, r0
 80068c4:	e000      	b.n	80068c8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80068c6:	2302      	movs	r3, #2
  }
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b0ba      	sub	sp, #232	; 0xe8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800690e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10f      	bne.n	8006936 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <HAL_UART_IRQHandler+0x66>
 8006922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fd7b 	bl	800742a <UART_Receive_IT>
      return;
 8006934:	e256      	b.n	8006de4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 80de 	beq.w	8006afc <HAL_UART_IRQHandler+0x22c>
 8006940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800694c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006950:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 80d1 	beq.w	8006afc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800695a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00b      	beq.n	800697e <HAL_UART_IRQHandler+0xae>
 8006966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	f043 0201 	orr.w	r2, r3, #1
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800697e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <HAL_UART_IRQHandler+0xd2>
 800698a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d005      	beq.n	80069a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	f043 0202 	orr.w	r2, r3, #2
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <HAL_UART_IRQHandler+0xf6>
 80069ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d005      	beq.n	80069c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	f043 0204 	orr.w	r2, r3, #4
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d011      	beq.n	80069f6 <HAL_UART_IRQHandler+0x126>
 80069d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d6:	f003 0320 	and.w	r3, r3, #32
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d105      	bne.n	80069ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	f043 0208 	orr.w	r2, r3, #8
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 81ed 	beq.w	8006dda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <HAL_UART_IRQHandler+0x14e>
 8006a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a10:	f003 0320 	and.w	r3, r3, #32
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fd06 	bl	800742a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a28:	2b40      	cmp	r3, #64	; 0x40
 8006a2a:	bf0c      	ite	eq
 8006a2c:	2301      	moveq	r3, #1
 8006a2e:	2300      	movne	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d103      	bne.n	8006a4a <HAL_UART_IRQHandler+0x17a>
 8006a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d04f      	beq.n	8006aea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fc0e 	bl	800726c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	d141      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3314      	adds	r3, #20
 8006a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3314      	adds	r3, #20
 8006a86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a9a:	e841 2300 	strex	r3, r2, [r1]
 8006a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1d9      	bne.n	8006a5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d013      	beq.n	8006ada <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	4a7d      	ldr	r2, [pc, #500]	; (8006cac <HAL_UART_IRQHandler+0x3dc>)
 8006ab8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fd fdc8 	bl	8004654 <HAL_DMA_Abort_IT>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d016      	beq.n	8006af8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad8:	e00e      	b.n	8006af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f99a 	bl	8006e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae0:	e00a      	b.n	8006af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f996 	bl	8006e14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae8:	e006      	b.n	8006af8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f992 	bl	8006e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006af6:	e170      	b.n	8006dda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af8:	bf00      	nop
    return;
 8006afa:	e16e      	b.n	8006dda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	f040 814a 	bne.w	8006d9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0a:	f003 0310 	and.w	r3, r3, #16
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 8143 	beq.w	8006d9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 813c 	beq.w	8006d9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b22:	2300      	movs	r3, #0
 8006b24:	60bb      	str	r3, [r7, #8]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60bb      	str	r3, [r7, #8]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	60bb      	str	r3, [r7, #8]
 8006b36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b40      	cmp	r3, #64	; 0x40
 8006b44:	f040 80b4 	bne.w	8006cb0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 8140 	beq.w	8006dde <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b66:	429a      	cmp	r2, r3
 8006b68:	f080 8139 	bcs.w	8006dde <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b7e:	f000 8088 	beq.w	8006c92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	330c      	adds	r3, #12
 8006b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	330c      	adds	r3, #12
 8006baa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006bae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1d9      	bne.n	8006b82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3314      	adds	r3, #20
 8006bd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006be0:	f023 0301 	bic.w	r3, r3, #1
 8006be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3314      	adds	r3, #20
 8006bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e1      	bne.n	8006bce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3314      	adds	r3, #20
 8006c10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3314      	adds	r3, #20
 8006c2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e3      	bne.n	8006c0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	330c      	adds	r3, #12
 8006c56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5a:	e853 3f00 	ldrex	r3, [r3]
 8006c5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c62:	f023 0310 	bic.w	r3, r3, #16
 8006c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	330c      	adds	r3, #12
 8006c70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c74:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e3      	bne.n	8006c50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fd fc71 	bl	8004574 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f8c0 	bl	8006e28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ca8:	e099      	b.n	8006dde <HAL_UART_IRQHandler+0x50e>
 8006caa:	bf00      	nop
 8006cac:	08007333 	.word	0x08007333
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 808b 	beq.w	8006de2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006ccc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 8086 	beq.w	8006de2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	330c      	adds	r3, #12
 8006cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006cfa:	647a      	str	r2, [r7, #68]	; 0x44
 8006cfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e3      	bne.n	8006cd6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3314      	adds	r3, #20
 8006d14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	f023 0301 	bic.w	r3, r3, #1
 8006d24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3314      	adds	r3, #20
 8006d2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d32:	633a      	str	r2, [r7, #48]	; 0x30
 8006d34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3a:	e841 2300 	strex	r3, r2, [r1]
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1e3      	bne.n	8006d0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	330c      	adds	r3, #12
 8006d5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0310 	bic.w	r3, r3, #16
 8006d6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	330c      	adds	r3, #12
 8006d74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d78:	61fa      	str	r2, [r7, #28]
 8006d7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	69b9      	ldr	r1, [r7, #24]
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	617b      	str	r3, [r7, #20]
   return(result);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e3      	bne.n	8006d54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f848 	bl	8006e28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d98:	e023      	b.n	8006de2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <HAL_UART_IRQHandler+0x4ea>
 8006da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fad1 	bl	800735a <UART_Transmit_IT>
    return;
 8006db8:	e014      	b.n	8006de4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00e      	beq.n	8006de4 <HAL_UART_IRQHandler+0x514>
 8006dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d008      	beq.n	8006de4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fb11 	bl	80073fa <UART_EndTransmit_IT>
    return;
 8006dd8:	e004      	b.n	8006de4 <HAL_UART_IRQHandler+0x514>
    return;
 8006dda:	bf00      	nop
 8006ddc:	e002      	b.n	8006de4 <HAL_UART_IRQHandler+0x514>
      return;
 8006dde:	bf00      	nop
 8006de0:	e000      	b.n	8006de4 <HAL_UART_IRQHandler+0x514>
      return;
 8006de2:	bf00      	nop
  }
}
 8006de4:	37e8      	adds	r7, #232	; 0xe8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop

08006dec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b090      	sub	sp, #64	; 0x40
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d137      	bne.n	8006ecc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5e:	2200      	movs	r2, #0
 8006e60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3314      	adds	r3, #20
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	623b      	str	r3, [r7, #32]
   return(result);
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e78:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3314      	adds	r3, #20
 8006e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e82:	633a      	str	r2, [r7, #48]	; 0x30
 8006e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e5      	bne.n	8006e62 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
 8006eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eb6:	61fa      	str	r2, [r7, #28]
 8006eb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	69b9      	ldr	r1, [r7, #24]
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e5      	bne.n	8006e96 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006eca:	e002      	b.n	8006ed2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006ecc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006ece:	f7fa f893 	bl	8000ff8 <HAL_UART_TxCpltCallback>
}
 8006ed2:	bf00      	nop
 8006ed4:	3740      	adds	r7, #64	; 0x40
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f7ff ff7f 	bl	8006dec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eee:	bf00      	nop
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b09c      	sub	sp, #112	; 0x70
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d172      	bne.n	8006ff8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f14:	2200      	movs	r2, #0
 8006f16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	330c      	adds	r3, #12
 8006f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	330c      	adds	r3, #12
 8006f36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f38:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e5      	bne.n	8006f18 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3314      	adds	r3, #20
 8006f52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5e:	f023 0301 	bic.w	r3, r3, #1
 8006f62:	667b      	str	r3, [r7, #100]	; 0x64
 8006f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3314      	adds	r3, #20
 8006f6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f6c:	647a      	str	r2, [r7, #68]	; 0x44
 8006f6e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e5      	bne.n	8006f4c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3314      	adds	r3, #20
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f96:	663b      	str	r3, [r7, #96]	; 0x60
 8006f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3314      	adds	r3, #20
 8006f9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fa0:	633a      	str	r2, [r7, #48]	; 0x30
 8006fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e5      	bne.n	8006f80 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d119      	bne.n	8006ff8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	330c      	adds	r3, #12
 8006fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	e853 3f00 	ldrex	r3, [r3]
 8006fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0310 	bic.w	r3, r3, #16
 8006fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	330c      	adds	r3, #12
 8006fe2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fe4:	61fa      	str	r2, [r7, #28]
 8006fe6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	69b9      	ldr	r1, [r7, #24]
 8006fea:	69fa      	ldr	r2, [r7, #28]
 8006fec:	e841 2300 	strex	r3, r2, [r1]
 8006ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e5      	bne.n	8006fc4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d106      	bne.n	800700e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007002:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007004:	4619      	mov	r1, r3
 8007006:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007008:	f7ff ff0e 	bl	8006e28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800700c:	e002      	b.n	8007014 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800700e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007010:	f7fa f80e 	bl	8001030 <HAL_UART_RxCpltCallback>
}
 8007014:	bf00      	nop
 8007016:	3770      	adds	r7, #112	; 0x70
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	2b01      	cmp	r3, #1
 8007030:	d108      	bne.n	8007044 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007036:	085b      	lsrs	r3, r3, #1
 8007038:	b29b      	uxth	r3, r3
 800703a:	4619      	mov	r1, r3
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f7ff fef3 	bl	8006e28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007042:	e002      	b.n	800704a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f7ff fedb 	bl	8006e00 <HAL_UART_RxHalfCpltCallback>
}
 800704a:	bf00      	nop
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706e:	2b80      	cmp	r3, #128	; 0x80
 8007070:	bf0c      	ite	eq
 8007072:	2301      	moveq	r3, #1
 8007074:	2300      	movne	r3, #0
 8007076:	b2db      	uxtb	r3, r3
 8007078:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b21      	cmp	r3, #33	; 0x21
 8007084:	d108      	bne.n	8007098 <UART_DMAError+0x46>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2200      	movs	r2, #0
 8007090:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007092:	68b8      	ldr	r0, [r7, #8]
 8007094:	f000 f8c2 	bl	800721c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	bf0c      	ite	eq
 80070a6:	2301      	moveq	r3, #1
 80070a8:	2300      	movne	r3, #0
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b22      	cmp	r3, #34	; 0x22
 80070b8:	d108      	bne.n	80070cc <UART_DMAError+0x7a>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2200      	movs	r2, #0
 80070c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80070c6:	68b8      	ldr	r0, [r7, #8]
 80070c8:	f000 f8d0 	bl	800726c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d0:	f043 0210 	orr.w	r2, r3, #16
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070d8:	68b8      	ldr	r0, [r7, #8]
 80070da:	f7ff fe9b 	bl	8006e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070de:	bf00      	nop
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b098      	sub	sp, #96	; 0x60
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	4613      	mov	r3, r2
 80070f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	88fa      	ldrh	r2, [r7, #6]
 8007100:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2222      	movs	r2, #34	; 0x22
 800710c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	4a3e      	ldr	r2, [pc, #248]	; (8007210 <UART_Start_Receive_DMA+0x128>)
 8007116:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	4a3d      	ldr	r2, [pc, #244]	; (8007214 <UART_Start_Receive_DMA+0x12c>)
 800711e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	4a3c      	ldr	r2, [pc, #240]	; (8007218 <UART_Start_Receive_DMA+0x130>)
 8007126:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	2200      	movs	r2, #0
 800712e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007130:	f107 0308 	add.w	r3, r7, #8
 8007134:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3304      	adds	r3, #4
 8007140:	4619      	mov	r1, r3
 8007142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	f7fd f9bc 	bl	80044c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800714c:	2300      	movs	r3, #0
 800714e:	613b      	str	r3, [r7, #16]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	330c      	adds	r3, #12
 8007170:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800717a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800717c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007180:	65bb      	str	r3, [r7, #88]	; 0x58
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	330c      	adds	r3, #12
 8007188:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800718a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800718c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007190:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e5      	bne.n	800716a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3314      	adds	r3, #20
 80071a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	f043 0301 	orr.w	r3, r3, #1
 80071b4:	657b      	str	r3, [r7, #84]	; 0x54
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3314      	adds	r3, #20
 80071bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071be:	63ba      	str	r2, [r7, #56]	; 0x38
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e5      	bne.n	800719e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3314      	adds	r3, #20
 80071d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	617b      	str	r3, [r7, #20]
   return(result);
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e8:	653b      	str	r3, [r7, #80]	; 0x50
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3314      	adds	r3, #20
 80071f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071f2:	627a      	str	r2, [r7, #36]	; 0x24
 80071f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	6a39      	ldr	r1, [r7, #32]
 80071f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1e5      	bne.n	80071d2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3760      	adds	r7, #96	; 0x60
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	08006ef7 	.word	0x08006ef7
 8007214:	0800701d 	.word	0x0800701d
 8007218:	08007053 	.word	0x08007053

0800721c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b089      	sub	sp, #36	; 0x24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	330c      	adds	r3, #12
 800722a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	60bb      	str	r3, [r7, #8]
   return(result);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800723a:	61fb      	str	r3, [r7, #28]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	330c      	adds	r3, #12
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	61ba      	str	r2, [r7, #24]
 8007246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007248:	6979      	ldr	r1, [r7, #20]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	e841 2300 	strex	r3, r2, [r1]
 8007250:	613b      	str	r3, [r7, #16]
   return(result);
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e5      	bne.n	8007224 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007260:	bf00      	nop
 8007262:	3724      	adds	r7, #36	; 0x24
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800726c:	b480      	push	{r7}
 800726e:	b095      	sub	sp, #84	; 0x54
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	330c      	adds	r3, #12
 800727a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800728a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	330c      	adds	r3, #12
 8007292:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007294:	643a      	str	r2, [r7, #64]	; 0x40
 8007296:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800729a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e5      	bne.n	8007274 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3314      	adds	r3, #20
 80072ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	f023 0301 	bic.w	r3, r3, #1
 80072be:	64bb      	str	r3, [r7, #72]	; 0x48
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3314      	adds	r3, #20
 80072c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e5      	bne.n	80072a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d119      	bne.n	8007318 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	330c      	adds	r3, #12
 80072ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f023 0310 	bic.w	r3, r3, #16
 80072fa:	647b      	str	r3, [r7, #68]	; 0x44
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	330c      	adds	r3, #12
 8007302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007304:	61ba      	str	r2, [r7, #24]
 8007306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007308:	6979      	ldr	r1, [r7, #20]
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	e841 2300 	strex	r3, r2, [r1]
 8007310:	613b      	str	r3, [r7, #16]
   return(result);
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1e5      	bne.n	80072e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2220      	movs	r2, #32
 800731c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007326:	bf00      	nop
 8007328:	3754      	adds	r7, #84	; 0x54
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7ff fd61 	bl	8006e14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007352:	bf00      	nop
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800735a:	b480      	push	{r7}
 800735c:	b085      	sub	sp, #20
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b21      	cmp	r3, #33	; 0x21
 800736c:	d13e      	bne.n	80073ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007376:	d114      	bne.n	80073a2 <UART_Transmit_IT+0x48>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d110      	bne.n	80073a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007394:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	1c9a      	adds	r2, r3, #2
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	621a      	str	r2, [r3, #32]
 80073a0:	e008      	b.n	80073b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	1c59      	adds	r1, r3, #1
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6211      	str	r1, [r2, #32]
 80073ac:	781a      	ldrb	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29b      	uxth	r3, r3
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	4619      	mov	r1, r3
 80073c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10f      	bne.n	80073e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68da      	ldr	r2, [r3, #12]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e000      	b.n	80073ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073ec:	2302      	movs	r3, #2
  }
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007410:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7f9 fdec 	bl	8000ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b08c      	sub	sp, #48	; 0x30
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b22      	cmp	r3, #34	; 0x22
 800743c:	f040 80ab 	bne.w	8007596 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007448:	d117      	bne.n	800747a <UART_Receive_IT+0x50>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d113      	bne.n	800747a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	b29b      	uxth	r3, r3
 8007464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007468:	b29a      	uxth	r2, r3
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	1c9a      	adds	r2, r3, #2
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	629a      	str	r2, [r3, #40]	; 0x28
 8007478:	e026      	b.n	80074c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007480:	2300      	movs	r3, #0
 8007482:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748c:	d007      	beq.n	800749e <UART_Receive_IT+0x74>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <UART_Receive_IT+0x82>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	e008      	b.n	80074be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	3b01      	subs	r3, #1
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	4619      	mov	r1, r3
 80074d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d15a      	bne.n	8007592 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0220 	bic.w	r2, r2, #32
 80074ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695a      	ldr	r2, [r3, #20]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2220      	movs	r2, #32
 8007510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	2b01      	cmp	r3, #1
 800751a:	d135      	bne.n	8007588 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	330c      	adds	r3, #12
 8007528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	613b      	str	r3, [r7, #16]
   return(result);
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f023 0310 	bic.w	r3, r3, #16
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	330c      	adds	r3, #12
 8007540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007542:	623a      	str	r2, [r7, #32]
 8007544:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007546:	69f9      	ldr	r1, [r7, #28]
 8007548:	6a3a      	ldr	r2, [r7, #32]
 800754a:	e841 2300 	strex	r3, r2, [r1]
 800754e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1e5      	bne.n	8007522 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0310 	and.w	r3, r3, #16
 8007560:	2b10      	cmp	r3, #16
 8007562:	d10a      	bne.n	800757a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff fc51 	bl	8006e28 <HAL_UARTEx_RxEventCallback>
 8007586:	e002      	b.n	800758e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7f9 fd51 	bl	8001030 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	e002      	b.n	8007598 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	e000      	b.n	8007598 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007596:	2302      	movs	r3, #2
  }
}
 8007598:	4618      	mov	r0, r3
 800759a:	3730      	adds	r7, #48	; 0x30
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a4:	b09f      	sub	sp, #124	; 0x7c
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80075b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b6:	68d9      	ldr	r1, [r3, #12]
 80075b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	ea40 0301 	orr.w	r3, r0, r1
 80075c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	431a      	orrs	r2, r3
 80075cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	431a      	orrs	r2, r3
 80075d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80075da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075e4:	f021 010c 	bic.w	r1, r1, #12
 80075e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075ee:	430b      	orrs	r3, r1
 80075f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075fe:	6999      	ldr	r1, [r3, #24]
 8007600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	ea40 0301 	orr.w	r3, r0, r1
 8007608:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800760a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	4bc5      	ldr	r3, [pc, #788]	; (8007924 <UART_SetConfig+0x384>)
 8007610:	429a      	cmp	r2, r3
 8007612:	d004      	beq.n	800761e <UART_SetConfig+0x7e>
 8007614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	4bc3      	ldr	r3, [pc, #780]	; (8007928 <UART_SetConfig+0x388>)
 800761a:	429a      	cmp	r2, r3
 800761c:	d103      	bne.n	8007626 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800761e:	f7fd fd71 	bl	8005104 <HAL_RCC_GetPCLK2Freq>
 8007622:	6778      	str	r0, [r7, #116]	; 0x74
 8007624:	e002      	b.n	800762c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007626:	f7fd fd59 	bl	80050dc <HAL_RCC_GetPCLK1Freq>
 800762a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007634:	f040 80b6 	bne.w	80077a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007638:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800763a:	461c      	mov	r4, r3
 800763c:	f04f 0500 	mov.w	r5, #0
 8007640:	4622      	mov	r2, r4
 8007642:	462b      	mov	r3, r5
 8007644:	1891      	adds	r1, r2, r2
 8007646:	6439      	str	r1, [r7, #64]	; 0x40
 8007648:	415b      	adcs	r3, r3
 800764a:	647b      	str	r3, [r7, #68]	; 0x44
 800764c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007650:	1912      	adds	r2, r2, r4
 8007652:	eb45 0303 	adc.w	r3, r5, r3
 8007656:	f04f 0000 	mov.w	r0, #0
 800765a:	f04f 0100 	mov.w	r1, #0
 800765e:	00d9      	lsls	r1, r3, #3
 8007660:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007664:	00d0      	lsls	r0, r2, #3
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	1911      	adds	r1, r2, r4
 800766c:	6639      	str	r1, [r7, #96]	; 0x60
 800766e:	416b      	adcs	r3, r5
 8007670:	667b      	str	r3, [r7, #100]	; 0x64
 8007672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	461a      	mov	r2, r3
 8007678:	f04f 0300 	mov.w	r3, #0
 800767c:	1891      	adds	r1, r2, r2
 800767e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007680:	415b      	adcs	r3, r3
 8007682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007684:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007688:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800768c:	f7f8 fdba 	bl	8000204 <__aeabi_uldivmod>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	4ba5      	ldr	r3, [pc, #660]	; (800792c <UART_SetConfig+0x38c>)
 8007696:	fba3 2302 	umull	r2, r3, r3, r2
 800769a:	095b      	lsrs	r3, r3, #5
 800769c:	011e      	lsls	r6, r3, #4
 800769e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076a0:	461c      	mov	r4, r3
 80076a2:	f04f 0500 	mov.w	r5, #0
 80076a6:	4622      	mov	r2, r4
 80076a8:	462b      	mov	r3, r5
 80076aa:	1891      	adds	r1, r2, r2
 80076ac:	6339      	str	r1, [r7, #48]	; 0x30
 80076ae:	415b      	adcs	r3, r3
 80076b0:	637b      	str	r3, [r7, #52]	; 0x34
 80076b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80076b6:	1912      	adds	r2, r2, r4
 80076b8:	eb45 0303 	adc.w	r3, r5, r3
 80076bc:	f04f 0000 	mov.w	r0, #0
 80076c0:	f04f 0100 	mov.w	r1, #0
 80076c4:	00d9      	lsls	r1, r3, #3
 80076c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076ca:	00d0      	lsls	r0, r2, #3
 80076cc:	4602      	mov	r2, r0
 80076ce:	460b      	mov	r3, r1
 80076d0:	1911      	adds	r1, r2, r4
 80076d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80076d4:	416b      	adcs	r3, r5
 80076d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	461a      	mov	r2, r3
 80076de:	f04f 0300 	mov.w	r3, #0
 80076e2:	1891      	adds	r1, r2, r2
 80076e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80076e6:	415b      	adcs	r3, r3
 80076e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80076f2:	f7f8 fd87 	bl	8000204 <__aeabi_uldivmod>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4b8c      	ldr	r3, [pc, #560]	; (800792c <UART_SetConfig+0x38c>)
 80076fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007700:	095b      	lsrs	r3, r3, #5
 8007702:	2164      	movs	r1, #100	; 0x64
 8007704:	fb01 f303 	mul.w	r3, r1, r3
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	3332      	adds	r3, #50	; 0x32
 800770e:	4a87      	ldr	r2, [pc, #540]	; (800792c <UART_SetConfig+0x38c>)
 8007710:	fba2 2303 	umull	r2, r3, r2, r3
 8007714:	095b      	lsrs	r3, r3, #5
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800771c:	441e      	add	r6, r3
 800771e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007720:	4618      	mov	r0, r3
 8007722:	f04f 0100 	mov.w	r1, #0
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	1894      	adds	r4, r2, r2
 800772c:	623c      	str	r4, [r7, #32]
 800772e:	415b      	adcs	r3, r3
 8007730:	627b      	str	r3, [r7, #36]	; 0x24
 8007732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007736:	1812      	adds	r2, r2, r0
 8007738:	eb41 0303 	adc.w	r3, r1, r3
 800773c:	f04f 0400 	mov.w	r4, #0
 8007740:	f04f 0500 	mov.w	r5, #0
 8007744:	00dd      	lsls	r5, r3, #3
 8007746:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800774a:	00d4      	lsls	r4, r2, #3
 800774c:	4622      	mov	r2, r4
 800774e:	462b      	mov	r3, r5
 8007750:	1814      	adds	r4, r2, r0
 8007752:	653c      	str	r4, [r7, #80]	; 0x50
 8007754:	414b      	adcs	r3, r1
 8007756:	657b      	str	r3, [r7, #84]	; 0x54
 8007758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	461a      	mov	r2, r3
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	1891      	adds	r1, r2, r2
 8007764:	61b9      	str	r1, [r7, #24]
 8007766:	415b      	adcs	r3, r3
 8007768:	61fb      	str	r3, [r7, #28]
 800776a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800776e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007772:	f7f8 fd47 	bl	8000204 <__aeabi_uldivmod>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4b6c      	ldr	r3, [pc, #432]	; (800792c <UART_SetConfig+0x38c>)
 800777c:	fba3 1302 	umull	r1, r3, r3, r2
 8007780:	095b      	lsrs	r3, r3, #5
 8007782:	2164      	movs	r1, #100	; 0x64
 8007784:	fb01 f303 	mul.w	r3, r1, r3
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	3332      	adds	r3, #50	; 0x32
 800778e:	4a67      	ldr	r2, [pc, #412]	; (800792c <UART_SetConfig+0x38c>)
 8007790:	fba2 2303 	umull	r2, r3, r2, r3
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	f003 0207 	and.w	r2, r3, #7
 800779a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4432      	add	r2, r6
 80077a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077a2:	e0b9      	b.n	8007918 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077a6:	461c      	mov	r4, r3
 80077a8:	f04f 0500 	mov.w	r5, #0
 80077ac:	4622      	mov	r2, r4
 80077ae:	462b      	mov	r3, r5
 80077b0:	1891      	adds	r1, r2, r2
 80077b2:	6139      	str	r1, [r7, #16]
 80077b4:	415b      	adcs	r3, r3
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80077bc:	1912      	adds	r2, r2, r4
 80077be:	eb45 0303 	adc.w	r3, r5, r3
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f04f 0100 	mov.w	r1, #0
 80077ca:	00d9      	lsls	r1, r3, #3
 80077cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077d0:	00d0      	lsls	r0, r2, #3
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	eb12 0804 	adds.w	r8, r2, r4
 80077da:	eb43 0905 	adc.w	r9, r3, r5
 80077de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f04f 0100 	mov.w	r1, #0
 80077e8:	f04f 0200 	mov.w	r2, #0
 80077ec:	f04f 0300 	mov.w	r3, #0
 80077f0:	008b      	lsls	r3, r1, #2
 80077f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077f6:	0082      	lsls	r2, r0, #2
 80077f8:	4640      	mov	r0, r8
 80077fa:	4649      	mov	r1, r9
 80077fc:	f7f8 fd02 	bl	8000204 <__aeabi_uldivmod>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4b49      	ldr	r3, [pc, #292]	; (800792c <UART_SetConfig+0x38c>)
 8007806:	fba3 2302 	umull	r2, r3, r3, r2
 800780a:	095b      	lsrs	r3, r3, #5
 800780c:	011e      	lsls	r6, r3, #4
 800780e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007810:	4618      	mov	r0, r3
 8007812:	f04f 0100 	mov.w	r1, #0
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	1894      	adds	r4, r2, r2
 800781c:	60bc      	str	r4, [r7, #8]
 800781e:	415b      	adcs	r3, r3
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007826:	1812      	adds	r2, r2, r0
 8007828:	eb41 0303 	adc.w	r3, r1, r3
 800782c:	f04f 0400 	mov.w	r4, #0
 8007830:	f04f 0500 	mov.w	r5, #0
 8007834:	00dd      	lsls	r5, r3, #3
 8007836:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800783a:	00d4      	lsls	r4, r2, #3
 800783c:	4622      	mov	r2, r4
 800783e:	462b      	mov	r3, r5
 8007840:	1814      	adds	r4, r2, r0
 8007842:	64bc      	str	r4, [r7, #72]	; 0x48
 8007844:	414b      	adcs	r3, r1
 8007846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	4618      	mov	r0, r3
 800784e:	f04f 0100 	mov.w	r1, #0
 8007852:	f04f 0200 	mov.w	r2, #0
 8007856:	f04f 0300 	mov.w	r3, #0
 800785a:	008b      	lsls	r3, r1, #2
 800785c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007860:	0082      	lsls	r2, r0, #2
 8007862:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007866:	f7f8 fccd 	bl	8000204 <__aeabi_uldivmod>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4b2f      	ldr	r3, [pc, #188]	; (800792c <UART_SetConfig+0x38c>)
 8007870:	fba3 1302 	umull	r1, r3, r3, r2
 8007874:	095b      	lsrs	r3, r3, #5
 8007876:	2164      	movs	r1, #100	; 0x64
 8007878:	fb01 f303 	mul.w	r3, r1, r3
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	011b      	lsls	r3, r3, #4
 8007880:	3332      	adds	r3, #50	; 0x32
 8007882:	4a2a      	ldr	r2, [pc, #168]	; (800792c <UART_SetConfig+0x38c>)
 8007884:	fba2 2303 	umull	r2, r3, r2, r3
 8007888:	095b      	lsrs	r3, r3, #5
 800788a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800788e:	441e      	add	r6, r3
 8007890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007892:	4618      	mov	r0, r3
 8007894:	f04f 0100 	mov.w	r1, #0
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	1894      	adds	r4, r2, r2
 800789e:	603c      	str	r4, [r7, #0]
 80078a0:	415b      	adcs	r3, r3
 80078a2:	607b      	str	r3, [r7, #4]
 80078a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a8:	1812      	adds	r2, r2, r0
 80078aa:	eb41 0303 	adc.w	r3, r1, r3
 80078ae:	f04f 0400 	mov.w	r4, #0
 80078b2:	f04f 0500 	mov.w	r5, #0
 80078b6:	00dd      	lsls	r5, r3, #3
 80078b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078bc:	00d4      	lsls	r4, r2, #3
 80078be:	4622      	mov	r2, r4
 80078c0:	462b      	mov	r3, r5
 80078c2:	eb12 0a00 	adds.w	sl, r2, r0
 80078c6:	eb43 0b01 	adc.w	fp, r3, r1
 80078ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f04f 0100 	mov.w	r1, #0
 80078d4:	f04f 0200 	mov.w	r2, #0
 80078d8:	f04f 0300 	mov.w	r3, #0
 80078dc:	008b      	lsls	r3, r1, #2
 80078de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80078e2:	0082      	lsls	r2, r0, #2
 80078e4:	4650      	mov	r0, sl
 80078e6:	4659      	mov	r1, fp
 80078e8:	f7f8 fc8c 	bl	8000204 <__aeabi_uldivmod>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4b0e      	ldr	r3, [pc, #56]	; (800792c <UART_SetConfig+0x38c>)
 80078f2:	fba3 1302 	umull	r1, r3, r3, r2
 80078f6:	095b      	lsrs	r3, r3, #5
 80078f8:	2164      	movs	r1, #100	; 0x64
 80078fa:	fb01 f303 	mul.w	r3, r1, r3
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	011b      	lsls	r3, r3, #4
 8007902:	3332      	adds	r3, #50	; 0x32
 8007904:	4a09      	ldr	r2, [pc, #36]	; (800792c <UART_SetConfig+0x38c>)
 8007906:	fba2 2303 	umull	r2, r3, r2, r3
 800790a:	095b      	lsrs	r3, r3, #5
 800790c:	f003 020f 	and.w	r2, r3, #15
 8007910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4432      	add	r2, r6
 8007916:	609a      	str	r2, [r3, #8]
}
 8007918:	bf00      	nop
 800791a:	377c      	adds	r7, #124	; 0x7c
 800791c:	46bd      	mov	sp, r7
 800791e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007922:	bf00      	nop
 8007924:	40011000 	.word	0x40011000
 8007928:	40011400 	.word	0x40011400
 800792c:	51eb851f 	.word	0x51eb851f

08007930 <__libc_init_array>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	4d0d      	ldr	r5, [pc, #52]	; (8007968 <__libc_init_array+0x38>)
 8007934:	4c0d      	ldr	r4, [pc, #52]	; (800796c <__libc_init_array+0x3c>)
 8007936:	1b64      	subs	r4, r4, r5
 8007938:	10a4      	asrs	r4, r4, #2
 800793a:	2600      	movs	r6, #0
 800793c:	42a6      	cmp	r6, r4
 800793e:	d109      	bne.n	8007954 <__libc_init_array+0x24>
 8007940:	4d0b      	ldr	r5, [pc, #44]	; (8007970 <__libc_init_array+0x40>)
 8007942:	4c0c      	ldr	r4, [pc, #48]	; (8007974 <__libc_init_array+0x44>)
 8007944:	f000 f820 	bl	8007988 <_init>
 8007948:	1b64      	subs	r4, r4, r5
 800794a:	10a4      	asrs	r4, r4, #2
 800794c:	2600      	movs	r6, #0
 800794e:	42a6      	cmp	r6, r4
 8007950:	d105      	bne.n	800795e <__libc_init_array+0x2e>
 8007952:	bd70      	pop	{r4, r5, r6, pc}
 8007954:	f855 3b04 	ldr.w	r3, [r5], #4
 8007958:	4798      	blx	r3
 800795a:	3601      	adds	r6, #1
 800795c:	e7ee      	b.n	800793c <__libc_init_array+0xc>
 800795e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007962:	4798      	blx	r3
 8007964:	3601      	adds	r6, #1
 8007966:	e7f2      	b.n	800794e <__libc_init_array+0x1e>
 8007968:	080079c8 	.word	0x080079c8
 800796c:	080079c8 	.word	0x080079c8
 8007970:	080079c8 	.word	0x080079c8
 8007974:	080079cc 	.word	0x080079cc

08007978 <memset>:
 8007978:	4402      	add	r2, r0
 800797a:	4603      	mov	r3, r0
 800797c:	4293      	cmp	r3, r2
 800797e:	d100      	bne.n	8007982 <memset+0xa>
 8007980:	4770      	bx	lr
 8007982:	f803 1b01 	strb.w	r1, [r3], #1
 8007986:	e7f9      	b.n	800797c <memset+0x4>

08007988 <_init>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	bf00      	nop
 800798c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798e:	bc08      	pop	{r3}
 8007990:	469e      	mov	lr, r3
 8007992:	4770      	bx	lr

08007994 <_fini>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	bf00      	nop
 8007998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799a:	bc08      	pop	{r3}
 800799c:	469e      	mov	lr, r3
 800799e:	4770      	bx	lr
