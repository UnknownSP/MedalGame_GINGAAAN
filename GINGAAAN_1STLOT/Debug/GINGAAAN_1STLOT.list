
GINGAAAN_1STLOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007650  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007814  08007814  00017814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007834  08007834  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800783c  0800783c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007840  08007840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08007844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  2000002c  08007870  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  08007870  00020934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c006  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003393  00000000  00000000  0003c062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0003f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00040460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fd3  00000000  00000000  000413a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e6e  00000000  00000000  00065373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4706  00000000  00000000  0007b1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f8e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004450  00000000  00000000  0014f93c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080077fc 	.word	0x080077fc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000030 	.word	0x20000030
 8000200:	080077fc 	.word	0x080077fc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <appInit>:
#include <stdbool.h>
#include <math.h>
#include "app.h"

//初期化
int appInit(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	//D_CAN_SetReceiveAddress(8,9,10,11);
	D_CAN_SetReceiveAddressAll();
 8000502:	f001 f96d 	bl	80017e0 <D_CAN_SetReceiveAddressAll>
	for(int i=0; i<8; i++){
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	e01b      	b.n	8000544 <appInit+0x48>
		for(int j=0; j<4; j++){
 800050c:	2300      	movs	r3, #0
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	e012      	b.n	8000538 <appInit+0x3c>
			rcvData[j][i] = 0;
 8000512:	4a10      	ldr	r2, [pc, #64]	; (8000554 <appInit+0x58>)
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	00db      	lsls	r3, r3, #3
 8000518:	441a      	add	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4413      	add	r3, r2
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
			sndData[j][i] = 0;
 8000522:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <appInit+0x5c>)
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	441a      	add	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<4; j++){
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	2b03      	cmp	r3, #3
 800053c:	dde9      	ble.n	8000512 <appInit+0x16>
	for(int i=0; i<8; i++){
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3301      	adds	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b07      	cmp	r3, #7
 8000548:	dde0      	ble.n	800050c <appInit+0x10>
		}
	}
	return 0;
 800054a:	2300      	movs	r3, #0
}
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000068 	.word	0x20000068
 8000558:	20000048 	.word	0x20000048

0800055c <appTask>:

int appTask(void){
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
		sndData[i][sendLength-1] = (uint8_t)checkSum;
	}
	*/

	//SMsndTime += G_System_MicroCounter - recent_System_counter;
	int diff = G_System_counter - recent_System_counter;
 8000562:	4ba2      	ldr	r3, [pc, #648]	; (80007ec <appTask+0x290>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	4ba2      	ldr	r3, [pc, #648]	; (80007f0 <appTask+0x294>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	613b      	str	r3, [r7, #16]
	sndTime += diff;
 800056e:	4ba1      	ldr	r3, [pc, #644]	; (80007f4 <appTask+0x298>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	4413      	add	r3, r2
 8000576:	4a9f      	ldr	r2, [pc, #636]	; (80007f4 <appTask+0x298>)
 8000578:	6013      	str	r3, [r2, #0]
	rcvTime += diff;
 800057a:	4b9f      	ldr	r3, [pc, #636]	; (80007f8 <appTask+0x29c>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	4413      	add	r3, r2
 8000582:	4a9d      	ldr	r2, [pc, #628]	; (80007f8 <appTask+0x29c>)
 8000584:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_counter;
 8000586:	4b99      	ldr	r3, [pc, #612]	; (80007ec <appTask+0x290>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a99      	ldr	r2, [pc, #612]	; (80007f0 <appTask+0x294>)
 800058c:	6013      	str	r3, [r2, #0]
	//CAN送信タイミングの場合送信
	if(sndTime >= CAN_SEND_INTERVAL){
 800058e:	4b99      	ldr	r3, [pc, #612]	; (80007f4 <appTask+0x298>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b63      	cmp	r3, #99	; 0x63
 8000594:	f240 8088 	bls.w	80006a8 <appTask+0x14c>
		sndTime = 0;
 8000598:	4b96      	ldr	r3, [pc, #600]	; (80007f4 <appTask+0x298>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
		static int sendLength = 8;
		sndData[0][0] = testSendData;
 800059e:	4b97      	ldr	r3, [pc, #604]	; (80007fc <appTask+0x2a0>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b96      	ldr	r3, [pc, #600]	; (8000800 <appTask+0x2a4>)
 80005a6:	701a      	strb	r2, [r3, #0]
		sndData[0][1] = testSendData2;
 80005a8:	4b96      	ldr	r3, [pc, #600]	; (8000804 <appTask+0x2a8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b94      	ldr	r3, [pc, #592]	; (8000800 <appTask+0x2a4>)
 80005b0:	705a      	strb	r2, [r3, #1]
		sndData[0][2] = testSendData2;
 80005b2:	4b94      	ldr	r3, [pc, #592]	; (8000804 <appTask+0x2a8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b91      	ldr	r3, [pc, #580]	; (8000800 <appTask+0x2a4>)
 80005ba:	709a      	strb	r2, [r3, #2]
		sndData[0][3] = testSendData2;
 80005bc:	4b91      	ldr	r3, [pc, #580]	; (8000804 <appTask+0x2a8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b8f      	ldr	r3, [pc, #572]	; (8000800 <appTask+0x2a4>)
 80005c4:	70da      	strb	r2, [r3, #3]
		sndData[0][4] = testSendData2;
 80005c6:	4b8f      	ldr	r3, [pc, #572]	; (8000804 <appTask+0x2a8>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	4b8c      	ldr	r3, [pc, #560]	; (8000800 <appTask+0x2a4>)
 80005ce:	711a      	strb	r2, [r3, #4]
		sndData[0][5] = testSendData2;
 80005d0:	4b8c      	ldr	r3, [pc, #560]	; (8000804 <appTask+0x2a8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b8a      	ldr	r3, [pc, #552]	; (8000800 <appTask+0x2a4>)
 80005d8:	715a      	strb	r2, [r3, #5]
		sndData[0][6] = testSendData2;
 80005da:	4b8a      	ldr	r3, [pc, #552]	; (8000804 <appTask+0x2a8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	4b87      	ldr	r3, [pc, #540]	; (8000800 <appTask+0x2a4>)
 80005e2:	719a      	strb	r2, [r3, #6]
		sndData[0][7] = testSendData2;
 80005e4:	4b87      	ldr	r3, [pc, #540]	; (8000804 <appTask+0x2a8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b85      	ldr	r3, [pc, #532]	; (8000800 <appTask+0x2a4>)
 80005ec:	71da      	strb	r2, [r3, #7]
		uint8_t dataSum = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	77fb      	strb	r3, [r7, #31]
		for(int j=0; j<sendLength-1; j++){
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
 80005f6:	e009      	b.n	800060c <appTask+0xb0>
			dataSum += sndData[0][j];
 80005f8:	4a81      	ldr	r2, [pc, #516]	; (8000800 <appTask+0x2a4>)
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	4413      	add	r3, r2
 80005fe:	781a      	ldrb	r2, [r3, #0]
 8000600:	7ffb      	ldrb	r3, [r7, #31]
 8000602:	4413      	add	r3, r2
 8000604:	77fb      	strb	r3, [r7, #31]
		for(int j=0; j<sendLength-1; j++){
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	3301      	adds	r3, #1
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	4b7e      	ldr	r3, [pc, #504]	; (8000808 <appTask+0x2ac>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3b01      	subs	r3, #1
 8000612:	69ba      	ldr	r2, [r7, #24]
 8000614:	429a      	cmp	r2, r3
 8000616:	dbef      	blt.n	80005f8 <appTask+0x9c>
		}
		//int checkSum = 256 - (int)dataSum;
		sndData[0][sendLength-1] = (uint8_t)dataSum;
 8000618:	4b7b      	ldr	r3, [pc, #492]	; (8000808 <appTask+0x2ac>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	3b01      	subs	r3, #1
 800061e:	4978      	ldr	r1, [pc, #480]	; (8000800 <appTask+0x2a4>)
 8000620:	7ffa      	ldrb	r2, [r7, #31]
 8000622:	54ca      	strb	r2, [r1, r3]


		errorHandle = D_CAN_Transmit(0x7ff/*testSendData*/,sndData[0],sendLength);
 8000624:	4b78      	ldr	r3, [pc, #480]	; (8000808 <appTask+0x2ac>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	b29b      	uxth	r3, r3
 800062a:	461a      	mov	r2, r3
 800062c:	4974      	ldr	r1, [pc, #464]	; (8000800 <appTask+0x2a4>)
 800062e:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000632:	f001 f87d 	bl	8001730 <D_CAN_Transmit>
 8000636:	4603      	mov	r3, r0
 8000638:	4a74      	ldr	r2, [pc, #464]	; (800080c <appTask+0x2b0>)
 800063a:	6013      	str	r3, [r2, #0]
		sndTime = 0;
 800063c:	4b6d      	ldr	r3, [pc, #436]	; (80007f4 <appTask+0x298>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
		count1++;
 8000642:	4b73      	ldr	r3, [pc, #460]	; (8000810 <appTask+0x2b4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a71      	ldr	r2, [pc, #452]	; (8000810 <appTask+0x2b4>)
 800064a:	6013      	str	r3, [r2, #0]
		if(count1 >= 1 ){//&& errorHandle == 0){
 800064c:	4b70      	ldr	r3, [pc, #448]	; (8000810 <appTask+0x2b4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	dd07      	ble.n	8000664 <appTask+0x108>
			count1 = 0;
 8000654:	4b6e      	ldr	r3, [pc, #440]	; (8000810 <appTask+0x2b4>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
			testSendData++;
 800065a:	4b68      	ldr	r3, [pc, #416]	; (80007fc <appTask+0x2a0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	4a66      	ldr	r2, [pc, #408]	; (80007fc <appTask+0x2a0>)
 8000662:	6013      	str	r3, [r2, #0]
		}
		if(testSendData >= 1000){ //&& errorHandle == 0){
 8000664:	4b65      	ldr	r3, [pc, #404]	; (80007fc <appTask+0x2a0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800066c:	db0c      	blt.n	8000688 <appTask+0x12c>
			testSendData = 0;
 800066e:	4b63      	ldr	r3, [pc, #396]	; (80007fc <appTask+0x2a0>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
			testSendData2++;
 8000674:	4b63      	ldr	r3, [pc, #396]	; (8000804 <appTask+0x2a8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	4a62      	ldr	r2, [pc, #392]	; (8000804 <appTask+0x2a8>)
 800067c:	6013      	str	r3, [r2, #0]
			ownIdCount++;
 800067e:	4b65      	ldr	r3, [pc, #404]	; (8000814 <appTask+0x2b8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	4a63      	ldr	r2, [pc, #396]	; (8000814 <appTask+0x2b8>)
 8000686:	6013      	str	r3, [r2, #0]
		}
		if(testSendData2 >= 256 && errorHandle == 0){
 8000688:	4b5e      	ldr	r3, [pc, #376]	; (8000804 <appTask+0x2a8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2bff      	cmp	r3, #255	; 0xff
 800068e:	dd0b      	ble.n	80006a8 <appTask+0x14c>
 8000690:	4b5e      	ldr	r3, [pc, #376]	; (800080c <appTask+0x2b0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d107      	bne.n	80006a8 <appTask+0x14c>
			testSendData2 = 1;
 8000698:	4b5a      	ldr	r3, [pc, #360]	; (8000804 <appTask+0x2a8>)
 800069a:	2201      	movs	r2, #1
 800069c:	601a      	str	r2, [r3, #0]
			testSendData3++;
 800069e:	4b5e      	ldr	r3, [pc, #376]	; (8000818 <appTask+0x2bc>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	4a5c      	ldr	r2, [pc, #368]	; (8000818 <appTask+0x2bc>)
 80006a6:	6013      	str	r3, [r2, #0]
			ownIdCount++;
		}
		*/
	}
	//CAN受信処理
	D_CAN_Receive(0,rcvData[0],receiveLength);
 80006a8:	4b5c      	ldr	r3, [pc, #368]	; (800081c <appTask+0x2c0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	495b      	ldr	r1, [pc, #364]	; (8000820 <appTask+0x2c4>)
 80006b2:	2000      	movs	r0, #0
 80006b4:	f001 f8c6 	bl	8001844 <D_CAN_Receive>
	D_CAN_Receive(1,rcvData[1],receiveLength);
 80006b8:	4b58      	ldr	r3, [pc, #352]	; (800081c <appTask+0x2c0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	461a      	mov	r2, r3
 80006c0:	4958      	ldr	r1, [pc, #352]	; (8000824 <appTask+0x2c8>)
 80006c2:	2001      	movs	r0, #1
 80006c4:	f001 f8be 	bl	8001844 <D_CAN_Receive>

	static bool _first = false;

	if(!_first){
 80006c8:	4b57      	ldr	r3, [pc, #348]	; (8000828 <appTask+0x2cc>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	f083 0301 	eor.w	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00a      	beq.n	80006ec <appTask+0x190>
		D_Slider_SetLightingR(SL_NORMAL_FLASH,0);
 80006d6:	2100      	movs	r1, #0
 80006d8:	2002      	movs	r0, #2
 80006da:	f001 fa13 	bl	8001b04 <D_Slider_SetLightingR>
		D_Slider_SetLightingL(SL_NORMAL_FLASH,0);
 80006de:	2100      	movs	r1, #0
 80006e0:	2002      	movs	r0, #2
 80006e2:	f001 fa4f 	bl	8001b84 <D_Slider_SetLightingL>
		_first = true;
 80006e6:	4b50      	ldr	r3, [pc, #320]	; (8000828 <appTask+0x2cc>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
	}
	int pocketR = D_Slider_GetPocketR(false);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f002 fa29 	bl	8002b44 <D_Slider_GetPocketR>
 80006f2:	60f8      	str	r0, [r7, #12]
	if(pocketR != -1){
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006fa:	d006      	beq.n	800070a <appTask+0x1ae>
		D_Slider_SetLightingR(SL_POCKET_IN,pocketR);
 80006fc:	68f9      	ldr	r1, [r7, #12]
 80006fe:	2003      	movs	r0, #3
 8000700:	f001 fa00 	bl	8001b04 <D_Slider_SetLightingR>
		D_Slider_GetPocketR(true);
 8000704:	2001      	movs	r0, #1
 8000706:	f002 fa1d 	bl	8002b44 <D_Slider_GetPocketR>
	}
	int pocketL = D_Slider_GetPocketL(false);
 800070a:	2000      	movs	r0, #0
 800070c:	f002 fa56 	bl	8002bbc <D_Slider_GetPocketL>
 8000710:	60b8      	str	r0, [r7, #8]
	if(pocketL != -1){
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000718:	d006      	beq.n	8000728 <appTask+0x1cc>
		D_Slider_SetLightingL(SL_POCKET_IN,pocketL);
 800071a:	68b9      	ldr	r1, [r7, #8]
 800071c:	2003      	movs	r0, #3
 800071e:	f001 fa31 	bl	8001b84 <D_Slider_SetLightingL>
		D_Slider_GetPocketL(true);
 8000722:	2001      	movs	r0, #1
 8000724:	f002 fa4a 	bl	8002bbc <D_Slider_GetPocketL>

	//D_Mess_printf("%d\n", G_System_counter);
	//D_PWM_Set(1,100);
	//D_PWM_Set(2,100);
	//IO_SET_BLDC2_DIR();
	if(IO_READ_USERBUTTON()){
 8000728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072c:	483f      	ldr	r0, [pc, #252]	; (800082c <appTask+0x2d0>)
 800072e:	f002 fc9d 	bl	800306c <D_GPIO_Read>
 8000732:	4603      	mov	r3, r0
 8000734:	f083 0301 	eor.w	r3, r3, #1
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d010      	beq.n	8000760 <appTask+0x204>
		IO_SET_USERLED();
 800073e:	2120      	movs	r1, #32
 8000740:	483b      	ldr	r0, [pc, #236]	; (8000830 <appTask+0x2d4>)
 8000742:	f002 fc73 	bl	800302c <D_GPIO_Set>
		if(_userButton){
 8000746:	4b3b      	ldr	r3, [pc, #236]	; (8000834 <appTask+0x2d8>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d00f      	beq.n	800076e <appTask+0x212>
			_userButton = false;
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <appTask+0x2d8>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
			testSendData += 1;
 8000754:	4b29      	ldr	r3, [pc, #164]	; (80007fc <appTask+0x2a0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4a28      	ldr	r2, [pc, #160]	; (80007fc <appTask+0x2a0>)
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	e006      	b.n	800076e <appTask+0x212>
		//Lottery_JP_SetSpeed(JPC_MAX_SPEED,0);

		//IO_SET_ROOMLIGHT();
		//JP_Lift_Down();
	}else{
		_userButton = true;
 8000760:	4b34      	ldr	r3, [pc, #208]	; (8000834 <appTask+0x2d8>)
 8000762:	2201      	movs	r2, #1
 8000764:	701a      	strb	r2, [r3, #0]
		IO_RESET_USERLED();
 8000766:	2120      	movs	r1, #32
 8000768:	4831      	ldr	r0, [pc, #196]	; (8000830 <appTask+0x2d4>)
 800076a:	f002 fc6f 	bl	800304c <D_GPIO_Reset>
		//D_PWM_Set(BLDC2,3000);
		//D_PWM_Set(BLDC3,3500);
		//JP_Lift_Up();
	}

	for(int i=0; i<8; i++){
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	e011      	b.n	8000798 <appTask+0x23c>
		if(rcvData[0][i] != 0) rcvDataJudge[i] = rcvData[0][i];
 8000774:	4a2a      	ldr	r2, [pc, #168]	; (8000820 <appTask+0x2c4>)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	4413      	add	r3, r2
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d008      	beq.n	8000792 <appTask+0x236>
 8000780:	4a27      	ldr	r2, [pc, #156]	; (8000820 <appTask+0x2c4>)
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	4413      	add	r3, r2
 8000786:	7819      	ldrb	r1, [r3, #0]
 8000788:	4a2b      	ldr	r2, [pc, #172]	; (8000838 <appTask+0x2dc>)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	4413      	add	r3, r2
 800078e:	460a      	mov	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<8; i++){
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3301      	adds	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	2b07      	cmp	r3, #7
 800079c:	ddea      	ble.n	8000774 <appTask+0x218>
	}
	//デバッグ用
	int16_t debug_bits = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	80fb      	strh	r3, [r7, #6]
	debug_bits &= 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_SM_R() << 2);
 80007a6:	2101      	movs	r1, #1
 80007a8:	4820      	ldr	r0, [pc, #128]	; (800082c <appTask+0x2d0>)
 80007aa:	f002 fc5f 	bl	800306c <D_GPIO_Read>
 80007ae:	4603      	mov	r3, r0
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	88fb      	ldrh	r3, [r7, #6]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_SM_C() << 1);
 80007ba:	2104      	movs	r1, #4
 80007bc:	481b      	ldr	r0, [pc, #108]	; (800082c <appTask+0x2d0>)
 80007be:	f002 fc55 	bl	800306c <D_GPIO_Read>
 80007c2:	4603      	mov	r3, r0
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	88fb      	ldrh	r3, [r7, #6]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_SM_L() << 0);
 80007ce:	2102      	movs	r1, #2
 80007d0:	4816      	ldr	r0, [pc, #88]	; (800082c <appTask+0x2d0>)
 80007d2:	f002 fc4b 	bl	800306c <D_GPIO_Read>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b21a      	sxth	r2, r3
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	4313      	orrs	r3, r2
 80007de:	80fb      	strh	r3, [r7, #6]
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", sndData[0][0],sndData[0][1],sndData[0][2],sndData[0][3],sndData[0][4],sndData[0][5],sndData[0][6],sndData[0][7]);
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", rcvData[0][0],rcvData[0][1],rcvData[0][2],rcvData[0][3],rcvData[0][4],rcvData[0][5],rcvData[0][6],rcvData[0][7]);
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", rcvDataJudge[0],rcvDataJudge[1],rcvDataJudge[2],rcvDataJudge[3],rcvDataJudge[4],rcvDataJudge[5],rcvDataJudge[6],rcvDataJudge[7]);
	D_Mess_printf("id : %3d, err : %3d\n", rcvData[1][0],rcvData[1][1]);
	*/
	return 0;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3720      	adds	r7, #32
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000b0 	.word	0x200000b0
 80007f0:	20000090 	.word	0x20000090
 80007f4:	20000094 	.word	0x20000094
 80007f8:	20000098 	.word	0x20000098
 80007fc:	2000009c 	.word	0x2000009c
 8000800:	20000048 	.word	0x20000048
 8000804:	20000000 	.word	0x20000000
 8000808:	20000004 	.word	0x20000004
 800080c:	200000a0 	.word	0x200000a0
 8000810:	200000a4 	.word	0x200000a4
 8000814:	20000008 	.word	0x20000008
 8000818:	200000a8 	.word	0x200000a8
 800081c:	2000000c 	.word	0x2000000c
 8000820:	20000068 	.word	0x20000068
 8000824:	20000070 	.word	0x20000070
 8000828:	200000ac 	.word	0x200000ac
 800082c:	40020800 	.word	0x40020800
 8000830:	40020000 	.word	0x40020000
 8000834:	200000ad 	.word	0x200000ad
 8000838:	20000088 	.word	0x20000088

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f002 fc8a 	bl	8003158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f81c 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f000 fa6e 	bl	8000d28 <MX_GPIO_Init>
  MX_DMA_Init();
 800084c:	f000 fa26 	bl	8000c9c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000850:	f000 f9d0 	bl	8000bf4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000854:	f000 f9f8 	bl	8000c48 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000858:	f000 f934 	bl	8000ac4 <MX_TIM3_Init>
  MX_CAN1_Init();
 800085c:	f000 f87c 	bl	8000958 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000860:	f000 f8b0 	bl	80009c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  D_PWM_Init();
 8000864:	f002 fc62 	bl	800312c <D_PWM_Init>
  D_CAN_Init();
 8000868:	f000 ff26 	bl	80016b8 <D_CAN_Init>

  //HAL_TIM_Base_Start_IT(&htim2);

  appInit();
 800086c:	f7ff fe46 	bl	80004fc <appInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //メインタスクの処理
	  appTask();
 8000870:	f7ff fe74 	bl	800055c <appTask>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
//		  D_Mess_printf("tes2");
//		  D_Mess_flush();
	  }*/
	  D_Slider_SystickUpdate();
 8000874:	f001 f8a8 	bl	80019c8 <D_Slider_SystickUpdate>
	  D_Mess_flush();
 8000878:	f002 fc0e 	bl	8003098 <D_Mess_flush>
	  appTask();
 800087c:	e7f8      	b.n	8000870 <main+0x34>
	...

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2234      	movs	r2, #52	; 0x34
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f006 ffac 	bl	80077ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <SystemClock_Config+0xd0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a28      	ldr	r2, [pc, #160]	; (8000950 <SystemClock_Config+0xd0>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <SystemClock_Config+0xd0>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008c0:	2300      	movs	r3, #0
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <SystemClock_Config+0xd4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <SystemClock_Config+0xd4>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <SystemClock_Config+0xd4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e8:	2310      	movs	r3, #16
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ec:	2302      	movs	r3, #2
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f4:	2308      	movs	r3, #8
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80008f8:	2350      	movs	r3, #80	; 0x50
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000900:	2302      	movs	r3, #2
 8000902:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000904:	2302      	movs	r3, #2
 8000906:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4618      	mov	r0, r3
 800090e:	f004 fcf9 	bl	8005304 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000918:	f000 fb5a 	bl	8000fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	230f      	movs	r3, #15
 800091e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2302      	movs	r3, #2
 8000922:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2102      	movs	r1, #2
 8000938:	4618      	mov	r0, r3
 800093a:	f004 fa17 	bl	8004d6c <HAL_RCC_ClockConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000944:	f000 fb44 	bl	8000fd0 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3750      	adds	r7, #80	; 0x50
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_CAN1_Init+0x64>)
 800095e:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <MX_CAN1_Init+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_CAN1_Init+0x64>)
 8000964:	2204      	movs	r2, #4
 8000966:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_CAN1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_CAN1_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_CAN1_Init+0x64>)
 8000976:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800097a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_CAN1_Init+0x64>)
 800097e:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000982:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <MX_CAN1_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_CAN1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_CAN1_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_CAN1_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_CAN1_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_CAN1_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_CAN1_Init+0x64>)
 80009aa:	f002 fc47 	bl	800323c <HAL_CAN_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009b4:	f000 fb0c 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200008fc 	.word	0x200008fc
 80009c0:	40006400 	.word	0x40006400

080009c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	; 0x38
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
 80009f0:	615a      	str	r2, [r3, #20]
 80009f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009f4:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 80009f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 80009fc:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 80009fe:	2208      	movs	r2, #8
 8000a00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000a08:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a1c:	4828      	ldr	r0, [pc, #160]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a1e:	f004 ff0f 	bl	8005840 <HAL_TIM_Base_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a28:	f000 fad2 	bl	8000fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4821      	ldr	r0, [pc, #132]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a3a:	f005 f933 	bl	8005ca4 <HAL_TIM_ConfigClockSource>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a44:	f000 fac4 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a48:	481d      	ldr	r0, [pc, #116]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a4a:	f004 ff48 	bl	80058de <HAL_TIM_PWM_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a54:	f000 fabc 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a60:	f107 0320 	add.w	r3, r7, #32
 8000a64:	4619      	mov	r1, r3
 8000a66:	4816      	ldr	r0, [pc, #88]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a68:	f005 fcf4 	bl	8006454 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a72:	f000 faad 	bl	8000fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a76:	2360      	movs	r3, #96	; 0x60
 8000a78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000a8e:	f005 f847 	bl	8005b20 <HAL_TIM_PWM_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a98:	f000 fa9a 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000aa4:	f005 f83c 	bl	8005b20 <HAL_TIM_PWM_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000aae:	f000 fa8f 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ab2:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <MX_TIM2_Init+0xfc>)
 8000ab4:	f000 fb58 	bl	8001168 <HAL_TIM_MspPostInit>

}
 8000ab8:	bf00      	nop
 8000aba:	3738      	adds	r7, #56	; 0x38
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000870 	.word	0x20000870

08000ac4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af4:	4b3d      	ldr	r3, [pc, #244]	; (8000bec <MX_TIM3_Init+0x128>)
 8000af6:	4a3e      	ldr	r2, [pc, #248]	; (8000bf0 <MX_TIM3_Init+0x12c>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 8000afa:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <MX_TIM3_Init+0x128>)
 8000afc:	2208      	movs	r2, #8
 8000afe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <MX_TIM3_Init+0x128>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000b06:	4b39      	ldr	r3, [pc, #228]	; (8000bec <MX_TIM3_Init+0x128>)
 8000b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b37      	ldr	r3, [pc, #220]	; (8000bec <MX_TIM3_Init+0x128>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b35      	ldr	r3, [pc, #212]	; (8000bec <MX_TIM3_Init+0x128>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b1a:	4834      	ldr	r0, [pc, #208]	; (8000bec <MX_TIM3_Init+0x128>)
 8000b1c:	f004 fe90 	bl	8005840 <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b26:	f000 fa53 	bl	8000fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b34:	4619      	mov	r1, r3
 8000b36:	482d      	ldr	r0, [pc, #180]	; (8000bec <MX_TIM3_Init+0x128>)
 8000b38:	f005 f8b4 	bl	8005ca4 <HAL_TIM_ConfigClockSource>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b42:	f000 fa45 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b46:	4829      	ldr	r0, [pc, #164]	; (8000bec <MX_TIM3_Init+0x128>)
 8000b48:	f004 fec9 	bl	80058de <HAL_TIM_PWM_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b52:	f000 fa3d 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	4619      	mov	r1, r3
 8000b64:	4821      	ldr	r0, [pc, #132]	; (8000bec <MX_TIM3_Init+0x128>)
 8000b66:	f005 fc75 	bl	8006454 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b70:	f000 fa2e 	bl	8000fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b74:	2360      	movs	r3, #96	; 0x60
 8000b76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4818      	ldr	r0, [pc, #96]	; (8000bec <MX_TIM3_Init+0x128>)
 8000b8c:	f004 ffc8 	bl	8005b20 <HAL_TIM_PWM_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b96:	f000 fa1b 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4812      	ldr	r0, [pc, #72]	; (8000bec <MX_TIM3_Init+0x128>)
 8000ba2:	f004 ffbd 	bl	8005b20 <HAL_TIM_PWM_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000bac:	f000 fa10 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <MX_TIM3_Init+0x128>)
 8000bb8:	f004 ffb2 	bl	8005b20 <HAL_TIM_PWM_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000bc2:	f000 fa05 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	220c      	movs	r2, #12
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <MX_TIM3_Init+0x128>)
 8000bce:	f004 ffa7 	bl	8005b20 <HAL_TIM_PWM_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000bd8:	f000 f9fa 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <MX_TIM3_Init+0x128>)
 8000bde:	f000 fac3 	bl	8001168 <HAL_TIM_MspPostInit>

}
 8000be2:	bf00      	nop
 8000be4:	3738      	adds	r7, #56	; 0x38
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200006c4 	.word	0x200006c4
 8000bf0:	40000400 	.word	0x40000400

08000bf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_USART1_UART_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c2c:	f005 fc8e 	bl	800654c <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c36:	f000 f9cb 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000082c 	.word	0x2000082c
 8000c44:	40011000 	.word	0x40011000

08000c48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <MX_USART2_UART_Init+0x50>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART2_UART_Init+0x4c>)
 8000c80:	f005 fc64 	bl	800654c <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c8a:	f000 f9a1 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200008b8 	.word	0x200008b8
 8000c98:	40004400 	.word	0x40004400

08000c9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_DMA_Init+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a1e      	ldr	r2, [pc, #120]	; (8000d24 <MX_DMA_Init+0x88>)
 8000cac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_DMA_Init+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_DMA_Init+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <MX_DMA_Init+0x88>)
 8000cc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_DMA_Init+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2010      	movs	r0, #16
 8000ce0:	f003 fa45 	bl	800416e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ce4:	2010      	movs	r0, #16
 8000ce6:	f003 fa5e 	bl	80041a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2011      	movs	r0, #17
 8000cf0:	f003 fa3d 	bl	800416e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000cf4:	2011      	movs	r0, #17
 8000cf6:	f003 fa56 	bl	80041a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	203a      	movs	r0, #58	; 0x3a
 8000d00:	f003 fa35 	bl	800416e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d04:	203a      	movs	r0, #58	; 0x3a
 8000d06:	f003 fa4e 	bl	80041a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2046      	movs	r0, #70	; 0x46
 8000d10:	f003 fa2d 	bl	800416e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000d14:	2046      	movs	r0, #70	; 0x46
 8000d16:	f003 fa46 	bl	80041a6 <HAL_NVIC_EnableIRQ>

}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b6a      	ldr	r3, [pc, #424]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a69      	ldr	r2, [pc, #420]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b67      	ldr	r3, [pc, #412]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b63      	ldr	r3, [pc, #396]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a62      	ldr	r2, [pc, #392]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b60      	ldr	r3, [pc, #384]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	4b5c      	ldr	r3, [pc, #368]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a5b      	ldr	r2, [pc, #364]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b59      	ldr	r3, [pc, #356]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b55      	ldr	r3, [pc, #340]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a54      	ldr	r2, [pc, #336]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b52      	ldr	r3, [pc, #328]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b4e      	ldr	r3, [pc, #312]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a4d      	ldr	r2, [pc, #308]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b4b      	ldr	r3, [pc, #300]	; (8000eec <MX_GPIO_Init+0x1c4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f641 0121 	movw	r1, #6177	; 0x1821
 8000dd0:	4847      	ldr	r0, [pc, #284]	; (8000ef0 <MX_GPIO_Init+0x1c8>)
 8000dd2:	f003 ffb1 	bl	8004d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000ddc:	4845      	ldr	r0, [pc, #276]	; (8000ef4 <MX_GPIO_Init+0x1cc>)
 8000dde:	f003 ffab 	bl	8004d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f24d 0104 	movw	r1, #53252	; 0xd004
 8000de8:	4843      	ldr	r0, [pc, #268]	; (8000ef8 <MX_GPIO_Init+0x1d0>)
 8000dea:	f003 ffa5 	bl	8004d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000df4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	483b      	ldr	r0, [pc, #236]	; (8000ef4 <MX_GPIO_Init+0x1cc>)
 8000e06:	f003 fdeb 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e0a:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8000e0e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4835      	ldr	r0, [pc, #212]	; (8000ef4 <MX_GPIO_Init+0x1cc>)
 8000e20:	f003 fdde 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e24:	2301      	movs	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e28:	2311      	movs	r3, #17
 8000e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	482d      	ldr	r0, [pc, #180]	; (8000ef0 <MX_GPIO_Init+0x1c8>)
 8000e3c:	f003 fdd0 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e40:	2310      	movs	r3, #16
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4827      	ldr	r0, [pc, #156]	; (8000ef0 <MX_GPIO_Init+0x1c8>)
 8000e54:	f003 fdc4 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8000e58:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <MX_GPIO_Init+0x1c8>)
 8000e72:	f003 fdb5 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000e76:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4819      	ldr	r0, [pc, #100]	; (8000ef4 <MX_GPIO_Init+0x1cc>)
 8000e90:	f003 fda6 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000e94:	f24d 0304 	movw	r3, #53252	; 0xd004
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_GPIO_Init+0x1d0>)
 8000eae:	f003 fd97 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_GPIO_Init+0x1d4>)
 8000ec6:	f003 fd8b 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <MX_GPIO_Init+0x1d0>)
 8000ede:	f003 fd7f 	bl	80049e0 <HAL_GPIO_Init>

}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020c00 	.word	0x40020c00

08000f00 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_UART_TxCpltCallback+0x30>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d102      	bne.n	8000f18 <HAL_UART_TxCpltCallback+0x18>
	  D_Mess_TransitionCompletedCallBack();
 8000f12:	f002 f8f3 	bl	80030fc <D_Mess_TransitionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_TransitionCompletedCallBack();
  }
}
 8000f16:	e006      	b.n	8000f26 <HAL_UART_TxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <HAL_UART_TxCpltCallback+0x34>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_UART_TxCpltCallback+0x26>
	  D_Slider_TransitionCompletedCallBack();
 8000f22:	f002 f867 	bl	8002ff4 <D_Slider_TransitionCompletedCallBack>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40004400 	.word	0x40004400
 8000f34:	40011000 	.word	0x40011000

08000f38 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_UART_RxCpltCallback+0x30>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d102      	bne.n	8000f50 <HAL_UART_RxCpltCallback+0x18>
	  D_Mess_ReceptionCompletedCallBack();
 8000f4a:	f002 f8e3 	bl	8003114 <D_Mess_ReceptionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_ReceptionCompletedCallBack();
  }
}
 8000f4e:	e006      	b.n	8000f5e <HAL_UART_RxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <HAL_UART_RxCpltCallback+0x34>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_UART_RxCpltCallback+0x26>
	  D_Slider_ReceptionCompletedCallBack();
 8000f5a:	f002 f857 	bl	800300c <D_Slider_ReceptionCompletedCallBack>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40004400 	.word	0x40004400
 8000f6c:	40011000 	.word	0x40011000

08000f70 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  D_CAN_ReceiveCallBack(hcan);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 fcb5 	bl	80018e8 <D_CAN_ReceiveCallBack>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_CAN_TxMailboxCompleteCallback>:
void HAL_CAN_TxMailboxCompleteCallback(){
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailboxComplete\n");
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailbox0Complete\n");
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailbox1Complete\n");
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailbox2Complete\n");
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <Error_Handler+0x8>
	...

08000fdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_MspInit+0x4c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_MspInit+0x4c>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_MspInit+0x4c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_MspInit+0x4c>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_MspInit+0x4c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800101a:	2007      	movs	r0, #7
 800101c:	f003 f89c 	bl	8004158 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800

0800102c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a29      	ldr	r2, [pc, #164]	; (80010f0 <HAL_CAN_MspInit+0xc4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d14c      	bne.n	80010e8 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_CAN_MspInit+0xc8>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <HAL_CAN_MspInit+0xc8>)
 8001058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_CAN_MspInit+0xc8>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_CAN_MspInit+0xc8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <HAL_CAN_MspInit+0xc8>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <HAL_CAN_MspInit+0xc8>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001086:	f44f 7340 	mov.w	r3, #768	; 0x300
 800108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001098:	2309      	movs	r3, #9
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	4815      	ldr	r0, [pc, #84]	; (80010f8 <HAL_CAN_MspInit+0xcc>)
 80010a4:	f003 fc9c 	bl	80049e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	2013      	movs	r0, #19
 80010ae:	f003 f85e 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80010b2:	2013      	movs	r0, #19
 80010b4:	f003 f877 	bl	80041a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2014      	movs	r0, #20
 80010be:	f003 f856 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010c2:	2014      	movs	r0, #20
 80010c4:	f003 f86f 	bl	80041a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2015      	movs	r0, #21
 80010ce:	f003 f84e 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80010d2:	2015      	movs	r0, #21
 80010d4:	f003 f867 	bl	80041a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2016      	movs	r0, #22
 80010de:	f003 f846 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80010e2:	2016      	movs	r0, #22
 80010e4:	f003 f85f 	bl	80041a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40006400 	.word	0x40006400
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020400 	.word	0x40020400

080010fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110c:	d10e      	bne.n	800112c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <HAL_TIM_Base_MspInit+0x64>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <HAL_TIM_Base_MspInit+0x64>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_TIM_Base_MspInit+0x64>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800112a:	e012      	b.n	8001152 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10d      	bne.n	8001152 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_TIM_Base_MspInit+0x64>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_TIM_Base_MspInit+0x64>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_TIM_Base_MspInit+0x64>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40000400 	.word	0x40000400

08001168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001188:	d11f      	bne.n	80011ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b31      	ldr	r3, [pc, #196]	; (8001254 <HAL_TIM_MspPostInit+0xec>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a30      	ldr	r2, [pc, #192]	; (8001254 <HAL_TIM_MspPostInit+0xec>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <HAL_TIM_MspPostInit+0xec>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80011a6:	f248 0302 	movw	r3, #32770	; 0x8002
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011b8:	2301      	movs	r3, #1
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4825      	ldr	r0, [pc, #148]	; (8001258 <HAL_TIM_MspPostInit+0xf0>)
 80011c4:	f003 fc0c 	bl	80049e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011c8:	e040      	b.n	800124c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <HAL_TIM_MspPostInit+0xf4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d13b      	bne.n	800124c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <HAL_TIM_MspPostInit+0xec>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <HAL_TIM_MspPostInit+0xec>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_TIM_MspPostInit+0xec>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_TIM_MspPostInit+0xec>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	4a16      	ldr	r2, [pc, #88]	; (8001254 <HAL_TIM_MspPostInit+0xec>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_TIM_MspPostInit+0xec>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800120c:	23c0      	movs	r3, #192	; 0xc0
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800121c:	2302      	movs	r3, #2
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	480c      	ldr	r0, [pc, #48]	; (8001258 <HAL_TIM_MspPostInit+0xf0>)
 8001228:	f003 fbda 	bl	80049e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800122c:	2303      	movs	r3, #3
 800122e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <HAL_TIM_MspPostInit+0xf8>)
 8001248:	f003 fbca 	bl	80049e0 <HAL_GPIO_Init>
}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000
 800125c:	40000400 	.word	0x40000400
 8001260:	40020400 	.word	0x40020400

08001264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a97      	ldr	r2, [pc, #604]	; (80014e0 <HAL_UART_MspInit+0x27c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	f040 8092 	bne.w	80013ac <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	4b95      	ldr	r3, [pc, #596]	; (80014e4 <HAL_UART_MspInit+0x280>)
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	4a94      	ldr	r2, [pc, #592]	; (80014e4 <HAL_UART_MspInit+0x280>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6453      	str	r3, [r2, #68]	; 0x44
 8001298:	4b92      	ldr	r3, [pc, #584]	; (80014e4 <HAL_UART_MspInit+0x280>)
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	4b8e      	ldr	r3, [pc, #568]	; (80014e4 <HAL_UART_MspInit+0x280>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4a8d      	ldr	r2, [pc, #564]	; (80014e4 <HAL_UART_MspInit+0x280>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
 80012b4:	4b8b      	ldr	r3, [pc, #556]	; (80014e4 <HAL_UART_MspInit+0x280>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012d2:	2307      	movs	r3, #7
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	4882      	ldr	r0, [pc, #520]	; (80014e8 <HAL_UART_MspInit+0x284>)
 80012de:	f003 fb7f 	bl	80049e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80012e2:	4b82      	ldr	r3, [pc, #520]	; (80014ec <HAL_UART_MspInit+0x288>)
 80012e4:	4a82      	ldr	r2, [pc, #520]	; (80014f0 <HAL_UART_MspInit+0x28c>)
 80012e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012e8:	4b80      	ldr	r3, [pc, #512]	; (80014ec <HAL_UART_MspInit+0x288>)
 80012ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f0:	4b7e      	ldr	r3, [pc, #504]	; (80014ec <HAL_UART_MspInit+0x288>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f6:	4b7d      	ldr	r3, [pc, #500]	; (80014ec <HAL_UART_MspInit+0x288>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012fc:	4b7b      	ldr	r3, [pc, #492]	; (80014ec <HAL_UART_MspInit+0x288>)
 80012fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001302:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001304:	4b79      	ldr	r3, [pc, #484]	; (80014ec <HAL_UART_MspInit+0x288>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800130a:	4b78      	ldr	r3, [pc, #480]	; (80014ec <HAL_UART_MspInit+0x288>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001310:	4b76      	ldr	r3, [pc, #472]	; (80014ec <HAL_UART_MspInit+0x288>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001316:	4b75      	ldr	r3, [pc, #468]	; (80014ec <HAL_UART_MspInit+0x288>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131c:	4b73      	ldr	r3, [pc, #460]	; (80014ec <HAL_UART_MspInit+0x288>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001322:	4872      	ldr	r0, [pc, #456]	; (80014ec <HAL_UART_MspInit+0x288>)
 8001324:	f002 ff5a 	bl	80041dc <HAL_DMA_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800132e:	f7ff fe4f 	bl	8000fd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a6d      	ldr	r2, [pc, #436]	; (80014ec <HAL_UART_MspInit+0x288>)
 8001336:	639a      	str	r2, [r3, #56]	; 0x38
 8001338:	4a6c      	ldr	r2, [pc, #432]	; (80014ec <HAL_UART_MspInit+0x288>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800133e:	4b6d      	ldr	r3, [pc, #436]	; (80014f4 <HAL_UART_MspInit+0x290>)
 8001340:	4a6d      	ldr	r2, [pc, #436]	; (80014f8 <HAL_UART_MspInit+0x294>)
 8001342:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001344:	4b6b      	ldr	r3, [pc, #428]	; (80014f4 <HAL_UART_MspInit+0x290>)
 8001346:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800134a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800134c:	4b69      	ldr	r3, [pc, #420]	; (80014f4 <HAL_UART_MspInit+0x290>)
 800134e:	2240      	movs	r2, #64	; 0x40
 8001350:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001352:	4b68      	ldr	r3, [pc, #416]	; (80014f4 <HAL_UART_MspInit+0x290>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001358:	4b66      	ldr	r3, [pc, #408]	; (80014f4 <HAL_UART_MspInit+0x290>)
 800135a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800135e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001360:	4b64      	ldr	r3, [pc, #400]	; (80014f4 <HAL_UART_MspInit+0x290>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001366:	4b63      	ldr	r3, [pc, #396]	; (80014f4 <HAL_UART_MspInit+0x290>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800136c:	4b61      	ldr	r3, [pc, #388]	; (80014f4 <HAL_UART_MspInit+0x290>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001372:	4b60      	ldr	r3, [pc, #384]	; (80014f4 <HAL_UART_MspInit+0x290>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001378:	4b5e      	ldr	r3, [pc, #376]	; (80014f4 <HAL_UART_MspInit+0x290>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800137e:	485d      	ldr	r0, [pc, #372]	; (80014f4 <HAL_UART_MspInit+0x290>)
 8001380:	f002 ff2c 	bl	80041dc <HAL_DMA_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800138a:	f7ff fe21 	bl	8000fd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a58      	ldr	r2, [pc, #352]	; (80014f4 <HAL_UART_MspInit+0x290>)
 8001392:	635a      	str	r2, [r3, #52]	; 0x34
 8001394:	4a57      	ldr	r2, [pc, #348]	; (80014f4 <HAL_UART_MspInit+0x290>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2025      	movs	r0, #37	; 0x25
 80013a0:	f002 fee5 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013a4:	2025      	movs	r0, #37	; 0x25
 80013a6:	f002 fefe 	bl	80041a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013aa:	e095      	b.n	80014d8 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a52      	ldr	r2, [pc, #328]	; (80014fc <HAL_UART_MspInit+0x298>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	f040 8090 	bne.w	80014d8 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	4b49      	ldr	r3, [pc, #292]	; (80014e4 <HAL_UART_MspInit+0x280>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	4a48      	ldr	r2, [pc, #288]	; (80014e4 <HAL_UART_MspInit+0x280>)
 80013c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c6:	6413      	str	r3, [r2, #64]	; 0x40
 80013c8:	4b46      	ldr	r3, [pc, #280]	; (80014e4 <HAL_UART_MspInit+0x280>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	4b42      	ldr	r3, [pc, #264]	; (80014e4 <HAL_UART_MspInit+0x280>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a41      	ldr	r2, [pc, #260]	; (80014e4 <HAL_UART_MspInit+0x280>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <HAL_UART_MspInit+0x280>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013f0:	230c      	movs	r3, #12
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001400:	2307      	movs	r3, #7
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	4837      	ldr	r0, [pc, #220]	; (80014e8 <HAL_UART_MspInit+0x284>)
 800140c:	f003 fae8 	bl	80049e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001410:	4b3b      	ldr	r3, [pc, #236]	; (8001500 <HAL_UART_MspInit+0x29c>)
 8001412:	4a3c      	ldr	r2, [pc, #240]	; (8001504 <HAL_UART_MspInit+0x2a0>)
 8001414:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001416:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <HAL_UART_MspInit+0x29c>)
 8001418:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800141c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <HAL_UART_MspInit+0x29c>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001424:	4b36      	ldr	r3, [pc, #216]	; (8001500 <HAL_UART_MspInit+0x29c>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	4b35      	ldr	r3, [pc, #212]	; (8001500 <HAL_UART_MspInit+0x29c>)
 800142c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001430:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001432:	4b33      	ldr	r3, [pc, #204]	; (8001500 <HAL_UART_MspInit+0x29c>)
 8001434:	2200      	movs	r2, #0
 8001436:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001438:	4b31      	ldr	r3, [pc, #196]	; (8001500 <HAL_UART_MspInit+0x29c>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_UART_MspInit+0x29c>)
 8001440:	2200      	movs	r2, #0
 8001442:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001444:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <HAL_UART_MspInit+0x29c>)
 8001446:	2200      	movs	r2, #0
 8001448:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800144a:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <HAL_UART_MspInit+0x29c>)
 800144c:	2200      	movs	r2, #0
 800144e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001450:	482b      	ldr	r0, [pc, #172]	; (8001500 <HAL_UART_MspInit+0x29c>)
 8001452:	f002 fec3 	bl	80041dc <HAL_DMA_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 800145c:	f7ff fdb8 	bl	8000fd0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a27      	ldr	r2, [pc, #156]	; (8001500 <HAL_UART_MspInit+0x29c>)
 8001464:	639a      	str	r2, [r3, #56]	; 0x38
 8001466:	4a26      	ldr	r2, [pc, #152]	; (8001500 <HAL_UART_MspInit+0x29c>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800146c:	4b26      	ldr	r3, [pc, #152]	; (8001508 <HAL_UART_MspInit+0x2a4>)
 800146e:	4a27      	ldr	r2, [pc, #156]	; (800150c <HAL_UART_MspInit+0x2a8>)
 8001470:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <HAL_UART_MspInit+0x2a4>)
 8001474:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001478:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_UART_MspInit+0x2a4>)
 800147c:	2240      	movs	r2, #64	; 0x40
 800147e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <HAL_UART_MspInit+0x2a4>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <HAL_UART_MspInit+0x2a4>)
 8001488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800148c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <HAL_UART_MspInit+0x2a4>)
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <HAL_UART_MspInit+0x2a4>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_UART_MspInit+0x2a4>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_UART_MspInit+0x2a4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_UART_MspInit+0x2a4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014ac:	4816      	ldr	r0, [pc, #88]	; (8001508 <HAL_UART_MspInit+0x2a4>)
 80014ae:	f002 fe95 	bl	80041dc <HAL_DMA_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0x258>
      Error_Handler();
 80014b8:	f7ff fd8a 	bl	8000fd0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <HAL_UART_MspInit+0x2a4>)
 80014c0:	635a      	str	r2, [r3, #52]	; 0x34
 80014c2:	4a11      	ldr	r2, [pc, #68]	; (8001508 <HAL_UART_MspInit+0x2a4>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	2026      	movs	r0, #38	; 0x26
 80014ce:	f002 fe4e 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014d2:	2026      	movs	r0, #38	; 0x26
 80014d4:	f002 fe67 	bl	80041a6 <HAL_NVIC_EnableIRQ>
}
 80014d8:	bf00      	nop
 80014da:	3730      	adds	r7, #48	; 0x30
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40011000 	.word	0x40011000
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	2000076c 	.word	0x2000076c
 80014f0:	40026440 	.word	0x40026440
 80014f4:	2000070c 	.word	0x2000070c
 80014f8:	400264b8 	.word	0x400264b8
 80014fc:	40004400 	.word	0x40004400
 8001500:	20000664 	.word	0x20000664
 8001504:	40026088 	.word	0x40026088
 8001508:	200007cc 	.word	0x200007cc
 800150c:	400260a0 	.word	0x400260a0

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <NMI_Handler+0x4>

08001516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <HardFault_Handler+0x4>

0800151c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <MemManage_Handler+0x4>

08001522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <BusFault_Handler+0x4>

08001528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <UsageFault_Handler+0x4>

0800152e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155c:	f001 fe4e 	bl	80031fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <SysTick_Handler+0x18>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a02      	ldr	r2, [pc, #8]	; (8001570 <SysTick_Handler+0x18>)
 8001568:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200000b0 	.word	0x200000b0

08001574 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <DMA1_Stream5_IRQHandler+0x10>)
 800157a:	f002 ffc7 	bl	800450c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000664 	.word	0x20000664

08001588 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <DMA1_Stream6_IRQHandler+0x10>)
 800158e:	f002 ffbd 	bl	800450c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200007cc 	.word	0x200007cc

0800159c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
  HAL_CAN_TxMailboxCompleteCallback();
 80015a0:	f7ff fcf1 	bl	8000f86 <HAL_CAN_TxMailboxCompleteCallback>
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <CAN1_TX_IRQHandler+0x14>)
 80015a6:	f002 faf6 	bl	8003b96 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200008fc 	.word	0x200008fc

080015b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <CAN1_RX0_IRQHandler+0x10>)
 80015ba:	f002 faec 	bl	8003b96 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200008fc 	.word	0x200008fc

080015c8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <CAN1_RX1_IRQHandler+0x10>)
 80015ce:	f002 fae2 	bl	8003b96 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200008fc 	.word	0x200008fc

080015dc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <CAN1_SCE_IRQHandler+0x10>)
 80015e2:	f002 fad8 	bl	8003b96 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200008fc 	.word	0x200008fc

080015f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <USART1_IRQHandler+0x10>)
 80015f6:	f005 f8a5 	bl	8006744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000082c 	.word	0x2000082c

08001604 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <USART2_IRQHandler+0x10>)
 800160a:	f005 f89b 	bl	8006744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200008b8 	.word	0x200008b8

08001618 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA2_Stream2_IRQHandler+0x10>)
 800161e:	f002 ff75 	bl	800450c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000076c 	.word	0x2000076c

0800162c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA2_Stream7_IRQHandler+0x10>)
 8001632:	f002 ff6b 	bl	800450c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000070c 	.word	0x2000070c

08001640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800169c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001668:	480d      	ldr	r0, [pc, #52]	; (80016a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800166a:	490e      	ldr	r1, [pc, #56]	; (80016a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800166c:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001680:	4c0b      	ldr	r4, [pc, #44]	; (80016b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800168e:	f7ff ffd7 	bl	8001640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001692:	f006 f887 	bl	80077a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001696:	f7ff f8d1 	bl	800083c <main>
  bx  lr    
 800169a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800169c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80016a8:	08007844 	.word	0x08007844
  ldr r2, =_sbss
 80016ac:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80016b0:	20000934 	.word	0x20000934

080016b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC_IRQHandler>
	...

080016b8 <D_CAN_Init>:

#include "../Inc/CAN.h"
#include <stdlib.h>
#include "stm32f4xx_hal.h"

void D_CAN_Init(void){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
	HAL_CAN_Start(&hcan1);
 80016be:	4818      	ldr	r0, [pc, #96]	; (8001720 <D_CAN_Init+0x68>)
 80016c0:	f001 ff98 	bl	80035f4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80016c4:	2102      	movs	r1, #2
 80016c6:	4816      	ldr	r0, [pc, #88]	; (8001720 <D_CAN_Init+0x68>)
 80016c8:	f002 fa3f 	bl	8003b4a <HAL_CAN_ActivateNotification>
	for(int i=0; i<8; i++){
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	e01d      	b.n	800170e <D_CAN_Init+0x56>
		TxData[i] = 0;
 80016d2:	4a14      	ldr	r2, [pc, #80]	; (8001724 <D_CAN_Init+0x6c>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
		RxData[i] = 0;
 80016dc:	4a12      	ldr	r2, [pc, #72]	; (8001728 <D_CAN_Init+0x70>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<5; j++){
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	e00a      	b.n	8001702 <D_CAN_Init+0x4a>
			AllData[j][i] = 0;
 80016ec:	4a0f      	ldr	r2, [pc, #60]	; (800172c <D_CAN_Init+0x74>)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	441a      	add	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<5; j++){
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b04      	cmp	r3, #4
 8001706:	ddf1      	ble.n	80016ec <D_CAN_Init+0x34>
	for(int i=0; i<8; i++){
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3301      	adds	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b07      	cmp	r3, #7
 8001712:	ddde      	ble.n	80016d2 <D_CAN_Init+0x1a>
		}
	}
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200008fc 	.word	0x200008fc
 8001724:	2000061c 	.word	0x2000061c
 8001728:	20000628 	.word	0x20000628
 800172c:	200005f4 	.word	0x200005f4

08001730 <D_CAN_Transmit>:

int D_CAN_Transmit(uint16_t ownAddress, const uint8_t *data, uint16_t size){
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	80fb      	strh	r3, [r7, #6]
 800173c:	4613      	mov	r3, r2
 800173e:	80bb      	strh	r3, [r7, #4]
	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0){
 8001740:	4823      	ldr	r0, [pc, #140]	; (80017d0 <D_CAN_Transmit+0xa0>)
 8001742:	f002 f8bb 	bl	80038bc <HAL_CAN_GetTxMailboxesFreeLevel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d02d      	beq.n	80017a8 <D_CAN_Transmit+0x78>
		TxHeader.StdId = ownAddress;
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <D_CAN_Transmit+0xa4>)
 8001750:	6013      	str	r3, [r2, #0]
		TxHeader.RTR = CAN_RTR_DATA;
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <D_CAN_Transmit+0xa4>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
		TxHeader.IDE = CAN_ID_STD;
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <D_CAN_Transmit+0xa4>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
		TxHeader.DLC = size;
 800175e:	88bb      	ldrh	r3, [r7, #4]
 8001760:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <D_CAN_Transmit+0xa4>)
 8001762:	6113      	str	r3, [r2, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <D_CAN_Transmit+0xa4>)
 8001766:	2200      	movs	r2, #0
 8001768:	751a      	strb	r2, [r3, #20]
		for(int i=0; i<size; i++){
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e00b      	b.n	8001788 <D_CAN_Transmit+0x58>
			TxData[i] = data[i];
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	4413      	add	r3, r2
 8001776:	7819      	ldrb	r1, [r3, #0]
 8001778:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <D_CAN_Transmit+0xa8>)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4413      	add	r3, r2
 800177e:	460a      	mov	r2, r1
 8001780:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<size; i++){
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3301      	adds	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	88bb      	ldrh	r3, [r7, #4]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	dbef      	blt.n	8001770 <D_CAN_Transmit+0x40>
		}
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <D_CAN_Transmit+0xac>)
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <D_CAN_Transmit+0xa8>)
 8001794:	490f      	ldr	r1, [pc, #60]	; (80017d4 <D_CAN_Transmit+0xa4>)
 8001796:	480e      	ldr	r0, [pc, #56]	; (80017d0 <D_CAN_Transmit+0xa0>)
 8001798:	f001 ff70 	bl	800367c <HAL_CAN_AddTxMessage>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d011      	beq.n	80017c6 <D_CAN_Transmit+0x96>
			return -2;
 80017a2:	f06f 0301 	mvn.w	r3, #1
 80017a6:	e00f      	b.n	80017c8 <D_CAN_Transmit+0x98>
		}
	}else{
		HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX0);
 80017a8:	2101      	movs	r1, #1
 80017aa:	4809      	ldr	r0, [pc, #36]	; (80017d0 <D_CAN_Transmit+0xa0>)
 80017ac:	f002 f841 	bl	8003832 <HAL_CAN_AbortTxRequest>
		HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX1);
 80017b0:	2102      	movs	r1, #2
 80017b2:	4807      	ldr	r0, [pc, #28]	; (80017d0 <D_CAN_Transmit+0xa0>)
 80017b4:	f002 f83d 	bl	8003832 <HAL_CAN_AbortTxRequest>
		HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX2);
 80017b8:	2104      	movs	r1, #4
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <D_CAN_Transmit+0xa0>)
 80017bc:	f002 f839 	bl	8003832 <HAL_CAN_AbortTxRequest>
		return -1;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017c4:	e000      	b.n	80017c8 <D_CAN_Transmit+0x98>
	}
	return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200008fc 	.word	0x200008fc
 80017d4:	20000630 	.word	0x20000630
 80017d8:	2000061c 	.word	0x2000061c
 80017dc:	20000624 	.word	0x20000624

080017e0 <D_CAN_SetReceiveAddressAll>:
	}

	return 0;
}

int D_CAN_SetReceiveAddressAll(void){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	sFilterConfig.FilterBank = 0;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <D_CAN_SetReceiveAddressAll+0x5c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <D_CAN_SetReceiveAddressAll+0x5c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <D_CAN_SetReceiveAddressAll+0x5c>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <D_CAN_SetReceiveAddressAll+0x5c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <D_CAN_SetReceiveAddressAll+0x5c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <D_CAN_SetReceiveAddressAll+0x5c>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <D_CAN_SetReceiveAddressAll+0x5c>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <D_CAN_SetReceiveAddressAll+0x5c>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <D_CAN_SetReceiveAddressAll+0x5c>)
 8001816:	2201      	movs	r2, #1
 8001818:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <D_CAN_SetReceiveAddressAll+0x5c>)
 800181c:	220e      	movs	r2, #14
 800181e:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8001820:	4906      	ldr	r1, [pc, #24]	; (800183c <D_CAN_SetReceiveAddressAll+0x5c>)
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <D_CAN_SetReceiveAddressAll+0x60>)
 8001824:	f001 fe06 	bl	8003434 <HAL_CAN_ConfigFilter>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <D_CAN_SetReceiveAddressAll+0x54>
		return -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001832:	e000      	b.n	8001836 <D_CAN_SetReceiveAddressAll+0x56>
	}

	return 0;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200005cc 	.word	0x200005cc
 8001840:	200008fc 	.word	0x200008fc

08001844 <D_CAN_Receive>:

int D_CAN_Receive(uint16_t SenderAddress, uint8_t *data, uint16_t size){
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	80fb      	strh	r3, [r7, #6]
 8001850:	4613      	mov	r3, r2
 8001852:	80bb      	strh	r3, [r7, #4]
	int setIdx = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
	switch(SenderAddress){
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d01b      	beq.n	8001898 <D_CAN_Receive+0x54>
 8001860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001864:	dc1e      	bgt.n	80018a4 <D_CAN_Receive+0x60>
 8001866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800186a:	d012      	beq.n	8001892 <D_CAN_Receive+0x4e>
 800186c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001870:	dc18      	bgt.n	80018a4 <D_CAN_Receive+0x60>
 8001872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001876:	d009      	beq.n	800188c <D_CAN_Receive+0x48>
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	dc12      	bgt.n	80018a4 <D_CAN_Receive+0x60>
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00d      	beq.n	800189e <D_CAN_Receive+0x5a>
 8001882:	2b09      	cmp	r3, #9
 8001884:	d10e      	bne.n	80018a4 <D_CAN_Receive+0x60>
	case CAN_MECH1_ADDRESS:
		setIdx = CAN_MECH1;
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
		break;
 800188a:	e00e      	b.n	80018aa <D_CAN_Receive+0x66>
	case CAN_ST2_ADDRESS:
		setIdx = CAN_ST2;
 800188c:	2301      	movs	r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
		break;
 8001890:	e00b      	b.n	80018aa <D_CAN_Receive+0x66>
	case CAN_ST3_ADDRESS:
		setIdx = CAN_ST3;
 8001892:	2302      	movs	r3, #2
 8001894:	60bb      	str	r3, [r7, #8]
		break;
 8001896:	e008      	b.n	80018aa <D_CAN_Receive+0x66>
	case CAN_ST4_ADDRESS:
		setIdx = CAN_ST4;
 8001898:	2303      	movs	r3, #3
 800189a:	60bb      	str	r3, [r7, #8]
		break;
 800189c:	e005      	b.n	80018aa <D_CAN_Receive+0x66>
	case CAN_MAIN_ADDRESS:
		setIdx = CAN_MAIN;
 800189e:	2304      	movs	r3, #4
 80018a0:	60bb      	str	r3, [r7, #8]
		break;
 80018a2:	e002      	b.n	80018aa <D_CAN_Receive+0x66>
	default:
		setIdx = CAN_MAIN;
 80018a4:	2304      	movs	r3, #4
 80018a6:	60bb      	str	r3, [r7, #8]
		break;
 80018a8:	bf00      	nop
	}
	//test
	for(int i=0; i<size; i++){
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e00d      	b.n	80018cc <D_CAN_Receive+0x88>
		data[i] = AllData[SenderAddress][i];
 80018b0:	88fa      	ldrh	r2, [r7, #6]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6839      	ldr	r1, [r7, #0]
 80018b6:	440b      	add	r3, r1
 80018b8:	490a      	ldr	r1, [pc, #40]	; (80018e4 <D_CAN_Receive+0xa0>)
 80018ba:	00d2      	lsls	r2, r2, #3
 80018bc:	4411      	add	r1, r2
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	440a      	add	r2, r1
 80018c2:	7812      	ldrb	r2, [r2, #0]
 80018c4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++){
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3301      	adds	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	88bb      	ldrh	r3, [r7, #4]
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbed      	blt.n	80018b0 <D_CAN_Receive+0x6c>
		data[i] = AllData[setIdx][i];
	}
	*/


	return 0;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	200005f4 	.word	0x200005f4

080018e8 <D_CAN_ReceiveCallBack>:

void D_CAN_ReceiveCallBack(CAN_HandleTypeDef *hcan){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08e      	sub	sp, #56	; 0x38
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 80018f0:	f107 020c 	add.w	r2, r7, #12
 80018f4:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <D_CAN_ReceiveCallBack+0xd8>)
 80018f6:	2100      	movs	r1, #0
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f002 f814 	bl	8003926 <HAL_CAN_GetRxMessage>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d155      	bne.n	80019b0 <D_CAN_ReceiveCallBack+0xc8>
		uint32_t id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <D_CAN_ReceiveCallBack+0x26>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	e000      	b.n	8001910 <D_CAN_ReceiveCallBack+0x28>
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t size = RxHeader.DLC;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
		int setIdx = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
		switch(id){
 800191a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800191c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001920:	d022      	beq.n	8001968 <D_CAN_ReceiveCallBack+0x80>
 8001922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001928:	d824      	bhi.n	8001974 <D_CAN_ReceiveCallBack+0x8c>
 800192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001930:	d017      	beq.n	8001962 <D_CAN_ReceiveCallBack+0x7a>
 8001932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001938:	d81c      	bhi.n	8001974 <D_CAN_ReceiveCallBack+0x8c>
 800193a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001940:	d00c      	beq.n	800195c <D_CAN_ReceiveCallBack+0x74>
 8001942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001948:	d814      	bhi.n	8001974 <D_CAN_ReceiveCallBack+0x8c>
 800194a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00e      	beq.n	800196e <D_CAN_ReceiveCallBack+0x86>
 8001950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001952:	2b09      	cmp	r3, #9
 8001954:	d10e      	bne.n	8001974 <D_CAN_ReceiveCallBack+0x8c>
		case CAN_MECH1_ADDRESS:
			setIdx = CAN_MECH1;
 8001956:	2300      	movs	r3, #0
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 800195a:	e00e      	b.n	800197a <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST2_ADDRESS:
			setIdx = CAN_ST2;
 800195c:	2301      	movs	r3, #1
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001960:	e00b      	b.n	800197a <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST3_ADDRESS:
			setIdx = CAN_ST3;
 8001962:	2302      	movs	r3, #2
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001966:	e008      	b.n	800197a <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST4_ADDRESS:
			setIdx = CAN_ST4;
 8001968:	2303      	movs	r3, #3
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 800196c:	e005      	b.n	800197a <D_CAN_ReceiveCallBack+0x92>
		case CAN_MAIN_ADDRESS:
			setIdx = CAN_MAIN;
 800196e:	2304      	movs	r3, #4
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001972:	e002      	b.n	800197a <D_CAN_ReceiveCallBack+0x92>
		default:
			setIdx = CAN_MAIN;
 8001974:	2304      	movs	r3, #4
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001978:	bf00      	nop
		}
		//test
		for(int i=0; i<size; i++){
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
 800197e:	e00b      	b.n	8001998 <D_CAN_ReceiveCallBack+0xb0>
			AllData[0][i] = RxData[i];
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <D_CAN_ReceiveCallBack+0xd8>)
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	4413      	add	r3, r2
 8001986:	7819      	ldrb	r1, [r3, #0]
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <D_CAN_ReceiveCallBack+0xdc>)
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	4413      	add	r3, r2
 800198e:	460a      	mov	r2, r1
 8001990:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<size; i++){
 8001992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001994:	3301      	adds	r3, #1
 8001996:	637b      	str	r3, [r7, #52]	; 0x34
 8001998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800199c:	429a      	cmp	r2, r3
 800199e:	d8ef      	bhi.n	8001980 <D_CAN_ReceiveCallBack+0x98>
		}
		AllData[1][0] = id;
 80019a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <D_CAN_ReceiveCallBack+0xdc>)
 80019a6:	721a      	strb	r2, [r3, #8]
		AllData[1][1] = 254;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <D_CAN_ReceiveCallBack+0xdc>)
 80019aa:	22fe      	movs	r2, #254	; 0xfe
 80019ac:	725a      	strb	r2, [r3, #9]
		}
		*/
	}else{
		AllData[1][1] = 255;
	}
}
 80019ae:	e002      	b.n	80019b6 <D_CAN_ReceiveCallBack+0xce>
		AllData[1][1] = 255;
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <D_CAN_ReceiveCallBack+0xdc>)
 80019b2:	22ff      	movs	r2, #255	; 0xff
 80019b4:	725a      	strb	r2, [r3, #9]
}
 80019b6:	bf00      	nop
 80019b8:	3738      	adds	r7, #56	; 0x38
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000628 	.word	0x20000628
 80019c4:	200005f4 	.word	0x200005f4

080019c8 <D_Slider_SystickUpdate>:
//static volatile uint32_t SndErrTime = 0;
//static volatile uint32_t RcvErrTime = 0;

//static volatile int SndCount = 0;

void D_Slider_SystickUpdate(){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
	static uint32_t sndTime = 0;
	static uint32_t rcvTime = 0;

	static uint8_t count = 0;

	int deltaT = G_System_counter - recent_System_counter;
 80019ce:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <D_Slider_SystickUpdate+0xb4>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <D_Slider_SystickUpdate+0xb8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	607b      	str	r3, [r7, #4]
	sndTime += deltaT;
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <D_Slider_SystickUpdate+0xbc>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a28      	ldr	r2, [pc, #160]	; (8001a84 <D_Slider_SystickUpdate+0xbc>)
 80019e4:	6013      	str	r3, [r2, #0]
	rcvTime += deltaT;
 80019e6:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <D_Slider_SystickUpdate+0xc0>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	4a26      	ldr	r2, [pc, #152]	; (8001a88 <D_Slider_SystickUpdate+0xc0>)
 80019f0:	6013      	str	r3, [r2, #0]
	//SndErrTime += deltaT;
	//RcvErrTime += deltaT;
	recent_System_counter = G_System_counter;
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <D_Slider_SystickUpdate+0xb4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <D_Slider_SystickUpdate+0xb8>)
 80019f8:	6013      	str	r3, [r2, #0]

	if(!_firstSend){
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <D_Slider_SystickUpdate+0xc4>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	f083 0301 	eor.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <D_Slider_SystickUpdate+0x4c>
		_firstSend = true;
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <D_Slider_SystickUpdate+0xc4>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
		D_Slider_Start();
 8001a0e:	f000 f849 	bl	8001aa4 <D_Slider_Start>
		//D_Slider_InitColorData();
		return;
 8001a12:	e030      	b.n	8001a76 <D_Slider_SystickUpdate+0xae>
	}
	if(sndTime >= SLIDER_SEND_INTERVAL){
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <D_Slider_SystickUpdate+0xbc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d91f      	bls.n	8001a5c <D_Slider_SystickUpdate+0x94>
		sndTime = 0;
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <D_Slider_SystickUpdate+0xbc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
		count++;
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <D_Slider_SystickUpdate+0xc8>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <D_Slider_SystickUpdate+0xc8>)
 8001a2c:	701a      	strb	r2, [r3, #0]
		if(count == 1){
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <D_Slider_SystickUpdate+0xc8>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <D_Slider_SystickUpdate+0x7e>
			D_Slider_Send((uint8_t*)SendData, COLORSEND_LENGTH + AdditionalPacket);
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <D_Slider_SystickUpdate+0xcc>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	330a      	adds	r3, #10
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4816      	ldr	r0, [pc, #88]	; (8001a98 <D_Slider_SystickUpdate+0xd0>)
 8001a40:	f001 f8fa 	bl	8002c38 <D_Slider_Send>
 8001a44:	e003      	b.n	8001a4e <D_Slider_SystickUpdate+0x86>
		}else{
			D_Slider_Send((uint8_t*)SensorGetSendData, SENSORGET_LENGTH);
 8001a46:	2106      	movs	r1, #6
 8001a48:	4814      	ldr	r0, [pc, #80]	; (8001a9c <D_Slider_SystickUpdate+0xd4>)
 8001a4a:	f001 f8f5 	bl	8002c38 <D_Slider_Send>
		}
		if(count >= 10) count = 0;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <D_Slider_SystickUpdate+0xc8>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b09      	cmp	r3, #9
 8001a54:	d902      	bls.n	8001a5c <D_Slider_SystickUpdate+0x94>
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <D_Slider_SystickUpdate+0xc8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
	}

	if(rcvTime >= SLIDER_RECEIVE_INTERVAL){
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <D_Slider_SystickUpdate+0xc0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d906      	bls.n	8001a72 <D_Slider_SystickUpdate+0xaa>
		rcvTime = 0;
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <D_Slider_SystickUpdate+0xc0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
		D_Slider_Receive((uint8_t*)RecvData, 10);
 8001a6a:	210a      	movs	r1, #10
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <D_Slider_SystickUpdate+0xd8>)
 8001a6e:	f001 f90b 	bl	8002c88 <D_Slider_Receive>
		//D_Slider_Receive((uint8_t*)RecvData, 10);
		RcvErrTime = 0;
	}
	*/

	D_Slider_LightingUpdate();
 8001a72:	f000 f8c7 	bl	8001c04 <D_Slider_LightingUpdate>
	if(receiveFaultCount >= 30){
		D_Slider_Start();
		receiveFaultCount = 0;
	}
	*/
}
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200000b0 	.word	0x200000b0
 8001a80:	2000014c 	.word	0x2000014c
 8001a84:	20000150 	.word	0x20000150
 8001a88:	20000154 	.word	0x20000154
 8001a8c:	20000141 	.word	0x20000141
 8001a90:	20000158 	.word	0x20000158
 8001a94:	200000f4 	.word	0x200000f4
 8001a98:	200000b4 	.word	0x200000b4
 8001a9c:	200000d4 	.word	0x200000d4
 8001aa0:	200000f8 	.word	0x200000f8

08001aa4 <D_Slider_Start>:

void D_Slider_Start(void){
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
	SensorGetSendData[0] = FIRSTBYTE;
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <D_Slider_Start+0x5c>)
 8001aac:	22e0      	movs	r2, #224	; 0xe0
 8001aae:	701a      	strb	r2, [r3, #0]
	SensorGetSendData[1] = ADDRESS;
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <D_Slider_Start+0x5c>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	705a      	strb	r2, [r3, #1]
	SensorGetSendData[2] = SENSORGET_SEQNUM;
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <D_Slider_Start+0x5c>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	709a      	strb	r2, [r3, #2]
	SensorGetSendData[3] = SENSORGET_DATANUM;
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <D_Slider_Start+0x5c>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	70da      	strb	r2, [r3, #3]
	SensorGetSendData[4] = SENSORGET_CMD;
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <D_Slider_Start+0x5c>)
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	711a      	strb	r2, [r3, #4]
	uint8_t dataSum = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 8001acc:	2301      	movs	r3, #1
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	e009      	b.n	8001ae6 <D_Slider_Start+0x42>
		dataSum += SensorGetSendData[i];
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <D_Slider_Start+0x5c>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	4413      	add	r3, r2
 8001ade:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	ddf2      	ble.n	8001ad2 <D_Slider_Start+0x2e>
	}
	SensorGetSendData[SENSORGET_LENGTH-1] = (uint8_t)dataSum;
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <D_Slider_Start+0x5c>)
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	7153      	strb	r3, [r2, #5]
	data[3] = 0xfe;
	had_completed_tx = true;
	had_completed_rx = true;
	D_Slider_Send((uint8_t*)data, 4);
	*/
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	200000d4 	.word	0x200000d4

08001b04 <D_Slider_SetLightingR>:

void D_Slider_SetLightingR(SliderLightingMode rightType, int pocketR){
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
	//LightingMode[0] = rightType;
	inPocket[0] = pocketR;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <D_Slider_SetLightingR+0x78>)
 8001b16:	701a      	strb	r2, [r3, #0]
	if(rightType == SL_POCKET_IN){
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d124      	bne.n	8001b68 <D_Slider_SetLightingR+0x64>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d825      	bhi.n	8001b70 <D_Slider_SetLightingR+0x6c>
 8001b24:	a201      	add	r2, pc, #4	; (adr r2, 8001b2c <D_Slider_SetLightingR+0x28>)
 8001b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2a:	bf00      	nop
 8001b2c:	08001b41 	.word	0x08001b41
 8001b30:	08001b49 	.word	0x08001b49
 8001b34:	08001b51 	.word	0x08001b51
 8001b38:	08001b59 	.word	0x08001b59
 8001b3c:	08001b61 	.word	0x08001b61
		switch(pocketR){
		case 0:
			LightingMode[0] = SL_POCKET_IN_OUT;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <D_Slider_SetLightingR+0x7c>)
 8001b42:	2205      	movs	r2, #5
 8001b44:	701a      	strb	r2, [r3, #0]
			break;
 8001b46:	e013      	b.n	8001b70 <D_Slider_SetLightingR+0x6c>
		case 1:
			LightingMode[0] = SL_POCKET_IN_DIA;
 8001b48:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <D_Slider_SetLightingR+0x7c>)
 8001b4a:	2206      	movs	r2, #6
 8001b4c:	701a      	strb	r2, [r3, #0]
			break;
 8001b4e:	e00f      	b.n	8001b70 <D_Slider_SetLightingR+0x6c>
		case 2:
			LightingMode[0] = SL_POCKET_IN_UP;
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <D_Slider_SetLightingR+0x7c>)
 8001b52:	2204      	movs	r2, #4
 8001b54:	701a      	strb	r2, [r3, #0]
			break;
 8001b56:	e00b      	b.n	8001b70 <D_Slider_SetLightingR+0x6c>
		case 3:
			LightingMode[0] = SL_POCKET_IN_DIA;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <D_Slider_SetLightingR+0x7c>)
 8001b5a:	2206      	movs	r2, #6
 8001b5c:	701a      	strb	r2, [r3, #0]
			break;
 8001b5e:	e007      	b.n	8001b70 <D_Slider_SetLightingR+0x6c>
		case 4:
			LightingMode[0] = SL_POCKET_IN_OUT;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <D_Slider_SetLightingR+0x7c>)
 8001b62:	2205      	movs	r2, #5
 8001b64:	701a      	strb	r2, [r3, #0]
			break;
 8001b66:	e003      	b.n	8001b70 <D_Slider_SetLightingR+0x6c>
		}
	}else{
		LightingMode[0] = rightType;
 8001b68:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <D_Slider_SetLightingR+0x7c>)
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	7013      	strb	r3, [r2, #0]
	}
}
 8001b6e:	e7ff      	b.n	8001b70 <D_Slider_SetLightingR+0x6c>
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	20000148 	.word	0x20000148
 8001b80:	20000144 	.word	0x20000144

08001b84 <D_Slider_SetLightingL>:

void D_Slider_SetLightingL(SliderLightingMode leftType, int pocketL){
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
	//LightingMode[1] = leftType;
	inPocket[1] = pocketL;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <D_Slider_SetLightingL+0x78>)
 8001b96:	705a      	strb	r2, [r3, #1]
	if(leftType == SL_POCKET_IN){
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d124      	bne.n	8001be8 <D_Slider_SetLightingL+0x64>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d825      	bhi.n	8001bf0 <D_Slider_SetLightingL+0x6c>
 8001ba4:	a201      	add	r2, pc, #4	; (adr r2, 8001bac <D_Slider_SetLightingL+0x28>)
 8001ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001baa:	bf00      	nop
 8001bac:	08001bc1 	.word	0x08001bc1
 8001bb0:	08001bc9 	.word	0x08001bc9
 8001bb4:	08001bd1 	.word	0x08001bd1
 8001bb8:	08001bd9 	.word	0x08001bd9
 8001bbc:	08001be1 	.word	0x08001be1
		switch(pocketL){
		case 0:
			LightingMode[1] = SL_POCKET_IN_OUT;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <D_Slider_SetLightingL+0x7c>)
 8001bc2:	2205      	movs	r2, #5
 8001bc4:	705a      	strb	r2, [r3, #1]
			break;
 8001bc6:	e013      	b.n	8001bf0 <D_Slider_SetLightingL+0x6c>
		case 1:
			LightingMode[1] = SL_POCKET_IN_DIA;
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <D_Slider_SetLightingL+0x7c>)
 8001bca:	2206      	movs	r2, #6
 8001bcc:	705a      	strb	r2, [r3, #1]
			break;
 8001bce:	e00f      	b.n	8001bf0 <D_Slider_SetLightingL+0x6c>
		case 2:
			LightingMode[1] = SL_POCKET_IN_UP;
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <D_Slider_SetLightingL+0x7c>)
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	705a      	strb	r2, [r3, #1]
			break;
 8001bd6:	e00b      	b.n	8001bf0 <D_Slider_SetLightingL+0x6c>
		case 3:
			LightingMode[1] = SL_POCKET_IN_DIA;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <D_Slider_SetLightingL+0x7c>)
 8001bda:	2206      	movs	r2, #6
 8001bdc:	705a      	strb	r2, [r3, #1]
			break;
 8001bde:	e007      	b.n	8001bf0 <D_Slider_SetLightingL+0x6c>
		case 4:
			LightingMode[1] = SL_POCKET_IN_OUT;
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <D_Slider_SetLightingL+0x7c>)
 8001be2:	2205      	movs	r2, #5
 8001be4:	705a      	strb	r2, [r3, #1]
			break;
 8001be6:	e003      	b.n	8001bf0 <D_Slider_SetLightingL+0x6c>
		}
	}else{
		LightingMode[1] = leftType;
 8001be8:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <D_Slider_SetLightingL+0x7c>)
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	7053      	strb	r3, [r2, #1]
	}
}
 8001bee:	e7ff      	b.n	8001bf0 <D_Slider_SetLightingL+0x6c>
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	20000148 	.word	0x20000148
 8001c00:	20000144 	.word	0x20000144

08001c04 <D_Slider_LightingUpdate>:

void D_Slider_LightingUpdate(void){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
	static bool _changeMode[2] = {false};
	static bool _animUpdate_1[2] = {false};
	static bool _animUpdate_2[2] = {false};
	static int counter1[2] = {0};

	int nowCount = G_System_counter;
 8001c0a:	4ba9      	ldr	r3, [pc, #676]	; (8001eb0 <D_Slider_LightingUpdate+0x2ac>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	607b      	str	r3, [r7, #4]

	for(int side = 0; side < 2; side++){
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
 8001c14:	f000 bf6f 	b.w	8002af6 <D_Slider_LightingUpdate+0xef2>
		updateCount[side] += nowCount - recentUpdateCount;
 8001c18:	4aa6      	ldr	r2, [pc, #664]	; (8001eb4 <D_Slider_LightingUpdate+0x2b0>)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c20:	4ba5      	ldr	r3, [pc, #660]	; (8001eb8 <D_Slider_LightingUpdate+0x2b4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	1acb      	subs	r3, r1, r3
 8001c28:	441a      	add	r2, r3
 8001c2a:	49a2      	ldr	r1, [pc, #648]	; (8001eb4 <D_Slider_LightingUpdate+0x2b0>)
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(LightingMode[side] != recentMode[side] || inPocket[side] != recentInPocket[side]){
 8001c32:	4aa2      	ldr	r2, [pc, #648]	; (8001ebc <D_Slider_LightingUpdate+0x2b8>)
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	4413      	add	r3, r2
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	49a1      	ldr	r1, [pc, #644]	; (8001ec0 <D_Slider_LightingUpdate+0x2bc>)
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	440b      	add	r3, r1
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d109      	bne.n	8001c5a <D_Slider_LightingUpdate+0x56>
 8001c46:	4a9f      	ldr	r2, [pc, #636]	; (8001ec4 <D_Slider_LightingUpdate+0x2c0>)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	4413      	add	r3, r2
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	499e      	ldr	r1, [pc, #632]	; (8001ec8 <D_Slider_LightingUpdate+0x2c4>)
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	440b      	add	r3, r1
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d013      	beq.n	8001c82 <D_Slider_LightingUpdate+0x7e>
			_changeMode[side] = true;
 8001c5a:	4a9c      	ldr	r2, [pc, #624]	; (8001ecc <D_Slider_LightingUpdate+0x2c8>)
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	4413      	add	r3, r2
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
			updateCount[side] = 0;
 8001c64:	4a93      	ldr	r2, [pc, #588]	; (8001eb4 <D_Slider_LightingUpdate+0x2b0>)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	2100      	movs	r1, #0
 8001c6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			_animUpdate_1[side] = false;
 8001c6e:	4a98      	ldr	r2, [pc, #608]	; (8001ed0 <D_Slider_LightingUpdate+0x2cc>)
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	4413      	add	r3, r2
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
			_animUpdate_2[side] = false;
 8001c78:	4a96      	ldr	r2, [pc, #600]	; (8001ed4 <D_Slider_LightingUpdate+0x2d0>)
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	4413      	add	r3, r2
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
		}
		recentMode[side] = LightingMode[side];
 8001c82:	4a8e      	ldr	r2, [pc, #568]	; (8001ebc <D_Slider_LightingUpdate+0x2b8>)
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	4413      	add	r3, r2
 8001c88:	7819      	ldrb	r1, [r3, #0]
 8001c8a:	4a8d      	ldr	r2, [pc, #564]	; (8001ec0 <D_Slider_LightingUpdate+0x2bc>)
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	4413      	add	r3, r2
 8001c90:	460a      	mov	r2, r1
 8001c92:	701a      	strb	r2, [r3, #0]
		recentInPocket[side] = inPocket[side];
 8001c94:	4a8b      	ldr	r2, [pc, #556]	; (8001ec4 <D_Slider_LightingUpdate+0x2c0>)
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	4413      	add	r3, r2
 8001c9a:	7819      	ldrb	r1, [r3, #0]
 8001c9c:	4a8a      	ldr	r2, [pc, #552]	; (8001ec8 <D_Slider_LightingUpdate+0x2c4>)
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	4413      	add	r3, r2
 8001ca2:	460a      	mov	r2, r1
 8001ca4:	701a      	strb	r2, [r3, #0]
		switch(LightingMode[side]){
 8001ca6:	4a85      	ldr	r2, [pc, #532]	; (8001ebc <D_Slider_LightingUpdate+0x2b8>)
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	4413      	add	r3, r2
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	f200 871e 	bhi.w	8002af0 <D_Slider_LightingUpdate+0xeec>
 8001cb4:	a201      	add	r2, pc, #4	; (adr r2, 8001cbc <D_Slider_LightingUpdate+0xb8>)
 8001cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cba:	bf00      	nop
 8001cbc:	08001cd9 	.word	0x08001cd9
 8001cc0:	08001d59 	.word	0x08001d59
 8001cc4:	08001dd9 	.word	0x08001dd9
 8001cc8:	08002af1 	.word	0x08002af1
 8001ccc:	08002883 	.word	0x08002883
 8001cd0:	08001f59 	.word	0x08001f59
 8001cd4:	08002343 	.word	0x08002343
		case SL_DISABLE:
			if(_changeMode[side]){
 8001cd8:	4a7c      	ldr	r2, [pc, #496]	; (8001ecc <D_Slider_LightingUpdate+0x2c8>)
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 86fa 	beq.w	8002ada <D_Slider_LightingUpdate+0xed6>
				for(int i=0; i<5; i++){
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
 8001cea:	e02b      	b.n	8001d44 <D_Slider_LightingUpdate+0x140>
					slideColor[side][i][0] = false;
 8001cec:	487a      	ldr	r0, [pc, #488]	; (8001ed8 <D_Slider_LightingUpdate+0x2d4>)
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	0052      	lsls	r2, r2, #1
 8001cf6:	441a      	add	r2, r3
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	1a5b      	subs	r3, r3, r1
 8001cfe:	4413      	add	r3, r2
 8001d00:	4403      	add	r3, r0
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 8001d06:	4874      	ldr	r0, [pc, #464]	; (8001ed8 <D_Slider_LightingUpdate+0x2d4>)
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	0052      	lsls	r2, r2, #1
 8001d10:	441a      	add	r2, r3
 8001d12:	460b      	mov	r3, r1
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	1a5b      	subs	r3, r3, r1
 8001d18:	4413      	add	r3, r2
 8001d1a:	4403      	add	r3, r0
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 8001d22:	486d      	ldr	r0, [pc, #436]	; (8001ed8 <D_Slider_LightingUpdate+0x2d4>)
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d28:	461a      	mov	r2, r3
 8001d2a:	0052      	lsls	r2, r2, #1
 8001d2c:	441a      	add	r2, r3
 8001d2e:	460b      	mov	r3, r1
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	1a5b      	subs	r3, r3, r1
 8001d34:	4413      	add	r3, r2
 8001d36:	4403      	add	r3, r0
 8001d38:	3302      	adds	r3, #2
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	3301      	adds	r3, #1
 8001d42:	623b      	str	r3, [r7, #32]
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	ddd0      	ble.n	8001cec <D_Slider_LightingUpdate+0xe8>
				}
				_changeMode[side] = false;
 8001d4a:	4a60      	ldr	r2, [pc, #384]	; (8001ecc <D_Slider_LightingUpdate+0x2c8>)
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	4413      	add	r3, r2
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001d54:	f000 bec1 	b.w	8002ada <D_Slider_LightingUpdate+0xed6>

		case SL_NORMAL:
			if(_changeMode[side]){
 8001d58:	4a5c      	ldr	r2, [pc, #368]	; (8001ecc <D_Slider_LightingUpdate+0x2c8>)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	4413      	add	r3, r2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 86bc 	beq.w	8002ade <D_Slider_LightingUpdate+0xeda>
				for(int i=0; i<5; i++){
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	e02b      	b.n	8001dc4 <D_Slider_LightingUpdate+0x1c0>
					slideColor[side][i][0] = true;
 8001d6c:	485a      	ldr	r0, [pc, #360]	; (8001ed8 <D_Slider_LightingUpdate+0x2d4>)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d72:	461a      	mov	r2, r3
 8001d74:	0052      	lsls	r2, r2, #1
 8001d76:	441a      	add	r2, r3
 8001d78:	460b      	mov	r3, r1
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	1a5b      	subs	r3, r3, r1
 8001d7e:	4413      	add	r3, r2
 8001d80:	4403      	add	r3, r0
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = true;
 8001d86:	4854      	ldr	r0, [pc, #336]	; (8001ed8 <D_Slider_LightingUpdate+0x2d4>)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	0052      	lsls	r2, r2, #1
 8001d90:	441a      	add	r2, r3
 8001d92:	460b      	mov	r3, r1
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	1a5b      	subs	r3, r3, r1
 8001d98:	4413      	add	r3, r2
 8001d9a:	4403      	add	r3, r0
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = true;
 8001da2:	484d      	ldr	r0, [pc, #308]	; (8001ed8 <D_Slider_LightingUpdate+0x2d4>)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001da8:	461a      	mov	r2, r3
 8001daa:	0052      	lsls	r2, r2, #1
 8001dac:	441a      	add	r2, r3
 8001dae:	460b      	mov	r3, r1
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	1a5b      	subs	r3, r3, r1
 8001db4:	4413      	add	r3, r2
 8001db6:	4403      	add	r3, r0
 8001db8:	3302      	adds	r3, #2
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	ddd0      	ble.n	8001d6c <D_Slider_LightingUpdate+0x168>
				}
				_changeMode[side] = false;
 8001dca:	4a40      	ldr	r2, [pc, #256]	; (8001ecc <D_Slider_LightingUpdate+0x2c8>)
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	4413      	add	r3, r2
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001dd4:	f000 be83 	b.w	8002ade <D_Slider_LightingUpdate+0xeda>

		case SL_NORMAL_FLASH:
			if(updateCount[side] <= 1700 && !_animUpdate_1[side]){
 8001dd8:	4a36      	ldr	r2, [pc, #216]	; (8001eb4 <D_Slider_LightingUpdate+0x2b0>)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de0:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001de4:	4293      	cmp	r3, r2
 8001de6:	dc44      	bgt.n	8001e72 <D_Slider_LightingUpdate+0x26e>
 8001de8:	4a39      	ldr	r2, [pc, #228]	; (8001ed0 <D_Slider_LightingUpdate+0x2cc>)
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	4413      	add	r3, r2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	f083 0301 	eor.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d03b      	beq.n	8001e72 <D_Slider_LightingUpdate+0x26e>
				_animUpdate_1[side] = true;
 8001dfa:	4a35      	ldr	r2, [pc, #212]	; (8001ed0 <D_Slider_LightingUpdate+0x2cc>)
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	4413      	add	r3, r2
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8001e04:	4a33      	ldr	r2, [pc, #204]	; (8001ed4 <D_Slider_LightingUpdate+0x2d0>)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	4413      	add	r3, r2
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	e02b      	b.n	8001e6c <D_Slider_LightingUpdate+0x268>
					slideColor[side][i][0] = true;
 8001e14:	4830      	ldr	r0, [pc, #192]	; (8001ed8 <D_Slider_LightingUpdate+0x2d4>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	0052      	lsls	r2, r2, #1
 8001e1e:	441a      	add	r2, r3
 8001e20:	460b      	mov	r3, r1
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	1a5b      	subs	r3, r3, r1
 8001e26:	4413      	add	r3, r2
 8001e28:	4403      	add	r3, r0
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = true;
 8001e2e:	482a      	ldr	r0, [pc, #168]	; (8001ed8 <D_Slider_LightingUpdate+0x2d4>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e34:	461a      	mov	r2, r3
 8001e36:	0052      	lsls	r2, r2, #1
 8001e38:	441a      	add	r2, r3
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	1a5b      	subs	r3, r3, r1
 8001e40:	4413      	add	r3, r2
 8001e42:	4403      	add	r3, r0
 8001e44:	3301      	adds	r3, #1
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = true;
 8001e4a:	4823      	ldr	r0, [pc, #140]	; (8001ed8 <D_Slider_LightingUpdate+0x2d4>)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e50:	461a      	mov	r2, r3
 8001e52:	0052      	lsls	r2, r2, #1
 8001e54:	441a      	add	r2, r3
 8001e56:	460b      	mov	r3, r1
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	1a5b      	subs	r3, r3, r1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4403      	add	r3, r0
 8001e60:	3302      	adds	r3, #2
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	ddd0      	ble.n	8001e14 <D_Slider_LightingUpdate+0x210>
				}
			}
			if(updateCount[side] > 1700 && !_animUpdate_2[side]){
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <D_Slider_LightingUpdate+0x2b0>)
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	dd5b      	ble.n	8001f3a <D_Slider_LightingUpdate+0x336>
 8001e82:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <D_Slider_LightingUpdate+0x2d0>)
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	f083 0301 	eor.w	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d052      	beq.n	8001f3a <D_Slider_LightingUpdate+0x336>
				_animUpdate_1[side] = false;
 8001e94:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <D_Slider_LightingUpdate+0x2cc>)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	4413      	add	r3, r2
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8001e9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <D_Slider_LightingUpdate+0x2d0>)
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	4413      	add	r3, r2
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e042      	b.n	8001f34 <D_Slider_LightingUpdate+0x330>
 8001eae:	bf00      	nop
 8001eb0:	200000b0 	.word	0x200000b0
 8001eb4:	2000015c 	.word	0x2000015c
 8001eb8:	20000164 	.word	0x20000164
 8001ebc:	20000144 	.word	0x20000144
 8001ec0:	20000168 	.word	0x20000168
 8001ec4:	20000148 	.word	0x20000148
 8001ec8:	2000016c 	.word	0x2000016c
 8001ecc:	20000170 	.word	0x20000170
 8001ed0:	20000174 	.word	0x20000174
 8001ed4:	20000178 	.word	0x20000178
 8001ed8:	2000017c 	.word	0x2000017c
					slideColor[side][i][0] = false;
 8001edc:	4823      	ldr	r0, [pc, #140]	; (8001f6c <D_Slider_LightingUpdate+0x368>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	0052      	lsls	r2, r2, #1
 8001ee6:	441a      	add	r2, r3
 8001ee8:	460b      	mov	r3, r1
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	1a5b      	subs	r3, r3, r1
 8001eee:	4413      	add	r3, r2
 8001ef0:	4403      	add	r3, r0
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 8001ef6:	481d      	ldr	r0, [pc, #116]	; (8001f6c <D_Slider_LightingUpdate+0x368>)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001efc:	461a      	mov	r2, r3
 8001efe:	0052      	lsls	r2, r2, #1
 8001f00:	441a      	add	r2, r3
 8001f02:	460b      	mov	r3, r1
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	1a5b      	subs	r3, r3, r1
 8001f08:	4413      	add	r3, r2
 8001f0a:	4403      	add	r3, r0
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 8001f12:	4816      	ldr	r0, [pc, #88]	; (8001f6c <D_Slider_LightingUpdate+0x368>)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f18:	461a      	mov	r2, r3
 8001f1a:	0052      	lsls	r2, r2, #1
 8001f1c:	441a      	add	r2, r3
 8001f1e:	460b      	mov	r3, r1
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	1a5b      	subs	r3, r3, r1
 8001f24:	4413      	add	r3, r2
 8001f26:	4403      	add	r3, r0
 8001f28:	3302      	adds	r3, #2
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	ddd0      	ble.n	8001edc <D_Slider_LightingUpdate+0x2d8>
				}
			}
			if(updateCount[side] >= 2000) updateCount[side] = 0;
 8001f3a:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <D_Slider_LightingUpdate+0x36c>)
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f42:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f46:	f2c0 85cc 	blt.w	8002ae2 <D_Slider_LightingUpdate+0xede>
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <D_Slider_LightingUpdate+0x36c>)
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	2100      	movs	r1, #0
 8001f50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8001f54:	f000 bdc5 	b.w	8002ae2 <D_Slider_LightingUpdate+0xede>

		case SL_POCKET_IN_OUT:
			if(_changeMode[side]){
 8001f58:	4a06      	ldr	r2, [pc, #24]	; (8001f74 <D_Slider_LightingUpdate+0x370>)
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d03d      	beq.n	8001fe0 <D_Slider_LightingUpdate+0x3dc>
				for(int i=0; i<5; i++){
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	e032      	b.n	8001fd0 <D_Slider_LightingUpdate+0x3cc>
 8001f6a:	bf00      	nop
 8001f6c:	2000017c 	.word	0x2000017c
 8001f70:	2000015c 	.word	0x2000015c
 8001f74:	20000170 	.word	0x20000170
					slideColor[side][i][0] = false;
 8001f78:	48ba      	ldr	r0, [pc, #744]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f7e:	461a      	mov	r2, r3
 8001f80:	0052      	lsls	r2, r2, #1
 8001f82:	441a      	add	r2, r3
 8001f84:	460b      	mov	r3, r1
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	1a5b      	subs	r3, r3, r1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4403      	add	r3, r0
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 8001f92:	48b4      	ldr	r0, [pc, #720]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f98:	461a      	mov	r2, r3
 8001f9a:	0052      	lsls	r2, r2, #1
 8001f9c:	441a      	add	r2, r3
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	1a5b      	subs	r3, r3, r1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4403      	add	r3, r0
 8001fa8:	3301      	adds	r3, #1
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 8001fae:	48ad      	ldr	r0, [pc, #692]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	0052      	lsls	r2, r2, #1
 8001fb8:	441a      	add	r2, r3
 8001fba:	460b      	mov	r3, r1
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	1a5b      	subs	r3, r3, r1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4403      	add	r3, r0
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	ddd0      	ble.n	8001f78 <D_Slider_LightingUpdate+0x374>
				}
				_changeMode[side] = false;
 8001fd6:	4aa4      	ldr	r2, [pc, #656]	; (8002268 <D_Slider_LightingUpdate+0x664>)
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	4413      	add	r3, r2
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] < 100 && !_animUpdate_1[side]){
 8001fe0:	4aa2      	ldr	r2, [pc, #648]	; (800226c <D_Slider_LightingUpdate+0x668>)
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe8:	2b63      	cmp	r3, #99	; 0x63
 8001fea:	dc44      	bgt.n	8002076 <D_Slider_LightingUpdate+0x472>
 8001fec:	4aa0      	ldr	r2, [pc, #640]	; (8002270 <D_Slider_LightingUpdate+0x66c>)
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	4413      	add	r3, r2
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	f083 0301 	eor.w	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d03b      	beq.n	8002076 <D_Slider_LightingUpdate+0x472>
				_animUpdate_1[side] = true;
 8001ffe:	4a9c      	ldr	r2, [pc, #624]	; (8002270 <D_Slider_LightingUpdate+0x66c>)
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	4413      	add	r3, r2
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8002008:	4a9a      	ldr	r2, [pc, #616]	; (8002274 <D_Slider_LightingUpdate+0x670>)
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	4413      	add	r3, r2
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8002012:	4a99      	ldr	r2, [pc, #612]	; (8002278 <D_Slider_LightingUpdate+0x674>)
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	4413      	add	r3, r2
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	4892      	ldr	r0, [pc, #584]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 800201c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800201e:	461a      	mov	r2, r3
 8002020:	0052      	lsls	r2, r2, #1
 8002022:	441a      	add	r2, r3
 8002024:	460b      	mov	r3, r1
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	1a5b      	subs	r3, r3, r1
 800202a:	4413      	add	r3, r2
 800202c:	4403      	add	r3, r0
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8002032:	4a91      	ldr	r2, [pc, #580]	; (8002278 <D_Slider_LightingUpdate+0x674>)
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	4413      	add	r3, r2
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	488a      	ldr	r0, [pc, #552]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 800203c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800203e:	461a      	mov	r2, r3
 8002040:	0052      	lsls	r2, r2, #1
 8002042:	441a      	add	r2, r3
 8002044:	460b      	mov	r3, r1
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a5b      	subs	r3, r3, r1
 800204a:	4413      	add	r3, r2
 800204c:	4403      	add	r3, r0
 800204e:	3301      	adds	r3, #1
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8002054:	4a88      	ldr	r2, [pc, #544]	; (8002278 <D_Slider_LightingUpdate+0x674>)
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4881      	ldr	r0, [pc, #516]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 800205e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002060:	461a      	mov	r2, r3
 8002062:	0052      	lsls	r2, r2, #1
 8002064:	441a      	add	r2, r3
 8002066:	460b      	mov	r3, r1
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	1a5b      	subs	r3, r3, r1
 800206c:	4413      	add	r3, r2
 800206e:	4403      	add	r3, r0
 8002070:	3302      	adds	r3, #2
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 100 && updateCount[side] < 200 && !_animUpdate_2[side]){
 8002076:	4a7d      	ldr	r2, [pc, #500]	; (800226c <D_Slider_LightingUpdate+0x668>)
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	2b63      	cmp	r3, #99	; 0x63
 8002080:	dd4a      	ble.n	8002118 <D_Slider_LightingUpdate+0x514>
 8002082:	4a7a      	ldr	r2, [pc, #488]	; (800226c <D_Slider_LightingUpdate+0x668>)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208a:	2bc7      	cmp	r3, #199	; 0xc7
 800208c:	dc44      	bgt.n	8002118 <D_Slider_LightingUpdate+0x514>
 800208e:	4a79      	ldr	r2, [pc, #484]	; (8002274 <D_Slider_LightingUpdate+0x670>)
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	4413      	add	r3, r2
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	f083 0301 	eor.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d03b      	beq.n	8002118 <D_Slider_LightingUpdate+0x514>
				_animUpdate_1[side] = false;
 80020a0:	4a73      	ldr	r2, [pc, #460]	; (8002270 <D_Slider_LightingUpdate+0x66c>)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	4413      	add	r3, r2
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 80020aa:	4a72      	ldr	r2, [pc, #456]	; (8002274 <D_Slider_LightingUpdate+0x670>)
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	4413      	add	r3, r2
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 80020b4:	4a70      	ldr	r2, [pc, #448]	; (8002278 <D_Slider_LightingUpdate+0x674>)
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	4413      	add	r3, r2
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4869      	ldr	r0, [pc, #420]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 80020be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c0:	461a      	mov	r2, r3
 80020c2:	0052      	lsls	r2, r2, #1
 80020c4:	441a      	add	r2, r3
 80020c6:	460b      	mov	r3, r1
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	1a5b      	subs	r3, r3, r1
 80020cc:	4413      	add	r3, r2
 80020ce:	4403      	add	r3, r0
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = false;
 80020d4:	4a68      	ldr	r2, [pc, #416]	; (8002278 <D_Slider_LightingUpdate+0x674>)
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	4413      	add	r3, r2
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4861      	ldr	r0, [pc, #388]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 80020de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020e0:	461a      	mov	r2, r3
 80020e2:	0052      	lsls	r2, r2, #1
 80020e4:	441a      	add	r2, r3
 80020e6:	460b      	mov	r3, r1
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a5b      	subs	r3, r3, r1
 80020ec:	4413      	add	r3, r2
 80020ee:	4403      	add	r3, r0
 80020f0:	3301      	adds	r3, #1
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = false;
 80020f6:	4a60      	ldr	r2, [pc, #384]	; (8002278 <D_Slider_LightingUpdate+0x674>)
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	4413      	add	r3, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	4859      	ldr	r0, [pc, #356]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 8002100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002102:	461a      	mov	r2, r3
 8002104:	0052      	lsls	r2, r2, #1
 8002106:	441a      	add	r2, r3
 8002108:	460b      	mov	r3, r1
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	1a5b      	subs	r3, r3, r1
 800210e:	4413      	add	r3, r2
 8002110:	4403      	add	r3, r0
 8002112:	3302      	adds	r3, #2
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 200 && updateCount[side] < 375 && !_animUpdate_1[side]){
 8002118:	4a54      	ldr	r2, [pc, #336]	; (800226c <D_Slider_LightingUpdate+0x668>)
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002120:	2bc7      	cmp	r3, #199	; 0xc7
 8002122:	dd4b      	ble.n	80021bc <D_Slider_LightingUpdate+0x5b8>
 8002124:	4a51      	ldr	r2, [pc, #324]	; (800226c <D_Slider_LightingUpdate+0x668>)
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 8002130:	dc44      	bgt.n	80021bc <D_Slider_LightingUpdate+0x5b8>
 8002132:	4a4f      	ldr	r2, [pc, #316]	; (8002270 <D_Slider_LightingUpdate+0x66c>)
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	4413      	add	r3, r2
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	f083 0301 	eor.w	r3, r3, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d03b      	beq.n	80021bc <D_Slider_LightingUpdate+0x5b8>
				_animUpdate_1[side] = true;
 8002144:	4a4a      	ldr	r2, [pc, #296]	; (8002270 <D_Slider_LightingUpdate+0x66c>)
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	4413      	add	r3, r2
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 800214e:	4a49      	ldr	r2, [pc, #292]	; (8002274 <D_Slider_LightingUpdate+0x670>)
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	4413      	add	r3, r2
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8002158:	4a47      	ldr	r2, [pc, #284]	; (8002278 <D_Slider_LightingUpdate+0x674>)
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	4413      	add	r3, r2
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4840      	ldr	r0, [pc, #256]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 8002162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002164:	461a      	mov	r2, r3
 8002166:	0052      	lsls	r2, r2, #1
 8002168:	441a      	add	r2, r3
 800216a:	460b      	mov	r3, r1
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a5b      	subs	r3, r3, r1
 8002170:	4413      	add	r3, r2
 8002172:	4403      	add	r3, r0
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8002178:	4a3f      	ldr	r2, [pc, #252]	; (8002278 <D_Slider_LightingUpdate+0x674>)
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	4413      	add	r3, r2
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4838      	ldr	r0, [pc, #224]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 8002182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002184:	461a      	mov	r2, r3
 8002186:	0052      	lsls	r2, r2, #1
 8002188:	441a      	add	r2, r3
 800218a:	460b      	mov	r3, r1
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	1a5b      	subs	r3, r3, r1
 8002190:	4413      	add	r3, r2
 8002192:	4403      	add	r3, r0
 8002194:	3301      	adds	r3, #1
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 800219a:	4a37      	ldr	r2, [pc, #220]	; (8002278 <D_Slider_LightingUpdate+0x674>)
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	4413      	add	r3, r2
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4830      	ldr	r0, [pc, #192]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 80021a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a6:	461a      	mov	r2, r3
 80021a8:	0052      	lsls	r2, r2, #1
 80021aa:	441a      	add	r2, r3
 80021ac:	460b      	mov	r3, r1
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	1a5b      	subs	r3, r3, r1
 80021b2:	4413      	add	r3, r2
 80021b4:	4403      	add	r3, r0
 80021b6:	3302      	adds	r3, #2
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 375 &&updateCount[side] < 475 && !_animUpdate_2[side]){
 80021bc:	4a2b      	ldr	r2, [pc, #172]	; (800226c <D_Slider_LightingUpdate+0x668>)
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c4:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 80021c8:	dd58      	ble.n	800227c <D_Slider_LightingUpdate+0x678>
 80021ca:	4a28      	ldr	r2, [pc, #160]	; (800226c <D_Slider_LightingUpdate+0x668>)
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 80021d6:	dc51      	bgt.n	800227c <D_Slider_LightingUpdate+0x678>
 80021d8:	4a26      	ldr	r2, [pc, #152]	; (8002274 <D_Slider_LightingUpdate+0x670>)
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	4413      	add	r3, r2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	f083 0301 	eor.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d048      	beq.n	800227c <D_Slider_LightingUpdate+0x678>
				_animUpdate_1[side] = false;
 80021ea:	4a21      	ldr	r2, [pc, #132]	; (8002270 <D_Slider_LightingUpdate+0x66c>)
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	4413      	add	r3, r2
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 80021f4:	4a1f      	ldr	r2, [pc, #124]	; (8002274 <D_Slider_LightingUpdate+0x670>)
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	4413      	add	r3, r2
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 80021fe:	4a1e      	ldr	r2, [pc, #120]	; (8002278 <D_Slider_LightingUpdate+0x674>)
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	4413      	add	r3, r2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	4817      	ldr	r0, [pc, #92]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 8002208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800220a:	461a      	mov	r2, r3
 800220c:	0052      	lsls	r2, r2, #1
 800220e:	441a      	add	r2, r3
 8002210:	460b      	mov	r3, r1
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a5b      	subs	r3, r3, r1
 8002216:	4413      	add	r3, r2
 8002218:	4403      	add	r3, r0
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = false;
 800221e:	4a16      	ldr	r2, [pc, #88]	; (8002278 <D_Slider_LightingUpdate+0x674>)
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	480f      	ldr	r0, [pc, #60]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 8002228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800222a:	461a      	mov	r2, r3
 800222c:	0052      	lsls	r2, r2, #1
 800222e:	441a      	add	r2, r3
 8002230:	460b      	mov	r3, r1
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a5b      	subs	r3, r3, r1
 8002236:	4413      	add	r3, r2
 8002238:	4403      	add	r3, r0
 800223a:	3301      	adds	r3, #1
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = false;
 8002240:	4a0d      	ldr	r2, [pc, #52]	; (8002278 <D_Slider_LightingUpdate+0x674>)
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	4413      	add	r3, r2
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4806      	ldr	r0, [pc, #24]	; (8002264 <D_Slider_LightingUpdate+0x660>)
 800224a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800224c:	461a      	mov	r2, r3
 800224e:	0052      	lsls	r2, r2, #1
 8002250:	441a      	add	r2, r3
 8002252:	460b      	mov	r3, r1
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a5b      	subs	r3, r3, r1
 8002258:	4413      	add	r3, r2
 800225a:	4403      	add	r3, r0
 800225c:	3302      	adds	r3, #2
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	e00b      	b.n	800227c <D_Slider_LightingUpdate+0x678>
 8002264:	2000017c 	.word	0x2000017c
 8002268:	20000170 	.word	0x20000170
 800226c:	2000015c 	.word	0x2000015c
 8002270:	20000174 	.word	0x20000174
 8002274:	20000178 	.word	0x20000178
 8002278:	20000148 	.word	0x20000148
			}
			if(updateCount[side] >= 475 &&updateCount[side] < 650 && !_animUpdate_1[side]){
 800227c:	4a35      	ldr	r2, [pc, #212]	; (8002354 <D_Slider_LightingUpdate+0x750>)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002284:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 8002288:	dd4c      	ble.n	8002324 <D_Slider_LightingUpdate+0x720>
 800228a:	4a32      	ldr	r2, [pc, #200]	; (8002354 <D_Slider_LightingUpdate+0x750>)
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	f240 2289 	movw	r2, #649	; 0x289
 8002296:	4293      	cmp	r3, r2
 8002298:	dc44      	bgt.n	8002324 <D_Slider_LightingUpdate+0x720>
 800229a:	4a2f      	ldr	r2, [pc, #188]	; (8002358 <D_Slider_LightingUpdate+0x754>)
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	4413      	add	r3, r2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f083 0301 	eor.w	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d03b      	beq.n	8002324 <D_Slider_LightingUpdate+0x720>
				_animUpdate_1[side] = true;
 80022ac:	4a2a      	ldr	r2, [pc, #168]	; (8002358 <D_Slider_LightingUpdate+0x754>)
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	4413      	add	r3, r2
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 80022b6:	4a29      	ldr	r2, [pc, #164]	; (800235c <D_Slider_LightingUpdate+0x758>)
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	4413      	add	r3, r2
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 80022c0:	4a27      	ldr	r2, [pc, #156]	; (8002360 <D_Slider_LightingUpdate+0x75c>)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	4413      	add	r3, r2
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4826      	ldr	r0, [pc, #152]	; (8002364 <D_Slider_LightingUpdate+0x760>)
 80022ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022cc:	461a      	mov	r2, r3
 80022ce:	0052      	lsls	r2, r2, #1
 80022d0:	441a      	add	r2, r3
 80022d2:	460b      	mov	r3, r1
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	1a5b      	subs	r3, r3, r1
 80022d8:	4413      	add	r3, r2
 80022da:	4403      	add	r3, r0
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 80022e0:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <D_Slider_LightingUpdate+0x75c>)
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	4413      	add	r3, r2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	481e      	ldr	r0, [pc, #120]	; (8002364 <D_Slider_LightingUpdate+0x760>)
 80022ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ec:	461a      	mov	r2, r3
 80022ee:	0052      	lsls	r2, r2, #1
 80022f0:	441a      	add	r2, r3
 80022f2:	460b      	mov	r3, r1
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a5b      	subs	r3, r3, r1
 80022f8:	4413      	add	r3, r2
 80022fa:	4403      	add	r3, r0
 80022fc:	3301      	adds	r3, #1
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8002302:	4a17      	ldr	r2, [pc, #92]	; (8002360 <D_Slider_LightingUpdate+0x75c>)
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	4413      	add	r3, r2
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	4816      	ldr	r0, [pc, #88]	; (8002364 <D_Slider_LightingUpdate+0x760>)
 800230c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800230e:	461a      	mov	r2, r3
 8002310:	0052      	lsls	r2, r2, #1
 8002312:	441a      	add	r2, r3
 8002314:	460b      	mov	r3, r1
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a5b      	subs	r3, r3, r1
 800231a:	4413      	add	r3, r2
 800231c:	4403      	add	r3, r0
 800231e:	3302      	adds	r3, #2
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
			}

			if(updateCount[side] > 650) LightingMode[side] = SL_NORMAL_FLASH;
 8002324:	4a0b      	ldr	r2, [pc, #44]	; (8002354 <D_Slider_LightingUpdate+0x750>)
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232c:	f240 228a 	movw	r2, #650	; 0x28a
 8002330:	4293      	cmp	r3, r2
 8002332:	f340 83d8 	ble.w	8002ae6 <D_Slider_LightingUpdate+0xee2>
 8002336:	4a0c      	ldr	r2, [pc, #48]	; (8002368 <D_Slider_LightingUpdate+0x764>)
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	4413      	add	r3, r2
 800233c:	2202      	movs	r2, #2
 800233e:	701a      	strb	r2, [r3, #0]

			break;
 8002340:	e3d1      	b.n	8002ae6 <D_Slider_LightingUpdate+0xee2>

		case SL_POCKET_IN_DIA:
			if(_changeMode[side]){
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <D_Slider_LightingUpdate+0x768>)
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	4413      	add	r3, r2
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d044      	beq.n	80023d8 <D_Slider_LightingUpdate+0x7d4>
				for(int i=0; i<5; i++){
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	e039      	b.n	80023c8 <D_Slider_LightingUpdate+0x7c4>
 8002354:	2000015c 	.word	0x2000015c
 8002358:	20000174 	.word	0x20000174
 800235c:	20000178 	.word	0x20000178
 8002360:	20000148 	.word	0x20000148
 8002364:	2000017c 	.word	0x2000017c
 8002368:	20000144 	.word	0x20000144
 800236c:	20000170 	.word	0x20000170
					slideColor[side][i][0] = false;
 8002370:	48ba      	ldr	r0, [pc, #744]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002376:	461a      	mov	r2, r3
 8002378:	0052      	lsls	r2, r2, #1
 800237a:	441a      	add	r2, r3
 800237c:	460b      	mov	r3, r1
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a5b      	subs	r3, r3, r1
 8002382:	4413      	add	r3, r2
 8002384:	4403      	add	r3, r0
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 800238a:	48b4      	ldr	r0, [pc, #720]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002390:	461a      	mov	r2, r3
 8002392:	0052      	lsls	r2, r2, #1
 8002394:	441a      	add	r2, r3
 8002396:	460b      	mov	r3, r1
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	1a5b      	subs	r3, r3, r1
 800239c:	4413      	add	r3, r2
 800239e:	4403      	add	r3, r0
 80023a0:	3301      	adds	r3, #1
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 80023a6:	48ad      	ldr	r0, [pc, #692]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ac:	461a      	mov	r2, r3
 80023ae:	0052      	lsls	r2, r2, #1
 80023b0:	441a      	add	r2, r3
 80023b2:	460b      	mov	r3, r1
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	1a5b      	subs	r3, r3, r1
 80023b8:	4413      	add	r3, r2
 80023ba:	4403      	add	r3, r0
 80023bc:	3302      	adds	r3, #2
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3301      	adds	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	ddd0      	ble.n	8002370 <D_Slider_LightingUpdate+0x76c>
				}
				_changeMode[side] = false;
 80023ce:	4aa4      	ldr	r2, [pc, #656]	; (8002660 <D_Slider_LightingUpdate+0xa5c>)
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	4413      	add	r3, r2
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] < 100 && !_animUpdate_1[side]){
 80023d8:	4aa2      	ldr	r2, [pc, #648]	; (8002664 <D_Slider_LightingUpdate+0xa60>)
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e0:	2b63      	cmp	r3, #99	; 0x63
 80023e2:	dc44      	bgt.n	800246e <D_Slider_LightingUpdate+0x86a>
 80023e4:	4aa0      	ldr	r2, [pc, #640]	; (8002668 <D_Slider_LightingUpdate+0xa64>)
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	4413      	add	r3, r2
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	f083 0301 	eor.w	r3, r3, #1
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d03b      	beq.n	800246e <D_Slider_LightingUpdate+0x86a>
				_animUpdate_1[side] = true;
 80023f6:	4a9c      	ldr	r2, [pc, #624]	; (8002668 <D_Slider_LightingUpdate+0xa64>)
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	4413      	add	r3, r2
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8002400:	4a9a      	ldr	r2, [pc, #616]	; (800266c <D_Slider_LightingUpdate+0xa68>)
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	4413      	add	r3, r2
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 800240a:	4a99      	ldr	r2, [pc, #612]	; (8002670 <D_Slider_LightingUpdate+0xa6c>)
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	4413      	add	r3, r2
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	4892      	ldr	r0, [pc, #584]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 8002414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002416:	461a      	mov	r2, r3
 8002418:	0052      	lsls	r2, r2, #1
 800241a:	441a      	add	r2, r3
 800241c:	460b      	mov	r3, r1
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a5b      	subs	r3, r3, r1
 8002422:	4413      	add	r3, r2
 8002424:	4403      	add	r3, r0
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 800242a:	4a91      	ldr	r2, [pc, #580]	; (8002670 <D_Slider_LightingUpdate+0xa6c>)
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	4413      	add	r3, r2
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	488a      	ldr	r0, [pc, #552]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 8002434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002436:	461a      	mov	r2, r3
 8002438:	0052      	lsls	r2, r2, #1
 800243a:	441a      	add	r2, r3
 800243c:	460b      	mov	r3, r1
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	1a5b      	subs	r3, r3, r1
 8002442:	4413      	add	r3, r2
 8002444:	4403      	add	r3, r0
 8002446:	3301      	adds	r3, #1
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 800244c:	4a88      	ldr	r2, [pc, #544]	; (8002670 <D_Slider_LightingUpdate+0xa6c>)
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	4413      	add	r3, r2
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4881      	ldr	r0, [pc, #516]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 8002456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002458:	461a      	mov	r2, r3
 800245a:	0052      	lsls	r2, r2, #1
 800245c:	441a      	add	r2, r3
 800245e:	460b      	mov	r3, r1
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a5b      	subs	r3, r3, r1
 8002464:	4413      	add	r3, r2
 8002466:	4403      	add	r3, r0
 8002468:	3302      	adds	r3, #2
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 100 && updateCount[side] < 180 && !_animUpdate_2[side]){
 800246e:	4a7d      	ldr	r2, [pc, #500]	; (8002664 <D_Slider_LightingUpdate+0xa60>)
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002476:	2b63      	cmp	r3, #99	; 0x63
 8002478:	dd4a      	ble.n	8002510 <D_Slider_LightingUpdate+0x90c>
 800247a:	4a7a      	ldr	r2, [pc, #488]	; (8002664 <D_Slider_LightingUpdate+0xa60>)
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002482:	2bb3      	cmp	r3, #179	; 0xb3
 8002484:	dc44      	bgt.n	8002510 <D_Slider_LightingUpdate+0x90c>
 8002486:	4a79      	ldr	r2, [pc, #484]	; (800266c <D_Slider_LightingUpdate+0xa68>)
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	4413      	add	r3, r2
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	f083 0301 	eor.w	r3, r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d03b      	beq.n	8002510 <D_Slider_LightingUpdate+0x90c>
				_animUpdate_1[side] = false;
 8002498:	4a73      	ldr	r2, [pc, #460]	; (8002668 <D_Slider_LightingUpdate+0xa64>)
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	4413      	add	r3, r2
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 80024a2:	4a72      	ldr	r2, [pc, #456]	; (800266c <D_Slider_LightingUpdate+0xa68>)
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	4413      	add	r3, r2
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 80024ac:	4a70      	ldr	r2, [pc, #448]	; (8002670 <D_Slider_LightingUpdate+0xa6c>)
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	4413      	add	r3, r2
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4869      	ldr	r0, [pc, #420]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 80024b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b8:	461a      	mov	r2, r3
 80024ba:	0052      	lsls	r2, r2, #1
 80024bc:	441a      	add	r2, r3
 80024be:	460b      	mov	r3, r1
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a5b      	subs	r3, r3, r1
 80024c4:	4413      	add	r3, r2
 80024c6:	4403      	add	r3, r0
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 80024cc:	4a68      	ldr	r2, [pc, #416]	; (8002670 <D_Slider_LightingUpdate+0xa6c>)
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	4413      	add	r3, r2
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	4861      	ldr	r0, [pc, #388]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 80024d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d8:	461a      	mov	r2, r3
 80024da:	0052      	lsls	r2, r2, #1
 80024dc:	441a      	add	r2, r3
 80024de:	460b      	mov	r3, r1
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a5b      	subs	r3, r3, r1
 80024e4:	4413      	add	r3, r2
 80024e6:	4403      	add	r3, r0
 80024e8:	3301      	adds	r3, #1
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 80024ee:	4a60      	ldr	r2, [pc, #384]	; (8002670 <D_Slider_LightingUpdate+0xa6c>)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	4413      	add	r3, r2
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	4859      	ldr	r0, [pc, #356]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 80024f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024fa:	461a      	mov	r2, r3
 80024fc:	0052      	lsls	r2, r2, #1
 80024fe:	441a      	add	r2, r3
 8002500:	460b      	mov	r3, r1
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	1a5b      	subs	r3, r3, r1
 8002506:	4413      	add	r3, r2
 8002508:	4403      	add	r3, r0
 800250a:	3302      	adds	r3, #2
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 180 && updateCount[side] < 300 && !_animUpdate_1[side]){
 8002510:	4a54      	ldr	r2, [pc, #336]	; (8002664 <D_Slider_LightingUpdate+0xa60>)
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002518:	2bb3      	cmp	r3, #179	; 0xb3
 800251a:	dd4b      	ble.n	80025b4 <D_Slider_LightingUpdate+0x9b0>
 800251c:	4a51      	ldr	r2, [pc, #324]	; (8002664 <D_Slider_LightingUpdate+0xa60>)
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002524:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002528:	da44      	bge.n	80025b4 <D_Slider_LightingUpdate+0x9b0>
 800252a:	4a4f      	ldr	r2, [pc, #316]	; (8002668 <D_Slider_LightingUpdate+0xa64>)
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	f083 0301 	eor.w	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d03b      	beq.n	80025b4 <D_Slider_LightingUpdate+0x9b0>
				_animUpdate_1[side] = true;
 800253c:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <D_Slider_LightingUpdate+0xa64>)
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	4413      	add	r3, r2
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8002546:	4a49      	ldr	r2, [pc, #292]	; (800266c <D_Slider_LightingUpdate+0xa68>)
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	4413      	add	r3, r2
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8002550:	4a47      	ldr	r2, [pc, #284]	; (8002670 <D_Slider_LightingUpdate+0xa6c>)
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	4413      	add	r3, r2
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4840      	ldr	r0, [pc, #256]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 800255a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800255c:	461a      	mov	r2, r3
 800255e:	0052      	lsls	r2, r2, #1
 8002560:	441a      	add	r2, r3
 8002562:	460b      	mov	r3, r1
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a5b      	subs	r3, r3, r1
 8002568:	4413      	add	r3, r2
 800256a:	4403      	add	r3, r0
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8002570:	4a3f      	ldr	r2, [pc, #252]	; (8002670 <D_Slider_LightingUpdate+0xa6c>)
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	4413      	add	r3, r2
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4838      	ldr	r0, [pc, #224]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 800257a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800257c:	461a      	mov	r2, r3
 800257e:	0052      	lsls	r2, r2, #1
 8002580:	441a      	add	r2, r3
 8002582:	460b      	mov	r3, r1
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a5b      	subs	r3, r3, r1
 8002588:	4413      	add	r3, r2
 800258a:	4403      	add	r3, r0
 800258c:	3301      	adds	r3, #1
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8002592:	4a37      	ldr	r2, [pc, #220]	; (8002670 <D_Slider_LightingUpdate+0xa6c>)
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	4413      	add	r3, r2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	4830      	ldr	r0, [pc, #192]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 800259c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800259e:	461a      	mov	r2, r3
 80025a0:	0052      	lsls	r2, r2, #1
 80025a2:	441a      	add	r2, r3
 80025a4:	460b      	mov	r3, r1
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a5b      	subs	r3, r3, r1
 80025aa:	4413      	add	r3, r2
 80025ac:	4403      	add	r3, r0
 80025ae:	3302      	adds	r3, #2
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 300 &&updateCount[side] < 380 && !_animUpdate_2[side]){
 80025b4:	4a2b      	ldr	r2, [pc, #172]	; (8002664 <D_Slider_LightingUpdate+0xa60>)
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80025c0:	db58      	blt.n	8002674 <D_Slider_LightingUpdate+0xa70>
 80025c2:	4a28      	ldr	r2, [pc, #160]	; (8002664 <D_Slider_LightingUpdate+0xa60>)
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 80025ce:	da51      	bge.n	8002674 <D_Slider_LightingUpdate+0xa70>
 80025d0:	4a26      	ldr	r2, [pc, #152]	; (800266c <D_Slider_LightingUpdate+0xa68>)
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	4413      	add	r3, r2
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	f083 0301 	eor.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d048      	beq.n	8002674 <D_Slider_LightingUpdate+0xa70>
				_animUpdate_1[side] = false;
 80025e2:	4a21      	ldr	r2, [pc, #132]	; (8002668 <D_Slider_LightingUpdate+0xa64>)
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	4413      	add	r3, r2
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 80025ec:	4a1f      	ldr	r2, [pc, #124]	; (800266c <D_Slider_LightingUpdate+0xa68>)
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	4413      	add	r3, r2
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 80025f6:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <D_Slider_LightingUpdate+0xa6c>)
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	4413      	add	r3, r2
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	4817      	ldr	r0, [pc, #92]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 8002600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002602:	461a      	mov	r2, r3
 8002604:	0052      	lsls	r2, r2, #1
 8002606:	441a      	add	r2, r3
 8002608:	460b      	mov	r3, r1
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a5b      	subs	r3, r3, r1
 800260e:	4413      	add	r3, r2
 8002610:	4403      	add	r3, r0
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8002616:	4a16      	ldr	r2, [pc, #88]	; (8002670 <D_Slider_LightingUpdate+0xa6c>)
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	4413      	add	r3, r2
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	480f      	ldr	r0, [pc, #60]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 8002620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002622:	461a      	mov	r2, r3
 8002624:	0052      	lsls	r2, r2, #1
 8002626:	441a      	add	r2, r3
 8002628:	460b      	mov	r3, r1
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	1a5b      	subs	r3, r3, r1
 800262e:	4413      	add	r3, r2
 8002630:	4403      	add	r3, r0
 8002632:	3301      	adds	r3, #1
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <D_Slider_LightingUpdate+0xa6c>)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	4413      	add	r3, r2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4806      	ldr	r0, [pc, #24]	; (800265c <D_Slider_LightingUpdate+0xa58>)
 8002642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002644:	461a      	mov	r2, r3
 8002646:	0052      	lsls	r2, r2, #1
 8002648:	441a      	add	r2, r3
 800264a:	460b      	mov	r3, r1
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a5b      	subs	r3, r3, r1
 8002650:	4413      	add	r3, r2
 8002652:	4403      	add	r3, r0
 8002654:	3302      	adds	r3, #2
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e00b      	b.n	8002674 <D_Slider_LightingUpdate+0xa70>
 800265c:	2000017c 	.word	0x2000017c
 8002660:	20000170 	.word	0x20000170
 8002664:	2000015c 	.word	0x2000015c
 8002668:	20000174 	.word	0x20000174
 800266c:	20000178 	.word	0x20000178
 8002670:	20000148 	.word	0x20000148
			}
			if(updateCount[side] >= 380 &&updateCount[side] < 500 && !_animUpdate_1[side]){
 8002674:	4a87      	ldr	r2, [pc, #540]	; (8002894 <D_Slider_LightingUpdate+0xc90>)
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8002680:	db4b      	blt.n	800271a <D_Slider_LightingUpdate+0xb16>
 8002682:	4a84      	ldr	r2, [pc, #528]	; (8002894 <D_Slider_LightingUpdate+0xc90>)
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800268e:	da44      	bge.n	800271a <D_Slider_LightingUpdate+0xb16>
 8002690:	4a81      	ldr	r2, [pc, #516]	; (8002898 <D_Slider_LightingUpdate+0xc94>)
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	4413      	add	r3, r2
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	f083 0301 	eor.w	r3, r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d03b      	beq.n	800271a <D_Slider_LightingUpdate+0xb16>
				_animUpdate_1[side] = true;
 80026a2:	4a7d      	ldr	r2, [pc, #500]	; (8002898 <D_Slider_LightingUpdate+0xc94>)
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	4413      	add	r3, r2
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 80026ac:	4a7b      	ldr	r2, [pc, #492]	; (800289c <D_Slider_LightingUpdate+0xc98>)
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	4413      	add	r3, r2
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 80026b6:	4a7a      	ldr	r2, [pc, #488]	; (80028a0 <D_Slider_LightingUpdate+0xc9c>)
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	4879      	ldr	r0, [pc, #484]	; (80028a4 <D_Slider_LightingUpdate+0xca0>)
 80026c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c2:	461a      	mov	r2, r3
 80026c4:	0052      	lsls	r2, r2, #1
 80026c6:	441a      	add	r2, r3
 80026c8:	460b      	mov	r3, r1
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	1a5b      	subs	r3, r3, r1
 80026ce:	4413      	add	r3, r2
 80026d0:	4403      	add	r3, r0
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 80026d6:	4a72      	ldr	r2, [pc, #456]	; (80028a0 <D_Slider_LightingUpdate+0xc9c>)
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	4871      	ldr	r0, [pc, #452]	; (80028a4 <D_Slider_LightingUpdate+0xca0>)
 80026e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e2:	461a      	mov	r2, r3
 80026e4:	0052      	lsls	r2, r2, #1
 80026e6:	441a      	add	r2, r3
 80026e8:	460b      	mov	r3, r1
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a5b      	subs	r3, r3, r1
 80026ee:	4413      	add	r3, r2
 80026f0:	4403      	add	r3, r0
 80026f2:	3301      	adds	r3, #1
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 80026f8:	4a69      	ldr	r2, [pc, #420]	; (80028a0 <D_Slider_LightingUpdate+0xc9c>)
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	4413      	add	r3, r2
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4868      	ldr	r0, [pc, #416]	; (80028a4 <D_Slider_LightingUpdate+0xca0>)
 8002702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002704:	461a      	mov	r2, r3
 8002706:	0052      	lsls	r2, r2, #1
 8002708:	441a      	add	r2, r3
 800270a:	460b      	mov	r3, r1
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	1a5b      	subs	r3, r3, r1
 8002710:	4413      	add	r3, r2
 8002712:	4403      	add	r3, r0
 8002714:	3302      	adds	r3, #2
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 500 &&updateCount[side] < 580 && !_animUpdate_2[side]){
 800271a:	4a5e      	ldr	r2, [pc, #376]	; (8002894 <D_Slider_LightingUpdate+0xc90>)
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002726:	db4b      	blt.n	80027c0 <D_Slider_LightingUpdate+0xbbc>
 8002728:	4a5a      	ldr	r2, [pc, #360]	; (8002894 <D_Slider_LightingUpdate+0xc90>)
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002730:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8002734:	da44      	bge.n	80027c0 <D_Slider_LightingUpdate+0xbbc>
 8002736:	4a59      	ldr	r2, [pc, #356]	; (800289c <D_Slider_LightingUpdate+0xc98>)
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	4413      	add	r3, r2
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	f083 0301 	eor.w	r3, r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d03b      	beq.n	80027c0 <D_Slider_LightingUpdate+0xbbc>
				_animUpdate_1[side] = false;
 8002748:	4a53      	ldr	r2, [pc, #332]	; (8002898 <D_Slider_LightingUpdate+0xc94>)
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	4413      	add	r3, r2
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8002752:	4a52      	ldr	r2, [pc, #328]	; (800289c <D_Slider_LightingUpdate+0xc98>)
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	4413      	add	r3, r2
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 800275c:	4a50      	ldr	r2, [pc, #320]	; (80028a0 <D_Slider_LightingUpdate+0xc9c>)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	4413      	add	r3, r2
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	484f      	ldr	r0, [pc, #316]	; (80028a4 <D_Slider_LightingUpdate+0xca0>)
 8002766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002768:	461a      	mov	r2, r3
 800276a:	0052      	lsls	r2, r2, #1
 800276c:	441a      	add	r2, r3
 800276e:	460b      	mov	r3, r1
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a5b      	subs	r3, r3, r1
 8002774:	4413      	add	r3, r2
 8002776:	4403      	add	r3, r0
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 800277c:	4a48      	ldr	r2, [pc, #288]	; (80028a0 <D_Slider_LightingUpdate+0xc9c>)
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	4413      	add	r3, r2
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4847      	ldr	r0, [pc, #284]	; (80028a4 <D_Slider_LightingUpdate+0xca0>)
 8002786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002788:	461a      	mov	r2, r3
 800278a:	0052      	lsls	r2, r2, #1
 800278c:	441a      	add	r2, r3
 800278e:	460b      	mov	r3, r1
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a5b      	subs	r3, r3, r1
 8002794:	4413      	add	r3, r2
 8002796:	4403      	add	r3, r0
 8002798:	3301      	adds	r3, #1
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 800279e:	4a40      	ldr	r2, [pc, #256]	; (80028a0 <D_Slider_LightingUpdate+0xc9c>)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	4413      	add	r3, r2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	483f      	ldr	r0, [pc, #252]	; (80028a4 <D_Slider_LightingUpdate+0xca0>)
 80027a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027aa:	461a      	mov	r2, r3
 80027ac:	0052      	lsls	r2, r2, #1
 80027ae:	441a      	add	r2, r3
 80027b0:	460b      	mov	r3, r1
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a5b      	subs	r3, r3, r1
 80027b6:	4413      	add	r3, r2
 80027b8:	4403      	add	r3, r0
 80027ba:	3302      	adds	r3, #2
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 580 &&updateCount[side] < 700 && !_animUpdate_1[side]){
 80027c0:	4a34      	ldr	r2, [pc, #208]	; (8002894 <D_Slider_LightingUpdate+0xc90>)
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c8:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 80027cc:	db4b      	blt.n	8002866 <D_Slider_LightingUpdate+0xc62>
 80027ce:	4a31      	ldr	r2, [pc, #196]	; (8002894 <D_Slider_LightingUpdate+0xc90>)
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80027da:	da44      	bge.n	8002866 <D_Slider_LightingUpdate+0xc62>
 80027dc:	4a2e      	ldr	r2, [pc, #184]	; (8002898 <D_Slider_LightingUpdate+0xc94>)
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	4413      	add	r3, r2
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	f083 0301 	eor.w	r3, r3, #1
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d03b      	beq.n	8002866 <D_Slider_LightingUpdate+0xc62>
				_animUpdate_1[side] = true;
 80027ee:	4a2a      	ldr	r2, [pc, #168]	; (8002898 <D_Slider_LightingUpdate+0xc94>)
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	4413      	add	r3, r2
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 80027f8:	4a28      	ldr	r2, [pc, #160]	; (800289c <D_Slider_LightingUpdate+0xc98>)
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	4413      	add	r3, r2
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8002802:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <D_Slider_LightingUpdate+0xc9c>)
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	4413      	add	r3, r2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	4826      	ldr	r0, [pc, #152]	; (80028a4 <D_Slider_LightingUpdate+0xca0>)
 800280c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800280e:	461a      	mov	r2, r3
 8002810:	0052      	lsls	r2, r2, #1
 8002812:	441a      	add	r2, r3
 8002814:	460b      	mov	r3, r1
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a5b      	subs	r3, r3, r1
 800281a:	4413      	add	r3, r2
 800281c:	4403      	add	r3, r0
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8002822:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <D_Slider_LightingUpdate+0xc9c>)
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	4413      	add	r3, r2
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	481e      	ldr	r0, [pc, #120]	; (80028a4 <D_Slider_LightingUpdate+0xca0>)
 800282c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800282e:	461a      	mov	r2, r3
 8002830:	0052      	lsls	r2, r2, #1
 8002832:	441a      	add	r2, r3
 8002834:	460b      	mov	r3, r1
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a5b      	subs	r3, r3, r1
 800283a:	4413      	add	r3, r2
 800283c:	4403      	add	r3, r0
 800283e:	3301      	adds	r3, #1
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8002844:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <D_Slider_LightingUpdate+0xc9c>)
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	4815      	ldr	r0, [pc, #84]	; (80028a4 <D_Slider_LightingUpdate+0xca0>)
 800284e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002850:	461a      	mov	r2, r3
 8002852:	0052      	lsls	r2, r2, #1
 8002854:	441a      	add	r2, r3
 8002856:	460b      	mov	r3, r1
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	1a5b      	subs	r3, r3, r1
 800285c:	4413      	add	r3, r2
 800285e:	4403      	add	r3, r0
 8002860:	3302      	adds	r3, #2
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
			}

			if(updateCount[side] > 700) LightingMode[side] = SL_NORMAL_FLASH;
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <D_Slider_LightingUpdate+0xc90>)
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002872:	f340 813a 	ble.w	8002aea <D_Slider_LightingUpdate+0xee6>
 8002876:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <D_Slider_LightingUpdate+0xca4>)
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	4413      	add	r3, r2
 800287c:	2202      	movs	r2, #2
 800287e:	701a      	strb	r2, [r3, #0]

			break;
 8002880:	e133      	b.n	8002aea <D_Slider_LightingUpdate+0xee6>

		case SL_POCKET_IN_UP:
			if(_changeMode[side]){
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <D_Slider_LightingUpdate+0xca8>)
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	4413      	add	r3, r2
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d049      	beq.n	8002922 <D_Slider_LightingUpdate+0xd1e>
				for(int i=0; i<5; i++){
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	e039      	b.n	8002908 <D_Slider_LightingUpdate+0xd04>
 8002894:	2000015c 	.word	0x2000015c
 8002898:	20000174 	.word	0x20000174
 800289c:	20000178 	.word	0x20000178
 80028a0:	20000148 	.word	0x20000148
 80028a4:	2000017c 	.word	0x2000017c
 80028a8:	20000144 	.word	0x20000144
 80028ac:	20000170 	.word	0x20000170
					slideColor[side][i][0] = false;
 80028b0:	4899      	ldr	r0, [pc, #612]	; (8002b18 <D_Slider_LightingUpdate+0xf14>)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b6:	461a      	mov	r2, r3
 80028b8:	0052      	lsls	r2, r2, #1
 80028ba:	441a      	add	r2, r3
 80028bc:	460b      	mov	r3, r1
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a5b      	subs	r3, r3, r1
 80028c2:	4413      	add	r3, r2
 80028c4:	4403      	add	r3, r0
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 80028ca:	4893      	ldr	r0, [pc, #588]	; (8002b18 <D_Slider_LightingUpdate+0xf14>)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d0:	461a      	mov	r2, r3
 80028d2:	0052      	lsls	r2, r2, #1
 80028d4:	441a      	add	r2, r3
 80028d6:	460b      	mov	r3, r1
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a5b      	subs	r3, r3, r1
 80028dc:	4413      	add	r3, r2
 80028de:	4403      	add	r3, r0
 80028e0:	3301      	adds	r3, #1
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 80028e6:	488c      	ldr	r0, [pc, #560]	; (8002b18 <D_Slider_LightingUpdate+0xf14>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ec:	461a      	mov	r2, r3
 80028ee:	0052      	lsls	r2, r2, #1
 80028f0:	441a      	add	r2, r3
 80028f2:	460b      	mov	r3, r1
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	1a5b      	subs	r3, r3, r1
 80028f8:	4413      	add	r3, r2
 80028fa:	4403      	add	r3, r0
 80028fc:	3302      	adds	r3, #2
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3301      	adds	r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b04      	cmp	r3, #4
 800290c:	ddd0      	ble.n	80028b0 <D_Slider_LightingUpdate+0xcac>
				}
				_changeMode[side] = false;
 800290e:	4a83      	ldr	r2, [pc, #524]	; (8002b1c <D_Slider_LightingUpdate+0xf18>)
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	4413      	add	r3, r2
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
				counter1[side] = 0;
 8002918:	4a81      	ldr	r2, [pc, #516]	; (8002b20 <D_Slider_LightingUpdate+0xf1c>)
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	2100      	movs	r1, #0
 800291e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if(updateCount[side] >= 100 + counter1[side]*200 && updateCount[side] < 180 + counter1[side]*200 && !_animUpdate_1[side]){
 8002922:	4a7f      	ldr	r2, [pc, #508]	; (8002b20 <D_Slider_LightingUpdate+0xf1c>)
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292a:	22c8      	movs	r2, #200	; 0xc8
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8002934:	497b      	ldr	r1, [pc, #492]	; (8002b24 <D_Slider_LightingUpdate+0xf20>)
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800293c:	429a      	cmp	r2, r3
 800293e:	da53      	bge.n	80029e8 <D_Slider_LightingUpdate+0xde4>
 8002940:	4a77      	ldr	r2, [pc, #476]	; (8002b20 <D_Slider_LightingUpdate+0xf1c>)
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002948:	22c8      	movs	r2, #200	; 0xc8
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 8002952:	4974      	ldr	r1, [pc, #464]	; (8002b24 <D_Slider_LightingUpdate+0xf20>)
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800295a:	429a      	cmp	r2, r3
 800295c:	db44      	blt.n	80029e8 <D_Slider_LightingUpdate+0xde4>
 800295e:	4a72      	ldr	r2, [pc, #456]	; (8002b28 <D_Slider_LightingUpdate+0xf24>)
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	4413      	add	r3, r2
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	f083 0301 	eor.w	r3, r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d03b      	beq.n	80029e8 <D_Slider_LightingUpdate+0xde4>
				_animUpdate_1[side] = true;
 8002970:	4a6d      	ldr	r2, [pc, #436]	; (8002b28 <D_Slider_LightingUpdate+0xf24>)
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	4413      	add	r3, r2
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 800297a:	4a6c      	ldr	r2, [pc, #432]	; (8002b2c <D_Slider_LightingUpdate+0xf28>)
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	4413      	add	r3, r2
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8002984:	4a6a      	ldr	r2, [pc, #424]	; (8002b30 <D_Slider_LightingUpdate+0xf2c>)
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	4413      	add	r3, r2
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4862      	ldr	r0, [pc, #392]	; (8002b18 <D_Slider_LightingUpdate+0xf14>)
 800298e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002990:	461a      	mov	r2, r3
 8002992:	0052      	lsls	r2, r2, #1
 8002994:	441a      	add	r2, r3
 8002996:	460b      	mov	r3, r1
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a5b      	subs	r3, r3, r1
 800299c:	4413      	add	r3, r2
 800299e:	4403      	add	r3, r0
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 80029a4:	4a62      	ldr	r2, [pc, #392]	; (8002b30 <D_Slider_LightingUpdate+0xf2c>)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	4413      	add	r3, r2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	485a      	ldr	r0, [pc, #360]	; (8002b18 <D_Slider_LightingUpdate+0xf14>)
 80029ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b0:	461a      	mov	r2, r3
 80029b2:	0052      	lsls	r2, r2, #1
 80029b4:	441a      	add	r2, r3
 80029b6:	460b      	mov	r3, r1
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	1a5b      	subs	r3, r3, r1
 80029bc:	4413      	add	r3, r2
 80029be:	4403      	add	r3, r0
 80029c0:	3301      	adds	r3, #1
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 80029c6:	4a5a      	ldr	r2, [pc, #360]	; (8002b30 <D_Slider_LightingUpdate+0xf2c>)
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	4413      	add	r3, r2
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	4852      	ldr	r0, [pc, #328]	; (8002b18 <D_Slider_LightingUpdate+0xf14>)
 80029d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d2:	461a      	mov	r2, r3
 80029d4:	0052      	lsls	r2, r2, #1
 80029d6:	441a      	add	r2, r3
 80029d8:	460b      	mov	r3, r1
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a5b      	subs	r3, r3, r1
 80029de:	4413      	add	r3, r2
 80029e0:	4403      	add	r3, r0
 80029e2:	3302      	adds	r3, #2
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 180 + counter1[side]*200 && updateCount[side] < 300 + counter1[side]*200 && !_animUpdate_2[side]){
 80029e8:	4a4d      	ldr	r2, [pc, #308]	; (8002b20 <D_Slider_LightingUpdate+0xf1c>)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f0:	22c8      	movs	r2, #200	; 0xc8
 80029f2:	fb02 f303 	mul.w	r3, r2, r3
 80029f6:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 80029fa:	494a      	ldr	r1, [pc, #296]	; (8002b24 <D_Slider_LightingUpdate+0xf20>)
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	da5c      	bge.n	8002ac0 <D_Slider_LightingUpdate+0xebc>
 8002a06:	4a46      	ldr	r2, [pc, #280]	; (8002b20 <D_Slider_LightingUpdate+0xf1c>)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	22c8      	movs	r2, #200	; 0xc8
 8002a10:	fb02 f303 	mul.w	r3, r2, r3
 8002a14:	f203 122b 	addw	r2, r3, #299	; 0x12b
 8002a18:	4942      	ldr	r1, [pc, #264]	; (8002b24 <D_Slider_LightingUpdate+0xf20>)
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	db4d      	blt.n	8002ac0 <D_Slider_LightingUpdate+0xebc>
 8002a24:	4a41      	ldr	r2, [pc, #260]	; (8002b2c <D_Slider_LightingUpdate+0xf28>)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	f083 0301 	eor.w	r3, r3, #1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d044      	beq.n	8002ac0 <D_Slider_LightingUpdate+0xebc>
				_animUpdate_1[side] = false;
 8002a36:	4a3c      	ldr	r2, [pc, #240]	; (8002b28 <D_Slider_LightingUpdate+0xf24>)
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	4413      	add	r3, r2
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8002a40:	4a3a      	ldr	r2, [pc, #232]	; (8002b2c <D_Slider_LightingUpdate+0xf28>)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	4413      	add	r3, r2
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8002a4a:	4a39      	ldr	r2, [pc, #228]	; (8002b30 <D_Slider_LightingUpdate+0xf2c>)
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	4831      	ldr	r0, [pc, #196]	; (8002b18 <D_Slider_LightingUpdate+0xf14>)
 8002a54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a56:	461a      	mov	r2, r3
 8002a58:	0052      	lsls	r2, r2, #1
 8002a5a:	441a      	add	r2, r3
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	1a5b      	subs	r3, r3, r1
 8002a62:	4413      	add	r3, r2
 8002a64:	4403      	add	r3, r0
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = false;
 8002a6a:	4a31      	ldr	r2, [pc, #196]	; (8002b30 <D_Slider_LightingUpdate+0xf2c>)
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	4413      	add	r3, r2
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	4829      	ldr	r0, [pc, #164]	; (8002b18 <D_Slider_LightingUpdate+0xf14>)
 8002a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a76:	461a      	mov	r2, r3
 8002a78:	0052      	lsls	r2, r2, #1
 8002a7a:	441a      	add	r2, r3
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a5b      	subs	r3, r3, r1
 8002a82:	4413      	add	r3, r2
 8002a84:	4403      	add	r3, r0
 8002a86:	3301      	adds	r3, #1
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = false;
 8002a8c:	4a28      	ldr	r2, [pc, #160]	; (8002b30 <D_Slider_LightingUpdate+0xf2c>)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	4413      	add	r3, r2
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4820      	ldr	r0, [pc, #128]	; (8002b18 <D_Slider_LightingUpdate+0xf14>)
 8002a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a98:	461a      	mov	r2, r3
 8002a9a:	0052      	lsls	r2, r2, #1
 8002a9c:	441a      	add	r2, r3
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	1a5b      	subs	r3, r3, r1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	4403      	add	r3, r0
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
				counter1[side]++;
 8002aae:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <D_Slider_LightingUpdate+0xf1c>)
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	4919      	ldr	r1, [pc, #100]	; (8002b20 <D_Slider_LightingUpdate+0xf1c>)
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			if(updateCount[side] > 2000) LightingMode[side] = SL_NORMAL_FLASH;
 8002ac0:	4a18      	ldr	r2, [pc, #96]	; (8002b24 <D_Slider_LightingUpdate+0xf20>)
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002acc:	dd0f      	ble.n	8002aee <D_Slider_LightingUpdate+0xeea>
 8002ace:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <D_Slider_LightingUpdate+0xf30>)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	4413      	add	r3, r2
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	701a      	strb	r2, [r3, #0]

			break;
 8002ad8:	e009      	b.n	8002aee <D_Slider_LightingUpdate+0xeea>
			break;
 8002ada:	bf00      	nop
 8002adc:	e008      	b.n	8002af0 <D_Slider_LightingUpdate+0xeec>
			break;
 8002ade:	bf00      	nop
 8002ae0:	e006      	b.n	8002af0 <D_Slider_LightingUpdate+0xeec>
			break;
 8002ae2:	bf00      	nop
 8002ae4:	e004      	b.n	8002af0 <D_Slider_LightingUpdate+0xeec>
			break;
 8002ae6:	bf00      	nop
 8002ae8:	e002      	b.n	8002af0 <D_Slider_LightingUpdate+0xeec>
			break;
 8002aea:	bf00      	nop
 8002aec:	e000      	b.n	8002af0 <D_Slider_LightingUpdate+0xeec>
			break;
 8002aee:	bf00      	nop
	for(int side = 0; side < 2; side++){
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	3301      	adds	r3, #1
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f77f a88d 	ble.w	8001c18 <D_Slider_LightingUpdate+0x14>
		}
	}

	recentUpdateCount = G_System_counter;
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <D_Slider_LightingUpdate+0xf34>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <D_Slider_LightingUpdate+0xf38>)
 8002b06:	601a      	str	r2, [r3, #0]
	D_Slider_SetColorData(slideColor[0], slideColor[1]);
 8002b08:	490d      	ldr	r1, [pc, #52]	; (8002b40 <D_Slider_LightingUpdate+0xf3c>)
 8002b0a:	4803      	ldr	r0, [pc, #12]	; (8002b18 <D_Slider_LightingUpdate+0xf14>)
 8002b0c:	f000 f94a 	bl	8002da4 <D_Slider_SetColorData>
}
 8002b10:	bf00      	nop
 8002b12:	3728      	adds	r7, #40	; 0x28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	2000017c 	.word	0x2000017c
 8002b1c:	20000170 	.word	0x20000170
 8002b20:	2000019c 	.word	0x2000019c
 8002b24:	2000015c 	.word	0x2000015c
 8002b28:	20000174 	.word	0x20000174
 8002b2c:	20000178 	.word	0x20000178
 8002b30:	20000148 	.word	0x20000148
 8002b34:	20000144 	.word	0x20000144
 8002b38:	200000b0 	.word	0x200000b0
 8002b3c:	20000164 	.word	0x20000164
 8002b40:	2000018b 	.word	0x2000018b

08002b44 <D_Slider_GetPocketR>:

int D_Slider_GetPocketR(bool _reset){
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
	static int recentSensorCount[5] = {{0}};
	static int returnPocket = -1;
	if (_reset) {
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <D_Slider_GetPocketR+0x1e>
		returnPocket = -1;
 8002b54:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <D_Slider_GetPocketR+0x6c>)
 8002b56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b5a:	601a      	str	r2, [r3, #0]
		return returnPocket;
 8002b5c:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <D_Slider_GetPocketR+0x6c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	e01f      	b.n	8002ba2 <D_Slider_GetPocketR+0x5e>
	}
	for(int i=0; i<5; i++){
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	e017      	b.n	8002b98 <D_Slider_GetPocketR+0x54>
		if(SensorCount[0][i] != recentSensorCount[i]){
 8002b68:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <D_Slider_GetPocketR+0x70>)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b70:	4911      	ldr	r1, [pc, #68]	; (8002bb8 <D_Slider_GetPocketR+0x74>)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d002      	beq.n	8002b82 <D_Slider_GetPocketR+0x3e>
			returnPocket = i;
 8002b7c:	4a0c      	ldr	r2, [pc, #48]	; (8002bb0 <D_Slider_GetPocketR+0x6c>)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6013      	str	r3, [r2, #0]
		}
		recentSensorCount[i] = SensorCount[0][i];
 8002b82:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <D_Slider_GetPocketR+0x70>)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b8a:	490b      	ldr	r1, [pc, #44]	; (8002bb8 <D_Slider_GetPocketR+0x74>)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3301      	adds	r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	dde4      	ble.n	8002b68 <D_Slider_GetPocketR+0x24>
	}
	return returnPocket;
 8002b9e:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <D_Slider_GetPocketR+0x6c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000018 	.word	0x20000018
 8002bb4:	20000118 	.word	0x20000118
 8002bb8:	200001a4 	.word	0x200001a4

08002bbc <D_Slider_GetPocketL>:

int D_Slider_GetPocketL(bool _reset){
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
	static int recentSensorCount[5] = {{0}};
	static int returnPocket = -1;
	if (_reset) {
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d006      	beq.n	8002bda <D_Slider_GetPocketL+0x1e>
		returnPocket = -1;
 8002bcc:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <D_Slider_GetPocketL+0x70>)
 8002bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bd2:	601a      	str	r2, [r3, #0]
		return returnPocket;
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <D_Slider_GetPocketL+0x70>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	e021      	b.n	8002c1e <D_Slider_GetPocketL+0x62>
	}
	for(int i=0; i<5; i++){
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	e019      	b.n	8002c14 <D_Slider_GetPocketL+0x58>
		if(SensorCount[1][i] != recentSensorCount[i]){
 8002be0:	4a13      	ldr	r2, [pc, #76]	; (8002c30 <D_Slider_GetPocketL+0x74>)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3305      	adds	r3, #5
 8002be6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002bea:	4912      	ldr	r1, [pc, #72]	; (8002c34 <D_Slider_GetPocketL+0x78>)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d002      	beq.n	8002bfc <D_Slider_GetPocketL+0x40>
			returnPocket = i;
 8002bf6:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <D_Slider_GetPocketL+0x70>)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6013      	str	r3, [r2, #0]
		}
		recentSensorCount[i] = SensorCount[1][i];
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <D_Slider_GetPocketL+0x74>)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3305      	adds	r3, #5
 8002c02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c06:	490b      	ldr	r1, [pc, #44]	; (8002c34 <D_Slider_GetPocketL+0x78>)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3301      	adds	r3, #1
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	dde2      	ble.n	8002be0 <D_Slider_GetPocketL+0x24>
	}
	return returnPocket;
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <D_Slider_GetPocketL+0x70>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	2000001c 	.word	0x2000001c
 8002c30:	20000118 	.word	0x20000118
 8002c34:	200001b8 	.word	0x200001b8

08002c38 <D_Slider_Send>:

int D_Slider_Send(uint8_t* data, int length){
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
	if(!had_completed_tx){
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <D_Slider_Send+0x44>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f083 0301 	eor.w	r3, r3, #1
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <D_Slider_Send+0x20>
		return -1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c56:	e00d      	b.n	8002c74 <D_Slider_Send+0x3c>
	}
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data, length);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4807      	ldr	r0, [pc, #28]	; (8002c80 <D_Slider_Send+0x48>)
 8002c62:	f003 fcc1 	bl	80065e8 <HAL_UART_Transmit_DMA>
	_send = true;
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <D_Slider_Send+0x4c>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
	had_completed_tx = false;
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <D_Slider_Send+0x44>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
	return 0;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000014 	.word	0x20000014
 8002c80:	2000082c 	.word	0x2000082c
 8002c84:	20000140 	.word	0x20000140

08002c88 <D_Slider_Receive>:

int D_Slider_Receive(uint8_t* data, int length){
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
	if(!had_completed_rx){
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <D_Slider_Receive+0x40>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f083 0301 	eor.w	r3, r3, #1
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <D_Slider_Receive+0x20>
		return -1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca6:	e00a      	b.n	8002cbe <D_Slider_Receive+0x36>
	}
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)data, length);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4806      	ldr	r0, [pc, #24]	; (8002ccc <D_Slider_Receive+0x44>)
 8002cb2:	f003 fd17 	bl	80066e4 <HAL_UART_Receive_DMA>
	had_completed_rx = false;
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <D_Slider_Receive+0x40>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
	return 0;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000015 	.word	0x20000015
 8002ccc:	2000082c 	.word	0x2000082c

08002cd0 <D_Slider_CheckData>:
	}else{
		return SensorCount[1][num];
	}
}

void D_Slider_CheckData(uint8_t* data, int length){
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2be0      	cmp	r3, #224	; 0xe0
 8002ce0:	d155      	bne.n	8002d8e <D_Slider_CheckData+0xbe>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d150      	bne.n	8002d8e <D_Slider_CheckData+0xbe>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3302      	adds	r3, #2
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d14b      	bne.n	8002d8e <D_Slider_CheckData+0xbe>
	uint8_t sum = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	e009      	b.n	8002d14 <D_Slider_CheckData+0x44>
		sum += data[i];
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	3301      	adds	r3, #1
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	ddf2      	ble.n	8002d00 <D_Slider_CheckData+0x30>
	}
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3309      	adds	r3, #9
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	7dfa      	ldrb	r2, [r7, #23]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d135      	bne.n	8002d92 <D_Slider_CheckData+0xc2>
	for(int i=0; i<5; i++){
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e02c      	b.n	8002d86 <D_Slider_CheckData+0xb6>
		if(((data[7]>>i) & 1) == 1) SensorCount[1][i]++;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3307      	adds	r3, #7
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	fa42 f303 	asr.w	r3, r2, r3
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <D_Slider_CheckData+0x88>
 8002d42:	4a17      	ldr	r2, [pc, #92]	; (8002da0 <D_Slider_CheckData+0xd0>)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3305      	adds	r3, #5
 8002d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	4914      	ldr	r1, [pc, #80]	; (8002da0 <D_Slider_CheckData+0xd0>)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3305      	adds	r3, #5
 8002d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(((data[8]>>i) & 1) == 1) SensorCount[0][i]++;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	fa42 f303 	asr.w	r3, r2, r3
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <D_Slider_CheckData+0xb0>
 8002d6e:	4a0c      	ldr	r2, [pc, #48]	; (8002da0 <D_Slider_CheckData+0xd0>)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	4909      	ldr	r1, [pc, #36]	; (8002da0 <D_Slider_CheckData+0xd0>)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3301      	adds	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	ddcf      	ble.n	8002d2c <D_Slider_CheckData+0x5c>
 8002d8c:	e002      	b.n	8002d94 <D_Slider_CheckData+0xc4>
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 8002d8e:	bf00      	nop
 8002d90:	e000      	b.n	8002d94 <D_Slider_CheckData+0xc4>
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 8002d92:	bf00      	nop
	}
}
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000118 	.word	0x20000118

08002da4 <D_Slider_SetColorData>:

void D_Slider_SetColorData(bool setColorR[][3], bool setColorL[][3]){
 8002da4:	b4b0      	push	{r4, r5, r7}
 8002da6:	b08b      	sub	sp, #44	; 0x2c
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
	if (!_send) return;
 8002dae:	4b8d      	ldr	r3, [pc, #564]	; (8002fe4 <D_Slider_SetColorData+0x240>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	f083 0301 	eor.w	r3, r3, #1
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 810e 	bne.w	8002fda <D_Slider_SetColorData+0x236>
	_send = false;
 8002dbe:	4b89      	ldr	r3, [pc, #548]	; (8002fe4 <D_Slider_SetColorData+0x240>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
	SendData[0] = FIRSTBYTE;
 8002dc4:	4b88      	ldr	r3, [pc, #544]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002dc6:	22e0      	movs	r2, #224	; 0xe0
 8002dc8:	701a      	strb	r2, [r3, #0]
	SendData[1] = ADDRESS;
 8002dca:	4b87      	ldr	r3, [pc, #540]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	705a      	strb	r2, [r3, #1]
	SendData[2] = COLORSEND_SEQNUM;
 8002dd0:	4b85      	ldr	r3, [pc, #532]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002dd2:	2205      	movs	r2, #5
 8002dd4:	709a      	strb	r2, [r3, #2]
	SendData[3] = COLORSEND_DATANUM;
 8002dd6:	4b84      	ldr	r3, [pc, #528]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002dd8:	2205      	movs	r2, #5
 8002dda:	70da      	strb	r2, [r3, #3]
	SendData[4] = COLORSEND_CMD;
 8002ddc:	4b82      	ldr	r3, [pc, #520]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002dde:	2232      	movs	r2, #50	; 0x32
 8002de0:	711a      	strb	r2, [r3, #4]
	SendData[5] = 0;
 8002de2:	4b81      	ldr	r3, [pc, #516]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	715a      	strb	r2, [r3, #5]
	SendData[6] = 0;
 8002de8:	4b7f      	ldr	r3, [pc, #508]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	719a      	strb	r2, [r3, #6]
	SendData[7] = 0;
 8002dee:	4b7e      	ldr	r3, [pc, #504]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	71da      	strb	r2, [r3, #7]
	SendData[8] = 0;
 8002df4:	4b7c      	ldr	r3, [pc, #496]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	721a      	strb	r2, [r3, #8]
	SendData[9] = 0;
 8002dfa:	4b7b      	ldr	r3, [pc, #492]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	725a      	strb	r2, [r3, #9]
	SendData[10] = 0;
 8002e00:	4b79      	ldr	r3, [pc, #484]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	729a      	strb	r2, [r3, #10]
	SendData[11] = 0;
 8002e06:	4b78      	ldr	r3, [pc, #480]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	72da      	strb	r2, [r3, #11]
	SendData[12] = 0;
 8002e0c:	4b76      	ldr	r3, [pc, #472]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	731a      	strb	r2, [r3, #12]
	SendData[13] = 0;
 8002e12:	4b75      	ldr	r3, [pc, #468]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	735a      	strb	r2, [r3, #13]
	SendData[14] = 0;
 8002e18:	4b73      	ldr	r3, [pc, #460]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	739a      	strb	r2, [r3, #14]
	for(int i=1; i<16; i++){
 8002e1e:	2301      	movs	r3, #1
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
 8002e22:	e038      	b.n	8002e96 <D_Slider_SetColorData+0xf2>
		SendData[5 + (i/8)] |= (setColorR[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	da00      	bge.n	8002e2c <D_Slider_SetColorData+0x88>
 8002e2a:	3307      	adds	r3, #7
 8002e2c:	10db      	asrs	r3, r3, #3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	1d43      	adds	r3, r0, #5
 8002e32:	4a6d      	ldr	r2, [pc, #436]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002e34:	5cd3      	ldrb	r3, [r2, r3]
 8002e36:	b25c      	sxtb	r4, r3
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	4a6b      	ldr	r2, [pc, #428]	; (8002fec <D_Slider_SetColorData+0x248>)
 8002e3e:	fb82 1203 	smull	r1, r2, r2, r3
 8002e42:	17db      	asrs	r3, r3, #31
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	3304      	adds	r3, #4
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	18d5      	adds	r5, r2, r3
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	1e59      	subs	r1, r3, #1
 8002e58:	4b64      	ldr	r3, [pc, #400]	; (8002fec <D_Slider_SetColorData+0x248>)
 8002e5a:	fb83 3201 	smull	r3, r2, r3, r1
 8002e5e:	17cb      	asrs	r3, r1, #31
 8002e60:	1ad2      	subs	r2, r2, r3
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	1aca      	subs	r2, r1, r3
 8002e6a:	5cab      	ldrb	r3, [r5, r2]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	425a      	negs	r2, r3
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	f002 0207 	and.w	r2, r2, #7
 8002e7a:	bf58      	it	pl
 8002e7c:	4253      	negpl	r3, r2
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	b25b      	sxtb	r3, r3
 8002e84:	4323      	orrs	r3, r4
 8002e86:	b25a      	sxtb	r2, r3
 8002e88:	1d43      	adds	r3, r0, #5
 8002e8a:	b2d1      	uxtb	r1, r2
 8002e8c:	4a56      	ldr	r2, [pc, #344]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002e8e:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	3301      	adds	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	2b0f      	cmp	r3, #15
 8002e9a:	ddc3      	ble.n	8002e24 <D_Slider_SetColorData+0x80>
	}
	for(int i=1; i<16; i++){
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	e038      	b.n	8002f14 <D_Slider_SetColorData+0x170>
		SendData[7 + (i/8)] |= (setColorL[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	da00      	bge.n	8002eaa <D_Slider_SetColorData+0x106>
 8002ea8:	3307      	adds	r3, #7
 8002eaa:	10db      	asrs	r3, r3, #3
 8002eac:	4618      	mov	r0, r3
 8002eae:	1dc3      	adds	r3, r0, #7
 8002eb0:	4a4d      	ldr	r2, [pc, #308]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	b25c      	sxtb	r4, r3
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	4a4c      	ldr	r2, [pc, #304]	; (8002fec <D_Slider_SetColorData+0x248>)
 8002ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ec0:	17db      	asrs	r3, r3, #31
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	18d5      	adds	r5, r2, r3
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	1e59      	subs	r1, r3, #1
 8002ed6:	4b45      	ldr	r3, [pc, #276]	; (8002fec <D_Slider_SetColorData+0x248>)
 8002ed8:	fb83 3201 	smull	r3, r2, r3, r1
 8002edc:	17cb      	asrs	r3, r1, #31
 8002ede:	1ad2      	subs	r2, r2, r3
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	1aca      	subs	r2, r1, r3
 8002ee8:	5cab      	ldrb	r3, [r5, r2]
 8002eea:	4619      	mov	r1, r3
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	425a      	negs	r2, r3
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	f002 0207 	and.w	r2, r2, #7
 8002ef8:	bf58      	it	pl
 8002efa:	4253      	negpl	r3, r2
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	b25b      	sxtb	r3, r3
 8002f02:	4323      	orrs	r3, r4
 8002f04:	b25a      	sxtb	r2, r3
 8002f06:	1dc3      	adds	r3, r0, #7
 8002f08:	b2d1      	uxtb	r1, r2
 8002f0a:	4a37      	ldr	r2, [pc, #220]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002f0c:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	3301      	adds	r3, #1
 8002f12:	623b      	str	r3, [r7, #32]
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	ddc3      	ble.n	8002ea2 <D_Slider_SetColorData+0xfe>
	}

	uint8_t dataSum = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	77fb      	strb	r3, [r7, #31]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 8002f1e:	2301      	movs	r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	e009      	b.n	8002f38 <D_Slider_SetColorData+0x194>
		dataSum += SendData[i];
 8002f24:	4a30      	ldr	r2, [pc, #192]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4413      	add	r3, r2
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	7ffb      	ldrb	r3, [r7, #31]
 8002f2e:	4413      	add	r3, r2
 8002f30:	77fb      	strb	r3, [r7, #31]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	3301      	adds	r3, #1
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	ddf2      	ble.n	8002f24 <D_Slider_SetColorData+0x180>
	}

	AdditionalPacket = 0;
 8002f3e:	4b2c      	ldr	r3, [pc, #176]	; (8002ff0 <D_Slider_SetColorData+0x24c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
		//SendData[10] = SendData[9];
		//SendData[8] = SendData[7];
		SendData[10] = tempData;
	}
	*/
	for(int i=5; i<9+AdditionalPacket; i++){
 8002f44:	2305      	movs	r3, #5
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	e03a      	b.n	8002fc0 <D_Slider_SetColorData+0x21c>
		if(SendData[i] == ESCAPE_PACKET || SendData[i] == FIRSTBYTE) {
 8002f4a:	4a27      	ldr	r2, [pc, #156]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2bd0      	cmp	r3, #208	; 0xd0
 8002f54:	d005      	beq.n	8002f62 <D_Slider_SetColorData+0x1be>
 8002f56:	4a24      	ldr	r2, [pc, #144]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2be0      	cmp	r3, #224	; 0xe0
 8002f60:	d12b      	bne.n	8002fba <D_Slider_SetColorData+0x216>
			AdditionalPacket++;
 8002f62:	4b23      	ldr	r3, [pc, #140]	; (8002ff0 <D_Slider_SetColorData+0x24c>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <D_Slider_SetColorData+0x24c>)
 8002f6c:	701a      	strb	r2, [r3, #0]
			uint8_t tempData = SendData[i] - 1;
 8002f6e:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
			SendData[i] = ESCAPE_PACKET;
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	4413      	add	r3, r2
 8002f80:	22d0      	movs	r2, #208	; 0xd0
 8002f82:	701a      	strb	r2, [r3, #0]
			for(int j=i+3; j>i; j--){
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	3303      	adds	r3, #3
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e00a      	b.n	8002fa2 <D_Slider_SetColorData+0x1fe>
				SendData[j+1] = SendData[j];
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	4915      	ldr	r1, [pc, #84]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	440a      	add	r2, r1
 8002f96:	7811      	ldrb	r1, [r2, #0]
 8002f98:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002f9a:	54d1      	strb	r1, [r2, r3]
			for(int j=i+3; j>i; j--){
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	dcf0      	bgt.n	8002f8c <D_Slider_SetColorData+0x1e8>
			}
			SendData[i+1] = tempData;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	3301      	adds	r3, #1
 8002fae:	490e      	ldr	r1, [pc, #56]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	54ca      	strb	r2, [r1, r3]
			i++;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
	for(int i=5; i<9+AdditionalPacket; i++){
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <D_Slider_SetColorData+0x24c>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	ddbe      	ble.n	8002f4a <D_Slider_SetColorData+0x1a6>
		}
	}

	SendData[COLORSEND_LENGTH-1 + AdditionalPacket] = (uint8_t)dataSum;
 8002fcc:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <D_Slider_SetColorData+0x24c>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	3309      	adds	r3, #9
 8002fd2:	4905      	ldr	r1, [pc, #20]	; (8002fe8 <D_Slider_SetColorData+0x244>)
 8002fd4:	7ffa      	ldrb	r2, [r7, #31]
 8002fd6:	54ca      	strb	r2, [r1, r3]
 8002fd8:	e000      	b.n	8002fdc <D_Slider_SetColorData+0x238>
	if (!_send) return;
 8002fda:	bf00      	nop
}
 8002fdc:	372c      	adds	r7, #44	; 0x2c
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bcb0      	pop	{r4, r5, r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	20000140 	.word	0x20000140
 8002fe8:	200000b4 	.word	0x200000b4
 8002fec:	55555556 	.word	0x55555556
 8002ff0:	200000f4 	.word	0x200000f4

08002ff4 <D_Slider_TransitionCompletedCallBack>:


void D_Slider_TransitionCompletedCallBack(){
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
	had_completed_tx = true;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <D_Slider_TransitionCompletedCallBack+0x14>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
	//SndErrTime = 0;
}
 8002ffe:	bf00      	nop
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	20000014 	.word	0x20000014

0800300c <D_Slider_ReceptionCompletedCallBack>:

void D_Slider_ReceptionCompletedCallBack(){
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
	had_completed_rx = true;
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <D_Slider_ReceptionCompletedCallBack+0x18>)
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
	//RcvErrTime = 0;
	D_Slider_CheckData((uint8_t*)RecvData, 10);
 8003016:	210a      	movs	r1, #10
 8003018:	4803      	ldr	r0, [pc, #12]	; (8003028 <D_Slider_ReceptionCompletedCallBack+0x1c>)
 800301a:	f7ff fe59 	bl	8002cd0 <D_Slider_CheckData>
			TouchData[i] = RecvData[i+3];
		}
	}
	*/
	//D_USBHID_SetSendData_Touch(TouchData);
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000015 	.word	0x20000015
 8003028:	200000f8 	.word	0x200000f8

0800302c <D_GPIO_Set>:
#include "../Inc/GPIO.h"
#include <stdlib.h>
#include <stdbool.h>
#include "stm32f4xx_hal.h"

void D_GPIO_Set(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_SET);
 8003038:	887b      	ldrh	r3, [r7, #2]
 800303a:	2201      	movs	r2, #1
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f001 fe7a 	bl	8004d38 <HAL_GPIO_WritePin>
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <D_GPIO_Reset>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
 8003058:	887b      	ldrh	r3, [r7, #2]
 800305a:	2200      	movs	r2, #0
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f001 fe6a 	bl	8004d38 <HAL_GPIO_WritePin>
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <D_GPIO_Read>:

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 8003078:	887b      	ldrh	r3, [r7, #2]
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f001 fe43 	bl	8004d08 <HAL_GPIO_ReadPin>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed_tx){
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <D_Mess_flush+0x54>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f083 0301 	eor.w	r3, r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <D_Mess_flush+0x1c>
		outptr = buff;
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <D_Mess_flush+0x58>)
 80030ae:	4a11      	ldr	r2, [pc, #68]	; (80030f4 <D_Mess_flush+0x5c>)
 80030b0:	601a      	str	r2, [r3, #0]
		return;
 80030b2:	e01a      	b.n	80030ea <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <D_Mess_flush+0x58>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d013      	beq.n	80030e4 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <D_Mess_flush+0x58>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	490b      	ldr	r1, [pc, #44]	; (80030f0 <D_Mess_flush+0x58>)
 80030c4:	600a      	str	r2, [r1, #0]
 80030c6:	220a      	movs	r2, #10
 80030c8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <D_Mess_flush+0x58>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <D_Mess_flush+0x5c>)
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	4907      	ldr	r1, [pc, #28]	; (80030f4 <D_Mess_flush+0x5c>)
 80030d8:	4807      	ldr	r0, [pc, #28]	; (80030f8 <D_Mess_flush+0x60>)
 80030da:	f003 fa85 	bl	80065e8 <HAL_UART_Transmit_DMA>
		had_completed_tx = false;
 80030de:	4b03      	ldr	r3, [pc, #12]	; (80030ec <D_Mess_flush+0x54>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 80030e4:	4b02      	ldr	r3, [pc, #8]	; (80030f0 <D_Mess_flush+0x58>)
 80030e6:	4a03      	ldr	r2, [pc, #12]	; (80030f4 <D_Mess_flush+0x5c>)
 80030e8:	601a      	str	r2, [r3, #0]
}
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000020 	.word	0x20000020
 80030f0:	2000092c 	.word	0x2000092c
 80030f4:	200001cc 	.word	0x200001cc
 80030f8:	200008b8 	.word	0x200008b8

080030fc <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  had_completed_tx = true;
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <D_Mess_TransitionCompletedCallBack+0x14>)
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
}
 8003106:	bf00      	nop
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	20000020 	.word	0x20000020

08003114 <D_Mess_ReceptionCompletedCallBack>:
void D_Mess_ReceptionCompletedCallBack(void){
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  had_completed_rx = true;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <D_Mess_ReceptionCompletedCallBack+0x14>)
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
}
 800311e:	bf00      	nop
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	20000021 	.word	0x20000021

0800312c <D_PWM_Init>:
#include <stdlib.h>
#include "stm32f4xx_hal.h"

//extern TIM_HandleTypeDef htim3;

void D_PWM_Init(void){
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003130:	2100      	movs	r1, #0
 8003132:	4808      	ldr	r0, [pc, #32]	; (8003154 <D_PWM_Init+0x28>)
 8003134:	f002 fc2c 	bl	8005990 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003138:	2104      	movs	r1, #4
 800313a:	4806      	ldr	r0, [pc, #24]	; (8003154 <D_PWM_Init+0x28>)
 800313c:	f002 fc28 	bl	8005990 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003140:	2108      	movs	r1, #8
 8003142:	4804      	ldr	r0, [pc, #16]	; (8003154 <D_PWM_Init+0x28>)
 8003144:	f002 fc24 	bl	8005990 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003148:	210c      	movs	r1, #12
 800314a:	4802      	ldr	r0, [pc, #8]	; (8003154 <D_PWM_Init+0x28>)
 800314c:	f002 fc20 	bl	8005990 <HAL_TIM_PWM_Start>
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}
 8003154:	200006c4 	.word	0x200006c4

08003158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_Init+0x40>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <HAL_Init+0x40>)
 8003162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_Init+0x40>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <HAL_Init+0x40>)
 800316e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_Init+0x40>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_Init+0x40>)
 800317a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003180:	2003      	movs	r0, #3
 8003182:	f000 ffe9 	bl	8004158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003186:	2000      	movs	r0, #0
 8003188:	f000 f808 	bl	800319c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800318c:	f7fd ff26 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023c00 	.word	0x40023c00

0800319c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_InitTick+0x54>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_InitTick+0x58>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f001 f801 	bl	80041c2 <HAL_SYSTICK_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00e      	b.n	80031e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d80a      	bhi.n	80031e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d0:	2200      	movs	r2, #0
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031d8:	f000 ffc9 	bl	800416e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031dc:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <HAL_InitTick+0x5c>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000010 	.word	0x20000010
 80031f4:	20000028 	.word	0x20000028
 80031f8:	20000024 	.word	0x20000024

080031fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_IncTick+0x20>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_IncTick+0x24>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4413      	add	r3, r2
 800320c:	4a04      	ldr	r2, [pc, #16]	; (8003220 <HAL_IncTick+0x24>)
 800320e:	6013      	str	r3, [r2, #0]
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000028 	.word	0x20000028
 8003220:	20000930 	.word	0x20000930

08003224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return uwTick;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_GetTick+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000930 	.word	0x20000930

0800323c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0ed      	b.n	800342a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fd fee6 	bl	800102c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003270:	f7ff ffd8 	bl	8003224 <HAL_GetTick>
 8003274:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003276:	e012      	b.n	800329e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003278:	f7ff ffd4 	bl	8003224 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b0a      	cmp	r3, #10
 8003284:	d90b      	bls.n	800329e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2205      	movs	r2, #5
 8003296:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0c5      	b.n	800342a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0e5      	beq.n	8003278 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0202 	bic.w	r2, r2, #2
 80032ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032bc:	f7ff ffb2 	bl	8003224 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032c2:	e012      	b.n	80032ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032c4:	f7ff ffae 	bl	8003224 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b0a      	cmp	r3, #10
 80032d0:	d90b      	bls.n	80032ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2205      	movs	r2, #5
 80032e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e09f      	b.n	800342a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e5      	bne.n	80032c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	7e1b      	ldrb	r3, [r3, #24]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d108      	bne.n	8003312 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e007      	b.n	8003322 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003320:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	7e5b      	ldrb	r3, [r3, #25]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d108      	bne.n	800333c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e007      	b.n	800334c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800334a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	7e9b      	ldrb	r3, [r3, #26]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d108      	bne.n	8003366 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0220 	orr.w	r2, r2, #32
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e007      	b.n	8003376 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0220 	bic.w	r2, r2, #32
 8003374:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	7edb      	ldrb	r3, [r3, #27]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d108      	bne.n	8003390 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0210 	bic.w	r2, r2, #16
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e007      	b.n	80033a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0210 	orr.w	r2, r2, #16
 800339e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	7f1b      	ldrb	r3, [r3, #28]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d108      	bne.n	80033ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0208 	orr.w	r2, r2, #8
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	e007      	b.n	80033ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0208 	bic.w	r2, r2, #8
 80033c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	7f5b      	ldrb	r3, [r3, #29]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d108      	bne.n	80033e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0204 	orr.w	r2, r2, #4
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	e007      	b.n	80033f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0204 	bic.w	r2, r2, #4
 80033f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	ea42 0103 	orr.w	r1, r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	1e5a      	subs	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800344a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d003      	beq.n	800345a <HAL_CAN_ConfigFilter+0x26>
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	2b02      	cmp	r3, #2
 8003456:	f040 80be 	bne.w	80035d6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800345a:	4b65      	ldr	r3, [pc, #404]	; (80035f0 <HAL_CAN_ConfigFilter+0x1bc>)
 800345c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003474:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	431a      	orrs	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	2201      	movs	r2, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	401a      	ands	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d123      	bne.n	8003504 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	401a      	ands	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80034de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3248      	adds	r2, #72	; 0x48
 80034e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80034f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80034fa:	6979      	ldr	r1, [r7, #20]
 80034fc:	3348      	adds	r3, #72	; 0x48
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	440b      	add	r3, r1
 8003502:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d122      	bne.n	8003552 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	431a      	orrs	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800352c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	3248      	adds	r2, #72	; 0x48
 8003532:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003546:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003548:	6979      	ldr	r1, [r7, #20]
 800354a:	3348      	adds	r3, #72	; 0x48
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	43db      	mvns	r3, r3
 8003564:	401a      	ands	r2, r3
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800356c:	e007      	b.n	800357e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	431a      	orrs	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	43db      	mvns	r3, r3
 8003590:	401a      	ands	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003598:	e007      	b.n	80035aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d107      	bne.n	80035c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035c8:	f023 0201 	bic.w	r2, r3, #1
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e006      	b.n	80035e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
  }
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40006400 	.word	0x40006400

080035f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d12e      	bne.n	8003666 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003620:	f7ff fe00 	bl	8003224 <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003626:	e012      	b.n	800364e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003628:	f7ff fdfc 	bl	8003224 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b0a      	cmp	r3, #10
 8003634:	d90b      	bls.n	800364e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2205      	movs	r2, #5
 8003646:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e012      	b.n	8003674 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e5      	bne.n	8003628 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	e006      	b.n	8003674 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
  }
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800367c:	b480      	push	{r7}
 800367e:	b089      	sub	sp, #36	; 0x24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003690:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800369a:	7ffb      	ldrb	r3, [r7, #31]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d003      	beq.n	80036a8 <HAL_CAN_AddTxMessage+0x2c>
 80036a0:	7ffb      	ldrb	r3, [r7, #31]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	f040 80b8 	bne.w	8003818 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d105      	bne.n	80036c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 80a0 	beq.w	8003808 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	0e1b      	lsrs	r3, r3, #24
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d907      	bls.n	80036e8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e09e      	b.n	8003826 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80036e8:	2201      	movs	r2, #1
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	409a      	lsls	r2, r3
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10d      	bne.n	8003716 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003704:	68f9      	ldr	r1, [r7, #12]
 8003706:	6809      	ldr	r1, [r1, #0]
 8003708:	431a      	orrs	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	3318      	adds	r3, #24
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	440b      	add	r3, r1
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e00f      	b.n	8003736 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003720:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003726:	68f9      	ldr	r1, [r7, #12]
 8003728:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800372a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	3318      	adds	r3, #24
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	440b      	add	r3, r1
 8003734:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	3318      	adds	r3, #24
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	440b      	add	r3, r1
 8003746:	3304      	adds	r3, #4
 8003748:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	7d1b      	ldrb	r3, [r3, #20]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d111      	bne.n	8003776 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	3318      	adds	r3, #24
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	4413      	add	r3, r2
 800375e:	3304      	adds	r3, #4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	6811      	ldr	r1, [r2, #0]
 8003766:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	3318      	adds	r3, #24
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	440b      	add	r3, r1
 8003772:	3304      	adds	r3, #4
 8003774:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3307      	adds	r3, #7
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	061a      	lsls	r2, r3, #24
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3306      	adds	r3, #6
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3305      	adds	r3, #5
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	4313      	orrs	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	3204      	adds	r2, #4
 8003796:	7812      	ldrb	r2, [r2, #0]
 8003798:	4610      	mov	r0, r2
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	6811      	ldr	r1, [r2, #0]
 800379e:	ea43 0200 	orr.w	r2, r3, r0
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	440b      	add	r3, r1
 80037a8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80037ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3303      	adds	r3, #3
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	061a      	lsls	r2, r3, #24
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3302      	adds	r3, #2
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3301      	adds	r3, #1
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	4313      	orrs	r3, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	7812      	ldrb	r2, [r2, #0]
 80037ce:	4610      	mov	r0, r2
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	6811      	ldr	r1, [r2, #0]
 80037d4:	ea43 0200 	orr.w	r2, r3, r0
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	440b      	add	r3, r1
 80037de:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80037e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3318      	adds	r3, #24
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	4413      	add	r3, r2
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	6811      	ldr	r1, [r2, #0]
 80037f6:	f043 0201 	orr.w	r2, r3, #1
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	3318      	adds	r3, #24
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	440b      	add	r3, r1
 8003802:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e00e      	b.n	8003826 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e006      	b.n	8003826 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
  }
}
 8003826:	4618      	mov	r0, r3
 8003828:	3724      	adds	r7, #36	; 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003832:	b480      	push	{r7}
 8003834:	b085      	sub	sp, #20
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003842:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d002      	beq.n	8003850 <HAL_CAN_AbortTxRequest+0x1e>
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d128      	bne.n	80038a2 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003868:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003882:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800389c:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e006      	b.n	80038b0 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ce:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80038d0:	7afb      	ldrb	r3, [r7, #11]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d002      	beq.n	80038dc <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80038d6:	7afb      	ldrb	r3, [r7, #11]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d11d      	bne.n	8003918 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3301      	adds	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3301      	adds	r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3301      	adds	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003918:	68fb      	ldr	r3, [r7, #12]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003926:	b480      	push	{r7}
 8003928:	b087      	sub	sp, #28
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800393a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d003      	beq.n	800394a <HAL_CAN_GetRxMessage+0x24>
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	2b02      	cmp	r3, #2
 8003946:	f040 80f3 	bne.w	8003b30 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10e      	bne.n	800396e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d116      	bne.n	800398c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e0e7      	b.n	8003b3e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d107      	bne.n	800398c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0d8      	b.n	8003b3e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	331b      	adds	r3, #27
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	4413      	add	r3, r2
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0204 	and.w	r2, r3, #4
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10c      	bne.n	80039c4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	331b      	adds	r3, #27
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	4413      	add	r3, r2
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	0d5b      	lsrs	r3, r3, #21
 80039ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	e00b      	b.n	80039dc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	331b      	adds	r3, #27
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	4413      	add	r3, r2
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	08db      	lsrs	r3, r3, #3
 80039d4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	331b      	adds	r3, #27
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	4413      	add	r3, r2
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0202 	and.w	r2, r3, #2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	331b      	adds	r3, #27
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	4413      	add	r3, r2
 80039fe:	3304      	adds	r3, #4
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 020f 	and.w	r2, r3, #15
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	331b      	adds	r3, #27
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	4413      	add	r3, r2
 8003a16:	3304      	adds	r3, #4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	331b      	adds	r3, #27
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3304      	adds	r3, #4
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	0c1b      	lsrs	r3, r3, #16
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	0a1a      	lsrs	r2, r3, #8
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	3301      	adds	r3, #1
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	0c1a      	lsrs	r2, r3, #16
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	3302      	adds	r3, #2
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	0e1a      	lsrs	r2, r3, #24
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	3303      	adds	r3, #3
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	0a1a      	lsrs	r2, r3, #8
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	3305      	adds	r3, #5
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0c1a      	lsrs	r2, r3, #16
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	3306      	adds	r3, #6
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	0e1a      	lsrs	r2, r3, #24
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	3307      	adds	r3, #7
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d108      	bne.n	8003b1c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0220 	orr.w	r2, r2, #32
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	e007      	b.n	8003b2c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0220 	orr.w	r2, r2, #32
 8003b2a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e006      	b.n	8003b3e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
  }
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	371c      	adds	r7, #28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b5a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d002      	beq.n	8003b68 <HAL_CAN_ActivateNotification+0x1e>
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d109      	bne.n	8003b7c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6959      	ldr	r1, [r3, #20]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e006      	b.n	8003b8a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
  }
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b08a      	sub	sp, #40	; 0x28
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d07c      	beq.n	8003cd6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d023      	beq.n	8003c2e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2201      	movs	r2, #1
 8003bec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7fd f9cb 	bl	8000f94 <HAL_CAN_TxMailbox0CompleteCallback>
 8003bfe:	e016      	b.n	8003c2e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d004      	beq.n	8003c14 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
 8003c12:	e00c      	b.n	8003c2e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
 8003c26:	e002      	b.n	8003c2e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f96b 	bl	8003f04 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d024      	beq.n	8003c82 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fd f9ab 	bl	8000fa8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003c52:	e016      	b.n	8003c82 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
 8003c66:	e00c      	b.n	8003c82 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7a:	e002      	b.n	8003c82 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f94b 	bl	8003f18 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d024      	beq.n	8003cd6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7fd f98b 	bl	8000fbc <HAL_CAN_TxMailbox2CompleteCallback>
 8003ca6:	e016      	b.n	8003cd6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cba:	e00c      	b.n	8003cd6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d004      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	e002      	b.n	8003cd6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f92b 	bl	8003f2c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00c      	beq.n	8003cfa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2210      	movs	r2, #16
 8003cf8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00b      	beq.n	8003d1c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d006      	beq.n	8003d1c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2208      	movs	r2, #8
 8003d14:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f912 	bl	8003f40 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7fd f91b 	bl	8000f70 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00c      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d007      	beq.n	8003d5e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2210      	movs	r2, #16
 8003d5c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d006      	beq.n	8003d80 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2208      	movs	r2, #8
 8003d78:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f8f4 	bl	8003f68 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f8db 	bl	8003f54 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00b      	beq.n	8003dc0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d006      	beq.n	8003dc0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2210      	movs	r2, #16
 8003db8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f8de 	bl	8003f7c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d006      	beq.n	8003de2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2208      	movs	r2, #8
 8003dda:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f8d7 	bl	8003f90 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d07b      	beq.n	8003ee4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d072      	beq.n	8003edc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	f043 0302 	orr.w	r3, r3, #2
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	f043 0304 	orr.w	r3, r3, #4
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d043      	beq.n	8003edc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d03e      	beq.n	8003edc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e64:	2b60      	cmp	r3, #96	; 0x60
 8003e66:	d02b      	beq.n	8003ec0 <HAL_CAN_IRQHandler+0x32a>
 8003e68:	2b60      	cmp	r3, #96	; 0x60
 8003e6a:	d82e      	bhi.n	8003eca <HAL_CAN_IRQHandler+0x334>
 8003e6c:	2b50      	cmp	r3, #80	; 0x50
 8003e6e:	d022      	beq.n	8003eb6 <HAL_CAN_IRQHandler+0x320>
 8003e70:	2b50      	cmp	r3, #80	; 0x50
 8003e72:	d82a      	bhi.n	8003eca <HAL_CAN_IRQHandler+0x334>
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d019      	beq.n	8003eac <HAL_CAN_IRQHandler+0x316>
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d826      	bhi.n	8003eca <HAL_CAN_IRQHandler+0x334>
 8003e7c:	2b30      	cmp	r3, #48	; 0x30
 8003e7e:	d010      	beq.n	8003ea2 <HAL_CAN_IRQHandler+0x30c>
 8003e80:	2b30      	cmp	r3, #48	; 0x30
 8003e82:	d822      	bhi.n	8003eca <HAL_CAN_IRQHandler+0x334>
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d002      	beq.n	8003e8e <HAL_CAN_IRQHandler+0x2f8>
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d005      	beq.n	8003e98 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003e8c:	e01d      	b.n	8003eca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	f043 0308 	orr.w	r3, r3, #8
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e96:	e019      	b.n	8003ecc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	f043 0310 	orr.w	r3, r3, #16
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ea0:	e014      	b.n	8003ecc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	f043 0320 	orr.w	r3, r3, #32
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eaa:	e00f      	b.n	8003ecc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eb4:	e00a      	b.n	8003ecc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ebe:	e005      	b.n	8003ecc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ec8:	e000      	b.n	8003ecc <HAL_CAN_IRQHandler+0x336>
            break;
 8003eca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003eda:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f854 	bl	8003fa4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003efc:	bf00      	nop
 8003efe:	3728      	adds	r7, #40	; 0x28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <__NVIC_SetPriorityGrouping+0x44>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fea:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <__NVIC_SetPriorityGrouping+0x44>)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	60d3      	str	r3, [r2, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <__NVIC_GetPriorityGrouping+0x18>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	0a1b      	lsrs	r3, r3, #8
 800400a:	f003 0307 	and.w	r3, r3, #7
}
 800400e:	4618      	mov	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402a:	2b00      	cmp	r3, #0
 800402c:	db0b      	blt.n	8004046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	f003 021f 	and.w	r2, r3, #31
 8004034:	4907      	ldr	r1, [pc, #28]	; (8004054 <__NVIC_EnableIRQ+0x38>)
 8004036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	2001      	movs	r0, #1
 800403e:	fa00 f202 	lsl.w	r2, r0, r2
 8004042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	e000e100 	.word	0xe000e100

08004058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	6039      	str	r1, [r7, #0]
 8004062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004068:	2b00      	cmp	r3, #0
 800406a:	db0a      	blt.n	8004082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	b2da      	uxtb	r2, r3
 8004070:	490c      	ldr	r1, [pc, #48]	; (80040a4 <__NVIC_SetPriority+0x4c>)
 8004072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004076:	0112      	lsls	r2, r2, #4
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	440b      	add	r3, r1
 800407c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004080:	e00a      	b.n	8004098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	4908      	ldr	r1, [pc, #32]	; (80040a8 <__NVIC_SetPriority+0x50>)
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	3b04      	subs	r3, #4
 8004090:	0112      	lsls	r2, r2, #4
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	440b      	add	r3, r1
 8004096:	761a      	strb	r2, [r3, #24]
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	e000e100 	.word	0xe000e100
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	; 0x24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f1c3 0307 	rsb	r3, r3, #7
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	bf28      	it	cs
 80040ca:	2304      	movcs	r3, #4
 80040cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3304      	adds	r3, #4
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d902      	bls.n	80040dc <NVIC_EncodePriority+0x30>
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3b03      	subs	r3, #3
 80040da:	e000      	b.n	80040de <NVIC_EncodePriority+0x32>
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43da      	mvns	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	401a      	ands	r2, r3
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fa01 f303 	lsl.w	r3, r1, r3
 80040fe:	43d9      	mvns	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004104:	4313      	orrs	r3, r2
         );
}
 8004106:	4618      	mov	r0, r3
 8004108:	3724      	adds	r7, #36	; 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004124:	d301      	bcc.n	800412a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004126:	2301      	movs	r3, #1
 8004128:	e00f      	b.n	800414a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <SysTick_Config+0x40>)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3b01      	subs	r3, #1
 8004130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004132:	210f      	movs	r1, #15
 8004134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004138:	f7ff ff8e 	bl	8004058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <SysTick_Config+0x40>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <SysTick_Config+0x40>)
 8004144:	2207      	movs	r2, #7
 8004146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	e000e010 	.word	0xe000e010

08004158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ff29 	bl	8003fb8 <__NVIC_SetPriorityGrouping>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	4603      	mov	r3, r0
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004180:	f7ff ff3e 	bl	8004000 <__NVIC_GetPriorityGrouping>
 8004184:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f7ff ff8e 	bl	80040ac <NVIC_EncodePriority>
 8004190:	4602      	mov	r2, r0
 8004192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ff5d 	bl	8004058 <__NVIC_SetPriority>
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	4603      	mov	r3, r0
 80041ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff ff31 	bl	800401c <__NVIC_EnableIRQ>
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ffa2 	bl	8004114 <SysTick_Config>
 80041d0:	4603      	mov	r3, r0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041e8:	f7ff f81c 	bl	8003224 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e099      	b.n	800432c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004218:	e00f      	b.n	800423a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800421a:	f7ff f803 	bl	8003224 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b05      	cmp	r3, #5
 8004226:	d908      	bls.n	800423a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2203      	movs	r2, #3
 8004232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e078      	b.n	800432c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e8      	bne.n	800421a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4b38      	ldr	r3, [pc, #224]	; (8004334 <HAL_DMA_Init+0x158>)
 8004254:	4013      	ands	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004266:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004272:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800427e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	2b04      	cmp	r3, #4
 8004292:	d107      	bne.n	80042a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	4313      	orrs	r3, r2
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0307 	bic.w	r3, r3, #7
 80042ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d117      	bne.n	80042fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00e      	beq.n	80042fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fb01 	bl	80048e8 <DMA_CheckFifoParam>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2240      	movs	r2, #64	; 0x40
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80042fa:	2301      	movs	r3, #1
 80042fc:	e016      	b.n	800432c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fab8 	bl	800487c <DMA_CalcBaseAndBitshift>
 800430c:	4603      	mov	r3, r0
 800430e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004314:	223f      	movs	r2, #63	; 0x3f
 8004316:	409a      	lsls	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	f010803f 	.word	0xf010803f

08004338 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_DMA_Start_IT+0x26>
 800435a:	2302      	movs	r3, #2
 800435c:	e040      	b.n	80043e0 <HAL_DMA_Start_IT+0xa8>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b01      	cmp	r3, #1
 8004370:	d12f      	bne.n	80043d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fa4a 	bl	8004820 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004390:	223f      	movs	r2, #63	; 0x3f
 8004392:	409a      	lsls	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0216 	orr.w	r2, r2, #22
 80043a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0208 	orr.w	r2, r2, #8
 80043be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	e005      	b.n	80043de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043da:	2302      	movs	r3, #2
 80043dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043f6:	f7fe ff15 	bl	8003224 <HAL_GetTick>
 80043fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d008      	beq.n	800441a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2280      	movs	r2, #128	; 0x80
 800440c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e052      	b.n	80044c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0216 	bic.w	r2, r2, #22
 8004428:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004438:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <HAL_DMA_Abort+0x62>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0208 	bic.w	r2, r2, #8
 8004458:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800446a:	e013      	b.n	8004494 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800446c:	f7fe feda 	bl	8003224 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b05      	cmp	r3, #5
 8004478:	d90c      	bls.n	8004494 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2203      	movs	r2, #3
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e015      	b.n	80044c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e4      	bne.n	800446c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a6:	223f      	movs	r2, #63	; 0x3f
 80044a8:	409a      	lsls	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d004      	beq.n	80044e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2280      	movs	r2, #128	; 0x80
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e00c      	b.n	8004500 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2205      	movs	r2, #5
 80044ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004518:	4b92      	ldr	r3, [pc, #584]	; (8004764 <HAL_DMA_IRQHandler+0x258>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a92      	ldr	r2, [pc, #584]	; (8004768 <HAL_DMA_IRQHandler+0x25c>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	0a9b      	lsrs	r3, r3, #10
 8004524:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004536:	2208      	movs	r2, #8
 8004538:	409a      	lsls	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01a      	beq.n	8004578 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d013      	beq.n	8004578 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0204 	bic.w	r2, r2, #4
 800455e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	2208      	movs	r2, #8
 8004566:	409a      	lsls	r2, r3
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004570:	f043 0201 	orr.w	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457c:	2201      	movs	r2, #1
 800457e:	409a      	lsls	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d012      	beq.n	80045ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459a:	2201      	movs	r2, #1
 800459c:	409a      	lsls	r2, r3
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	f043 0202 	orr.w	r2, r3, #2
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b2:	2204      	movs	r2, #4
 80045b4:	409a      	lsls	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d012      	beq.n	80045e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d0:	2204      	movs	r2, #4
 80045d2:	409a      	lsls	r2, r3
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045dc:	f043 0204 	orr.w	r2, r3, #4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	2210      	movs	r2, #16
 80045ea:	409a      	lsls	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d043      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d03c      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004606:	2210      	movs	r2, #16
 8004608:	409a      	lsls	r2, r3
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d018      	beq.n	800464e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d108      	bne.n	800463c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	d024      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
 800463a:	e01f      	b.n	800467c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01b      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	4798      	blx	r3
 800464c:	e016      	b.n	800467c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d107      	bne.n	800466c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0208 	bic.w	r2, r2, #8
 800466a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004680:	2220      	movs	r2, #32
 8004682:	409a      	lsls	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 808e 	beq.w	80047aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8086 	beq.w	80047aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a2:	2220      	movs	r2, #32
 80046a4:	409a      	lsls	r2, r3
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b05      	cmp	r3, #5
 80046b4:	d136      	bne.n	8004724 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0216 	bic.w	r2, r2, #22
 80046c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <HAL_DMA_IRQHandler+0x1da>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0208 	bic.w	r2, r2, #8
 80046f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fa:	223f      	movs	r2, #63	; 0x3f
 80046fc:	409a      	lsls	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	2b00      	cmp	r3, #0
 8004718:	d07d      	beq.n	8004816 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	4798      	blx	r3
        }
        return;
 8004722:	e078      	b.n	8004816 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01c      	beq.n	800476c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d108      	bne.n	8004752 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004744:	2b00      	cmp	r3, #0
 8004746:	d030      	beq.n	80047aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
 8004750:	e02b      	b.n	80047aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d027      	beq.n	80047aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
 8004762:	e022      	b.n	80047aa <HAL_DMA_IRQHandler+0x29e>
 8004764:	20000010 	.word	0x20000010
 8004768:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10f      	bne.n	800479a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0210 	bic.w	r2, r2, #16
 8004788:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d032      	beq.n	8004818 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d022      	beq.n	8004804 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2205      	movs	r2, #5
 80047c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0201 	bic.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	3301      	adds	r3, #1
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d307      	bcc.n	80047f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f2      	bne.n	80047d6 <HAL_DMA_IRQHandler+0x2ca>
 80047f0:	e000      	b.n	80047f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80047f2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	4798      	blx	r3
 8004814:	e000      	b.n	8004818 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004816:	bf00      	nop
    }
  }
}
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop

08004820 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800483c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d108      	bne.n	8004860 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800485e:	e007      	b.n	8004870 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]
}
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	3b10      	subs	r3, #16
 800488c:	4a14      	ldr	r2, [pc, #80]	; (80048e0 <DMA_CalcBaseAndBitshift+0x64>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004896:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d909      	bls.n	80048be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048b2:	f023 0303 	bic.w	r3, r3, #3
 80048b6:	1d1a      	adds	r2, r3, #4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	659a      	str	r2, [r3, #88]	; 0x58
 80048bc:	e007      	b.n	80048ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	aaaaaaab 	.word	0xaaaaaaab
 80048e4:	0800782c 	.word	0x0800782c

080048e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d11f      	bne.n	8004942 <DMA_CheckFifoParam+0x5a>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d856      	bhi.n	80049b6 <DMA_CheckFifoParam+0xce>
 8004908:	a201      	add	r2, pc, #4	; (adr r2, 8004910 <DMA_CheckFifoParam+0x28>)
 800490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490e:	bf00      	nop
 8004910:	08004921 	.word	0x08004921
 8004914:	08004933 	.word	0x08004933
 8004918:	08004921 	.word	0x08004921
 800491c:	080049b7 	.word	0x080049b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d046      	beq.n	80049ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004930:	e043      	b.n	80049ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800493a:	d140      	bne.n	80049be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004940:	e03d      	b.n	80049be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494a:	d121      	bne.n	8004990 <DMA_CheckFifoParam+0xa8>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b03      	cmp	r3, #3
 8004950:	d837      	bhi.n	80049c2 <DMA_CheckFifoParam+0xda>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <DMA_CheckFifoParam+0x70>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	08004969 	.word	0x08004969
 800495c:	0800496f 	.word	0x0800496f
 8004960:	08004969 	.word	0x08004969
 8004964:	08004981 	.word	0x08004981
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	e030      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d025      	beq.n	80049c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800497e:	e022      	b.n	80049c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004988:	d11f      	bne.n	80049ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800498e:	e01c      	b.n	80049ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d903      	bls.n	800499e <DMA_CheckFifoParam+0xb6>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b03      	cmp	r3, #3
 800499a:	d003      	beq.n	80049a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800499c:	e018      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
      break;
 80049a2:	e015      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00e      	beq.n	80049ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
      break;
 80049b4:	e00b      	b.n	80049ce <DMA_CheckFifoParam+0xe6>
      break;
 80049b6:	bf00      	nop
 80049b8:	e00a      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049ba:	bf00      	nop
 80049bc:	e008      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049be:	bf00      	nop
 80049c0:	e006      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049c2:	bf00      	nop
 80049c4:	e004      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049c6:	bf00      	nop
 80049c8:	e002      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80049ca:	bf00      	nop
 80049cc:	e000      	b.n	80049d0 <DMA_CheckFifoParam+0xe8>
      break;
 80049ce:	bf00      	nop
    }
  } 
  
  return status; 
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop

080049e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	e165      	b.n	8004cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049fc:	2201      	movs	r2, #1
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	f040 8154 	bne.w	8004cc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d005      	beq.n	8004a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d130      	bne.n	8004a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a68:	2201      	movs	r2, #1
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4013      	ands	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 0201 	and.w	r2, r3, #1
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d017      	beq.n	8004ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	2203      	movs	r2, #3
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d123      	bne.n	8004b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	08da      	lsrs	r2, r3, #3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3208      	adds	r2, #8
 8004ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	220f      	movs	r2, #15
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	43db      	mvns	r3, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4013      	ands	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	08da      	lsrs	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3208      	adds	r2, #8
 8004b1e:	69b9      	ldr	r1, [r7, #24]
 8004b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	2203      	movs	r2, #3
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 0203 	and.w	r2, r3, #3
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80ae 	beq.w	8004cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	4b5d      	ldr	r3, [pc, #372]	; (8004ce0 <HAL_GPIO_Init+0x300>)
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6e:	4a5c      	ldr	r2, [pc, #368]	; (8004ce0 <HAL_GPIO_Init+0x300>)
 8004b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b74:	6453      	str	r3, [r2, #68]	; 0x44
 8004b76:	4b5a      	ldr	r3, [pc, #360]	; (8004ce0 <HAL_GPIO_Init+0x300>)
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b82:	4a58      	ldr	r2, [pc, #352]	; (8004ce4 <HAL_GPIO_Init+0x304>)
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	089b      	lsrs	r3, r3, #2
 8004b88:	3302      	adds	r3, #2
 8004b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	220f      	movs	r2, #15
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a4f      	ldr	r2, [pc, #316]	; (8004ce8 <HAL_GPIO_Init+0x308>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d025      	beq.n	8004bfa <HAL_GPIO_Init+0x21a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a4e      	ldr	r2, [pc, #312]	; (8004cec <HAL_GPIO_Init+0x30c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d01f      	beq.n	8004bf6 <HAL_GPIO_Init+0x216>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a4d      	ldr	r2, [pc, #308]	; (8004cf0 <HAL_GPIO_Init+0x310>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d019      	beq.n	8004bf2 <HAL_GPIO_Init+0x212>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a4c      	ldr	r2, [pc, #304]	; (8004cf4 <HAL_GPIO_Init+0x314>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <HAL_GPIO_Init+0x20e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a4b      	ldr	r2, [pc, #300]	; (8004cf8 <HAL_GPIO_Init+0x318>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00d      	beq.n	8004bea <HAL_GPIO_Init+0x20a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a4a      	ldr	r2, [pc, #296]	; (8004cfc <HAL_GPIO_Init+0x31c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d007      	beq.n	8004be6 <HAL_GPIO_Init+0x206>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a49      	ldr	r2, [pc, #292]	; (8004d00 <HAL_GPIO_Init+0x320>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d101      	bne.n	8004be2 <HAL_GPIO_Init+0x202>
 8004bde:	2306      	movs	r3, #6
 8004be0:	e00c      	b.n	8004bfc <HAL_GPIO_Init+0x21c>
 8004be2:	2307      	movs	r3, #7
 8004be4:	e00a      	b.n	8004bfc <HAL_GPIO_Init+0x21c>
 8004be6:	2305      	movs	r3, #5
 8004be8:	e008      	b.n	8004bfc <HAL_GPIO_Init+0x21c>
 8004bea:	2304      	movs	r3, #4
 8004bec:	e006      	b.n	8004bfc <HAL_GPIO_Init+0x21c>
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e004      	b.n	8004bfc <HAL_GPIO_Init+0x21c>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e002      	b.n	8004bfc <HAL_GPIO_Init+0x21c>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <HAL_GPIO_Init+0x21c>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	f002 0203 	and.w	r2, r2, #3
 8004c02:	0092      	lsls	r2, r2, #2
 8004c04:	4093      	lsls	r3, r2
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c0c:	4935      	ldr	r1, [pc, #212]	; (8004ce4 <HAL_GPIO_Init+0x304>)
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	089b      	lsrs	r3, r3, #2
 8004c12:	3302      	adds	r3, #2
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c1a:	4b3a      	ldr	r3, [pc, #232]	; (8004d04 <HAL_GPIO_Init+0x324>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	43db      	mvns	r3, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c3e:	4a31      	ldr	r2, [pc, #196]	; (8004d04 <HAL_GPIO_Init+0x324>)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c44:	4b2f      	ldr	r3, [pc, #188]	; (8004d04 <HAL_GPIO_Init+0x324>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4013      	ands	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c68:	4a26      	ldr	r2, [pc, #152]	; (8004d04 <HAL_GPIO_Init+0x324>)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c6e:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <HAL_GPIO_Init+0x324>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	43db      	mvns	r3, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c92:	4a1c      	ldr	r2, [pc, #112]	; (8004d04 <HAL_GPIO_Init+0x324>)
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c98:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <HAL_GPIO_Init+0x324>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cbc:	4a11      	ldr	r2, [pc, #68]	; (8004d04 <HAL_GPIO_Init+0x324>)
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	2b0f      	cmp	r3, #15
 8004ccc:	f67f ae96 	bls.w	80049fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	3724      	adds	r7, #36	; 0x24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	40013800 	.word	0x40013800
 8004ce8:	40020000 	.word	0x40020000
 8004cec:	40020400 	.word	0x40020400
 8004cf0:	40020800 	.word	0x40020800
 8004cf4:	40020c00 	.word	0x40020c00
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40021400 	.word	0x40021400
 8004d00:	40021800 	.word	0x40021800
 8004d04:	40013c00 	.word	0x40013c00

08004d08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	887b      	ldrh	r3, [r7, #2]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
 8004d24:	e001      	b.n	8004d2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d26:	2300      	movs	r3, #0
 8004d28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	807b      	strh	r3, [r7, #2]
 8004d44:	4613      	mov	r3, r2
 8004d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d48:	787b      	ldrb	r3, [r7, #1]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d4e:	887a      	ldrh	r2, [r7, #2]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d54:	e003      	b.n	8004d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d56:	887b      	ldrh	r3, [r7, #2]
 8004d58:	041a      	lsls	r2, r3, #16
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	619a      	str	r2, [r3, #24]
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0cc      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d80:	4b68      	ldr	r3, [pc, #416]	; (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d90c      	bls.n	8004da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b65      	ldr	r3, [pc, #404]	; (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d96:	4b63      	ldr	r3, [pc, #396]	; (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0b8      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d020      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc0:	4b59      	ldr	r3, [pc, #356]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4a58      	ldr	r2, [pc, #352]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dd8:	4b53      	ldr	r3, [pc, #332]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	4a52      	ldr	r2, [pc, #328]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de4:	4b50      	ldr	r3, [pc, #320]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	494d      	ldr	r1, [pc, #308]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d044      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d107      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	4b47      	ldr	r3, [pc, #284]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d119      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e07f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d003      	beq.n	8004e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2a:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e06f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3a:	4b3b      	ldr	r3, [pc, #236]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e067      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e4a:	4b37      	ldr	r3, [pc, #220]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f023 0203 	bic.w	r2, r3, #3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4934      	ldr	r1, [pc, #208]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e5c:	f7fe f9e2 	bl	8003224 <HAL_GetTick>
 8004e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e62:	e00a      	b.n	8004e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e64:	f7fe f9de 	bl	8003224 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e04f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7a:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 020c 	and.w	r2, r3, #12
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d1eb      	bne.n	8004e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e8c:	4b25      	ldr	r3, [pc, #148]	; (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d20c      	bcs.n	8004eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9a:	4b22      	ldr	r3, [pc, #136]	; (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e032      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec0:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4916      	ldr	r1, [pc, #88]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ede:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	490e      	ldr	r1, [pc, #56]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ef2:	f000 f855 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	490a      	ldr	r1, [pc, #40]	; (8004f2c <HAL_RCC_ClockConfig+0x1c0>)
 8004f04:	5ccb      	ldrb	r3, [r1, r3]
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f0e:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe f942 	bl	800319c <HAL_InitTick>

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40023c00 	.word	0x40023c00
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	08007814 	.word	0x08007814
 8004f30:	20000010 	.word	0x20000010
 8004f34:	20000024 	.word	0x20000024

08004f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f3c:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	20000010 	.word	0x20000010

08004f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f54:	f7ff fff0 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	0a9b      	lsrs	r3, r3, #10
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	4903      	ldr	r1, [pc, #12]	; (8004f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40023800 	.word	0x40023800
 8004f74:	08007824 	.word	0x08007824

08004f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f7c:	f7ff ffdc 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f80:	4602      	mov	r2, r0
 8004f82:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	0b5b      	lsrs	r3, r3, #13
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	4903      	ldr	r1, [pc, #12]	; (8004f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f8e:	5ccb      	ldrb	r3, [r1, r3]
 8004f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	08007824 	.word	0x08007824

08004fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa4:	b088      	sub	sp, #32
 8004fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fbc:	4bce      	ldr	r3, [pc, #824]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 030c 	and.w	r3, r3, #12
 8004fc4:	2b0c      	cmp	r3, #12
 8004fc6:	f200 818d 	bhi.w	80052e4 <HAL_RCC_GetSysClockFreq+0x344>
 8004fca:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <HAL_RCC_GetSysClockFreq+0x30>)
 8004fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd0:	08005005 	.word	0x08005005
 8004fd4:	080052e5 	.word	0x080052e5
 8004fd8:	080052e5 	.word	0x080052e5
 8004fdc:	080052e5 	.word	0x080052e5
 8004fe0:	0800500b 	.word	0x0800500b
 8004fe4:	080052e5 	.word	0x080052e5
 8004fe8:	080052e5 	.word	0x080052e5
 8004fec:	080052e5 	.word	0x080052e5
 8004ff0:	08005011 	.word	0x08005011
 8004ff4:	080052e5 	.word	0x080052e5
 8004ff8:	080052e5 	.word	0x080052e5
 8004ffc:	080052e5 	.word	0x080052e5
 8005000:	08005185 	.word	0x08005185
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005004:	4bbd      	ldr	r3, [pc, #756]	; (80052fc <HAL_RCC_GetSysClockFreq+0x35c>)
 8005006:	61bb      	str	r3, [r7, #24]
       break;
 8005008:	e16f      	b.n	80052ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800500a:	4bbd      	ldr	r3, [pc, #756]	; (8005300 <HAL_RCC_GetSysClockFreq+0x360>)
 800500c:	61bb      	str	r3, [r7, #24]
      break;
 800500e:	e16c      	b.n	80052ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005010:	4bb9      	ldr	r3, [pc, #740]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005018:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800501a:	4bb7      	ldr	r3, [pc, #732]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d053      	beq.n	80050ce <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005026:	4bb4      	ldr	r3, [pc, #720]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	099b      	lsrs	r3, r3, #6
 800502c:	461a      	mov	r2, r3
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005036:	f04f 0100 	mov.w	r1, #0
 800503a:	ea02 0400 	and.w	r4, r2, r0
 800503e:	603c      	str	r4, [r7, #0]
 8005040:	400b      	ands	r3, r1
 8005042:	607b      	str	r3, [r7, #4]
 8005044:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005048:	4620      	mov	r0, r4
 800504a:	4629      	mov	r1, r5
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	014b      	lsls	r3, r1, #5
 8005056:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800505a:	0142      	lsls	r2, r0, #5
 800505c:	4610      	mov	r0, r2
 800505e:	4619      	mov	r1, r3
 8005060:	4623      	mov	r3, r4
 8005062:	1ac0      	subs	r0, r0, r3
 8005064:	462b      	mov	r3, r5
 8005066:	eb61 0103 	sbc.w	r1, r1, r3
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	018b      	lsls	r3, r1, #6
 8005074:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005078:	0182      	lsls	r2, r0, #6
 800507a:	1a12      	subs	r2, r2, r0
 800507c:	eb63 0301 	sbc.w	r3, r3, r1
 8005080:	f04f 0000 	mov.w	r0, #0
 8005084:	f04f 0100 	mov.w	r1, #0
 8005088:	00d9      	lsls	r1, r3, #3
 800508a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800508e:	00d0      	lsls	r0, r2, #3
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4621      	mov	r1, r4
 8005096:	1852      	adds	r2, r2, r1
 8005098:	4629      	mov	r1, r5
 800509a:	eb43 0101 	adc.w	r1, r3, r1
 800509e:	460b      	mov	r3, r1
 80050a0:	f04f 0000 	mov.w	r0, #0
 80050a4:	f04f 0100 	mov.w	r1, #0
 80050a8:	0259      	lsls	r1, r3, #9
 80050aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80050ae:	0250      	lsls	r0, r2, #9
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4610      	mov	r0, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	461a      	mov	r2, r3
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	f7fb f8a0 	bl	8000204 <__aeabi_uldivmod>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4613      	mov	r3, r2
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	e04c      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ce:	4b8a      	ldr	r3, [pc, #552]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x358>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	099b      	lsrs	r3, r3, #6
 80050d4:	461a      	mov	r2, r3
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050de:	f04f 0100 	mov.w	r1, #0
 80050e2:	ea02 0a00 	and.w	sl, r2, r0
 80050e6:	ea03 0b01 	and.w	fp, r3, r1
 80050ea:	4650      	mov	r0, sl
 80050ec:	4659      	mov	r1, fp
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	014b      	lsls	r3, r1, #5
 80050f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050fc:	0142      	lsls	r2, r0, #5
 80050fe:	4610      	mov	r0, r2
 8005100:	4619      	mov	r1, r3
 8005102:	ebb0 000a 	subs.w	r0, r0, sl
 8005106:	eb61 010b 	sbc.w	r1, r1, fp
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	018b      	lsls	r3, r1, #6
 8005114:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005118:	0182      	lsls	r2, r0, #6
 800511a:	1a12      	subs	r2, r2, r0
 800511c:	eb63 0301 	sbc.w	r3, r3, r1
 8005120:	f04f 0000 	mov.w	r0, #0
 8005124:	f04f 0100 	mov.w	r1, #0
 8005128:	00d9      	lsls	r1, r3, #3
 800512a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800512e:	00d0      	lsls	r0, r2, #3
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	eb12 020a 	adds.w	r2, r2, sl
 8005138:	eb43 030b 	adc.w	r3, r3, fp
 800513c:	f04f 0000 	mov.w	r0, #0
 8005140:	f04f 0100 	mov.w	r1, #0
 8005144:	0299      	lsls	r1, r3, #10
 8005146:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800514a:	0290      	lsls	r0, r2, #10
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4610      	mov	r0, r2
 8005152:	4619      	mov	r1, r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	461a      	mov	r2, r3
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	f7fb f852 	bl	8000204 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4613      	mov	r3, r2
 8005166:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005168:	4b63      	ldr	r3, [pc, #396]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	0c1b      	lsrs	r3, r3, #16
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	3301      	adds	r3, #1
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	61bb      	str	r3, [r7, #24]
      break;
 8005182:	e0b2      	b.n	80052ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005184:	4b5c      	ldr	r3, [pc, #368]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800518c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800518e:	4b5a      	ldr	r3, [pc, #360]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d04d      	beq.n	8005236 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519a:	4b57      	ldr	r3, [pc, #348]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	099b      	lsrs	r3, r3, #6
 80051a0:	461a      	mov	r2, r3
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051aa:	f04f 0100 	mov.w	r1, #0
 80051ae:	ea02 0800 	and.w	r8, r2, r0
 80051b2:	ea03 0901 	and.w	r9, r3, r1
 80051b6:	4640      	mov	r0, r8
 80051b8:	4649      	mov	r1, r9
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	014b      	lsls	r3, r1, #5
 80051c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051c8:	0142      	lsls	r2, r0, #5
 80051ca:	4610      	mov	r0, r2
 80051cc:	4619      	mov	r1, r3
 80051ce:	ebb0 0008 	subs.w	r0, r0, r8
 80051d2:	eb61 0109 	sbc.w	r1, r1, r9
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	018b      	lsls	r3, r1, #6
 80051e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051e4:	0182      	lsls	r2, r0, #6
 80051e6:	1a12      	subs	r2, r2, r0
 80051e8:	eb63 0301 	sbc.w	r3, r3, r1
 80051ec:	f04f 0000 	mov.w	r0, #0
 80051f0:	f04f 0100 	mov.w	r1, #0
 80051f4:	00d9      	lsls	r1, r3, #3
 80051f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051fa:	00d0      	lsls	r0, r2, #3
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	eb12 0208 	adds.w	r2, r2, r8
 8005204:	eb43 0309 	adc.w	r3, r3, r9
 8005208:	f04f 0000 	mov.w	r0, #0
 800520c:	f04f 0100 	mov.w	r1, #0
 8005210:	0259      	lsls	r1, r3, #9
 8005212:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005216:	0250      	lsls	r0, r2, #9
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4610      	mov	r0, r2
 800521e:	4619      	mov	r1, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	461a      	mov	r2, r3
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	f7fa ffec 	bl	8000204 <__aeabi_uldivmod>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4613      	mov	r3, r2
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	e04a      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005236:	4b30      	ldr	r3, [pc, #192]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	099b      	lsrs	r3, r3, #6
 800523c:	461a      	mov	r2, r3
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005246:	f04f 0100 	mov.w	r1, #0
 800524a:	ea02 0400 	and.w	r4, r2, r0
 800524e:	ea03 0501 	and.w	r5, r3, r1
 8005252:	4620      	mov	r0, r4
 8005254:	4629      	mov	r1, r5
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	014b      	lsls	r3, r1, #5
 8005260:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005264:	0142      	lsls	r2, r0, #5
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	1b00      	subs	r0, r0, r4
 800526c:	eb61 0105 	sbc.w	r1, r1, r5
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	018b      	lsls	r3, r1, #6
 800527a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800527e:	0182      	lsls	r2, r0, #6
 8005280:	1a12      	subs	r2, r2, r0
 8005282:	eb63 0301 	sbc.w	r3, r3, r1
 8005286:	f04f 0000 	mov.w	r0, #0
 800528a:	f04f 0100 	mov.w	r1, #0
 800528e:	00d9      	lsls	r1, r3, #3
 8005290:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005294:	00d0      	lsls	r0, r2, #3
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	1912      	adds	r2, r2, r4
 800529c:	eb45 0303 	adc.w	r3, r5, r3
 80052a0:	f04f 0000 	mov.w	r0, #0
 80052a4:	f04f 0100 	mov.w	r1, #0
 80052a8:	0299      	lsls	r1, r3, #10
 80052aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052ae:	0290      	lsls	r0, r2, #10
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4610      	mov	r0, r2
 80052b6:	4619      	mov	r1, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	f7fa ffa0 	bl	8000204 <__aeabi_uldivmod>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4613      	mov	r3, r2
 80052ca:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80052cc:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x358>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	0f1b      	lsrs	r3, r3, #28
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e0:	61bb      	str	r3, [r7, #24]
      break;
 80052e2:	e002      	b.n	80052ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <HAL_RCC_GetSysClockFreq+0x35c>)
 80052e6:	61bb      	str	r3, [r7, #24]
      break;
 80052e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ea:	69bb      	ldr	r3, [r7, #24]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800
 80052fc:	00f42400 	.word	0x00f42400
 8005300:	007a1200 	.word	0x007a1200

08005304 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e28d      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 8083 	beq.w	800542a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005324:	4b94      	ldr	r3, [pc, #592]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 030c 	and.w	r3, r3, #12
 800532c:	2b04      	cmp	r3, #4
 800532e:	d019      	beq.n	8005364 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005330:	4b91      	ldr	r3, [pc, #580]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005338:	2b08      	cmp	r3, #8
 800533a:	d106      	bne.n	800534a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800533c:	4b8e      	ldr	r3, [pc, #568]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005348:	d00c      	beq.n	8005364 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800534a:	4b8b      	ldr	r3, [pc, #556]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005352:	2b0c      	cmp	r3, #12
 8005354:	d112      	bne.n	800537c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005356:	4b88      	ldr	r3, [pc, #544]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005362:	d10b      	bne.n	800537c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005364:	4b84      	ldr	r3, [pc, #528]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d05b      	beq.n	8005428 <HAL_RCC_OscConfig+0x124>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d157      	bne.n	8005428 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e25a      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005384:	d106      	bne.n	8005394 <HAL_RCC_OscConfig+0x90>
 8005386:	4b7c      	ldr	r3, [pc, #496]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a7b      	ldr	r2, [pc, #492]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 800538c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e01d      	b.n	80053d0 <HAL_RCC_OscConfig+0xcc>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800539c:	d10c      	bne.n	80053b8 <HAL_RCC_OscConfig+0xb4>
 800539e:	4b76      	ldr	r3, [pc, #472]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a75      	ldr	r2, [pc, #468]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 80053a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	4b73      	ldr	r3, [pc, #460]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a72      	ldr	r2, [pc, #456]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e00b      	b.n	80053d0 <HAL_RCC_OscConfig+0xcc>
 80053b8:	4b6f      	ldr	r3, [pc, #444]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a6e      	ldr	r2, [pc, #440]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 80053be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	4b6c      	ldr	r3, [pc, #432]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a6b      	ldr	r2, [pc, #428]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 80053ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d013      	beq.n	8005400 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d8:	f7fd ff24 	bl	8003224 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053e0:	f7fd ff20 	bl	8003224 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b64      	cmp	r3, #100	; 0x64
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e21f      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f2:	4b61      	ldr	r3, [pc, #388]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCC_OscConfig+0xdc>
 80053fe:	e014      	b.n	800542a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005400:	f7fd ff10 	bl	8003224 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005408:	f7fd ff0c 	bl	8003224 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b64      	cmp	r3, #100	; 0x64
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e20b      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800541a:	4b57      	ldr	r3, [pc, #348]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f0      	bne.n	8005408 <HAL_RCC_OscConfig+0x104>
 8005426:	e000      	b.n	800542a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d06f      	beq.n	8005516 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005436:	4b50      	ldr	r3, [pc, #320]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 030c 	and.w	r3, r3, #12
 800543e:	2b00      	cmp	r3, #0
 8005440:	d017      	beq.n	8005472 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005442:	4b4d      	ldr	r3, [pc, #308]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800544a:	2b08      	cmp	r3, #8
 800544c:	d105      	bne.n	800545a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800544e:	4b4a      	ldr	r3, [pc, #296]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800545a:	4b47      	ldr	r3, [pc, #284]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005462:	2b0c      	cmp	r3, #12
 8005464:	d11c      	bne.n	80054a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005466:	4b44      	ldr	r3, [pc, #272]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d116      	bne.n	80054a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005472:	4b41      	ldr	r3, [pc, #260]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <HAL_RCC_OscConfig+0x186>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d001      	beq.n	800548a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e1d3      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548a:	4b3b      	ldr	r3, [pc, #236]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	4937      	ldr	r1, [pc, #220]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800549e:	e03a      	b.n	8005516 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d020      	beq.n	80054ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054a8:	4b34      	ldr	r3, [pc, #208]	; (800557c <HAL_RCC_OscConfig+0x278>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ae:	f7fd feb9 	bl	8003224 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b4:	e008      	b.n	80054c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054b6:	f7fd feb5 	bl	8003224 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e1b4      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c8:	4b2b      	ldr	r3, [pc, #172]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d4:	4b28      	ldr	r3, [pc, #160]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	4925      	ldr	r1, [pc, #148]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	600b      	str	r3, [r1, #0]
 80054e8:	e015      	b.n	8005516 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ea:	4b24      	ldr	r3, [pc, #144]	; (800557c <HAL_RCC_OscConfig+0x278>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fd fe98 	bl	8003224 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054f8:	f7fd fe94 	bl	8003224 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e193      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b00      	cmp	r3, #0
 8005520:	d036      	beq.n	8005590 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d016      	beq.n	8005558 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <HAL_RCC_OscConfig+0x27c>)
 800552c:	2201      	movs	r2, #1
 800552e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fd fe78 	bl	8003224 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005538:	f7fd fe74 	bl	8003224 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e173      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <HAL_RCC_OscConfig+0x274>)
 800554c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x234>
 8005556:	e01b      	b.n	8005590 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005558:	4b09      	ldr	r3, [pc, #36]	; (8005580 <HAL_RCC_OscConfig+0x27c>)
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555e:	f7fd fe61 	bl	8003224 <HAL_GetTick>
 8005562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005564:	e00e      	b.n	8005584 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005566:	f7fd fe5d 	bl	8003224 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d907      	bls.n	8005584 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e15c      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
 8005578:	40023800 	.word	0x40023800
 800557c:	42470000 	.word	0x42470000
 8005580:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005584:	4b8a      	ldr	r3, [pc, #552]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 8005586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1ea      	bne.n	8005566 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8097 	beq.w	80056cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800559e:	2300      	movs	r3, #0
 80055a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a2:	4b83      	ldr	r3, [pc, #524]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10f      	bne.n	80055ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ae:	2300      	movs	r3, #0
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	4b7f      	ldr	r3, [pc, #508]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	4a7e      	ldr	r2, [pc, #504]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 80055b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055bc:	6413      	str	r3, [r2, #64]	; 0x40
 80055be:	4b7c      	ldr	r3, [pc, #496]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c6:	60bb      	str	r3, [r7, #8]
 80055c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ca:	2301      	movs	r3, #1
 80055cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ce:	4b79      	ldr	r3, [pc, #484]	; (80057b4 <HAL_RCC_OscConfig+0x4b0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d118      	bne.n	800560c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055da:	4b76      	ldr	r3, [pc, #472]	; (80057b4 <HAL_RCC_OscConfig+0x4b0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a75      	ldr	r2, [pc, #468]	; (80057b4 <HAL_RCC_OscConfig+0x4b0>)
 80055e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e6:	f7fd fe1d 	bl	8003224 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ee:	f7fd fe19 	bl	8003224 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e118      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005600:	4b6c      	ldr	r3, [pc, #432]	; (80057b4 <HAL_RCC_OscConfig+0x4b0>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d106      	bne.n	8005622 <HAL_RCC_OscConfig+0x31e>
 8005614:	4b66      	ldr	r3, [pc, #408]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 8005616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005618:	4a65      	ldr	r2, [pc, #404]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	6713      	str	r3, [r2, #112]	; 0x70
 8005620:	e01c      	b.n	800565c <HAL_RCC_OscConfig+0x358>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b05      	cmp	r3, #5
 8005628:	d10c      	bne.n	8005644 <HAL_RCC_OscConfig+0x340>
 800562a:	4b61      	ldr	r3, [pc, #388]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	4a60      	ldr	r2, [pc, #384]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 8005630:	f043 0304 	orr.w	r3, r3, #4
 8005634:	6713      	str	r3, [r2, #112]	; 0x70
 8005636:	4b5e      	ldr	r3, [pc, #376]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563a:	4a5d      	ldr	r2, [pc, #372]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	6713      	str	r3, [r2, #112]	; 0x70
 8005642:	e00b      	b.n	800565c <HAL_RCC_OscConfig+0x358>
 8005644:	4b5a      	ldr	r3, [pc, #360]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 8005646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005648:	4a59      	ldr	r2, [pc, #356]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 800564a:	f023 0301 	bic.w	r3, r3, #1
 800564e:	6713      	str	r3, [r2, #112]	; 0x70
 8005650:	4b57      	ldr	r3, [pc, #348]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	4a56      	ldr	r2, [pc, #344]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 8005656:	f023 0304 	bic.w	r3, r3, #4
 800565a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d015      	beq.n	8005690 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005664:	f7fd fdde 	bl	8003224 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566a:	e00a      	b.n	8005682 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800566c:	f7fd fdda 	bl	8003224 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	f241 3288 	movw	r2, #5000	; 0x1388
 800567a:	4293      	cmp	r3, r2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e0d7      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005682:	4b4b      	ldr	r3, [pc, #300]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0ee      	beq.n	800566c <HAL_RCC_OscConfig+0x368>
 800568e:	e014      	b.n	80056ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005690:	f7fd fdc8 	bl	8003224 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005696:	e00a      	b.n	80056ae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005698:	f7fd fdc4 	bl	8003224 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e0c1      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ae:	4b40      	ldr	r3, [pc, #256]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1ee      	bne.n	8005698 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d105      	bne.n	80056cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c0:	4b3b      	ldr	r3, [pc, #236]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	4a3a      	ldr	r2, [pc, #232]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 80056c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 80ad 	beq.w	8005830 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056d6:	4b36      	ldr	r3, [pc, #216]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 030c 	and.w	r3, r3, #12
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d060      	beq.n	80057a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d145      	bne.n	8005776 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ea:	4b33      	ldr	r3, [pc, #204]	; (80057b8 <HAL_RCC_OscConfig+0x4b4>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fd fd98 	bl	8003224 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fd fd94 	bl	8003224 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e093      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800570a:	4b29      	ldr	r3, [pc, #164]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69da      	ldr	r2, [r3, #28]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	019b      	lsls	r3, r3, #6
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	085b      	lsrs	r3, r3, #1
 800572e:	3b01      	subs	r3, #1
 8005730:	041b      	lsls	r3, r3, #16
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	061b      	lsls	r3, r3, #24
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	071b      	lsls	r3, r3, #28
 8005742:	491b      	ldr	r1, [pc, #108]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 8005744:	4313      	orrs	r3, r2
 8005746:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005748:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <HAL_RCC_OscConfig+0x4b4>)
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574e:	f7fd fd69 	bl	8003224 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005756:	f7fd fd65 	bl	8003224 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e064      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005768:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f0      	beq.n	8005756 <HAL_RCC_OscConfig+0x452>
 8005774:	e05c      	b.n	8005830 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <HAL_RCC_OscConfig+0x4b4>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fd fd52 	bl	8003224 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005784:	f7fd fd4e 	bl	8003224 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e04d      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005796:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <HAL_RCC_OscConfig+0x4ac>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x480>
 80057a2:	e045      	b.n	8005830 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d107      	bne.n	80057bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e040      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
 80057b0:	40023800 	.word	0x40023800
 80057b4:	40007000 	.word	0x40007000
 80057b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057bc:	4b1f      	ldr	r3, [pc, #124]	; (800583c <HAL_RCC_OscConfig+0x538>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d030      	beq.n	800582c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d129      	bne.n	800582c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d122      	bne.n	800582c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057ec:	4013      	ands	r3, r2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d119      	bne.n	800582c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	085b      	lsrs	r3, r3, #1
 8005804:	3b01      	subs	r3, #1
 8005806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005808:	429a      	cmp	r2, r3
 800580a:	d10f      	bne.n	800582c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005818:	429a      	cmp	r2, r3
 800581a:	d107      	bne.n	800582c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005828:	429a      	cmp	r2, r3
 800582a:	d001      	beq.n	8005830 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40023800 	.word	0x40023800

08005840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e041      	b.n	80058d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fb fc48 	bl	80010fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3304      	adds	r3, #4
 800587c:	4619      	mov	r1, r3
 800587e:	4610      	mov	r0, r2
 8005880:	f000 fad8 	bl	8005e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e041      	b.n	8005974 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d106      	bne.n	800590a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f839 	bl	800597c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2202      	movs	r2, #2
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	3304      	adds	r3, #4
 800591a:	4619      	mov	r1, r3
 800591c:	4610      	mov	r0, r2
 800591e:	f000 fa89 	bl	8005e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d109      	bne.n	80059b4 <HAL_TIM_PWM_Start+0x24>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	bf14      	ite	ne
 80059ac:	2301      	movne	r3, #1
 80059ae:	2300      	moveq	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e022      	b.n	80059fa <HAL_TIM_PWM_Start+0x6a>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d109      	bne.n	80059ce <HAL_TIM_PWM_Start+0x3e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	bf14      	ite	ne
 80059c6:	2301      	movne	r3, #1
 80059c8:	2300      	moveq	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	e015      	b.n	80059fa <HAL_TIM_PWM_Start+0x6a>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d109      	bne.n	80059e8 <HAL_TIM_PWM_Start+0x58>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	bf14      	ite	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	2300      	moveq	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	e008      	b.n	80059fa <HAL_TIM_PWM_Start+0x6a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e07c      	b.n	8005afc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_PWM_Start+0x82>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a10:	e013      	b.n	8005a3a <HAL_TIM_PWM_Start+0xaa>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_PWM_Start+0x92>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a20:	e00b      	b.n	8005a3a <HAL_TIM_PWM_Start+0xaa>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_PWM_Start+0xa2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a30:	e003      	b.n	8005a3a <HAL_TIM_PWM_Start+0xaa>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fce0 	bl	8006408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a2d      	ldr	r2, [pc, #180]	; (8005b04 <HAL_TIM_PWM_Start+0x174>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d004      	beq.n	8005a5c <HAL_TIM_PWM_Start+0xcc>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <HAL_TIM_PWM_Start+0x178>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d101      	bne.n	8005a60 <HAL_TIM_PWM_Start+0xd0>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e000      	b.n	8005a62 <HAL_TIM_PWM_Start+0xd2>
 8005a60:	2300      	movs	r3, #0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a22      	ldr	r2, [pc, #136]	; (8005b04 <HAL_TIM_PWM_Start+0x174>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d022      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a88:	d01d      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <HAL_TIM_PWM_Start+0x17c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d018      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1d      	ldr	r2, [pc, #116]	; (8005b10 <HAL_TIM_PWM_Start+0x180>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1c      	ldr	r2, [pc, #112]	; (8005b14 <HAL_TIM_PWM_Start+0x184>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a16      	ldr	r2, [pc, #88]	; (8005b08 <HAL_TIM_PWM_Start+0x178>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d009      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a18      	ldr	r2, [pc, #96]	; (8005b18 <HAL_TIM_PWM_Start+0x188>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <HAL_TIM_PWM_Start+0x18c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d111      	bne.n	8005aea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b06      	cmp	r3, #6
 8005ad6:	d010      	beq.n	8005afa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae8:	e007      	b.n	8005afa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0201 	orr.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40010400 	.word	0x40010400
 8005b0c:	40000400 	.word	0x40000400
 8005b10:	40000800 	.word	0x40000800
 8005b14:	40000c00 	.word	0x40000c00
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40001800 	.word	0x40001800

08005b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e0ae      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b0c      	cmp	r3, #12
 8005b4a:	f200 809f 	bhi.w	8005c8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b4e:	a201      	add	r2, pc, #4	; (adr r2, 8005b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b54:	08005b89 	.word	0x08005b89
 8005b58:	08005c8d 	.word	0x08005c8d
 8005b5c:	08005c8d 	.word	0x08005c8d
 8005b60:	08005c8d 	.word	0x08005c8d
 8005b64:	08005bc9 	.word	0x08005bc9
 8005b68:	08005c8d 	.word	0x08005c8d
 8005b6c:	08005c8d 	.word	0x08005c8d
 8005b70:	08005c8d 	.word	0x08005c8d
 8005b74:	08005c0b 	.word	0x08005c0b
 8005b78:	08005c8d 	.word	0x08005c8d
 8005b7c:	08005c8d 	.word	0x08005c8d
 8005b80:	08005c8d 	.word	0x08005c8d
 8005b84:	08005c4b 	.word	0x08005c4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 f9f0 	bl	8005f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0208 	orr.w	r2, r2, #8
 8005ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0204 	bic.w	r2, r2, #4
 8005bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6999      	ldr	r1, [r3, #24]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	619a      	str	r2, [r3, #24]
      break;
 8005bc6:	e064      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fa40 	bl	8006054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6999      	ldr	r1, [r3, #24]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	021a      	lsls	r2, r3, #8
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	619a      	str	r2, [r3, #24]
      break;
 8005c08:	e043      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fa95 	bl	8006140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0208 	orr.w	r2, r2, #8
 8005c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69da      	ldr	r2, [r3, #28]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0204 	bic.w	r2, r2, #4
 8005c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69d9      	ldr	r1, [r3, #28]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	61da      	str	r2, [r3, #28]
      break;
 8005c48:	e023      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fae9 	bl	8006228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69d9      	ldr	r1, [r3, #28]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	021a      	lsls	r2, r3, #8
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	61da      	str	r2, [r3, #28]
      break;
 8005c8a:	e002      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e0b4      	b.n	8005e2a <HAL_TIM_ConfigClockSource+0x186>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf8:	d03e      	beq.n	8005d78 <HAL_TIM_ConfigClockSource+0xd4>
 8005cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfe:	f200 8087 	bhi.w	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d06:	f000 8086 	beq.w	8005e16 <HAL_TIM_ConfigClockSource+0x172>
 8005d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0e:	d87f      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d10:	2b70      	cmp	r3, #112	; 0x70
 8005d12:	d01a      	beq.n	8005d4a <HAL_TIM_ConfigClockSource+0xa6>
 8005d14:	2b70      	cmp	r3, #112	; 0x70
 8005d16:	d87b      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d18:	2b60      	cmp	r3, #96	; 0x60
 8005d1a:	d050      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0x11a>
 8005d1c:	2b60      	cmp	r3, #96	; 0x60
 8005d1e:	d877      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d20:	2b50      	cmp	r3, #80	; 0x50
 8005d22:	d03c      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0xfa>
 8005d24:	2b50      	cmp	r3, #80	; 0x50
 8005d26:	d873      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d28:	2b40      	cmp	r3, #64	; 0x40
 8005d2a:	d058      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x13a>
 8005d2c:	2b40      	cmp	r3, #64	; 0x40
 8005d2e:	d86f      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d30:	2b30      	cmp	r3, #48	; 0x30
 8005d32:	d064      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x15a>
 8005d34:	2b30      	cmp	r3, #48	; 0x30
 8005d36:	d86b      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d060      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x15a>
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d867      	bhi.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d05c      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x15a>
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d05a      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x15a>
 8005d48:	e062      	b.n	8005e10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6818      	ldr	r0, [r3, #0]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6899      	ldr	r1, [r3, #8]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f000 fb35 	bl	80063c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	609a      	str	r2, [r3, #8]
      break;
 8005d76:	e04f      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	6899      	ldr	r1, [r3, #8]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f000 fb1e 	bl	80063c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d9a:	609a      	str	r2, [r3, #8]
      break;
 8005d9c:	e03c      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	6859      	ldr	r1, [r3, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	461a      	mov	r2, r3
 8005dac:	f000 fa92 	bl	80062d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2150      	movs	r1, #80	; 0x50
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 faeb 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 8005dbc:	e02c      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6859      	ldr	r1, [r3, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f000 fab1 	bl	8006332 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2160      	movs	r1, #96	; 0x60
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fadb 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 8005ddc:	e01c      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6859      	ldr	r1, [r3, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f000 fa72 	bl	80062d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2140      	movs	r1, #64	; 0x40
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 facb 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 8005dfc:	e00c      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4619      	mov	r1, r3
 8005e08:	4610      	mov	r0, r2
 8005e0a:	f000 fac2 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 8005e0e:	e003      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	73fb      	strb	r3, [r7, #15]
      break;
 8005e14:	e000      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a40      	ldr	r2, [pc, #256]	; (8005f48 <TIM_Base_SetConfig+0x114>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d013      	beq.n	8005e74 <TIM_Base_SetConfig+0x40>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e52:	d00f      	beq.n	8005e74 <TIM_Base_SetConfig+0x40>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a3d      	ldr	r2, [pc, #244]	; (8005f4c <TIM_Base_SetConfig+0x118>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00b      	beq.n	8005e74 <TIM_Base_SetConfig+0x40>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a3c      	ldr	r2, [pc, #240]	; (8005f50 <TIM_Base_SetConfig+0x11c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d007      	beq.n	8005e74 <TIM_Base_SetConfig+0x40>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a3b      	ldr	r2, [pc, #236]	; (8005f54 <TIM_Base_SetConfig+0x120>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d003      	beq.n	8005e74 <TIM_Base_SetConfig+0x40>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a3a      	ldr	r2, [pc, #232]	; (8005f58 <TIM_Base_SetConfig+0x124>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d108      	bne.n	8005e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a2f      	ldr	r2, [pc, #188]	; (8005f48 <TIM_Base_SetConfig+0x114>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d02b      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e94:	d027      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a2c      	ldr	r2, [pc, #176]	; (8005f4c <TIM_Base_SetConfig+0x118>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d023      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a2b      	ldr	r2, [pc, #172]	; (8005f50 <TIM_Base_SetConfig+0x11c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d01f      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a2a      	ldr	r2, [pc, #168]	; (8005f54 <TIM_Base_SetConfig+0x120>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d01b      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a29      	ldr	r2, [pc, #164]	; (8005f58 <TIM_Base_SetConfig+0x124>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d017      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a28      	ldr	r2, [pc, #160]	; (8005f5c <TIM_Base_SetConfig+0x128>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a27      	ldr	r2, [pc, #156]	; (8005f60 <TIM_Base_SetConfig+0x12c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00f      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a26      	ldr	r2, [pc, #152]	; (8005f64 <TIM_Base_SetConfig+0x130>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00b      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a25      	ldr	r2, [pc, #148]	; (8005f68 <TIM_Base_SetConfig+0x134>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d007      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a24      	ldr	r2, [pc, #144]	; (8005f6c <TIM_Base_SetConfig+0x138>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a23      	ldr	r2, [pc, #140]	; (8005f70 <TIM_Base_SetConfig+0x13c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d108      	bne.n	8005ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <TIM_Base_SetConfig+0x114>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_Base_SetConfig+0xf8>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a0c      	ldr	r2, [pc, #48]	; (8005f58 <TIM_Base_SetConfig+0x124>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d103      	bne.n	8005f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	615a      	str	r2, [r3, #20]
}
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40000800 	.word	0x40000800
 8005f54:	40000c00 	.word	0x40000c00
 8005f58:	40010400 	.word	0x40010400
 8005f5c:	40014000 	.word	0x40014000
 8005f60:	40014400 	.word	0x40014400
 8005f64:	40014800 	.word	0x40014800
 8005f68:	40001800 	.word	0x40001800
 8005f6c:	40001c00 	.word	0x40001c00
 8005f70:	40002000 	.word	0x40002000

08005f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0303 	bic.w	r3, r3, #3
 8005faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f023 0302 	bic.w	r3, r3, #2
 8005fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a20      	ldr	r2, [pc, #128]	; (800604c <TIM_OC1_SetConfig+0xd8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <TIM_OC1_SetConfig+0x64>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a1f      	ldr	r2, [pc, #124]	; (8006050 <TIM_OC1_SetConfig+0xdc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d10c      	bne.n	8005ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f023 0308 	bic.w	r3, r3, #8
 8005fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 0304 	bic.w	r3, r3, #4
 8005ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a15      	ldr	r2, [pc, #84]	; (800604c <TIM_OC1_SetConfig+0xd8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d003      	beq.n	8006002 <TIM_OC1_SetConfig+0x8e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a14      	ldr	r2, [pc, #80]	; (8006050 <TIM_OC1_SetConfig+0xdc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d111      	bne.n	8006026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	621a      	str	r2, [r3, #32]
}
 8006040:	bf00      	nop
 8006042:	371c      	adds	r7, #28
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	40010000 	.word	0x40010000
 8006050:	40010400 	.word	0x40010400

08006054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f023 0210 	bic.w	r2, r3, #16
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f023 0320 	bic.w	r3, r3, #32
 800609e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a22      	ldr	r2, [pc, #136]	; (8006138 <TIM_OC2_SetConfig+0xe4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC2_SetConfig+0x68>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a21      	ldr	r2, [pc, #132]	; (800613c <TIM_OC2_SetConfig+0xe8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d10d      	bne.n	80060d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a17      	ldr	r2, [pc, #92]	; (8006138 <TIM_OC2_SetConfig+0xe4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_OC2_SetConfig+0x94>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a16      	ldr	r2, [pc, #88]	; (800613c <TIM_OC2_SetConfig+0xe8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d113      	bne.n	8006110 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40010400 	.word	0x40010400

08006140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0303 	bic.w	r3, r3, #3
 8006176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	021b      	lsls	r3, r3, #8
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	4313      	orrs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a21      	ldr	r2, [pc, #132]	; (8006220 <TIM_OC3_SetConfig+0xe0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_OC3_SetConfig+0x66>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a20      	ldr	r2, [pc, #128]	; (8006224 <TIM_OC3_SetConfig+0xe4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d10d      	bne.n	80061c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a16      	ldr	r2, [pc, #88]	; (8006220 <TIM_OC3_SetConfig+0xe0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d003      	beq.n	80061d2 <TIM_OC3_SetConfig+0x92>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a15      	ldr	r2, [pc, #84]	; (8006224 <TIM_OC3_SetConfig+0xe4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d113      	bne.n	80061fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	621a      	str	r2, [r3, #32]
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	40010000 	.word	0x40010000
 8006224:	40010400 	.word	0x40010400

08006228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	031b      	lsls	r3, r3, #12
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a12      	ldr	r2, [pc, #72]	; (80062cc <TIM_OC4_SetConfig+0xa4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d003      	beq.n	8006290 <TIM_OC4_SetConfig+0x68>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a11      	ldr	r2, [pc, #68]	; (80062d0 <TIM_OC4_SetConfig+0xa8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d109      	bne.n	80062a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	019b      	lsls	r3, r3, #6
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40010400 	.word	0x40010400

080062d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f023 0201 	bic.w	r2, r3, #1
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f023 030a 	bic.w	r3, r3, #10
 8006310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	621a      	str	r2, [r3, #32]
}
 8006326:	bf00      	nop
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006332:	b480      	push	{r7}
 8006334:	b087      	sub	sp, #28
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f023 0210 	bic.w	r2, r3, #16
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800635c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	031b      	lsls	r3, r3, #12
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800636e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f043 0307 	orr.w	r3, r3, #7
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	bf00      	nop
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	021a      	lsls	r2, r3, #8
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	431a      	orrs	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	609a      	str	r2, [r3, #8]
}
 80063fc:	bf00      	nop
 80063fe:	371c      	adds	r7, #28
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f003 031f 	and.w	r3, r3, #31
 800641a:	2201      	movs	r2, #1
 800641c:	fa02 f303 	lsl.w	r3, r2, r3
 8006420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a1a      	ldr	r2, [r3, #32]
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	43db      	mvns	r3, r3
 800642a:	401a      	ands	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a1a      	ldr	r2, [r3, #32]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f003 031f 	and.w	r3, r3, #31
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	fa01 f303 	lsl.w	r3, r1, r3
 8006440:	431a      	orrs	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	621a      	str	r2, [r3, #32]
}
 8006446:	bf00      	nop
 8006448:	371c      	adds	r7, #28
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
	...

08006454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006468:	2302      	movs	r3, #2
 800646a:	e05a      	b.n	8006522 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a21      	ldr	r2, [pc, #132]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d022      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b8:	d01d      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a1d      	ldr	r2, [pc, #116]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d018      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1b      	ldr	r2, [pc, #108]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d013      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1a      	ldr	r2, [pc, #104]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00e      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a18      	ldr	r2, [pc, #96]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d009      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a17      	ldr	r2, [pc, #92]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d004      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a15      	ldr	r2, [pc, #84]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d10c      	bne.n	8006510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	4313      	orrs	r3, r2
 8006506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40010000 	.word	0x40010000
 8006534:	40000400 	.word	0x40000400
 8006538:	40000800 	.word	0x40000800
 800653c:	40000c00 	.word	0x40000c00
 8006540:	40010400 	.word	0x40010400
 8006544:	40014000 	.word	0x40014000
 8006548:	40001800 	.word	0x40001800

0800654c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e03f      	b.n	80065de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fa fe76 	bl	8001264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2224      	movs	r2, #36	; 0x24
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800658e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 ff3f 	bl	8007414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	695a      	ldr	r2, [r3, #20]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08c      	sub	sp, #48	; 0x30
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	4613      	mov	r3, r2
 80065f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d165      	bne.n	80066ce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <HAL_UART_Transmit_DMA+0x26>
 8006608:	88fb      	ldrh	r3, [r7, #6]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e05e      	b.n	80066d0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_UART_Transmit_DMA+0x38>
 800661c:	2302      	movs	r3, #2
 800661e:	e057      	b.n	80066d0 <HAL_UART_Transmit_DMA+0xe8>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	88fa      	ldrh	r2, [r7, #6]
 8006632:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	88fa      	ldrh	r2, [r7, #6]
 8006638:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2221      	movs	r2, #33	; 0x21
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664c:	4a22      	ldr	r2, [pc, #136]	; (80066d8 <HAL_UART_Transmit_DMA+0xf0>)
 800664e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006654:	4a21      	ldr	r2, [pc, #132]	; (80066dc <HAL_UART_Transmit_DMA+0xf4>)
 8006656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665c:	4a20      	ldr	r2, [pc, #128]	; (80066e0 <HAL_UART_Transmit_DMA+0xf8>)
 800665e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006664:	2200      	movs	r2, #0
 8006666:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006668:	f107 0308 	add.w	r3, r7, #8
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	6819      	ldr	r1, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3304      	adds	r3, #4
 800667c:	461a      	mov	r2, r3
 800667e:	88fb      	ldrh	r3, [r7, #6]
 8006680:	f7fd fe5a 	bl	8004338 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800668c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3314      	adds	r3, #20
 800669c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	617b      	str	r3, [r7, #20]
   return(result);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3314      	adds	r3, #20
 80066b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066b6:	627a      	str	r2, [r7, #36]	; 0x24
 80066b8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6a39      	ldr	r1, [r7, #32]
 80066bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e5      	bne.n	8006696 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	e000      	b.n	80066d0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80066ce:	2302      	movs	r3, #2
  }
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3730      	adds	r7, #48	; 0x30
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	08006cb5 	.word	0x08006cb5
 80066dc:	08006d4f 	.word	0x08006d4f
 80066e0:	08006ec7 	.word	0x08006ec7

080066e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	4613      	mov	r3, r2
 80066f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d11d      	bne.n	800673a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <HAL_UART_Receive_DMA+0x26>
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e016      	b.n	800673c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_UART_Receive_DMA+0x38>
 8006718:	2302      	movs	r3, #2
 800671a:	e00f      	b.n	800673c <HAL_UART_Receive_DMA+0x58>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800672a:	88fb      	ldrh	r3, [r7, #6]
 800672c:	461a      	mov	r2, r3
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fc13 	bl	8006f5c <UART_Start_Receive_DMA>
 8006736:	4603      	mov	r3, r0
 8006738:	e000      	b.n	800673c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800673a:	2302      	movs	r3, #2
  }
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b0ba      	sub	sp, #232	; 0xe8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800676a:	2300      	movs	r3, #0
 800676c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006770:	2300      	movs	r3, #0
 8006772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10f      	bne.n	80067aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800678a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <HAL_UART_IRQHandler+0x66>
 8006796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fd7b 	bl	800729e <UART_Receive_IT>
      return;
 80067a8:	e256      	b.n	8006c58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 80de 	beq.w	8006970 <HAL_UART_IRQHandler+0x22c>
 80067b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d106      	bne.n	80067ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80d1 	beq.w	8006970 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00b      	beq.n	80067f2 <HAL_UART_IRQHandler+0xae>
 80067da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d005      	beq.n	80067f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f043 0201 	orr.w	r2, r3, #1
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00b      	beq.n	8006816 <HAL_UART_IRQHandler+0xd2>
 80067fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d005      	beq.n	8006816 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f043 0202 	orr.w	r2, r3, #2
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00b      	beq.n	800683a <HAL_UART_IRQHandler+0xf6>
 8006822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	f043 0204 	orr.w	r2, r3, #4
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800683a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d011      	beq.n	800686a <HAL_UART_IRQHandler+0x126>
 8006846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b00      	cmp	r3, #0
 8006850:	d105      	bne.n	800685e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	f043 0208 	orr.w	r2, r3, #8
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 81ed 	beq.w	8006c4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <HAL_UART_IRQHandler+0x14e>
 8006880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fd06 	bl	800729e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689c:	2b40      	cmp	r3, #64	; 0x40
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	f003 0308 	and.w	r3, r3, #8
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d103      	bne.n	80068be <HAL_UART_IRQHandler+0x17a>
 80068b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d04f      	beq.n	800695e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fc0e 	bl	80070e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ce:	2b40      	cmp	r3, #64	; 0x40
 80068d0:	d141      	bne.n	8006956 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3314      	adds	r3, #20
 80068d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3314      	adds	r3, #20
 80068fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800690a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1d9      	bne.n	80068d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	2b00      	cmp	r3, #0
 8006924:	d013      	beq.n	800694e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	4a7d      	ldr	r2, [pc, #500]	; (8006b20 <HAL_UART_IRQHandler+0x3dc>)
 800692c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	4618      	mov	r0, r3
 8006934:	f7fd fdc8 	bl	80044c8 <HAL_DMA_Abort_IT>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d016      	beq.n	800696c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006948:	4610      	mov	r0, r2
 800694a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	e00e      	b.n	800696c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f99a 	bl	8006c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006954:	e00a      	b.n	800696c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f996 	bl	8006c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695c:	e006      	b.n	800696c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f992 	bl	8006c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800696a:	e170      	b.n	8006c4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696c:	bf00      	nop
    return;
 800696e:	e16e      	b.n	8006c4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	2b01      	cmp	r3, #1
 8006976:	f040 814a 	bne.w	8006c0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800697a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 8143 	beq.w	8006c0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 813c 	beq.w	8006c0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	60bb      	str	r3, [r7, #8]
 80069aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	f040 80b4 	bne.w	8006b24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 8140 	beq.w	8006c52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069da:	429a      	cmp	r2, r3
 80069dc:	f080 8139 	bcs.w	8006c52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f2:	f000 8088 	beq.w	8006b06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	330c      	adds	r3, #12
 80069fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1d9      	bne.n	80069f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3314      	adds	r3, #20
 8006a48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a54:	f023 0301 	bic.w	r3, r3, #1
 8006a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3314      	adds	r3, #20
 8006a62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1e1      	bne.n	8006a42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3314      	adds	r3, #20
 8006a84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3314      	adds	r3, #20
 8006a9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006aa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006aa4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006aa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e3      	bne.n	8006a7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ad6:	f023 0310 	bic.w	r3, r3, #16
 8006ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	330c      	adds	r3, #12
 8006ae4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ae8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006aea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006aee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e3      	bne.n	8006ac4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fd fc71 	bl	80043e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f8c0 	bl	8006c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b1c:	e099      	b.n	8006c52 <HAL_UART_IRQHandler+0x50e>
 8006b1e:	bf00      	nop
 8006b20:	080071a7 	.word	0x080071a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 808b 	beq.w	8006c56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8086 	beq.w	8006c56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	330c      	adds	r3, #12
 8006b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b6e:	647a      	str	r2, [r7, #68]	; 0x44
 8006b70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e3      	bne.n	8006b4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3314      	adds	r3, #20
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	623b      	str	r3, [r7, #32]
   return(result);
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	f023 0301 	bic.w	r3, r3, #1
 8006b98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3314      	adds	r3, #20
 8006ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ba6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e3      	bne.n	8006b82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0310 	bic.w	r3, r3, #16
 8006bde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	330c      	adds	r3, #12
 8006be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bec:	61fa      	str	r2, [r7, #28]
 8006bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf0:	69b9      	ldr	r1, [r7, #24]
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	e841 2300 	strex	r3, r2, [r1]
 8006bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e3      	bne.n	8006bc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f848 	bl	8006c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c0c:	e023      	b.n	8006c56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d009      	beq.n	8006c2e <HAL_UART_IRQHandler+0x4ea>
 8006c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fad1 	bl	80071ce <UART_Transmit_IT>
    return;
 8006c2c:	e014      	b.n	8006c58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00e      	beq.n	8006c58 <HAL_UART_IRQHandler+0x514>
 8006c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d008      	beq.n	8006c58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fb11 	bl	800726e <UART_EndTransmit_IT>
    return;
 8006c4c:	e004      	b.n	8006c58 <HAL_UART_IRQHandler+0x514>
    return;
 8006c4e:	bf00      	nop
 8006c50:	e002      	b.n	8006c58 <HAL_UART_IRQHandler+0x514>
      return;
 8006c52:	bf00      	nop
 8006c54:	e000      	b.n	8006c58 <HAL_UART_IRQHandler+0x514>
      return;
 8006c56:	bf00      	nop
  }
}
 8006c58:	37e8      	adds	r7, #232	; 0xe8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop

08006c60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b090      	sub	sp, #64	; 0x40
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d137      	bne.n	8006d40 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3314      	adds	r3, #20
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cec:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3314      	adds	r3, #20
 8006cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cf6:	633a      	str	r2, [r7, #48]	; 0x30
 8006cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e5      	bne.n	8006cd6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	330c      	adds	r3, #12
 8006d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
 8006d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d2a:	61fa      	str	r2, [r7, #28]
 8006d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	69b9      	ldr	r1, [r7, #24]
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	617b      	str	r3, [r7, #20]
   return(result);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e5      	bne.n	8006d0a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d3e:	e002      	b.n	8006d46 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006d40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006d42:	f7fa f8dd 	bl	8000f00 <HAL_UART_TxCpltCallback>
}
 8006d46:	bf00      	nop
 8006d48:	3740      	adds	r7, #64	; 0x40
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7ff ff7f 	bl	8006c60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b09c      	sub	sp, #112	; 0x70
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d172      	bne.n	8006e6c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d88:	2200      	movs	r2, #0
 8006d8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	330c      	adds	r3, #12
 8006d92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006da2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	330c      	adds	r3, #12
 8006daa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dac:	65ba      	str	r2, [r7, #88]	; 0x58
 8006dae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e5      	bne.n	8006d8c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3314      	adds	r3, #20
 8006dc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd2:	f023 0301 	bic.w	r3, r3, #1
 8006dd6:	667b      	str	r3, [r7, #100]	; 0x64
 8006dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3314      	adds	r3, #20
 8006dde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006de0:	647a      	str	r2, [r7, #68]	; 0x44
 8006de2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e5      	bne.n	8006dc0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3314      	adds	r3, #20
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	623b      	str	r3, [r7, #32]
   return(result);
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e0a:	663b      	str	r3, [r7, #96]	; 0x60
 8006e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3314      	adds	r3, #20
 8006e12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e14:	633a      	str	r2, [r7, #48]	; 0x30
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e5      	bne.n	8006df4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d119      	bne.n	8006e6c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0310 	bic.w	r3, r3, #16
 8006e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	330c      	adds	r3, #12
 8006e56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e58:	61fa      	str	r2, [r7, #28]
 8006e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	69b9      	ldr	r1, [r7, #24]
 8006e5e:	69fa      	ldr	r2, [r7, #28]
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	617b      	str	r3, [r7, #20]
   return(result);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e5      	bne.n	8006e38 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d106      	bne.n	8006e82 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006e7c:	f7ff ff0e 	bl	8006c9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e80:	e002      	b.n	8006e88 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006e82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006e84:	f7fa f858 	bl	8000f38 <HAL_UART_RxCpltCallback>
}
 8006e88:	bf00      	nop
 8006e8a:	3770      	adds	r7, #112	; 0x70
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d108      	bne.n	8006eb8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006eaa:	085b      	lsrs	r3, r3, #1
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	4619      	mov	r1, r3
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f7ff fef3 	bl	8006c9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006eb6:	e002      	b.n	8006ebe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f7ff fedb 	bl	8006c74 <HAL_UART_RxHalfCpltCallback>
}
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	2b80      	cmp	r3, #128	; 0x80
 8006ee4:	bf0c      	ite	eq
 8006ee6:	2301      	moveq	r3, #1
 8006ee8:	2300      	movne	r3, #0
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b21      	cmp	r3, #33	; 0x21
 8006ef8:	d108      	bne.n	8006f0c <UART_DMAError+0x46>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2200      	movs	r2, #0
 8006f04:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006f06:	68b8      	ldr	r0, [r7, #8]
 8006f08:	f000 f8c2 	bl	8007090 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f16:	2b40      	cmp	r3, #64	; 0x40
 8006f18:	bf0c      	ite	eq
 8006f1a:	2301      	moveq	r3, #1
 8006f1c:	2300      	movne	r3, #0
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b22      	cmp	r3, #34	; 0x22
 8006f2c:	d108      	bne.n	8006f40 <UART_DMAError+0x7a>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2200      	movs	r2, #0
 8006f38:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006f3a:	68b8      	ldr	r0, [r7, #8]
 8006f3c:	f000 f8d0 	bl	80070e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f44:	f043 0210 	orr.w	r2, r3, #16
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f4c:	68b8      	ldr	r0, [r7, #8]
 8006f4e:	f7ff fe9b 	bl	8006c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b098      	sub	sp, #96	; 0x60
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	4613      	mov	r3, r2
 8006f68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	88fa      	ldrh	r2, [r7, #6]
 8006f74:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2222      	movs	r2, #34	; 0x22
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	4a3e      	ldr	r2, [pc, #248]	; (8007084 <UART_Start_Receive_DMA+0x128>)
 8006f8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	4a3d      	ldr	r2, [pc, #244]	; (8007088 <UART_Start_Receive_DMA+0x12c>)
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	4a3c      	ldr	r2, [pc, #240]	; (800708c <UART_Start_Receive_DMA+0x130>)
 8006f9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006fa4:	f107 0308 	add.w	r3, r7, #8
 8006fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	f7fd f9bc 	bl	8004338 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	613b      	str	r3, [r7, #16]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	613b      	str	r3, [r7, #16]
 8006fd4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	330c      	adds	r3, #12
 8006fe4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	330c      	adds	r3, #12
 8006ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ffe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007000:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007004:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800700c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e5      	bne.n	8006fde <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3314      	adds	r3, #20
 8007018:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	f043 0301 	orr.w	r3, r3, #1
 8007028:	657b      	str	r3, [r7, #84]	; 0x54
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3314      	adds	r3, #20
 8007030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007032:	63ba      	str	r2, [r7, #56]	; 0x38
 8007034:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e5      	bne.n	8007012 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3314      	adds	r3, #20
 800704c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	617b      	str	r3, [r7, #20]
   return(result);
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800705c:	653b      	str	r3, [r7, #80]	; 0x50
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3314      	adds	r3, #20
 8007064:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007066:	627a      	str	r2, [r7, #36]	; 0x24
 8007068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6a39      	ldr	r1, [r7, #32]
 800706c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	61fb      	str	r3, [r7, #28]
   return(result);
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e5      	bne.n	8007046 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3760      	adds	r7, #96	; 0x60
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	08006d6b 	.word	0x08006d6b
 8007088:	08006e91 	.word	0x08006e91
 800708c:	08006ec7 	.word	0x08006ec7

08007090 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007090:	b480      	push	{r7}
 8007092:	b089      	sub	sp, #36	; 0x24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	330c      	adds	r3, #12
 800709e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	330c      	adds	r3, #12
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	61ba      	str	r2, [r7, #24]
 80070ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6979      	ldr	r1, [r7, #20]
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	613b      	str	r3, [r7, #16]
   return(result);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e5      	bne.n	8007098 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80070d4:	bf00      	nop
 80070d6:	3724      	adds	r7, #36	; 0x24
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b095      	sub	sp, #84	; 0x54
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	330c      	adds	r3, #12
 80070ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	330c      	adds	r3, #12
 8007106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007108:	643a      	str	r2, [r7, #64]	; 0x40
 800710a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800710e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007110:	e841 2300 	strex	r3, r2, [r1]
 8007114:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e5      	bne.n	80070e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3314      	adds	r3, #20
 8007122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	61fb      	str	r3, [r7, #28]
   return(result);
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f023 0301 	bic.w	r3, r3, #1
 8007132:	64bb      	str	r3, [r7, #72]	; 0x48
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3314      	adds	r3, #20
 800713a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800713c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007144:	e841 2300 	strex	r3, r2, [r1]
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e5      	bne.n	800711c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	2b01      	cmp	r3, #1
 8007156:	d119      	bne.n	800718c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	330c      	adds	r3, #12
 800715e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	e853 3f00 	ldrex	r3, [r3]
 8007166:	60bb      	str	r3, [r7, #8]
   return(result);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f023 0310 	bic.w	r3, r3, #16
 800716e:	647b      	str	r3, [r7, #68]	; 0x44
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	330c      	adds	r3, #12
 8007176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007178:	61ba      	str	r2, [r7, #24]
 800717a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	6979      	ldr	r1, [r7, #20]
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	613b      	str	r3, [r7, #16]
   return(result);
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e5      	bne.n	8007158 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2220      	movs	r2, #32
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	631a      	str	r2, [r3, #48]	; 0x30
}
 800719a:	bf00      	nop
 800719c:	3754      	adds	r7, #84	; 0x54
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f7ff fd61 	bl	8006c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b085      	sub	sp, #20
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b21      	cmp	r3, #33	; 0x21
 80071e0:	d13e      	bne.n	8007260 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ea:	d114      	bne.n	8007216 <UART_Transmit_IT+0x48>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d110      	bne.n	8007216 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007208:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	1c9a      	adds	r2, r3, #2
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	621a      	str	r2, [r3, #32]
 8007214:	e008      	b.n	8007228 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	1c59      	adds	r1, r3, #1
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6211      	str	r1, [r2, #32]
 8007220:	781a      	ldrb	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800722c:	b29b      	uxth	r3, r3
 800722e:	3b01      	subs	r3, #1
 8007230:	b29b      	uxth	r3, r3
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	4619      	mov	r1, r3
 8007236:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10f      	bne.n	800725c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800724a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800725a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	e000      	b.n	8007262 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007260:	2302      	movs	r3, #2
  }
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007284:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7f9 fe36 	bl	8000f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b08c      	sub	sp, #48	; 0x30
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b22      	cmp	r3, #34	; 0x22
 80072b0:	f040 80ab 	bne.w	800740a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072bc:	d117      	bne.n	80072ee <UART_Receive_IT+0x50>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d113      	bne.n	80072ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072dc:	b29a      	uxth	r2, r3
 80072de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e6:	1c9a      	adds	r2, r3, #2
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	629a      	str	r2, [r3, #40]	; 0x28
 80072ec:	e026      	b.n	800733c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007300:	d007      	beq.n	8007312 <UART_Receive_IT+0x74>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10a      	bne.n	8007320 <UART_Receive_IT+0x82>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d106      	bne.n	8007320 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	b2da      	uxtb	r2, r3
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	701a      	strb	r2, [r3, #0]
 800731e:	e008      	b.n	8007332 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	b2db      	uxtb	r3, r3
 8007328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732c:	b2da      	uxtb	r2, r3
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007340:	b29b      	uxth	r3, r3
 8007342:	3b01      	subs	r3, #1
 8007344:	b29b      	uxth	r3, r3
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	4619      	mov	r1, r3
 800734a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800734c:	2b00      	cmp	r3, #0
 800734e:	d15a      	bne.n	8007406 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0220 	bic.w	r2, r2, #32
 800735e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800736e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	695a      	ldr	r2, [r3, #20]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0201 	bic.w	r2, r2, #1
 800737e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738c:	2b01      	cmp	r3, #1
 800738e:	d135      	bne.n	80073fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	330c      	adds	r3, #12
 800739c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	613b      	str	r3, [r7, #16]
   return(result);
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f023 0310 	bic.w	r3, r3, #16
 80073ac:	627b      	str	r3, [r7, #36]	; 0x24
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	330c      	adds	r3, #12
 80073b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b6:	623a      	str	r2, [r7, #32]
 80073b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	69f9      	ldr	r1, [r7, #28]
 80073bc:	6a3a      	ldr	r2, [r7, #32]
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e5      	bne.n	8007396 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0310 	and.w	r3, r3, #16
 80073d4:	2b10      	cmp	r3, #16
 80073d6:	d10a      	bne.n	80073ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073d8:	2300      	movs	r3, #0
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7ff fc51 	bl	8006c9c <HAL_UARTEx_RxEventCallback>
 80073fa:	e002      	b.n	8007402 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7f9 fd9b 	bl	8000f38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	e002      	b.n	800740c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	e000      	b.n	800740c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800740a:	2302      	movs	r3, #2
  }
}
 800740c:	4618      	mov	r0, r3
 800740e:	3730      	adds	r7, #48	; 0x30
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	b09f      	sub	sp, #124	; 0x7c
 800741a:	af00      	add	r7, sp, #0
 800741c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800741e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800742a:	68d9      	ldr	r1, [r3, #12]
 800742c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	ea40 0301 	orr.w	r3, r0, r1
 8007434:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007438:	689a      	ldr	r2, [r3, #8]
 800743a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	431a      	orrs	r2, r3
 8007440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	431a      	orrs	r2, r3
 8007446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	4313      	orrs	r3, r2
 800744c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800744e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007458:	f021 010c 	bic.w	r1, r1, #12
 800745c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007462:	430b      	orrs	r3, r1
 8007464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007472:	6999      	ldr	r1, [r3, #24]
 8007474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	ea40 0301 	orr.w	r3, r0, r1
 800747c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800747e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4bc5      	ldr	r3, [pc, #788]	; (8007798 <UART_SetConfig+0x384>)
 8007484:	429a      	cmp	r2, r3
 8007486:	d004      	beq.n	8007492 <UART_SetConfig+0x7e>
 8007488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	4bc3      	ldr	r3, [pc, #780]	; (800779c <UART_SetConfig+0x388>)
 800748e:	429a      	cmp	r2, r3
 8007490:	d103      	bne.n	800749a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007492:	f7fd fd71 	bl	8004f78 <HAL_RCC_GetPCLK2Freq>
 8007496:	6778      	str	r0, [r7, #116]	; 0x74
 8007498:	e002      	b.n	80074a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800749a:	f7fd fd59 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
 800749e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a8:	f040 80b6 	bne.w	8007618 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074ae:	461c      	mov	r4, r3
 80074b0:	f04f 0500 	mov.w	r5, #0
 80074b4:	4622      	mov	r2, r4
 80074b6:	462b      	mov	r3, r5
 80074b8:	1891      	adds	r1, r2, r2
 80074ba:	6439      	str	r1, [r7, #64]	; 0x40
 80074bc:	415b      	adcs	r3, r3
 80074be:	647b      	str	r3, [r7, #68]	; 0x44
 80074c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074c4:	1912      	adds	r2, r2, r4
 80074c6:	eb45 0303 	adc.w	r3, r5, r3
 80074ca:	f04f 0000 	mov.w	r0, #0
 80074ce:	f04f 0100 	mov.w	r1, #0
 80074d2:	00d9      	lsls	r1, r3, #3
 80074d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074d8:	00d0      	lsls	r0, r2, #3
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	1911      	adds	r1, r2, r4
 80074e0:	6639      	str	r1, [r7, #96]	; 0x60
 80074e2:	416b      	adcs	r3, r5
 80074e4:	667b      	str	r3, [r7, #100]	; 0x64
 80074e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	461a      	mov	r2, r3
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	1891      	adds	r1, r2, r2
 80074f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80074f4:	415b      	adcs	r3, r3
 80074f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007500:	f7f8 fe80 	bl	8000204 <__aeabi_uldivmod>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	4ba5      	ldr	r3, [pc, #660]	; (80077a0 <UART_SetConfig+0x38c>)
 800750a:	fba3 2302 	umull	r2, r3, r3, r2
 800750e:	095b      	lsrs	r3, r3, #5
 8007510:	011e      	lsls	r6, r3, #4
 8007512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007514:	461c      	mov	r4, r3
 8007516:	f04f 0500 	mov.w	r5, #0
 800751a:	4622      	mov	r2, r4
 800751c:	462b      	mov	r3, r5
 800751e:	1891      	adds	r1, r2, r2
 8007520:	6339      	str	r1, [r7, #48]	; 0x30
 8007522:	415b      	adcs	r3, r3
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
 8007526:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800752a:	1912      	adds	r2, r2, r4
 800752c:	eb45 0303 	adc.w	r3, r5, r3
 8007530:	f04f 0000 	mov.w	r0, #0
 8007534:	f04f 0100 	mov.w	r1, #0
 8007538:	00d9      	lsls	r1, r3, #3
 800753a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800753e:	00d0      	lsls	r0, r2, #3
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	1911      	adds	r1, r2, r4
 8007546:	65b9      	str	r1, [r7, #88]	; 0x58
 8007548:	416b      	adcs	r3, r5
 800754a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800754c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	461a      	mov	r2, r3
 8007552:	f04f 0300 	mov.w	r3, #0
 8007556:	1891      	adds	r1, r2, r2
 8007558:	62b9      	str	r1, [r7, #40]	; 0x28
 800755a:	415b      	adcs	r3, r3
 800755c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800755e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007562:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007566:	f7f8 fe4d 	bl	8000204 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4b8c      	ldr	r3, [pc, #560]	; (80077a0 <UART_SetConfig+0x38c>)
 8007570:	fba3 1302 	umull	r1, r3, r3, r2
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	2164      	movs	r1, #100	; 0x64
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	3332      	adds	r3, #50	; 0x32
 8007582:	4a87      	ldr	r2, [pc, #540]	; (80077a0 <UART_SetConfig+0x38c>)
 8007584:	fba2 2303 	umull	r2, r3, r2, r3
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007590:	441e      	add	r6, r3
 8007592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007594:	4618      	mov	r0, r3
 8007596:	f04f 0100 	mov.w	r1, #0
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	1894      	adds	r4, r2, r2
 80075a0:	623c      	str	r4, [r7, #32]
 80075a2:	415b      	adcs	r3, r3
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
 80075a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075aa:	1812      	adds	r2, r2, r0
 80075ac:	eb41 0303 	adc.w	r3, r1, r3
 80075b0:	f04f 0400 	mov.w	r4, #0
 80075b4:	f04f 0500 	mov.w	r5, #0
 80075b8:	00dd      	lsls	r5, r3, #3
 80075ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075be:	00d4      	lsls	r4, r2, #3
 80075c0:	4622      	mov	r2, r4
 80075c2:	462b      	mov	r3, r5
 80075c4:	1814      	adds	r4, r2, r0
 80075c6:	653c      	str	r4, [r7, #80]	; 0x50
 80075c8:	414b      	adcs	r3, r1
 80075ca:	657b      	str	r3, [r7, #84]	; 0x54
 80075cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	461a      	mov	r2, r3
 80075d2:	f04f 0300 	mov.w	r3, #0
 80075d6:	1891      	adds	r1, r2, r2
 80075d8:	61b9      	str	r1, [r7, #24]
 80075da:	415b      	adcs	r3, r3
 80075dc:	61fb      	str	r3, [r7, #28]
 80075de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80075e6:	f7f8 fe0d 	bl	8000204 <__aeabi_uldivmod>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4b6c      	ldr	r3, [pc, #432]	; (80077a0 <UART_SetConfig+0x38c>)
 80075f0:	fba3 1302 	umull	r1, r3, r3, r2
 80075f4:	095b      	lsrs	r3, r3, #5
 80075f6:	2164      	movs	r1, #100	; 0x64
 80075f8:	fb01 f303 	mul.w	r3, r1, r3
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	3332      	adds	r3, #50	; 0x32
 8007602:	4a67      	ldr	r2, [pc, #412]	; (80077a0 <UART_SetConfig+0x38c>)
 8007604:	fba2 2303 	umull	r2, r3, r2, r3
 8007608:	095b      	lsrs	r3, r3, #5
 800760a:	f003 0207 	and.w	r2, r3, #7
 800760e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4432      	add	r2, r6
 8007614:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007616:	e0b9      	b.n	800778c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800761a:	461c      	mov	r4, r3
 800761c:	f04f 0500 	mov.w	r5, #0
 8007620:	4622      	mov	r2, r4
 8007622:	462b      	mov	r3, r5
 8007624:	1891      	adds	r1, r2, r2
 8007626:	6139      	str	r1, [r7, #16]
 8007628:	415b      	adcs	r3, r3
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007630:	1912      	adds	r2, r2, r4
 8007632:	eb45 0303 	adc.w	r3, r5, r3
 8007636:	f04f 0000 	mov.w	r0, #0
 800763a:	f04f 0100 	mov.w	r1, #0
 800763e:	00d9      	lsls	r1, r3, #3
 8007640:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007644:	00d0      	lsls	r0, r2, #3
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	eb12 0804 	adds.w	r8, r2, r4
 800764e:	eb43 0905 	adc.w	r9, r3, r5
 8007652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	4618      	mov	r0, r3
 8007658:	f04f 0100 	mov.w	r1, #0
 800765c:	f04f 0200 	mov.w	r2, #0
 8007660:	f04f 0300 	mov.w	r3, #0
 8007664:	008b      	lsls	r3, r1, #2
 8007666:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800766a:	0082      	lsls	r2, r0, #2
 800766c:	4640      	mov	r0, r8
 800766e:	4649      	mov	r1, r9
 8007670:	f7f8 fdc8 	bl	8000204 <__aeabi_uldivmod>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4b49      	ldr	r3, [pc, #292]	; (80077a0 <UART_SetConfig+0x38c>)
 800767a:	fba3 2302 	umull	r2, r3, r3, r2
 800767e:	095b      	lsrs	r3, r3, #5
 8007680:	011e      	lsls	r6, r3, #4
 8007682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007684:	4618      	mov	r0, r3
 8007686:	f04f 0100 	mov.w	r1, #0
 800768a:	4602      	mov	r2, r0
 800768c:	460b      	mov	r3, r1
 800768e:	1894      	adds	r4, r2, r2
 8007690:	60bc      	str	r4, [r7, #8]
 8007692:	415b      	adcs	r3, r3
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800769a:	1812      	adds	r2, r2, r0
 800769c:	eb41 0303 	adc.w	r3, r1, r3
 80076a0:	f04f 0400 	mov.w	r4, #0
 80076a4:	f04f 0500 	mov.w	r5, #0
 80076a8:	00dd      	lsls	r5, r3, #3
 80076aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80076ae:	00d4      	lsls	r4, r2, #3
 80076b0:	4622      	mov	r2, r4
 80076b2:	462b      	mov	r3, r5
 80076b4:	1814      	adds	r4, r2, r0
 80076b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80076b8:	414b      	adcs	r3, r1
 80076ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f04f 0100 	mov.w	r1, #0
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	008b      	lsls	r3, r1, #2
 80076d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076d4:	0082      	lsls	r2, r0, #2
 80076d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80076da:	f7f8 fd93 	bl	8000204 <__aeabi_uldivmod>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4b2f      	ldr	r3, [pc, #188]	; (80077a0 <UART_SetConfig+0x38c>)
 80076e4:	fba3 1302 	umull	r1, r3, r3, r2
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	2164      	movs	r1, #100	; 0x64
 80076ec:	fb01 f303 	mul.w	r3, r1, r3
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	3332      	adds	r3, #50	; 0x32
 80076f6:	4a2a      	ldr	r2, [pc, #168]	; (80077a0 <UART_SetConfig+0x38c>)
 80076f8:	fba2 2303 	umull	r2, r3, r2, r3
 80076fc:	095b      	lsrs	r3, r3, #5
 80076fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007702:	441e      	add	r6, r3
 8007704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007706:	4618      	mov	r0, r3
 8007708:	f04f 0100 	mov.w	r1, #0
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	1894      	adds	r4, r2, r2
 8007712:	603c      	str	r4, [r7, #0]
 8007714:	415b      	adcs	r3, r3
 8007716:	607b      	str	r3, [r7, #4]
 8007718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800771c:	1812      	adds	r2, r2, r0
 800771e:	eb41 0303 	adc.w	r3, r1, r3
 8007722:	f04f 0400 	mov.w	r4, #0
 8007726:	f04f 0500 	mov.w	r5, #0
 800772a:	00dd      	lsls	r5, r3, #3
 800772c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007730:	00d4      	lsls	r4, r2, #3
 8007732:	4622      	mov	r2, r4
 8007734:	462b      	mov	r3, r5
 8007736:	eb12 0a00 	adds.w	sl, r2, r0
 800773a:	eb43 0b01 	adc.w	fp, r3, r1
 800773e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	4618      	mov	r0, r3
 8007744:	f04f 0100 	mov.w	r1, #0
 8007748:	f04f 0200 	mov.w	r2, #0
 800774c:	f04f 0300 	mov.w	r3, #0
 8007750:	008b      	lsls	r3, r1, #2
 8007752:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007756:	0082      	lsls	r2, r0, #2
 8007758:	4650      	mov	r0, sl
 800775a:	4659      	mov	r1, fp
 800775c:	f7f8 fd52 	bl	8000204 <__aeabi_uldivmod>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4b0e      	ldr	r3, [pc, #56]	; (80077a0 <UART_SetConfig+0x38c>)
 8007766:	fba3 1302 	umull	r1, r3, r3, r2
 800776a:	095b      	lsrs	r3, r3, #5
 800776c:	2164      	movs	r1, #100	; 0x64
 800776e:	fb01 f303 	mul.w	r3, r1, r3
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	3332      	adds	r3, #50	; 0x32
 8007778:	4a09      	ldr	r2, [pc, #36]	; (80077a0 <UART_SetConfig+0x38c>)
 800777a:	fba2 2303 	umull	r2, r3, r2, r3
 800777e:	095b      	lsrs	r3, r3, #5
 8007780:	f003 020f 	and.w	r2, r3, #15
 8007784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4432      	add	r2, r6
 800778a:	609a      	str	r2, [r3, #8]
}
 800778c:	bf00      	nop
 800778e:	377c      	adds	r7, #124	; 0x7c
 8007790:	46bd      	mov	sp, r7
 8007792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007796:	bf00      	nop
 8007798:	40011000 	.word	0x40011000
 800779c:	40011400 	.word	0x40011400
 80077a0:	51eb851f 	.word	0x51eb851f

080077a4 <__libc_init_array>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	4d0d      	ldr	r5, [pc, #52]	; (80077dc <__libc_init_array+0x38>)
 80077a8:	4c0d      	ldr	r4, [pc, #52]	; (80077e0 <__libc_init_array+0x3c>)
 80077aa:	1b64      	subs	r4, r4, r5
 80077ac:	10a4      	asrs	r4, r4, #2
 80077ae:	2600      	movs	r6, #0
 80077b0:	42a6      	cmp	r6, r4
 80077b2:	d109      	bne.n	80077c8 <__libc_init_array+0x24>
 80077b4:	4d0b      	ldr	r5, [pc, #44]	; (80077e4 <__libc_init_array+0x40>)
 80077b6:	4c0c      	ldr	r4, [pc, #48]	; (80077e8 <__libc_init_array+0x44>)
 80077b8:	f000 f820 	bl	80077fc <_init>
 80077bc:	1b64      	subs	r4, r4, r5
 80077be:	10a4      	asrs	r4, r4, #2
 80077c0:	2600      	movs	r6, #0
 80077c2:	42a6      	cmp	r6, r4
 80077c4:	d105      	bne.n	80077d2 <__libc_init_array+0x2e>
 80077c6:	bd70      	pop	{r4, r5, r6, pc}
 80077c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077cc:	4798      	blx	r3
 80077ce:	3601      	adds	r6, #1
 80077d0:	e7ee      	b.n	80077b0 <__libc_init_array+0xc>
 80077d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077d6:	4798      	blx	r3
 80077d8:	3601      	adds	r6, #1
 80077da:	e7f2      	b.n	80077c2 <__libc_init_array+0x1e>
 80077dc:	0800783c 	.word	0x0800783c
 80077e0:	0800783c 	.word	0x0800783c
 80077e4:	0800783c 	.word	0x0800783c
 80077e8:	08007840 	.word	0x08007840

080077ec <memset>:
 80077ec:	4402      	add	r2, r0
 80077ee:	4603      	mov	r3, r0
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d100      	bne.n	80077f6 <memset+0xa>
 80077f4:	4770      	bx	lr
 80077f6:	f803 1b01 	strb.w	r1, [r3], #1
 80077fa:	e7f9      	b.n	80077f0 <memset+0x4>

080077fc <_init>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	bf00      	nop
 8007800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007802:	bc08      	pop	{r3}
 8007804:	469e      	mov	lr, r3
 8007806:	4770      	bx	lr

08007808 <_fini>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	bf00      	nop
 800780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780e:	bc08      	pop	{r3}
 8007810:	469e      	mov	lr, r3
 8007812:	4770      	bx	lr
