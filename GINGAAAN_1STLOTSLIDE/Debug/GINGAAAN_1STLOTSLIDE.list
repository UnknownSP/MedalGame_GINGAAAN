
GINGAAAN_1STLOTSLIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008744  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080088d8  080088d8  000188d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008940  08008940  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08008940  08008940  00018940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008948  08008948  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008948  08008948  00018948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800894c  0800894c  0001894c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08008950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000107c  20000150  08008aa0  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011cc  08008aa0  000211cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e56e  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d86  00000000  00000000  0003e6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00042478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00043390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0c8  00000000  00000000  00044140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ecc  00000000  00000000  0005e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a8d6  00000000  00000000  000740d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe9aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c8c  00000000  00000000  000fea00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000150 	.word	0x20000150
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080088c0 	.word	0x080088c0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000154 	.word	0x20000154
 80001d0:	080088c0 	.word	0x080088c0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <appInit>:
//static void CheckTouch(uint8_t* recvData, bool* setData);
//static void SetColorData(uint8_t* setArray, uint8_t setColorTouch[][3], uint8_t setColorBar[][3]);
static bool IO_Read(uint8_t sensor);

//初期化
int appInit(void){
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
		SliderBarLEDData[i][1] = 00;
		SliderBarLEDData[i][2] = 128;
	}
	D_Slider_SetThreshold(TouchThreshold);
	*/
	return 0;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <appTask>:

int appTask(void){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
	static int testCount1 = 0;
	static int testCount2 = 0;
	static int testCount3 = 0;
	static int testCount4 = 0;

	sndTime += G_System_counter - recent_System_counter;
 80004e2:	4b9c      	ldr	r3, [pc, #624]	; (8000754 <appTask+0x278>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4b9c      	ldr	r3, [pc, #624]	; (8000758 <appTask+0x27c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	1ad2      	subs	r2, r2, r3
 80004ec:	4b9b      	ldr	r3, [pc, #620]	; (800075c <appTask+0x280>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4413      	add	r3, r2
 80004f2:	4a9a      	ldr	r2, [pc, #616]	; (800075c <appTask+0x280>)
 80004f4:	6013      	str	r3, [r2, #0]
	rcvTime += G_System_counter - recent_System_counter;
 80004f6:	4b97      	ldr	r3, [pc, #604]	; (8000754 <appTask+0x278>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	4b97      	ldr	r3, [pc, #604]	; (8000758 <appTask+0x27c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	1ad2      	subs	r2, r2, r3
 8000500:	4b97      	ldr	r3, [pc, #604]	; (8000760 <appTask+0x284>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4413      	add	r3, r2
 8000506:	4a96      	ldr	r2, [pc, #600]	; (8000760 <appTask+0x284>)
 8000508:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_counter;
 800050a:	4b92      	ldr	r3, [pc, #584]	; (8000754 <appTask+0x278>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a92      	ldr	r2, [pc, #584]	; (8000758 <appTask+0x27c>)
 8000510:	6013      	str	r3, [r2, #0]

	//CAN送信タイミングなら送信
	if(sndTime >= CAN_SEND_INTERVAL){
 8000512:	4b92      	ldr	r3, [pc, #584]	; (800075c <appTask+0x280>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b09      	cmp	r3, #9
 8000518:	d902      	bls.n	8000520 <appTask+0x44>

		sndTime = 0;
 800051a:	4b90      	ldr	r3, [pc, #576]	; (800075c <appTask+0x280>)
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
	}

	static uint8_t sum = 0;
	if(rcvTime >= UART_RECEIVE_INTERVAL){
 8000520:	4b8f      	ldr	r3, [pc, #572]	; (8000760 <appTask+0x284>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b13      	cmp	r3, #19
 8000526:	d965      	bls.n	80005f4 <appTask+0x118>
		static int sendLength = 10;
		sndData_UART[0] = 0xe0;//testCount1;
 8000528:	4b8e      	ldr	r3, [pc, #568]	; (8000764 <appTask+0x288>)
 800052a:	22e0      	movs	r2, #224	; 0xe0
 800052c:	701a      	strb	r2, [r3, #0]
		sndData_UART[1] = testCount1;//testCount1;//testCount2;
 800052e:	4b8e      	ldr	r3, [pc, #568]	; (8000768 <appTask+0x28c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b8b      	ldr	r3, [pc, #556]	; (8000764 <appTask+0x288>)
 8000536:	705a      	strb	r2, [r3, #1]
		sndData_UART[2] = testCount;
 8000538:	4b8c      	ldr	r3, [pc, #560]	; (800076c <appTask+0x290>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b89      	ldr	r3, [pc, #548]	; (8000764 <appTask+0x288>)
 8000540:	709a      	strb	r2, [r3, #2]
		sndData_UART[3] = 5;
 8000542:	4b88      	ldr	r3, [pc, #544]	; (8000764 <appTask+0x288>)
 8000544:	2205      	movs	r2, #5
 8000546:	70da      	strb	r2, [r3, #3]
		sndData_UART[4] = testCount1;
 8000548:	4b87      	ldr	r3, [pc, #540]	; (8000768 <appTask+0x28c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b85      	ldr	r3, [pc, #532]	; (8000764 <appTask+0x288>)
 8000550:	711a      	strb	r2, [r3, #4]
		sndData_UART[5] = 200;
 8000552:	4b84      	ldr	r3, [pc, #528]	; (8000764 <appTask+0x288>)
 8000554:	22c8      	movs	r2, #200	; 0xc8
 8000556:	715a      	strb	r2, [r3, #5]
		sndData_UART[6] = 200;
 8000558:	4b82      	ldr	r3, [pc, #520]	; (8000764 <appTask+0x288>)
 800055a:	22c8      	movs	r2, #200	; 0xc8
 800055c:	719a      	strb	r2, [r3, #6]
		sndData_UART[7] = 200;
 800055e:	4b81      	ldr	r3, [pc, #516]	; (8000764 <appTask+0x288>)
 8000560:	22c8      	movs	r2, #200	; 0xc8
 8000562:	71da      	strb	r2, [r3, #7]
		sndData_UART[13] = 0;//testCount1;
		sndData_UART[14] = 0;//testCount2;
		sndData_UART[15] = 0;//testCount1;
		*/

		uint8_t dataSum = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	75fb      	strb	r3, [r7, #23]
		//dataSum += sndData_UART[1];
		for(int j=1; j<sendLength-1; j++){
 8000568:	2301      	movs	r3, #1
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	e00a      	b.n	8000584 <appTask+0xa8>
			dataSum += sndData_UART[j];
 800056e:	4a7d      	ldr	r2, [pc, #500]	; (8000764 <appTask+0x288>)
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	4413      	add	r3, r2
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b2da      	uxtb	r2, r3
 8000578:	7dfb      	ldrb	r3, [r7, #23]
 800057a:	4413      	add	r3, r2
 800057c:	75fb      	strb	r3, [r7, #23]
		for(int j=1; j<sendLength-1; j++){
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	3301      	adds	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	4b7a      	ldr	r3, [pc, #488]	; (8000770 <appTask+0x294>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3b01      	subs	r3, #1
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	429a      	cmp	r2, r3
 800058e:	dbee      	blt.n	800056e <appTask+0x92>
		}
		//dataSum += 2;

		//int checkSum = 256 - (int)dataSum;
		//sndData_UART[2/*sendLength-1*/] = (uint8_t)checkSum - 1;
		sndData_UART[sendLength-1] = (uint8_t)dataSum;
 8000590:	4b77      	ldr	r3, [pc, #476]	; (8000770 <appTask+0x294>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3b01      	subs	r3, #1
 8000596:	4973      	ldr	r1, [pc, #460]	; (8000764 <appTask+0x288>)
 8000598:	7dfa      	ldrb	r2, [r7, #23]
 800059a:	54ca      	strb	r2, [r1, r3]

		//retSnd = D_Slider_Send(sndData_UART,sendLength);
		//retRcv = D_Slider_Receive(rcvData_UART,16);
		rcvTime = 0;
 800059c:	4b70      	ldr	r3, [pc, #448]	; (8000760 <appTask+0x284>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
		for(int i=0; i<5; i++){
			if(((data[8]>>i) & 1) == 1) SensorCountR[i]++;
		}
		*/

		testCount1++;
 80005a2:	4b71      	ldr	r3, [pc, #452]	; (8000768 <appTask+0x28c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	3301      	adds	r3, #1
 80005a8:	4a6f      	ldr	r2, [pc, #444]	; (8000768 <appTask+0x28c>)
 80005aa:	6013      	str	r3, [r2, #0]
		if(testCount1 >= 256){
 80005ac:	4b6e      	ldr	r3, [pc, #440]	; (8000768 <appTask+0x28c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2bff      	cmp	r3, #255	; 0xff
 80005b2:	dd07      	ble.n	80005c4 <appTask+0xe8>
			testCount1 = 0;
 80005b4:	4b6c      	ldr	r3, [pc, #432]	; (8000768 <appTask+0x28c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
			testCount2++;
 80005ba:	4b6e      	ldr	r3, [pc, #440]	; (8000774 <appTask+0x298>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	4a6c      	ldr	r2, [pc, #432]	; (8000774 <appTask+0x298>)
 80005c2:	6013      	str	r3, [r2, #0]
		}
		if(testCount2 >= 256){
 80005c4:	4b6b      	ldr	r3, [pc, #428]	; (8000774 <appTask+0x298>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2bff      	cmp	r3, #255	; 0xff
 80005ca:	dd07      	ble.n	80005dc <appTask+0x100>
			testCount2 = 0;
 80005cc:	4b69      	ldr	r3, [pc, #420]	; (8000774 <appTask+0x298>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
			testCount3++;
 80005d2:	4b69      	ldr	r3, [pc, #420]	; (8000778 <appTask+0x29c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	4a67      	ldr	r2, [pc, #412]	; (8000778 <appTask+0x29c>)
 80005da:	6013      	str	r3, [r2, #0]
		}
		if(testCount3 >= 256){
 80005dc:	4b66      	ldr	r3, [pc, #408]	; (8000778 <appTask+0x29c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2bff      	cmp	r3, #255	; 0xff
 80005e2:	dd07      	ble.n	80005f4 <appTask+0x118>
			testCount3 = 0;
 80005e4:	4b64      	ldr	r3, [pc, #400]	; (8000778 <appTask+0x29c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
			testCount4++;
 80005ea:	4b64      	ldr	r3, [pc, #400]	; (800077c <appTask+0x2a0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	4a62      	ldr	r2, [pc, #392]	; (800077c <appTask+0x2a0>)
 80005f2:	6013      	str	r3, [r2, #0]
		}
	}

	bool R = (testCount & 1) == 1;
 80005f4:	4b5d      	ldr	r3, [pc, #372]	; (800076c <appTask+0x290>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf14      	ite	ne
 8000600:	2301      	movne	r3, #1
 8000602:	2300      	moveq	r3, #0
 8000604:	71fb      	strb	r3, [r7, #7]
	bool G = ((testCount>>1) & 1) == 1;
 8000606:	4b59      	ldr	r3, [pc, #356]	; (800076c <appTask+0x290>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	2b00      	cmp	r3, #0
 8000610:	bf14      	ite	ne
 8000612:	2301      	movne	r3, #1
 8000614:	2300      	moveq	r3, #0
 8000616:	71bb      	strb	r3, [r7, #6]
	bool B = ((testCount>>2) & 1) == 1;
 8000618:	4b54      	ldr	r3, [pc, #336]	; (800076c <appTask+0x290>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	2b00      	cmp	r3, #0
 8000622:	bf14      	ite	ne
 8000624:	2301      	movne	r3, #1
 8000626:	2300      	moveq	r3, #0
 8000628:	717b      	strb	r3, [r7, #5]
	for(int i=0; i<5; i++){
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	e044      	b.n	80006ba <appTask+0x1de>
		if (D_Slider_GetSensorData(0,i) != 0){
 8000630:	68f9      	ldr	r1, [r7, #12]
 8000632:	2000      	movs	r0, #0
 8000634:	f000 fdbe 	bl	80011b4 <D_Slider_GetSensorData>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d019      	beq.n	8000672 <appTask+0x196>
			SliderLEDDataR[i][0] = true;
 800063e:	4950      	ldr	r1, [pc, #320]	; (8000780 <appTask+0x2a4>)
 8000640:	68fa      	ldr	r2, [r7, #12]
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	440b      	add	r3, r1
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
			SliderLEDDataR[i][1] = true;
 800064e:	494c      	ldr	r1, [pc, #304]	; (8000780 <appTask+0x2a4>)
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	4613      	mov	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	440b      	add	r3, r1
 800065a:	3301      	adds	r3, #1
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
			SliderLEDDataR[i][2] = true;
 8000660:	4947      	ldr	r1, [pc, #284]	; (8000780 <appTask+0x2a4>)
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	4613      	mov	r3, r2
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	4413      	add	r3, r2
 800066a:	440b      	add	r3, r1
 800066c:	3302      	adds	r3, #2
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
		}
		if (D_Slider_GetSensorData(1,i) != 0){
 8000672:	68f9      	ldr	r1, [r7, #12]
 8000674:	2001      	movs	r0, #1
 8000676:	f000 fd9d 	bl	80011b4 <D_Slider_GetSensorData>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d019      	beq.n	80006b4 <appTask+0x1d8>
			SliderLEDDataL[i][0] = true;
 8000680:	4940      	ldr	r1, [pc, #256]	; (8000784 <appTask+0x2a8>)
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4613      	mov	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	4413      	add	r3, r2
 800068a:	440b      	add	r3, r1
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
			SliderLEDDataL[i][1] = true;
 8000690:	493c      	ldr	r1, [pc, #240]	; (8000784 <appTask+0x2a8>)
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	440b      	add	r3, r1
 800069c:	3301      	adds	r3, #1
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
			SliderLEDDataL[i][2] = true;
 80006a2:	4938      	ldr	r1, [pc, #224]	; (8000784 <appTask+0x2a8>)
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	4613      	mov	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	3302      	adds	r3, #2
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<5; i++){
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b04      	cmp	r3, #4
 80006be:	ddb7      	ble.n	8000630 <appTask+0x154>
	SliderLEDDataL[0][2] = testCount1 % 2 == 0;
	SliderLEDDataL[3][0] = testCount1 % 2 == 0;
	SliderLEDDataL[3][2] = testCount1 % 2 == 0;
	SliderLEDDataL[2][0] = testCount1 % 2 == 0;
	*/
	D_Slider_SetColorData(SliderLEDDataR, SliderLEDDataL);
 80006c0:	4930      	ldr	r1, [pc, #192]	; (8000784 <appTask+0x2a8>)
 80006c2:	482f      	ldr	r0, [pc, #188]	; (8000780 <appTask+0x2a4>)
 80006c4:	f000 fe04 	bl	80012d0 <D_Slider_SetColorData>
		HAL_UART_Transmit(&huart1, (uint8_t*)controllerSendData, 4, 10);
	}
	*/

	//マイコンについてるボタンかスタートボタンが押されたらボール発射
	if(IO_READ_USERBUTTON() && _userButton){
 80006c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006cc:	482e      	ldr	r0, [pc, #184]	; (8000788 <appTask+0x2ac>)
 80006ce:	f000 ff43 	bl	8001558 <D_GPIO_Read>
 80006d2:	4603      	mov	r3, r0
 80006d4:	f083 0301 	eor.w	r3, r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00b      	beq.n	80006f6 <appTask+0x21a>
 80006de:	4b2b      	ldr	r3, [pc, #172]	; (800078c <appTask+0x2b0>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <appTask+0x21a>
		_userButton = false;
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <appTask+0x2b0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
		testCount++;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <appTask+0x290>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	4a1e      	ldr	r2, [pc, #120]	; (800076c <appTask+0x290>)
 80006f4:	6013      	str	r3, [r2, #0]
		int checkSum = 256 - (int)dataSum;
		controllerSendData[100] = (uint8_t)checkSum;
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)controllerSendData, 101);
		*/
	}
	if(!IO_READ_USERBUTTON()){
 80006f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fa:	4823      	ldr	r0, [pc, #140]	; (8000788 <appTask+0x2ac>)
 80006fc:	f000 ff2c 	bl	8001558 <D_GPIO_Read>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d002      	beq.n	800070c <appTask+0x230>
		_userButton = true;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <appTask+0x2b0>)
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
		IO_RESET_USERLED();
	}
	*/
	//testMode---------------------------------------------------

	for(int i=0; i<16; i++){
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	e013      	b.n	800073a <appTask+0x25e>
		if(rcvData_UART[i] != 0) rcvJudge[i] = rcvData_UART[i];
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <appTask+0x2b4>)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d009      	beq.n	8000734 <appTask+0x258>
 8000720:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <appTask+0x2b4>)
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	4a19      	ldr	r2, [pc, #100]	; (8000794 <appTask+0x2b8>)
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<16; i++){
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	3301      	adds	r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	dde8      	ble.n	8000712 <appTask+0x236>
	}

	//デバッグ用
	int16_t debug_bits = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	807b      	strh	r3, [r7, #2]
	debug_bits &= 0;
 8000744:	2300      	movs	r3, #0
 8000746:	807b      	strh	r3, [r7, #2]
	//D_Mess_printf("%08b\n", ownHold_Pocket);
	//D_Mess_printf("%08b\n", allHold_Pocket);
	//D_Mess_printf("processState: ,%2d\n", processState);
	//D_Mess_printf("PC: ,%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n",rcvData_UART[0],rcvData_UART[1],rcvData_UART[2],rcvData_UART[3],rcvData_UART[4],rcvData_UART[5],rcvData_UART[6],rcvData_UART[7]);

	return 0;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000220 	.word	0x20000220
 8000758:	200001bc 	.word	0x200001bc
 800075c:	200001c0 	.word	0x200001c0
 8000760:	200001c4 	.word	0x200001c4
 8000764:	2000018c 	.word	0x2000018c
 8000768:	200001c8 	.word	0x200001c8
 800076c:	200001cc 	.word	0x200001cc
 8000770:	20000000 	.word	0x20000000
 8000774:	200001d0 	.word	0x200001d0
 8000778:	200001d4 	.word	0x200001d4
 800077c:	200001d8 	.word	0x200001d8
 8000780:	2000019c 	.word	0x2000019c
 8000784:	200001ac 	.word	0x200001ac
 8000788:	40020800 	.word	0x40020800
 800078c:	200001dc 	.word	0x200001dc
 8000790:	2000016c 	.word	0x2000016c
 8000794:	200001e0 	.word	0x200001e0

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	; 0x30
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f000 ff3b 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f82d 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a6:	f000 f92f 	bl	8000a08 <MX_GPIO_Init>
  MX_DMA_Init();
 80007aa:	f000 f8e7 	bl	800097c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80007ae:	f000 f891 	bl	80008d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007b2:	f000 f8b9 	bl	8000928 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80007b6:	f007 fc0d 	bl	8007fd4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 80007ba:	f7ff fe87 	bl	80004cc <appInit>
	  uint8_t modifiers;
	  uint8_t reserved;
	  uint8_t key[38];
  };
  struct keyboardHID_t keyboardHID;
  keyboardHID.modifiers = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	713b      	strb	r3, [r7, #4]
  keyboardHID.reserved = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	717b      	strb	r3, [r7, #5]
  for(int i = 0 ;i < 38; i++){
 80007c6:	2300      	movs	r3, #0
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007ca:	e007      	b.n	80007dc <main+0x44>
	  keyboardHID.key[i] = 0;
 80007cc:	1dba      	adds	r2, r7, #6
 80007ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d0:	4413      	add	r3, r2
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ;i < 38; i++){
 80007d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d8:	3301      	adds	r3, #1
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007de:	2b25      	cmp	r3, #37	; 0x25
 80007e0:	ddf4      	ble.n	80007cc <main+0x34>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appTask();
 80007e2:	f7ff fe7b 	bl	80004dc <appTask>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 0){
 80007e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <main+0x64>)
 80007ec:	f001 fe42 	bl	8002474 <HAL_GPIO_ReadPin>
		  for(int i = 0 ;i < 38; i++){
			  keyboardHID.key[i] = 0;
		  }
	  }
	  */
	  D_Slider_SystickUpdate();
 80007f0:	f000 fbe8 	bl	8000fc4 <D_Slider_SystickUpdate>
	  //D_USBHID_SysticUpdate();
	  D_Mess_flush();
 80007f4:	f000 fec6 	bl	8001584 <D_Mess_flush>
	  appTask();
 80007f8:	e7f3      	b.n	80007e2 <main+0x4a>
 80007fa:	bf00      	nop
 80007fc:	40020800 	.word	0x40020800

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f008 f84e 	bl	80088b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <SystemClock_Config+0xcc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a27      	ldr	r2, [pc, #156]	; (80008cc <SystemClock_Config+0xcc>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <SystemClock_Config+0xd0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800084c:	4a20      	ldr	r2, [pc, #128]	; (80008d0 <SystemClock_Config+0xd0>)
 800084e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <SystemClock_Config+0xd0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000864:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086a:	2302      	movs	r3, #2
 800086c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000874:	2304      	movs	r3, #4
 8000876:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000878:	23c0      	movs	r3, #192	; 0xc0
 800087a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800087c:	2306      	movs	r3, #6
 800087e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000880:	2308      	movs	r3, #8
 8000882:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4618      	mov	r0, r3
 800088a:	f002 ff8f 	bl	80037ac <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000894:	f000 f95e 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2302      	movs	r3, #2
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2102      	movs	r1, #2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 f9f1 	bl	8003c9c <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008c0:	f000 f948 	bl	8000b54 <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3750      	adds	r7, #80	; 0x50
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_USART1_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART1_UART_Init+0x4c>)
 800090c:	f003 fbc2 	bl	8004094 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000916:	f000 f91d 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000085c 	.word	0x2000085c
 8000924:	40011000 	.word	0x40011000

08000928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_USART2_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART2_UART_Init+0x4c>)
 8000960:	f003 fb98 	bl	8004094 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800096a:	f000 f8f3 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200008a0 	.word	0x200008a0
 8000978:	40004400 	.word	0x40004400

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_DMA_Init+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a1e      	ldr	r2, [pc, #120]	; (8000a04 <MX_DMA_Init+0x88>)
 800098c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_DMA_Init+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_DMA_Init+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <MX_DMA_Init+0x88>)
 80009a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_DMA_Init+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2010      	movs	r0, #16
 80009c0:	f000 ff9b 	bl	80018fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009c4:	2010      	movs	r0, #16
 80009c6:	f000 ffb4 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2011      	movs	r0, #17
 80009d0:	f000 ff93 	bl	80018fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009d4:	2011      	movs	r0, #17
 80009d6:	f000 ffac 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	203a      	movs	r0, #58	; 0x3a
 80009e0:	f000 ff8b 	bl	80018fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80009e4:	203a      	movs	r0, #58	; 0x3a
 80009e6:	f000 ffa4 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2046      	movs	r0, #70	; 0x46
 80009f0:	f000 ff83 	bl	80018fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80009f4:	2046      	movs	r0, #70	; 0x46
 80009f6:	f000 ff9c 	bl	8001932 <HAL_NVIC_EnableIRQ>

}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a2c      	ldr	r2, [pc, #176]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a25      	ldr	r2, [pc, #148]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <MX_GPIO_Init+0xd4>)
 8000a94:	f001 fd06 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <MX_GPIO_Init+0xd8>)
 8000ab0:	f001 fb5c 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_GPIO_Init+0xd4>)
 8000acc:	f001 fb4e 	bl	800216c <HAL_GPIO_Init>

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_UART_TxCpltCallback+0x30>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d102      	bne.n	8000afc <HAL_UART_TxCpltCallback+0x18>
	  D_Mess_TransitionCompletedCallBack();
 8000af6:	f000 fd77 	bl	80015e8 <D_Mess_TransitionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_TransitionCompletedCallBack();
  }
}
 8000afa:	e006      	b.n	8000b0a <HAL_UART_TxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <HAL_UART_TxCpltCallback+0x34>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d101      	bne.n	8000b0a <HAL_UART_TxCpltCallback+0x26>
	  D_Slider_TransitionCompletedCallBack();
 8000b06:	f000 fd0b 	bl	8001520 <D_Slider_TransitionCompletedCallBack>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40004400 	.word	0x40004400
 8000b18:	40011000 	.word	0x40011000

08000b1c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_UART_RxCpltCallback+0x30>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d102      	bne.n	8000b34 <HAL_UART_RxCpltCallback+0x18>
	  D_Mess_ReceptionCompletedCallBack();
 8000b2e:	f000 fd67 	bl	8001600 <D_Mess_ReceptionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_ReceptionCompletedCallBack();
  }
}
 8000b32:	e006      	b.n	8000b42 <HAL_UART_RxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <HAL_UART_RxCpltCallback+0x34>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_UART_RxCpltCallback+0x26>
	  D_Slider_ReceptionCompletedCallBack();
 8000b3e:	f000 fcfb 	bl	8001538 <D_Slider_ReceptionCompletedCallBack>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40011000 	.word	0x40011000

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_MspInit+0x4c>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x4c>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b9e:	2007      	movs	r0, #7
 8000ba0:	f000 fea0 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a97      	ldr	r2, [pc, #604]	; (8000e2c <HAL_UART_MspInit+0x27c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	f040 8092 	bne.w	8000cf8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
 8000bd8:	4b95      	ldr	r3, [pc, #596]	; (8000e30 <HAL_UART_MspInit+0x280>)
 8000bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bdc:	4a94      	ldr	r2, [pc, #592]	; (8000e30 <HAL_UART_MspInit+0x280>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6453      	str	r3, [r2, #68]	; 0x44
 8000be4:	4b92      	ldr	r3, [pc, #584]	; (8000e30 <HAL_UART_MspInit+0x280>)
 8000be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be8:	f003 0310 	and.w	r3, r3, #16
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	4b8e      	ldr	r3, [pc, #568]	; (8000e30 <HAL_UART_MspInit+0x280>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	4a8d      	ldr	r2, [pc, #564]	; (8000e30 <HAL_UART_MspInit+0x280>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000c00:	4b8b      	ldr	r3, [pc, #556]	; (8000e30 <HAL_UART_MspInit+0x280>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4882      	ldr	r0, [pc, #520]	; (8000e34 <HAL_UART_MspInit+0x284>)
 8000c2a:	f001 fa9f 	bl	800216c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000c2e:	4b82      	ldr	r3, [pc, #520]	; (8000e38 <HAL_UART_MspInit+0x288>)
 8000c30:	4a82      	ldr	r2, [pc, #520]	; (8000e3c <HAL_UART_MspInit+0x28c>)
 8000c32:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000c34:	4b80      	ldr	r3, [pc, #512]	; (8000e38 <HAL_UART_MspInit+0x288>)
 8000c36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c3a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c3c:	4b7e      	ldr	r3, [pc, #504]	; (8000e38 <HAL_UART_MspInit+0x288>)
 8000c3e:	2240      	movs	r2, #64	; 0x40
 8000c40:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c42:	4b7d      	ldr	r3, [pc, #500]	; (8000e38 <HAL_UART_MspInit+0x288>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c48:	4b7b      	ldr	r3, [pc, #492]	; (8000e38 <HAL_UART_MspInit+0x288>)
 8000c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c50:	4b79      	ldr	r3, [pc, #484]	; (8000e38 <HAL_UART_MspInit+0x288>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c56:	4b78      	ldr	r3, [pc, #480]	; (8000e38 <HAL_UART_MspInit+0x288>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000c5c:	4b76      	ldr	r3, [pc, #472]	; (8000e38 <HAL_UART_MspInit+0x288>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c62:	4b75      	ldr	r3, [pc, #468]	; (8000e38 <HAL_UART_MspInit+0x288>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c68:	4b73      	ldr	r3, [pc, #460]	; (8000e38 <HAL_UART_MspInit+0x288>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c6e:	4872      	ldr	r0, [pc, #456]	; (8000e38 <HAL_UART_MspInit+0x288>)
 8000c70:	f000 fe7a 	bl	8001968 <HAL_DMA_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000c7a:	f7ff ff6b 	bl	8000b54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a6d      	ldr	r2, [pc, #436]	; (8000e38 <HAL_UART_MspInit+0x288>)
 8000c82:	635a      	str	r2, [r3, #52]	; 0x34
 8000c84:	4a6c      	ldr	r2, [pc, #432]	; (8000e38 <HAL_UART_MspInit+0x288>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000c8a:	4b6d      	ldr	r3, [pc, #436]	; (8000e40 <HAL_UART_MspInit+0x290>)
 8000c8c:	4a6d      	ldr	r2, [pc, #436]	; (8000e44 <HAL_UART_MspInit+0x294>)
 8000c8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000c90:	4b6b      	ldr	r3, [pc, #428]	; (8000e40 <HAL_UART_MspInit+0x290>)
 8000c92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c96:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c98:	4b69      	ldr	r3, [pc, #420]	; (8000e40 <HAL_UART_MspInit+0x290>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9e:	4b68      	ldr	r3, [pc, #416]	; (8000e40 <HAL_UART_MspInit+0x290>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca4:	4b66      	ldr	r3, [pc, #408]	; (8000e40 <HAL_UART_MspInit+0x290>)
 8000ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000caa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cac:	4b64      	ldr	r3, [pc, #400]	; (8000e40 <HAL_UART_MspInit+0x290>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb2:	4b63      	ldr	r3, [pc, #396]	; (8000e40 <HAL_UART_MspInit+0x290>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cb8:	4b61      	ldr	r3, [pc, #388]	; (8000e40 <HAL_UART_MspInit+0x290>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cbe:	4b60      	ldr	r3, [pc, #384]	; (8000e40 <HAL_UART_MspInit+0x290>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc4:	4b5e      	ldr	r3, [pc, #376]	; (8000e40 <HAL_UART_MspInit+0x290>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cca:	485d      	ldr	r0, [pc, #372]	; (8000e40 <HAL_UART_MspInit+0x290>)
 8000ccc:	f000 fe4c 	bl	8001968 <HAL_DMA_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000cd6:	f7ff ff3d 	bl	8000b54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a58      	ldr	r2, [pc, #352]	; (8000e40 <HAL_UART_MspInit+0x290>)
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38
 8000ce0:	4a57      	ldr	r2, [pc, #348]	; (8000e40 <HAL_UART_MspInit+0x290>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2025      	movs	r0, #37	; 0x25
 8000cec:	f000 fe05 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cf0:	2025      	movs	r0, #37	; 0x25
 8000cf2:	f000 fe1e 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf6:	e095      	b.n	8000e24 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a52      	ldr	r2, [pc, #328]	; (8000e48 <HAL_UART_MspInit+0x298>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	f040 8090 	bne.w	8000e24 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	4b49      	ldr	r3, [pc, #292]	; (8000e30 <HAL_UART_MspInit+0x280>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a48      	ldr	r2, [pc, #288]	; (8000e30 <HAL_UART_MspInit+0x280>)
 8000d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
 8000d14:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <HAL_UART_MspInit+0x280>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <HAL_UART_MspInit+0x280>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a41      	ldr	r2, [pc, #260]	; (8000e30 <HAL_UART_MspInit+0x280>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <HAL_UART_MspInit+0x280>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	4837      	ldr	r0, [pc, #220]	; (8000e34 <HAL_UART_MspInit+0x284>)
 8000d58:	f001 fa08 	bl	800216c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d5c:	4b3b      	ldr	r3, [pc, #236]	; (8000e4c <HAL_UART_MspInit+0x29c>)
 8000d5e:	4a3c      	ldr	r2, [pc, #240]	; (8000e50 <HAL_UART_MspInit+0x2a0>)
 8000d60:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d62:	4b3a      	ldr	r3, [pc, #232]	; (8000e4c <HAL_UART_MspInit+0x29c>)
 8000d64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d68:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6a:	4b38      	ldr	r3, [pc, #224]	; (8000e4c <HAL_UART_MspInit+0x29c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d70:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <HAL_UART_MspInit+0x29c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d76:	4b35      	ldr	r3, [pc, #212]	; (8000e4c <HAL_UART_MspInit+0x29c>)
 8000d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d7e:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <HAL_UART_MspInit+0x29c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d84:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <HAL_UART_MspInit+0x29c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d8a:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <HAL_UART_MspInit+0x29c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d90:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <HAL_UART_MspInit+0x29c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <HAL_UART_MspInit+0x29c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d9c:	482b      	ldr	r0, [pc, #172]	; (8000e4c <HAL_UART_MspInit+0x29c>)
 8000d9e:	f000 fde3 	bl	8001968 <HAL_DMA_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8000da8:	f7ff fed4 	bl	8000b54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <HAL_UART_MspInit+0x29c>)
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38
 8000db2:	4a26      	ldr	r2, [pc, #152]	; (8000e4c <HAL_UART_MspInit+0x29c>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000db8:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <HAL_UART_MspInit+0x2a4>)
 8000dba:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <HAL_UART_MspInit+0x2a8>)
 8000dbc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <HAL_UART_MspInit+0x2a4>)
 8000dc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dc6:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <HAL_UART_MspInit+0x2a4>)
 8000dc8:	2240      	movs	r2, #64	; 0x40
 8000dca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <HAL_UART_MspInit+0x2a4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <HAL_UART_MspInit+0x2a4>)
 8000dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <HAL_UART_MspInit+0x2a4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_UART_MspInit+0x2a4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_UART_MspInit+0x2a4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <HAL_UART_MspInit+0x2a4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <HAL_UART_MspInit+0x2a4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000df8:	4816      	ldr	r0, [pc, #88]	; (8000e54 <HAL_UART_MspInit+0x2a4>)
 8000dfa:	f000 fdb5 	bl	8001968 <HAL_DMA_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8000e04:	f7ff fea6 	bl	8000b54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <HAL_UART_MspInit+0x2a4>)
 8000e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e0e:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <HAL_UART_MspInit+0x2a4>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	2026      	movs	r0, #38	; 0x26
 8000e1a:	f000 fd6e 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e1e:	2026      	movs	r0, #38	; 0x26
 8000e20:	f000 fd87 	bl	8001932 <HAL_NVIC_EnableIRQ>
}
 8000e24:	bf00      	nop
 8000e26:	3730      	adds	r7, #48	; 0x30
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40011000 	.word	0x40011000
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020000 	.word	0x40020000
 8000e38:	2000073c 	.word	0x2000073c
 8000e3c:	400264b8 	.word	0x400264b8
 8000e40:	2000079c 	.word	0x2000079c
 8000e44:	40026440 	.word	0x40026440
 8000e48:	40004400 	.word	0x40004400
 8000e4c:	200006dc 	.word	0x200006dc
 8000e50:	40026088 	.word	0x40026088
 8000e54:	200007fc 	.word	0x200007fc
 8000e58:	400260a0 	.word	0x400260a0

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea8:	f000 fc08 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <SysTick_Handler+0x18>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4a02      	ldr	r2, [pc, #8]	; (8000ebc <SysTick_Handler+0x18>)
 8000eb4:	6013      	str	r3, [r2, #0]
  //D_Slider_SystickUpdate();
  //D_USBHID_SysticUpdate();
  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000220 	.word	0x20000220

08000ec0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <DMA1_Stream5_IRQHandler+0x10>)
 8000ec6:	f000 fee7 	bl	8001c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200006dc 	.word	0x200006dc

08000ed4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <DMA1_Stream6_IRQHandler+0x10>)
 8000eda:	f000 fedd 	bl	8001c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200007fc 	.word	0x200007fc

08000ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <USART1_IRQHandler+0x10>)
 8000eee:	f003 f9cd 	bl	800428c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000085c 	.word	0x2000085c

08000efc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <USART2_IRQHandler+0x10>)
 8000f02:	f003 f9c3 	bl	800428c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200008a0 	.word	0x200008a0

08000f10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <DMA2_Stream2_IRQHandler+0x10>)
 8000f16:	f000 febf 	bl	8001c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000079c 	.word	0x2000079c

08000f24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <OTG_FS_IRQHandler+0x10>)
 8000f2a:	f001 fc24 	bl	8002776 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000dc4 	.word	0x20000dc4

08000f38 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <DMA2_Stream7_IRQHandler+0x10>)
 8000f3e:	f000 feab 	bl	8001c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000073c 	.word	0x2000073c

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f76:	490e      	ldr	r1, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f8c:	4c0b      	ldr	r4, [pc, #44]	; (8000fbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f9a:	f7ff ffd7 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f007 fc63 	bl	8008868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fbf9 	bl	8000798 <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000fb4:	08008950 	.word	0x08008950
  ldr r2, =_sbss
 8000fb8:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000fbc:	200011cc 	.word	0x200011cc

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <D_Slider_SystickUpdate>:
static SliderLightingMode rightLightingMode = SL_NORMAL;
static SliderLightingMode leftLightingMode = SL_NORMAL;
static uint8_t inPocketR = 0;
static uint8_t inPocketL = 0;

void D_Slider_SystickUpdate(){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	static uint32_t sndTime = 0;
	static uint32_t rcvTime = 0;

	static uint8_t count = 0;

	sndTime += G_System_counter - recent_System_counter;
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <D_Slider_SystickUpdate+0xb4>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	; (800107c <D_Slider_SystickUpdate+0xb8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	1ad2      	subs	r2, r2, r3
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <D_Slider_SystickUpdate+0xbc>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a29      	ldr	r2, [pc, #164]	; (8001080 <D_Slider_SystickUpdate+0xbc>)
 8000fda:	6013      	str	r3, [r2, #0]
	rcvTime += G_System_counter - recent_System_counter;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <D_Slider_SystickUpdate+0xb4>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <D_Slider_SystickUpdate+0xb8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	1ad2      	subs	r2, r2, r3
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <D_Slider_SystickUpdate+0xc0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a25      	ldr	r2, [pc, #148]	; (8001084 <D_Slider_SystickUpdate+0xc0>)
 8000fee:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_counter;
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <D_Slider_SystickUpdate+0xb4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a21      	ldr	r2, [pc, #132]	; (800107c <D_Slider_SystickUpdate+0xb8>)
 8000ff6:	6013      	str	r3, [r2, #0]

	if(!_firstSend){
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <D_Slider_SystickUpdate+0xc4>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	f083 0301 	eor.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <D_Slider_SystickUpdate+0x4e>
		_firstSend = true;
 8001006:	4b20      	ldr	r3, [pc, #128]	; (8001088 <D_Slider_SystickUpdate+0xc4>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
		D_Slider_Start();
 800100c:	f000 f848 	bl	80010a0 <D_Slider_Start>
		//D_Slider_InitColorData();
		return;
 8001010:	e030      	b.n	8001074 <D_Slider_SystickUpdate+0xb0>
	}
	if(sndTime >= SLIDER_SEND_INTERVAL){
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <D_Slider_SystickUpdate+0xbc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b13      	cmp	r3, #19
 8001018:	d91f      	bls.n	800105a <D_Slider_SystickUpdate+0x96>
		sndTime = 0;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <D_Slider_SystickUpdate+0xbc>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
		count++;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <D_Slider_SystickUpdate+0xc8>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <D_Slider_SystickUpdate+0xc8>)
 800102a:	701a      	strb	r2, [r3, #0]
		if(count == 1){
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <D_Slider_SystickUpdate+0xc8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d107      	bne.n	8001044 <D_Slider_SystickUpdate+0x80>
			D_Slider_Send((uint8_t*)SendData, COLORSEND_LENGTH + AdditionalPacket);
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <D_Slider_SystickUpdate+0xcc>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	330a      	adds	r3, #10
 800103a:	4619      	mov	r1, r3
 800103c:	4815      	ldr	r0, [pc, #84]	; (8001094 <D_Slider_SystickUpdate+0xd0>)
 800103e:	f000 f86d 	bl	800111c <D_Slider_Send>
 8001042:	e003      	b.n	800104c <D_Slider_SystickUpdate+0x88>
		}else{
			D_Slider_Send((uint8_t*)SensorGetSendData, SENSORGET_LENGTH);
 8001044:	2106      	movs	r1, #6
 8001046:	4814      	ldr	r0, [pc, #80]	; (8001098 <D_Slider_SystickUpdate+0xd4>)
 8001048:	f000 f868 	bl	800111c <D_Slider_Send>
		}
		if(count >= 5) count = 0;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <D_Slider_SystickUpdate+0xc8>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b04      	cmp	r3, #4
 8001052:	d902      	bls.n	800105a <D_Slider_SystickUpdate+0x96>
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <D_Slider_SystickUpdate+0xc8>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
	}

	if(rcvTime >= SLIDER_RECEIVE_INTERVAL){
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <D_Slider_SystickUpdate+0xc0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b09      	cmp	r3, #9
 8001060:	d906      	bls.n	8001070 <D_Slider_SystickUpdate+0xac>
		rcvTime = 0;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <D_Slider_SystickUpdate+0xc0>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
		D_Slider_Receive((uint8_t*)RecvData, 10);
 8001068:	210a      	movs	r1, #10
 800106a:	480c      	ldr	r0, [pc, #48]	; (800109c <D_Slider_SystickUpdate+0xd8>)
 800106c:	f000 f87e 	bl	800116c <D_Slider_Receive>
	}

	D_Slider_LightingUpdate();
 8001070:	f000 f846 	bl	8001100 <D_Slider_LightingUpdate>
	if(receiveFaultCount >= 30){
		D_Slider_Start();
		receiveFaultCount = 0;
	}
	*/
}
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000220 	.word	0x20000220
 800107c:	200002b4 	.word	0x200002b4
 8001080:	200002b8 	.word	0x200002b8
 8001084:	200002bc 	.word	0x200002bc
 8001088:	200002b1 	.word	0x200002b1
 800108c:	200002c0 	.word	0x200002c0
 8001090:	20000264 	.word	0x20000264
 8001094:	20000224 	.word	0x20000224
 8001098:	20000244 	.word	0x20000244
 800109c:	20000268 	.word	0x20000268

080010a0 <D_Slider_Start>:

void D_Slider_Start(void){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
	SensorGetSendData[0] = FIRSTBYTE;
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <D_Slider_Start+0x5c>)
 80010a8:	22e0      	movs	r2, #224	; 0xe0
 80010aa:	701a      	strb	r2, [r3, #0]
	SensorGetSendData[1] = ADDRESS;
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <D_Slider_Start+0x5c>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	705a      	strb	r2, [r3, #1]
	SensorGetSendData[2] = SENSORGET_SEQNUM;
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <D_Slider_Start+0x5c>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	709a      	strb	r2, [r3, #2]
	SensorGetSendData[3] = SENSORGET_DATANUM;
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <D_Slider_Start+0x5c>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	70da      	strb	r2, [r3, #3]
	SensorGetSendData[4] = SENSORGET_CMD;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <D_Slider_Start+0x5c>)
 80010c0:	2220      	movs	r2, #32
 80010c2:	711a      	strb	r2, [r3, #4]
	uint8_t dataSum = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 80010c8:	2301      	movs	r3, #1
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	e009      	b.n	80010e2 <D_Slider_Start+0x42>
		dataSum += SensorGetSendData[i];
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <D_Slider_Start+0x5c>)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4413      	add	r3, r2
 80010da:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	ddf2      	ble.n	80010ce <D_Slider_Start+0x2e>
	}
	SensorGetSendData[SENSORGET_LENGTH-1] = (uint8_t)dataSum;
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <D_Slider_Start+0x5c>)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	7153      	strb	r3, [r2, #5]
	data[3] = 0xfe;
	had_completed_tx = true;
	had_completed_rx = true;
	D_Slider_Send((uint8_t*)data, 4);
	*/
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000244 	.word	0x20000244

08001100 <D_Slider_LightingUpdate>:
		leftLightingMode = leftType;
	}
	*/
}

void D_Slider_LightingUpdate(void){
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	static bool slideColorR[5][3] = {{false}};
	static bool slideColorL[5][3] = {{false}};
	switch(rightLightingMode){
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <D_Slider_LightingUpdate+0x18>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d100      	bne.n	800110e <D_Slider_LightingUpdate+0xe>
	case SL_NORMAL:

		break;
 800110c:	bf00      	nop
	}
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	200002b2 	.word	0x200002b2

0800111c <D_Slider_Send>:

int D_Slider_Send(uint8_t* data, int length){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	if(!had_completed_tx){
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <D_Slider_Send+0x44>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f083 0301 	eor.w	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <D_Slider_Send+0x20>
		return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800113a:	e00d      	b.n	8001158 <D_Slider_Send+0x3c>
	}
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data, length);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	461a      	mov	r2, r3
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4807      	ldr	r0, [pc, #28]	; (8001164 <D_Slider_Send+0x48>)
 8001146:	f002 fff3 	bl	8004130 <HAL_UART_Transmit_DMA>
	_send = true;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <D_Slider_Send+0x4c>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
	had_completed_tx = false;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <D_Slider_Send+0x44>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
	return 0;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000008 	.word	0x20000008
 8001164:	2000085c 	.word	0x2000085c
 8001168:	200002b0 	.word	0x200002b0

0800116c <D_Slider_Receive>:

int D_Slider_Receive(uint8_t* data, int length){
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	if(!had_completed_rx){
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <D_Slider_Receive+0x40>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f083 0301 	eor.w	r3, r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <D_Slider_Receive+0x20>
		return -1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800118a:	e00a      	b.n	80011a2 <D_Slider_Receive+0x36>
	}
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)data, length);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <D_Slider_Receive+0x44>)
 8001196:	f003 f849 	bl	800422c <HAL_UART_Receive_DMA>
	had_completed_rx = false;
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <D_Slider_Receive+0x40>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
	return 0;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000009 	.word	0x20000009
 80011b0:	2000085c 	.word	0x2000085c

080011b4 <D_Slider_GetSensorData>:

int D_Slider_GetSensorData(int side, int num){
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	if(side == 0){
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <D_Slider_GetSensorData+0x1a>
		return SensorCountR[num];
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <D_Slider_GetSensorData+0x30>)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011cc:	e003      	b.n	80011d6 <D_Slider_GetSensorData+0x22>
	}else{
		return SensorCountL[num];
 80011ce:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <D_Slider_GetSensorData+0x34>)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	}
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000288 	.word	0x20000288
 80011e8:	2000029c 	.word	0x2000029c

080011ec <D_Slider_CheckData>:

void D_Slider_CheckData(uint8_t* data, int length){
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2be0      	cmp	r3, #224	; 0xe0
 80011fc:	d15c      	bne.n	80012b8 <D_Slider_CheckData+0xcc>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3301      	adds	r3, #1
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d157      	bne.n	80012b8 <D_Slider_CheckData+0xcc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3302      	adds	r3, #2
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d152      	bne.n	80012b8 <D_Slider_CheckData+0xcc>
	uint8_t sum = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 8001216:	2301      	movs	r3, #1
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	e009      	b.n	8001230 <D_Slider_CheckData+0x44>
		sum += data[i];
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	781a      	ldrb	r2, [r3, #0]
 8001224:	7dfb      	ldrb	r3, [r7, #23]
 8001226:	4413      	add	r3, r2
 8001228:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	3301      	adds	r3, #1
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	2b08      	cmp	r3, #8
 8001234:	ddf2      	ble.n	800121c <D_Slider_CheckData+0x30>
	}
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3309      	adds	r3, #9
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	7dfa      	ldrb	r2, [r7, #23]
 800123e:	429a      	cmp	r2, r3
 8001240:	d13c      	bne.n	80012bc <D_Slider_CheckData+0xd0>
	for(int i=0; i<5; i++){
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	e016      	b.n	8001276 <D_Slider_CheckData+0x8a>
		if(((data[7]>>i) & 1) == 1) SensorCountL[i]++;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3307      	adds	r3, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	fa42 f303 	asr.w	r3, r2, r3
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d008      	beq.n	8001270 <D_Slider_CheckData+0x84>
 800125e:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <D_Slider_CheckData+0xdc>)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	4917      	ldr	r1, [pc, #92]	; (80012c8 <D_Slider_CheckData+0xdc>)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3301      	adds	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2b04      	cmp	r3, #4
 800127a:	dde5      	ble.n	8001248 <D_Slider_CheckData+0x5c>
	}
	for(int i=0; i<5; i++){
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	e016      	b.n	80012b0 <D_Slider_CheckData+0xc4>
		if(((data[8]>>i) & 1) == 1) SensorCountR[i]++;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3308      	adds	r3, #8
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	fa42 f303 	asr.w	r3, r2, r3
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d008      	beq.n	80012aa <D_Slider_CheckData+0xbe>
 8001298:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <D_Slider_CheckData+0xe0>)
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	490a      	ldr	r1, [pc, #40]	; (80012cc <D_Slider_CheckData+0xe0>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3301      	adds	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	dde5      	ble.n	8001282 <D_Slider_CheckData+0x96>
 80012b6:	e002      	b.n	80012be <D_Slider_CheckData+0xd2>
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 80012b8:	bf00      	nop
 80012ba:	e000      	b.n	80012be <D_Slider_CheckData+0xd2>
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 80012bc:	bf00      	nop
	}
}
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	2000029c 	.word	0x2000029c
 80012cc:	20000288 	.word	0x20000288

080012d0 <D_Slider_SetColorData>:

void D_Slider_SetColorData(bool setColorR[][3], bool setColorL[][3]){
 80012d0:	b4b0      	push	{r4, r5, r7}
 80012d2:	b08b      	sub	sp, #44	; 0x2c
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
	if (!_send) return;
 80012da:	4b8d      	ldr	r3, [pc, #564]	; (8001510 <D_Slider_SetColorData+0x240>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	f083 0301 	eor.w	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f040 810e 	bne.w	8001506 <D_Slider_SetColorData+0x236>
	_send = false;
 80012ea:	4b89      	ldr	r3, [pc, #548]	; (8001510 <D_Slider_SetColorData+0x240>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
	SendData[0] = FIRSTBYTE;
 80012f0:	4b88      	ldr	r3, [pc, #544]	; (8001514 <D_Slider_SetColorData+0x244>)
 80012f2:	22e0      	movs	r2, #224	; 0xe0
 80012f4:	701a      	strb	r2, [r3, #0]
	SendData[1] = ADDRESS;
 80012f6:	4b87      	ldr	r3, [pc, #540]	; (8001514 <D_Slider_SetColorData+0x244>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	705a      	strb	r2, [r3, #1]
	SendData[2] = COLORSEND_SEQNUM;
 80012fc:	4b85      	ldr	r3, [pc, #532]	; (8001514 <D_Slider_SetColorData+0x244>)
 80012fe:	2205      	movs	r2, #5
 8001300:	709a      	strb	r2, [r3, #2]
	SendData[3] = COLORSEND_DATANUM;
 8001302:	4b84      	ldr	r3, [pc, #528]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001304:	2205      	movs	r2, #5
 8001306:	70da      	strb	r2, [r3, #3]
	SendData[4] = COLORSEND_CMD;
 8001308:	4b82      	ldr	r3, [pc, #520]	; (8001514 <D_Slider_SetColorData+0x244>)
 800130a:	2232      	movs	r2, #50	; 0x32
 800130c:	711a      	strb	r2, [r3, #4]
	SendData[5] = 0;
 800130e:	4b81      	ldr	r3, [pc, #516]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001310:	2200      	movs	r2, #0
 8001312:	715a      	strb	r2, [r3, #5]
	SendData[6] = 0;
 8001314:	4b7f      	ldr	r3, [pc, #508]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001316:	2200      	movs	r2, #0
 8001318:	719a      	strb	r2, [r3, #6]
	SendData[7] = 0;
 800131a:	4b7e      	ldr	r3, [pc, #504]	; (8001514 <D_Slider_SetColorData+0x244>)
 800131c:	2200      	movs	r2, #0
 800131e:	71da      	strb	r2, [r3, #7]
	SendData[8] = 0;
 8001320:	4b7c      	ldr	r3, [pc, #496]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001322:	2200      	movs	r2, #0
 8001324:	721a      	strb	r2, [r3, #8]
	SendData[9] = 0;
 8001326:	4b7b      	ldr	r3, [pc, #492]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001328:	2200      	movs	r2, #0
 800132a:	725a      	strb	r2, [r3, #9]
	SendData[10] = 0;
 800132c:	4b79      	ldr	r3, [pc, #484]	; (8001514 <D_Slider_SetColorData+0x244>)
 800132e:	2200      	movs	r2, #0
 8001330:	729a      	strb	r2, [r3, #10]
	SendData[11] = 0;
 8001332:	4b78      	ldr	r3, [pc, #480]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001334:	2200      	movs	r2, #0
 8001336:	72da      	strb	r2, [r3, #11]
	SendData[12] = 0;
 8001338:	4b76      	ldr	r3, [pc, #472]	; (8001514 <D_Slider_SetColorData+0x244>)
 800133a:	2200      	movs	r2, #0
 800133c:	731a      	strb	r2, [r3, #12]
	SendData[13] = 0;
 800133e:	4b75      	ldr	r3, [pc, #468]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001340:	2200      	movs	r2, #0
 8001342:	735a      	strb	r2, [r3, #13]
	SendData[14] = 0;
 8001344:	4b73      	ldr	r3, [pc, #460]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001346:	2200      	movs	r2, #0
 8001348:	739a      	strb	r2, [r3, #14]
	for(int i=1; i<16; i++){
 800134a:	2301      	movs	r3, #1
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
 800134e:	e038      	b.n	80013c2 <D_Slider_SetColorData+0xf2>
		SendData[5 + (i/8)] |= (setColorR[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	2b00      	cmp	r3, #0
 8001354:	da00      	bge.n	8001358 <D_Slider_SetColorData+0x88>
 8001356:	3307      	adds	r3, #7
 8001358:	10db      	asrs	r3, r3, #3
 800135a:	4618      	mov	r0, r3
 800135c:	1d43      	adds	r3, r0, #5
 800135e:	4a6d      	ldr	r2, [pc, #436]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	b25c      	sxtb	r4, r3
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	3b01      	subs	r3, #1
 8001368:	4a6b      	ldr	r2, [pc, #428]	; (8001518 <D_Slider_SetColorData+0x248>)
 800136a:	fb82 1203 	smull	r1, r2, r2, r3
 800136e:	17db      	asrs	r3, r3, #31
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	3304      	adds	r3, #4
 8001374:	461a      	mov	r2, r3
 8001376:	4613      	mov	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4413      	add	r3, r2
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	18d5      	adds	r5, r2, r3
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	1e59      	subs	r1, r3, #1
 8001384:	4b64      	ldr	r3, [pc, #400]	; (8001518 <D_Slider_SetColorData+0x248>)
 8001386:	fb83 3201 	smull	r3, r2, r3, r1
 800138a:	17cb      	asrs	r3, r1, #31
 800138c:	1ad2      	subs	r2, r2, r3
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	1aca      	subs	r2, r1, r3
 8001396:	5cab      	ldrb	r3, [r5, r2]
 8001398:	4619      	mov	r1, r3
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	425a      	negs	r2, r3
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	f002 0207 	and.w	r2, r2, #7
 80013a6:	bf58      	it	pl
 80013a8:	4253      	negpl	r3, r2
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	4323      	orrs	r3, r4
 80013b2:	b25a      	sxtb	r2, r3
 80013b4:	1d43      	adds	r3, r0, #5
 80013b6:	b2d1      	uxtb	r1, r2
 80013b8:	4a56      	ldr	r2, [pc, #344]	; (8001514 <D_Slider_SetColorData+0x244>)
 80013ba:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	3301      	adds	r3, #1
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	ddc3      	ble.n	8001350 <D_Slider_SetColorData+0x80>
	}
	for(int i=1; i<16; i++){
 80013c8:	2301      	movs	r3, #1
 80013ca:	623b      	str	r3, [r7, #32]
 80013cc:	e038      	b.n	8001440 <D_Slider_SetColorData+0x170>
		SendData[7 + (i/8)] |= (setColorL[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da00      	bge.n	80013d6 <D_Slider_SetColorData+0x106>
 80013d4:	3307      	adds	r3, #7
 80013d6:	10db      	asrs	r3, r3, #3
 80013d8:	4618      	mov	r0, r3
 80013da:	1dc3      	adds	r3, r0, #7
 80013dc:	4a4d      	ldr	r2, [pc, #308]	; (8001514 <D_Slider_SetColorData+0x244>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	b25c      	sxtb	r4, r3
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <D_Slider_SetColorData+0x248>)
 80013e8:	fb82 1203 	smull	r1, r2, r2, r3
 80013ec:	17db      	asrs	r3, r3, #31
 80013ee:	1a9b      	subs	r3, r3, r2
 80013f0:	3304      	adds	r3, #4
 80013f2:	461a      	mov	r2, r3
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	18d5      	adds	r5, r2, r3
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	1e59      	subs	r1, r3, #1
 8001402:	4b45      	ldr	r3, [pc, #276]	; (8001518 <D_Slider_SetColorData+0x248>)
 8001404:	fb83 3201 	smull	r3, r2, r3, r1
 8001408:	17cb      	asrs	r3, r1, #31
 800140a:	1ad2      	subs	r2, r2, r3
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	1aca      	subs	r2, r1, r3
 8001414:	5cab      	ldrb	r3, [r5, r2]
 8001416:	4619      	mov	r1, r3
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	425a      	negs	r2, r3
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	f002 0207 	and.w	r2, r2, #7
 8001424:	bf58      	it	pl
 8001426:	4253      	negpl	r3, r2
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	b25b      	sxtb	r3, r3
 800142e:	4323      	orrs	r3, r4
 8001430:	b25a      	sxtb	r2, r3
 8001432:	1dc3      	adds	r3, r0, #7
 8001434:	b2d1      	uxtb	r1, r2
 8001436:	4a37      	ldr	r2, [pc, #220]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001438:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	3301      	adds	r3, #1
 800143e:	623b      	str	r3, [r7, #32]
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	2b0f      	cmp	r3, #15
 8001444:	ddc3      	ble.n	80013ce <D_Slider_SetColorData+0xfe>
	}

	uint8_t dataSum = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	77fb      	strb	r3, [r7, #31]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 800144a:	2301      	movs	r3, #1
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	e009      	b.n	8001464 <D_Slider_SetColorData+0x194>
		dataSum += SendData[i];
 8001450:	4a30      	ldr	r2, [pc, #192]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4413      	add	r3, r2
 8001456:	781a      	ldrb	r2, [r3, #0]
 8001458:	7ffb      	ldrb	r3, [r7, #31]
 800145a:	4413      	add	r3, r2
 800145c:	77fb      	strb	r3, [r7, #31]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	3301      	adds	r3, #1
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2b08      	cmp	r3, #8
 8001468:	ddf2      	ble.n	8001450 <D_Slider_SetColorData+0x180>
	}

	AdditionalPacket = 0;
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <D_Slider_SetColorData+0x24c>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
		//SendData[10] = SendData[9];
		//SendData[8] = SendData[7];
		SendData[10] = tempData;
	}
	*/
	for(int i=5; i<9+AdditionalPacket; i++){
 8001470:	2305      	movs	r3, #5
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e03a      	b.n	80014ec <D_Slider_SetColorData+0x21c>
		if(SendData[i] == ESCAPE_PACKET || SendData[i] == FIRSTBYTE) {
 8001476:	4a27      	ldr	r2, [pc, #156]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	4413      	add	r3, r2
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2bd0      	cmp	r3, #208	; 0xd0
 8001480:	d005      	beq.n	800148e <D_Slider_SetColorData+0x1be>
 8001482:	4a24      	ldr	r2, [pc, #144]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2be0      	cmp	r3, #224	; 0xe0
 800148c:	d12b      	bne.n	80014e6 <D_Slider_SetColorData+0x216>
			AdditionalPacket++;
 800148e:	4b23      	ldr	r3, [pc, #140]	; (800151c <D_Slider_SetColorData+0x24c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <D_Slider_SetColorData+0x24c>)
 8001498:	701a      	strb	r2, [r3, #0]
			uint8_t tempData = SendData[i] - 1;
 800149a:	4a1e      	ldr	r2, [pc, #120]	; (8001514 <D_Slider_SetColorData+0x244>)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	4413      	add	r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
			SendData[i] = ESCAPE_PACKET;
 80014a6:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <D_Slider_SetColorData+0x244>)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	4413      	add	r3, r2
 80014ac:	22d0      	movs	r2, #208	; 0xd0
 80014ae:	701a      	strb	r2, [r3, #0]
			for(int j=i+3; j>i; j--){
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3303      	adds	r3, #3
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	e00a      	b.n	80014ce <D_Slider_SetColorData+0x1fe>
				SendData[j+1] = SendData[j];
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4915      	ldr	r1, [pc, #84]	; (8001514 <D_Slider_SetColorData+0x244>)
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	440a      	add	r2, r1
 80014c2:	7811      	ldrb	r1, [r2, #0]
 80014c4:	4a13      	ldr	r2, [pc, #76]	; (8001514 <D_Slider_SetColorData+0x244>)
 80014c6:	54d1      	strb	r1, [r2, r3]
			for(int j=i+3; j>i; j--){
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dcf0      	bgt.n	80014b8 <D_Slider_SetColorData+0x1e8>
			}
			SendData[i+1] = tempData;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	490e      	ldr	r1, [pc, #56]	; (8001514 <D_Slider_SetColorData+0x244>)
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	54ca      	strb	r2, [r1, r3]
			i++;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3301      	adds	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
	for(int i=5; i<9+AdditionalPacket; i++){
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <D_Slider_SetColorData+0x24c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	3308      	adds	r3, #8
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	ddbe      	ble.n	8001476 <D_Slider_SetColorData+0x1a6>
		}
	}

	SendData[COLORSEND_LENGTH-1 + AdditionalPacket] = (uint8_t)dataSum;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <D_Slider_SetColorData+0x24c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	3309      	adds	r3, #9
 80014fe:	4905      	ldr	r1, [pc, #20]	; (8001514 <D_Slider_SetColorData+0x244>)
 8001500:	7ffa      	ldrb	r2, [r7, #31]
 8001502:	54ca      	strb	r2, [r1, r3]
 8001504:	e000      	b.n	8001508 <D_Slider_SetColorData+0x238>
	if (!_send) return;
 8001506:	bf00      	nop
}
 8001508:	372c      	adds	r7, #44	; 0x2c
 800150a:	46bd      	mov	sp, r7
 800150c:	bcb0      	pop	{r4, r5, r7}
 800150e:	4770      	bx	lr
 8001510:	200002b0 	.word	0x200002b0
 8001514:	20000224 	.word	0x20000224
 8001518:	55555556 	.word	0x55555556
 800151c:	20000264 	.word	0x20000264

08001520 <D_Slider_TransitionCompletedCallBack>:


void D_Slider_TransitionCompletedCallBack(){
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	had_completed_tx = true;
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <D_Slider_TransitionCompletedCallBack+0x14>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	20000008 	.word	0x20000008

08001538 <D_Slider_ReceptionCompletedCallBack>:

void D_Slider_ReceptionCompletedCallBack(){
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	had_completed_rx = true;
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <D_Slider_ReceptionCompletedCallBack+0x18>)
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
	D_Slider_CheckData((uint8_t*)RecvData, 10);
 8001542:	210a      	movs	r1, #10
 8001544:	4803      	ldr	r0, [pc, #12]	; (8001554 <D_Slider_ReceptionCompletedCallBack+0x1c>)
 8001546:	f7ff fe51 	bl	80011ec <D_Slider_CheckData>
			TouchData[i] = RecvData[i+3];
		}
	}
	*/
	//D_USBHID_SetSendData_Touch(TouchData);
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000009 	.word	0x20000009
 8001554:	20000268 	.word	0x20000268

08001558 <D_GPIO_Read>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
}

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 8001564:	887b      	ldrh	r3, [r7, #2]
 8001566:	4619      	mov	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 ff83 	bl	8002474 <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf14      	ite	ne
 8001574:	2301      	movne	r3, #1
 8001576:	2300      	moveq	r3, #0
 8001578:	b2db      	uxtb	r3, r3
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed_tx){
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <D_Mess_flush+0x54>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f083 0301 	eor.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <D_Mess_flush+0x1c>
		outptr = buff;
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <D_Mess_flush+0x58>)
 800159a:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <D_Mess_flush+0x5c>)
 800159c:	601a      	str	r2, [r3, #0]
		return;
 800159e:	e01a      	b.n	80015d6 <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <D_Mess_flush+0x58>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d013      	beq.n	80015d0 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <D_Mess_flush+0x58>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	490b      	ldr	r1, [pc, #44]	; (80015dc <D_Mess_flush+0x58>)
 80015b0:	600a      	str	r2, [r1, #0]
 80015b2:	220a      	movs	r2, #10
 80015b4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <D_Mess_flush+0x58>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <D_Mess_flush+0x5c>)
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	b29b      	uxth	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	4907      	ldr	r1, [pc, #28]	; (80015e0 <D_Mess_flush+0x5c>)
 80015c4:	4807      	ldr	r0, [pc, #28]	; (80015e4 <D_Mess_flush+0x60>)
 80015c6:	f002 fdb3 	bl	8004130 <HAL_UART_Transmit_DMA>
		had_completed_tx = false;
 80015ca:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <D_Mess_flush+0x54>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <D_Mess_flush+0x58>)
 80015d2:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <D_Mess_flush+0x5c>)
 80015d4:	601a      	str	r2, [r3, #0]
}
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000000a 	.word	0x2000000a
 80015dc:	200008ec 	.word	0x200008ec
 80015e0:	200002c4 	.word	0x200002c4
 80015e4:	200008a0 	.word	0x200008a0

080015e8 <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  had_completed_tx = true;
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <D_Mess_TransitionCompletedCallBack+0x14>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	2000000a 	.word	0x2000000a

08001600 <D_Mess_ReceptionCompletedCallBack>:
void D_Mess_ReceptionCompletedCallBack(void){
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  had_completed_rx = true;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <D_Mess_ReceptionCompletedCallBack+0x14>)
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	2000000b 	.word	0x2000000b

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <HAL_Init+0x40>)
 8001622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_Init+0x40>)
 800162e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_Init+0x40>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f94f 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	2000      	movs	r0, #0
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fa88 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f967 	bl	800194e <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001698:	f000 f92f 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000004 	.word	0x20000004
 80016b4:	20000010 	.word	0x20000010
 80016b8:	2000000c 	.word	0x2000000c

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000010 	.word	0x20000010
 80016e0:	200008f0 	.word	0x200008f0

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	200008f0 	.word	0x200008f0

080016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001704:	f7ff ffee 	bl	80016e4 <HAL_GetTick>
 8001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001714:	d005      	beq.n	8001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_Delay+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001722:	bf00      	nop
 8001724:	f7ff ffde 	bl	80016e4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f7      	bhi.n	8001724 <HAL_Delay+0x28>
  {
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000010 	.word	0x20000010

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4907      	ldr	r1, [pc, #28]	; (80017e0 <__NVIC_EnableIRQ+0x38>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	; (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	; (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff29 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff3e 	bl	800178c <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff8e 	bl	8001838 <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff31 	bl	80017a8 <__NVIC_EnableIRQ>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ffa2 	bl	80018a0 <SysTick_Config>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff feb6 	bl	80016e4 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e099      	b.n	8001ab8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a4:	e00f      	b.n	80019c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019a6:	f7ff fe9d 	bl	80016e4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d908      	bls.n	80019c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2220      	movs	r2, #32
 80019b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2203      	movs	r2, #3
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e078      	b.n	8001ab8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1e8      	bne.n	80019a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <HAL_DMA_Init+0x158>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d107      	bne.n	8001a30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f023 0307 	bic.w	r3, r3, #7
 8001a46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d117      	bne.n	8001a8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00e      	beq.n	8001a8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 fb01 	bl	8002074 <DMA_CheckFifoParam>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2240      	movs	r2, #64	; 0x40
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a86:	2301      	movs	r3, #1
 8001a88:	e016      	b.n	8001ab8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 fab8 	bl	8002008 <DMA_CalcBaseAndBitshift>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	223f      	movs	r2, #63	; 0x3f
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	f010803f 	.word	0xf010803f

08001ac4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_DMA_Start_IT+0x26>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e040      	b.n	8001b6c <HAL_DMA_Start_IT+0xa8>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d12f      	bne.n	8001b5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2202      	movs	r2, #2
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 fa4a 	bl	8001fac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	223f      	movs	r2, #63	; 0x3f
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0216 	orr.w	r2, r2, #22
 8001b32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0208 	orr.w	r2, r2, #8
 8001b4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e005      	b.n	8001b6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b66:	2302      	movs	r3, #2
 8001b68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b82:	f7ff fdaf 	bl	80016e4 <HAL_GetTick>
 8001b86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d008      	beq.n	8001ba6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e052      	b.n	8001c4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0216 	bic.w	r2, r2, #22
 8001bb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d103      	bne.n	8001bd6 <HAL_DMA_Abort+0x62>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0208 	bic.w	r2, r2, #8
 8001be4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf6:	e013      	b.n	8001c20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bf8:	f7ff fd74 	bl	80016e4 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	d90c      	bls.n	8001c20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2203      	movs	r2, #3
 8001c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e015      	b.n	8001c4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1e4      	bne.n	8001bf8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c32:	223f      	movs	r2, #63	; 0x3f
 8001c34:	409a      	lsls	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d004      	beq.n	8001c72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00c      	b.n	8001c8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2205      	movs	r2, #5
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ca4:	4b92      	ldr	r3, [pc, #584]	; (8001ef0 <HAL_DMA_IRQHandler+0x258>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a92      	ldr	r2, [pc, #584]	; (8001ef4 <HAL_DMA_IRQHandler+0x25c>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	0a9b      	lsrs	r3, r3, #10
 8001cb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d01a      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0204 	bic.w	r2, r2, #4
 8001cea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	2201      	movs	r2, #1
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d012      	beq.n	8001d3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	2201      	movs	r2, #1
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f043 0202 	orr.w	r2, r3, #2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	2204      	movs	r2, #4
 8001d40:	409a      	lsls	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d012      	beq.n	8001d70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00b      	beq.n	8001d70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d68:	f043 0204 	orr.w	r2, r3, #4
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d74:	2210      	movs	r2, #16
 8001d76:	409a      	lsls	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d043      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d03c      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d92:	2210      	movs	r2, #16
 8001d94:	409a      	lsls	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d018      	beq.n	8001dda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d108      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d024      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	4798      	blx	r3
 8001dc6:	e01f      	b.n	8001e08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01b      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	4798      	blx	r3
 8001dd8:	e016      	b.n	8001e08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d107      	bne.n	8001df8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0208 	bic.w	r2, r2, #8
 8001df6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 808e 	beq.w	8001f36 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 8086 	beq.w	8001f36 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	2220      	movs	r2, #32
 8001e30:	409a      	lsls	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d136      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0216 	bic.w	r2, r2, #22
 8001e50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d103      	bne.n	8001e72 <HAL_DMA_IRQHandler+0x1da>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0208 	bic.w	r2, r2, #8
 8001e80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	223f      	movs	r2, #63	; 0x3f
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d07d      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	4798      	blx	r3
        }
        return;
 8001eae:	e078      	b.n	8001fa2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d01c      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d108      	bne.n	8001ede <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d030      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
 8001edc:	e02b      	b.n	8001f36 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d027      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4798      	blx	r3
 8001eee:	e022      	b.n	8001f36 <HAL_DMA_IRQHandler+0x29e>
 8001ef0:	20000004 	.word	0x20000004
 8001ef4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10f      	bne.n	8001f26 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0210 	bic.w	r2, r2, #16
 8001f14:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d032      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d022      	beq.n	8001f90 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2205      	movs	r2, #5
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3301      	adds	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d307      	bcc.n	8001f7e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f2      	bne.n	8001f62 <HAL_DMA_IRQHandler+0x2ca>
 8001f7c:	e000      	b.n	8001f80 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f7e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	4798      	blx	r3
 8001fa0:	e000      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fa2:	bf00      	nop
    }
  }
}
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop

08001fac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b40      	cmp	r3, #64	; 0x40
 8001fd8:	d108      	bne.n	8001fec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fea:	e007      	b.n	8001ffc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	60da      	str	r2, [r3, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3b10      	subs	r3, #16
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <DMA_CalcBaseAndBitshift+0x64>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <DMA_CalcBaseAndBitshift+0x68>)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d909      	bls.n	800204a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800203e:	f023 0303 	bic.w	r3, r3, #3
 8002042:	1d1a      	adds	r2, r3, #4
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	659a      	str	r2, [r3, #88]	; 0x58
 8002048:	e007      	b.n	800205a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002052:	f023 0303 	bic.w	r3, r3, #3
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	aaaaaaab 	.word	0xaaaaaaab
 8002070:	08008938 	.word	0x08008938

08002074 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d11f      	bne.n	80020ce <DMA_CheckFifoParam+0x5a>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d856      	bhi.n	8002142 <DMA_CheckFifoParam+0xce>
 8002094:	a201      	add	r2, pc, #4	; (adr r2, 800209c <DMA_CheckFifoParam+0x28>)
 8002096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209a:	bf00      	nop
 800209c:	080020ad 	.word	0x080020ad
 80020a0:	080020bf 	.word	0x080020bf
 80020a4:	080020ad 	.word	0x080020ad
 80020a8:	08002143 	.word	0x08002143
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d046      	beq.n	8002146 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020bc:	e043      	b.n	8002146 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020c6:	d140      	bne.n	800214a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020cc:	e03d      	b.n	800214a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d6:	d121      	bne.n	800211c <DMA_CheckFifoParam+0xa8>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d837      	bhi.n	800214e <DMA_CheckFifoParam+0xda>
 80020de:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <DMA_CheckFifoParam+0x70>)
 80020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e4:	080020f5 	.word	0x080020f5
 80020e8:	080020fb 	.word	0x080020fb
 80020ec:	080020f5 	.word	0x080020f5
 80020f0:	0800210d 	.word	0x0800210d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
      break;
 80020f8:	e030      	b.n	800215c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d025      	beq.n	8002152 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800210a:	e022      	b.n	8002152 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002114:	d11f      	bne.n	8002156 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800211a:	e01c      	b.n	8002156 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d903      	bls.n	800212a <DMA_CheckFifoParam+0xb6>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d003      	beq.n	8002130 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002128:	e018      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	73fb      	strb	r3, [r7, #15]
      break;
 800212e:	e015      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00e      	beq.n	800215a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      break;
 8002140:	e00b      	b.n	800215a <DMA_CheckFifoParam+0xe6>
      break;
 8002142:	bf00      	nop
 8002144:	e00a      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 8002146:	bf00      	nop
 8002148:	e008      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 800214a:	bf00      	nop
 800214c:	e006      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 800214e:	bf00      	nop
 8002150:	e004      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 8002152:	bf00      	nop
 8002154:	e002      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;   
 8002156:	bf00      	nop
 8002158:	e000      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 800215a:	bf00      	nop
    }
  } 
  
  return status; 
 800215c:	7bfb      	ldrb	r3, [r7, #15]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e159      	b.n	800243c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	f040 8148 	bne.w	8002436 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d005      	beq.n	80021be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d130      	bne.n	8002220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 0201 	and.w	r2, r3, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b03      	cmp	r3, #3
 800222a:	d017      	beq.n	800225c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d123      	bne.n	80022b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	08da      	lsrs	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3208      	adds	r2, #8
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	69b9      	ldr	r1, [r7, #24]
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a2 	beq.w	8002436 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b57      	ldr	r3, [pc, #348]	; (8002454 <HAL_GPIO_Init+0x2e8>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	4a56      	ldr	r2, [pc, #344]	; (8002454 <HAL_GPIO_Init+0x2e8>)
 80022fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002300:	6453      	str	r3, [r2, #68]	; 0x44
 8002302:	4b54      	ldr	r3, [pc, #336]	; (8002454 <HAL_GPIO_Init+0x2e8>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230e:	4a52      	ldr	r2, [pc, #328]	; (8002458 <HAL_GPIO_Init+0x2ec>)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a49      	ldr	r2, [pc, #292]	; (800245c <HAL_GPIO_Init+0x2f0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <HAL_GPIO_Init+0x202>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a48      	ldr	r2, [pc, #288]	; (8002460 <HAL_GPIO_Init+0x2f4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0x1fe>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a47      	ldr	r2, [pc, #284]	; (8002464 <HAL_GPIO_Init+0x2f8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x1fa>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a46      	ldr	r2, [pc, #280]	; (8002468 <HAL_GPIO_Init+0x2fc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x1f6>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a45      	ldr	r2, [pc, #276]	; (800246c <HAL_GPIO_Init+0x300>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x1f2>
 800235a:	2304      	movs	r3, #4
 800235c:	e008      	b.n	8002370 <HAL_GPIO_Init+0x204>
 800235e:	2307      	movs	r3, #7
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x204>
 8002362:	2303      	movs	r3, #3
 8002364:	e004      	b.n	8002370 <HAL_GPIO_Init+0x204>
 8002366:	2302      	movs	r3, #2
 8002368:	e002      	b.n	8002370 <HAL_GPIO_Init+0x204>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_GPIO_Init+0x204>
 800236e:	2300      	movs	r3, #0
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	f002 0203 	and.w	r2, r2, #3
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	4093      	lsls	r3, r2
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002380:	4935      	ldr	r1, [pc, #212]	; (8002458 <HAL_GPIO_Init+0x2ec>)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_GPIO_Init+0x304>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b2:	4a2f      	ldr	r2, [pc, #188]	; (8002470 <HAL_GPIO_Init+0x304>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_GPIO_Init+0x304>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023dc:	4a24      	ldr	r2, [pc, #144]	; (8002470 <HAL_GPIO_Init+0x304>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e2:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_GPIO_Init+0x304>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002406:	4a1a      	ldr	r2, [pc, #104]	; (8002470 <HAL_GPIO_Init+0x304>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <HAL_GPIO_Init+0x304>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002430:	4a0f      	ldr	r2, [pc, #60]	; (8002470 <HAL_GPIO_Init+0x304>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3301      	adds	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b0f      	cmp	r3, #15
 8002440:	f67f aea2 	bls.w	8002188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	40013800 	.word	0x40013800
 800245c:	40020000 	.word	0x40020000
 8002460:	40020400 	.word	0x40020400
 8002464:	40020800 	.word	0x40020800
 8002468:	40020c00 	.word	0x40020c00
 800246c:	40021000 	.word	0x40021000
 8002470:	40013c00 	.word	0x40013c00

08002474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e001      	b.n	8002496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d8:	b08f      	sub	sp, #60	; 0x3c
 80024da:	af0a      	add	r7, sp, #40	; 0x28
 80024dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e10f      	b.n	8002708 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d106      	bne.n	8002508 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f005 fe9c 	bl	8008240 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2203      	movs	r2, #3
 800250c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f002 fff5 	bl	8005516 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	687e      	ldr	r6, [r7, #4]
 8002534:	466d      	mov	r5, sp
 8002536:	f106 0410 	add.w	r4, r6, #16
 800253a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002542:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002546:	e885 0003 	stmia.w	r5, {r0, r1}
 800254a:	1d33      	adds	r3, r6, #4
 800254c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800254e:	6838      	ldr	r0, [r7, #0]
 8002550:	f002 fecc 	bl	80052ec <USB_CoreInit>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0d0      	b.n	8002708 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f002 ffe3 	bl	8005538 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	e04a      	b.n	800260e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	333d      	adds	r3, #61	; 0x3d
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	333c      	adds	r3, #60	; 0x3c
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	b298      	uxth	r0, r3
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	3342      	adds	r3, #66	; 0x42
 80025b4:	4602      	mov	r2, r0
 80025b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	333f      	adds	r3, #63	; 0x3f
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	3344      	adds	r3, #68	; 0x44
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3348      	adds	r3, #72	; 0x48
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025f4:	7bfa      	ldrb	r2, [r7, #15]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	3350      	adds	r3, #80	; 0x50
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	3301      	adds	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	429a      	cmp	r2, r3
 8002616:	d3af      	bcc.n	8002578 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e044      	b.n	80026a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800264a:	7bfa      	ldrb	r2, [r7, #15]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002676:	7bfa      	ldrb	r2, [r7, #15]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	3301      	adds	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d3b5      	bcc.n	800261e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	687e      	ldr	r6, [r7, #4]
 80026ba:	466d      	mov	r5, sp
 80026bc:	f106 0410 	add.w	r4, r6, #16
 80026c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80026d0:	1d33      	adds	r3, r6, #4
 80026d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d4:	6838      	ldr	r0, [r7, #0]
 80026d6:	f002 ff7b 	bl	80055d0 <USB_DevInit>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e00d      	b.n	8002708 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fff7 	bl	80066f4 <USB_DevDisconnect>

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002710 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_PCD_Start+0x1c>
 8002728:	2302      	movs	r3, #2
 800272a:	e020      	b.n	800276e <HAL_PCD_Start+0x5e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	2b01      	cmp	r3, #1
 800273a:	d109      	bne.n	8002750 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002740:	2b01      	cmp	r3, #1
 8002742:	d005      	beq.n	8002750 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fecd 	bl	80054f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f003 ffa7 	bl	80066b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002776:	b590      	push	{r4, r7, lr}
 8002778:	b08d      	sub	sp, #52	; 0x34
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f004 f865 	bl	800685c <USB_GetMode>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	f040 839d 	bne.w	8002ed4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 ffc9 	bl	8006736 <USB_ReadInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8393 	beq.w	8002ed2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f003 ffc0 	bl	8006736 <USB_ReadInterrupts>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d107      	bne.n	80027d0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f002 0202 	and.w	r2, r2, #2
 80027ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 ffae 	bl	8006736 <USB_ReadInterrupts>
 80027da:	4603      	mov	r3, r0
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d161      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0210 	bic.w	r2, r2, #16
 80027f2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	f003 020f 	and.w	r2, r3, #15
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	4413      	add	r3, r2
 8002810:	3304      	adds	r3, #4
 8002812:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	0c5b      	lsrs	r3, r3, #17
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	2b02      	cmp	r3, #2
 800281e:	d124      	bne.n	800286a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d035      	beq.n	8002898 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800283a:	b29b      	uxth	r3, r3
 800283c:	461a      	mov	r2, r3
 800283e:	6a38      	ldr	r0, [r7, #32]
 8002840:	f003 fde5 	bl	800640e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002850:	441a      	add	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002862:	441a      	add	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	619a      	str	r2, [r3, #24]
 8002868:	e016      	b.n	8002898 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	0c5b      	lsrs	r3, r3, #17
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	2b06      	cmp	r3, #6
 8002874:	d110      	bne.n	8002898 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800287c:	2208      	movs	r2, #8
 800287e:	4619      	mov	r1, r3
 8002880:	6a38      	ldr	r0, [r7, #32]
 8002882:	f003 fdc4 	bl	800640e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002892:	441a      	add	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0210 	orr.w	r2, r2, #16
 80028a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f003 ff42 	bl	8006736 <USB_ReadInterrupts>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028bc:	d16e      	bne.n	800299c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f003 ff48 	bl	800675c <USB_ReadDevAllOutEpInterrupt>
 80028cc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80028ce:	e062      	b.n	8002996 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d057      	beq.n	800298a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 ff6d 	bl	80067c4 <USB_ReadDevOutEPInterrupt>
 80028ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002902:	461a      	mov	r2, r3
 8002904:	2301      	movs	r3, #1
 8002906:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fd98 	bl	8003440 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00c      	beq.n	8002934 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	4413      	add	r3, r2
 8002922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002926:	461a      	mov	r2, r3
 8002928:	2308      	movs	r3, #8
 800292a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800292c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fe92 	bl	8003658 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	4413      	add	r3, r2
 8002946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800294a:	461a      	mov	r2, r3
 800294c:	2310      	movs	r3, #16
 800294e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d008      	beq.n	800296c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	4413      	add	r3, r2
 8002962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002966:	461a      	mov	r2, r3
 8002968:	2320      	movs	r3, #32
 800296a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	4413      	add	r3, r2
 800297e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002982:	461a      	mov	r2, r3
 8002984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002988:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	3301      	adds	r3, #1
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	085b      	lsrs	r3, r3, #1
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	2b00      	cmp	r3, #0
 800299a:	d199      	bne.n	80028d0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f003 fec8 	bl	8006736 <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029b0:	f040 80c0 	bne.w	8002b34 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 fee9 	bl	8006790 <USB_ReadDevAllInEpInterrupt>
 80029be:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029c4:	e0b2      	b.n	8002b2c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80a7 	beq.w	8002b20 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 ff0f 	bl	8006800 <USB_ReadDevInEPInterrupt>
 80029e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d057      	beq.n	8002a9e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	2201      	movs	r2, #1
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69f9      	ldr	r1, [r7, #28]
 8002a0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a0e:	4013      	ands	r3, r2
 8002a10:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2301      	movs	r3, #1
 8002a22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d132      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3348      	adds	r3, #72	; 0x48
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4403      	add	r3, r0
 8002a4c:	3344      	adds	r3, #68	; 0x44
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4419      	add	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4403      	add	r3, r0
 8002a60:	3348      	adds	r3, #72	; 0x48
 8002a62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d113      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x31c>
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3350      	adds	r3, #80	; 0x50
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d108      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	f003 ff17 	bl	80068c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	4619      	mov	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f005 fc64 	bl	8008366 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aec:	461a      	mov	r2, r3
 8002aee:	2340      	movs	r3, #64	; 0x40
 8002af0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fc03 	bl	8003326 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	3301      	adds	r3, #1
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f47f af49 	bne.w	80029c6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f003 fdfc 	bl	8006736 <USB_ReadInterrupts>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b48:	d122      	bne.n	8002b90 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d108      	bne.n	8002b7a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b70:	2100      	movs	r1, #0
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fe0e 	bl	8003794 <HAL_PCDEx_LPM_Callback>
 8002b78:	e002      	b.n	8002b80 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f005 fc6a 	bl	8008454 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f003 fdce 	bl	8006736 <USB_ReadInterrupts>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba4:	d112      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f005 fc26 	bl	8008408 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002bca:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 fdb0 	bl	8006736 <USB_ReadInterrupts>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be0:	f040 80c7 	bne.w	8002d72 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2110      	movs	r1, #16
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 fe4a 	bl	8005898 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c08:	e056      	b.n	8002cb8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c16:	461a      	mov	r2, r3
 8002c18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c1c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c2e:	0151      	lsls	r1, r2, #5
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	440a      	add	r2, r1
 8002c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c3c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4e:	0151      	lsls	r1, r2, #5
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	440a      	add	r2, r1
 8002c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c82:	0151      	lsls	r1, r2, #5
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	440a      	add	r2, r1
 8002c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca2:	0151      	lsls	r1, r2, #5
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	440a      	add	r2, r1
 8002ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cb0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d3a3      	bcc.n	8002c0a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cd0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002cd4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d016      	beq.n	8002d0c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cee:	f043 030b 	orr.w	r3, r3, #11
 8002cf2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d04:	f043 030b 	orr.w	r3, r3, #11
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	e015      	b.n	8002d38 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d1e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d22:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d32:	f043 030b 	orr.w	r3, r3, #11
 8002d36:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d4a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f003 fdaf 	bl	80068c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 fcdd 	bl	8006736 <USB_ReadInterrupts>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d86:	d124      	bne.n	8002dd2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f003 fd73 	bl	8006878 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f002 fddb 	bl	8005952 <USB_GetDevSpeed>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681c      	ldr	r4, [r3, #0]
 8002da8:	f001 f940 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8002dac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	4620      	mov	r0, r4
 8002db8:	f002 fafa 	bl	80053b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f005 fafa 	bl	80083b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002dd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f003 fcad 	bl	8006736 <USB_ReadInterrupts>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d10a      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f005 fad7 	bl	800839a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f002 0208 	and.w	r2, r2, #8
 8002dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 fc98 	bl	8006736 <USB_ReadInterrupts>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e10:	d10f      	bne.n	8002e32 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f005 fb39 	bl	8008494 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 fc7d 	bl	8006736 <USB_ReadInterrupts>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e46:	d10f      	bne.n	8002e68 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	4619      	mov	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f005 fb0c 	bl	8008470 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 fc62 	bl	8006736 <USB_ReadInterrupts>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7c:	d10a      	bne.n	8002e94 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f005 fb1a 	bl	80084b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 fc4c 	bl	8006736 <USB_ReadInterrupts>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d115      	bne.n	8002ed4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f005 fb0a 	bl	80084d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	e000      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002ed2:	bf00      	nop
    }
  }
}
 8002ed4:	3734      	adds	r7, #52	; 0x34
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd90      	pop	{r4, r7, pc}

08002eda <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_PCD_SetAddress+0x1a>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e013      	b.n	8002f1c <HAL_PCD_SetAddress+0x42>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 fbaa 	bl	8006666 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	4608      	mov	r0, r1
 8002f2e:	4611      	mov	r1, r2
 8002f30:	461a      	mov	r2, r3
 8002f32:	4603      	mov	r3, r0
 8002f34:	70fb      	strb	r3, [r7, #3]
 8002f36:	460b      	mov	r3, r1
 8002f38:	803b      	strh	r3, [r7, #0]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	da0f      	bge.n	8002f6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	f003 020f 	and.w	r2, r3, #15
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	3338      	adds	r3, #56	; 0x38
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3304      	adds	r3, #4
 8002f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	705a      	strb	r2, [r3, #1]
 8002f68:	e00f      	b.n	8002f8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f6a:	78fb      	ldrb	r3, [r7, #3]
 8002f6c:	f003 020f 	and.w	r2, r3, #15
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	3304      	adds	r3, #4
 8002f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f96:	883a      	ldrh	r2, [r7, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	78ba      	ldrb	r2, [r7, #2]
 8002fa0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fb4:	78bb      	ldrb	r3, [r7, #2]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d102      	bne.n	8002fc0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_PCD_EP_Open+0xaa>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e00e      	b.n	8002fec <HAL_PCD_EP_Open+0xc8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68f9      	ldr	r1, [r7, #12]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f002 fcdd 	bl	800599c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002fea:	7afb      	ldrb	r3, [r7, #11]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003000:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003004:	2b00      	cmp	r3, #0
 8003006:	da0f      	bge.n	8003028 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	f003 020f 	and.w	r2, r3, #15
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	3338      	adds	r3, #56	; 0x38
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	3304      	adds	r3, #4
 800301e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	705a      	strb	r2, [r3, #1]
 8003026:	e00f      	b.n	8003048 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	f003 020f 	and.w	r2, r3, #15
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	3304      	adds	r3, #4
 8003040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	b2da      	uxtb	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_PCD_EP_Close+0x6e>
 800305e:	2302      	movs	r3, #2
 8003060:	e00e      	b.n	8003080 <HAL_PCD_EP_Close+0x8c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68f9      	ldr	r1, [r7, #12]
 8003070:	4618      	mov	r0, r3
 8003072:	f002 fd1b 	bl	8005aac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	460b      	mov	r3, r1
 8003096:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	f003 020f 	and.w	r2, r3, #15
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	3304      	adds	r3, #4
 80030b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2200      	movs	r2, #0
 80030c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d102      	bne.n	80030e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030e4:	7afb      	ldrb	r3, [r7, #11]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	6979      	ldr	r1, [r7, #20]
 80030fc:	f002 fff6 	bl	80060ec <USB_EP0StartXfer>
 8003100:	e008      	b.n	8003114 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	6979      	ldr	r1, [r7, #20]
 8003110:	f002 fda8 	bl	8005c64 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	460b      	mov	r3, r1
 800312c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312e:	7afb      	ldrb	r3, [r7, #11]
 8003130:	f003 020f 	and.w	r2, r3, #15
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	3338      	adds	r3, #56	; 0x38
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	3304      	adds	r3, #4
 8003144:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2201      	movs	r2, #1
 800315c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800315e:	7afb      	ldrb	r3, [r7, #11]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	b2da      	uxtb	r2, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d102      	bne.n	8003178 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003178:	7afb      	ldrb	r3, [r7, #11]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	6979      	ldr	r1, [r7, #20]
 8003190:	f002 ffac 	bl	80060ec <USB_EP0StartXfer>
 8003194:	e008      	b.n	80031a8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	6979      	ldr	r1, [r7, #20]
 80031a4:	f002 fd5e 	bl	8005c64 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 020f 	and.w	r2, r3, #15
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d901      	bls.n	80031d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e050      	b.n	8003272 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	da0f      	bge.n	80031f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f003 020f 	and.w	r2, r3, #15
 80031de:	4613      	mov	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	3338      	adds	r3, #56	; 0x38
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	3304      	adds	r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	705a      	strb	r2, [r3, #1]
 80031f6:	e00d      	b.n	8003214 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	b2da      	uxtb	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_PCD_EP_SetStall+0x82>
 8003230:	2302      	movs	r3, #2
 8003232:	e01e      	b.n	8003272 <HAL_PCD_EP_SetStall+0xc0>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68f9      	ldr	r1, [r7, #12]
 8003242:	4618      	mov	r0, r3
 8003244:	f003 f93b 	bl	80064be <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	b2d9      	uxtb	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003262:	461a      	mov	r2, r3
 8003264:	f003 fb2c 	bl	80068c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	460b      	mov	r3, r1
 8003284:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d901      	bls.n	8003298 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e042      	b.n	800331e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329c:	2b00      	cmp	r3, #0
 800329e:	da0f      	bge.n	80032c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 020f 	and.w	r2, r3, #15
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	3338      	adds	r3, #56	; 0x38
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	3304      	adds	r3, #4
 80032b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	705a      	strb	r2, [r3, #1]
 80032be:	e00f      	b.n	80032e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 020f 	and.w	r2, r3, #15
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	3304      	adds	r3, #4
 80032d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_PCD_EP_ClrStall+0x86>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e00e      	b.n	800331e <HAL_PCD_EP_ClrStall+0xa4>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68f9      	ldr	r1, [r7, #12]
 800330e:	4618      	mov	r0, r3
 8003310:	f003 f943 	bl	800659a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b08a      	sub	sp, #40	; 0x28
 800332a:	af02      	add	r7, sp, #8
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	3338      	adds	r3, #56	; 0x38
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	3304      	adds	r3, #4
 800334c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	429a      	cmp	r2, r3
 8003358:	d901      	bls.n	800335e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e06c      	b.n	8003438 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	429a      	cmp	r2, r3
 8003372:	d902      	bls.n	800337a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3303      	adds	r3, #3
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003382:	e02b      	b.n	80033dc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	429a      	cmp	r2, r3
 8003398:	d902      	bls.n	80033a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3303      	adds	r3, #3
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68d9      	ldr	r1, [r3, #12]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	4603      	mov	r3, r0
 80033be:	6978      	ldr	r0, [r7, #20]
 80033c0:	f002 ffe7 	bl	8006392 <USB_WritePacket>

    ep->xfer_buff  += len;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	441a      	add	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	699a      	ldr	r2, [r3, #24]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	441a      	add	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d809      	bhi.n	8003406 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d203      	bcs.n	8003406 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1be      	bne.n	8003384 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	429a      	cmp	r2, r3
 8003410:	d811      	bhi.n	8003436 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	2201      	movs	r2, #1
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	43db      	mvns	r3, r3
 800342c:	6939      	ldr	r1, [r7, #16]
 800342e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003432:	4013      	ands	r3, r2
 8003434:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	333c      	adds	r3, #60	; 0x3c
 8003458:	3304      	adds	r3, #4
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b01      	cmp	r3, #1
 8003474:	f040 80a0 	bne.w	80035b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d015      	beq.n	80034ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a72      	ldr	r2, [pc, #456]	; (8003650 <PCD_EP_OutXfrComplete_int+0x210>)
 8003486:	4293      	cmp	r3, r2
 8003488:	f240 80dd 	bls.w	8003646 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80d7 	beq.w	8003646 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a4:	461a      	mov	r2, r3
 80034a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034aa:	6093      	str	r3, [r2, #8]
 80034ac:	e0cb      	b.n	8003646 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c4:	461a      	mov	r2, r3
 80034c6:	2320      	movs	r3, #32
 80034c8:	6093      	str	r3, [r2, #8]
 80034ca:	e0bc      	b.n	8003646 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f040 80b7 	bne.w	8003646 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a5d      	ldr	r2, [pc, #372]	; (8003650 <PCD_EP_OutXfrComplete_int+0x210>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d90f      	bls.n	8003500 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f6:	461a      	mov	r2, r3
 80034f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fc:	6093      	str	r3, [r2, #8]
 80034fe:	e0a2      	b.n	8003646 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003512:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	0159      	lsls	r1, r3, #5
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	440b      	add	r3, r1
 800351c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003526:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4403      	add	r3, r0
 8003536:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800353a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4403      	add	r3, r0
 800355e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4419      	add	r1, r3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4403      	add	r3, r0
 8003574:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003578:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d114      	bne.n	80035aa <PCD_EP_OutXfrComplete_int+0x16a>
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d108      	bne.n	80035aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035a2:	461a      	mov	r2, r3
 80035a4:	2101      	movs	r1, #1
 80035a6:	f003 f98b 	bl	80068c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	4619      	mov	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f004 febd 	bl	8008330 <HAL_PCD_DataOutStageCallback>
 80035b6:	e046      	b.n	8003646 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4a26      	ldr	r2, [pc, #152]	; (8003654 <PCD_EP_OutXfrComplete_int+0x214>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d124      	bne.n	800360a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d6:	461a      	mov	r2, r3
 80035d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035dc:	6093      	str	r3, [r2, #8]
 80035de:	e032      	b.n	8003646 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f6:	461a      	mov	r2, r3
 80035f8:	2320      	movs	r3, #32
 80035fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f004 fe94 	bl	8008330 <HAL_PCD_DataOutStageCallback>
 8003608:	e01d      	b.n	8003646 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d114      	bne.n	800363a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d108      	bne.n	800363a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003632:	461a      	mov	r2, r3
 8003634:	2100      	movs	r1, #0
 8003636:	f003 f943 	bl	80068c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f004 fe75 	bl	8008330 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	4f54300a 	.word	0x4f54300a
 8003654:	4f54310a 	.word	0x4f54310a

08003658 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	333c      	adds	r3, #60	; 0x3c
 8003670:	3304      	adds	r3, #4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4413      	add	r3, r2
 800367e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4a15      	ldr	r2, [pc, #84]	; (80036e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d90e      	bls.n	80036ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a4:	461a      	mov	r2, r3
 80036a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f004 fe2d 	bl	800830c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d90c      	bls.n	80036d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d108      	bne.n	80036d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036cc:	461a      	mov	r2, r3
 80036ce:	2101      	movs	r1, #1
 80036d0:	f003 f8f6 	bl	80068c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	4f54300a 	.word	0x4f54300a

080036e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
 80036f0:	4613      	mov	r3, r2
 80036f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d107      	bne.n	8003712 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003702:	883b      	ldrh	r3, [r7, #0]
 8003704:	0419      	lsls	r1, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	430a      	orrs	r2, r1
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
 8003710:	e028      	b.n	8003764 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	4413      	add	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e00d      	b.n	8003742 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	3340      	adds	r3, #64	; 0x40
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	0c1b      	lsrs	r3, r3, #16
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	4413      	add	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	3301      	adds	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	3b01      	subs	r3, #1
 8003748:	429a      	cmp	r2, r3
 800374a:	d3ec      	bcc.n	8003726 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800374c:	883b      	ldrh	r3, [r7, #0]
 800374e:	0418      	lsls	r0, r3, #16
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6819      	ldr	r1, [r3, #0]
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	3b01      	subs	r3, #1
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	4302      	orrs	r2, r0
 800375c:	3340      	adds	r3, #64	; 0x40
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e264      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d075      	beq.n	80038b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ca:	4ba3      	ldr	r3, [pc, #652]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d00c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d6:	4ba0      	ldr	r3, [pc, #640]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d112      	bne.n	8003808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e2:	4b9d      	ldr	r3, [pc, #628]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ee:	d10b      	bne.n	8003808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	4b99      	ldr	r3, [pc, #612]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d05b      	beq.n	80038b4 <HAL_RCC_OscConfig+0x108>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d157      	bne.n	80038b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e23f      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003810:	d106      	bne.n	8003820 <HAL_RCC_OscConfig+0x74>
 8003812:	4b91      	ldr	r3, [pc, #580]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a90      	ldr	r2, [pc, #576]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e01d      	b.n	800385c <HAL_RCC_OscConfig+0xb0>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003828:	d10c      	bne.n	8003844 <HAL_RCC_OscConfig+0x98>
 800382a:	4b8b      	ldr	r3, [pc, #556]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a8a      	ldr	r2, [pc, #552]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	4b88      	ldr	r3, [pc, #544]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a87      	ldr	r2, [pc, #540]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e00b      	b.n	800385c <HAL_RCC_OscConfig+0xb0>
 8003844:	4b84      	ldr	r3, [pc, #528]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a83      	ldr	r2, [pc, #524]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 800384a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	4b81      	ldr	r3, [pc, #516]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a80      	ldr	r2, [pc, #512]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800385a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d013      	beq.n	800388c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003864:	f7fd ff3e 	bl	80016e4 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800386c:	f7fd ff3a 	bl	80016e4 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b64      	cmp	r3, #100	; 0x64
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e204      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	4b76      	ldr	r3, [pc, #472]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0xc0>
 800388a:	e014      	b.n	80038b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7fd ff2a 	bl	80016e4 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003894:	f7fd ff26 	bl	80016e4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	; 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e1f0      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a6:	4b6c      	ldr	r3, [pc, #432]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0xe8>
 80038b2:	e000      	b.n	80038b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d063      	beq.n	800398a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038c2:	4b65      	ldr	r3, [pc, #404]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ce:	4b62      	ldr	r3, [pc, #392]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d11c      	bne.n	8003914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038da:	4b5f      	ldr	r3, [pc, #380]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d116      	bne.n	8003914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	4b5c      	ldr	r3, [pc, #368]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_RCC_OscConfig+0x152>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e1c4      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fe:	4b56      	ldr	r3, [pc, #344]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4952      	ldr	r1, [pc, #328]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	e03a      	b.n	800398a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d020      	beq.n	800395e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800391c:	4b4f      	ldr	r3, [pc, #316]	; (8003a5c <HAL_RCC_OscConfig+0x2b0>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7fd fedf 	bl	80016e4 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392a:	f7fd fedb 	bl	80016e4 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e1a5      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393c:	4b46      	ldr	r3, [pc, #280]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003948:	4b43      	ldr	r3, [pc, #268]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4940      	ldr	r1, [pc, #256]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]
 800395c:	e015      	b.n	800398a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395e:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <HAL_RCC_OscConfig+0x2b0>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fd febe 	bl	80016e4 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396c:	f7fd feba 	bl	80016e4 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e184      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397e:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d030      	beq.n	80039f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d016      	beq.n	80039cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399e:	4b30      	ldr	r3, [pc, #192]	; (8003a60 <HAL_RCC_OscConfig+0x2b4>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fd fe9e 	bl	80016e4 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ac:	f7fd fe9a 	bl	80016e4 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e164      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039be:	4b26      	ldr	r3, [pc, #152]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x200>
 80039ca:	e015      	b.n	80039f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039cc:	4b24      	ldr	r3, [pc, #144]	; (8003a60 <HAL_RCC_OscConfig+0x2b4>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d2:	f7fd fe87 	bl	80016e4 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039da:	f7fd fe83 	bl	80016e4 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e14d      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ec:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80039ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f0      	bne.n	80039da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80a0 	beq.w	8003b46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a06:	2300      	movs	r3, #0
 8003a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10f      	bne.n	8003a36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6413      	str	r3, [r2, #64]	; 0x40
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a32:	2301      	movs	r3, #1
 8003a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_OscConfig+0x2b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d121      	bne.n	8003a86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <HAL_RCC_OscConfig+0x2b8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a07      	ldr	r2, [pc, #28]	; (8003a64 <HAL_RCC_OscConfig+0x2b8>)
 8003a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4e:	f7fd fe49 	bl	80016e4 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	e011      	b.n	8003a7a <HAL_RCC_OscConfig+0x2ce>
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	42470000 	.word	0x42470000
 8003a60:	42470e80 	.word	0x42470e80
 8003a64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a68:	f7fd fe3c 	bl	80016e4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e106      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7a:	4b85      	ldr	r3, [pc, #532]	; (8003c90 <HAL_RCC_OscConfig+0x4e4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d106      	bne.n	8003a9c <HAL_RCC_OscConfig+0x2f0>
 8003a8e:	4b81      	ldr	r3, [pc, #516]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	4a80      	ldr	r2, [pc, #512]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9a:	e01c      	b.n	8003ad6 <HAL_RCC_OscConfig+0x32a>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d10c      	bne.n	8003abe <HAL_RCC_OscConfig+0x312>
 8003aa4:	4b7b      	ldr	r3, [pc, #492]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	4a7a      	ldr	r2, [pc, #488]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003aaa:	f043 0304 	orr.w	r3, r3, #4
 8003aae:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab0:	4b78      	ldr	r3, [pc, #480]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	4a77      	ldr	r2, [pc, #476]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6713      	str	r3, [r2, #112]	; 0x70
 8003abc:	e00b      	b.n	8003ad6 <HAL_RCC_OscConfig+0x32a>
 8003abe:	4b75      	ldr	r3, [pc, #468]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	4a74      	ldr	r2, [pc, #464]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aca:	4b72      	ldr	r3, [pc, #456]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	4a71      	ldr	r2, [pc, #452]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003ad0:	f023 0304 	bic.w	r3, r3, #4
 8003ad4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d015      	beq.n	8003b0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ade:	f7fd fe01 	bl	80016e4 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fd fdfd 	bl	80016e4 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0c5      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afc:	4b65      	ldr	r3, [pc, #404]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ee      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x33a>
 8003b08:	e014      	b.n	8003b34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0a:	f7fd fdeb 	bl	80016e4 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b10:	e00a      	b.n	8003b28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7fd fde7 	bl	80016e4 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e0af      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b28:	4b5a      	ldr	r3, [pc, #360]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1ee      	bne.n	8003b12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d105      	bne.n	8003b46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3a:	4b56      	ldr	r3, [pc, #344]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	4a55      	ldr	r2, [pc, #340]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 809b 	beq.w	8003c86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b50:	4b50      	ldr	r3, [pc, #320]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d05c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d141      	bne.n	8003be8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b64:	4b4c      	ldr	r3, [pc, #304]	; (8003c98 <HAL_RCC_OscConfig+0x4ec>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fd fdbb 	bl	80016e4 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fd fdb7 	bl	80016e4 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e081      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b84:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	019b      	lsls	r3, r3, #6
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	061b      	lsls	r3, r3, #24
 8003bb4:	4937      	ldr	r1, [pc, #220]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bba:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <HAL_RCC_OscConfig+0x4ec>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fd fd90 	bl	80016e4 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fd fd8c 	bl	80016e4 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e056      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bda:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x41c>
 8003be6:	e04e      	b.n	8003c86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be8:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <HAL_RCC_OscConfig+0x4ec>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bee:	f7fd fd79 	bl	80016e4 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fd fd75 	bl	80016e4 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e03f      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f0      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x44a>
 8003c14:	e037      	b.n	8003c86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e032      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c22:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d028      	beq.n	8003c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d121      	bne.n	8003c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d11a      	bne.n	8003c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c52:	4013      	ands	r3, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d111      	bne.n	8003c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40007000 	.word	0x40007000
 8003c94:	40023800 	.word	0x40023800
 8003c98:	42470060 	.word	0x42470060

08003c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0cc      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b68      	ldr	r3, [pc, #416]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d90c      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b65      	ldr	r3, [pc, #404]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b63      	ldr	r3, [pc, #396]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0b8      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf0:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d08:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a52      	ldr	r2, [pc, #328]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d14:	4b50      	ldr	r3, [pc, #320]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	494d      	ldr	r1, [pc, #308]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d044      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d119      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e07f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d107      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5a:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e06f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e067      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7a:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f023 0203 	bic.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4934      	ldr	r1, [pc, #208]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d8c:	f7fd fcaa 	bl	80016e4 <HAL_GetTick>
 8003d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d94:	f7fd fca6 	bl	80016e4 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e04f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 020c 	and.w	r2, r3, #12
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d1eb      	bne.n	8003d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b25      	ldr	r3, [pc, #148]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d20c      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e032      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4916      	ldr	r1, [pc, #88]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	490e      	ldr	r1, [pc, #56]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e22:	f000 f821 	bl	8003e68 <HAL_RCC_GetSysClockFreq>
 8003e26:	4602      	mov	r2, r0
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	490a      	ldr	r1, [pc, #40]	; (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003e34:	5ccb      	ldrb	r3, [r1, r3]
 8003e36:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3a:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fd fc0a 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023c00 	.word	0x40023c00
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	08008920 	.word	0x08008920
 8003e60:	20000004 	.word	0x20000004
 8003e64:	2000000c 	.word	0x2000000c

08003e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e80:	4b67      	ldr	r3, [pc, #412]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d00d      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	f200 80bd 	bhi.w	800400c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x34>
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e9a:	e0b7      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e9c:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e9e:	60bb      	str	r3, [r7, #8]
       break;
 8003ea0:	e0b7      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ea2:	4b61      	ldr	r3, [pc, #388]	; (8004028 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ea4:	60bb      	str	r3, [r7, #8]
      break;
 8003ea6:	e0b4      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea8:	4b5d      	ldr	r3, [pc, #372]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eb2:	4b5b      	ldr	r3, [pc, #364]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d04d      	beq.n	8003f5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ebe:	4b58      	ldr	r3, [pc, #352]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	099b      	lsrs	r3, r3, #6
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ece:	f04f 0100 	mov.w	r1, #0
 8003ed2:	ea02 0800 	and.w	r8, r2, r0
 8003ed6:	ea03 0901 	and.w	r9, r3, r1
 8003eda:	4640      	mov	r0, r8
 8003edc:	4649      	mov	r1, r9
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	014b      	lsls	r3, r1, #5
 8003ee8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eec:	0142      	lsls	r2, r0, #5
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	ebb0 0008 	subs.w	r0, r0, r8
 8003ef6:	eb61 0109 	sbc.w	r1, r1, r9
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	018b      	lsls	r3, r1, #6
 8003f04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f08:	0182      	lsls	r2, r0, #6
 8003f0a:	1a12      	subs	r2, r2, r0
 8003f0c:	eb63 0301 	sbc.w	r3, r3, r1
 8003f10:	f04f 0000 	mov.w	r0, #0
 8003f14:	f04f 0100 	mov.w	r1, #0
 8003f18:	00d9      	lsls	r1, r3, #3
 8003f1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f1e:	00d0      	lsls	r0, r2, #3
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	eb12 0208 	adds.w	r2, r2, r8
 8003f28:	eb43 0309 	adc.w	r3, r3, r9
 8003f2c:	f04f 0000 	mov.w	r0, #0
 8003f30:	f04f 0100 	mov.w	r1, #0
 8003f34:	0259      	lsls	r1, r3, #9
 8003f36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003f3a:	0250      	lsls	r0, r2, #9
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4610      	mov	r0, r2
 8003f42:	4619      	mov	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	f7fc f942 	bl	80001d4 <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4613      	mov	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e04a      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5a:	4b31      	ldr	r3, [pc, #196]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	099b      	lsrs	r3, r3, #6
 8003f60:	461a      	mov	r2, r3
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	ea02 0400 	and.w	r4, r2, r0
 8003f72:	ea03 0501 	and.w	r5, r3, r1
 8003f76:	4620      	mov	r0, r4
 8003f78:	4629      	mov	r1, r5
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	014b      	lsls	r3, r1, #5
 8003f84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f88:	0142      	lsls	r2, r0, #5
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	1b00      	subs	r0, r0, r4
 8003f90:	eb61 0105 	sbc.w	r1, r1, r5
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	018b      	lsls	r3, r1, #6
 8003f9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fa2:	0182      	lsls	r2, r0, #6
 8003fa4:	1a12      	subs	r2, r2, r0
 8003fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003faa:	f04f 0000 	mov.w	r0, #0
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	00d9      	lsls	r1, r3, #3
 8003fb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fb8:	00d0      	lsls	r0, r2, #3
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	1912      	adds	r2, r2, r4
 8003fc0:	eb45 0303 	adc.w	r3, r5, r3
 8003fc4:	f04f 0000 	mov.w	r0, #0
 8003fc8:	f04f 0100 	mov.w	r1, #0
 8003fcc:	0299      	lsls	r1, r3, #10
 8003fce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fd2:	0290      	lsls	r0, r2, #10
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	f7fc f8f6 	bl	80001d4 <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4613      	mov	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	60bb      	str	r3, [r7, #8]
      break;
 800400a:	e002      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800400e:	60bb      	str	r3, [r7, #8]
      break;
 8004010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004012:	68bb      	ldr	r3, [r7, #8]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800
 8004024:	00f42400 	.word	0x00f42400
 8004028:	007a1200 	.word	0x007a1200

0800402c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_RCC_GetHCLKFreq+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000004 	.word	0x20000004

08004044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004048:	f7ff fff0 	bl	800402c <HAL_RCC_GetHCLKFreq>
 800404c:	4602      	mov	r2, r0
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	0a9b      	lsrs	r3, r3, #10
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	4903      	ldr	r1, [pc, #12]	; (8004068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004060:	4618      	mov	r0, r3
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40023800 	.word	0x40023800
 8004068:	08008930 	.word	0x08008930

0800406c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004070:	f7ff ffdc 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8004074:	4602      	mov	r2, r0
 8004076:	4b05      	ldr	r3, [pc, #20]	; (800408c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	0b5b      	lsrs	r3, r3, #13
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	4903      	ldr	r1, [pc, #12]	; (8004090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004082:	5ccb      	ldrb	r3, [r1, r3]
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40023800 	.word	0x40023800
 8004090:	08008930 	.word	0x08008930

08004094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e03f      	b.n	8004126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fc fd78 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2224      	movs	r2, #36	; 0x24
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 ff3f 	bl	8004f5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800410c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08c      	sub	sp, #48	; 0x30
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b20      	cmp	r3, #32
 8004148:	d165      	bne.n	8004216 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_UART_Transmit_DMA+0x26>
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e05e      	b.n	8004218 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_UART_Transmit_DMA+0x38>
 8004164:	2302      	movs	r3, #2
 8004166:	e057      	b.n	8004218 <HAL_UART_Transmit_DMA+0xe8>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	88fa      	ldrh	r2, [r7, #6]
 800417a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	88fa      	ldrh	r2, [r7, #6]
 8004180:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2221      	movs	r2, #33	; 0x21
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004194:	4a22      	ldr	r2, [pc, #136]	; (8004220 <HAL_UART_Transmit_DMA+0xf0>)
 8004196:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419c:	4a21      	ldr	r2, [pc, #132]	; (8004224 <HAL_UART_Transmit_DMA+0xf4>)
 800419e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	4a20      	ldr	r2, [pc, #128]	; (8004228 <HAL_UART_Transmit_DMA+0xf8>)
 80041a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	2200      	movs	r2, #0
 80041ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80041b0:	f107 0308 	add.w	r3, r7, #8
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	6819      	ldr	r1, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3304      	adds	r3, #4
 80041c4:	461a      	mov	r2, r3
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	f7fd fc7c 	bl	8001ac4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3314      	adds	r3, #20
 80041e4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	617b      	str	r3, [r7, #20]
   return(result);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3314      	adds	r3, #20
 80041fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041fe:	627a      	str	r2, [r7, #36]	; 0x24
 8004200:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6a39      	ldr	r1, [r7, #32]
 8004204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	61fb      	str	r3, [r7, #28]
   return(result);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e5      	bne.n	80041de <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e000      	b.n	8004218 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004216:	2302      	movs	r3, #2
  }
}
 8004218:	4618      	mov	r0, r3
 800421a:	3730      	adds	r7, #48	; 0x30
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	080047fd 	.word	0x080047fd
 8004224:	08004897 	.word	0x08004897
 8004228:	08004a0f 	.word	0x08004a0f

0800422c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	4613      	mov	r3, r2
 8004238:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b20      	cmp	r3, #32
 8004244:	d11d      	bne.n	8004282 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_UART_Receive_DMA+0x26>
 800424c:	88fb      	ldrh	r3, [r7, #6]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e016      	b.n	8004284 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_UART_Receive_DMA+0x38>
 8004260:	2302      	movs	r3, #2
 8004262:	e00f      	b.n	8004284 <HAL_UART_Receive_DMA+0x58>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	461a      	mov	r2, r3
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 fc13 	bl	8004aa4 <UART_Start_Receive_DMA>
 800427e:	4603      	mov	r3, r0
 8004280:	e000      	b.n	8004284 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b0ba      	sub	sp, #232	; 0xe8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10f      	bne.n	80042f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_UART_IRQHandler+0x66>
 80042de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fd7b 	bl	8004de6 <UART_Receive_IT>
      return;
 80042f0:	e256      	b.n	80047a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 80de 	beq.w	80044b8 <HAL_UART_IRQHandler+0x22c>
 80042fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80d1 	beq.w	80044b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <HAL_UART_IRQHandler+0xae>
 8004322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f043 0201 	orr.w	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800433a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <HAL_UART_IRQHandler+0xd2>
 8004346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f043 0202 	orr.w	r2, r3, #2
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <HAL_UART_IRQHandler+0xf6>
 800436a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f043 0204 	orr.w	r2, r3, #4
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d011      	beq.n	80043b2 <HAL_UART_IRQHandler+0x126>
 800438e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800439a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f043 0208 	orr.w	r2, r3, #8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 81ed 	beq.w	8004796 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_UART_IRQHandler+0x14e>
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fd06 	bl	8004de6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d103      	bne.n	8004406 <HAL_UART_IRQHandler+0x17a>
 80043fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004402:	2b00      	cmp	r3, #0
 8004404:	d04f      	beq.n	80044a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fc0e 	bl	8004c28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	d141      	bne.n	800449e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3314      	adds	r3, #20
 8004420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3314      	adds	r3, #20
 8004442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004446:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800444a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800445e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1d9      	bne.n	800441a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	2b00      	cmp	r3, #0
 800446c:	d013      	beq.n	8004496 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	4a7d      	ldr	r2, [pc, #500]	; (8004668 <HAL_UART_IRQHandler+0x3dc>)
 8004474:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd fbea 	bl	8001c54 <HAL_DMA_Abort_IT>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d016      	beq.n	80044b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004490:	4610      	mov	r0, r2
 8004492:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004494:	e00e      	b.n	80044b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f99a 	bl	80047d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449c:	e00a      	b.n	80044b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f996 	bl	80047d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	e006      	b.n	80044b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f992 	bl	80047d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044b2:	e170      	b.n	8004796 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	bf00      	nop
    return;
 80044b6:	e16e      	b.n	8004796 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	2b01      	cmp	r3, #1
 80044be:	f040 814a 	bne.w	8004756 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8143 	beq.w	8004756 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 813c 	beq.w	8004756 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	f040 80b4 	bne.w	800466c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004510:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8140 	beq.w	800479a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800451e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004522:	429a      	cmp	r2, r3
 8004524:	f080 8139 	bcs.w	800479a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800452e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453a:	f000 8088 	beq.w	800464e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800455c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800456a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800456e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004576:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1d9      	bne.n	800453e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800459a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3314      	adds	r3, #20
 80045aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e1      	bne.n	800458a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3314      	adds	r3, #20
 80045e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e3      	bne.n	80045c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800461c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461e:	f023 0310 	bic.w	r3, r3, #16
 8004622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004630:	65ba      	str	r2, [r7, #88]	; 0x58
 8004632:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004636:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800463e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e3      	bne.n	800460c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	4618      	mov	r0, r3
 800464a:	f7fd fa93 	bl	8001b74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004656:	b29b      	uxth	r3, r3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	b29b      	uxth	r3, r3
 800465c:	4619      	mov	r1, r3
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8c0 	bl	80047e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004664:	e099      	b.n	800479a <HAL_UART_IRQHandler+0x50e>
 8004666:	bf00      	nop
 8004668:	08004cef 	.word	0x08004cef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004674:	b29b      	uxth	r3, r3
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 808b 	beq.w	800479e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8086 	beq.w	800479e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	330c      	adds	r3, #12
 80046b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046b6:	647a      	str	r2, [r7, #68]	; 0x44
 80046b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e3      	bne.n	8004692 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3314      	adds	r3, #20
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	623b      	str	r3, [r7, #32]
   return(result);
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3314      	adds	r3, #20
 80046ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046ee:	633a      	str	r2, [r7, #48]	; 0x30
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e3      	bne.n	80046ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0310 	bic.w	r3, r3, #16
 8004726:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004734:	61fa      	str	r2, [r7, #28]
 8004736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	69b9      	ldr	r1, [r7, #24]
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	617b      	str	r3, [r7, #20]
   return(result);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e3      	bne.n	8004710 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f848 	bl	80047e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004754:	e023      	b.n	800479e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_UART_IRQHandler+0x4ea>
 8004762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fad1 	bl	8004d16 <UART_Transmit_IT>
    return;
 8004774:	e014      	b.n	80047a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00e      	beq.n	80047a0 <HAL_UART_IRQHandler+0x514>
 8004782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fb11 	bl	8004db6 <UART_EndTransmit_IT>
    return;
 8004794:	e004      	b.n	80047a0 <HAL_UART_IRQHandler+0x514>
    return;
 8004796:	bf00      	nop
 8004798:	e002      	b.n	80047a0 <HAL_UART_IRQHandler+0x514>
      return;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <HAL_UART_IRQHandler+0x514>
      return;
 800479e:	bf00      	nop
  }
}
 80047a0:	37e8      	adds	r7, #232	; 0xe8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop

080047a8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b090      	sub	sp, #64	; 0x40
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d137      	bne.n	8004888 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481a:	2200      	movs	r2, #0
 800481c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800481e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3314      	adds	r3, #20
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	623b      	str	r3, [r7, #32]
   return(result);
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004834:	63bb      	str	r3, [r7, #56]	; 0x38
 8004836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3314      	adds	r3, #20
 800483c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800483e:	633a      	str	r2, [r7, #48]	; 0x30
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e5      	bne.n	800481e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	330c      	adds	r3, #12
 8004858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	60fb      	str	r3, [r7, #12]
   return(result);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
 800486a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004872:	61fa      	str	r2, [r7, #28]
 8004874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	69b9      	ldr	r1, [r7, #24]
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	617b      	str	r3, [r7, #20]
   return(result);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e5      	bne.n	8004852 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004886:	e002      	b.n	800488e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004888:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800488a:	f7fc f92b 	bl	8000ae4 <HAL_UART_TxCpltCallback>
}
 800488e:	bf00      	nop
 8004890:	3740      	adds	r7, #64	; 0x40
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff ff7f 	bl	80047a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048aa:	bf00      	nop
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b09c      	sub	sp, #112	; 0x70
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d172      	bne.n	80049b4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80048ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d0:	2200      	movs	r2, #0
 80048d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80048ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80048f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e5      	bne.n	80048d4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3314      	adds	r3, #20
 800490e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	667b      	str	r3, [r7, #100]	; 0x64
 8004920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004928:	647a      	str	r2, [r7, #68]	; 0x44
 800492a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800492e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e5      	bne.n	8004908 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800493c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3314      	adds	r3, #20
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	623b      	str	r3, [r7, #32]
   return(result);
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004952:	663b      	str	r3, [r7, #96]	; 0x60
 8004954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3314      	adds	r3, #20
 800495a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800495c:	633a      	str	r2, [r7, #48]	; 0x30
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e5      	bne.n	800493c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497c:	2b01      	cmp	r3, #1
 800497e:	d119      	bne.n	80049b4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0310 	bic.w	r3, r3, #16
 8004996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049a0:	61fa      	str	r2, [r7, #28]
 80049a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	69b9      	ldr	r1, [r7, #24]
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	e841 2300 	strex	r3, r2, [r1]
 80049ac:	617b      	str	r3, [r7, #20]
   return(result);
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e5      	bne.n	8004980 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d106      	bne.n	80049ca <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049c0:	4619      	mov	r1, r3
 80049c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049c4:	f7ff ff0e 	bl	80047e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049c8:	e002      	b.n	80049d0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80049ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049cc:	f7fc f8a6 	bl	8000b1c <HAL_UART_RxCpltCallback>
}
 80049d0:	bf00      	nop
 80049d2:	3770      	adds	r7, #112	; 0x70
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d108      	bne.n	8004a00 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049f2:	085b      	lsrs	r3, r3, #1
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	4619      	mov	r1, r3
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff fef3 	bl	80047e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049fe:	e002      	b.n	8004a06 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7ff fedb 	bl	80047bc <HAL_UART_RxHalfCpltCallback>
}
 8004a06:	bf00      	nop
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b084      	sub	sp, #16
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2a:	2b80      	cmp	r3, #128	; 0x80
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2301      	moveq	r3, #1
 8004a30:	2300      	movne	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b21      	cmp	r3, #33	; 0x21
 8004a40:	d108      	bne.n	8004a54 <UART_DMAError+0x46>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004a4e:	68b8      	ldr	r0, [r7, #8]
 8004a50:	f000 f8c2 	bl	8004bd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b22      	cmp	r3, #34	; 0x22
 8004a74:	d108      	bne.n	8004a88 <UART_DMAError+0x7a>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a82:	68b8      	ldr	r0, [r7, #8]
 8004a84:	f000 f8d0 	bl	8004c28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	f043 0210 	orr.w	r2, r3, #16
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a94:	68b8      	ldr	r0, [r7, #8]
 8004a96:	f7ff fe9b 	bl	80047d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b098      	sub	sp, #96	; 0x60
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2222      	movs	r2, #34	; 0x22
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	4a3e      	ldr	r2, [pc, #248]	; (8004bcc <UART_Start_Receive_DMA+0x128>)
 8004ad2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	4a3d      	ldr	r2, [pc, #244]	; (8004bd0 <UART_Start_Receive_DMA+0x12c>)
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	4a3c      	ldr	r2, [pc, #240]	; (8004bd4 <UART_Start_Receive_DMA+0x130>)
 8004ae2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	2200      	movs	r2, #0
 8004aea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004aec:	f107 0308 	add.w	r3, r7, #8
 8004af0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4619      	mov	r1, r3
 8004afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	f7fc ffde 	bl	8001ac4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	330c      	adds	r3, #12
 8004b2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b46:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e5      	bne.n	8004b26 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3314      	adds	r3, #20
 8004b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	657b      	str	r3, [r7, #84]	; 0x54
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3314      	adds	r3, #20
 8004b78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b7a:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e5      	bne.n	8004b5a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3314      	adds	r3, #20
 8004b94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3314      	adds	r3, #20
 8004bac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bae:	627a      	str	r2, [r7, #36]	; 0x24
 8004bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6a39      	ldr	r1, [r7, #32]
 8004bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e5      	bne.n	8004b8e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3760      	adds	r7, #96	; 0x60
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	080048b3 	.word	0x080048b3
 8004bd0:	080049d9 	.word	0x080049d9
 8004bd4:	08004a0f 	.word	0x08004a0f

08004bd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b089      	sub	sp, #36	; 0x24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	330c      	adds	r3, #12
 8004be6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bf6:	61fb      	str	r3, [r7, #28]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	330c      	adds	r3, #12
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	61ba      	str	r2, [r7, #24]
 8004c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	6979      	ldr	r1, [r7, #20]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	e841 2300 	strex	r3, r2, [r1]
 8004c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e5      	bne.n	8004be0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004c1c:	bf00      	nop
 8004c1e:	3724      	adds	r7, #36	; 0x24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b095      	sub	sp, #84	; 0x54
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c50:	643a      	str	r2, [r7, #64]	; 0x40
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e5      	bne.n	8004c30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3314      	adds	r3, #20
 8004c6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	e853 3f00 	ldrex	r3, [r3]
 8004c72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3314      	adds	r3, #20
 8004c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e5      	bne.n	8004c64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d119      	bne.n	8004cd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f023 0310 	bic.w	r3, r3, #16
 8004cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cc0:	61ba      	str	r2, [r7, #24]
 8004cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6979      	ldr	r1, [r7, #20]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e5      	bne.n	8004ca0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ce2:	bf00      	nop
 8004ce4:	3754      	adds	r7, #84	; 0x54
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fd61 	bl	80047d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b085      	sub	sp, #20
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b21      	cmp	r3, #33	; 0x21
 8004d28:	d13e      	bne.n	8004da8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d32:	d114      	bne.n	8004d5e <UART_Transmit_IT+0x48>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d110      	bne.n	8004d5e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	1c9a      	adds	r2, r3, #2
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	621a      	str	r2, [r3, #32]
 8004d5c:	e008      	b.n	8004d70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	1c59      	adds	r1, r3, #1
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6211      	str	r1, [r2, #32]
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10f      	bne.n	8004da4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e000      	b.n	8004daa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dcc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fb fe84 	bl	8000ae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b08c      	sub	sp, #48	; 0x30
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b22      	cmp	r3, #34	; 0x22
 8004df8:	f040 80ab 	bne.w	8004f52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e04:	d117      	bne.n	8004e36 <UART_Receive_IT+0x50>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d113      	bne.n	8004e36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	1c9a      	adds	r2, r3, #2
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	629a      	str	r2, [r3, #40]	; 0x28
 8004e34:	e026      	b.n	8004e84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e48:	d007      	beq.n	8004e5a <UART_Receive_IT+0x74>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <UART_Receive_IT+0x82>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e008      	b.n	8004e7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4619      	mov	r1, r3
 8004e92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d15a      	bne.n	8004f4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0220 	bic.w	r2, r2, #32
 8004ea6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0201 	bic.w	r2, r2, #1
 8004ec6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d135      	bne.n	8004f44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	330c      	adds	r3, #12
 8004ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	613b      	str	r3, [r7, #16]
   return(result);
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f023 0310 	bic.w	r3, r3, #16
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	330c      	adds	r3, #12
 8004efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efe:	623a      	str	r2, [r7, #32]
 8004f00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	69f9      	ldr	r1, [r7, #28]
 8004f04:	6a3a      	ldr	r2, [r7, #32]
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e5      	bne.n	8004ede <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d10a      	bne.n	8004f36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fc51 	bl	80047e4 <HAL_UARTEx_RxEventCallback>
 8004f42:	e002      	b.n	8004f4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7fb fde9 	bl	8000b1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e002      	b.n	8004f54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e000      	b.n	8004f54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f52:	2302      	movs	r3, #2
  }
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3730      	adds	r7, #48	; 0x30
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f60:	b09f      	sub	sp, #124	; 0x7c
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f72:	68d9      	ldr	r1, [r3, #12]
 8004f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	ea40 0301 	orr.w	r3, r0, r1
 8004f7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fa0:	f021 010c 	bic.w	r1, r1, #12
 8004fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004faa:	430b      	orrs	r3, r1
 8004fac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fba:	6999      	ldr	r1, [r3, #24]
 8004fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	ea40 0301 	orr.w	r3, r0, r1
 8004fc4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4bc5      	ldr	r3, [pc, #788]	; (80052e0 <UART_SetConfig+0x384>)
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d004      	beq.n	8004fda <UART_SetConfig+0x7e>
 8004fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4bc3      	ldr	r3, [pc, #780]	; (80052e4 <UART_SetConfig+0x388>)
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d103      	bne.n	8004fe2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fda:	f7ff f847 	bl	800406c <HAL_RCC_GetPCLK2Freq>
 8004fde:	6778      	str	r0, [r7, #116]	; 0x74
 8004fe0:	e002      	b.n	8004fe8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fe2:	f7ff f82f 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8004fe6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff0:	f040 80b6 	bne.w	8005160 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ff6:	461c      	mov	r4, r3
 8004ff8:	f04f 0500 	mov.w	r5, #0
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	462b      	mov	r3, r5
 8005000:	1891      	adds	r1, r2, r2
 8005002:	6439      	str	r1, [r7, #64]	; 0x40
 8005004:	415b      	adcs	r3, r3
 8005006:	647b      	str	r3, [r7, #68]	; 0x44
 8005008:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800500c:	1912      	adds	r2, r2, r4
 800500e:	eb45 0303 	adc.w	r3, r5, r3
 8005012:	f04f 0000 	mov.w	r0, #0
 8005016:	f04f 0100 	mov.w	r1, #0
 800501a:	00d9      	lsls	r1, r3, #3
 800501c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005020:	00d0      	lsls	r0, r2, #3
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	1911      	adds	r1, r2, r4
 8005028:	6639      	str	r1, [r7, #96]	; 0x60
 800502a:	416b      	adcs	r3, r5
 800502c:	667b      	str	r3, [r7, #100]	; 0x64
 800502e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	461a      	mov	r2, r3
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	1891      	adds	r1, r2, r2
 800503a:	63b9      	str	r1, [r7, #56]	; 0x38
 800503c:	415b      	adcs	r3, r3
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005044:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005048:	f7fb f8c4 	bl	80001d4 <__aeabi_uldivmod>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4ba5      	ldr	r3, [pc, #660]	; (80052e8 <UART_SetConfig+0x38c>)
 8005052:	fba3 2302 	umull	r2, r3, r3, r2
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	011e      	lsls	r6, r3, #4
 800505a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800505c:	461c      	mov	r4, r3
 800505e:	f04f 0500 	mov.w	r5, #0
 8005062:	4622      	mov	r2, r4
 8005064:	462b      	mov	r3, r5
 8005066:	1891      	adds	r1, r2, r2
 8005068:	6339      	str	r1, [r7, #48]	; 0x30
 800506a:	415b      	adcs	r3, r3
 800506c:	637b      	str	r3, [r7, #52]	; 0x34
 800506e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005072:	1912      	adds	r2, r2, r4
 8005074:	eb45 0303 	adc.w	r3, r5, r3
 8005078:	f04f 0000 	mov.w	r0, #0
 800507c:	f04f 0100 	mov.w	r1, #0
 8005080:	00d9      	lsls	r1, r3, #3
 8005082:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005086:	00d0      	lsls	r0, r2, #3
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	1911      	adds	r1, r2, r4
 800508e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005090:	416b      	adcs	r3, r5
 8005092:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	461a      	mov	r2, r3
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	1891      	adds	r1, r2, r2
 80050a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80050a2:	415b      	adcs	r3, r3
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80050ae:	f7fb f891 	bl	80001d4 <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4b8c      	ldr	r3, [pc, #560]	; (80052e8 <UART_SetConfig+0x38c>)
 80050b8:	fba3 1302 	umull	r1, r3, r3, r2
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	2164      	movs	r1, #100	; 0x64
 80050c0:	fb01 f303 	mul.w	r3, r1, r3
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	3332      	adds	r3, #50	; 0x32
 80050ca:	4a87      	ldr	r2, [pc, #540]	; (80052e8 <UART_SetConfig+0x38c>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050d8:	441e      	add	r6, r3
 80050da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050dc:	4618      	mov	r0, r3
 80050de:	f04f 0100 	mov.w	r1, #0
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	1894      	adds	r4, r2, r2
 80050e8:	623c      	str	r4, [r7, #32]
 80050ea:	415b      	adcs	r3, r3
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
 80050ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050f2:	1812      	adds	r2, r2, r0
 80050f4:	eb41 0303 	adc.w	r3, r1, r3
 80050f8:	f04f 0400 	mov.w	r4, #0
 80050fc:	f04f 0500 	mov.w	r5, #0
 8005100:	00dd      	lsls	r5, r3, #3
 8005102:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005106:	00d4      	lsls	r4, r2, #3
 8005108:	4622      	mov	r2, r4
 800510a:	462b      	mov	r3, r5
 800510c:	1814      	adds	r4, r2, r0
 800510e:	653c      	str	r4, [r7, #80]	; 0x50
 8005110:	414b      	adcs	r3, r1
 8005112:	657b      	str	r3, [r7, #84]	; 0x54
 8005114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	461a      	mov	r2, r3
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	1891      	adds	r1, r2, r2
 8005120:	61b9      	str	r1, [r7, #24]
 8005122:	415b      	adcs	r3, r3
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800512a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800512e:	f7fb f851 	bl	80001d4 <__aeabi_uldivmod>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4b6c      	ldr	r3, [pc, #432]	; (80052e8 <UART_SetConfig+0x38c>)
 8005138:	fba3 1302 	umull	r1, r3, r3, r2
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	2164      	movs	r1, #100	; 0x64
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	3332      	adds	r3, #50	; 0x32
 800514a:	4a67      	ldr	r2, [pc, #412]	; (80052e8 <UART_SetConfig+0x38c>)
 800514c:	fba2 2303 	umull	r2, r3, r2, r3
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	f003 0207 	and.w	r2, r3, #7
 8005156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4432      	add	r2, r6
 800515c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800515e:	e0b9      	b.n	80052d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005162:	461c      	mov	r4, r3
 8005164:	f04f 0500 	mov.w	r5, #0
 8005168:	4622      	mov	r2, r4
 800516a:	462b      	mov	r3, r5
 800516c:	1891      	adds	r1, r2, r2
 800516e:	6139      	str	r1, [r7, #16]
 8005170:	415b      	adcs	r3, r3
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005178:	1912      	adds	r2, r2, r4
 800517a:	eb45 0303 	adc.w	r3, r5, r3
 800517e:	f04f 0000 	mov.w	r0, #0
 8005182:	f04f 0100 	mov.w	r1, #0
 8005186:	00d9      	lsls	r1, r3, #3
 8005188:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800518c:	00d0      	lsls	r0, r2, #3
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	eb12 0804 	adds.w	r8, r2, r4
 8005196:	eb43 0905 	adc.w	r9, r3, r5
 800519a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	4618      	mov	r0, r3
 80051a0:	f04f 0100 	mov.w	r1, #0
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	008b      	lsls	r3, r1, #2
 80051ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051b2:	0082      	lsls	r2, r0, #2
 80051b4:	4640      	mov	r0, r8
 80051b6:	4649      	mov	r1, r9
 80051b8:	f7fb f80c 	bl	80001d4 <__aeabi_uldivmod>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4b49      	ldr	r3, [pc, #292]	; (80052e8 <UART_SetConfig+0x38c>)
 80051c2:	fba3 2302 	umull	r2, r3, r3, r2
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	011e      	lsls	r6, r3, #4
 80051ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051cc:	4618      	mov	r0, r3
 80051ce:	f04f 0100 	mov.w	r1, #0
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	1894      	adds	r4, r2, r2
 80051d8:	60bc      	str	r4, [r7, #8]
 80051da:	415b      	adcs	r3, r3
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e2:	1812      	adds	r2, r2, r0
 80051e4:	eb41 0303 	adc.w	r3, r1, r3
 80051e8:	f04f 0400 	mov.w	r4, #0
 80051ec:	f04f 0500 	mov.w	r5, #0
 80051f0:	00dd      	lsls	r5, r3, #3
 80051f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051f6:	00d4      	lsls	r4, r2, #3
 80051f8:	4622      	mov	r2, r4
 80051fa:	462b      	mov	r3, r5
 80051fc:	1814      	adds	r4, r2, r0
 80051fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8005200:	414b      	adcs	r3, r1
 8005202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4618      	mov	r0, r3
 800520a:	f04f 0100 	mov.w	r1, #0
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	008b      	lsls	r3, r1, #2
 8005218:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800521c:	0082      	lsls	r2, r0, #2
 800521e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005222:	f7fa ffd7 	bl	80001d4 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4b2f      	ldr	r3, [pc, #188]	; (80052e8 <UART_SetConfig+0x38c>)
 800522c:	fba3 1302 	umull	r1, r3, r3, r2
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	2164      	movs	r1, #100	; 0x64
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	3332      	adds	r3, #50	; 0x32
 800523e:	4a2a      	ldr	r2, [pc, #168]	; (80052e8 <UART_SetConfig+0x38c>)
 8005240:	fba2 2303 	umull	r2, r3, r2, r3
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800524a:	441e      	add	r6, r3
 800524c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800524e:	4618      	mov	r0, r3
 8005250:	f04f 0100 	mov.w	r1, #0
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	1894      	adds	r4, r2, r2
 800525a:	603c      	str	r4, [r7, #0]
 800525c:	415b      	adcs	r3, r3
 800525e:	607b      	str	r3, [r7, #4]
 8005260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005264:	1812      	adds	r2, r2, r0
 8005266:	eb41 0303 	adc.w	r3, r1, r3
 800526a:	f04f 0400 	mov.w	r4, #0
 800526e:	f04f 0500 	mov.w	r5, #0
 8005272:	00dd      	lsls	r5, r3, #3
 8005274:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005278:	00d4      	lsls	r4, r2, #3
 800527a:	4622      	mov	r2, r4
 800527c:	462b      	mov	r3, r5
 800527e:	eb12 0a00 	adds.w	sl, r2, r0
 8005282:	eb43 0b01 	adc.w	fp, r3, r1
 8005286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	4618      	mov	r0, r3
 800528c:	f04f 0100 	mov.w	r1, #0
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	008b      	lsls	r3, r1, #2
 800529a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800529e:	0082      	lsls	r2, r0, #2
 80052a0:	4650      	mov	r0, sl
 80052a2:	4659      	mov	r1, fp
 80052a4:	f7fa ff96 	bl	80001d4 <__aeabi_uldivmod>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4b0e      	ldr	r3, [pc, #56]	; (80052e8 <UART_SetConfig+0x38c>)
 80052ae:	fba3 1302 	umull	r1, r3, r3, r2
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	2164      	movs	r1, #100	; 0x64
 80052b6:	fb01 f303 	mul.w	r3, r1, r3
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	3332      	adds	r3, #50	; 0x32
 80052c0:	4a09      	ldr	r2, [pc, #36]	; (80052e8 <UART_SetConfig+0x38c>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	f003 020f 	and.w	r2, r3, #15
 80052cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4432      	add	r2, r6
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	bf00      	nop
 80052d6:	377c      	adds	r7, #124	; 0x7c
 80052d8:	46bd      	mov	sp, r7
 80052da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052de:	bf00      	nop
 80052e0:	40011000 	.word	0x40011000
 80052e4:	40011400 	.word	0x40011400
 80052e8:	51eb851f 	.word	0x51eb851f

080052ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052ec:	b084      	sub	sp, #16
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	f107 001c 	add.w	r0, r7, #28
 80052fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	2b01      	cmp	r3, #1
 8005302:	d122      	bne.n	800534a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800532c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532e:	2b01      	cmp	r3, #1
 8005330:	d105      	bne.n	800533e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f001 fb1c 	bl	800697c <USB_CoreReset>
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]
 8005348:	e01a      	b.n	8005380 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f001 fb10 	bl	800697c <USB_CoreReset>
 800535c:	4603      	mov	r3, r0
 800535e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	639a      	str	r2, [r3, #56]	; 0x38
 8005372:	e005      	b.n	8005380 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	2b01      	cmp	r3, #1
 8005384:	d10b      	bne.n	800539e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f043 0206 	orr.w	r2, r3, #6
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f043 0220 	orr.w	r2, r3, #32
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800539e:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053aa:	b004      	add	sp, #16
 80053ac:	4770      	bx	lr
	...

080053b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	4613      	mov	r3, r2
 80053bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d165      	bne.n	8005490 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4a41      	ldr	r2, [pc, #260]	; (80054cc <USB_SetTurnaroundTime+0x11c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d906      	bls.n	80053da <USB_SetTurnaroundTime+0x2a>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4a40      	ldr	r2, [pc, #256]	; (80054d0 <USB_SetTurnaroundTime+0x120>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d202      	bcs.n	80053da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80053d4:	230f      	movs	r3, #15
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	e062      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4a3c      	ldr	r2, [pc, #240]	; (80054d0 <USB_SetTurnaroundTime+0x120>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d306      	bcc.n	80053f0 <USB_SetTurnaroundTime+0x40>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4a3b      	ldr	r2, [pc, #236]	; (80054d4 <USB_SetTurnaroundTime+0x124>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d202      	bcs.n	80053f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80053ea:	230e      	movs	r3, #14
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	e057      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a38      	ldr	r2, [pc, #224]	; (80054d4 <USB_SetTurnaroundTime+0x124>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d306      	bcc.n	8005406 <USB_SetTurnaroundTime+0x56>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a37      	ldr	r2, [pc, #220]	; (80054d8 <USB_SetTurnaroundTime+0x128>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d202      	bcs.n	8005406 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005400:	230d      	movs	r3, #13
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e04c      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4a33      	ldr	r2, [pc, #204]	; (80054d8 <USB_SetTurnaroundTime+0x128>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d306      	bcc.n	800541c <USB_SetTurnaroundTime+0x6c>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4a32      	ldr	r2, [pc, #200]	; (80054dc <USB_SetTurnaroundTime+0x12c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d802      	bhi.n	800541c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005416:	230c      	movs	r3, #12
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e041      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a2f      	ldr	r2, [pc, #188]	; (80054dc <USB_SetTurnaroundTime+0x12c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d906      	bls.n	8005432 <USB_SetTurnaroundTime+0x82>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4a2e      	ldr	r2, [pc, #184]	; (80054e0 <USB_SetTurnaroundTime+0x130>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d802      	bhi.n	8005432 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800542c:	230b      	movs	r3, #11
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e036      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4a2a      	ldr	r2, [pc, #168]	; (80054e0 <USB_SetTurnaroundTime+0x130>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d906      	bls.n	8005448 <USB_SetTurnaroundTime+0x98>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4a29      	ldr	r2, [pc, #164]	; (80054e4 <USB_SetTurnaroundTime+0x134>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d802      	bhi.n	8005448 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005442:	230a      	movs	r3, #10
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	e02b      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4a26      	ldr	r2, [pc, #152]	; (80054e4 <USB_SetTurnaroundTime+0x134>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d906      	bls.n	800545e <USB_SetTurnaroundTime+0xae>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a25      	ldr	r2, [pc, #148]	; (80054e8 <USB_SetTurnaroundTime+0x138>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d202      	bcs.n	800545e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005458:	2309      	movs	r3, #9
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e020      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <USB_SetTurnaroundTime+0x138>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d306      	bcc.n	8005474 <USB_SetTurnaroundTime+0xc4>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4a20      	ldr	r2, [pc, #128]	; (80054ec <USB_SetTurnaroundTime+0x13c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d802      	bhi.n	8005474 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800546e:	2308      	movs	r3, #8
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e015      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a1d      	ldr	r2, [pc, #116]	; (80054ec <USB_SetTurnaroundTime+0x13c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d906      	bls.n	800548a <USB_SetTurnaroundTime+0xda>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a1c      	ldr	r2, [pc, #112]	; (80054f0 <USB_SetTurnaroundTime+0x140>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d202      	bcs.n	800548a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005484:	2307      	movs	r3, #7
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e00a      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800548a:	2306      	movs	r3, #6
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e007      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005496:	2309      	movs	r3, #9
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e001      	b.n	80054a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800549c:	2309      	movs	r3, #9
 800549e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	029b      	lsls	r3, r3, #10
 80054b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80054b8:	431a      	orrs	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	00d8acbf 	.word	0x00d8acbf
 80054d0:	00e4e1c0 	.word	0x00e4e1c0
 80054d4:	00f42400 	.word	0x00f42400
 80054d8:	01067380 	.word	0x01067380
 80054dc:	011a499f 	.word	0x011a499f
 80054e0:	01312cff 	.word	0x01312cff
 80054e4:	014ca43f 	.word	0x014ca43f
 80054e8:	016e3600 	.word	0x016e3600
 80054ec:	01a6ab1f 	.word	0x01a6ab1f
 80054f0:	01e84800 	.word	0x01e84800

080054f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f043 0201 	orr.w	r2, r3, #1
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f023 0201 	bic.w	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d115      	bne.n	8005586 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005566:	2001      	movs	r0, #1
 8005568:	f7fc f8c8 	bl	80016fc <HAL_Delay>
      ms++;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f001 f972 	bl	800685c <USB_GetMode>
 8005578:	4603      	mov	r3, r0
 800557a:	2b01      	cmp	r3, #1
 800557c:	d01e      	beq.n	80055bc <USB_SetCurrentMode+0x84>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b31      	cmp	r3, #49	; 0x31
 8005582:	d9f0      	bls.n	8005566 <USB_SetCurrentMode+0x2e>
 8005584:	e01a      	b.n	80055bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d115      	bne.n	80055b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005598:	2001      	movs	r0, #1
 800559a:	f7fc f8af 	bl	80016fc <HAL_Delay>
      ms++;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3301      	adds	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f001 f959 	bl	800685c <USB_GetMode>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <USB_SetCurrentMode+0x84>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b31      	cmp	r3, #49	; 0x31
 80055b4:	d9f0      	bls.n	8005598 <USB_SetCurrentMode+0x60>
 80055b6:	e001      	b.n	80055bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e005      	b.n	80055c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b32      	cmp	r3, #50	; 0x32
 80055c0:	d101      	bne.n	80055c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055d0:	b084      	sub	sp, #16
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b086      	sub	sp, #24
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	e009      	b.n	8005604 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	3340      	adds	r3, #64	; 0x40
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	2200      	movs	r2, #0
 80055fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	3301      	adds	r3, #1
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2b0e      	cmp	r3, #14
 8005608:	d9f2      	bls.n	80055f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800560a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d11c      	bne.n	800564a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800561e:	f043 0302 	orr.w	r3, r3, #2
 8005622:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	639a      	str	r2, [r3, #56]	; 0x38
 8005648:	e00b      	b.n	8005662 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005668:	461a      	mov	r2, r3
 800566a:	2300      	movs	r3, #0
 800566c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005674:	4619      	mov	r1, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567c:	461a      	mov	r2, r3
 800567e:	680b      	ldr	r3, [r1, #0]
 8005680:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	2b01      	cmp	r3, #1
 8005686:	d10c      	bne.n	80056a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d104      	bne.n	8005698 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800568e:	2100      	movs	r1, #0
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f945 	bl	8005920 <USB_SetDevSpeed>
 8005696:	e008      	b.n	80056aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005698:	2101      	movs	r1, #1
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f940 	bl	8005920 <USB_SetDevSpeed>
 80056a0:	e003      	b.n	80056aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056a2:	2103      	movs	r1, #3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f93b 	bl	8005920 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056aa:	2110      	movs	r1, #16
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f8f3 	bl	8005898 <USB_FlushTxFifo>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f90f 	bl	80058e0 <USB_FlushRxFifo>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	461a      	mov	r2, r3
 80056d4:	2300      	movs	r3, #0
 80056d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056de:	461a      	mov	r2, r3
 80056e0:	2300      	movs	r3, #0
 80056e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ea:	461a      	mov	r2, r3
 80056ec:	2300      	movs	r3, #0
 80056ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056f0:	2300      	movs	r3, #0
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	e043      	b.n	800577e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005708:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800570c:	d118      	bne.n	8005740 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005720:	461a      	mov	r2, r3
 8005722:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	e013      	b.n	8005752 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005736:	461a      	mov	r2, r3
 8005738:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	e008      	b.n	8005752 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574c:	461a      	mov	r2, r3
 800574e:	2300      	movs	r3, #0
 8005750:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575e:	461a      	mov	r2, r3
 8005760:	2300      	movs	r3, #0
 8005762:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	461a      	mov	r2, r3
 8005772:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005776:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	3301      	adds	r3, #1
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	429a      	cmp	r2, r3
 8005784:	d3b7      	bcc.n	80056f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005786:	2300      	movs	r3, #0
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	e043      	b.n	8005814 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800579e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057a2:	d118      	bne.n	80057d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10a      	bne.n	80057c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b6:	461a      	mov	r2, r3
 80057b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e013      	b.n	80057e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057cc:	461a      	mov	r2, r3
 80057ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	e008      	b.n	80057e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e2:	461a      	mov	r2, r3
 80057e4:	2300      	movs	r3, #0
 80057e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f4:	461a      	mov	r2, r3
 80057f6:	2300      	movs	r3, #0
 80057f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005806:	461a      	mov	r2, r3
 8005808:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800580c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	3301      	adds	r3, #1
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	429a      	cmp	r2, r3
 800581a:	d3b7      	bcc.n	800578c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800582a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800582e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800583c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	2b00      	cmp	r3, #0
 8005842:	d105      	bne.n	8005850 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f043 0210 	orr.w	r2, r3, #16
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <USB_DevInit+0x2c4>)
 8005856:	4313      	orrs	r3, r2
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800585c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f043 0208 	orr.w	r2, r3, #8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800586e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d107      	bne.n	8005884 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800587c:	f043 0304 	orr.w	r3, r3, #4
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005890:	b004      	add	sp, #16
 8005892:	4770      	bx	lr
 8005894:	803c3800 	.word	0x803c3800

08005898 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	019b      	lsls	r3, r3, #6
 80058aa:	f043 0220 	orr.w	r2, r3, #32
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3301      	adds	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	4a08      	ldr	r2, [pc, #32]	; (80058dc <USB_FlushTxFifo+0x44>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e006      	b.n	80058d0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d0f1      	beq.n	80058b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	00030d40 	.word	0x00030d40

080058e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2210      	movs	r2, #16
 80058f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3301      	adds	r3, #1
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	4a08      	ldr	r2, [pc, #32]	; (800591c <USB_FlushRxFifo+0x3c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e006      	b.n	8005910 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b10      	cmp	r3, #16
 800590c:	d0f1      	beq.n	80058f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	00030d40 	.word	0x00030d40

08005920 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005940:	4313      	orrs	r3, r2
 8005942:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005952:	b480      	push	{r7}
 8005954:	b087      	sub	sp, #28
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0306 	and.w	r3, r3, #6
 800596a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005972:	2300      	movs	r3, #0
 8005974:	75fb      	strb	r3, [r7, #23]
 8005976:	e00a      	b.n	800598e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b02      	cmp	r3, #2
 800597c:	d002      	beq.n	8005984 <USB_GetDevSpeed+0x32>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b06      	cmp	r3, #6
 8005982:	d102      	bne.n	800598a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005984:	2302      	movs	r3, #2
 8005986:	75fb      	strb	r3, [r7, #23]
 8005988:	e001      	b.n	800598e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800598a:	230f      	movs	r3, #15
 800598c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800598e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005990:	4618      	mov	r0, r3
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d13a      	bne.n	8005a2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	2101      	movs	r1, #1
 80059ca:	fa01 f303 	lsl.w	r3, r1, r3
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	68f9      	ldr	r1, [r7, #12]
 80059d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059d6:	4313      	orrs	r3, r2
 80059d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d155      	bne.n	8005a9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	78db      	ldrb	r3, [r3, #3]
 8005a0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	059b      	lsls	r3, r3, #22
 8005a12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a14:	4313      	orrs	r3, r2
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	0151      	lsls	r1, r2, #5
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	440a      	add	r2, r1
 8005a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	e036      	b.n	8005a9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a34:	69da      	ldr	r2, [r3, #28]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	2101      	movs	r1, #1
 8005a40:	fa01 f303 	lsl.w	r3, r1, r3
 8005a44:	041b      	lsls	r3, r3, #16
 8005a46:	68f9      	ldr	r1, [r7, #12]
 8005a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d11a      	bne.n	8005a9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	78db      	ldrb	r3, [r3, #3]
 8005a80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a82:	430b      	orrs	r3, r1
 8005a84:	4313      	orrs	r3, r2
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	0151      	lsls	r1, r2, #5
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d161      	bne.n	8005b8c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ade:	d11f      	bne.n	8005b20 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	0151      	lsls	r1, r2, #5
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	440a      	add	r2, r1
 8005af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005afa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005afe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	2101      	movs	r1, #1
 8005b32:	fa01 f303 	lsl.w	r3, r1, r3
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b40:	4013      	ands	r3, r2
 8005b42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	69da      	ldr	r2, [r3, #28]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	2101      	movs	r1, #1
 8005b56:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b64:	4013      	ands	r3, r2
 8005b66:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	0159      	lsls	r1, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	440b      	add	r3, r1
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b82:	4619      	mov	r1, r3
 8005b84:	4b35      	ldr	r3, [pc, #212]	; (8005c5c <USB_DeactivateEndpoint+0x1b0>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	600b      	str	r3, [r1, #0]
 8005b8a:	e060      	b.n	8005c4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba2:	d11f      	bne.n	8005be4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bc2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	0151      	lsls	r1, r2, #5
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	440a      	add	r2, r1
 8005bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005be2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfa:	041b      	lsls	r3, r3, #16
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	68f9      	ldr	r1, [r7, #12]
 8005c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c04:	4013      	ands	r3, r2
 8005c06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	2101      	movs	r1, #1
 8005c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	43db      	mvns	r3, r3
 8005c22:	68f9      	ldr	r1, [r7, #12]
 8005c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c28:	4013      	ands	r3, r2
 8005c2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	0159      	lsls	r1, r3, #5
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	440b      	add	r3, r1
 8005c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c46:	4619      	mov	r1, r3
 8005c48:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <USB_DeactivateEndpoint+0x1b4>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	ec337800 	.word	0xec337800
 8005c60:	eff37800 	.word	0xeff37800

08005c64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08a      	sub	sp, #40	; 0x28
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	f040 815c 	bne.w	8005f3e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d132      	bne.n	8005cf4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	0151      	lsls	r1, r2, #5
 8005ca0:	69fa      	ldr	r2, [r7, #28]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ccc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	0151      	lsls	r1, r2, #5
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	440a      	add	r2, r1
 8005ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cec:	0cdb      	lsrs	r3, r3, #19
 8005cee:	04db      	lsls	r3, r3, #19
 8005cf0:	6113      	str	r3, [r2, #16]
 8005cf2:	e074      	b.n	8005dde <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0e:	0cdb      	lsrs	r3, r3, #19
 8005d10:	04db      	lsls	r3, r3, #19
 8005d12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6959      	ldr	r1, [r3, #20]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	440b      	add	r3, r1
 8005d50:	1e59      	subs	r1, r3, #1
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d5a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d5c:	4b9d      	ldr	r3, [pc, #628]	; (8005fd4 <USB_EPStartXfer+0x370>)
 8005d5e:	400b      	ands	r3, r1
 8005d60:	69b9      	ldr	r1, [r7, #24]
 8005d62:	0148      	lsls	r0, r1, #5
 8005d64:	69f9      	ldr	r1, [r7, #28]
 8005d66:	4401      	add	r1, r0
 8005d68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d86:	69b9      	ldr	r1, [r7, #24]
 8005d88:	0148      	lsls	r0, r1, #5
 8005d8a:	69f9      	ldr	r1, [r7, #28]
 8005d8c:	4401      	add	r1, r0
 8005d8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d92:	4313      	orrs	r3, r2
 8005d94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	78db      	ldrb	r3, [r3, #3]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d11f      	bne.n	8005dde <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005dbc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ddc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005dde:	79fb      	ldrb	r3, [r7, #7]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d14b      	bne.n	8005e7c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d009      	beq.n	8005e00 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	461a      	mov	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	78db      	ldrb	r3, [r3, #3]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d128      	bne.n	8005e5a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d110      	bne.n	8005e3a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	e00f      	b.n	8005e5a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e58:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	69fa      	ldr	r2, [r7, #28]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	e12f      	b.n	80060dc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e9a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	78db      	ldrb	r3, [r3, #3]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d015      	beq.n	8005ed0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 8117 	beq.w	80060dc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec4:	69f9      	ldr	r1, [r7, #28]
 8005ec6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	634b      	str	r3, [r1, #52]	; 0x34
 8005ece:	e105      	b.n	80060dc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d110      	bne.n	8005f02 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	e00f      	b.n	8005f22 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f20:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	68d9      	ldr	r1, [r3, #12]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	781a      	ldrb	r2, [r3, #0]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	b298      	uxth	r0, r3
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	4603      	mov	r3, r0
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fa2b 	bl	8006392 <USB_WritePacket>
 8005f3c:	e0ce      	b.n	80060dc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f58:	0cdb      	lsrs	r3, r3, #19
 8005f5a:	04db      	lsls	r3, r3, #19
 8005f5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f80:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d126      	bne.n	8005fd8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa0:	69b9      	ldr	r1, [r7, #24]
 8005fa2:	0148      	lsls	r0, r1, #5
 8005fa4:	69f9      	ldr	r1, [r7, #28]
 8005fa6:	4401      	add	r1, r0
 8005fa8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fac:	4313      	orrs	r3, r2
 8005fae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fce:	6113      	str	r3, [r2, #16]
 8005fd0:	e036      	b.n	8006040 <USB_EPStartXfer+0x3dc>
 8005fd2:	bf00      	nop
 8005fd4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	695a      	ldr	r2, [r3, #20]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	1e5a      	subs	r2, r3, #1
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	8afb      	ldrh	r3, [r7, #22]
 8005ffe:	04d9      	lsls	r1, r3, #19
 8006000:	4b39      	ldr	r3, [pc, #228]	; (80060e8 <USB_EPStartXfer+0x484>)
 8006002:	400b      	ands	r3, r1
 8006004:	69b9      	ldr	r1, [r7, #24]
 8006006:	0148      	lsls	r0, r1, #5
 8006008:	69f9      	ldr	r1, [r7, #28]
 800600a:	4401      	add	r1, r0
 800600c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006010:	4313      	orrs	r3, r2
 8006012:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006020:	691a      	ldr	r2, [r3, #16]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	8af9      	ldrh	r1, [r7, #22]
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006030:	69b9      	ldr	r1, [r7, #24]
 8006032:	0148      	lsls	r0, r1, #5
 8006034:	69f9      	ldr	r1, [r7, #28]
 8006036:	4401      	add	r1, r0
 8006038:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800603c:	4313      	orrs	r3, r2
 800603e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d10d      	bne.n	8006062 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d009      	beq.n	8006062 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	68d9      	ldr	r1, [r3, #12]
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605e:	460a      	mov	r2, r1
 8006060:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	78db      	ldrb	r3, [r3, #3]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d128      	bne.n	80060bc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006076:	2b00      	cmp	r3, #0
 8006078:	d110      	bne.n	800609c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006094:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	e00f      	b.n	80060bc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	0151      	lsls	r1, r2, #5
 80060ce:	69fa      	ldr	r2, [r7, #28]
 80060d0:	440a      	add	r2, r1
 80060d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3720      	adds	r7, #32
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	1ff80000 	.word	0x1ff80000

080060ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	2b01      	cmp	r3, #1
 800610a:	f040 80cd 	bne.w	80062a8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d132      	bne.n	800617c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006130:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006134:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006138:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	0151      	lsls	r1, r2, #5
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	440a      	add	r2, r1
 8006150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006154:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006158:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	440a      	add	r2, r1
 8006170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006174:	0cdb      	lsrs	r3, r3, #19
 8006176:	04db      	lsls	r3, r3, #19
 8006178:	6113      	str	r3, [r2, #16]
 800617a:	e04e      	b.n	800621a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	0151      	lsls	r1, r2, #5
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	440a      	add	r2, r1
 8006192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006196:	0cdb      	lsrs	r3, r3, #19
 8006198:	04db      	lsls	r3, r3, #19
 800619a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	0151      	lsls	r1, r2, #5
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	440a      	add	r2, r1
 80061b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	695a      	ldr	r2, [r3, #20]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d903      	bls.n	80061d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800620a:	6939      	ldr	r1, [r7, #16]
 800620c:	0148      	lsls	r0, r1, #5
 800620e:	6979      	ldr	r1, [r7, #20]
 8006210:	4401      	add	r1, r0
 8006212:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006216:	4313      	orrs	r3, r2
 8006218:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d11e      	bne.n	800625e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006234:	461a      	mov	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	440a      	add	r2, r1
 8006252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006256:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	e092      	b.n	8006384 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	440a      	add	r2, r1
 8006274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006278:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800627c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d07e      	beq.n	8006384 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	2101      	movs	r1, #1
 8006298:	fa01 f303 	lsl.w	r3, r1, r3
 800629c:	6979      	ldr	r1, [r7, #20]
 800629e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062a2:	4313      	orrs	r3, r2
 80062a4:	634b      	str	r3, [r1, #52]	; 0x34
 80062a6:	e06d      	b.n	8006384 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c2:	0cdb      	lsrs	r3, r3, #19
 80062c4:	04db      	lsls	r3, r3, #19
 80062c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	0151      	lsls	r1, r2, #5
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	440a      	add	r2, r1
 80062de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062ea:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800631a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006328:	691a      	ldr	r2, [r3, #16]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006332:	6939      	ldr	r1, [r7, #16]
 8006334:	0148      	lsls	r0, r1, #5
 8006336:	6979      	ldr	r1, [r7, #20]
 8006338:	4401      	add	r1, r0
 800633a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800633e:	4313      	orrs	r3, r2
 8006340:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006342:	79fb      	ldrb	r3, [r7, #7]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d10d      	bne.n	8006364 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d009      	beq.n	8006364 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	68d9      	ldr	r1, [r3, #12]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006360:	460a      	mov	r2, r1
 8006362:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	440a      	add	r2, r1
 800637a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006382:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006392:	b480      	push	{r7}
 8006394:	b089      	sub	sp, #36	; 0x24
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	4611      	mov	r1, r2
 800639e:	461a      	mov	r2, r3
 80063a0:	460b      	mov	r3, r1
 80063a2:	71fb      	strb	r3, [r7, #7]
 80063a4:	4613      	mov	r3, r2
 80063a6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d123      	bne.n	8006400 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063b8:	88bb      	ldrh	r3, [r7, #4]
 80063ba:	3303      	adds	r3, #3
 80063bc:	089b      	lsrs	r3, r3, #2
 80063be:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063c0:	2300      	movs	r3, #0
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	e018      	b.n	80063f8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	031a      	lsls	r2, r3, #12
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d2:	461a      	mov	r2, r3
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	3301      	adds	r3, #1
 80063de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	3301      	adds	r3, #1
 80063e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	3301      	adds	r3, #1
 80063ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3301      	adds	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	3301      	adds	r3, #1
 80063f6:	61bb      	str	r3, [r7, #24]
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d3e2      	bcc.n	80063c6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3724      	adds	r7, #36	; 0x24
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800640e:	b480      	push	{r7}
 8006410:	b08b      	sub	sp, #44	; 0x2c
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	4613      	mov	r3, r2
 800641a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	089b      	lsrs	r3, r3, #2
 8006428:	b29b      	uxth	r3, r3
 800642a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006434:	2300      	movs	r3, #0
 8006436:	623b      	str	r3, [r7, #32]
 8006438:	e014      	b.n	8006464 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	601a      	str	r2, [r3, #0]
    pDest++;
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	3301      	adds	r3, #1
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	3301      	adds	r3, #1
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	3301      	adds	r3, #1
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	3301      	adds	r3, #1
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	3301      	adds	r3, #1
 8006462:	623b      	str	r3, [r7, #32]
 8006464:	6a3a      	ldr	r2, [r7, #32]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	429a      	cmp	r2, r3
 800646a:	d3e6      	bcc.n	800643a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800646c:	8bfb      	ldrh	r3, [r7, #30]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d01e      	beq.n	80064b0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647c:	461a      	mov	r2, r3
 800647e:	f107 0310 	add.w	r3, r7, #16
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	fa22 f303 	lsr.w	r3, r2, r3
 8006492:	b2da      	uxtb	r2, r3
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	701a      	strb	r2, [r3, #0]
      i++;
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	3301      	adds	r3, #1
 800649c:	623b      	str	r3, [r7, #32]
      pDest++;
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	3301      	adds	r3, #1
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064a4:	8bfb      	ldrh	r3, [r7, #30]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064aa:	8bfb      	ldrh	r3, [r7, #30]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1ea      	bne.n	8006486 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	372c      	adds	r7, #44	; 0x2c
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064be:	b480      	push	{r7}
 80064c0:	b085      	sub	sp, #20
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d12c      	bne.n	8006534 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	db12      	blt.n	8006512 <USB_EPSetStall+0x54>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00f      	beq.n	8006512 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	440a      	add	r2, r1
 8006508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006510:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	0151      	lsls	r1, r2, #5
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	440a      	add	r2, r1
 8006528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	e02b      	b.n	800658c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	db12      	blt.n	800656c <USB_EPSetStall+0xae>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00f      	beq.n	800656c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	440a      	add	r2, r1
 8006562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006566:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800656a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	0151      	lsls	r1, r2, #5
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	440a      	add	r2, r1
 8006582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800658a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	785b      	ldrb	r3, [r3, #1]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d128      	bne.n	8006608 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	0151      	lsls	r1, r2, #5
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	440a      	add	r2, r1
 80065cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	78db      	ldrb	r3, [r3, #3]
 80065da:	2b03      	cmp	r3, #3
 80065dc:	d003      	beq.n	80065e6 <USB_EPClearStall+0x4c>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	78db      	ldrb	r3, [r3, #3]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d138      	bne.n	8006658 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e027      	b.n	8006658 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	0151      	lsls	r1, r2, #5
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	440a      	add	r2, r1
 800661e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006622:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006626:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	78db      	ldrb	r3, [r3, #3]
 800662c:	2b03      	cmp	r3, #3
 800662e:	d003      	beq.n	8006638 <USB_EPClearStall+0x9e>
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	78db      	ldrb	r3, [r3, #3]
 8006634:	2b02      	cmp	r3, #2
 8006636:	d10f      	bne.n	8006658 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006656:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	460b      	mov	r3, r1
 8006670:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006684:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006688:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800669a:	68f9      	ldr	r1, [r7, #12]
 800669c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066a0:	4313      	orrs	r3, r2
 80066a2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066cc:	f023 0303 	bic.w	r3, r3, #3
 80066d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e0:	f023 0302 	bic.w	r3, r3, #2
 80066e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006722:	f043 0302 	orr.w	r3, r3, #2
 8006726:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4013      	ands	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800674e:	68fb      	ldr	r3, [r7, #12]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	4013      	ands	r3, r2
 800677e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	0c1b      	lsrs	r3, r3, #16
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	4013      	ands	r3, r2
 80067b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	b29b      	uxth	r3, r3
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067d4:	78fb      	ldrb	r3, [r7, #3]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	4013      	ands	r3, r2
 80067f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067f2:	68bb      	ldr	r3, [r7, #8]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006822:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	fa22 f303 	lsr.w	r3, r2, r3
 8006830:	01db      	lsls	r3, r3, #7
 8006832:	b2db      	uxtb	r3, r3
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4313      	orrs	r3, r2
 8006838:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	4413      	add	r3, r2
 8006842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4013      	ands	r3, r2
 800684c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800684e:	68bb      	ldr	r3, [r7, #8]
}
 8006850:	4618      	mov	r0, r3
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	f003 0301 	and.w	r3, r3, #1
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006892:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006896:	f023 0307 	bic.w	r3, r3, #7
 800689a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	460b      	mov	r3, r1
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	333c      	adds	r3, #60	; 0x3c
 80068d6:	3304      	adds	r3, #4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4a26      	ldr	r2, [pc, #152]	; (8006978 <USB_EP0_OutStart+0xb8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d90a      	bls.n	80068fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068f4:	d101      	bne.n	80068fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e037      	b.n	800696a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006900:	461a      	mov	r2, r3
 8006902:	2300      	movs	r3, #0
 8006904:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006914:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006918:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006928:	f043 0318 	orr.w	r3, r3, #24
 800692c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006940:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006942:	7afb      	ldrb	r3, [r7, #11]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d10f      	bne.n	8006968 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	461a      	mov	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006962:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006966:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	4f54300a 	.word	0x4f54300a

0800697c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3301      	adds	r3, #1
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	4a13      	ldr	r2, [pc, #76]	; (80069dc <USB_CoreReset+0x60>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d901      	bls.n	8006998 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e01a      	b.n	80069ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	daf3      	bge.n	8006988 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	f043 0201 	orr.w	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	4a09      	ldr	r2, [pc, #36]	; (80069dc <USB_CoreReset+0x60>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d901      	bls.n	80069c0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e006      	b.n	80069ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d0f1      	beq.n	80069b0 <USB_CoreReset+0x34>

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	00030d40 	.word	0x00030d40

080069e0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80069ec:	2010      	movs	r0, #16
 80069ee:	f001 fef7 	bl	80087e0 <USBD_static_malloc>
 80069f2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d105      	bne.n	8006a06 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a02:	2302      	movs	r3, #2
 8006a04:	e01b      	b.n	8006a3e <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	7c1b      	ldrb	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2207      	movs	r2, #7
 8006a1a:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006a1c:	e002      	b.n	8006a24 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	220a      	movs	r2, #10
 8006a22:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006a24:	2308      	movs	r3, #8
 8006a26:	2203      	movs	r2, #3
 8006a28:	2181      	movs	r1, #129	; 0x81
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 fdc7 	bl	80085be <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006a52:	2181      	movs	r1, #129	; 0x81
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 fdd8 	bl	800860a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d009      	beq.n	8006a84 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 fec0 	bl	80087fc <USBD_static_free>
    pdev->pClassData = NULL;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aa0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e0e8      	b.n	8006c86 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d046      	beq.n	8006b4e <USBD_HID_Setup+0xbe>
 8006ac0:	2b20      	cmp	r3, #32
 8006ac2:	f040 80d8 	bne.w	8006c76 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	785b      	ldrb	r3, [r3, #1]
 8006aca:	3b02      	subs	r3, #2
 8006acc:	2b09      	cmp	r3, #9
 8006ace:	d836      	bhi.n	8006b3e <USBD_HID_Setup+0xae>
 8006ad0:	a201      	add	r2, pc, #4	; (adr r2, 8006ad8 <USBD_HID_Setup+0x48>)
 8006ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad6:	bf00      	nop
 8006ad8:	08006b2f 	.word	0x08006b2f
 8006adc:	08006b0f 	.word	0x08006b0f
 8006ae0:	08006b3f 	.word	0x08006b3f
 8006ae4:	08006b3f 	.word	0x08006b3f
 8006ae8:	08006b3f 	.word	0x08006b3f
 8006aec:	08006b3f 	.word	0x08006b3f
 8006af0:	08006b3f 	.word	0x08006b3f
 8006af4:	08006b3f 	.word	0x08006b3f
 8006af8:	08006b1d 	.word	0x08006b1d
 8006afc:	08006b01 	.word	0x08006b01
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	885b      	ldrh	r3, [r3, #2]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	601a      	str	r2, [r3, #0]
          break;
 8006b0c:	e01e      	b.n	8006b4c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 f9fa 	bl	8007f0e <USBD_CtlSendData>
          break;
 8006b1a:	e017      	b.n	8006b4c <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	885b      	ldrh	r3, [r3, #2]
 8006b20:	0a1b      	lsrs	r3, r3, #8
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	605a      	str	r2, [r3, #4]
          break;
 8006b2c:	e00e      	b.n	8006b4c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3304      	adds	r3, #4
 8006b32:	2201      	movs	r2, #1
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 f9e9 	bl	8007f0e <USBD_CtlSendData>
          break;
 8006b3c:	e006      	b.n	8006b4c <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 f973 	bl	8007e2c <USBD_CtlError>
          ret = USBD_FAIL;
 8006b46:	2303      	movs	r3, #3
 8006b48:	75fb      	strb	r3, [r7, #23]
          break;
 8006b4a:	bf00      	nop
      }
      break;
 8006b4c:	e09a      	b.n	8006c84 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	785b      	ldrb	r3, [r3, #1]
 8006b52:	2b0b      	cmp	r3, #11
 8006b54:	f200 8086 	bhi.w	8006c64 <USBD_HID_Setup+0x1d4>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <USBD_HID_Setup+0xd0>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b91 	.word	0x08006b91
 8006b64:	08006c73 	.word	0x08006c73
 8006b68:	08006c65 	.word	0x08006c65
 8006b6c:	08006c65 	.word	0x08006c65
 8006b70:	08006c65 	.word	0x08006c65
 8006b74:	08006c65 	.word	0x08006c65
 8006b78:	08006bbb 	.word	0x08006bbb
 8006b7c:	08006c65 	.word	0x08006c65
 8006b80:	08006c65 	.word	0x08006c65
 8006b84:	08006c65 	.word	0x08006c65
 8006b88:	08006c13 	.word	0x08006c13
 8006b8c:	08006c3d 	.word	0x08006c3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d107      	bne.n	8006bac <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006b9c:	f107 030a 	add.w	r3, r7, #10
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f9b2 	bl	8007f0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006baa:	e063      	b.n	8006c74 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 f93c 	bl	8007e2c <USBD_CtlError>
            ret = USBD_FAIL;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	75fb      	strb	r3, [r7, #23]
          break;
 8006bb8:	e05c      	b.n	8006c74 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	885b      	ldrh	r3, [r3, #2]
 8006bbe:	0a1b      	lsrs	r3, r3, #8
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b22      	cmp	r3, #34	; 0x22
 8006bc4:	d108      	bne.n	8006bd8 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	88db      	ldrh	r3, [r3, #6]
 8006bca:	2b2d      	cmp	r3, #45	; 0x2d
 8006bcc:	bf28      	it	cs
 8006bce:	232d      	movcs	r3, #45	; 0x2d
 8006bd0:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006bd2:	4b2f      	ldr	r3, [pc, #188]	; (8006c90 <USBD_HID_Setup+0x200>)
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	e015      	b.n	8006c04 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	885b      	ldrh	r3, [r3, #2]
 8006bdc:	0a1b      	lsrs	r3, r3, #8
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2b21      	cmp	r3, #33	; 0x21
 8006be2:	d108      	bne.n	8006bf6 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8006be4:	4b2b      	ldr	r3, [pc, #172]	; (8006c94 <USBD_HID_Setup+0x204>)
 8006be6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	88db      	ldrh	r3, [r3, #6]
 8006bec:	2b09      	cmp	r3, #9
 8006bee:	bf28      	it	cs
 8006bf0:	2309      	movcs	r3, #9
 8006bf2:	82bb      	strh	r3, [r7, #20]
 8006bf4:	e006      	b.n	8006c04 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f917 	bl	8007e2c <USBD_CtlError>
            ret = USBD_FAIL;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	75fb      	strb	r3, [r7, #23]
            break;
 8006c02:	e037      	b.n	8006c74 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c04:	8abb      	ldrh	r3, [r7, #20]
 8006c06:	461a      	mov	r2, r3
 8006c08:	6939      	ldr	r1, [r7, #16]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 f97f 	bl	8007f0e <USBD_CtlSendData>
          break;
 8006c10:	e030      	b.n	8006c74 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d107      	bne.n	8006c2e <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3308      	adds	r3, #8
 8006c22:	2201      	movs	r2, #1
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 f971 	bl	8007f0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c2c:	e022      	b.n	8006c74 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 f8fb 	bl	8007e2c <USBD_CtlError>
            ret = USBD_FAIL;
 8006c36:	2303      	movs	r3, #3
 8006c38:	75fb      	strb	r3, [r7, #23]
          break;
 8006c3a:	e01b      	b.n	8006c74 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d106      	bne.n	8006c56 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	885b      	ldrh	r3, [r3, #2]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	461a      	mov	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c54:	e00e      	b.n	8006c74 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 f8e7 	bl	8007e2c <USBD_CtlError>
            ret = USBD_FAIL;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	75fb      	strb	r3, [r7, #23]
          break;
 8006c62:	e007      	b.n	8006c74 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 f8e0 	bl	8007e2c <USBD_CtlError>
          ret = USBD_FAIL;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	75fb      	strb	r3, [r7, #23]
          break;
 8006c70:	e000      	b.n	8006c74 <USBD_HID_Setup+0x1e4>
          break;
 8006c72:	bf00      	nop
      }
      break;
 8006c74:	e006      	b.n	8006c84 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 f8d7 	bl	8007e2c <USBD_CtlError>
      ret = USBD_FAIL;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	75fb      	strb	r3, [r7, #23]
      break;
 8006c82:	bf00      	nop
  }

  return (uint8_t)ret;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	200000d0 	.word	0x200000d0
 8006c94:	200000b8 	.word	0x200000b8

08006c98 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2222      	movs	r2, #34	; 0x22
 8006ca4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8006ca6:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	2000004c 	.word	0x2000004c

08006cb8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2222      	movs	r2, #34	; 0x22
 8006cc4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8006cc6:	4b03      	ldr	r3, [pc, #12]	; (8006cd4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	20000070 	.word	0x20000070

08006cd8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2222      	movs	r2, #34	; 0x22
 8006ce4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8006ce6:	4b03      	ldr	r3, [pc, #12]	; (8006cf4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	20000094 	.word	0x20000094

08006cf8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	220a      	movs	r2, #10
 8006d28:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006d2a:	4b03      	ldr	r3, [pc, #12]	; (8006d38 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	200000c4 	.word	0x200000c4

08006d3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e01f      	b.n	8006d94 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	79fa      	ldrb	r2, [r7, #7]
 8006d86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f001 fbb1 	bl	80084f0 <USBD_LL_Init>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e016      	b.n	8006de2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	f107 020e 	add.w	r2, r7, #14
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4798      	blx	r3
 8006dd8:	4602      	mov	r2, r0
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fbc8 	bl	8008588 <USBD_LL_Start>
 8006df8:	4603      	mov	r3, r0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e24:	2303      	movs	r3, #3
 8006e26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d009      	beq.n	8006e46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	78fa      	ldrb	r2, [r7, #3]
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d007      	beq.n	8006e76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	78fa      	ldrb	r2, [r7, #3]
 8006e70:	4611      	mov	r1, r2
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
  }

  return USBD_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 ff90 	bl	8007db8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eb4:	f003 031f 	and.w	r3, r3, #31
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d01a      	beq.n	8006ef2 <USBD_LL_SetupStage+0x72>
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d822      	bhi.n	8006f06 <USBD_LL_SetupStage+0x86>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <USBD_LL_SetupStage+0x4a>
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d00a      	beq.n	8006ede <USBD_LL_SetupStage+0x5e>
 8006ec8:	e01d      	b.n	8006f06 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa62 	bl	800739c <USBD_StdDevReq>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73fb      	strb	r3, [r7, #15]
      break;
 8006edc:	e020      	b.n	8006f20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fac6 	bl	8007478 <USBD_StdItfReq>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef0:	e016      	b.n	8006f20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fb05 	bl	800750a <USBD_StdEPReq>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]
      break;
 8006f04:	e00c      	b.n	8006f20 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 fb97 	bl	8008648 <USBD_LL_StallEP>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f1e:	bf00      	nop
  }

  return ret;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b086      	sub	sp, #24
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	460b      	mov	r3, r1
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f38:	7afb      	ldrb	r3, [r7, #11]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d138      	bne.n	8006fb0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d14a      	bne.n	8006fe6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d913      	bls.n	8006f84 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	1ad2      	subs	r2, r2, r3
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	4293      	cmp	r3, r2
 8006f74:	bf28      	it	cs
 8006f76:	4613      	movcs	r3, r2
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 fff2 	bl	8007f66 <USBD_CtlContinueRx>
 8006f82:	e030      	b.n	8006fe6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d10b      	bne.n	8006fa8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d005      	beq.n	8006fa8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 ffed 	bl	8007f88 <USBD_CtlSendStatus>
 8006fae:	e01a      	b.n	8006fe6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d114      	bne.n	8006fe6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00e      	beq.n	8006fe6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	7afa      	ldrb	r2, [r7, #11]
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	4798      	blx	r3
 8006fd8:	4603      	mov	r3, r0
 8006fda:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	e000      	b.n	8006fe8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ffe:	7afb      	ldrb	r3, [r7, #11]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d16b      	bne.n	80070dc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3314      	adds	r3, #20
 8007008:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007010:	2b02      	cmp	r3, #2
 8007012:	d156      	bne.n	80070c2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	429a      	cmp	r2, r3
 800701e:	d914      	bls.n	800704a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	1ad2      	subs	r2, r2, r3
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	461a      	mov	r2, r3
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 ff84 	bl	8007f44 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800703c:	2300      	movs	r3, #0
 800703e:	2200      	movs	r2, #0
 8007040:	2100      	movs	r1, #0
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f001 fbaa 	bl	800879c <USBD_LL_PrepareReceive>
 8007048:	e03b      	b.n	80070c2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	429a      	cmp	r2, r3
 8007054:	d11c      	bne.n	8007090 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800705e:	429a      	cmp	r2, r3
 8007060:	d316      	bcc.n	8007090 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800706c:	429a      	cmp	r2, r3
 800706e:	d20f      	bcs.n	8007090 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007070:	2200      	movs	r2, #0
 8007072:	2100      	movs	r1, #0
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 ff65 	bl	8007f44 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007082:	2300      	movs	r3, #0
 8007084:	2200      	movs	r2, #0
 8007086:	2100      	movs	r1, #0
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f001 fb87 	bl	800879c <USBD_LL_PrepareReceive>
 800708e:	e018      	b.n	80070c2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b03      	cmp	r3, #3
 800709a:	d10b      	bne.n	80070b4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070b4:	2180      	movs	r1, #128	; 0x80
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f001 fac6 	bl	8008648 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 ff76 	bl	8007fae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d122      	bne.n	8007112 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff fe98 	bl	8006e02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070da:	e01a      	b.n	8007112 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d114      	bne.n	8007112 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00e      	beq.n	8007112 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	7afa      	ldrb	r2, [r7, #11]
 80070fe:	4611      	mov	r1, r2
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	4798      	blx	r3
 8007104:	4603      	mov	r3, r0
 8007106:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	e000      	b.n	8007114 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800714c:	2303      	movs	r3, #3
 800714e:	e02f      	b.n	80071b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00f      	beq.n	800717a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d009      	beq.n	800717a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6852      	ldr	r2, [r2, #4]
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	4611      	mov	r1, r2
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800717a:	2340      	movs	r3, #64	; 0x40
 800717c:	2200      	movs	r2, #0
 800717e:	2100      	movs	r1, #0
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 fa1c 	bl	80085be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2240      	movs	r2, #64	; 0x40
 8007192:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007196:	2340      	movs	r3, #64	; 0x40
 8007198:	2200      	movs	r2, #0
 800719a:	2180      	movs	r1, #128	; 0x80
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 fa0e 	bl	80085be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2240      	movs	r2, #64	; 0x40
 80071ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	460b      	mov	r3, r1
 80071c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	78fa      	ldrb	r2, [r7, #3]
 80071c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2204      	movs	r2, #4
 80071f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b04      	cmp	r3, #4
 8007216:	d106      	bne.n	8007226 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800721e:	b2da      	uxtb	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007246:	2303      	movs	r3, #3
 8007248:	e012      	b.n	8007270 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b03      	cmp	r3, #3
 8007254:	d10b      	bne.n	800726e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d005      	beq.n	800726e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800728e:	2303      	movs	r3, #3
 8007290:	e014      	b.n	80072bc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b03      	cmp	r3, #3
 800729c:	d10d      	bne.n	80072ba <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d007      	beq.n	80072ba <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	78fa      	ldrb	r2, [r7, #3]
 80072b4:	4611      	mov	r1, r2
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80072da:	2303      	movs	r3, #3
 80072dc:	e014      	b.n	8007308 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d10d      	bne.n	8007306 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d007      	beq.n	8007306 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	78fa      	ldrb	r2, [r7, #3]
 8007300:	4611      	mov	r1, r2
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733c:	2b00      	cmp	r3, #0
 800733e:	d009      	beq.n	8007354 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6852      	ldr	r2, [r2, #4]
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	4611      	mov	r1, r2
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	4798      	blx	r3
  }

  return USBD_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800735e:	b480      	push	{r7}
 8007360:	b087      	sub	sp, #28
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	3301      	adds	r3, #1
 8007374:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800737c:	8a3b      	ldrh	r3, [r7, #16]
 800737e:	021b      	lsls	r3, r3, #8
 8007380:	b21a      	sxth	r2, r3
 8007382:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007386:	4313      	orrs	r3, r2
 8007388:	b21b      	sxth	r3, r3
 800738a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800738c:	89fb      	ldrh	r3, [r7, #14]
}
 800738e:	4618      	mov	r0, r3
 8007390:	371c      	adds	r7, #28
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
	...

0800739c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073b2:	2b40      	cmp	r3, #64	; 0x40
 80073b4:	d005      	beq.n	80073c2 <USBD_StdDevReq+0x26>
 80073b6:	2b40      	cmp	r3, #64	; 0x40
 80073b8:	d853      	bhi.n	8007462 <USBD_StdDevReq+0xc6>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00b      	beq.n	80073d6 <USBD_StdDevReq+0x3a>
 80073be:	2b20      	cmp	r3, #32
 80073c0:	d14f      	bne.n	8007462 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]
      break;
 80073d4:	e04a      	b.n	800746c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	2b09      	cmp	r3, #9
 80073dc:	d83b      	bhi.n	8007456 <USBD_StdDevReq+0xba>
 80073de:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <USBD_StdDevReq+0x48>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	08007439 	.word	0x08007439
 80073e8:	0800744d 	.word	0x0800744d
 80073ec:	08007457 	.word	0x08007457
 80073f0:	08007443 	.word	0x08007443
 80073f4:	08007457 	.word	0x08007457
 80073f8:	08007417 	.word	0x08007417
 80073fc:	0800740d 	.word	0x0800740d
 8007400:	08007457 	.word	0x08007457
 8007404:	0800742f 	.word	0x0800742f
 8007408:	08007421 	.word	0x08007421
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f9de 	bl	80077d0 <USBD_GetDescriptor>
          break;
 8007414:	e024      	b.n	8007460 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fb43 	bl	8007aa4 <USBD_SetAddress>
          break;
 800741e:	e01f      	b.n	8007460 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fb82 	bl	8007b2c <USBD_SetConfig>
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]
          break;
 800742c:	e018      	b.n	8007460 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fc21 	bl	8007c78 <USBD_GetConfig>
          break;
 8007436:	e013      	b.n	8007460 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fc52 	bl	8007ce4 <USBD_GetStatus>
          break;
 8007440:	e00e      	b.n	8007460 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fc81 	bl	8007d4c <USBD_SetFeature>
          break;
 800744a:	e009      	b.n	8007460 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fc90 	bl	8007d74 <USBD_ClrFeature>
          break;
 8007454:	e004      	b.n	8007460 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fce7 	bl	8007e2c <USBD_CtlError>
          break;
 800745e:	bf00      	nop
      }
      break;
 8007460:	e004      	b.n	800746c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fce1 	bl	8007e2c <USBD_CtlError>
      break;
 800746a:	bf00      	nop
  }

  return ret;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop

08007478 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d005      	beq.n	800749e <USBD_StdItfReq+0x26>
 8007492:	2b40      	cmp	r3, #64	; 0x40
 8007494:	d82f      	bhi.n	80074f6 <USBD_StdItfReq+0x7e>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <USBD_StdItfReq+0x26>
 800749a:	2b20      	cmp	r3, #32
 800749c:	d12b      	bne.n	80074f6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	3b01      	subs	r3, #1
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d81d      	bhi.n	80074e8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	889b      	ldrh	r3, [r3, #4]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d813      	bhi.n	80074de <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	4798      	blx	r3
 80074c4:	4603      	mov	r3, r0
 80074c6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	88db      	ldrh	r3, [r3, #6]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d110      	bne.n	80074f2 <USBD_StdItfReq+0x7a>
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10d      	bne.n	80074f2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fd56 	bl	8007f88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80074dc:	e009      	b.n	80074f2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fca3 	bl	8007e2c <USBD_CtlError>
          break;
 80074e6:	e004      	b.n	80074f2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fc9e 	bl	8007e2c <USBD_CtlError>
          break;
 80074f0:	e000      	b.n	80074f4 <USBD_StdItfReq+0x7c>
          break;
 80074f2:	bf00      	nop
      }
      break;
 80074f4:	e004      	b.n	8007500 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fc97 	bl	8007e2c <USBD_CtlError>
      break;
 80074fe:	bf00      	nop
  }

  return ret;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	889b      	ldrh	r3, [r3, #4]
 800751c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007526:	2b40      	cmp	r3, #64	; 0x40
 8007528:	d007      	beq.n	800753a <USBD_StdEPReq+0x30>
 800752a:	2b40      	cmp	r3, #64	; 0x40
 800752c:	f200 8145 	bhi.w	80077ba <USBD_StdEPReq+0x2b0>
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00c      	beq.n	800754e <USBD_StdEPReq+0x44>
 8007534:	2b20      	cmp	r3, #32
 8007536:	f040 8140 	bne.w	80077ba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	4798      	blx	r3
 8007548:	4603      	mov	r3, r0
 800754a:	73fb      	strb	r3, [r7, #15]
      break;
 800754c:	e13a      	b.n	80077c4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	785b      	ldrb	r3, [r3, #1]
 8007552:	2b03      	cmp	r3, #3
 8007554:	d007      	beq.n	8007566 <USBD_StdEPReq+0x5c>
 8007556:	2b03      	cmp	r3, #3
 8007558:	f300 8129 	bgt.w	80077ae <USBD_StdEPReq+0x2a4>
 800755c:	2b00      	cmp	r3, #0
 800755e:	d07f      	beq.n	8007660 <USBD_StdEPReq+0x156>
 8007560:	2b01      	cmp	r3, #1
 8007562:	d03c      	beq.n	80075de <USBD_StdEPReq+0xd4>
 8007564:	e123      	b.n	80077ae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d002      	beq.n	8007578 <USBD_StdEPReq+0x6e>
 8007572:	2b03      	cmp	r3, #3
 8007574:	d016      	beq.n	80075a4 <USBD_StdEPReq+0x9a>
 8007576:	e02c      	b.n	80075d2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00d      	beq.n	800759a <USBD_StdEPReq+0x90>
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	2b80      	cmp	r3, #128	; 0x80
 8007582:	d00a      	beq.n	800759a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 f85d 	bl	8008648 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800758e:	2180      	movs	r1, #128	; 0x80
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 f859 	bl	8008648 <USBD_LL_StallEP>
 8007596:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007598:	e020      	b.n	80075dc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fc45 	bl	8007e2c <USBD_CtlError>
              break;
 80075a2:	e01b      	b.n	80075dc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	885b      	ldrh	r3, [r3, #2]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10e      	bne.n	80075ca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00b      	beq.n	80075ca <USBD_StdEPReq+0xc0>
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	2b80      	cmp	r3, #128	; 0x80
 80075b6:	d008      	beq.n	80075ca <USBD_StdEPReq+0xc0>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	88db      	ldrh	r3, [r3, #6]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d104      	bne.n	80075ca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 f83f 	bl	8008648 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fcdc 	bl	8007f88 <USBD_CtlSendStatus>

              break;
 80075d0:	e004      	b.n	80075dc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fc29 	bl	8007e2c <USBD_CtlError>
              break;
 80075da:	bf00      	nop
          }
          break;
 80075dc:	e0ec      	b.n	80077b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d002      	beq.n	80075f0 <USBD_StdEPReq+0xe6>
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d016      	beq.n	800761c <USBD_StdEPReq+0x112>
 80075ee:	e030      	b.n	8007652 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00d      	beq.n	8007612 <USBD_StdEPReq+0x108>
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	2b80      	cmp	r3, #128	; 0x80
 80075fa:	d00a      	beq.n	8007612 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 f821 	bl	8008648 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007606:	2180      	movs	r1, #128	; 0x80
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 f81d 	bl	8008648 <USBD_LL_StallEP>
 800760e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007610:	e025      	b.n	800765e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fc09 	bl	8007e2c <USBD_CtlError>
              break;
 800761a:	e020      	b.n	800765e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	885b      	ldrh	r3, [r3, #2]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d11b      	bne.n	800765c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 f827 	bl	8008686 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fca5 	bl	8007f88 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	4798      	blx	r3
 800764c:	4603      	mov	r3, r0
 800764e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007650:	e004      	b.n	800765c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fbe9 	bl	8007e2c <USBD_CtlError>
              break;
 800765a:	e000      	b.n	800765e <USBD_StdEPReq+0x154>
              break;
 800765c:	bf00      	nop
          }
          break;
 800765e:	e0ab      	b.n	80077b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d002      	beq.n	8007672 <USBD_StdEPReq+0x168>
 800766c:	2b03      	cmp	r3, #3
 800766e:	d032      	beq.n	80076d6 <USBD_StdEPReq+0x1cc>
 8007670:	e097      	b.n	80077a2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d007      	beq.n	8007688 <USBD_StdEPReq+0x17e>
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	2b80      	cmp	r3, #128	; 0x80
 800767c:	d004      	beq.n	8007688 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fbd3 	bl	8007e2c <USBD_CtlError>
                break;
 8007686:	e091      	b.n	80077ac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800768c:	2b00      	cmp	r3, #0
 800768e:	da0b      	bge.n	80076a8 <USBD_StdEPReq+0x19e>
 8007690:	7bbb      	ldrb	r3, [r7, #14]
 8007692:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007696:	4613      	mov	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	3310      	adds	r3, #16
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	4413      	add	r3, r2
 80076a4:	3304      	adds	r3, #4
 80076a6:	e00b      	b.n	80076c0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
 80076aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	4413      	add	r3, r2
 80076be:	3304      	adds	r3, #4
 80076c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2200      	movs	r2, #0
 80076c6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2202      	movs	r2, #2
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fc1d 	bl	8007f0e <USBD_CtlSendData>
              break;
 80076d4:	e06a      	b.n	80077ac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80076d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	da11      	bge.n	8007702 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	f003 020f 	and.w	r2, r3, #15
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	440b      	add	r3, r1
 80076f0:	3324      	adds	r3, #36	; 0x24
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d117      	bne.n	8007728 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fb96 	bl	8007e2c <USBD_CtlError>
                  break;
 8007700:	e054      	b.n	80077ac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	f003 020f 	and.w	r2, r3, #15
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d104      	bne.n	8007728 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fb83 	bl	8007e2c <USBD_CtlError>
                  break;
 8007726:	e041      	b.n	80077ac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800772c:	2b00      	cmp	r3, #0
 800772e:	da0b      	bge.n	8007748 <USBD_StdEPReq+0x23e>
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	3310      	adds	r3, #16
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	4413      	add	r3, r2
 8007744:	3304      	adds	r3, #4
 8007746:	e00b      	b.n	8007760 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	3304      	adds	r3, #4
 8007760:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007762:	7bbb      	ldrb	r3, [r7, #14]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <USBD_StdEPReq+0x264>
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	2b80      	cmp	r3, #128	; 0x80
 800776c:	d103      	bne.n	8007776 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	e00e      	b.n	8007794 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 ffa2 	bl	80086c4 <USBD_LL_IsStallEP>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2201      	movs	r2, #1
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	e002      	b.n	8007794 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2200      	movs	r2, #0
 8007792:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2202      	movs	r2, #2
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fbb7 	bl	8007f0e <USBD_CtlSendData>
              break;
 80077a0:	e004      	b.n	80077ac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fb41 	bl	8007e2c <USBD_CtlError>
              break;
 80077aa:	bf00      	nop
          }
          break;
 80077ac:	e004      	b.n	80077b8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fb3b 	bl	8007e2c <USBD_CtlError>
          break;
 80077b6:	bf00      	nop
      }
      break;
 80077b8:	e004      	b.n	80077c4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fb35 	bl	8007e2c <USBD_CtlError>
      break;
 80077c2:	bf00      	nop
  }

  return ret;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	885b      	ldrh	r3, [r3, #2]
 80077ea:	0a1b      	lsrs	r3, r3, #8
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	3b01      	subs	r3, #1
 80077f0:	2b06      	cmp	r3, #6
 80077f2:	f200 8128 	bhi.w	8007a46 <USBD_GetDescriptor+0x276>
 80077f6:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <USBD_GetDescriptor+0x2c>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	08007819 	.word	0x08007819
 8007800:	08007831 	.word	0x08007831
 8007804:	08007871 	.word	0x08007871
 8007808:	08007a47 	.word	0x08007a47
 800780c:	08007a47 	.word	0x08007a47
 8007810:	080079e7 	.word	0x080079e7
 8007814:	08007a13 	.word	0x08007a13
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7c12      	ldrb	r2, [r2, #16]
 8007824:	f107 0108 	add.w	r1, r7, #8
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
      break;
 800782e:	e112      	b.n	8007a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	7c1b      	ldrb	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10d      	bne.n	8007854 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007840:	f107 0208 	add.w	r2, r7, #8
 8007844:	4610      	mov	r0, r2
 8007846:	4798      	blx	r3
 8007848:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3301      	adds	r3, #1
 800784e:	2202      	movs	r2, #2
 8007850:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007852:	e100      	b.n	8007a56 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	f107 0208 	add.w	r2, r7, #8
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3301      	adds	r3, #1
 800786a:	2202      	movs	r2, #2
 800786c:	701a      	strb	r2, [r3, #0]
      break;
 800786e:	e0f2      	b.n	8007a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	885b      	ldrh	r3, [r3, #2]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b05      	cmp	r3, #5
 8007878:	f200 80ac 	bhi.w	80079d4 <USBD_GetDescriptor+0x204>
 800787c:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <USBD_GetDescriptor+0xb4>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	0800789d 	.word	0x0800789d
 8007888:	080078d1 	.word	0x080078d1
 800788c:	08007905 	.word	0x08007905
 8007890:	08007939 	.word	0x08007939
 8007894:	0800796d 	.word	0x0800796d
 8007898:	080079a1 	.word	0x080079a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	7c12      	ldrb	r2, [r2, #16]
 80078b4:	f107 0108 	add.w	r1, r7, #8
 80078b8:	4610      	mov	r0, r2
 80078ba:	4798      	blx	r3
 80078bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078be:	e091      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fab2 	bl	8007e2c <USBD_CtlError>
            err++;
 80078c8:	7afb      	ldrb	r3, [r7, #11]
 80078ca:	3301      	adds	r3, #1
 80078cc:	72fb      	strb	r3, [r7, #11]
          break;
 80078ce:	e089      	b.n	80079e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00b      	beq.n	80078f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	7c12      	ldrb	r2, [r2, #16]
 80078e8:	f107 0108 	add.w	r1, r7, #8
 80078ec:	4610      	mov	r0, r2
 80078ee:	4798      	blx	r3
 80078f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f2:	e077      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa98 	bl	8007e2c <USBD_CtlError>
            err++;
 80078fc:	7afb      	ldrb	r3, [r7, #11]
 80078fe:	3301      	adds	r3, #1
 8007900:	72fb      	strb	r3, [r7, #11]
          break;
 8007902:	e06f      	b.n	80079e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	7c12      	ldrb	r2, [r2, #16]
 800791c:	f107 0108 	add.w	r1, r7, #8
 8007920:	4610      	mov	r0, r2
 8007922:	4798      	blx	r3
 8007924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007926:	e05d      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa7e 	bl	8007e2c <USBD_CtlError>
            err++;
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	3301      	adds	r3, #1
 8007934:	72fb      	strb	r3, [r7, #11]
          break;
 8007936:	e055      	b.n	80079e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	7c12      	ldrb	r2, [r2, #16]
 8007950:	f107 0108 	add.w	r1, r7, #8
 8007954:	4610      	mov	r0, r2
 8007956:	4798      	blx	r3
 8007958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800795a:	e043      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fa64 	bl	8007e2c <USBD_CtlError>
            err++;
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	3301      	adds	r3, #1
 8007968:	72fb      	strb	r3, [r7, #11]
          break;
 800796a:	e03b      	b.n	80079e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00b      	beq.n	8007990 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	7c12      	ldrb	r2, [r2, #16]
 8007984:	f107 0108 	add.w	r1, r7, #8
 8007988:	4610      	mov	r0, r2
 800798a:	4798      	blx	r3
 800798c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800798e:	e029      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fa4a 	bl	8007e2c <USBD_CtlError>
            err++;
 8007998:	7afb      	ldrb	r3, [r7, #11]
 800799a:	3301      	adds	r3, #1
 800799c:	72fb      	strb	r3, [r7, #11]
          break;
 800799e:	e021      	b.n	80079e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	7c12      	ldrb	r2, [r2, #16]
 80079b8:	f107 0108 	add.w	r1, r7, #8
 80079bc:	4610      	mov	r0, r2
 80079be:	4798      	blx	r3
 80079c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c2:	e00f      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fa30 	bl	8007e2c <USBD_CtlError>
            err++;
 80079cc:	7afb      	ldrb	r3, [r7, #11]
 80079ce:	3301      	adds	r3, #1
 80079d0:	72fb      	strb	r3, [r7, #11]
          break;
 80079d2:	e007      	b.n	80079e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fa28 	bl	8007e2c <USBD_CtlError>
          err++;
 80079dc:	7afb      	ldrb	r3, [r7, #11]
 80079de:	3301      	adds	r3, #1
 80079e0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80079e2:	bf00      	nop
      }
      break;
 80079e4:	e037      	b.n	8007a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7c1b      	ldrb	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d109      	bne.n	8007a02 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f6:	f107 0208 	add.w	r2, r7, #8
 80079fa:	4610      	mov	r0, r2
 80079fc:	4798      	blx	r3
 80079fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a00:	e029      	b.n	8007a56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fa11 	bl	8007e2c <USBD_CtlError>
        err++;
 8007a0a:	7afb      	ldrb	r3, [r7, #11]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a10:	e021      	b.n	8007a56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	7c1b      	ldrb	r3, [r3, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10d      	bne.n	8007a36 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	f107 0208 	add.w	r2, r7, #8
 8007a26:	4610      	mov	r0, r2
 8007a28:	4798      	blx	r3
 8007a2a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	2207      	movs	r2, #7
 8007a32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a34:	e00f      	b.n	8007a56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f9f7 	bl	8007e2c <USBD_CtlError>
        err++;
 8007a3e:	7afb      	ldrb	r3, [r7, #11]
 8007a40:	3301      	adds	r3, #1
 8007a42:	72fb      	strb	r3, [r7, #11]
      break;
 8007a44:	e007      	b.n	8007a56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f9ef 	bl	8007e2c <USBD_CtlError>
      err++;
 8007a4e:	7afb      	ldrb	r3, [r7, #11]
 8007a50:	3301      	adds	r3, #1
 8007a52:	72fb      	strb	r3, [r7, #11]
      break;
 8007a54:	bf00      	nop
  }

  if (err != 0U)
 8007a56:	7afb      	ldrb	r3, [r7, #11]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d11e      	bne.n	8007a9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	88db      	ldrh	r3, [r3, #6]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d016      	beq.n	8007a92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a64:	893b      	ldrh	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00e      	beq.n	8007a88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	88da      	ldrh	r2, [r3, #6]
 8007a6e:	893b      	ldrh	r3, [r7, #8]
 8007a70:	4293      	cmp	r3, r2
 8007a72:	bf28      	it	cs
 8007a74:	4613      	movcs	r3, r2
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a7a:	893b      	ldrh	r3, [r7, #8]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	68f9      	ldr	r1, [r7, #12]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fa44 	bl	8007f0e <USBD_CtlSendData>
 8007a86:	e009      	b.n	8007a9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f9ce 	bl	8007e2c <USBD_CtlError>
 8007a90:	e004      	b.n	8007a9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa78 	bl	8007f88 <USBD_CtlSendStatus>
 8007a98:	e000      	b.n	8007a9c <USBD_GetDescriptor+0x2cc>
    return;
 8007a9a:	bf00      	nop
  }
}
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop

08007aa4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	889b      	ldrh	r3, [r3, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d131      	bne.n	8007b1a <USBD_SetAddress+0x76>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	88db      	ldrh	r3, [r3, #6]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d12d      	bne.n	8007b1a <USBD_SetAddress+0x76>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	885b      	ldrh	r3, [r3, #2]
 8007ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ac4:	d829      	bhi.n	8007b1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	885b      	ldrh	r3, [r3, #2]
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ad0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d104      	bne.n	8007ae8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f9a3 	bl	8007e2c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae6:	e01d      	b.n	8007b24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	7bfa      	ldrb	r2, [r7, #15]
 8007aec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fe11 	bl	800871c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fa44 	bl	8007f88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0e:	e009      	b.n	8007b24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b18:	e004      	b.n	8007b24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f985 	bl	8007e2c <USBD_CtlError>
  }
}
 8007b22:	bf00      	nop
 8007b24:	bf00      	nop
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	885b      	ldrh	r3, [r3, #2]
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	4b4c      	ldr	r3, [pc, #304]	; (8007c74 <USBD_SetConfig+0x148>)
 8007b42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b44:	4b4b      	ldr	r3, [pc, #300]	; (8007c74 <USBD_SetConfig+0x148>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d905      	bls.n	8007b58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f96c 	bl	8007e2c <USBD_CtlError>
    return USBD_FAIL;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e088      	b.n	8007c6a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d002      	beq.n	8007b6a <USBD_SetConfig+0x3e>
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d025      	beq.n	8007bb4 <USBD_SetConfig+0x88>
 8007b68:	e071      	b.n	8007c4e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b6a:	4b42      	ldr	r3, [pc, #264]	; (8007c74 <USBD_SetConfig+0x148>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d01c      	beq.n	8007bac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007b72:	4b40      	ldr	r3, [pc, #256]	; (8007c74 <USBD_SetConfig+0x148>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b7c:	4b3d      	ldr	r3, [pc, #244]	; (8007c74 <USBD_SetConfig+0x148>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff f948 	bl	8006e18 <USBD_SetClassConfig>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f949 	bl	8007e2c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b9a:	e065      	b.n	8007c68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f9f3 	bl	8007f88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007baa:	e05d      	b.n	8007c68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f9eb 	bl	8007f88 <USBD_CtlSendStatus>
      break;
 8007bb2:	e059      	b.n	8007c68 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007bb4:	4b2f      	ldr	r3, [pc, #188]	; (8007c74 <USBD_SetConfig+0x148>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d112      	bne.n	8007be2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007bc4:	4b2b      	ldr	r3, [pc, #172]	; (8007c74 <USBD_SetConfig+0x148>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bce:	4b29      	ldr	r3, [pc, #164]	; (8007c74 <USBD_SetConfig+0x148>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff f93b 	bl	8006e50 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f9d4 	bl	8007f88 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007be0:	e042      	b.n	8007c68 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007be2:	4b24      	ldr	r3, [pc, #144]	; (8007c74 <USBD_SetConfig+0x148>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d02a      	beq.n	8007c46 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff f929 	bl	8006e50 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007bfe:	4b1d      	ldr	r3, [pc, #116]	; (8007c74 <USBD_SetConfig+0x148>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c08:	4b1a      	ldr	r3, [pc, #104]	; (8007c74 <USBD_SetConfig+0x148>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff f902 	bl	8006e18 <USBD_SetClassConfig>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00f      	beq.n	8007c3e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f903 	bl	8007e2c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff f90e 	bl	8006e50 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2202      	movs	r2, #2
 8007c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c3c:	e014      	b.n	8007c68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f9a2 	bl	8007f88 <USBD_CtlSendStatus>
      break;
 8007c44:	e010      	b.n	8007c68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f99e 	bl	8007f88 <USBD_CtlSendStatus>
      break;
 8007c4c:	e00c      	b.n	8007c68 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f8eb 	bl	8007e2c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c56:	4b07      	ldr	r3, [pc, #28]	; (8007c74 <USBD_SetConfig+0x148>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff f8f7 	bl	8006e50 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c62:	2303      	movs	r3, #3
 8007c64:	73fb      	strb	r3, [r7, #15]
      break;
 8007c66:	bf00      	nop
  }

  return ret;
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	200006c4 	.word	0x200006c4

08007c78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	88db      	ldrh	r3, [r3, #6]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d004      	beq.n	8007c94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f8cd 	bl	8007e2c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c92:	e023      	b.n	8007cdc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	dc02      	bgt.n	8007ca6 <USBD_GetConfig+0x2e>
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	dc03      	bgt.n	8007cac <USBD_GetConfig+0x34>
 8007ca4:	e015      	b.n	8007cd2 <USBD_GetConfig+0x5a>
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d00b      	beq.n	8007cc2 <USBD_GetConfig+0x4a>
 8007caa:	e012      	b.n	8007cd2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f927 	bl	8007f0e <USBD_CtlSendData>
        break;
 8007cc0:	e00c      	b.n	8007cdc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f91f 	bl	8007f0e <USBD_CtlSendData>
        break;
 8007cd0:	e004      	b.n	8007cdc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f8a9 	bl	8007e2c <USBD_CtlError>
        break;
 8007cda:	bf00      	nop
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d81e      	bhi.n	8007d3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	88db      	ldrh	r3, [r3, #6]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d004      	beq.n	8007d0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f890 	bl	8007e2c <USBD_CtlError>
        break;
 8007d0c:	e01a      	b.n	8007d44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f043 0202 	orr.w	r2, r3, #2
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	330c      	adds	r3, #12
 8007d2e:	2202      	movs	r2, #2
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f8eb 	bl	8007f0e <USBD_CtlSendData>
      break;
 8007d38:	e004      	b.n	8007d44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f875 	bl	8007e2c <USBD_CtlError>
      break;
 8007d42:	bf00      	nop
  }
}
 8007d44:	bf00      	nop
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	885b      	ldrh	r3, [r3, #2]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d106      	bne.n	8007d6c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f90e 	bl	8007f88 <USBD_CtlSendStatus>
  }
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	3b01      	subs	r3, #1
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d80b      	bhi.n	8007da4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	885b      	ldrh	r3, [r3, #2]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d10c      	bne.n	8007dae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f8f3 	bl	8007f88 <USBD_CtlSendStatus>
      }
      break;
 8007da2:	e004      	b.n	8007dae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f840 	bl	8007e2c <USBD_CtlError>
      break;
 8007dac:	e000      	b.n	8007db0 <USBD_ClrFeature+0x3c>
      break;
 8007dae:	bf00      	nop
  }
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	781a      	ldrb	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	781a      	ldrb	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3301      	adds	r3, #1
 8007de0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f7ff fabb 	bl	800735e <SWAPBYTE>
 8007de8:	4603      	mov	r3, r0
 8007dea:	461a      	mov	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3301      	adds	r3, #1
 8007df4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f7ff faae 	bl	800735e <SWAPBYTE>
 8007e02:	4603      	mov	r3, r0
 8007e04:	461a      	mov	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff faa1 	bl	800735e <SWAPBYTE>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	461a      	mov	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	80da      	strh	r2, [r3, #6]
}
 8007e24:	bf00      	nop
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e36:	2180      	movs	r1, #128	; 0x80
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fc05 	bl	8008648 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e3e:	2100      	movs	r1, #0
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fc01 	bl	8008648 <USBD_LL_StallEP>
}
 8007e46:	bf00      	nop
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b086      	sub	sp, #24
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	60f8      	str	r0, [r7, #12]
 8007e56:	60b9      	str	r1, [r7, #8]
 8007e58:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d036      	beq.n	8007ed2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e68:	6938      	ldr	r0, [r7, #16]
 8007e6a:	f000 f836 	bl	8007eda <USBD_GetLen>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	3301      	adds	r3, #1
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	4413      	add	r3, r2
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	7812      	ldrb	r2, [r2, #0]
 8007e86:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e88:	7dfb      	ldrb	r3, [r7, #23]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	4413      	add	r3, r2
 8007e94:	2203      	movs	r2, #3
 8007e96:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e9e:	e013      	b.n	8007ec8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	7812      	ldrb	r2, [r2, #0]
 8007eaa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	613b      	str	r3, [r7, #16]
    idx++;
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e7      	bne.n	8007ea0 <USBD_GetString+0x52>
 8007ed0:	e000      	b.n	8007ed4 <USBD_GetString+0x86>
    return;
 8007ed2:	bf00      	nop
  }
}
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b085      	sub	sp, #20
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007eea:	e005      	b.n	8007ef8 <USBD_GetLen+0x1e>
  {
    len++;
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1f5      	bne.n	8007eec <USBD_GetLen+0x12>
  }

  return len;
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	60f8      	str	r0, [r7, #12]
 8007f16:	60b9      	str	r1, [r7, #8]
 8007f18:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	2100      	movs	r1, #0
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 fc10 	bl	800875a <USBD_LL_Transmit>

  return USBD_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	2100      	movs	r1, #0
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 fbff 	bl	800875a <USBD_LL_Transmit>

  return USBD_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	2100      	movs	r1, #0
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fc0f 	bl	800879c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2204      	movs	r2, #4
 8007f94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fbdb 	bl	800875a <USBD_LL_Transmit>

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2205      	movs	r2, #5
 8007fba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fbe9 	bl	800879c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	490e      	ldr	r1, [pc, #56]	; (8008014 <MX_USB_DEVICE_Init+0x40>)
 8007fdc:	480e      	ldr	r0, [pc, #56]	; (8008018 <MX_USB_DEVICE_Init+0x44>)
 8007fde:	f7fe fead 	bl	8006d3c <USBD_Init>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fe8:	f7f8 fdb4 	bl	8000b54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007fec:	490b      	ldr	r1, [pc, #44]	; (800801c <MX_USB_DEVICE_Init+0x48>)
 8007fee:	480a      	ldr	r0, [pc, #40]	; (8008018 <MX_USB_DEVICE_Init+0x44>)
 8007ff0:	f7fe fed4 	bl	8006d9c <USBD_RegisterClass>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007ffa:	f7f8 fdab 	bl	8000b54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ffe:	4806      	ldr	r0, [pc, #24]	; (8008018 <MX_USB_DEVICE_Init+0x44>)
 8008000:	f7fe fef3 	bl	8006dea <USBD_Start>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800800a:	f7f8 fda3 	bl	8000b54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800800e:	bf00      	nop
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20000100 	.word	0x20000100
 8008018:	200008f4 	.word	0x200008f4
 800801c:	20000014 	.word	0x20000014

08008020 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	6039      	str	r1, [r7, #0]
 800802a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2212      	movs	r2, #18
 8008030:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008032:	4b03      	ldr	r3, [pc, #12]	; (8008040 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008034:	4618      	mov	r0, r3
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	2000011c 	.word	0x2000011c

08008044 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	6039      	str	r1, [r7, #0]
 800804e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2204      	movs	r2, #4
 8008054:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008056:	4b03      	ldr	r3, [pc, #12]	; (8008064 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008058:	4618      	mov	r0, r3
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	20000130 	.word	0x20000130

08008068 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	6039      	str	r1, [r7, #0]
 8008072:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d105      	bne.n	8008086 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	4907      	ldr	r1, [pc, #28]	; (800809c <USBD_FS_ProductStrDescriptor+0x34>)
 800807e:	4808      	ldr	r0, [pc, #32]	; (80080a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008080:	f7ff fee5 	bl	8007e4e <USBD_GetString>
 8008084:	e004      	b.n	8008090 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	4904      	ldr	r1, [pc, #16]	; (800809c <USBD_FS_ProductStrDescriptor+0x34>)
 800808a:	4805      	ldr	r0, [pc, #20]	; (80080a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800808c:	f7ff fedf 	bl	8007e4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008090:	4b02      	ldr	r3, [pc, #8]	; (800809c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000bc4 	.word	0x20000bc4
 80080a0:	080088d8 	.word	0x080088d8

080080a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	4603      	mov	r3, r0
 80080ac:	6039      	str	r1, [r7, #0]
 80080ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	4904      	ldr	r1, [pc, #16]	; (80080c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080b4:	4804      	ldr	r0, [pc, #16]	; (80080c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080b6:	f7ff feca 	bl	8007e4e <USBD_GetString>
  return USBD_StrDesc;
 80080ba:	4b02      	ldr	r3, [pc, #8]	; (80080c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000bc4 	.word	0x20000bc4
 80080c8:	080088f0 	.word	0x080088f0

080080cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	6039      	str	r1, [r7, #0]
 80080d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	221a      	movs	r2, #26
 80080dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080de:	f000 f843 	bl	8008168 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080e2:	4b02      	ldr	r3, [pc, #8]	; (80080ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	20000134 	.word	0x20000134

080080f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	6039      	str	r1, [r7, #0]
 80080fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080fc:	79fb      	ldrb	r3, [r7, #7]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d105      	bne.n	800810e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	4907      	ldr	r1, [pc, #28]	; (8008124 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008106:	4808      	ldr	r0, [pc, #32]	; (8008128 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008108:	f7ff fea1 	bl	8007e4e <USBD_GetString>
 800810c:	e004      	b.n	8008118 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	4904      	ldr	r1, [pc, #16]	; (8008124 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008112:	4805      	ldr	r0, [pc, #20]	; (8008128 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008114:	f7ff fe9b 	bl	8007e4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008118:	4b02      	ldr	r3, [pc, #8]	; (8008124 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20000bc4 	.word	0x20000bc4
 8008128:	08008904 	.word	0x08008904

0800812c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	4603      	mov	r3, r0
 8008134:	6039      	str	r1, [r7, #0]
 8008136:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d105      	bne.n	800814a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	4907      	ldr	r1, [pc, #28]	; (8008160 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008142:	4808      	ldr	r0, [pc, #32]	; (8008164 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008144:	f7ff fe83 	bl	8007e4e <USBD_GetString>
 8008148:	e004      	b.n	8008154 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	4904      	ldr	r1, [pc, #16]	; (8008160 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800814e:	4805      	ldr	r0, [pc, #20]	; (8008164 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008150:	f7ff fe7d 	bl	8007e4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008154:	4b02      	ldr	r3, [pc, #8]	; (8008160 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	20000bc4 	.word	0x20000bc4
 8008164:	08008910 	.word	0x08008910

08008168 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800816e:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <Get_SerialNum+0x44>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008174:	4b0e      	ldr	r3, [pc, #56]	; (80081b0 <Get_SerialNum+0x48>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800817a:	4b0e      	ldr	r3, [pc, #56]	; (80081b4 <Get_SerialNum+0x4c>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4413      	add	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d009      	beq.n	80081a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800818e:	2208      	movs	r2, #8
 8008190:	4909      	ldr	r1, [pc, #36]	; (80081b8 <Get_SerialNum+0x50>)
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 f814 	bl	80081c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008198:	2204      	movs	r2, #4
 800819a:	4908      	ldr	r1, [pc, #32]	; (80081bc <Get_SerialNum+0x54>)
 800819c:	68b8      	ldr	r0, [r7, #8]
 800819e:	f000 f80f 	bl	80081c0 <IntToUnicode>
  }
}
 80081a2:	bf00      	nop
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	1fff7a10 	.word	0x1fff7a10
 80081b0:	1fff7a14 	.word	0x1fff7a14
 80081b4:	1fff7a18 	.word	0x1fff7a18
 80081b8:	20000136 	.word	0x20000136
 80081bc:	20000146 	.word	0x20000146

080081c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	4613      	mov	r3, r2
 80081cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081d2:	2300      	movs	r3, #0
 80081d4:	75fb      	strb	r3, [r7, #23]
 80081d6:	e027      	b.n	8008228 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	0f1b      	lsrs	r3, r3, #28
 80081dc:	2b09      	cmp	r3, #9
 80081de:	d80b      	bhi.n	80081f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	0f1b      	lsrs	r3, r3, #28
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	4619      	mov	r1, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	440b      	add	r3, r1
 80081f0:	3230      	adds	r2, #48	; 0x30
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	701a      	strb	r2, [r3, #0]
 80081f6:	e00a      	b.n	800820e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	0f1b      	lsrs	r3, r3, #28
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	4619      	mov	r1, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	440b      	add	r3, r1
 8008208:	3237      	adds	r2, #55	; 0x37
 800820a:	b2d2      	uxtb	r2, r2
 800820c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008214:	7dfb      	ldrb	r3, [r7, #23]
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	3301      	adds	r3, #1
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	4413      	add	r3, r2
 800821e:	2200      	movs	r2, #0
 8008220:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	3301      	adds	r3, #1
 8008226:	75fb      	strb	r3, [r7, #23]
 8008228:	7dfa      	ldrb	r2, [r7, #23]
 800822a:	79fb      	ldrb	r3, [r7, #7]
 800822c:	429a      	cmp	r2, r3
 800822e:	d3d3      	bcc.n	80081d8 <IntToUnicode+0x18>
  }
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	371c      	adds	r7, #28
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
	...

08008240 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08a      	sub	sp, #40	; 0x28
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008248:	f107 0314 	add.w	r3, r7, #20
 800824c:	2200      	movs	r2, #0
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	605a      	str	r2, [r3, #4]
 8008252:	609a      	str	r2, [r3, #8]
 8008254:	60da      	str	r2, [r3, #12]
 8008256:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008260:	d14b      	bne.n	80082fa <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008262:	2300      	movs	r3, #0
 8008264:	613b      	str	r3, [r7, #16]
 8008266:	4b27      	ldr	r3, [pc, #156]	; (8008304 <HAL_PCD_MspInit+0xc4>)
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	4a26      	ldr	r2, [pc, #152]	; (8008304 <HAL_PCD_MspInit+0xc4>)
 800826c:	f043 0301 	orr.w	r3, r3, #1
 8008270:	6313      	str	r3, [r2, #48]	; 0x30
 8008272:	4b24      	ldr	r3, [pc, #144]	; (8008304 <HAL_PCD_MspInit+0xc4>)
 8008274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	613b      	str	r3, [r7, #16]
 800827c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800827e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008284:	2302      	movs	r3, #2
 8008286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008288:	2300      	movs	r3, #0
 800828a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800828c:	2303      	movs	r3, #3
 800828e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008290:	230a      	movs	r3, #10
 8008292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008294:	f107 0314 	add.w	r3, r7, #20
 8008298:	4619      	mov	r1, r3
 800829a:	481b      	ldr	r0, [pc, #108]	; (8008308 <HAL_PCD_MspInit+0xc8>)
 800829c:	f7f9 ff66 	bl	800216c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80082a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082a6:	2302      	movs	r3, #2
 80082a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082aa:	2301      	movs	r3, #1
 80082ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082ae:	2303      	movs	r3, #3
 80082b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082b2:	230a      	movs	r3, #10
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082b6:	f107 0314 	add.w	r3, r7, #20
 80082ba:	4619      	mov	r1, r3
 80082bc:	4812      	ldr	r0, [pc, #72]	; (8008308 <HAL_PCD_MspInit+0xc8>)
 80082be:	f7f9 ff55 	bl	800216c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082c2:	4b10      	ldr	r3, [pc, #64]	; (8008304 <HAL_PCD_MspInit+0xc4>)
 80082c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c6:	4a0f      	ldr	r2, [pc, #60]	; (8008304 <HAL_PCD_MspInit+0xc4>)
 80082c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082cc:	6353      	str	r3, [r2, #52]	; 0x34
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	4b0c      	ldr	r3, [pc, #48]	; (8008304 <HAL_PCD_MspInit+0xc4>)
 80082d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d6:	4a0b      	ldr	r2, [pc, #44]	; (8008304 <HAL_PCD_MspInit+0xc4>)
 80082d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082dc:	6453      	str	r3, [r2, #68]	; 0x44
 80082de:	4b09      	ldr	r3, [pc, #36]	; (8008304 <HAL_PCD_MspInit+0xc4>)
 80082e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082ea:	2200      	movs	r2, #0
 80082ec:	2100      	movs	r1, #0
 80082ee:	2043      	movs	r0, #67	; 0x43
 80082f0:	f7f9 fb03 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082f4:	2043      	movs	r0, #67	; 0x43
 80082f6:	f7f9 fb1c 	bl	8001932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80082fa:	bf00      	nop
 80082fc:	3728      	adds	r7, #40	; 0x28
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	40023800 	.word	0x40023800
 8008308:	40020000 	.word	0x40020000

0800830c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f7fe fdac 	bl	8006e80 <USBD_LL_SetupStage>
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008342:	78fa      	ldrb	r2, [r7, #3]
 8008344:	6879      	ldr	r1, [r7, #4]
 8008346:	4613      	mov	r3, r2
 8008348:	00db      	lsls	r3, r3, #3
 800834a:	1a9b      	subs	r3, r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	440b      	add	r3, r1
 8008350:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	78fb      	ldrb	r3, [r7, #3]
 8008358:	4619      	mov	r1, r3
 800835a:	f7fe fde6 	bl	8006f2a <USBD_LL_DataOutStage>
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008378:	78fa      	ldrb	r2, [r7, #3]
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	4613      	mov	r3, r2
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	1a9b      	subs	r3, r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	440b      	add	r3, r1
 8008386:	3348      	adds	r3, #72	; 0x48
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	78fb      	ldrb	r3, [r7, #3]
 800838c:	4619      	mov	r1, r3
 800838e:	f7fe fe2f 	bl	8006ff0 <USBD_LL_DataInStage>
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fe ff43 	bl	8007234 <USBD_LL_SOF>
}
 80083ae:	bf00      	nop
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083be:	2301      	movs	r3, #1
 80083c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d102      	bne.n	80083d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]
 80083ce:	e008      	b.n	80083e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d102      	bne.n	80083de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80083d8:	2301      	movs	r3, #1
 80083da:	73fb      	strb	r3, [r7, #15]
 80083dc:	e001      	b.n	80083e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80083de:	f7f8 fbb9 	bl	8000b54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083e8:	7bfa      	ldrb	r2, [r7, #15]
 80083ea:	4611      	mov	r1, r2
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fe fee3 	bl	80071b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fe fe8f 	bl	800711c <USBD_LL_Reset>
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe fede 	bl	80071d8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	6812      	ldr	r2, [r2, #0]
 800842a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800842e:	f043 0301 	orr.w	r3, r3, #1
 8008432:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800843c:	4b04      	ldr	r3, [pc, #16]	; (8008450 <HAL_PCD_SuspendCallback+0x48>)
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	4a03      	ldr	r2, [pc, #12]	; (8008450 <HAL_PCD_SuspendCallback+0x48>)
 8008442:	f043 0306 	orr.w	r3, r3, #6
 8008446:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008448:	bf00      	nop
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	e000ed00 	.word	0xe000ed00

08008454 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008462:	4618      	mov	r0, r3
 8008464:	f7fe fece 	bl	8007204 <USBD_LL_Resume>
}
 8008468:	bf00      	nop
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	460b      	mov	r3, r1
 800847a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008482:	78fa      	ldrb	r2, [r7, #3]
 8008484:	4611      	mov	r1, r2
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe ff1c 	bl	80072c4 <USBD_LL_IsoOUTIncomplete>
}
 800848c:	bf00      	nop
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084a6:	78fa      	ldrb	r2, [r7, #3]
 80084a8:	4611      	mov	r1, r2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe fee4 	bl	8007278 <USBD_LL_IsoINIncomplete>
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe ff22 	bl	8007310 <USBD_LL_DevConnected>
}
 80084cc:	bf00      	nop
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fe ff1f 	bl	8007326 <USBD_LL_DevDisconnected>
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d13c      	bne.n	800857a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008500:	4a20      	ldr	r2, [pc, #128]	; (8008584 <USBD_LL_Init+0x94>)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a1e      	ldr	r2, [pc, #120]	; (8008584 <USBD_LL_Init+0x94>)
 800850c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008510:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <USBD_LL_Init+0x94>)
 8008512:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008516:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008518:	4b1a      	ldr	r3, [pc, #104]	; (8008584 <USBD_LL_Init+0x94>)
 800851a:	2204      	movs	r2, #4
 800851c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800851e:	4b19      	ldr	r3, [pc, #100]	; (8008584 <USBD_LL_Init+0x94>)
 8008520:	2202      	movs	r2, #2
 8008522:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008524:	4b17      	ldr	r3, [pc, #92]	; (8008584 <USBD_LL_Init+0x94>)
 8008526:	2200      	movs	r2, #0
 8008528:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800852a:	4b16      	ldr	r3, [pc, #88]	; (8008584 <USBD_LL_Init+0x94>)
 800852c:	2202      	movs	r2, #2
 800852e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008530:	4b14      	ldr	r3, [pc, #80]	; (8008584 <USBD_LL_Init+0x94>)
 8008532:	2200      	movs	r2, #0
 8008534:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008536:	4b13      	ldr	r3, [pc, #76]	; (8008584 <USBD_LL_Init+0x94>)
 8008538:	2200      	movs	r2, #0
 800853a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800853c:	4b11      	ldr	r3, [pc, #68]	; (8008584 <USBD_LL_Init+0x94>)
 800853e:	2200      	movs	r2, #0
 8008540:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008542:	4b10      	ldr	r3, [pc, #64]	; (8008584 <USBD_LL_Init+0x94>)
 8008544:	2200      	movs	r2, #0
 8008546:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008548:	4b0e      	ldr	r3, [pc, #56]	; (8008584 <USBD_LL_Init+0x94>)
 800854a:	2200      	movs	r2, #0
 800854c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800854e:	480d      	ldr	r0, [pc, #52]	; (8008584 <USBD_LL_Init+0x94>)
 8008550:	f7f9 ffc1 	bl	80024d6 <HAL_PCD_Init>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800855a:	f7f8 fafb 	bl	8000b54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800855e:	2180      	movs	r1, #128	; 0x80
 8008560:	4808      	ldr	r0, [pc, #32]	; (8008584 <USBD_LL_Init+0x94>)
 8008562:	f7fb f906 	bl	8003772 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008566:	2240      	movs	r2, #64	; 0x40
 8008568:	2100      	movs	r1, #0
 800856a:	4806      	ldr	r0, [pc, #24]	; (8008584 <USBD_LL_Init+0x94>)
 800856c:	f7fb f8ba 	bl	80036e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008570:	2280      	movs	r2, #128	; 0x80
 8008572:	2101      	movs	r1, #1
 8008574:	4803      	ldr	r0, [pc, #12]	; (8008584 <USBD_LL_Init+0x94>)
 8008576:	f7fb f8b5 	bl	80036e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20000dc4 	.word	0x20000dc4

08008588 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fa f8b6 	bl	8002710 <HAL_PCD_Start>
 80085a4:	4603      	mov	r3, r0
 80085a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f930 	bl	8008810 <USBD_Get_USB_Status>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	4608      	mov	r0, r1
 80085c8:	4611      	mov	r1, r2
 80085ca:	461a      	mov	r2, r3
 80085cc:	4603      	mov	r3, r0
 80085ce:	70fb      	strb	r3, [r7, #3]
 80085d0:	460b      	mov	r3, r1
 80085d2:	70bb      	strb	r3, [r7, #2]
 80085d4:	4613      	mov	r3, r2
 80085d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80085e6:	78bb      	ldrb	r3, [r7, #2]
 80085e8:	883a      	ldrh	r2, [r7, #0]
 80085ea:	78f9      	ldrb	r1, [r7, #3]
 80085ec:	f7fa fc9a 	bl	8002f24 <HAL_PCD_EP_Open>
 80085f0:	4603      	mov	r3, r0
 80085f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f90a 	bl	8008810 <USBD_Get_USB_Status>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008600:	7bbb      	ldrb	r3, [r7, #14]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	460b      	mov	r3, r1
 8008614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008624:	78fa      	ldrb	r2, [r7, #3]
 8008626:	4611      	mov	r1, r2
 8008628:	4618      	mov	r0, r3
 800862a:	f7fa fce3 	bl	8002ff4 <HAL_PCD_EP_Close>
 800862e:	4603      	mov	r3, r0
 8008630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	4618      	mov	r0, r3
 8008636:	f000 f8eb 	bl	8008810 <USBD_Get_USB_Status>
 800863a:	4603      	mov	r3, r0
 800863c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800863e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008662:	78fa      	ldrb	r2, [r7, #3]
 8008664:	4611      	mov	r1, r2
 8008666:	4618      	mov	r0, r3
 8008668:	f7fa fda3 	bl	80031b2 <HAL_PCD_EP_SetStall>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f8cc 	bl	8008810 <USBD_Get_USB_Status>
 8008678:	4603      	mov	r3, r0
 800867a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800867c:	7bbb      	ldrb	r3, [r7, #14]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	4611      	mov	r1, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fa fde8 	bl	800327a <HAL_PCD_EP_ClrStall>
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 f8ad 	bl	8008810 <USBD_Get_USB_Status>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	da0b      	bge.n	80086f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086e6:	68f9      	ldr	r1, [r7, #12]
 80086e8:	4613      	mov	r3, r2
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	1a9b      	subs	r3, r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	333e      	adds	r3, #62	; 0x3e
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	e00b      	b.n	8008710 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086fe:	68f9      	ldr	r1, [r7, #12]
 8008700:	4613      	mov	r3, r2
 8008702:	00db      	lsls	r3, r3, #3
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	440b      	add	r3, r1
 800870a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800870e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008736:	78fa      	ldrb	r2, [r7, #3]
 8008738:	4611      	mov	r1, r2
 800873a:	4618      	mov	r0, r3
 800873c:	f7fa fbcd 	bl	8002eda <HAL_PCD_SetAddress>
 8008740:	4603      	mov	r3, r0
 8008742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	4618      	mov	r0, r3
 8008748:	f000 f862 	bl	8008810 <USBD_Get_USB_Status>
 800874c:	4603      	mov	r3, r0
 800874e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008750:	7bbb      	ldrb	r3, [r7, #14]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b086      	sub	sp, #24
 800875e:	af00      	add	r7, sp, #0
 8008760:	60f8      	str	r0, [r7, #12]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	603b      	str	r3, [r7, #0]
 8008766:	460b      	mov	r3, r1
 8008768:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008778:	7af9      	ldrb	r1, [r7, #11]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	f7fa fcce 	bl	800311e <HAL_PCD_EP_Transmit>
 8008782:	4603      	mov	r3, r0
 8008784:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008786:	7dfb      	ldrb	r3, [r7, #23]
 8008788:	4618      	mov	r0, r3
 800878a:	f000 f841 	bl	8008810 <USBD_Get_USB_Status>
 800878e:	4603      	mov	r3, r0
 8008790:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008792:	7dbb      	ldrb	r3, [r7, #22]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	607a      	str	r2, [r7, #4]
 80087a6:	603b      	str	r3, [r7, #0]
 80087a8:	460b      	mov	r3, r1
 80087aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80087ba:	7af9      	ldrb	r1, [r7, #11]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	f7fa fc62 	bl	8003088 <HAL_PCD_EP_Receive>
 80087c4:	4603      	mov	r3, r0
 80087c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 f820 	bl	8008810 <USBD_Get_USB_Status>
 80087d0:	4603      	mov	r3, r0
 80087d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3718      	adds	r7, #24
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087e8:	4b03      	ldr	r3, [pc, #12]	; (80087f8 <USBD_static_malloc+0x18>)
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	200006c8 	.word	0x200006c8

080087fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]

}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	2b03      	cmp	r3, #3
 8008822:	d817      	bhi.n	8008854 <USBD_Get_USB_Status+0x44>
 8008824:	a201      	add	r2, pc, #4	; (adr r2, 800882c <USBD_Get_USB_Status+0x1c>)
 8008826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882a:	bf00      	nop
 800882c:	0800883d 	.word	0x0800883d
 8008830:	08008843 	.word	0x08008843
 8008834:	08008849 	.word	0x08008849
 8008838:	0800884f 	.word	0x0800884f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	73fb      	strb	r3, [r7, #15]
    break;
 8008840:	e00b      	b.n	800885a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008842:	2303      	movs	r3, #3
 8008844:	73fb      	strb	r3, [r7, #15]
    break;
 8008846:	e008      	b.n	800885a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008848:	2301      	movs	r3, #1
 800884a:	73fb      	strb	r3, [r7, #15]
    break;
 800884c:	e005      	b.n	800885a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800884e:	2303      	movs	r3, #3
 8008850:	73fb      	strb	r3, [r7, #15]
    break;
 8008852:	e002      	b.n	800885a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008854:	2303      	movs	r3, #3
 8008856:	73fb      	strb	r3, [r7, #15]
    break;
 8008858:	bf00      	nop
  }
  return usb_status;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <__libc_init_array>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	4d0d      	ldr	r5, [pc, #52]	; (80088a0 <__libc_init_array+0x38>)
 800886c:	4c0d      	ldr	r4, [pc, #52]	; (80088a4 <__libc_init_array+0x3c>)
 800886e:	1b64      	subs	r4, r4, r5
 8008870:	10a4      	asrs	r4, r4, #2
 8008872:	2600      	movs	r6, #0
 8008874:	42a6      	cmp	r6, r4
 8008876:	d109      	bne.n	800888c <__libc_init_array+0x24>
 8008878:	4d0b      	ldr	r5, [pc, #44]	; (80088a8 <__libc_init_array+0x40>)
 800887a:	4c0c      	ldr	r4, [pc, #48]	; (80088ac <__libc_init_array+0x44>)
 800887c:	f000 f820 	bl	80088c0 <_init>
 8008880:	1b64      	subs	r4, r4, r5
 8008882:	10a4      	asrs	r4, r4, #2
 8008884:	2600      	movs	r6, #0
 8008886:	42a6      	cmp	r6, r4
 8008888:	d105      	bne.n	8008896 <__libc_init_array+0x2e>
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008890:	4798      	blx	r3
 8008892:	3601      	adds	r6, #1
 8008894:	e7ee      	b.n	8008874 <__libc_init_array+0xc>
 8008896:	f855 3b04 	ldr.w	r3, [r5], #4
 800889a:	4798      	blx	r3
 800889c:	3601      	adds	r6, #1
 800889e:	e7f2      	b.n	8008886 <__libc_init_array+0x1e>
 80088a0:	08008948 	.word	0x08008948
 80088a4:	08008948 	.word	0x08008948
 80088a8:	08008948 	.word	0x08008948
 80088ac:	0800894c 	.word	0x0800894c

080088b0 <memset>:
 80088b0:	4402      	add	r2, r0
 80088b2:	4603      	mov	r3, r0
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d100      	bne.n	80088ba <memset+0xa>
 80088b8:	4770      	bx	lr
 80088ba:	f803 1b01 	strb.w	r1, [r3], #1
 80088be:	e7f9      	b.n	80088b4 <memset+0x4>

080088c0 <_init>:
 80088c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c2:	bf00      	nop
 80088c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c6:	bc08      	pop	{r3}
 80088c8:	469e      	mov	lr, r3
 80088ca:	4770      	bx	lr

080088cc <_fini>:
 80088cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ce:	bf00      	nop
 80088d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088d2:	bc08      	pop	{r3}
 80088d4:	469e      	mov	lr, r3
 80088d6:	4770      	bx	lr
