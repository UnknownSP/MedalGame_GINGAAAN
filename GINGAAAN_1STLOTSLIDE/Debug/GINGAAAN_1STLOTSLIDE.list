
GINGAAAN_1STLOTSLIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098b0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009a44  08009a44  00019a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aac  08009aac  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  08009aac  08009aac  00019aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ab4  08009ab4  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab4  08009ab4  00019ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ab8  08009ab8  00019ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08009abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010f4  20000178  08009c34  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000126c  08009c34  0002126c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e86a  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d9d  00000000  00000000  0003ea12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  000427b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  000436e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0c8  00000000  00000000  000444a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165b4  00000000  00000000  0005e570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a955  00000000  00000000  00074b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff479  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d0c  00000000  00000000  000ff4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000178 	.word	0x20000178
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08009a2c 	.word	0x08009a2c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000017c 	.word	0x2000017c
 80001d0:	08009a2c 	.word	0x08009a2c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <appInit>:
//static void CheckTouch(uint8_t* recvData, bool* setData);
//static void SetColorData(uint8_t* setArray, uint8_t setColorTouch[][3], uint8_t setColorBar[][3]);
static bool IO_Read(uint8_t sensor);

//初期化
int appInit(void){
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
		SliderBarLEDData[i][1] = 00;
		SliderBarLEDData[i][2] = 128;
	}
	D_Slider_SetThreshold(TouchThreshold);
	*/
	return 0;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <appTask>:

int appTask(void){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
	static int testCount1 = 0;
	static int testCount2 = 0;
	static int testCount3 = 0;
	static int testCount4 = 0;

	sndTime += G_System_counter - recent_System_counter;
 80004e2:	4ba1      	ldr	r3, [pc, #644]	; (8000768 <appTask+0x28c>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4ba1      	ldr	r3, [pc, #644]	; (800076c <appTask+0x290>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	1ad2      	subs	r2, r2, r3
 80004ec:	4ba0      	ldr	r3, [pc, #640]	; (8000770 <appTask+0x294>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4413      	add	r3, r2
 80004f2:	4a9f      	ldr	r2, [pc, #636]	; (8000770 <appTask+0x294>)
 80004f4:	6013      	str	r3, [r2, #0]
	rcvTime += G_System_counter - recent_System_counter;
 80004f6:	4b9c      	ldr	r3, [pc, #624]	; (8000768 <appTask+0x28c>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	4b9c      	ldr	r3, [pc, #624]	; (800076c <appTask+0x290>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	1ad2      	subs	r2, r2, r3
 8000500:	4b9c      	ldr	r3, [pc, #624]	; (8000774 <appTask+0x298>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4413      	add	r3, r2
 8000506:	4a9b      	ldr	r2, [pc, #620]	; (8000774 <appTask+0x298>)
 8000508:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_counter;
 800050a:	4b97      	ldr	r3, [pc, #604]	; (8000768 <appTask+0x28c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a97      	ldr	r2, [pc, #604]	; (800076c <appTask+0x290>)
 8000510:	6013      	str	r3, [r2, #0]

	//CAN送信タイミングなら送信
	if(sndTime >= CAN_SEND_INTERVAL){
 8000512:	4b97      	ldr	r3, [pc, #604]	; (8000770 <appTask+0x294>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b09      	cmp	r3, #9
 8000518:	d902      	bls.n	8000520 <appTask+0x44>

		sndTime = 0;
 800051a:	4b95      	ldr	r3, [pc, #596]	; (8000770 <appTask+0x294>)
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
	}

	static uint8_t sum = 0;
	if(rcvTime >= UART_RECEIVE_INTERVAL){
 8000520:	4b94      	ldr	r3, [pc, #592]	; (8000774 <appTask+0x298>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b13      	cmp	r3, #19
 8000526:	d964      	bls.n	80005f2 <appTask+0x116>
		sndData_UART[2] = testCount;
		sndData_UART[3] = 3;
		sndData_UART[4] = 225;
		*/
		static int sendLength = 10;
		sndData_UART[0] = 0xe0;//testCount1;
 8000528:	4b93      	ldr	r3, [pc, #588]	; (8000778 <appTask+0x29c>)
 800052a:	22e0      	movs	r2, #224	; 0xe0
 800052c:	701a      	strb	r2, [r3, #0]
		sndData_UART[1] = 0x01;//testCount1;//testCount2;
 800052e:	4b92      	ldr	r3, [pc, #584]	; (8000778 <appTask+0x29c>)
 8000530:	2201      	movs	r2, #1
 8000532:	705a      	strb	r2, [r3, #1]
		sndData_UART[2] = testCount;
 8000534:	4b91      	ldr	r3, [pc, #580]	; (800077c <appTask+0x2a0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b8f      	ldr	r3, [pc, #572]	; (8000778 <appTask+0x29c>)
 800053c:	709a      	strb	r2, [r3, #2]
		sndData_UART[3] = 5;
 800053e:	4b8e      	ldr	r3, [pc, #568]	; (8000778 <appTask+0x29c>)
 8000540:	2205      	movs	r2, #5
 8000542:	70da      	strb	r2, [r3, #3]
		sndData_UART[4] = 50;
 8000544:	4b8c      	ldr	r3, [pc, #560]	; (8000778 <appTask+0x29c>)
 8000546:	2232      	movs	r2, #50	; 0x32
 8000548:	711a      	strb	r2, [r3, #4]
		sndData_UART[5] = 50;
 800054a:	4b8b      	ldr	r3, [pc, #556]	; (8000778 <appTask+0x29c>)
 800054c:	2232      	movs	r2, #50	; 0x32
 800054e:	715a      	strb	r2, [r3, #5]
		sndData_UART[6] = 50;
 8000550:	4b89      	ldr	r3, [pc, #548]	; (8000778 <appTask+0x29c>)
 8000552:	2232      	movs	r2, #50	; 0x32
 8000554:	719a      	strb	r2, [r3, #6]
		sndData_UART[7] = 50;
 8000556:	4b88      	ldr	r3, [pc, #544]	; (8000778 <appTask+0x29c>)
 8000558:	2232      	movs	r2, #50	; 0x32
 800055a:	71da      	strb	r2, [r3, #7]
		sndData_UART[8] = 50;
 800055c:	4b86      	ldr	r3, [pc, #536]	; (8000778 <appTask+0x29c>)
 800055e:	2232      	movs	r2, #50	; 0x32
 8000560:	721a      	strb	r2, [r3, #8]
		sndData_UART[13] = 0;//testCount1;
		sndData_UART[14] = 0;//testCount2;
		sndData_UART[15] = 0;//testCount1;
		*/

		uint8_t dataSum = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	77fb      	strb	r3, [r7, #31]
		//dataSum += sndData_UART[1];
		for(int j=1; j<sendLength-1; j++){
 8000566:	2301      	movs	r3, #1
 8000568:	61bb      	str	r3, [r7, #24]
 800056a:	e00a      	b.n	8000582 <appTask+0xa6>
			dataSum += sndData_UART[j];
 800056c:	4a82      	ldr	r2, [pc, #520]	; (8000778 <appTask+0x29c>)
 800056e:	69bb      	ldr	r3, [r7, #24]
 8000570:	4413      	add	r3, r2
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b2da      	uxtb	r2, r3
 8000576:	7ffb      	ldrb	r3, [r7, #31]
 8000578:	4413      	add	r3, r2
 800057a:	77fb      	strb	r3, [r7, #31]
		for(int j=1; j<sendLength-1; j++){
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	3301      	adds	r3, #1
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	4b7f      	ldr	r3, [pc, #508]	; (8000780 <appTask+0x2a4>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3b01      	subs	r3, #1
 8000588:	69ba      	ldr	r2, [r7, #24]
 800058a:	429a      	cmp	r2, r3
 800058c:	dbee      	blt.n	800056c <appTask+0x90>
		}
		//dataSum += 2;

		//int checkSum = 256 - (int)dataSum;
		//sndData_UART[2/*sendLength-1*/] = (uint8_t)checkSum - 1;
		sndData_UART[sendLength-1] = (uint8_t)dataSum;
 800058e:	4b7c      	ldr	r3, [pc, #496]	; (8000780 <appTask+0x2a4>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	3b01      	subs	r3, #1
 8000594:	4978      	ldr	r1, [pc, #480]	; (8000778 <appTask+0x29c>)
 8000596:	7ffa      	ldrb	r2, [r7, #31]
 8000598:	54ca      	strb	r2, [r1, r3]

		//retSnd = D_Slider_Send(sndData_UART,sendLength);
		//retRcv = D_Slider_Receive(rcvData_UART,16);
		rcvTime = 0;
 800059a:	4b76      	ldr	r3, [pc, #472]	; (8000774 <appTask+0x298>)
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
		for(int i=0; i<5; i++){
			if(((data[8]>>i) & 1) == 1) SensorCountR[i]++;
		}
		*/

		testCount1++;
 80005a0:	4b78      	ldr	r3, [pc, #480]	; (8000784 <appTask+0x2a8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a77      	ldr	r2, [pc, #476]	; (8000784 <appTask+0x2a8>)
 80005a8:	6013      	str	r3, [r2, #0]
		if(testCount1 >= 256){
 80005aa:	4b76      	ldr	r3, [pc, #472]	; (8000784 <appTask+0x2a8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2bff      	cmp	r3, #255	; 0xff
 80005b0:	dd07      	ble.n	80005c2 <appTask+0xe6>
			testCount1 = 0;
 80005b2:	4b74      	ldr	r3, [pc, #464]	; (8000784 <appTask+0x2a8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
			testCount2++;
 80005b8:	4b73      	ldr	r3, [pc, #460]	; (8000788 <appTask+0x2ac>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a72      	ldr	r2, [pc, #456]	; (8000788 <appTask+0x2ac>)
 80005c0:	6013      	str	r3, [r2, #0]
		}
		if(testCount2 >= 256){
 80005c2:	4b71      	ldr	r3, [pc, #452]	; (8000788 <appTask+0x2ac>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2bff      	cmp	r3, #255	; 0xff
 80005c8:	dd07      	ble.n	80005da <appTask+0xfe>
			testCount2 = 0;
 80005ca:	4b6f      	ldr	r3, [pc, #444]	; (8000788 <appTask+0x2ac>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
			testCount3++;
 80005d0:	4b6e      	ldr	r3, [pc, #440]	; (800078c <appTask+0x2b0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a6d      	ldr	r2, [pc, #436]	; (800078c <appTask+0x2b0>)
 80005d8:	6013      	str	r3, [r2, #0]
		}
		if(testCount3 >= 256){
 80005da:	4b6c      	ldr	r3, [pc, #432]	; (800078c <appTask+0x2b0>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2bff      	cmp	r3, #255	; 0xff
 80005e0:	dd07      	ble.n	80005f2 <appTask+0x116>
			testCount3 = 0;
 80005e2:	4b6a      	ldr	r3, [pc, #424]	; (800078c <appTask+0x2b0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
			testCount4++;
 80005e8:	4b69      	ldr	r3, [pc, #420]	; (8000790 <appTask+0x2b4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a68      	ldr	r2, [pc, #416]	; (8000790 <appTask+0x2b4>)
 80005f0:	6013      	str	r3, [r2, #0]
		}
	}

	bool R = (testCount & 1) == 1;
 80005f2:	4b62      	ldr	r3, [pc, #392]	; (800077c <appTask+0x2a0>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	bf14      	ite	ne
 80005fe:	2301      	movne	r3, #1
 8000600:	2300      	moveq	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]
	bool G = ((testCount>>1) & 1) == 1;
 8000604:	4b5d      	ldr	r3, [pc, #372]	; (800077c <appTask+0x2a0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 0302 	and.w	r3, r3, #2
 800060c:	2b00      	cmp	r3, #0
 800060e:	bf14      	ite	ne
 8000610:	2301      	movne	r3, #1
 8000612:	2300      	moveq	r3, #0
 8000614:	73bb      	strb	r3, [r7, #14]
	bool B = ((testCount>>2) & 1) == 1;
 8000616:	4b59      	ldr	r3, [pc, #356]	; (800077c <appTask+0x2a0>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	2b00      	cmp	r3, #0
 8000620:	bf14      	ite	ne
 8000622:	2301      	movne	r3, #1
 8000624:	2300      	moveq	r3, #0
 8000626:	737b      	strb	r3, [r7, #13]
	for(int i=0; i<5; i++){
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	e044      	b.n	80006b8 <appTask+0x1dc>
		if (D_Slider_GetSensorData(0,i) != 0){
 800062e:	6979      	ldr	r1, [r7, #20]
 8000630:	2000      	movs	r0, #0
 8000632:	f001 fe77 	bl	8002324 <D_Slider_GetSensorData>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d019      	beq.n	8000670 <appTask+0x194>
			SliderLEDDataR[i][0] = true;
 800063c:	4955      	ldr	r1, [pc, #340]	; (8000794 <appTask+0x2b8>)
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	4613      	mov	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4413      	add	r3, r2
 8000646:	440b      	add	r3, r1
 8000648:	2201      	movs	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
			SliderLEDDataR[i][1] = true;
 800064c:	4951      	ldr	r1, [pc, #324]	; (8000794 <appTask+0x2b8>)
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	4613      	mov	r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	4413      	add	r3, r2
 8000656:	440b      	add	r3, r1
 8000658:	3301      	adds	r3, #1
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
			SliderLEDDataR[i][2] = true;
 800065e:	494d      	ldr	r1, [pc, #308]	; (8000794 <appTask+0x2b8>)
 8000660:	697a      	ldr	r2, [r7, #20]
 8000662:	4613      	mov	r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	4413      	add	r3, r2
 8000668:	440b      	add	r3, r1
 800066a:	3302      	adds	r3, #2
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
		}
		if (D_Slider_GetSensorData(1,i) != 0){
 8000670:	6979      	ldr	r1, [r7, #20]
 8000672:	2001      	movs	r0, #1
 8000674:	f001 fe56 	bl	8002324 <D_Slider_GetSensorData>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d019      	beq.n	80006b2 <appTask+0x1d6>
			SliderLEDDataL[i][0] = true;
 800067e:	4946      	ldr	r1, [pc, #280]	; (8000798 <appTask+0x2bc>)
 8000680:	697a      	ldr	r2, [r7, #20]
 8000682:	4613      	mov	r3, r2
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	440b      	add	r3, r1
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
			SliderLEDDataL[i][1] = true;
 800068e:	4942      	ldr	r1, [pc, #264]	; (8000798 <appTask+0x2bc>)
 8000690:	697a      	ldr	r2, [r7, #20]
 8000692:	4613      	mov	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4413      	add	r3, r2
 8000698:	440b      	add	r3, r1
 800069a:	3301      	adds	r3, #1
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
			SliderLEDDataL[i][2] = true;
 80006a0:	493d      	ldr	r1, [pc, #244]	; (8000798 <appTask+0x2bc>)
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	440b      	add	r3, r1
 80006ac:	3302      	adds	r3, #2
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<5; i++){
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	ddb7      	ble.n	800062e <appTask+0x152>
	//D_Slider_SetColorData(SliderLEDDataR, SliderLEDDataL);
	static bool _first = false;
	static bool _firstR = false;
	static bool _firstL = false;

	if(!_first){
 80006be:	4b37      	ldr	r3, [pc, #220]	; (800079c <appTask+0x2c0>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	f083 0301 	eor.w	r3, r3, #1
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00a      	beq.n	80006e2 <appTask+0x206>
		D_Slider_SetLightingR(SL_NORMAL_FLASH,0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2002      	movs	r0, #2
 80006d0:	f000 fd42 	bl	8001158 <D_Slider_SetLightingR>
		D_Slider_SetLightingL(SL_NORMAL_FLASH,0);
 80006d4:	2100      	movs	r1, #0
 80006d6:	2002      	movs	r0, #2
 80006d8:	f000 fd7e 	bl	80011d8 <D_Slider_SetLightingL>
		_first = true;
 80006dc:	4b2f      	ldr	r3, [pc, #188]	; (800079c <appTask+0x2c0>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
	}
	int pocketR = D_Slider_GetPocketR(false);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f001 fd58 	bl	8002198 <D_Slider_GetPocketR>
 80006e8:	60b8      	str	r0, [r7, #8]
	if(pocketR != -1){
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006f0:	d006      	beq.n	8000700 <appTask+0x224>
		D_Slider_SetLightingR(SL_POCKET_IN,pocketR);
 80006f2:	68b9      	ldr	r1, [r7, #8]
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 fd2f 	bl	8001158 <D_Slider_SetLightingR>
		D_Slider_GetPocketR(true);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f001 fd4c 	bl	8002198 <D_Slider_GetPocketR>
	}
	int pocketL = D_Slider_GetPocketL(false);
 8000700:	2000      	movs	r0, #0
 8000702:	f001 fd85 	bl	8002210 <D_Slider_GetPocketL>
 8000706:	6078      	str	r0, [r7, #4]
	if(pocketL != -1){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800070e:	d006      	beq.n	800071e <appTask+0x242>
		D_Slider_SetLightingL(SL_POCKET_IN,pocketL);
 8000710:	6879      	ldr	r1, [r7, #4]
 8000712:	2003      	movs	r0, #3
 8000714:	f000 fd60 	bl	80011d8 <D_Slider_SetLightingL>
		D_Slider_GetPocketL(true);
 8000718:	2001      	movs	r0, #1
 800071a:	f001 fd79 	bl	8002210 <D_Slider_GetPocketL>
		HAL_UART_Transmit(&huart1, (uint8_t*)controllerSendData, 4, 10);
	}
	*/

	//マイコンについてるボタンかスタートボタンが押されたらボール発射
	if(IO_READ_USERBUTTON() && _userButton){
 800071e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000722:	481f      	ldr	r0, [pc, #124]	; (80007a0 <appTask+0x2c4>)
 8000724:	f001 ffce 	bl	80026c4 <D_GPIO_Read>
 8000728:	4603      	mov	r3, r0
 800072a:	f083 0301 	eor.w	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d00b      	beq.n	800074c <appTask+0x270>
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <appTask+0x2c8>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d007      	beq.n	800074c <appTask+0x270>
		_userButton = false;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <appTask+0x2c8>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
		testCount++;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <appTask+0x2a0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <appTask+0x2a0>)
 800074a:	6013      	str	r3, [r2, #0]
		int checkSum = 256 - (int)dataSum;
		controllerSendData[100] = (uint8_t)checkSum;
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)controllerSendData, 101);
		*/
	}
	if(!IO_READ_USERBUTTON()){
 800074c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000750:	4813      	ldr	r0, [pc, #76]	; (80007a0 <appTask+0x2c4>)
 8000752:	f001 ffb7 	bl	80026c4 <D_GPIO_Read>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d002      	beq.n	8000762 <appTask+0x286>
		_userButton = true;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <appTask+0x2c8>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
		IO_RESET_USERLED();
	}
	*/
	//testMode---------------------------------------------------

	for(int i=0; i<16; i++){
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	e033      	b.n	80007d0 <appTask+0x2f4>
 8000768:	20000248 	.word	0x20000248
 800076c:	200001e4 	.word	0x200001e4
 8000770:	200001e8 	.word	0x200001e8
 8000774:	200001ec 	.word	0x200001ec
 8000778:	200001b4 	.word	0x200001b4
 800077c:	200001f0 	.word	0x200001f0
 8000780:	20000000 	.word	0x20000000
 8000784:	200001f4 	.word	0x200001f4
 8000788:	200001f8 	.word	0x200001f8
 800078c:	200001fc 	.word	0x200001fc
 8000790:	20000200 	.word	0x20000200
 8000794:	200001c4 	.word	0x200001c4
 8000798:	200001d4 	.word	0x200001d4
 800079c:	20000204 	.word	0x20000204
 80007a0:	40020800 	.word	0x40020800
 80007a4:	20000205 	.word	0x20000205
		if(rcvData_UART[i] != 0) rcvJudge[i] = rcvData_UART[i];
 80007a8:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <appTask+0x30c>)
 80007aa:	693b      	ldr	r3, [r7, #16]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d009      	beq.n	80007ca <appTask+0x2ee>
 80007b6:	4a0c      	ldr	r2, [pc, #48]	; (80007e8 <appTask+0x30c>)
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	4413      	add	r3, r2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <appTask+0x310>)
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<16; i++){
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	3301      	adds	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	2b0f      	cmp	r3, #15
 80007d4:	dde8      	ble.n	80007a8 <appTask+0x2cc>
	}

	//デバッグ用
	int16_t debug_bits = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	807b      	strh	r3, [r7, #2]
	debug_bits &= 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	807b      	strh	r3, [r7, #2]
	//D_Mess_printf("%08b\n", ownHold_Pocket);
	//D_Mess_printf("%08b\n", allHold_Pocket);
	//D_Mess_printf("processState: ,%2d\n", processState);
	//D_Mess_printf("PC: ,%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n",rcvData_UART[0],rcvData_UART[1],rcvData_UART[2],rcvData_UART[3],rcvData_UART[4],rcvData_UART[5],rcvData_UART[6],rcvData_UART[7]);

	return 0;
 80007de:	2300      	movs	r3, #0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000194 	.word	0x20000194
 80007ec:	20000208 	.word	0x20000208

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f6:	f001 ffc5 	bl	8002784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fa:	f000 f82d 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fe:	f000 f92f 	bl	8000a60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000802:	f000 f8e7 	bl	80009d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000806:	f000 f891 	bl	800092c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800080a:	f000 f8b9 	bl	8000980 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800080e:	f008 fc97 	bl	8009140 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 8000812:	f7ff fe5b 	bl	80004cc <appInit>
	  uint8_t modifiers;
	  uint8_t reserved;
	  uint8_t key[38];
  };
  struct keyboardHID_t keyboardHID;
  keyboardHID.modifiers = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	713b      	strb	r3, [r7, #4]
  keyboardHID.reserved = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	717b      	strb	r3, [r7, #5]
  for(int i = 0 ;i < 38; i++){
 800081e:	2300      	movs	r3, #0
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000822:	e007      	b.n	8000834 <main+0x44>
	  keyboardHID.key[i] = 0;
 8000824:	1dba      	adds	r2, r7, #6
 8000826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000828:	4413      	add	r3, r2
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ;i < 38; i++){
 800082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000830:	3301      	adds	r3, #1
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000836:	2b25      	cmp	r3, #37	; 0x25
 8000838:	ddf4      	ble.n	8000824 <main+0x34>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appTask();
 800083a:	f7ff fe4f 	bl	80004dc <appTask>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 0){
 800083e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000842:	4804      	ldr	r0, [pc, #16]	; (8000854 <main+0x64>)
 8000844:	f002 fecc 	bl	80035e0 <HAL_GPIO_ReadPin>
		  for(int i = 0 ;i < 38; i++){
			  keyboardHID.key[i] = 0;
		  }
	  }
	  */
	  D_Slider_SystickUpdate();
 8000848:	f000 fbe8 	bl	800101c <D_Slider_SystickUpdate>
	  //D_USBHID_SysticUpdate();
	  D_Mess_flush();
 800084c:	f001 ff50 	bl	80026f0 <D_Mess_flush>
	  appTask();
 8000850:	e7f3      	b.n	800083a <main+0x4a>
 8000852:	bf00      	nop
 8000854:	40020800 	.word	0x40020800

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f009 f8d8 	bl	8009a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a27      	ldr	r2, [pc, #156]	; (8000924 <SystemClock_Config+0xcc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008a4:	4a20      	ldr	r2, [pc, #128]	; (8000928 <SystemClock_Config+0xd0>)
 80008a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <SystemClock_Config+0xd0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008d0:	23c0      	movs	r3, #192	; 0xc0
 80008d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80008d4:	2306      	movs	r3, #6
 80008d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008d8:	2308      	movs	r3, #8
 80008da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 f819 	bl	8004918 <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008ec:	f000 f95e 	bl	8000bac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	230f      	movs	r3, #15
 80008f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	2302      	movs	r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2102      	movs	r1, #2
 800090c:	4618      	mov	r0, r3
 800090e:	f004 fa7b 	bl	8004e08 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000918:	f000 f948 	bl	8000bac <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3750      	adds	r7, #80	; 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <MX_USART1_UART_Init+0x50>)
 8000934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USART1_UART_Init+0x4c>)
 8000964:	f004 fc4c 	bl	8005200 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800096e:	f000 f91d 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200008fc 	.word	0x200008fc
 800097c:	40011000 	.word	0x40011000

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART2_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b8:	f004 fc22 	bl	8005200 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f8f3 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000940 	.word	0x20000940
 80009d0:	40004400 	.word	0x40004400

080009d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_DMA_Init+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <MX_DMA_Init+0x88>)
 80009e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_DMA_Init+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_DMA_Init+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <MX_DMA_Init+0x88>)
 8000a00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_DMA_Init+0x88>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2010      	movs	r0, #16
 8000a18:	f002 f825 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a1c:	2010      	movs	r0, #16
 8000a1e:	f002 f83e 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2011      	movs	r0, #17
 8000a28:	f002 f81d 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a2c:	2011      	movs	r0, #17
 8000a2e:	f002 f836 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	203a      	movs	r0, #58	; 0x3a
 8000a38:	f002 f815 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a3c:	203a      	movs	r0, #58	; 0x3a
 8000a3e:	f002 f82e 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2046      	movs	r0, #70	; 0x46
 8000a48:	f002 f80d 	bl	8002a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000a4c:	2046      	movs	r0, #70	; 0x46
 8000a4e:	f002 f826 	bl	8002a9e <HAL_NVIC_EnableIRQ>

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <MX_GPIO_Init+0xd0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a2c      	ldr	r2, [pc, #176]	; (8000b30 <MX_GPIO_Init+0xd0>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <MX_GPIO_Init+0xd0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <MX_GPIO_Init+0xd0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a25      	ldr	r2, [pc, #148]	; (8000b30 <MX_GPIO_Init+0xd0>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <MX_GPIO_Init+0xd0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_GPIO_Init+0xd0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <MX_GPIO_Init+0xd0>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_GPIO_Init+0xd0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_GPIO_Init+0xd0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <MX_GPIO_Init+0xd0>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_GPIO_Init+0xd0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2120      	movs	r1, #32
 8000aea:	4812      	ldr	r0, [pc, #72]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000aec:	f002 fd90 	bl	8003610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_GPIO_Init+0xd8>)
 8000b08:	f002 fbe6 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_GPIO_Init+0xd4>)
 8000b24:	f002 fbd8 	bl	80032d8 <HAL_GPIO_Init>

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40020800 	.word	0x40020800

08000b3c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_UART_TxCpltCallback+0x30>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d102      	bne.n	8000b54 <HAL_UART_TxCpltCallback+0x18>
	  D_Mess_TransitionCompletedCallBack();
 8000b4e:	f001 fe01 	bl	8002754 <D_Mess_TransitionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_TransitionCompletedCallBack();
  }
}
 8000b52:	e006      	b.n	8000b62 <HAL_UART_TxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <HAL_UART_TxCpltCallback+0x34>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_UART_TxCpltCallback+0x26>
	  D_Slider_TransitionCompletedCallBack();
 8000b5e:	f001 fd95 	bl	800268c <D_Slider_TransitionCompletedCallBack>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40011000 	.word	0x40011000

08000b74 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_UART_RxCpltCallback+0x30>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d102      	bne.n	8000b8c <HAL_UART_RxCpltCallback+0x18>
	  D_Mess_ReceptionCompletedCallBack();
 8000b86:	f001 fdf1 	bl	800276c <D_Mess_ReceptionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_ReceptionCompletedCallBack();
  }
}
 8000b8a:	e006      	b.n	8000b9a <HAL_UART_RxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <HAL_UART_RxCpltCallback+0x34>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d101      	bne.n	8000b9a <HAL_UART_RxCpltCallback+0x26>
	  D_Slider_ReceptionCompletedCallBack();
 8000b96:	f001 fd85 	bl	80026a4 <D_Slider_ReceptionCompletedCallBack>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40004400 	.word	0x40004400
 8000ba8:	40011000 	.word	0x40011000

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf6:	2007      	movs	r0, #7
 8000bf8:	f001 ff2a 	bl	8002a50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a97      	ldr	r2, [pc, #604]	; (8000e84 <HAL_UART_MspInit+0x27c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f040 8092 	bne.w	8000d50 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	4b95      	ldr	r3, [pc, #596]	; (8000e88 <HAL_UART_MspInit+0x280>)
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	4a94      	ldr	r2, [pc, #592]	; (8000e88 <HAL_UART_MspInit+0x280>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3c:	4b92      	ldr	r3, [pc, #584]	; (8000e88 <HAL_UART_MspInit+0x280>)
 8000c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	4b8e      	ldr	r3, [pc, #568]	; (8000e88 <HAL_UART_MspInit+0x280>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a8d      	ldr	r2, [pc, #564]	; (8000e88 <HAL_UART_MspInit+0x280>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
 8000c58:	4b8b      	ldr	r3, [pc, #556]	; (8000e88 <HAL_UART_MspInit+0x280>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c76:	2307      	movs	r3, #7
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4882      	ldr	r0, [pc, #520]	; (8000e8c <HAL_UART_MspInit+0x284>)
 8000c82:	f002 fb29 	bl	80032d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000c86:	4b82      	ldr	r3, [pc, #520]	; (8000e90 <HAL_UART_MspInit+0x288>)
 8000c88:	4a82      	ldr	r2, [pc, #520]	; (8000e94 <HAL_UART_MspInit+0x28c>)
 8000c8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000c8c:	4b80      	ldr	r3, [pc, #512]	; (8000e90 <HAL_UART_MspInit+0x288>)
 8000c8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c92:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c94:	4b7e      	ldr	r3, [pc, #504]	; (8000e90 <HAL_UART_MspInit+0x288>)
 8000c96:	2240      	movs	r2, #64	; 0x40
 8000c98:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9a:	4b7d      	ldr	r3, [pc, #500]	; (8000e90 <HAL_UART_MspInit+0x288>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca0:	4b7b      	ldr	r3, [pc, #492]	; (8000e90 <HAL_UART_MspInit+0x288>)
 8000ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ca8:	4b79      	ldr	r3, [pc, #484]	; (8000e90 <HAL_UART_MspInit+0x288>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cae:	4b78      	ldr	r3, [pc, #480]	; (8000e90 <HAL_UART_MspInit+0x288>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000cb4:	4b76      	ldr	r3, [pc, #472]	; (8000e90 <HAL_UART_MspInit+0x288>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cba:	4b75      	ldr	r3, [pc, #468]	; (8000e90 <HAL_UART_MspInit+0x288>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc0:	4b73      	ldr	r3, [pc, #460]	; (8000e90 <HAL_UART_MspInit+0x288>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000cc6:	4872      	ldr	r0, [pc, #456]	; (8000e90 <HAL_UART_MspInit+0x288>)
 8000cc8:	f001 ff04 	bl	8002ad4 <HAL_DMA_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000cd2:	f7ff ff6b 	bl	8000bac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a6d      	ldr	r2, [pc, #436]	; (8000e90 <HAL_UART_MspInit+0x288>)
 8000cda:	635a      	str	r2, [r3, #52]	; 0x34
 8000cdc:	4a6c      	ldr	r2, [pc, #432]	; (8000e90 <HAL_UART_MspInit+0x288>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000ce2:	4b6d      	ldr	r3, [pc, #436]	; (8000e98 <HAL_UART_MspInit+0x290>)
 8000ce4:	4a6d      	ldr	r2, [pc, #436]	; (8000e9c <HAL_UART_MspInit+0x294>)
 8000ce6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000ce8:	4b6b      	ldr	r3, [pc, #428]	; (8000e98 <HAL_UART_MspInit+0x290>)
 8000cea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf0:	4b69      	ldr	r3, [pc, #420]	; (8000e98 <HAL_UART_MspInit+0x290>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf6:	4b68      	ldr	r3, [pc, #416]	; (8000e98 <HAL_UART_MspInit+0x290>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cfc:	4b66      	ldr	r3, [pc, #408]	; (8000e98 <HAL_UART_MspInit+0x290>)
 8000cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d02:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d04:	4b64      	ldr	r3, [pc, #400]	; (8000e98 <HAL_UART_MspInit+0x290>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d0a:	4b63      	ldr	r3, [pc, #396]	; (8000e98 <HAL_UART_MspInit+0x290>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d10:	4b61      	ldr	r3, [pc, #388]	; (8000e98 <HAL_UART_MspInit+0x290>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d16:	4b60      	ldr	r3, [pc, #384]	; (8000e98 <HAL_UART_MspInit+0x290>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d1c:	4b5e      	ldr	r3, [pc, #376]	; (8000e98 <HAL_UART_MspInit+0x290>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d22:	485d      	ldr	r0, [pc, #372]	; (8000e98 <HAL_UART_MspInit+0x290>)
 8000d24:	f001 fed6 	bl	8002ad4 <HAL_DMA_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000d2e:	f7ff ff3d 	bl	8000bac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a58      	ldr	r2, [pc, #352]	; (8000e98 <HAL_UART_MspInit+0x290>)
 8000d36:	639a      	str	r2, [r3, #56]	; 0x38
 8000d38:	4a57      	ldr	r2, [pc, #348]	; (8000e98 <HAL_UART_MspInit+0x290>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2025      	movs	r0, #37	; 0x25
 8000d44:	f001 fe8f 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d48:	2025      	movs	r0, #37	; 0x25
 8000d4a:	f001 fea8 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d4e:	e095      	b.n	8000e7c <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a52      	ldr	r2, [pc, #328]	; (8000ea0 <HAL_UART_MspInit+0x298>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	f040 8090 	bne.w	8000e7c <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <HAL_UART_MspInit+0x280>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a48      	ldr	r2, [pc, #288]	; (8000e88 <HAL_UART_MspInit+0x280>)
 8000d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6c:	4b46      	ldr	r3, [pc, #280]	; (8000e88 <HAL_UART_MspInit+0x280>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4b42      	ldr	r3, [pc, #264]	; (8000e88 <HAL_UART_MspInit+0x280>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a41      	ldr	r2, [pc, #260]	; (8000e88 <HAL_UART_MspInit+0x280>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b3f      	ldr	r3, [pc, #252]	; (8000e88 <HAL_UART_MspInit+0x280>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d94:	230c      	movs	r3, #12
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da4:	2307      	movs	r3, #7
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4837      	ldr	r0, [pc, #220]	; (8000e8c <HAL_UART_MspInit+0x284>)
 8000db0:	f002 fa92 	bl	80032d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000db4:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <HAL_UART_MspInit+0x29c>)
 8000db6:	4a3c      	ldr	r2, [pc, #240]	; (8000ea8 <HAL_UART_MspInit+0x2a0>)
 8000db8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000dba:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <HAL_UART_MspInit+0x29c>)
 8000dbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <HAL_UART_MspInit+0x29c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc8:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <HAL_UART_MspInit+0x29c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dce:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <HAL_UART_MspInit+0x29c>)
 8000dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dd6:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <HAL_UART_MspInit+0x29c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ddc:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <HAL_UART_MspInit+0x29c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000de2:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <HAL_UART_MspInit+0x29c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000de8:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <HAL_UART_MspInit+0x29c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dee:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <HAL_UART_MspInit+0x29c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000df4:	482b      	ldr	r0, [pc, #172]	; (8000ea4 <HAL_UART_MspInit+0x29c>)
 8000df6:	f001 fe6d 	bl	8002ad4 <HAL_DMA_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8000e00:	f7ff fed4 	bl	8000bac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <HAL_UART_MspInit+0x29c>)
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
 8000e0a:	4a26      	ldr	r2, [pc, #152]	; (8000ea4 <HAL_UART_MspInit+0x29c>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e10:	4b26      	ldr	r3, [pc, #152]	; (8000eac <HAL_UART_MspInit+0x2a4>)
 8000e12:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <HAL_UART_MspInit+0x2a8>)
 8000e14:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <HAL_UART_MspInit+0x2a4>)
 8000e18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <HAL_UART_MspInit+0x2a4>)
 8000e20:	2240      	movs	r2, #64	; 0x40
 8000e22:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e24:	4b21      	ldr	r3, [pc, #132]	; (8000eac <HAL_UART_MspInit+0x2a4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <HAL_UART_MspInit+0x2a4>)
 8000e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e30:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <HAL_UART_MspInit+0x2a4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_UART_MspInit+0x2a4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_UART_MspInit+0x2a4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_UART_MspInit+0x2a4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_UART_MspInit+0x2a4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e50:	4816      	ldr	r0, [pc, #88]	; (8000eac <HAL_UART_MspInit+0x2a4>)
 8000e52:	f001 fe3f 	bl	8002ad4 <HAL_DMA_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8000e5c:	f7ff fea6 	bl	8000bac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <HAL_UART_MspInit+0x2a4>)
 8000e64:	635a      	str	r2, [r3, #52]	; 0x34
 8000e66:	4a11      	ldr	r2, [pc, #68]	; (8000eac <HAL_UART_MspInit+0x2a4>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2026      	movs	r0, #38	; 0x26
 8000e72:	f001 fdf8 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e76:	2026      	movs	r0, #38	; 0x26
 8000e78:	f001 fe11 	bl	8002a9e <HAL_NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	3730      	adds	r7, #48	; 0x30
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40011000 	.word	0x40011000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	200007dc 	.word	0x200007dc
 8000e94:	400264b8 	.word	0x400264b8
 8000e98:	2000083c 	.word	0x2000083c
 8000e9c:	40026440 	.word	0x40026440
 8000ea0:	40004400 	.word	0x40004400
 8000ea4:	2000077c 	.word	0x2000077c
 8000ea8:	40026088 	.word	0x40026088
 8000eac:	2000089c 	.word	0x2000089c
 8000eb0:	400260a0 	.word	0x400260a0

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f001 fc92 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <SysTick_Handler+0x18>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	4a02      	ldr	r2, [pc, #8]	; (8000f14 <SysTick_Handler+0x18>)
 8000f0c:	6013      	str	r3, [r2, #0]
  //D_Slider_SystickUpdate();
  //D_USBHID_SysticUpdate();
  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000248 	.word	0x20000248

08000f18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <DMA1_Stream5_IRQHandler+0x10>)
 8000f1e:	f001 ff71 	bl	8002e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000077c 	.word	0x2000077c

08000f2c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <DMA1_Stream6_IRQHandler+0x10>)
 8000f32:	f001 ff67 	bl	8002e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000089c 	.word	0x2000089c

08000f40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <USART1_IRQHandler+0x10>)
 8000f46:	f004 fa57 	bl	80053f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200008fc 	.word	0x200008fc

08000f54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <USART2_IRQHandler+0x10>)
 8000f5a:	f004 fa4d 	bl	80053f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000940 	.word	0x20000940

08000f68 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <DMA2_Stream2_IRQHandler+0x10>)
 8000f6e:	f001 ff49 	bl	8002e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000083c 	.word	0x2000083c

08000f7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <OTG_FS_IRQHandler+0x10>)
 8000f82:	f002 fcae 	bl	80038e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000e64 	.word	0x20000e64

08000f90 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <DMA2_Stream7_IRQHandler+0x10>)
 8000f96:	f001 ff35 	bl	8002e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200007dc 	.word	0x200007dc

08000fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <SystemInit+0x20>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <SystemInit+0x20>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001000 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fce:	490e      	ldr	r1, [pc, #56]	; (8001008 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	; (800100c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe4:	4c0b      	ldr	r4, [pc, #44]	; (8001014 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ff2:	f7ff ffd7 	bl	8000fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff6:	f008 fced 	bl	80099d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffa:	f7ff fbf9 	bl	80007f0 <main>
  bx  lr    
 8000ffe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001000:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 800100c:	08009abc 	.word	0x08009abc
  ldr r2, =_sbss
 8001010:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8001014:	2000126c 	.word	0x2000126c

08001018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC_IRQHandler>
	...

0800101c <D_Slider_SystickUpdate>:
static int receiveFaultCount = 0;

static SliderLightingMode LightingMode[2] = {SL_DISABLE};
static uint8_t inPocket[2] = {0};

void D_Slider_SystickUpdate(){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	static uint32_t sndTime = 0;
	static uint32_t rcvTime = 0;

	static uint8_t count = 0;

	sndTime += G_System_counter - recent_System_counter;
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <D_Slider_SystickUpdate+0xb4>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <D_Slider_SystickUpdate+0xb8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	1ad2      	subs	r2, r2, r3
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <D_Slider_SystickUpdate+0xbc>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a29      	ldr	r2, [pc, #164]	; (80010d8 <D_Slider_SystickUpdate+0xbc>)
 8001032:	6013      	str	r3, [r2, #0]
	rcvTime += G_System_counter - recent_System_counter;
 8001034:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <D_Slider_SystickUpdate+0xb4>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <D_Slider_SystickUpdate+0xb8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	1ad2      	subs	r2, r2, r3
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <D_Slider_SystickUpdate+0xc0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a25      	ldr	r2, [pc, #148]	; (80010dc <D_Slider_SystickUpdate+0xc0>)
 8001046:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_counter;
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <D_Slider_SystickUpdate+0xb4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <D_Slider_SystickUpdate+0xb8>)
 800104e:	6013      	str	r3, [r2, #0]

	if(!_firstSend){
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <D_Slider_SystickUpdate+0xc4>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	f083 0301 	eor.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <D_Slider_SystickUpdate+0x4e>
		_firstSend = true;
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <D_Slider_SystickUpdate+0xc4>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
		D_Slider_Start();
 8001064:	f000 f848 	bl	80010f8 <D_Slider_Start>
		//D_Slider_InitColorData();
		return;
 8001068:	e030      	b.n	80010cc <D_Slider_SystickUpdate+0xb0>
	}
	if(sndTime >= SLIDER_SEND_INTERVAL){
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <D_Slider_SystickUpdate+0xbc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b04      	cmp	r3, #4
 8001070:	d91f      	bls.n	80010b2 <D_Slider_SystickUpdate+0x96>
		sndTime = 0;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <D_Slider_SystickUpdate+0xbc>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
		count++;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <D_Slider_SystickUpdate+0xc8>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <D_Slider_SystickUpdate+0xc8>)
 8001082:	701a      	strb	r2, [r3, #0]
		if(count == 1){
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <D_Slider_SystickUpdate+0xc8>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d107      	bne.n	800109c <D_Slider_SystickUpdate+0x80>
			D_Slider_Send((uint8_t*)SendData, COLORSEND_LENGTH + AdditionalPacket);
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <D_Slider_SystickUpdate+0xcc>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	330a      	adds	r3, #10
 8001092:	4619      	mov	r1, r3
 8001094:	4815      	ldr	r0, [pc, #84]	; (80010ec <D_Slider_SystickUpdate+0xd0>)
 8001096:	f001 f8f9 	bl	800228c <D_Slider_Send>
 800109a:	e003      	b.n	80010a4 <D_Slider_SystickUpdate+0x88>
		}else{
			D_Slider_Send((uint8_t*)SensorGetSendData, SENSORGET_LENGTH);
 800109c:	2106      	movs	r1, #6
 800109e:	4814      	ldr	r0, [pc, #80]	; (80010f0 <D_Slider_SystickUpdate+0xd4>)
 80010a0:	f001 f8f4 	bl	800228c <D_Slider_Send>
		}
		if(count >= 10) count = 0;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <D_Slider_SystickUpdate+0xc8>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b09      	cmp	r3, #9
 80010aa:	d902      	bls.n	80010b2 <D_Slider_SystickUpdate+0x96>
 80010ac:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <D_Slider_SystickUpdate+0xc8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
	}

	if(rcvTime >= SLIDER_RECEIVE_INTERVAL){
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <D_Slider_SystickUpdate+0xc0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d906      	bls.n	80010c8 <D_Slider_SystickUpdate+0xac>
		rcvTime = 0;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <D_Slider_SystickUpdate+0xc0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
		D_Slider_Receive((uint8_t*)RecvData, 10);
 80010c0:	210a      	movs	r1, #10
 80010c2:	480c      	ldr	r0, [pc, #48]	; (80010f4 <D_Slider_SystickUpdate+0xd8>)
 80010c4:	f001 f90a 	bl	80022dc <D_Slider_Receive>
	}

	D_Slider_LightingUpdate();
 80010c8:	f000 f8c6 	bl	8001258 <D_Slider_LightingUpdate>
	if(receiveFaultCount >= 30){
		D_Slider_Start();
		receiveFaultCount = 0;
	}
	*/
}
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000248 	.word	0x20000248
 80010d4:	200002e4 	.word	0x200002e4
 80010d8:	200002e8 	.word	0x200002e8
 80010dc:	200002ec 	.word	0x200002ec
 80010e0:	200002d9 	.word	0x200002d9
 80010e4:	200002f0 	.word	0x200002f0
 80010e8:	2000028c 	.word	0x2000028c
 80010ec:	2000024c 	.word	0x2000024c
 80010f0:	2000026c 	.word	0x2000026c
 80010f4:	20000290 	.word	0x20000290

080010f8 <D_Slider_Start>:

void D_Slider_Start(void){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
	SensorGetSendData[0] = FIRSTBYTE;
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <D_Slider_Start+0x5c>)
 8001100:	22e0      	movs	r2, #224	; 0xe0
 8001102:	701a      	strb	r2, [r3, #0]
	SensorGetSendData[1] = ADDRESS;
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <D_Slider_Start+0x5c>)
 8001106:	2201      	movs	r2, #1
 8001108:	705a      	strb	r2, [r3, #1]
	SensorGetSendData[2] = SENSORGET_SEQNUM;
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <D_Slider_Start+0x5c>)
 800110c:	2201      	movs	r2, #1
 800110e:	709a      	strb	r2, [r3, #2]
	SensorGetSendData[3] = SENSORGET_DATANUM;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <D_Slider_Start+0x5c>)
 8001112:	2201      	movs	r2, #1
 8001114:	70da      	strb	r2, [r3, #3]
	SensorGetSendData[4] = SENSORGET_CMD;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <D_Slider_Start+0x5c>)
 8001118:	2220      	movs	r2, #32
 800111a:	711a      	strb	r2, [r3, #4]
	uint8_t dataSum = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 8001120:	2301      	movs	r3, #1
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	e009      	b.n	800113a <D_Slider_Start+0x42>
		dataSum += SensorGetSendData[i];
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <D_Slider_Start+0x5c>)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4413      	add	r3, r2
 8001132:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b04      	cmp	r3, #4
 800113e:	ddf2      	ble.n	8001126 <D_Slider_Start+0x2e>
	}
	SensorGetSendData[SENSORGET_LENGTH-1] = (uint8_t)dataSum;
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <D_Slider_Start+0x5c>)
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	7153      	strb	r3, [r2, #5]
	data[3] = 0xfe;
	had_completed_tx = true;
	had_completed_rx = true;
	D_Slider_Send((uint8_t*)data, 4);
	*/
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	2000026c 	.word	0x2000026c

08001158 <D_Slider_SetLightingR>:

void D_Slider_SetLightingR(SliderLightingMode rightType, int pocketR){
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
	//LightingMode[0] = rightType;
	inPocket[0] = pocketR;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <D_Slider_SetLightingR+0x78>)
 800116a:	701a      	strb	r2, [r3, #0]
	if(rightType == SL_POCKET_IN){
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b03      	cmp	r3, #3
 8001170:	d124      	bne.n	80011bc <D_Slider_SetLightingR+0x64>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b04      	cmp	r3, #4
 8001176:	d825      	bhi.n	80011c4 <D_Slider_SetLightingR+0x6c>
 8001178:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <D_Slider_SetLightingR+0x28>)
 800117a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117e:	bf00      	nop
 8001180:	08001195 	.word	0x08001195
 8001184:	0800119d 	.word	0x0800119d
 8001188:	080011a5 	.word	0x080011a5
 800118c:	080011ad 	.word	0x080011ad
 8001190:	080011b5 	.word	0x080011b5
		switch(pocketR){
		case 0:
			LightingMode[0] = SL_POCKET_IN_OUT;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <D_Slider_SetLightingR+0x7c>)
 8001196:	2205      	movs	r2, #5
 8001198:	701a      	strb	r2, [r3, #0]
			break;
 800119a:	e013      	b.n	80011c4 <D_Slider_SetLightingR+0x6c>
		case 1:
			LightingMode[0] = SL_POCKET_IN_DIA;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <D_Slider_SetLightingR+0x7c>)
 800119e:	2206      	movs	r2, #6
 80011a0:	701a      	strb	r2, [r3, #0]
			break;
 80011a2:	e00f      	b.n	80011c4 <D_Slider_SetLightingR+0x6c>
		case 2:
			LightingMode[0] = SL_POCKET_IN_UP;
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <D_Slider_SetLightingR+0x7c>)
 80011a6:	2204      	movs	r2, #4
 80011a8:	701a      	strb	r2, [r3, #0]
			break;
 80011aa:	e00b      	b.n	80011c4 <D_Slider_SetLightingR+0x6c>
		case 3:
			LightingMode[0] = SL_POCKET_IN_DIA;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <D_Slider_SetLightingR+0x7c>)
 80011ae:	2206      	movs	r2, #6
 80011b0:	701a      	strb	r2, [r3, #0]
			break;
 80011b2:	e007      	b.n	80011c4 <D_Slider_SetLightingR+0x6c>
		case 4:
			LightingMode[0] = SL_POCKET_IN_OUT;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <D_Slider_SetLightingR+0x7c>)
 80011b6:	2205      	movs	r2, #5
 80011b8:	701a      	strb	r2, [r3, #0]
			break;
 80011ba:	e003      	b.n	80011c4 <D_Slider_SetLightingR+0x6c>
		}
	}else{
		LightingMode[0] = rightType;
 80011bc:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <D_Slider_SetLightingR+0x7c>)
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	7013      	strb	r3, [r2, #0]
	}
}
 80011c2:	e7ff      	b.n	80011c4 <D_Slider_SetLightingR+0x6c>
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	200002e0 	.word	0x200002e0
 80011d4:	200002dc 	.word	0x200002dc

080011d8 <D_Slider_SetLightingL>:

void D_Slider_SetLightingL(SliderLightingMode leftType, int pocketL){
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
	//LightingMode[1] = leftType;
	inPocket[1] = pocketL;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <D_Slider_SetLightingL+0x78>)
 80011ea:	705a      	strb	r2, [r3, #1]
	if(leftType == SL_POCKET_IN){
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d124      	bne.n	800123c <D_Slider_SetLightingL+0x64>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d825      	bhi.n	8001244 <D_Slider_SetLightingL+0x6c>
 80011f8:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <D_Slider_SetLightingL+0x28>)
 80011fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fe:	bf00      	nop
 8001200:	08001215 	.word	0x08001215
 8001204:	0800121d 	.word	0x0800121d
 8001208:	08001225 	.word	0x08001225
 800120c:	0800122d 	.word	0x0800122d
 8001210:	08001235 	.word	0x08001235
		switch(pocketL){
		case 0:
			LightingMode[1] = SL_POCKET_IN_OUT;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <D_Slider_SetLightingL+0x7c>)
 8001216:	2205      	movs	r2, #5
 8001218:	705a      	strb	r2, [r3, #1]
			break;
 800121a:	e013      	b.n	8001244 <D_Slider_SetLightingL+0x6c>
		case 1:
			LightingMode[1] = SL_POCKET_IN_DIA;
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <D_Slider_SetLightingL+0x7c>)
 800121e:	2206      	movs	r2, #6
 8001220:	705a      	strb	r2, [r3, #1]
			break;
 8001222:	e00f      	b.n	8001244 <D_Slider_SetLightingL+0x6c>
		case 2:
			LightingMode[1] = SL_POCKET_IN_UP;
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <D_Slider_SetLightingL+0x7c>)
 8001226:	2204      	movs	r2, #4
 8001228:	705a      	strb	r2, [r3, #1]
			break;
 800122a:	e00b      	b.n	8001244 <D_Slider_SetLightingL+0x6c>
		case 3:
			LightingMode[1] = SL_POCKET_IN_DIA;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <D_Slider_SetLightingL+0x7c>)
 800122e:	2206      	movs	r2, #6
 8001230:	705a      	strb	r2, [r3, #1]
			break;
 8001232:	e007      	b.n	8001244 <D_Slider_SetLightingL+0x6c>
		case 4:
			LightingMode[1] = SL_POCKET_IN_OUT;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <D_Slider_SetLightingL+0x7c>)
 8001236:	2205      	movs	r2, #5
 8001238:	705a      	strb	r2, [r3, #1]
			break;
 800123a:	e003      	b.n	8001244 <D_Slider_SetLightingL+0x6c>
		}
	}else{
		LightingMode[1] = leftType;
 800123c:	4a05      	ldr	r2, [pc, #20]	; (8001254 <D_Slider_SetLightingL+0x7c>)
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	7053      	strb	r3, [r2, #1]
	}
}
 8001242:	e7ff      	b.n	8001244 <D_Slider_SetLightingL+0x6c>
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	200002e0 	.word	0x200002e0
 8001254:	200002dc 	.word	0x200002dc

08001258 <D_Slider_LightingUpdate>:

void D_Slider_LightingUpdate(void){
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
	static bool _changeMode[2] = {false};
	static bool _animUpdate_1[2] = {false};
	static bool _animUpdate_2[2] = {false};
	static int counter1[2] = {0};

	int nowCount = G_System_counter;
 800125e:	4ba9      	ldr	r3, [pc, #676]	; (8001504 <D_Slider_LightingUpdate+0x2ac>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	607b      	str	r3, [r7, #4]

	for(int side = 0; side < 2; side++){
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
 8001268:	f000 bf6f 	b.w	800214a <D_Slider_LightingUpdate+0xef2>
		updateCount[side] += nowCount - recentUpdateCount;
 800126c:	4aa6      	ldr	r2, [pc, #664]	; (8001508 <D_Slider_LightingUpdate+0x2b0>)
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001274:	4ba5      	ldr	r3, [pc, #660]	; (800150c <D_Slider_LightingUpdate+0x2b4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	1acb      	subs	r3, r1, r3
 800127c:	441a      	add	r2, r3
 800127e:	49a2      	ldr	r1, [pc, #648]	; (8001508 <D_Slider_LightingUpdate+0x2b0>)
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(LightingMode[side] != recentMode[side] || inPocket[side] != recentInPocket[side]){
 8001286:	4aa2      	ldr	r2, [pc, #648]	; (8001510 <D_Slider_LightingUpdate+0x2b8>)
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	4413      	add	r3, r2
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	49a1      	ldr	r1, [pc, #644]	; (8001514 <D_Slider_LightingUpdate+0x2bc>)
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	440b      	add	r3, r1
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d109      	bne.n	80012ae <D_Slider_LightingUpdate+0x56>
 800129a:	4a9f      	ldr	r2, [pc, #636]	; (8001518 <D_Slider_LightingUpdate+0x2c0>)
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	4413      	add	r3, r2
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	499e      	ldr	r1, [pc, #632]	; (800151c <D_Slider_LightingUpdate+0x2c4>)
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	440b      	add	r3, r1
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d013      	beq.n	80012d6 <D_Slider_LightingUpdate+0x7e>
			_changeMode[side] = true;
 80012ae:	4a9c      	ldr	r2, [pc, #624]	; (8001520 <D_Slider_LightingUpdate+0x2c8>)
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	4413      	add	r3, r2
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
			updateCount[side] = 0;
 80012b8:	4a93      	ldr	r2, [pc, #588]	; (8001508 <D_Slider_LightingUpdate+0x2b0>)
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	2100      	movs	r1, #0
 80012be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			_animUpdate_1[side] = false;
 80012c2:	4a98      	ldr	r2, [pc, #608]	; (8001524 <D_Slider_LightingUpdate+0x2cc>)
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	4413      	add	r3, r2
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
			_animUpdate_2[side] = false;
 80012cc:	4a96      	ldr	r2, [pc, #600]	; (8001528 <D_Slider_LightingUpdate+0x2d0>)
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	4413      	add	r3, r2
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
		}
		recentMode[side] = LightingMode[side];
 80012d6:	4a8e      	ldr	r2, [pc, #568]	; (8001510 <D_Slider_LightingUpdate+0x2b8>)
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	4413      	add	r3, r2
 80012dc:	7819      	ldrb	r1, [r3, #0]
 80012de:	4a8d      	ldr	r2, [pc, #564]	; (8001514 <D_Slider_LightingUpdate+0x2bc>)
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	4413      	add	r3, r2
 80012e4:	460a      	mov	r2, r1
 80012e6:	701a      	strb	r2, [r3, #0]
		recentInPocket[side] = inPocket[side];
 80012e8:	4a8b      	ldr	r2, [pc, #556]	; (8001518 <D_Slider_LightingUpdate+0x2c0>)
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	4413      	add	r3, r2
 80012ee:	7819      	ldrb	r1, [r3, #0]
 80012f0:	4a8a      	ldr	r2, [pc, #552]	; (800151c <D_Slider_LightingUpdate+0x2c4>)
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	4413      	add	r3, r2
 80012f6:	460a      	mov	r2, r1
 80012f8:	701a      	strb	r2, [r3, #0]
		switch(LightingMode[side]){
 80012fa:	4a85      	ldr	r2, [pc, #532]	; (8001510 <D_Slider_LightingUpdate+0x2b8>)
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	4413      	add	r3, r2
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b06      	cmp	r3, #6
 8001304:	f200 871e 	bhi.w	8002144 <D_Slider_LightingUpdate+0xeec>
 8001308:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <D_Slider_LightingUpdate+0xb8>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	0800132d 	.word	0x0800132d
 8001314:	080013ad 	.word	0x080013ad
 8001318:	0800142d 	.word	0x0800142d
 800131c:	08002145 	.word	0x08002145
 8001320:	08001ed7 	.word	0x08001ed7
 8001324:	080015ad 	.word	0x080015ad
 8001328:	08001997 	.word	0x08001997
		case SL_DISABLE:
			if(_changeMode[side]){
 800132c:	4a7c      	ldr	r2, [pc, #496]	; (8001520 <D_Slider_LightingUpdate+0x2c8>)
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 86fa 	beq.w	800212e <D_Slider_LightingUpdate+0xed6>
				for(int i=0; i<5; i++){
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
 800133e:	e02b      	b.n	8001398 <D_Slider_LightingUpdate+0x140>
					slideColor[side][i][0] = false;
 8001340:	487a      	ldr	r0, [pc, #488]	; (800152c <D_Slider_LightingUpdate+0x2d4>)
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001346:	461a      	mov	r2, r3
 8001348:	0052      	lsls	r2, r2, #1
 800134a:	441a      	add	r2, r3
 800134c:	460b      	mov	r3, r1
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	1a5b      	subs	r3, r3, r1
 8001352:	4413      	add	r3, r2
 8001354:	4403      	add	r3, r0
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 800135a:	4874      	ldr	r0, [pc, #464]	; (800152c <D_Slider_LightingUpdate+0x2d4>)
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001360:	461a      	mov	r2, r3
 8001362:	0052      	lsls	r2, r2, #1
 8001364:	441a      	add	r2, r3
 8001366:	460b      	mov	r3, r1
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	1a5b      	subs	r3, r3, r1
 800136c:	4413      	add	r3, r2
 800136e:	4403      	add	r3, r0
 8001370:	3301      	adds	r3, #1
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 8001376:	486d      	ldr	r0, [pc, #436]	; (800152c <D_Slider_LightingUpdate+0x2d4>)
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800137c:	461a      	mov	r2, r3
 800137e:	0052      	lsls	r2, r2, #1
 8001380:	441a      	add	r2, r3
 8001382:	460b      	mov	r3, r1
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	1a5b      	subs	r3, r3, r1
 8001388:	4413      	add	r3, r2
 800138a:	4403      	add	r3, r0
 800138c:	3302      	adds	r3, #2
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	3301      	adds	r3, #1
 8001396:	623b      	str	r3, [r7, #32]
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	2b04      	cmp	r3, #4
 800139c:	ddd0      	ble.n	8001340 <D_Slider_LightingUpdate+0xe8>
				}
				_changeMode[side] = false;
 800139e:	4a60      	ldr	r2, [pc, #384]	; (8001520 <D_Slider_LightingUpdate+0x2c8>)
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	4413      	add	r3, r2
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80013a8:	f000 bec1 	b.w	800212e <D_Slider_LightingUpdate+0xed6>

		case SL_NORMAL:
			if(_changeMode[side]){
 80013ac:	4a5c      	ldr	r2, [pc, #368]	; (8001520 <D_Slider_LightingUpdate+0x2c8>)
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 86bc 	beq.w	8002132 <D_Slider_LightingUpdate+0xeda>
				for(int i=0; i<5; i++){
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	e02b      	b.n	8001418 <D_Slider_LightingUpdate+0x1c0>
					slideColor[side][i][0] = true;
 80013c0:	485a      	ldr	r0, [pc, #360]	; (800152c <D_Slider_LightingUpdate+0x2d4>)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013c6:	461a      	mov	r2, r3
 80013c8:	0052      	lsls	r2, r2, #1
 80013ca:	441a      	add	r2, r3
 80013cc:	460b      	mov	r3, r1
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	1a5b      	subs	r3, r3, r1
 80013d2:	4413      	add	r3, r2
 80013d4:	4403      	add	r3, r0
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = true;
 80013da:	4854      	ldr	r0, [pc, #336]	; (800152c <D_Slider_LightingUpdate+0x2d4>)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013e0:	461a      	mov	r2, r3
 80013e2:	0052      	lsls	r2, r2, #1
 80013e4:	441a      	add	r2, r3
 80013e6:	460b      	mov	r3, r1
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	1a5b      	subs	r3, r3, r1
 80013ec:	4413      	add	r3, r2
 80013ee:	4403      	add	r3, r0
 80013f0:	3301      	adds	r3, #1
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = true;
 80013f6:	484d      	ldr	r0, [pc, #308]	; (800152c <D_Slider_LightingUpdate+0x2d4>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013fc:	461a      	mov	r2, r3
 80013fe:	0052      	lsls	r2, r2, #1
 8001400:	441a      	add	r2, r3
 8001402:	460b      	mov	r3, r1
 8001404:	011b      	lsls	r3, r3, #4
 8001406:	1a5b      	subs	r3, r3, r1
 8001408:	4413      	add	r3, r2
 800140a:	4403      	add	r3, r0
 800140c:	3302      	adds	r3, #2
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b04      	cmp	r3, #4
 800141c:	ddd0      	ble.n	80013c0 <D_Slider_LightingUpdate+0x168>
				}
				_changeMode[side] = false;
 800141e:	4a40      	ldr	r2, [pc, #256]	; (8001520 <D_Slider_LightingUpdate+0x2c8>)
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	4413      	add	r3, r2
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001428:	f000 be83 	b.w	8002132 <D_Slider_LightingUpdate+0xeda>

		case SL_NORMAL_FLASH:
			if(updateCount[side] <= 1700 && !_animUpdate_1[side]){
 800142c:	4a36      	ldr	r2, [pc, #216]	; (8001508 <D_Slider_LightingUpdate+0x2b0>)
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001434:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001438:	4293      	cmp	r3, r2
 800143a:	dc44      	bgt.n	80014c6 <D_Slider_LightingUpdate+0x26e>
 800143c:	4a39      	ldr	r2, [pc, #228]	; (8001524 <D_Slider_LightingUpdate+0x2cc>)
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f083 0301 	eor.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d03b      	beq.n	80014c6 <D_Slider_LightingUpdate+0x26e>
				_animUpdate_1[side] = true;
 800144e:	4a35      	ldr	r2, [pc, #212]	; (8001524 <D_Slider_LightingUpdate+0x2cc>)
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	4413      	add	r3, r2
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8001458:	4a33      	ldr	r2, [pc, #204]	; (8001528 <D_Slider_LightingUpdate+0x2d0>)
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	4413      	add	r3, r2
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	e02b      	b.n	80014c0 <D_Slider_LightingUpdate+0x268>
					slideColor[side][i][0] = true;
 8001468:	4830      	ldr	r0, [pc, #192]	; (800152c <D_Slider_LightingUpdate+0x2d4>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800146e:	461a      	mov	r2, r3
 8001470:	0052      	lsls	r2, r2, #1
 8001472:	441a      	add	r2, r3
 8001474:	460b      	mov	r3, r1
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	1a5b      	subs	r3, r3, r1
 800147a:	4413      	add	r3, r2
 800147c:	4403      	add	r3, r0
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = true;
 8001482:	482a      	ldr	r0, [pc, #168]	; (800152c <D_Slider_LightingUpdate+0x2d4>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001488:	461a      	mov	r2, r3
 800148a:	0052      	lsls	r2, r2, #1
 800148c:	441a      	add	r2, r3
 800148e:	460b      	mov	r3, r1
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	1a5b      	subs	r3, r3, r1
 8001494:	4413      	add	r3, r2
 8001496:	4403      	add	r3, r0
 8001498:	3301      	adds	r3, #1
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = true;
 800149e:	4823      	ldr	r0, [pc, #140]	; (800152c <D_Slider_LightingUpdate+0x2d4>)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a4:	461a      	mov	r2, r3
 80014a6:	0052      	lsls	r2, r2, #1
 80014a8:	441a      	add	r2, r3
 80014aa:	460b      	mov	r3, r1
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	1a5b      	subs	r3, r3, r1
 80014b0:	4413      	add	r3, r2
 80014b2:	4403      	add	r3, r0
 80014b4:	3302      	adds	r3, #2
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	3301      	adds	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	ddd0      	ble.n	8001468 <D_Slider_LightingUpdate+0x210>
				}
			}
			if(updateCount[side] > 1700 && !_animUpdate_2[side]){
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <D_Slider_LightingUpdate+0x2b0>)
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ce:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80014d2:	4293      	cmp	r3, r2
 80014d4:	dd5b      	ble.n	800158e <D_Slider_LightingUpdate+0x336>
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <D_Slider_LightingUpdate+0x2d0>)
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	f083 0301 	eor.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d052      	beq.n	800158e <D_Slider_LightingUpdate+0x336>
				_animUpdate_1[side] = false;
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <D_Slider_LightingUpdate+0x2cc>)
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	4413      	add	r3, r2
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 80014f2:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <D_Slider_LightingUpdate+0x2d0>)
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	4413      	add	r3, r2
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e042      	b.n	8001588 <D_Slider_LightingUpdate+0x330>
 8001502:	bf00      	nop
 8001504:	20000248 	.word	0x20000248
 8001508:	200002f4 	.word	0x200002f4
 800150c:	200002fc 	.word	0x200002fc
 8001510:	200002dc 	.word	0x200002dc
 8001514:	20000300 	.word	0x20000300
 8001518:	200002e0 	.word	0x200002e0
 800151c:	20000304 	.word	0x20000304
 8001520:	20000308 	.word	0x20000308
 8001524:	2000030c 	.word	0x2000030c
 8001528:	20000310 	.word	0x20000310
 800152c:	20000314 	.word	0x20000314
					slideColor[side][i][0] = false;
 8001530:	4823      	ldr	r0, [pc, #140]	; (80015c0 <D_Slider_LightingUpdate+0x368>)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001536:	461a      	mov	r2, r3
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	441a      	add	r2, r3
 800153c:	460b      	mov	r3, r1
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	1a5b      	subs	r3, r3, r1
 8001542:	4413      	add	r3, r2
 8001544:	4403      	add	r3, r0
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 800154a:	481d      	ldr	r0, [pc, #116]	; (80015c0 <D_Slider_LightingUpdate+0x368>)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001550:	461a      	mov	r2, r3
 8001552:	0052      	lsls	r2, r2, #1
 8001554:	441a      	add	r2, r3
 8001556:	460b      	mov	r3, r1
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	1a5b      	subs	r3, r3, r1
 800155c:	4413      	add	r3, r2
 800155e:	4403      	add	r3, r0
 8001560:	3301      	adds	r3, #1
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 8001566:	4816      	ldr	r0, [pc, #88]	; (80015c0 <D_Slider_LightingUpdate+0x368>)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800156c:	461a      	mov	r2, r3
 800156e:	0052      	lsls	r2, r2, #1
 8001570:	441a      	add	r2, r3
 8001572:	460b      	mov	r3, r1
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	1a5b      	subs	r3, r3, r1
 8001578:	4413      	add	r3, r2
 800157a:	4403      	add	r3, r0
 800157c:	3302      	adds	r3, #2
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	2b04      	cmp	r3, #4
 800158c:	ddd0      	ble.n	8001530 <D_Slider_LightingUpdate+0x2d8>
				}
			}
			if(updateCount[side] >= 2000) updateCount[side] = 0;
 800158e:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <D_Slider_LightingUpdate+0x36c>)
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800159a:	f2c0 85cc 	blt.w	8002136 <D_Slider_LightingUpdate+0xede>
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <D_Slider_LightingUpdate+0x36c>)
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	2100      	movs	r1, #0
 80015a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80015a8:	f000 bdc5 	b.w	8002136 <D_Slider_LightingUpdate+0xede>

		case SL_POCKET_IN_OUT:
			if(_changeMode[side]){
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <D_Slider_LightingUpdate+0x370>)
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d03d      	beq.n	8001634 <D_Slider_LightingUpdate+0x3dc>
				for(int i=0; i<5; i++){
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	e032      	b.n	8001624 <D_Slider_LightingUpdate+0x3cc>
 80015be:	bf00      	nop
 80015c0:	20000314 	.word	0x20000314
 80015c4:	200002f4 	.word	0x200002f4
 80015c8:	20000308 	.word	0x20000308
					slideColor[side][i][0] = false;
 80015cc:	48ba      	ldr	r0, [pc, #744]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d2:	461a      	mov	r2, r3
 80015d4:	0052      	lsls	r2, r2, #1
 80015d6:	441a      	add	r2, r3
 80015d8:	460b      	mov	r3, r1
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	1a5b      	subs	r3, r3, r1
 80015de:	4413      	add	r3, r2
 80015e0:	4403      	add	r3, r0
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 80015e6:	48b4      	ldr	r0, [pc, #720]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ec:	461a      	mov	r2, r3
 80015ee:	0052      	lsls	r2, r2, #1
 80015f0:	441a      	add	r2, r3
 80015f2:	460b      	mov	r3, r1
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	1a5b      	subs	r3, r3, r1
 80015f8:	4413      	add	r3, r2
 80015fa:	4403      	add	r3, r0
 80015fc:	3301      	adds	r3, #1
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 8001602:	48ad      	ldr	r0, [pc, #692]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001608:	461a      	mov	r2, r3
 800160a:	0052      	lsls	r2, r2, #1
 800160c:	441a      	add	r2, r3
 800160e:	460b      	mov	r3, r1
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	1a5b      	subs	r3, r3, r1
 8001614:	4413      	add	r3, r2
 8001616:	4403      	add	r3, r0
 8001618:	3302      	adds	r3, #2
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	3301      	adds	r3, #1
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	2b04      	cmp	r3, #4
 8001628:	ddd0      	ble.n	80015cc <D_Slider_LightingUpdate+0x374>
				}
				_changeMode[side] = false;
 800162a:	4aa4      	ldr	r2, [pc, #656]	; (80018bc <D_Slider_LightingUpdate+0x664>)
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	4413      	add	r3, r2
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] < 100 && !_animUpdate_1[side]){
 8001634:	4aa2      	ldr	r2, [pc, #648]	; (80018c0 <D_Slider_LightingUpdate+0x668>)
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163c:	2b63      	cmp	r3, #99	; 0x63
 800163e:	dc44      	bgt.n	80016ca <D_Slider_LightingUpdate+0x472>
 8001640:	4aa0      	ldr	r2, [pc, #640]	; (80018c4 <D_Slider_LightingUpdate+0x66c>)
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	4413      	add	r3, r2
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f083 0301 	eor.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d03b      	beq.n	80016ca <D_Slider_LightingUpdate+0x472>
				_animUpdate_1[side] = true;
 8001652:	4a9c      	ldr	r2, [pc, #624]	; (80018c4 <D_Slider_LightingUpdate+0x66c>)
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	4413      	add	r3, r2
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 800165c:	4a9a      	ldr	r2, [pc, #616]	; (80018c8 <D_Slider_LightingUpdate+0x670>)
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	4413      	add	r3, r2
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8001666:	4a99      	ldr	r2, [pc, #612]	; (80018cc <D_Slider_LightingUpdate+0x674>)
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4892      	ldr	r0, [pc, #584]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 8001670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001672:	461a      	mov	r2, r3
 8001674:	0052      	lsls	r2, r2, #1
 8001676:	441a      	add	r2, r3
 8001678:	460b      	mov	r3, r1
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	1a5b      	subs	r3, r3, r1
 800167e:	4413      	add	r3, r2
 8001680:	4403      	add	r3, r0
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001686:	4a91      	ldr	r2, [pc, #580]	; (80018cc <D_Slider_LightingUpdate+0x674>)
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	4413      	add	r3, r2
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	488a      	ldr	r0, [pc, #552]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 8001690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001692:	461a      	mov	r2, r3
 8001694:	0052      	lsls	r2, r2, #1
 8001696:	441a      	add	r2, r3
 8001698:	460b      	mov	r3, r1
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	1a5b      	subs	r3, r3, r1
 800169e:	4413      	add	r3, r2
 80016a0:	4403      	add	r3, r0
 80016a2:	3301      	adds	r3, #1
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 80016a8:	4a88      	ldr	r2, [pc, #544]	; (80018cc <D_Slider_LightingUpdate+0x674>)
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	4413      	add	r3, r2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4881      	ldr	r0, [pc, #516]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 80016b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016b4:	461a      	mov	r2, r3
 80016b6:	0052      	lsls	r2, r2, #1
 80016b8:	441a      	add	r2, r3
 80016ba:	460b      	mov	r3, r1
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	4413      	add	r3, r2
 80016c2:	4403      	add	r3, r0
 80016c4:	3302      	adds	r3, #2
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 100 && updateCount[side] < 200 && !_animUpdate_2[side]){
 80016ca:	4a7d      	ldr	r2, [pc, #500]	; (80018c0 <D_Slider_LightingUpdate+0x668>)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	2b63      	cmp	r3, #99	; 0x63
 80016d4:	dd4a      	ble.n	800176c <D_Slider_LightingUpdate+0x514>
 80016d6:	4a7a      	ldr	r2, [pc, #488]	; (80018c0 <D_Slider_LightingUpdate+0x668>)
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	2bc7      	cmp	r3, #199	; 0xc7
 80016e0:	dc44      	bgt.n	800176c <D_Slider_LightingUpdate+0x514>
 80016e2:	4a79      	ldr	r2, [pc, #484]	; (80018c8 <D_Slider_LightingUpdate+0x670>)
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	4413      	add	r3, r2
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	f083 0301 	eor.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d03b      	beq.n	800176c <D_Slider_LightingUpdate+0x514>
				_animUpdate_1[side] = false;
 80016f4:	4a73      	ldr	r2, [pc, #460]	; (80018c4 <D_Slider_LightingUpdate+0x66c>)
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	4413      	add	r3, r2
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 80016fe:	4a72      	ldr	r2, [pc, #456]	; (80018c8 <D_Slider_LightingUpdate+0x670>)
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	4413      	add	r3, r2
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8001708:	4a70      	ldr	r2, [pc, #448]	; (80018cc <D_Slider_LightingUpdate+0x674>)
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	4413      	add	r3, r2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4869      	ldr	r0, [pc, #420]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 8001712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001714:	461a      	mov	r2, r3
 8001716:	0052      	lsls	r2, r2, #1
 8001718:	441a      	add	r2, r3
 800171a:	460b      	mov	r3, r1
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	1a5b      	subs	r3, r3, r1
 8001720:	4413      	add	r3, r2
 8001722:	4403      	add	r3, r0
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = false;
 8001728:	4a68      	ldr	r2, [pc, #416]	; (80018cc <D_Slider_LightingUpdate+0x674>)
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	4413      	add	r3, r2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4861      	ldr	r0, [pc, #388]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 8001732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001734:	461a      	mov	r2, r3
 8001736:	0052      	lsls	r2, r2, #1
 8001738:	441a      	add	r2, r3
 800173a:	460b      	mov	r3, r1
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	1a5b      	subs	r3, r3, r1
 8001740:	4413      	add	r3, r2
 8001742:	4403      	add	r3, r0
 8001744:	3301      	adds	r3, #1
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = false;
 800174a:	4a60      	ldr	r2, [pc, #384]	; (80018cc <D_Slider_LightingUpdate+0x674>)
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	4413      	add	r3, r2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4859      	ldr	r0, [pc, #356]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 8001754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001756:	461a      	mov	r2, r3
 8001758:	0052      	lsls	r2, r2, #1
 800175a:	441a      	add	r2, r3
 800175c:	460b      	mov	r3, r1
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	1a5b      	subs	r3, r3, r1
 8001762:	4413      	add	r3, r2
 8001764:	4403      	add	r3, r0
 8001766:	3302      	adds	r3, #2
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 200 && updateCount[side] < 375 && !_animUpdate_1[side]){
 800176c:	4a54      	ldr	r2, [pc, #336]	; (80018c0 <D_Slider_LightingUpdate+0x668>)
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	2bc7      	cmp	r3, #199	; 0xc7
 8001776:	dd4b      	ble.n	8001810 <D_Slider_LightingUpdate+0x5b8>
 8001778:	4a51      	ldr	r2, [pc, #324]	; (80018c0 <D_Slider_LightingUpdate+0x668>)
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001780:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 8001784:	dc44      	bgt.n	8001810 <D_Slider_LightingUpdate+0x5b8>
 8001786:	4a4f      	ldr	r2, [pc, #316]	; (80018c4 <D_Slider_LightingUpdate+0x66c>)
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	4413      	add	r3, r2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	f083 0301 	eor.w	r3, r3, #1
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d03b      	beq.n	8001810 <D_Slider_LightingUpdate+0x5b8>
				_animUpdate_1[side] = true;
 8001798:	4a4a      	ldr	r2, [pc, #296]	; (80018c4 <D_Slider_LightingUpdate+0x66c>)
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	4413      	add	r3, r2
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 80017a2:	4a49      	ldr	r2, [pc, #292]	; (80018c8 <D_Slider_LightingUpdate+0x670>)
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	4413      	add	r3, r2
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 80017ac:	4a47      	ldr	r2, [pc, #284]	; (80018cc <D_Slider_LightingUpdate+0x674>)
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	4413      	add	r3, r2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4840      	ldr	r0, [pc, #256]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 80017b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017b8:	461a      	mov	r2, r3
 80017ba:	0052      	lsls	r2, r2, #1
 80017bc:	441a      	add	r2, r3
 80017be:	460b      	mov	r3, r1
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	1a5b      	subs	r3, r3, r1
 80017c4:	4413      	add	r3, r2
 80017c6:	4403      	add	r3, r0
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 80017cc:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <D_Slider_LightingUpdate+0x674>)
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4838      	ldr	r0, [pc, #224]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 80017d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017d8:	461a      	mov	r2, r3
 80017da:	0052      	lsls	r2, r2, #1
 80017dc:	441a      	add	r2, r3
 80017de:	460b      	mov	r3, r1
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	1a5b      	subs	r3, r3, r1
 80017e4:	4413      	add	r3, r2
 80017e6:	4403      	add	r3, r0
 80017e8:	3301      	adds	r3, #1
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 80017ee:	4a37      	ldr	r2, [pc, #220]	; (80018cc <D_Slider_LightingUpdate+0x674>)
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	4413      	add	r3, r2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4830      	ldr	r0, [pc, #192]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 80017f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017fa:	461a      	mov	r2, r3
 80017fc:	0052      	lsls	r2, r2, #1
 80017fe:	441a      	add	r2, r3
 8001800:	460b      	mov	r3, r1
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	1a5b      	subs	r3, r3, r1
 8001806:	4413      	add	r3, r2
 8001808:	4403      	add	r3, r0
 800180a:	3302      	adds	r3, #2
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 375 &&updateCount[side] < 475 && !_animUpdate_2[side]){
 8001810:	4a2b      	ldr	r2, [pc, #172]	; (80018c0 <D_Slider_LightingUpdate+0x668>)
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001818:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 800181c:	dd58      	ble.n	80018d0 <D_Slider_LightingUpdate+0x678>
 800181e:	4a28      	ldr	r2, [pc, #160]	; (80018c0 <D_Slider_LightingUpdate+0x668>)
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 800182a:	dc51      	bgt.n	80018d0 <D_Slider_LightingUpdate+0x678>
 800182c:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <D_Slider_LightingUpdate+0x670>)
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	4413      	add	r3, r2
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d048      	beq.n	80018d0 <D_Slider_LightingUpdate+0x678>
				_animUpdate_1[side] = false;
 800183e:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <D_Slider_LightingUpdate+0x66c>)
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	4413      	add	r3, r2
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8001848:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <D_Slider_LightingUpdate+0x670>)
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	4413      	add	r3, r2
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8001852:	4a1e      	ldr	r2, [pc, #120]	; (80018cc <D_Slider_LightingUpdate+0x674>)
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	4817      	ldr	r0, [pc, #92]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 800185c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800185e:	461a      	mov	r2, r3
 8001860:	0052      	lsls	r2, r2, #1
 8001862:	441a      	add	r2, r3
 8001864:	460b      	mov	r3, r1
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	1a5b      	subs	r3, r3, r1
 800186a:	4413      	add	r3, r2
 800186c:	4403      	add	r3, r0
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = false;
 8001872:	4a16      	ldr	r2, [pc, #88]	; (80018cc <D_Slider_LightingUpdate+0x674>)
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	4413      	add	r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	480f      	ldr	r0, [pc, #60]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 800187c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800187e:	461a      	mov	r2, r3
 8001880:	0052      	lsls	r2, r2, #1
 8001882:	441a      	add	r2, r3
 8001884:	460b      	mov	r3, r1
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	1a5b      	subs	r3, r3, r1
 800188a:	4413      	add	r3, r2
 800188c:	4403      	add	r3, r0
 800188e:	3301      	adds	r3, #1
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = false;
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <D_Slider_LightingUpdate+0x674>)
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	4413      	add	r3, r2
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4806      	ldr	r0, [pc, #24]	; (80018b8 <D_Slider_LightingUpdate+0x660>)
 800189e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018a0:	461a      	mov	r2, r3
 80018a2:	0052      	lsls	r2, r2, #1
 80018a4:	441a      	add	r2, r3
 80018a6:	460b      	mov	r3, r1
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	1a5b      	subs	r3, r3, r1
 80018ac:	4413      	add	r3, r2
 80018ae:	4403      	add	r3, r0
 80018b0:	3302      	adds	r3, #2
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	e00b      	b.n	80018d0 <D_Slider_LightingUpdate+0x678>
 80018b8:	20000314 	.word	0x20000314
 80018bc:	20000308 	.word	0x20000308
 80018c0:	200002f4 	.word	0x200002f4
 80018c4:	2000030c 	.word	0x2000030c
 80018c8:	20000310 	.word	0x20000310
 80018cc:	200002e0 	.word	0x200002e0
			}
			if(updateCount[side] >= 475 &&updateCount[side] < 650 && !_animUpdate_1[side]){
 80018d0:	4a35      	ldr	r2, [pc, #212]	; (80019a8 <D_Slider_LightingUpdate+0x750>)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d8:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 80018dc:	dd4c      	ble.n	8001978 <D_Slider_LightingUpdate+0x720>
 80018de:	4a32      	ldr	r2, [pc, #200]	; (80019a8 <D_Slider_LightingUpdate+0x750>)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e6:	f240 2289 	movw	r2, #649	; 0x289
 80018ea:	4293      	cmp	r3, r2
 80018ec:	dc44      	bgt.n	8001978 <D_Slider_LightingUpdate+0x720>
 80018ee:	4a2f      	ldr	r2, [pc, #188]	; (80019ac <D_Slider_LightingUpdate+0x754>)
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	f083 0301 	eor.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d03b      	beq.n	8001978 <D_Slider_LightingUpdate+0x720>
				_animUpdate_1[side] = true;
 8001900:	4a2a      	ldr	r2, [pc, #168]	; (80019ac <D_Slider_LightingUpdate+0x754>)
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	4413      	add	r3, r2
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 800190a:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <D_Slider_LightingUpdate+0x758>)
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	4413      	add	r3, r2
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8001914:	4a27      	ldr	r2, [pc, #156]	; (80019b4 <D_Slider_LightingUpdate+0x75c>)
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	4413      	add	r3, r2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4826      	ldr	r0, [pc, #152]	; (80019b8 <D_Slider_LightingUpdate+0x760>)
 800191e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001920:	461a      	mov	r2, r3
 8001922:	0052      	lsls	r2, r2, #1
 8001924:	441a      	add	r2, r3
 8001926:	460b      	mov	r3, r1
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	1a5b      	subs	r3, r3, r1
 800192c:	4413      	add	r3, r2
 800192e:	4403      	add	r3, r0
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001934:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <D_Slider_LightingUpdate+0x75c>)
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	4413      	add	r3, r2
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	481e      	ldr	r0, [pc, #120]	; (80019b8 <D_Slider_LightingUpdate+0x760>)
 800193e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001940:	461a      	mov	r2, r3
 8001942:	0052      	lsls	r2, r2, #1
 8001944:	441a      	add	r2, r3
 8001946:	460b      	mov	r3, r1
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	1a5b      	subs	r3, r3, r1
 800194c:	4413      	add	r3, r2
 800194e:	4403      	add	r3, r0
 8001950:	3301      	adds	r3, #1
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001956:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <D_Slider_LightingUpdate+0x75c>)
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	4413      	add	r3, r2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	4816      	ldr	r0, [pc, #88]	; (80019b8 <D_Slider_LightingUpdate+0x760>)
 8001960:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001962:	461a      	mov	r2, r3
 8001964:	0052      	lsls	r2, r2, #1
 8001966:	441a      	add	r2, r3
 8001968:	460b      	mov	r3, r1
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	1a5b      	subs	r3, r3, r1
 800196e:	4413      	add	r3, r2
 8001970:	4403      	add	r3, r0
 8001972:	3302      	adds	r3, #2
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
			}

			if(updateCount[side] > 650) LightingMode[side] = SL_NORMAL_FLASH;
 8001978:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <D_Slider_LightingUpdate+0x750>)
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	f240 228a 	movw	r2, #650	; 0x28a
 8001984:	4293      	cmp	r3, r2
 8001986:	f340 83d8 	ble.w	800213a <D_Slider_LightingUpdate+0xee2>
 800198a:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <D_Slider_LightingUpdate+0x764>)
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	4413      	add	r3, r2
 8001990:	2202      	movs	r2, #2
 8001992:	701a      	strb	r2, [r3, #0]

			break;
 8001994:	e3d1      	b.n	800213a <D_Slider_LightingUpdate+0xee2>

		case SL_POCKET_IN_DIA:
			if(_changeMode[side]){
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <D_Slider_LightingUpdate+0x768>)
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d044      	beq.n	8001a2c <D_Slider_LightingUpdate+0x7d4>
				for(int i=0; i<5; i++){
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e039      	b.n	8001a1c <D_Slider_LightingUpdate+0x7c4>
 80019a8:	200002f4 	.word	0x200002f4
 80019ac:	2000030c 	.word	0x2000030c
 80019b0:	20000310 	.word	0x20000310
 80019b4:	200002e0 	.word	0x200002e0
 80019b8:	20000314 	.word	0x20000314
 80019bc:	200002dc 	.word	0x200002dc
 80019c0:	20000308 	.word	0x20000308
					slideColor[side][i][0] = false;
 80019c4:	48ba      	ldr	r0, [pc, #744]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019ca:	461a      	mov	r2, r3
 80019cc:	0052      	lsls	r2, r2, #1
 80019ce:	441a      	add	r2, r3
 80019d0:	460b      	mov	r3, r1
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	1a5b      	subs	r3, r3, r1
 80019d6:	4413      	add	r3, r2
 80019d8:	4403      	add	r3, r0
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 80019de:	48b4      	ldr	r0, [pc, #720]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019e4:	461a      	mov	r2, r3
 80019e6:	0052      	lsls	r2, r2, #1
 80019e8:	441a      	add	r2, r3
 80019ea:	460b      	mov	r3, r1
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	1a5b      	subs	r3, r3, r1
 80019f0:	4413      	add	r3, r2
 80019f2:	4403      	add	r3, r0
 80019f4:	3301      	adds	r3, #1
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 80019fa:	48ad      	ldr	r0, [pc, #692]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a00:	461a      	mov	r2, r3
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	441a      	add	r2, r3
 8001a06:	460b      	mov	r3, r1
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	1a5b      	subs	r3, r3, r1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4403      	add	r3, r0
 8001a10:	3302      	adds	r3, #2
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	ddd0      	ble.n	80019c4 <D_Slider_LightingUpdate+0x76c>
				}
				_changeMode[side] = false;
 8001a22:	4aa4      	ldr	r2, [pc, #656]	; (8001cb4 <D_Slider_LightingUpdate+0xa5c>)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	4413      	add	r3, r2
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] < 100 && !_animUpdate_1[side]){
 8001a2c:	4aa2      	ldr	r2, [pc, #648]	; (8001cb8 <D_Slider_LightingUpdate+0xa60>)
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a34:	2b63      	cmp	r3, #99	; 0x63
 8001a36:	dc44      	bgt.n	8001ac2 <D_Slider_LightingUpdate+0x86a>
 8001a38:	4aa0      	ldr	r2, [pc, #640]	; (8001cbc <D_Slider_LightingUpdate+0xa64>)
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	4413      	add	r3, r2
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	f083 0301 	eor.w	r3, r3, #1
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d03b      	beq.n	8001ac2 <D_Slider_LightingUpdate+0x86a>
				_animUpdate_1[side] = true;
 8001a4a:	4a9c      	ldr	r2, [pc, #624]	; (8001cbc <D_Slider_LightingUpdate+0xa64>)
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	4413      	add	r3, r2
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8001a54:	4a9a      	ldr	r2, [pc, #616]	; (8001cc0 <D_Slider_LightingUpdate+0xa68>)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	4413      	add	r3, r2
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8001a5e:	4a99      	ldr	r2, [pc, #612]	; (8001cc4 <D_Slider_LightingUpdate+0xa6c>)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	4892      	ldr	r0, [pc, #584]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 8001a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	0052      	lsls	r2, r2, #1
 8001a6e:	441a      	add	r2, r3
 8001a70:	460b      	mov	r3, r1
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	1a5b      	subs	r3, r3, r1
 8001a76:	4413      	add	r3, r2
 8001a78:	4403      	add	r3, r0
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001a7e:	4a91      	ldr	r2, [pc, #580]	; (8001cc4 <D_Slider_LightingUpdate+0xa6c>)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	488a      	ldr	r0, [pc, #552]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 8001a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	0052      	lsls	r2, r2, #1
 8001a8e:	441a      	add	r2, r3
 8001a90:	460b      	mov	r3, r1
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	1a5b      	subs	r3, r3, r1
 8001a96:	4413      	add	r3, r2
 8001a98:	4403      	add	r3, r0
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001aa0:	4a88      	ldr	r2, [pc, #544]	; (8001cc4 <D_Slider_LightingUpdate+0xa6c>)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	4413      	add	r3, r2
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4881      	ldr	r0, [pc, #516]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 8001aaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aac:	461a      	mov	r2, r3
 8001aae:	0052      	lsls	r2, r2, #1
 8001ab0:	441a      	add	r2, r3
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	1a5b      	subs	r3, r3, r1
 8001ab8:	4413      	add	r3, r2
 8001aba:	4403      	add	r3, r0
 8001abc:	3302      	adds	r3, #2
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 100 && updateCount[side] < 180 && !_animUpdate_2[side]){
 8001ac2:	4a7d      	ldr	r2, [pc, #500]	; (8001cb8 <D_Slider_LightingUpdate+0xa60>)
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aca:	2b63      	cmp	r3, #99	; 0x63
 8001acc:	dd4a      	ble.n	8001b64 <D_Slider_LightingUpdate+0x90c>
 8001ace:	4a7a      	ldr	r2, [pc, #488]	; (8001cb8 <D_Slider_LightingUpdate+0xa60>)
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad6:	2bb3      	cmp	r3, #179	; 0xb3
 8001ad8:	dc44      	bgt.n	8001b64 <D_Slider_LightingUpdate+0x90c>
 8001ada:	4a79      	ldr	r2, [pc, #484]	; (8001cc0 <D_Slider_LightingUpdate+0xa68>)
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	4413      	add	r3, r2
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	f083 0301 	eor.w	r3, r3, #1
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d03b      	beq.n	8001b64 <D_Slider_LightingUpdate+0x90c>
				_animUpdate_1[side] = false;
 8001aec:	4a73      	ldr	r2, [pc, #460]	; (8001cbc <D_Slider_LightingUpdate+0xa64>)
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	4413      	add	r3, r2
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8001af6:	4a72      	ldr	r2, [pc, #456]	; (8001cc0 <D_Slider_LightingUpdate+0xa68>)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	4413      	add	r3, r2
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8001b00:	4a70      	ldr	r2, [pc, #448]	; (8001cc4 <D_Slider_LightingUpdate+0xa6c>)
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	4413      	add	r3, r2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4869      	ldr	r0, [pc, #420]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 8001b0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	0052      	lsls	r2, r2, #1
 8001b10:	441a      	add	r2, r3
 8001b12:	460b      	mov	r3, r1
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a5b      	subs	r3, r3, r1
 8001b18:	4413      	add	r3, r2
 8001b1a:	4403      	add	r3, r0
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001b20:	4a68      	ldr	r2, [pc, #416]	; (8001cc4 <D_Slider_LightingUpdate+0xa6c>)
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4861      	ldr	r0, [pc, #388]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 8001b2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	0052      	lsls	r2, r2, #1
 8001b30:	441a      	add	r2, r3
 8001b32:	460b      	mov	r3, r1
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	1a5b      	subs	r3, r3, r1
 8001b38:	4413      	add	r3, r2
 8001b3a:	4403      	add	r3, r0
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001b42:	4a60      	ldr	r2, [pc, #384]	; (8001cc4 <D_Slider_LightingUpdate+0xa6c>)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	4413      	add	r3, r2
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	4859      	ldr	r0, [pc, #356]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 8001b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b4e:	461a      	mov	r2, r3
 8001b50:	0052      	lsls	r2, r2, #1
 8001b52:	441a      	add	r2, r3
 8001b54:	460b      	mov	r3, r1
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	1a5b      	subs	r3, r3, r1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4403      	add	r3, r0
 8001b5e:	3302      	adds	r3, #2
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 180 && updateCount[side] < 300 && !_animUpdate_1[side]){
 8001b64:	4a54      	ldr	r2, [pc, #336]	; (8001cb8 <D_Slider_LightingUpdate+0xa60>)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6c:	2bb3      	cmp	r3, #179	; 0xb3
 8001b6e:	dd4b      	ble.n	8001c08 <D_Slider_LightingUpdate+0x9b0>
 8001b70:	4a51      	ldr	r2, [pc, #324]	; (8001cb8 <D_Slider_LightingUpdate+0xa60>)
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b7c:	da44      	bge.n	8001c08 <D_Slider_LightingUpdate+0x9b0>
 8001b7e:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <D_Slider_LightingUpdate+0xa64>)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	4413      	add	r3, r2
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	f083 0301 	eor.w	r3, r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d03b      	beq.n	8001c08 <D_Slider_LightingUpdate+0x9b0>
				_animUpdate_1[side] = true;
 8001b90:	4a4a      	ldr	r2, [pc, #296]	; (8001cbc <D_Slider_LightingUpdate+0xa64>)
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	4413      	add	r3, r2
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8001b9a:	4a49      	ldr	r2, [pc, #292]	; (8001cc0 <D_Slider_LightingUpdate+0xa68>)
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	4413      	add	r3, r2
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8001ba4:	4a47      	ldr	r2, [pc, #284]	; (8001cc4 <D_Slider_LightingUpdate+0xa6c>)
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	4413      	add	r3, r2
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4840      	ldr	r0, [pc, #256]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 8001bae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	0052      	lsls	r2, r2, #1
 8001bb4:	441a      	add	r2, r3
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	1a5b      	subs	r3, r3, r1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4403      	add	r3, r0
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001bc4:	4a3f      	ldr	r2, [pc, #252]	; (8001cc4 <D_Slider_LightingUpdate+0xa6c>)
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	4413      	add	r3, r2
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4838      	ldr	r0, [pc, #224]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 8001bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	0052      	lsls	r2, r2, #1
 8001bd4:	441a      	add	r2, r3
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	1a5b      	subs	r3, r3, r1
 8001bdc:	4413      	add	r3, r2
 8001bde:	4403      	add	r3, r0
 8001be0:	3301      	adds	r3, #1
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001be6:	4a37      	ldr	r2, [pc, #220]	; (8001cc4 <D_Slider_LightingUpdate+0xa6c>)
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4830      	ldr	r0, [pc, #192]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 8001bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	0052      	lsls	r2, r2, #1
 8001bf6:	441a      	add	r2, r3
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	1a5b      	subs	r3, r3, r1
 8001bfe:	4413      	add	r3, r2
 8001c00:	4403      	add	r3, r0
 8001c02:	3302      	adds	r3, #2
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 300 &&updateCount[side] < 380 && !_animUpdate_2[side]){
 8001c08:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <D_Slider_LightingUpdate+0xa60>)
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c14:	db58      	blt.n	8001cc8 <D_Slider_LightingUpdate+0xa70>
 8001c16:	4a28      	ldr	r2, [pc, #160]	; (8001cb8 <D_Slider_LightingUpdate+0xa60>)
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8001c22:	da51      	bge.n	8001cc8 <D_Slider_LightingUpdate+0xa70>
 8001c24:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <D_Slider_LightingUpdate+0xa68>)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	4413      	add	r3, r2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d048      	beq.n	8001cc8 <D_Slider_LightingUpdate+0xa70>
				_animUpdate_1[side] = false;
 8001c36:	4a21      	ldr	r2, [pc, #132]	; (8001cbc <D_Slider_LightingUpdate+0xa64>)
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	4413      	add	r3, r2
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8001c40:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <D_Slider_LightingUpdate+0xa68>)
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	4413      	add	r3, r2
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <D_Slider_LightingUpdate+0xa6c>)
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	4413      	add	r3, r2
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	4817      	ldr	r0, [pc, #92]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 8001c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c56:	461a      	mov	r2, r3
 8001c58:	0052      	lsls	r2, r2, #1
 8001c5a:	441a      	add	r2, r3
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	1a5b      	subs	r3, r3, r1
 8001c62:	4413      	add	r3, r2
 8001c64:	4403      	add	r3, r0
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001c6a:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <D_Slider_LightingUpdate+0xa6c>)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 8001c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c76:	461a      	mov	r2, r3
 8001c78:	0052      	lsls	r2, r2, #1
 8001c7a:	441a      	add	r2, r3
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	1a5b      	subs	r3, r3, r1
 8001c82:	4413      	add	r3, r2
 8001c84:	4403      	add	r3, r0
 8001c86:	3301      	adds	r3, #1
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <D_Slider_LightingUpdate+0xa6c>)
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	4413      	add	r3, r2
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <D_Slider_LightingUpdate+0xa58>)
 8001c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c98:	461a      	mov	r2, r3
 8001c9a:	0052      	lsls	r2, r2, #1
 8001c9c:	441a      	add	r2, r3
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	1a5b      	subs	r3, r3, r1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4403      	add	r3, r0
 8001ca8:	3302      	adds	r3, #2
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
 8001cae:	e00b      	b.n	8001cc8 <D_Slider_LightingUpdate+0xa70>
 8001cb0:	20000314 	.word	0x20000314
 8001cb4:	20000308 	.word	0x20000308
 8001cb8:	200002f4 	.word	0x200002f4
 8001cbc:	2000030c 	.word	0x2000030c
 8001cc0:	20000310 	.word	0x20000310
 8001cc4:	200002e0 	.word	0x200002e0
			}
			if(updateCount[side] >= 380 &&updateCount[side] < 500 && !_animUpdate_1[side]){
 8001cc8:	4a87      	ldr	r2, [pc, #540]	; (8001ee8 <D_Slider_LightingUpdate+0xc90>)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd0:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8001cd4:	db4b      	blt.n	8001d6e <D_Slider_LightingUpdate+0xb16>
 8001cd6:	4a84      	ldr	r2, [pc, #528]	; (8001ee8 <D_Slider_LightingUpdate+0xc90>)
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ce2:	da44      	bge.n	8001d6e <D_Slider_LightingUpdate+0xb16>
 8001ce4:	4a81      	ldr	r2, [pc, #516]	; (8001eec <D_Slider_LightingUpdate+0xc94>)
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	f083 0301 	eor.w	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d03b      	beq.n	8001d6e <D_Slider_LightingUpdate+0xb16>
				_animUpdate_1[side] = true;
 8001cf6:	4a7d      	ldr	r2, [pc, #500]	; (8001eec <D_Slider_LightingUpdate+0xc94>)
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	4413      	add	r3, r2
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8001d00:	4a7b      	ldr	r2, [pc, #492]	; (8001ef0 <D_Slider_LightingUpdate+0xc98>)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	4413      	add	r3, r2
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8001d0a:	4a7a      	ldr	r2, [pc, #488]	; (8001ef4 <D_Slider_LightingUpdate+0xc9c>)
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	4413      	add	r3, r2
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	4879      	ldr	r0, [pc, #484]	; (8001ef8 <D_Slider_LightingUpdate+0xca0>)
 8001d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d16:	461a      	mov	r2, r3
 8001d18:	0052      	lsls	r2, r2, #1
 8001d1a:	441a      	add	r2, r3
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	1a5b      	subs	r3, r3, r1
 8001d22:	4413      	add	r3, r2
 8001d24:	4403      	add	r3, r0
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001d2a:	4a72      	ldr	r2, [pc, #456]	; (8001ef4 <D_Slider_LightingUpdate+0xc9c>)
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	4413      	add	r3, r2
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	4871      	ldr	r0, [pc, #452]	; (8001ef8 <D_Slider_LightingUpdate+0xca0>)
 8001d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d36:	461a      	mov	r2, r3
 8001d38:	0052      	lsls	r2, r2, #1
 8001d3a:	441a      	add	r2, r3
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	1a5b      	subs	r3, r3, r1
 8001d42:	4413      	add	r3, r2
 8001d44:	4403      	add	r3, r0
 8001d46:	3301      	adds	r3, #1
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001d4c:	4a69      	ldr	r2, [pc, #420]	; (8001ef4 <D_Slider_LightingUpdate+0xc9c>)
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	4413      	add	r3, r2
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4868      	ldr	r0, [pc, #416]	; (8001ef8 <D_Slider_LightingUpdate+0xca0>)
 8001d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d58:	461a      	mov	r2, r3
 8001d5a:	0052      	lsls	r2, r2, #1
 8001d5c:	441a      	add	r2, r3
 8001d5e:	460b      	mov	r3, r1
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	1a5b      	subs	r3, r3, r1
 8001d64:	4413      	add	r3, r2
 8001d66:	4403      	add	r3, r0
 8001d68:	3302      	adds	r3, #2
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 500 &&updateCount[side] < 580 && !_animUpdate_2[side]){
 8001d6e:	4a5e      	ldr	r2, [pc, #376]	; (8001ee8 <D_Slider_LightingUpdate+0xc90>)
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d7a:	db4b      	blt.n	8001e14 <D_Slider_LightingUpdate+0xbbc>
 8001d7c:	4a5a      	ldr	r2, [pc, #360]	; (8001ee8 <D_Slider_LightingUpdate+0xc90>)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8001d88:	da44      	bge.n	8001e14 <D_Slider_LightingUpdate+0xbbc>
 8001d8a:	4a59      	ldr	r2, [pc, #356]	; (8001ef0 <D_Slider_LightingUpdate+0xc98>)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	f083 0301 	eor.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d03b      	beq.n	8001e14 <D_Slider_LightingUpdate+0xbbc>
				_animUpdate_1[side] = false;
 8001d9c:	4a53      	ldr	r2, [pc, #332]	; (8001eec <D_Slider_LightingUpdate+0xc94>)
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	4413      	add	r3, r2
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8001da6:	4a52      	ldr	r2, [pc, #328]	; (8001ef0 <D_Slider_LightingUpdate+0xc98>)
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	4413      	add	r3, r2
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8001db0:	4a50      	ldr	r2, [pc, #320]	; (8001ef4 <D_Slider_LightingUpdate+0xc9c>)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	484f      	ldr	r0, [pc, #316]	; (8001ef8 <D_Slider_LightingUpdate+0xca0>)
 8001dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	0052      	lsls	r2, r2, #1
 8001dc0:	441a      	add	r2, r3
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a5b      	subs	r3, r3, r1
 8001dc8:	4413      	add	r3, r2
 8001dca:	4403      	add	r3, r0
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001dd0:	4a48      	ldr	r2, [pc, #288]	; (8001ef4 <D_Slider_LightingUpdate+0xc9c>)
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	4413      	add	r3, r2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4847      	ldr	r0, [pc, #284]	; (8001ef8 <D_Slider_LightingUpdate+0xca0>)
 8001dda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ddc:	461a      	mov	r2, r3
 8001dde:	0052      	lsls	r2, r2, #1
 8001de0:	441a      	add	r2, r3
 8001de2:	460b      	mov	r3, r1
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	1a5b      	subs	r3, r3, r1
 8001de8:	4413      	add	r3, r2
 8001dea:	4403      	add	r3, r0
 8001dec:	3301      	adds	r3, #1
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001df2:	4a40      	ldr	r2, [pc, #256]	; (8001ef4 <D_Slider_LightingUpdate+0xc9c>)
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	4413      	add	r3, r2
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	483f      	ldr	r0, [pc, #252]	; (8001ef8 <D_Slider_LightingUpdate+0xca0>)
 8001dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dfe:	461a      	mov	r2, r3
 8001e00:	0052      	lsls	r2, r2, #1
 8001e02:	441a      	add	r2, r3
 8001e04:	460b      	mov	r3, r1
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	1a5b      	subs	r3, r3, r1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4403      	add	r3, r0
 8001e0e:	3302      	adds	r3, #2
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 580 &&updateCount[side] < 700 && !_animUpdate_1[side]){
 8001e14:	4a34      	ldr	r2, [pc, #208]	; (8001ee8 <D_Slider_LightingUpdate+0xc90>)
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1c:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8001e20:	db4b      	blt.n	8001eba <D_Slider_LightingUpdate+0xc62>
 8001e22:	4a31      	ldr	r2, [pc, #196]	; (8001ee8 <D_Slider_LightingUpdate+0xc90>)
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001e2e:	da44      	bge.n	8001eba <D_Slider_LightingUpdate+0xc62>
 8001e30:	4a2e      	ldr	r2, [pc, #184]	; (8001eec <D_Slider_LightingUpdate+0xc94>)
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	4413      	add	r3, r2
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	f083 0301 	eor.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d03b      	beq.n	8001eba <D_Slider_LightingUpdate+0xc62>
				_animUpdate_1[side] = true;
 8001e42:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <D_Slider_LightingUpdate+0xc94>)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	4413      	add	r3, r2
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8001e4c:	4a28      	ldr	r2, [pc, #160]	; (8001ef0 <D_Slider_LightingUpdate+0xc98>)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	4413      	add	r3, r2
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8001e56:	4a27      	ldr	r2, [pc, #156]	; (8001ef4 <D_Slider_LightingUpdate+0xc9c>)
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	4413      	add	r3, r2
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	4826      	ldr	r0, [pc, #152]	; (8001ef8 <D_Slider_LightingUpdate+0xca0>)
 8001e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e62:	461a      	mov	r2, r3
 8001e64:	0052      	lsls	r2, r2, #1
 8001e66:	441a      	add	r2, r3
 8001e68:	460b      	mov	r3, r1
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	1a5b      	subs	r3, r3, r1
 8001e6e:	4413      	add	r3, r2
 8001e70:	4403      	add	r3, r0
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001e76:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <D_Slider_LightingUpdate+0xc9c>)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	4413      	add	r3, r2
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	481e      	ldr	r0, [pc, #120]	; (8001ef8 <D_Slider_LightingUpdate+0xca0>)
 8001e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e82:	461a      	mov	r2, r3
 8001e84:	0052      	lsls	r2, r2, #1
 8001e86:	441a      	add	r2, r3
 8001e88:	460b      	mov	r3, r1
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	1a5b      	subs	r3, r3, r1
 8001e8e:	4413      	add	r3, r2
 8001e90:	4403      	add	r3, r0
 8001e92:	3301      	adds	r3, #1
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001e98:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <D_Slider_LightingUpdate+0xc9c>)
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4815      	ldr	r0, [pc, #84]	; (8001ef8 <D_Slider_LightingUpdate+0xca0>)
 8001ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	0052      	lsls	r2, r2, #1
 8001ea8:	441a      	add	r2, r3
 8001eaa:	460b      	mov	r3, r1
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	1a5b      	subs	r3, r3, r1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4403      	add	r3, r0
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
			}

			if(updateCount[side] > 700) LightingMode[side] = SL_NORMAL_FLASH;
 8001eba:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <D_Slider_LightingUpdate+0xc90>)
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001ec6:	f340 813a 	ble.w	800213e <D_Slider_LightingUpdate+0xee6>
 8001eca:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <D_Slider_LightingUpdate+0xca4>)
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	4413      	add	r3, r2
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	701a      	strb	r2, [r3, #0]

			break;
 8001ed4:	e133      	b.n	800213e <D_Slider_LightingUpdate+0xee6>

		case SL_POCKET_IN_UP:
			if(_changeMode[side]){
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <D_Slider_LightingUpdate+0xca8>)
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	4413      	add	r3, r2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d049      	beq.n	8001f76 <D_Slider_LightingUpdate+0xd1e>
				for(int i=0; i<5; i++){
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	e039      	b.n	8001f5c <D_Slider_LightingUpdate+0xd04>
 8001ee8:	200002f4 	.word	0x200002f4
 8001eec:	2000030c 	.word	0x2000030c
 8001ef0:	20000310 	.word	0x20000310
 8001ef4:	200002e0 	.word	0x200002e0
 8001ef8:	20000314 	.word	0x20000314
 8001efc:	200002dc 	.word	0x200002dc
 8001f00:	20000308 	.word	0x20000308
					slideColor[side][i][0] = false;
 8001f04:	4899      	ldr	r0, [pc, #612]	; (800216c <D_Slider_LightingUpdate+0xf14>)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	0052      	lsls	r2, r2, #1
 8001f0e:	441a      	add	r2, r3
 8001f10:	460b      	mov	r3, r1
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	1a5b      	subs	r3, r3, r1
 8001f16:	4413      	add	r3, r2
 8001f18:	4403      	add	r3, r0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 8001f1e:	4893      	ldr	r0, [pc, #588]	; (800216c <D_Slider_LightingUpdate+0xf14>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f24:	461a      	mov	r2, r3
 8001f26:	0052      	lsls	r2, r2, #1
 8001f28:	441a      	add	r2, r3
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	1a5b      	subs	r3, r3, r1
 8001f30:	4413      	add	r3, r2
 8001f32:	4403      	add	r3, r0
 8001f34:	3301      	adds	r3, #1
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 8001f3a:	488c      	ldr	r0, [pc, #560]	; (800216c <D_Slider_LightingUpdate+0xf14>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f40:	461a      	mov	r2, r3
 8001f42:	0052      	lsls	r2, r2, #1
 8001f44:	441a      	add	r2, r3
 8001f46:	460b      	mov	r3, r1
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	1a5b      	subs	r3, r3, r1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4403      	add	r3, r0
 8001f50:	3302      	adds	r3, #2
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	ddd0      	ble.n	8001f04 <D_Slider_LightingUpdate+0xcac>
				}
				_changeMode[side] = false;
 8001f62:	4a83      	ldr	r2, [pc, #524]	; (8002170 <D_Slider_LightingUpdate+0xf18>)
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	4413      	add	r3, r2
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
				counter1[side] = 0;
 8001f6c:	4a81      	ldr	r2, [pc, #516]	; (8002174 <D_Slider_LightingUpdate+0xf1c>)
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	2100      	movs	r1, #0
 8001f72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if(updateCount[side] >= 100 + counter1[side]*200 && updateCount[side] < 180 + counter1[side]*200 && !_animUpdate_1[side]){
 8001f76:	4a7f      	ldr	r2, [pc, #508]	; (8002174 <D_Slider_LightingUpdate+0xf1c>)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7e:	22c8      	movs	r2, #200	; 0xc8
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8001f88:	497b      	ldr	r1, [pc, #492]	; (8002178 <D_Slider_LightingUpdate+0xf20>)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	da53      	bge.n	800203c <D_Slider_LightingUpdate+0xde4>
 8001f94:	4a77      	ldr	r2, [pc, #476]	; (8002174 <D_Slider_LightingUpdate+0xf1c>)
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9c:	22c8      	movs	r2, #200	; 0xc8
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 8001fa6:	4974      	ldr	r1, [pc, #464]	; (8002178 <D_Slider_LightingUpdate+0xf20>)
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	db44      	blt.n	800203c <D_Slider_LightingUpdate+0xde4>
 8001fb2:	4a72      	ldr	r2, [pc, #456]	; (800217c <D_Slider_LightingUpdate+0xf24>)
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	4413      	add	r3, r2
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	f083 0301 	eor.w	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d03b      	beq.n	800203c <D_Slider_LightingUpdate+0xde4>
				_animUpdate_1[side] = true;
 8001fc4:	4a6d      	ldr	r2, [pc, #436]	; (800217c <D_Slider_LightingUpdate+0xf24>)
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	4413      	add	r3, r2
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8001fce:	4a6c      	ldr	r2, [pc, #432]	; (8002180 <D_Slider_LightingUpdate+0xf28>)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	4413      	add	r3, r2
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8001fd8:	4a6a      	ldr	r2, [pc, #424]	; (8002184 <D_Slider_LightingUpdate+0xf2c>)
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	4413      	add	r3, r2
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4862      	ldr	r0, [pc, #392]	; (800216c <D_Slider_LightingUpdate+0xf14>)
 8001fe2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	0052      	lsls	r2, r2, #1
 8001fe8:	441a      	add	r2, r3
 8001fea:	460b      	mov	r3, r1
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	1a5b      	subs	r3, r3, r1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4403      	add	r3, r0
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001ff8:	4a62      	ldr	r2, [pc, #392]	; (8002184 <D_Slider_LightingUpdate+0xf2c>)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	485a      	ldr	r0, [pc, #360]	; (800216c <D_Slider_LightingUpdate+0xf14>)
 8002002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002004:	461a      	mov	r2, r3
 8002006:	0052      	lsls	r2, r2, #1
 8002008:	441a      	add	r2, r3
 800200a:	460b      	mov	r3, r1
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a5b      	subs	r3, r3, r1
 8002010:	4413      	add	r3, r2
 8002012:	4403      	add	r3, r0
 8002014:	3301      	adds	r3, #1
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 800201a:	4a5a      	ldr	r2, [pc, #360]	; (8002184 <D_Slider_LightingUpdate+0xf2c>)
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	4413      	add	r3, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4852      	ldr	r0, [pc, #328]	; (800216c <D_Slider_LightingUpdate+0xf14>)
 8002024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002026:	461a      	mov	r2, r3
 8002028:	0052      	lsls	r2, r2, #1
 800202a:	441a      	add	r2, r3
 800202c:	460b      	mov	r3, r1
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	1a5b      	subs	r3, r3, r1
 8002032:	4413      	add	r3, r2
 8002034:	4403      	add	r3, r0
 8002036:	3302      	adds	r3, #2
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 180 + counter1[side]*200 && updateCount[side] < 300 + counter1[side]*200 && !_animUpdate_2[side]){
 800203c:	4a4d      	ldr	r2, [pc, #308]	; (8002174 <D_Slider_LightingUpdate+0xf1c>)
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002044:	22c8      	movs	r2, #200	; 0xc8
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 800204e:	494a      	ldr	r1, [pc, #296]	; (8002178 <D_Slider_LightingUpdate+0xf20>)
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002056:	429a      	cmp	r2, r3
 8002058:	da5c      	bge.n	8002114 <D_Slider_LightingUpdate+0xebc>
 800205a:	4a46      	ldr	r2, [pc, #280]	; (8002174 <D_Slider_LightingUpdate+0xf1c>)
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002062:	22c8      	movs	r2, #200	; 0xc8
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	f203 122b 	addw	r2, r3, #299	; 0x12b
 800206c:	4942      	ldr	r1, [pc, #264]	; (8002178 <D_Slider_LightingUpdate+0xf20>)
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002074:	429a      	cmp	r2, r3
 8002076:	db4d      	blt.n	8002114 <D_Slider_LightingUpdate+0xebc>
 8002078:	4a41      	ldr	r2, [pc, #260]	; (8002180 <D_Slider_LightingUpdate+0xf28>)
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	4413      	add	r3, r2
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	f083 0301 	eor.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d044      	beq.n	8002114 <D_Slider_LightingUpdate+0xebc>
				_animUpdate_1[side] = false;
 800208a:	4a3c      	ldr	r2, [pc, #240]	; (800217c <D_Slider_LightingUpdate+0xf24>)
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	4413      	add	r3, r2
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8002094:	4a3a      	ldr	r2, [pc, #232]	; (8002180 <D_Slider_LightingUpdate+0xf28>)
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	4413      	add	r3, r2
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 800209e:	4a39      	ldr	r2, [pc, #228]	; (8002184 <D_Slider_LightingUpdate+0xf2c>)
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	4413      	add	r3, r2
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	4831      	ldr	r0, [pc, #196]	; (800216c <D_Slider_LightingUpdate+0xf14>)
 80020a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020aa:	461a      	mov	r2, r3
 80020ac:	0052      	lsls	r2, r2, #1
 80020ae:	441a      	add	r2, r3
 80020b0:	460b      	mov	r3, r1
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	1a5b      	subs	r3, r3, r1
 80020b6:	4413      	add	r3, r2
 80020b8:	4403      	add	r3, r0
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = false;
 80020be:	4a31      	ldr	r2, [pc, #196]	; (8002184 <D_Slider_LightingUpdate+0xf2c>)
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	4829      	ldr	r0, [pc, #164]	; (800216c <D_Slider_LightingUpdate+0xf14>)
 80020c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ca:	461a      	mov	r2, r3
 80020cc:	0052      	lsls	r2, r2, #1
 80020ce:	441a      	add	r2, r3
 80020d0:	460b      	mov	r3, r1
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a5b      	subs	r3, r3, r1
 80020d6:	4413      	add	r3, r2
 80020d8:	4403      	add	r3, r0
 80020da:	3301      	adds	r3, #1
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = false;
 80020e0:	4a28      	ldr	r2, [pc, #160]	; (8002184 <D_Slider_LightingUpdate+0xf2c>)
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	4413      	add	r3, r2
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4820      	ldr	r0, [pc, #128]	; (800216c <D_Slider_LightingUpdate+0xf14>)
 80020ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ec:	461a      	mov	r2, r3
 80020ee:	0052      	lsls	r2, r2, #1
 80020f0:	441a      	add	r2, r3
 80020f2:	460b      	mov	r3, r1
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	1a5b      	subs	r3, r3, r1
 80020f8:	4413      	add	r3, r2
 80020fa:	4403      	add	r3, r0
 80020fc:	3302      	adds	r3, #2
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
				counter1[side]++;
 8002102:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <D_Slider_LightingUpdate+0xf1c>)
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	4919      	ldr	r1, [pc, #100]	; (8002174 <D_Slider_LightingUpdate+0xf1c>)
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			if(updateCount[side] > 2000) LightingMode[side] = SL_NORMAL_FLASH;
 8002114:	4a18      	ldr	r2, [pc, #96]	; (8002178 <D_Slider_LightingUpdate+0xf20>)
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002120:	dd0f      	ble.n	8002142 <D_Slider_LightingUpdate+0xeea>
 8002122:	4a19      	ldr	r2, [pc, #100]	; (8002188 <D_Slider_LightingUpdate+0xf30>)
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	4413      	add	r3, r2
 8002128:	2202      	movs	r2, #2
 800212a:	701a      	strb	r2, [r3, #0]

			break;
 800212c:	e009      	b.n	8002142 <D_Slider_LightingUpdate+0xeea>
			break;
 800212e:	bf00      	nop
 8002130:	e008      	b.n	8002144 <D_Slider_LightingUpdate+0xeec>
			break;
 8002132:	bf00      	nop
 8002134:	e006      	b.n	8002144 <D_Slider_LightingUpdate+0xeec>
			break;
 8002136:	bf00      	nop
 8002138:	e004      	b.n	8002144 <D_Slider_LightingUpdate+0xeec>
			break;
 800213a:	bf00      	nop
 800213c:	e002      	b.n	8002144 <D_Slider_LightingUpdate+0xeec>
			break;
 800213e:	bf00      	nop
 8002140:	e000      	b.n	8002144 <D_Slider_LightingUpdate+0xeec>
			break;
 8002142:	bf00      	nop
	for(int side = 0; side < 2; side++){
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	3301      	adds	r3, #1
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	2b01      	cmp	r3, #1
 800214e:	f77f a88d 	ble.w	800126c <D_Slider_LightingUpdate+0x14>
		}
	}

	recentUpdateCount = G_System_counter;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <D_Slider_LightingUpdate+0xf34>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <D_Slider_LightingUpdate+0xf38>)
 800215a:	601a      	str	r2, [r3, #0]
	D_Slider_SetColorData(slideColor[0], slideColor[1]);
 800215c:	490d      	ldr	r1, [pc, #52]	; (8002194 <D_Slider_LightingUpdate+0xf3c>)
 800215e:	4803      	ldr	r0, [pc, #12]	; (800216c <D_Slider_LightingUpdate+0xf14>)
 8002160:	f000 f96c 	bl	800243c <D_Slider_SetColorData>
}
 8002164:	bf00      	nop
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000314 	.word	0x20000314
 8002170:	20000308 	.word	0x20000308
 8002174:	20000334 	.word	0x20000334
 8002178:	200002f4 	.word	0x200002f4
 800217c:	2000030c 	.word	0x2000030c
 8002180:	20000310 	.word	0x20000310
 8002184:	200002e0 	.word	0x200002e0
 8002188:	200002dc 	.word	0x200002dc
 800218c:	20000248 	.word	0x20000248
 8002190:	200002fc 	.word	0x200002fc
 8002194:	20000323 	.word	0x20000323

08002198 <D_Slider_GetPocketR>:

int D_Slider_GetPocketR(bool _reset){
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
	static int recentSensorCount[5] = {{0}};
	static int returnPocket = -1;
	if (_reset) {
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <D_Slider_GetPocketR+0x1e>
		returnPocket = -1;
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <D_Slider_GetPocketR+0x6c>)
 80021aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021ae:	601a      	str	r2, [r3, #0]
		return returnPocket;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <D_Slider_GetPocketR+0x6c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	e01f      	b.n	80021f6 <D_Slider_GetPocketR+0x5e>
	}
	for(int i=0; i<5; i++){
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e017      	b.n	80021ec <D_Slider_GetPocketR+0x54>
		if(SensorCount[0][i] != recentSensorCount[i]){
 80021bc:	4a12      	ldr	r2, [pc, #72]	; (8002208 <D_Slider_GetPocketR+0x70>)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021c4:	4911      	ldr	r1, [pc, #68]	; (800220c <D_Slider_GetPocketR+0x74>)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d002      	beq.n	80021d6 <D_Slider_GetPocketR+0x3e>
			returnPocket = i;
 80021d0:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <D_Slider_GetPocketR+0x6c>)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6013      	str	r3, [r2, #0]
		}
		recentSensorCount[i] = SensorCount[0][i];
 80021d6:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <D_Slider_GetPocketR+0x70>)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021de:	490b      	ldr	r1, [pc, #44]	; (800220c <D_Slider_GetPocketR+0x74>)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3301      	adds	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	dde4      	ble.n	80021bc <D_Slider_GetPocketR+0x24>
	}
	return returnPocket;
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <D_Slider_GetPocketR+0x6c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	2000000c 	.word	0x2000000c
 8002208:	200002b0 	.word	0x200002b0
 800220c:	2000033c 	.word	0x2000033c

08002210 <D_Slider_GetPocketL>:

int D_Slider_GetPocketL(bool _reset){
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
	static int recentSensorCount[5] = {{0}};
	static int returnPocket = -1;
	if (_reset) {
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <D_Slider_GetPocketL+0x1e>
		returnPocket = -1;
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <D_Slider_GetPocketL+0x70>)
 8002222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002226:	601a      	str	r2, [r3, #0]
		return returnPocket;
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <D_Slider_GetPocketL+0x70>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	e021      	b.n	8002272 <D_Slider_GetPocketL+0x62>
	}
	for(int i=0; i<5; i++){
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	e019      	b.n	8002268 <D_Slider_GetPocketL+0x58>
		if(SensorCount[1][i] != recentSensorCount[i]){
 8002234:	4a13      	ldr	r2, [pc, #76]	; (8002284 <D_Slider_GetPocketL+0x74>)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3305      	adds	r3, #5
 800223a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800223e:	4912      	ldr	r1, [pc, #72]	; (8002288 <D_Slider_GetPocketL+0x78>)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002246:	429a      	cmp	r2, r3
 8002248:	d002      	beq.n	8002250 <D_Slider_GetPocketL+0x40>
			returnPocket = i;
 800224a:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <D_Slider_GetPocketL+0x70>)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6013      	str	r3, [r2, #0]
		}
		recentSensorCount[i] = SensorCount[1][i];
 8002250:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <D_Slider_GetPocketL+0x74>)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	3305      	adds	r3, #5
 8002256:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800225a:	490b      	ldr	r1, [pc, #44]	; (8002288 <D_Slider_GetPocketL+0x78>)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3301      	adds	r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b04      	cmp	r3, #4
 800226c:	dde2      	ble.n	8002234 <D_Slider_GetPocketL+0x24>
	}
	return returnPocket;
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <D_Slider_GetPocketL+0x70>)
 8002270:	681b      	ldr	r3, [r3, #0]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000010 	.word	0x20000010
 8002284:	200002b0 	.word	0x200002b0
 8002288:	20000350 	.word	0x20000350

0800228c <D_Slider_Send>:

int D_Slider_Send(uint8_t* data, int length){
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
	if(!had_completed_tx){
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <D_Slider_Send+0x44>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f083 0301 	eor.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <D_Slider_Send+0x20>
		return -1;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022aa:	e00d      	b.n	80022c8 <D_Slider_Send+0x3c>
	}
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data, length);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4807      	ldr	r0, [pc, #28]	; (80022d4 <D_Slider_Send+0x48>)
 80022b6:	f002 fff1 	bl	800529c <HAL_UART_Transmit_DMA>
	_send = true;
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <D_Slider_Send+0x4c>)
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
	had_completed_tx = false;
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <D_Slider_Send+0x44>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
	return 0;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000008 	.word	0x20000008
 80022d4:	200008fc 	.word	0x200008fc
 80022d8:	200002d8 	.word	0x200002d8

080022dc <D_Slider_Receive>:

int D_Slider_Receive(uint8_t* data, int length){
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
	if(!had_completed_rx){
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <D_Slider_Receive+0x40>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f083 0301 	eor.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <D_Slider_Receive+0x20>
		return -1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022fa:	e00a      	b.n	8002312 <D_Slider_Receive+0x36>
	}
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)data, length);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4806      	ldr	r0, [pc, #24]	; (8002320 <D_Slider_Receive+0x44>)
 8002306:	f003 f847 	bl	8005398 <HAL_UART_Receive_DMA>
	had_completed_rx = false;
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <D_Slider_Receive+0x40>)
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
	return 0;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000009 	.word	0x20000009
 8002320:	200008fc 	.word	0x200008fc

08002324 <D_Slider_GetSensorData>:

int D_Slider_GetSensorData(int side, int num){
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
	if(side == 0){
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d104      	bne.n	800233e <D_Slider_GetSensorData+0x1a>
		return SensorCount[0][num];
 8002334:	4a07      	ldr	r2, [pc, #28]	; (8002354 <D_Slider_GetSensorData+0x30>)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233c:	e004      	b.n	8002348 <D_Slider_GetSensorData+0x24>
	}else{
		return SensorCount[1][num];
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <D_Slider_GetSensorData+0x30>)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	3305      	adds	r3, #5
 8002344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	}
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	200002b0 	.word	0x200002b0

08002358 <D_Slider_CheckData>:

void D_Slider_CheckData(uint8_t* data, int length){
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2be0      	cmp	r3, #224	; 0xe0
 8002368:	d15e      	bne.n	8002428 <D_Slider_CheckData+0xd0>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3301      	adds	r3, #1
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d159      	bne.n	8002428 <D_Slider_CheckData+0xd0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3302      	adds	r3, #2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d154      	bne.n	8002428 <D_Slider_CheckData+0xd0>
	uint8_t sum = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 8002382:	2301      	movs	r3, #1
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e009      	b.n	800239c <D_Slider_CheckData+0x44>
		sum += data[i];
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	4413      	add	r3, r2
 8002394:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	3301      	adds	r3, #1
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b08      	cmp	r3, #8
 80023a0:	ddf2      	ble.n	8002388 <D_Slider_CheckData+0x30>
	}
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3309      	adds	r3, #9
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	7dfa      	ldrb	r2, [r7, #23]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d13e      	bne.n	800242c <D_Slider_CheckData+0xd4>
	for(int i=0; i<5; i++){
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e018      	b.n	80023e6 <D_Slider_CheckData+0x8e>
		if(((data[7]>>i) & 1) == 1) SensorCount[1][i]++;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3307      	adds	r3, #7
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	fa42 f303 	asr.w	r3, r2, r3
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <D_Slider_CheckData+0x88>
 80023ca:	4a1b      	ldr	r2, [pc, #108]	; (8002438 <D_Slider_CheckData+0xe0>)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3305      	adds	r3, #5
 80023d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	4918      	ldr	r1, [pc, #96]	; (8002438 <D_Slider_CheckData+0xe0>)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3305      	adds	r3, #5
 80023dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3301      	adds	r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	dde3      	ble.n	80023b4 <D_Slider_CheckData+0x5c>
	}
	for(int i=0; i<5; i++){
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	e016      	b.n	8002420 <D_Slider_CheckData+0xc8>
		if(((data[8]>>i) & 1) == 1) SensorCount[0][i]++;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3308      	adds	r3, #8
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	fa42 f303 	asr.w	r3, r2, r3
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <D_Slider_CheckData+0xc2>
 8002408:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <D_Slider_CheckData+0xe0>)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	4909      	ldr	r1, [pc, #36]	; (8002438 <D_Slider_CheckData+0xe0>)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	3301      	adds	r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b04      	cmp	r3, #4
 8002424:	dde5      	ble.n	80023f2 <D_Slider_CheckData+0x9a>
 8002426:	e002      	b.n	800242e <D_Slider_CheckData+0xd6>
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 8002428:	bf00      	nop
 800242a:	e000      	b.n	800242e <D_Slider_CheckData+0xd6>
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 800242c:	bf00      	nop
	}
}
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	200002b0 	.word	0x200002b0

0800243c <D_Slider_SetColorData>:

void D_Slider_SetColorData(bool setColorR[][3], bool setColorL[][3]){
 800243c:	b4b0      	push	{r4, r5, r7}
 800243e:	b08b      	sub	sp, #44	; 0x2c
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
	if (!_send) return;
 8002446:	4b8d      	ldr	r3, [pc, #564]	; (800267c <D_Slider_SetColorData+0x240>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	f083 0301 	eor.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	f040 810e 	bne.w	8002672 <D_Slider_SetColorData+0x236>
	_send = false;
 8002456:	4b89      	ldr	r3, [pc, #548]	; (800267c <D_Slider_SetColorData+0x240>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
	SendData[0] = FIRSTBYTE;
 800245c:	4b88      	ldr	r3, [pc, #544]	; (8002680 <D_Slider_SetColorData+0x244>)
 800245e:	22e0      	movs	r2, #224	; 0xe0
 8002460:	701a      	strb	r2, [r3, #0]
	SendData[1] = ADDRESS;
 8002462:	4b87      	ldr	r3, [pc, #540]	; (8002680 <D_Slider_SetColorData+0x244>)
 8002464:	2201      	movs	r2, #1
 8002466:	705a      	strb	r2, [r3, #1]
	SendData[2] = COLORSEND_SEQNUM;
 8002468:	4b85      	ldr	r3, [pc, #532]	; (8002680 <D_Slider_SetColorData+0x244>)
 800246a:	2205      	movs	r2, #5
 800246c:	709a      	strb	r2, [r3, #2]
	SendData[3] = COLORSEND_DATANUM;
 800246e:	4b84      	ldr	r3, [pc, #528]	; (8002680 <D_Slider_SetColorData+0x244>)
 8002470:	2205      	movs	r2, #5
 8002472:	70da      	strb	r2, [r3, #3]
	SendData[4] = COLORSEND_CMD;
 8002474:	4b82      	ldr	r3, [pc, #520]	; (8002680 <D_Slider_SetColorData+0x244>)
 8002476:	2232      	movs	r2, #50	; 0x32
 8002478:	711a      	strb	r2, [r3, #4]
	SendData[5] = 0;
 800247a:	4b81      	ldr	r3, [pc, #516]	; (8002680 <D_Slider_SetColorData+0x244>)
 800247c:	2200      	movs	r2, #0
 800247e:	715a      	strb	r2, [r3, #5]
	SendData[6] = 0;
 8002480:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <D_Slider_SetColorData+0x244>)
 8002482:	2200      	movs	r2, #0
 8002484:	719a      	strb	r2, [r3, #6]
	SendData[7] = 0;
 8002486:	4b7e      	ldr	r3, [pc, #504]	; (8002680 <D_Slider_SetColorData+0x244>)
 8002488:	2200      	movs	r2, #0
 800248a:	71da      	strb	r2, [r3, #7]
	SendData[8] = 0;
 800248c:	4b7c      	ldr	r3, [pc, #496]	; (8002680 <D_Slider_SetColorData+0x244>)
 800248e:	2200      	movs	r2, #0
 8002490:	721a      	strb	r2, [r3, #8]
	SendData[9] = 0;
 8002492:	4b7b      	ldr	r3, [pc, #492]	; (8002680 <D_Slider_SetColorData+0x244>)
 8002494:	2200      	movs	r2, #0
 8002496:	725a      	strb	r2, [r3, #9]
	SendData[10] = 0;
 8002498:	4b79      	ldr	r3, [pc, #484]	; (8002680 <D_Slider_SetColorData+0x244>)
 800249a:	2200      	movs	r2, #0
 800249c:	729a      	strb	r2, [r3, #10]
	SendData[11] = 0;
 800249e:	4b78      	ldr	r3, [pc, #480]	; (8002680 <D_Slider_SetColorData+0x244>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	72da      	strb	r2, [r3, #11]
	SendData[12] = 0;
 80024a4:	4b76      	ldr	r3, [pc, #472]	; (8002680 <D_Slider_SetColorData+0x244>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	731a      	strb	r2, [r3, #12]
	SendData[13] = 0;
 80024aa:	4b75      	ldr	r3, [pc, #468]	; (8002680 <D_Slider_SetColorData+0x244>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	735a      	strb	r2, [r3, #13]
	SendData[14] = 0;
 80024b0:	4b73      	ldr	r3, [pc, #460]	; (8002680 <D_Slider_SetColorData+0x244>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	739a      	strb	r2, [r3, #14]
	for(int i=1; i<16; i++){
 80024b6:	2301      	movs	r3, #1
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ba:	e038      	b.n	800252e <D_Slider_SetColorData+0xf2>
		SendData[5 + (i/8)] |= (setColorR[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	2b00      	cmp	r3, #0
 80024c0:	da00      	bge.n	80024c4 <D_Slider_SetColorData+0x88>
 80024c2:	3307      	adds	r3, #7
 80024c4:	10db      	asrs	r3, r3, #3
 80024c6:	4618      	mov	r0, r3
 80024c8:	1d43      	adds	r3, r0, #5
 80024ca:	4a6d      	ldr	r2, [pc, #436]	; (8002680 <D_Slider_SetColorData+0x244>)
 80024cc:	5cd3      	ldrb	r3, [r2, r3]
 80024ce:	b25c      	sxtb	r4, r3
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	3b01      	subs	r3, #1
 80024d4:	4a6b      	ldr	r2, [pc, #428]	; (8002684 <D_Slider_SetColorData+0x248>)
 80024d6:	fb82 1203 	smull	r1, r2, r2, r3
 80024da:	17db      	asrs	r3, r3, #31
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	3304      	adds	r3, #4
 80024e0:	461a      	mov	r2, r3
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	18d5      	adds	r5, r2, r3
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	1e59      	subs	r1, r3, #1
 80024f0:	4b64      	ldr	r3, [pc, #400]	; (8002684 <D_Slider_SetColorData+0x248>)
 80024f2:	fb83 3201 	smull	r3, r2, r3, r1
 80024f6:	17cb      	asrs	r3, r1, #31
 80024f8:	1ad2      	subs	r2, r2, r3
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	1aca      	subs	r2, r1, r3
 8002502:	5cab      	ldrb	r3, [r5, r2]
 8002504:	4619      	mov	r1, r3
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	425a      	negs	r2, r3
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	f002 0207 	and.w	r2, r2, #7
 8002512:	bf58      	it	pl
 8002514:	4253      	negpl	r3, r2
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	b25b      	sxtb	r3, r3
 800251c:	4323      	orrs	r3, r4
 800251e:	b25a      	sxtb	r2, r3
 8002520:	1d43      	adds	r3, r0, #5
 8002522:	b2d1      	uxtb	r1, r2
 8002524:	4a56      	ldr	r2, [pc, #344]	; (8002680 <D_Slider_SetColorData+0x244>)
 8002526:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	3301      	adds	r3, #1
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	2b0f      	cmp	r3, #15
 8002532:	ddc3      	ble.n	80024bc <D_Slider_SetColorData+0x80>
	}
	for(int i=1; i<16; i++){
 8002534:	2301      	movs	r3, #1
 8002536:	623b      	str	r3, [r7, #32]
 8002538:	e038      	b.n	80025ac <D_Slider_SetColorData+0x170>
		SendData[7 + (i/8)] |= (setColorL[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	2b00      	cmp	r3, #0
 800253e:	da00      	bge.n	8002542 <D_Slider_SetColorData+0x106>
 8002540:	3307      	adds	r3, #7
 8002542:	10db      	asrs	r3, r3, #3
 8002544:	4618      	mov	r0, r3
 8002546:	1dc3      	adds	r3, r0, #7
 8002548:	4a4d      	ldr	r2, [pc, #308]	; (8002680 <D_Slider_SetColorData+0x244>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	b25c      	sxtb	r4, r3
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	3b01      	subs	r3, #1
 8002552:	4a4c      	ldr	r2, [pc, #304]	; (8002684 <D_Slider_SetColorData+0x248>)
 8002554:	fb82 1203 	smull	r1, r2, r2, r3
 8002558:	17db      	asrs	r3, r3, #31
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	3304      	adds	r3, #4
 800255e:	461a      	mov	r2, r3
 8002560:	4613      	mov	r3, r2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4413      	add	r3, r2
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	18d5      	adds	r5, r2, r3
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	1e59      	subs	r1, r3, #1
 800256e:	4b45      	ldr	r3, [pc, #276]	; (8002684 <D_Slider_SetColorData+0x248>)
 8002570:	fb83 3201 	smull	r3, r2, r3, r1
 8002574:	17cb      	asrs	r3, r1, #31
 8002576:	1ad2      	subs	r2, r2, r3
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	1aca      	subs	r2, r1, r3
 8002580:	5cab      	ldrb	r3, [r5, r2]
 8002582:	4619      	mov	r1, r3
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	425a      	negs	r2, r3
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	f002 0207 	and.w	r2, r2, #7
 8002590:	bf58      	it	pl
 8002592:	4253      	negpl	r3, r2
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	b25b      	sxtb	r3, r3
 800259a:	4323      	orrs	r3, r4
 800259c:	b25a      	sxtb	r2, r3
 800259e:	1dc3      	adds	r3, r0, #7
 80025a0:	b2d1      	uxtb	r1, r2
 80025a2:	4a37      	ldr	r2, [pc, #220]	; (8002680 <D_Slider_SetColorData+0x244>)
 80025a4:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	3301      	adds	r3, #1
 80025aa:	623b      	str	r3, [r7, #32]
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	ddc3      	ble.n	800253a <D_Slider_SetColorData+0xfe>
	}

	uint8_t dataSum = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	77fb      	strb	r3, [r7, #31]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 80025b6:	2301      	movs	r3, #1
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	e009      	b.n	80025d0 <D_Slider_SetColorData+0x194>
		dataSum += SendData[i];
 80025bc:	4a30      	ldr	r2, [pc, #192]	; (8002680 <D_Slider_SetColorData+0x244>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4413      	add	r3, r2
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	7ffb      	ldrb	r3, [r7, #31]
 80025c6:	4413      	add	r3, r2
 80025c8:	77fb      	strb	r3, [r7, #31]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	3301      	adds	r3, #1
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	ddf2      	ble.n	80025bc <D_Slider_SetColorData+0x180>
	}

	AdditionalPacket = 0;
 80025d6:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <D_Slider_SetColorData+0x24c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
		//SendData[10] = SendData[9];
		//SendData[8] = SendData[7];
		SendData[10] = tempData;
	}
	*/
	for(int i=5; i<9+AdditionalPacket; i++){
 80025dc:	2305      	movs	r3, #5
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e03a      	b.n	8002658 <D_Slider_SetColorData+0x21c>
		if(SendData[i] == ESCAPE_PACKET || SendData[i] == FIRSTBYTE) {
 80025e2:	4a27      	ldr	r2, [pc, #156]	; (8002680 <D_Slider_SetColorData+0x244>)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	4413      	add	r3, r2
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2bd0      	cmp	r3, #208	; 0xd0
 80025ec:	d005      	beq.n	80025fa <D_Slider_SetColorData+0x1be>
 80025ee:	4a24      	ldr	r2, [pc, #144]	; (8002680 <D_Slider_SetColorData+0x244>)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	4413      	add	r3, r2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2be0      	cmp	r3, #224	; 0xe0
 80025f8:	d12b      	bne.n	8002652 <D_Slider_SetColorData+0x216>
			AdditionalPacket++;
 80025fa:	4b23      	ldr	r3, [pc, #140]	; (8002688 <D_Slider_SetColorData+0x24c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b21      	ldr	r3, [pc, #132]	; (8002688 <D_Slider_SetColorData+0x24c>)
 8002604:	701a      	strb	r2, [r3, #0]
			uint8_t tempData = SendData[i] - 1;
 8002606:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <D_Slider_SetColorData+0x244>)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	4413      	add	r3, r2
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	3b01      	subs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
			SendData[i] = ESCAPE_PACKET;
 8002612:	4a1b      	ldr	r2, [pc, #108]	; (8002680 <D_Slider_SetColorData+0x244>)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	4413      	add	r3, r2
 8002618:	22d0      	movs	r2, #208	; 0xd0
 800261a:	701a      	strb	r2, [r3, #0]
			for(int j=i+3; j>i; j--){
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	3303      	adds	r3, #3
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	e00a      	b.n	800263a <D_Slider_SetColorData+0x1fe>
				SendData[j+1] = SendData[j];
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	3301      	adds	r3, #1
 8002628:	4915      	ldr	r1, [pc, #84]	; (8002680 <D_Slider_SetColorData+0x244>)
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	440a      	add	r2, r1
 800262e:	7811      	ldrb	r1, [r2, #0]
 8002630:	4a13      	ldr	r2, [pc, #76]	; (8002680 <D_Slider_SetColorData+0x244>)
 8002632:	54d1      	strb	r1, [r2, r3]
			for(int j=i+3; j>i; j--){
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	3b01      	subs	r3, #1
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	429a      	cmp	r2, r3
 8002640:	dcf0      	bgt.n	8002624 <D_Slider_SetColorData+0x1e8>
			}
			SendData[i+1] = tempData;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3301      	adds	r3, #1
 8002646:	490e      	ldr	r1, [pc, #56]	; (8002680 <D_Slider_SetColorData+0x244>)
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	54ca      	strb	r2, [r1, r3]
			i++;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3301      	adds	r3, #1
 8002650:	617b      	str	r3, [r7, #20]
	for(int i=5; i<9+AdditionalPacket; i++){
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3301      	adds	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <D_Slider_SetColorData+0x24c>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	3308      	adds	r3, #8
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	429a      	cmp	r2, r3
 8002662:	ddbe      	ble.n	80025e2 <D_Slider_SetColorData+0x1a6>
		}
	}

	SendData[COLORSEND_LENGTH-1 + AdditionalPacket] = (uint8_t)dataSum;
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <D_Slider_SetColorData+0x24c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	3309      	adds	r3, #9
 800266a:	4905      	ldr	r1, [pc, #20]	; (8002680 <D_Slider_SetColorData+0x244>)
 800266c:	7ffa      	ldrb	r2, [r7, #31]
 800266e:	54ca      	strb	r2, [r1, r3]
 8002670:	e000      	b.n	8002674 <D_Slider_SetColorData+0x238>
	if (!_send) return;
 8002672:	bf00      	nop
}
 8002674:	372c      	adds	r7, #44	; 0x2c
 8002676:	46bd      	mov	sp, r7
 8002678:	bcb0      	pop	{r4, r5, r7}
 800267a:	4770      	bx	lr
 800267c:	200002d8 	.word	0x200002d8
 8002680:	2000024c 	.word	0x2000024c
 8002684:	55555556 	.word	0x55555556
 8002688:	2000028c 	.word	0x2000028c

0800268c <D_Slider_TransitionCompletedCallBack>:


void D_Slider_TransitionCompletedCallBack(){
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
	had_completed_tx = true;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <D_Slider_TransitionCompletedCallBack+0x14>)
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	20000008 	.word	0x20000008

080026a4 <D_Slider_ReceptionCompletedCallBack>:

void D_Slider_ReceptionCompletedCallBack(){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	had_completed_rx = true;
 80026a8:	4b04      	ldr	r3, [pc, #16]	; (80026bc <D_Slider_ReceptionCompletedCallBack+0x18>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
	D_Slider_CheckData((uint8_t*)RecvData, 10);
 80026ae:	210a      	movs	r1, #10
 80026b0:	4803      	ldr	r0, [pc, #12]	; (80026c0 <D_Slider_ReceptionCompletedCallBack+0x1c>)
 80026b2:	f7ff fe51 	bl	8002358 <D_Slider_CheckData>
			TouchData[i] = RecvData[i+3];
		}
	}
	*/
	//D_USBHID_SetSendData_Touch(TouchData);
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000009 	.word	0x20000009
 80026c0:	20000290 	.word	0x20000290

080026c4 <D_GPIO_Read>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
}

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	4619      	mov	r1, r3
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 ff83 	bl	80035e0 <HAL_GPIO_ReadPin>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed_tx){
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <D_Mess_flush+0x54>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f083 0301 	eor.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <D_Mess_flush+0x1c>
		outptr = buff;
 8002704:	4b10      	ldr	r3, [pc, #64]	; (8002748 <D_Mess_flush+0x58>)
 8002706:	4a11      	ldr	r2, [pc, #68]	; (800274c <D_Mess_flush+0x5c>)
 8002708:	601a      	str	r2, [r3, #0]
		return;
 800270a:	e01a      	b.n	8002742 <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <D_Mess_flush+0x58>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <D_Mess_flush+0x58>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	490b      	ldr	r1, [pc, #44]	; (8002748 <D_Mess_flush+0x58>)
 800271c:	600a      	str	r2, [r1, #0]
 800271e:	220a      	movs	r2, #10
 8002720:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <D_Mess_flush+0x58>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a09      	ldr	r2, [pc, #36]	; (800274c <D_Mess_flush+0x5c>)
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	4907      	ldr	r1, [pc, #28]	; (800274c <D_Mess_flush+0x5c>)
 8002730:	4807      	ldr	r0, [pc, #28]	; (8002750 <D_Mess_flush+0x60>)
 8002732:	f002 fdb3 	bl	800529c <HAL_UART_Transmit_DMA>
		had_completed_tx = false;
 8002736:	4b03      	ldr	r3, [pc, #12]	; (8002744 <D_Mess_flush+0x54>)
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 800273c:	4b02      	ldr	r3, [pc, #8]	; (8002748 <D_Mess_flush+0x58>)
 800273e:	4a03      	ldr	r2, [pc, #12]	; (800274c <D_Mess_flush+0x5c>)
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000014 	.word	0x20000014
 8002748:	2000098c 	.word	0x2000098c
 800274c:	20000364 	.word	0x20000364
 8002750:	20000940 	.word	0x20000940

08002754 <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  had_completed_tx = true;
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <D_Mess_TransitionCompletedCallBack+0x14>)
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	20000014 	.word	0x20000014

0800276c <D_Mess_ReceptionCompletedCallBack>:
void D_Mess_ReceptionCompletedCallBack(void){
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  had_completed_rx = true;
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <D_Mess_ReceptionCompletedCallBack+0x14>)
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	20000015 	.word	0x20000015

08002784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <HAL_Init+0x40>)
 800278e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <HAL_Init+0x40>)
 800279a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800279e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_Init+0x40>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <HAL_Init+0x40>)
 80027a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ac:	2003      	movs	r0, #3
 80027ae:	f000 f94f 	bl	8002a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f000 f808 	bl	80027c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b8:	f7fe f9fe 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023c00 	.word	0x40023c00

080027c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_InitTick+0x54>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_InitTick+0x58>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027de:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f967 	bl	8002aba <HAL_SYSTICK_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00e      	b.n	8002814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b0f      	cmp	r3, #15
 80027fa:	d80a      	bhi.n	8002812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027fc:	2200      	movs	r2, #0
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002804:	f000 f92f 	bl	8002a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <HAL_InitTick+0x5c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000004 	.word	0x20000004
 8002820:	2000001c 	.word	0x2000001c
 8002824:	20000018 	.word	0x20000018

08002828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_IncTick+0x20>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_IncTick+0x24>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_IncTick+0x24>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	2000001c 	.word	0x2000001c
 800284c:	20000990 	.word	0x20000990

08002850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return uwTick;
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_GetTick+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000990 	.word	0x20000990

08002868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002870:	f7ff ffee 	bl	8002850 <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002880:	d005      	beq.n	800288e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_Delay+0x44>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800288e:	bf00      	nop
 8002890:	f7ff ffde 	bl	8002850 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	429a      	cmp	r2, r3
 800289e:	d8f7      	bhi.n	8002890 <HAL_Delay+0x28>
  {
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	2000001c 	.word	0x2000001c

080028b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e2:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	60d3      	str	r3, [r2, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db0b      	blt.n	800293e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4907      	ldr	r1, [pc, #28]	; (800294c <__NVIC_EnableIRQ+0x38>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2001      	movs	r0, #1
 8002936:	fa00 f202 	lsl.w	r2, r0, r2
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	; (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
         );
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1c:	d301      	bcc.n	8002a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00f      	b.n	8002a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <SysTick_Config+0x40>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2a:	210f      	movs	r1, #15
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a30:	f7ff ff8e 	bl	8002950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <SysTick_Config+0x40>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <SysTick_Config+0x40>)
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e000e010 	.word	0xe000e010

08002a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff29 	bl	80028b0 <__NVIC_SetPriorityGrouping>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a78:	f7ff ff3e 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7ff ff8e 	bl	80029a4 <NVIC_EncodePriority>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff5d 	bl	8002950 <__NVIC_SetPriority>
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff31 	bl	8002914 <__NVIC_EnableIRQ>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffa2 	bl	8002a0c <SysTick_Config>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ae0:	f7ff feb6 	bl	8002850 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e099      	b.n	8002c24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b10:	e00f      	b.n	8002b32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b12:	f7ff fe9d 	bl	8002850 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b05      	cmp	r3, #5
 8002b1e:	d908      	bls.n	8002b32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2203      	movs	r2, #3
 8002b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e078      	b.n	8002c24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1e8      	bne.n	8002b12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4b38      	ldr	r3, [pc, #224]	; (8002c2c <HAL_DMA_Init+0x158>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d107      	bne.n	8002b9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	4313      	orrs	r3, r2
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f023 0307 	bic.w	r3, r3, #7
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d117      	bne.n	8002bf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fb01 	bl	80031e0 <DMA_CheckFifoParam>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2240      	movs	r2, #64	; 0x40
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e016      	b.n	8002c24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fab8 	bl	8003174 <DMA_CalcBaseAndBitshift>
 8002c04:	4603      	mov	r3, r0
 8002c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0c:	223f      	movs	r2, #63	; 0x3f
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	f010803f 	.word	0xf010803f

08002c30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_DMA_Start_IT+0x26>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e040      	b.n	8002cd8 <HAL_DMA_Start_IT+0xa8>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d12f      	bne.n	8002cca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fa4a 	bl	8003118 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	223f      	movs	r2, #63	; 0x3f
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0216 	orr.w	r2, r2, #22
 8002c9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d007      	beq.n	8002cb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0208 	orr.w	r2, r2, #8
 8002cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e005      	b.n	8002cd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cee:	f7ff fdaf 	bl	8002850 <HAL_GetTick>
 8002cf2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d008      	beq.n	8002d12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2280      	movs	r2, #128	; 0x80
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e052      	b.n	8002db8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0216 	bic.w	r2, r2, #22
 8002d20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <HAL_DMA_Abort+0x62>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0208 	bic.w	r2, r2, #8
 8002d50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d62:	e013      	b.n	8002d8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d64:	f7ff fd74 	bl	8002850 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	d90c      	bls.n	8002d8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e015      	b.n	8002db8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e4      	bne.n	8002d64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	223f      	movs	r2, #63	; 0x3f
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d004      	beq.n	8002dde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00c      	b.n	8002df8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2205      	movs	r2, #5
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0201 	bic.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e10:	4b92      	ldr	r3, [pc, #584]	; (800305c <HAL_DMA_IRQHandler+0x258>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a92      	ldr	r2, [pc, #584]	; (8003060 <HAL_DMA_IRQHandler+0x25c>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2e:	2208      	movs	r2, #8
 8002e30:	409a      	lsls	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01a      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d013      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0204 	bic.w	r2, r2, #4
 8002e56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e68:	f043 0201 	orr.w	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	2201      	movs	r2, #1
 8002e76:	409a      	lsls	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d012      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	2201      	movs	r2, #1
 8002e94:	409a      	lsls	r2, r3
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	f043 0202 	orr.w	r2, r3, #2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eaa:	2204      	movs	r2, #4
 8002eac:	409a      	lsls	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d012      	beq.n	8002edc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec8:	2204      	movs	r2, #4
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	f043 0204 	orr.w	r2, r3, #4
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d043      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d03c      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	2210      	movs	r2, #16
 8002f00:	409a      	lsls	r2, r3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d018      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d108      	bne.n	8002f34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d024      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
 8002f32:	e01f      	b.n	8002f74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01b      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
 8002f44:	e016      	b.n	8002f74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d107      	bne.n	8002f64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0208 	bic.w	r2, r2, #8
 8002f62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	2220      	movs	r2, #32
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 808e 	beq.w	80030a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8086 	beq.w	80030a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d136      	bne.n	800301c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0216 	bic.w	r2, r2, #22
 8002fbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <HAL_DMA_IRQHandler+0x1da>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0208 	bic.w	r2, r2, #8
 8002fec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	223f      	movs	r2, #63	; 0x3f
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300e:	2b00      	cmp	r3, #0
 8003010:	d07d      	beq.n	800310e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
        }
        return;
 800301a:	e078      	b.n	800310e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01c      	beq.n	8003064 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d108      	bne.n	800304a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303c:	2b00      	cmp	r3, #0
 800303e:	d030      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
 8003048:	e02b      	b.n	80030a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d027      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4798      	blx	r3
 800305a:	e022      	b.n	80030a2 <HAL_DMA_IRQHandler+0x29e>
 800305c:	20000004 	.word	0x20000004
 8003060:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10f      	bne.n	8003092 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0210 	bic.w	r2, r2, #16
 8003080:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d032      	beq.n	8003110 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d022      	beq.n	80030fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2205      	movs	r2, #5
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3301      	adds	r3, #1
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d307      	bcc.n	80030ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f2      	bne.n	80030ce <HAL_DMA_IRQHandler+0x2ca>
 80030e8:	e000      	b.n	80030ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80030ea:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
 800310c:	e000      	b.n	8003110 <HAL_DMA_IRQHandler+0x30c>
        return;
 800310e:	bf00      	nop
    }
  }
}
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop

08003118 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003134:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b40      	cmp	r3, #64	; 0x40
 8003144:	d108      	bne.n	8003158 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003156:	e007      	b.n	8003168 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	60da      	str	r2, [r3, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	3b10      	subs	r3, #16
 8003184:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800318e:	4a13      	ldr	r2, [pc, #76]	; (80031dc <DMA_CalcBaseAndBitshift+0x68>)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d909      	bls.n	80031b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031aa:	f023 0303 	bic.w	r3, r3, #3
 80031ae:	1d1a      	adds	r2, r3, #4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	659a      	str	r2, [r3, #88]	; 0x58
 80031b4:	e007      	b.n	80031c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031be:	f023 0303 	bic.w	r3, r3, #3
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	aaaaaaab 	.word	0xaaaaaaab
 80031dc:	08009aa4 	.word	0x08009aa4

080031e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11f      	bne.n	800323a <DMA_CheckFifoParam+0x5a>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d856      	bhi.n	80032ae <DMA_CheckFifoParam+0xce>
 8003200:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <DMA_CheckFifoParam+0x28>)
 8003202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003206:	bf00      	nop
 8003208:	08003219 	.word	0x08003219
 800320c:	0800322b 	.word	0x0800322b
 8003210:	08003219 	.word	0x08003219
 8003214:	080032af 	.word	0x080032af
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d046      	beq.n	80032b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003228:	e043      	b.n	80032b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003232:	d140      	bne.n	80032b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003238:	e03d      	b.n	80032b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003242:	d121      	bne.n	8003288 <DMA_CheckFifoParam+0xa8>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d837      	bhi.n	80032ba <DMA_CheckFifoParam+0xda>
 800324a:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <DMA_CheckFifoParam+0x70>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	08003261 	.word	0x08003261
 8003254:	08003267 	.word	0x08003267
 8003258:	08003261 	.word	0x08003261
 800325c:	08003279 	.word	0x08003279
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      break;
 8003264:	e030      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d025      	beq.n	80032be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003276:	e022      	b.n	80032be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003280:	d11f      	bne.n	80032c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003286:	e01c      	b.n	80032c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d903      	bls.n	8003296 <DMA_CheckFifoParam+0xb6>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d003      	beq.n	800329c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003294:	e018      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
      break;
 800329a:	e015      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      break;
 80032ac:	e00b      	b.n	80032c6 <DMA_CheckFifoParam+0xe6>
      break;
 80032ae:	bf00      	nop
 80032b0:	e00a      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032b2:	bf00      	nop
 80032b4:	e008      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032b6:	bf00      	nop
 80032b8:	e006      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032ba:	bf00      	nop
 80032bc:	e004      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032be:	bf00      	nop
 80032c0:	e002      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80032c2:	bf00      	nop
 80032c4:	e000      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032c6:	bf00      	nop
    }
  } 
  
  return status; 
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	e159      	b.n	80035a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032f4:	2201      	movs	r2, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	429a      	cmp	r2, r3
 800330e:	f040 8148 	bne.w	80035a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d005      	beq.n	800332a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003326:	2b02      	cmp	r3, #2
 8003328:	d130      	bne.n	800338c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003360:	2201      	movs	r2, #1
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 0201 	and.w	r2, r3, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b03      	cmp	r3, #3
 8003396:	d017      	beq.n	80033c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d123      	bne.n	800341c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	08da      	lsrs	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3208      	adds	r2, #8
 8003416:	69b9      	ldr	r1, [r7, #24]
 8003418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80a2 	beq.w	80035a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b57      	ldr	r3, [pc, #348]	; (80035c0 <HAL_GPIO_Init+0x2e8>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	4a56      	ldr	r2, [pc, #344]	; (80035c0 <HAL_GPIO_Init+0x2e8>)
 8003468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800346c:	6453      	str	r3, [r2, #68]	; 0x44
 800346e:	4b54      	ldr	r3, [pc, #336]	; (80035c0 <HAL_GPIO_Init+0x2e8>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800347a:	4a52      	ldr	r2, [pc, #328]	; (80035c4 <HAL_GPIO_Init+0x2ec>)
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	3302      	adds	r3, #2
 8003482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	220f      	movs	r2, #15
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a49      	ldr	r2, [pc, #292]	; (80035c8 <HAL_GPIO_Init+0x2f0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d019      	beq.n	80034da <HAL_GPIO_Init+0x202>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a48      	ldr	r2, [pc, #288]	; (80035cc <HAL_GPIO_Init+0x2f4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_GPIO_Init+0x1fe>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a47      	ldr	r2, [pc, #284]	; (80035d0 <HAL_GPIO_Init+0x2f8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00d      	beq.n	80034d2 <HAL_GPIO_Init+0x1fa>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a46      	ldr	r2, [pc, #280]	; (80035d4 <HAL_GPIO_Init+0x2fc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d007      	beq.n	80034ce <HAL_GPIO_Init+0x1f6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a45      	ldr	r2, [pc, #276]	; (80035d8 <HAL_GPIO_Init+0x300>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_GPIO_Init+0x1f2>
 80034c6:	2304      	movs	r3, #4
 80034c8:	e008      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034ca:	2307      	movs	r3, #7
 80034cc:	e006      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034ce:	2303      	movs	r3, #3
 80034d0:	e004      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e002      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034da:	2300      	movs	r3, #0
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	f002 0203 	and.w	r2, r2, #3
 80034e2:	0092      	lsls	r2, r2, #2
 80034e4:	4093      	lsls	r3, r2
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034ec:	4935      	ldr	r1, [pc, #212]	; (80035c4 <HAL_GPIO_Init+0x2ec>)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	3302      	adds	r3, #2
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034fa:	4b38      	ldr	r3, [pc, #224]	; (80035dc <HAL_GPIO_Init+0x304>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800351e:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <HAL_GPIO_Init+0x304>)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003524:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <HAL_GPIO_Init+0x304>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003548:	4a24      	ldr	r2, [pc, #144]	; (80035dc <HAL_GPIO_Init+0x304>)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800354e:	4b23      	ldr	r3, [pc, #140]	; (80035dc <HAL_GPIO_Init+0x304>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003572:	4a1a      	ldr	r2, [pc, #104]	; (80035dc <HAL_GPIO_Init+0x304>)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003578:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_GPIO_Init+0x304>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800359c:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <HAL_GPIO_Init+0x304>)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3301      	adds	r3, #1
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	2b0f      	cmp	r3, #15
 80035ac:	f67f aea2 	bls.w	80032f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	3724      	adds	r7, #36	; 0x24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40013800 	.word	0x40013800
 80035c8:	40020000 	.word	0x40020000
 80035cc:	40020400 	.word	0x40020400
 80035d0:	40020800 	.word	0x40020800
 80035d4:	40020c00 	.word	0x40020c00
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40013c00 	.word	0x40013c00

080035e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	887b      	ldrh	r3, [r7, #2]
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	e001      	b.n	8003602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
 800361c:	4613      	mov	r3, r2
 800361e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003620:	787b      	ldrb	r3, [r7, #1]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800362c:	e003      	b.n	8003636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800362e:	887b      	ldrh	r3, [r7, #2]
 8003630:	041a      	lsls	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	619a      	str	r2, [r3, #24]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003642:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003644:	b08f      	sub	sp, #60	; 0x3c
 8003646:	af0a      	add	r7, sp, #40	; 0x28
 8003648:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e10f      	b.n	8003874 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f005 fe9c 	bl	80093ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2203      	movs	r2, #3
 8003678:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f002 fff5 	bl	8006682 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	687e      	ldr	r6, [r7, #4]
 80036a0:	466d      	mov	r5, sp
 80036a2:	f106 0410 	add.w	r4, r6, #16
 80036a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80036b6:	1d33      	adds	r3, r6, #4
 80036b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036ba:	6838      	ldr	r0, [r7, #0]
 80036bc:	f002 fecc 	bl	8006458 <USB_CoreInit>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e0d0      	b.n	8003874 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f002 ffe3 	bl	80066a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
 80036e2:	e04a      	b.n	800377a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	333d      	adds	r3, #61	; 0x3d
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	333c      	adds	r3, #60	; 0x3c
 8003708:	7bfa      	ldrb	r2, [r7, #15]
 800370a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800370c:	7bfa      	ldrb	r2, [r7, #15]
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	b298      	uxth	r0, r3
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	3342      	adds	r3, #66	; 0x42
 8003720:	4602      	mov	r2, r0
 8003722:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003724:	7bfa      	ldrb	r2, [r7, #15]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	333f      	adds	r3, #63	; 0x3f
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3344      	adds	r3, #68	; 0x44
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	3348      	adds	r3, #72	; 0x48
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003760:	7bfa      	ldrb	r2, [r7, #15]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	3350      	adds	r3, #80	; 0x50
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	3301      	adds	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
 800377a:	7bfa      	ldrb	r2, [r7, #15]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	429a      	cmp	r2, r3
 8003782:	d3af      	bcc.n	80036e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003784:	2300      	movs	r3, #0
 8003786:	73fb      	strb	r3, [r7, #15]
 8003788:	e044      	b.n	8003814 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800378a:	7bfa      	ldrb	r2, [r7, #15]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80037b2:	7bfa      	ldrb	r2, [r7, #15]
 80037b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037b6:	7bfa      	ldrb	r2, [r7, #15]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037cc:	7bfa      	ldrb	r2, [r7, #15]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037f8:	7bfa      	ldrb	r2, [r7, #15]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	3301      	adds	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	429a      	cmp	r2, r3
 800381c:	d3b5      	bcc.n	800378a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	687e      	ldr	r6, [r7, #4]
 8003826:	466d      	mov	r5, sp
 8003828:	f106 0410 	add.w	r4, r6, #16
 800382c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800382e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003834:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003838:	e885 0003 	stmia.w	r5, {r0, r1}
 800383c:	1d33      	adds	r3, r6, #4
 800383e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003840:	6838      	ldr	r0, [r7, #0]
 8003842:	f002 ff7b 	bl	800673c <USB_DevInit>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e00d      	b.n	8003874 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f003 fff7 	bl	8007860 <USB_DevDisconnect>

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800387c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_PCD_Start+0x1c>
 8003894:	2302      	movs	r3, #2
 8003896:	e020      	b.n	80038da <HAL_PCD_Start+0x5e>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d109      	bne.n	80038bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d005      	beq.n	80038bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f002 fecd 	bl	8006660 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f003 ffa7 	bl	800781e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038e2:	b590      	push	{r4, r7, lr}
 80038e4:	b08d      	sub	sp, #52	; 0x34
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f004 f865 	bl	80079c8 <USB_GetMode>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	f040 839d 	bne.w	8004040 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f003 ffc9 	bl	80078a2 <USB_ReadInterrupts>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8393 	beq.w	800403e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f003 ffc0 	bl	80078a2 <USB_ReadInterrupts>
 8003922:	4603      	mov	r3, r0
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b02      	cmp	r3, #2
 800392a:	d107      	bne.n	800393c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f002 0202 	and.w	r2, r2, #2
 800393a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f003 ffae 	bl	80078a2 <USB_ReadInterrupts>
 8003946:	4603      	mov	r3, r0
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b10      	cmp	r3, #16
 800394e:	d161      	bne.n	8003a14 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0210 	bic.w	r2, r2, #16
 800395e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f003 020f 	and.w	r2, r3, #15
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	4413      	add	r3, r2
 800397c:	3304      	adds	r3, #4
 800397e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	0c5b      	lsrs	r3, r3, #17
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	2b02      	cmp	r3, #2
 800398a:	d124      	bne.n	80039d6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d035      	beq.n	8003a04 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	6a38      	ldr	r0, [r7, #32]
 80039ac:	f003 fde5 	bl	800757a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039bc:	441a      	add	r2, r3
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ce:	441a      	add	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	619a      	str	r2, [r3, #24]
 80039d4:	e016      	b.n	8003a04 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	0c5b      	lsrs	r3, r3, #17
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	2b06      	cmp	r3, #6
 80039e0:	d110      	bne.n	8003a04 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039e8:	2208      	movs	r2, #8
 80039ea:	4619      	mov	r1, r3
 80039ec:	6a38      	ldr	r0, [r7, #32]
 80039ee:	f003 fdc4 	bl	800757a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039fe:	441a      	add	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0210 	orr.w	r2, r2, #16
 8003a12:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f003 ff42 	bl	80078a2 <USB_ReadInterrupts>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a28:	d16e      	bne.n	8003b08 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f003 ff48 	bl	80078c8 <USB_ReadDevAllOutEpInterrupt>
 8003a38:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a3a:	e062      	b.n	8003b02 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d057      	beq.n	8003af6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f003 ff6d 	bl	8007930 <USB_ReadDevOutEPInterrupt>
 8003a56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00c      	beq.n	8003a7c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2301      	movs	r3, #1
 8003a72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fd98 	bl	80045ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00c      	beq.n	8003aa0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a92:	461a      	mov	r2, r3
 8003a94:	2308      	movs	r3, #8
 8003a96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fe92 	bl	80047c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2310      	movs	r3, #16
 8003aba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2320      	movs	r3, #32
 8003ad6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aee:	461a      	mov	r2, r3
 8003af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003af4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	3301      	adds	r3, #1
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	085b      	lsrs	r3, r3, #1
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d199      	bne.n	8003a3c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f003 fec8 	bl	80078a2 <USB_ReadInterrupts>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b1c:	f040 80c0 	bne.w	8003ca0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f003 fee9 	bl	80078fc <USB_ReadDevAllInEpInterrupt>
 8003b2a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b30:	e0b2      	b.n	8003c98 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80a7 	beq.w	8003c8c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f003 ff0f 	bl	800796c <USB_ReadDevInEPInterrupt>
 8003b4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d057      	beq.n	8003c0a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	2201      	movs	r2, #1
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	43db      	mvns	r3, r3
 8003b74:	69f9      	ldr	r1, [r7, #28]
 8003b76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d132      	bne.n	8003bfe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	3348      	adds	r3, #72	; 0x48
 8003ba8:	6819      	ldr	r1, [r3, #0]
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4403      	add	r3, r0
 8003bb8:	3344      	adds	r3, #68	; 0x44
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4419      	add	r1, r3
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4403      	add	r3, r0
 8003bcc:	3348      	adds	r3, #72	; 0x48
 8003bce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d113      	bne.n	8003bfe <HAL_PCD_IRQHandler+0x31c>
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bda:	4613      	mov	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	3350      	adds	r3, #80	; 0x50
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d108      	bne.n	8003bfe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	f003 ff17 	bl	8007a2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	4619      	mov	r1, r3
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f005 fc64 	bl	80094d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c20:	461a      	mov	r2, r3
 8003c22:	2308      	movs	r3, #8
 8003c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2310      	movs	r3, #16
 8003c40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2340      	movs	r3, #64	; 0x40
 8003c5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c74:	461a      	mov	r2, r3
 8003c76:	2302      	movs	r3, #2
 8003c78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fc03 	bl	8004492 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	3301      	adds	r3, #1
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	085b      	lsrs	r3, r3, #1
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f47f af49 	bne.w	8003b32 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f003 fdfc 	bl	80078a2 <USB_ReadInterrupts>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cb4:	d122      	bne.n	8003cfc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d108      	bne.n	8003ce6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003cdc:	2100      	movs	r1, #0
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fe0e 	bl	8004900 <HAL_PCDEx_LPM_Callback>
 8003ce4:	e002      	b.n	8003cec <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f005 fc6a 	bl	80095c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f003 fdce 	bl	80078a2 <USB_ReadInterrupts>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d10:	d112      	bne.n	8003d38 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d102      	bne.n	8003d28 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f005 fc26 	bl	8009574 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d36:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f003 fdb0 	bl	80078a2 <USB_ReadInterrupts>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	f040 80c7 	bne.w	8003ede <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2110      	movs	r1, #16
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f002 fe4a 	bl	8006a04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d74:	e056      	b.n	8003e24 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d82:	461a      	mov	r2, r3
 8003d84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d88:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d9a:	0151      	lsls	r1, r2, #5
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	440a      	add	r2, r1
 8003da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003da8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dba:	0151      	lsls	r1, r2, #5
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	440a      	add	r2, r1
 8003dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ddc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dfc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e0e:	0151      	lsls	r1, r2, #5
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	440a      	add	r2, r1
 8003e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e1c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	3301      	adds	r3, #1
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d3a3      	bcc.n	8003d76 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e3c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e40:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d016      	beq.n	8003e78 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e5a:	f043 030b 	orr.w	r3, r3, #11
 8003e5e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e70:	f043 030b 	orr.w	r3, r3, #11
 8003e74:	6453      	str	r3, [r2, #68]	; 0x44
 8003e76:	e015      	b.n	8003ea4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e8a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003e8e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9e:	f043 030b 	orr.w	r3, r3, #11
 8003ea2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eb2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003eb6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f003 fdaf 	bl	8007a2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003edc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f003 fcdd 	bl	80078a2 <USB_ReadInterrupts>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef2:	d124      	bne.n	8003f3e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f003 fd73 	bl	80079e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f002 fddb 	bl	8006abe <USB_GetDevSpeed>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681c      	ldr	r4, [r3, #0]
 8003f14:	f001 f940 	bl	8005198 <HAL_RCC_GetHCLKFreq>
 8003f18:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	4620      	mov	r0, r4
 8003f24:	f002 fafa 	bl	800651c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f005 fafa 	bl	8009522 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f003 fcad 	bl	80078a2 <USB_ReadInterrupts>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d10a      	bne.n	8003f68 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f005 fad7 	bl	8009506 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f002 0208 	and.w	r2, r2, #8
 8003f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f003 fc98 	bl	80078a2 <USB_ReadInterrupts>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f7c:	d10f      	bne.n	8003f9e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f005 fb39 	bl	8009600 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f003 fc7d 	bl	80078a2 <USB_ReadInterrupts>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fb2:	d10f      	bne.n	8003fd4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f005 fb0c 	bl	80095dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f003 fc62 	bl	80078a2 <USB_ReadInterrupts>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe8:	d10a      	bne.n	8004000 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f005 fb1a 	bl	8009624 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f003 fc4c 	bl	80078a2 <USB_ReadInterrupts>
 800400a:	4603      	mov	r3, r0
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b04      	cmp	r3, #4
 8004012:	d115      	bne.n	8004040 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f005 fb0a 	bl	8009640 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6859      	ldr	r1, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	430a      	orrs	r2, r1
 800403a:	605a      	str	r2, [r3, #4]
 800403c:	e000      	b.n	8004040 <HAL_PCD_IRQHandler+0x75e>
      return;
 800403e:	bf00      	nop
    }
  }
}
 8004040:	3734      	adds	r7, #52	; 0x34
 8004042:	46bd      	mov	sp, r7
 8004044:	bd90      	pop	{r4, r7, pc}

08004046 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	460b      	mov	r3, r1
 8004050:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_PCD_SetAddress+0x1a>
 800405c:	2302      	movs	r3, #2
 800405e:	e013      	b.n	8004088 <HAL_PCD_SetAddress+0x42>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f003 fbaa 	bl	80077d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	4608      	mov	r0, r1
 800409a:	4611      	mov	r1, r2
 800409c:	461a      	mov	r2, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	70fb      	strb	r3, [r7, #3]
 80040a2:	460b      	mov	r3, r1
 80040a4:	803b      	strh	r3, [r7, #0]
 80040a6:	4613      	mov	r3, r2
 80040a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	da0f      	bge.n	80040d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	f003 020f 	and.w	r2, r3, #15
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	3338      	adds	r3, #56	; 0x38
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	4413      	add	r3, r2
 80040ca:	3304      	adds	r3, #4
 80040cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	705a      	strb	r2, [r3, #1]
 80040d4:	e00f      	b.n	80040f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	f003 020f 	and.w	r2, r3, #15
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4413      	add	r3, r2
 80040ec:	3304      	adds	r3, #4
 80040ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004102:	883a      	ldrh	r2, [r7, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	78ba      	ldrb	r2, [r7, #2]
 800410c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	785b      	ldrb	r3, [r3, #1]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004120:	78bb      	ldrb	r3, [r7, #2]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d102      	bne.n	800412c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_PCD_EP_Open+0xaa>
 8004136:	2302      	movs	r3, #2
 8004138:	e00e      	b.n	8004158 <HAL_PCD_EP_Open+0xc8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68f9      	ldr	r1, [r7, #12]
 8004148:	4618      	mov	r0, r3
 800414a:	f002 fcdd 	bl	8006b08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004156:	7afb      	ldrb	r3, [r7, #11]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800416c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004170:	2b00      	cmp	r3, #0
 8004172:	da0f      	bge.n	8004194 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	f003 020f 	and.w	r2, r3, #15
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	3338      	adds	r3, #56	; 0x38
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	4413      	add	r3, r2
 8004188:	3304      	adds	r3, #4
 800418a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	705a      	strb	r2, [r3, #1]
 8004192:	e00f      	b.n	80041b4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	f003 020f 	and.w	r2, r3, #15
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	3304      	adds	r3, #4
 80041ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_PCD_EP_Close+0x6e>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e00e      	b.n	80041ec <HAL_PCD_EP_Close+0x8c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68f9      	ldr	r1, [r7, #12]
 80041dc:	4618      	mov	r0, r3
 80041de:	f002 fd1b 	bl	8006c18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	460b      	mov	r3, r1
 8004202:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004204:	7afb      	ldrb	r3, [r7, #11]
 8004206:	f003 020f 	and.w	r2, r3, #15
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	3304      	adds	r3, #4
 800421c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2200      	movs	r2, #0
 800422e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2200      	movs	r2, #0
 8004234:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004236:	7afb      	ldrb	r3, [r7, #11]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	b2da      	uxtb	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d102      	bne.n	8004250 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004250:	7afb      	ldrb	r3, [r7, #11]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	6979      	ldr	r1, [r7, #20]
 8004268:	f002 fff6 	bl	8007258 <USB_EP0StartXfer>
 800426c:	e008      	b.n	8004280 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	6979      	ldr	r1, [r7, #20]
 800427c:	f002 fda8 	bl	8006dd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b086      	sub	sp, #24
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
 8004296:	460b      	mov	r3, r1
 8004298:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800429a:	7afb      	ldrb	r3, [r7, #11]
 800429c:	f003 020f 	and.w	r2, r3, #15
 80042a0:	4613      	mov	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	3338      	adds	r3, #56	; 0x38
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	3304      	adds	r3, #4
 80042b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2200      	movs	r2, #0
 80042c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2201      	movs	r2, #1
 80042c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ca:	7afb      	ldrb	r3, [r7, #11]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d102      	bne.n	80042e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042e4:	7afb      	ldrb	r3, [r7, #11]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	6979      	ldr	r1, [r7, #20]
 80042fc:	f002 ffac 	bl	8007258 <USB_EP0StartXfer>
 8004300:	e008      	b.n	8004314 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	6979      	ldr	r1, [r7, #20]
 8004310:	f002 fd5e 	bl	8006dd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b084      	sub	sp, #16
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	f003 020f 	and.w	r2, r3, #15
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	d901      	bls.n	800433c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e050      	b.n	80043de <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800433c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004340:	2b00      	cmp	r3, #0
 8004342:	da0f      	bge.n	8004364 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	f003 020f 	and.w	r2, r3, #15
 800434a:	4613      	mov	r3, r2
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	3338      	adds	r3, #56	; 0x38
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	3304      	adds	r3, #4
 800435a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	705a      	strb	r2, [r3, #1]
 8004362:	e00d      	b.n	8004380 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	4413      	add	r3, r2
 8004376:	3304      	adds	r3, #4
 8004378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	b2da      	uxtb	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_PCD_EP_SetStall+0x82>
 800439c:	2302      	movs	r3, #2
 800439e:	e01e      	b.n	80043de <HAL_PCD_EP_SetStall+0xc0>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68f9      	ldr	r1, [r7, #12]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f003 f93b 	bl	800762a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	b2d9      	uxtb	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043ce:	461a      	mov	r2, r3
 80043d0:	f003 fb2c 	bl	8007a2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	460b      	mov	r3, r1
 80043f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	f003 020f 	and.w	r2, r3, #15
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d901      	bls.n	8004404 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e042      	b.n	800448a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004408:	2b00      	cmp	r3, #0
 800440a:	da0f      	bge.n	800442c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	f003 020f 	and.w	r2, r3, #15
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	3338      	adds	r3, #56	; 0x38
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	4413      	add	r3, r2
 8004420:	3304      	adds	r3, #4
 8004422:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	705a      	strb	r2, [r3, #1]
 800442a:	e00f      	b.n	800444c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	f003 020f 	and.w	r2, r3, #15
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	3304      	adds	r3, #4
 8004444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	b2da      	uxtb	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_PCD_EP_ClrStall+0x86>
 8004468:	2302      	movs	r3, #2
 800446a:	e00e      	b.n	800448a <HAL_PCD_EP_ClrStall+0xa4>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	4618      	mov	r0, r3
 800447c:	f003 f943 	bl	8007706 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b08a      	sub	sp, #40	; 0x28
 8004496:	af02      	add	r7, sp, #8
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	3338      	adds	r3, #56	; 0x38
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	3304      	adds	r3, #4
 80044b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d901      	bls.n	80044ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e06c      	b.n	80045a4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d902      	bls.n	80044e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3303      	adds	r3, #3
 80044ea:	089b      	lsrs	r3, r3, #2
 80044ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044ee:	e02b      	b.n	8004548 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	429a      	cmp	r2, r3
 8004504:	d902      	bls.n	800450c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	3303      	adds	r3, #3
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	68d9      	ldr	r1, [r3, #12]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	b2da      	uxtb	r2, r3
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004524:	b2db      	uxtb	r3, r3
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	4603      	mov	r3, r0
 800452a:	6978      	ldr	r0, [r7, #20]
 800452c:	f002 ffe7 	bl	80074fe <USB_WritePacket>

    ep->xfer_buff  += len;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	441a      	add	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	699a      	ldr	r2, [r3, #24]
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	441a      	add	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	b29b      	uxth	r3, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	429a      	cmp	r2, r3
 800455c:	d809      	bhi.n	8004572 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004566:	429a      	cmp	r2, r3
 8004568:	d203      	bcs.n	8004572 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1be      	bne.n	80044f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	429a      	cmp	r2, r3
 800457c:	d811      	bhi.n	80045a2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	2201      	movs	r2, #1
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	43db      	mvns	r3, r3
 8004598:	6939      	ldr	r1, [r7, #16]
 800459a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800459e:	4013      	ands	r3, r2
 80045a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	333c      	adds	r3, #60	; 0x3c
 80045c4:	3304      	adds	r3, #4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	f040 80a0 	bne.w	8004724 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d015      	beq.n	800461a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4a72      	ldr	r2, [pc, #456]	; (80047bc <PCD_EP_OutXfrComplete_int+0x210>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	f240 80dd 	bls.w	80047b2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 80d7 	beq.w	80047b2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004610:	461a      	mov	r2, r3
 8004612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004616:	6093      	str	r3, [r2, #8]
 8004618:	e0cb      	b.n	80047b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d009      	beq.n	8004638 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	461a      	mov	r2, r3
 8004632:	2320      	movs	r3, #32
 8004634:	6093      	str	r3, [r2, #8]
 8004636:	e0bc      	b.n	80047b2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	f040 80b7 	bne.w	80047b2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4a5d      	ldr	r2, [pc, #372]	; (80047bc <PCD_EP_OutXfrComplete_int+0x210>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d90f      	bls.n	800466c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004662:	461a      	mov	r2, r3
 8004664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004668:	6093      	str	r3, [r2, #8]
 800466a:	e0a2      	b.n	80047b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800467e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	0159      	lsls	r1, r3, #5
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	440b      	add	r3, r1
 8004688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004692:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4403      	add	r3, r0
 80046a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80046a6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046ba:	6819      	ldr	r1, [r3, #0]
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4403      	add	r3, r0
 80046ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4419      	add	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4403      	add	r3, r0
 80046e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046e4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d114      	bne.n	8004716 <PCD_EP_OutXfrComplete_int+0x16a>
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d108      	bne.n	8004716 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800470e:	461a      	mov	r2, r3
 8004710:	2101      	movs	r1, #1
 8004712:	f003 f98b 	bl	8007a2c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	4619      	mov	r1, r3
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f004 febd 	bl	800949c <HAL_PCD_DataOutStageCallback>
 8004722:	e046      	b.n	80047b2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a26      	ldr	r2, [pc, #152]	; (80047c0 <PCD_EP_OutXfrComplete_int+0x214>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d124      	bne.n	8004776 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004742:	461a      	mov	r2, r3
 8004744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004748:	6093      	str	r3, [r2, #8]
 800474a:	e032      	b.n	80047b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d008      	beq.n	8004768 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004762:	461a      	mov	r2, r3
 8004764:	2320      	movs	r3, #32
 8004766:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	4619      	mov	r1, r3
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f004 fe94 	bl	800949c <HAL_PCD_DataOutStageCallback>
 8004774:	e01d      	b.n	80047b2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d114      	bne.n	80047a6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	4613      	mov	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d108      	bne.n	80047a6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800479e:	461a      	mov	r2, r3
 80047a0:	2100      	movs	r1, #0
 80047a2:	f003 f943 	bl	8007a2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	4619      	mov	r1, r3
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f004 fe75 	bl	800949c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	4f54300a 	.word	0x4f54300a
 80047c0:	4f54310a 	.word	0x4f54310a

080047c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	333c      	adds	r3, #60	; 0x3c
 80047dc:	3304      	adds	r3, #4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a15      	ldr	r2, [pc, #84]	; (800484c <PCD_EP_OutSetupPacket_int+0x88>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d90e      	bls.n	8004818 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004810:	461a      	mov	r2, r3
 8004812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004816:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f004 fe2d 	bl	8009478 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4a0a      	ldr	r2, [pc, #40]	; (800484c <PCD_EP_OutSetupPacket_int+0x88>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d90c      	bls.n	8004840 <PCD_EP_OutSetupPacket_int+0x7c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d108      	bne.n	8004840 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004838:	461a      	mov	r2, r3
 800483a:	2101      	movs	r1, #1
 800483c:	f003 f8f6 	bl	8007a2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	4f54300a 	.word	0x4f54300a

08004850 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	70fb      	strb	r3, [r7, #3]
 800485c:	4613      	mov	r3, r2
 800485e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d107      	bne.n	800487e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800486e:	883b      	ldrh	r3, [r7, #0]
 8004870:	0419      	lsls	r1, r3, #16
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	430a      	orrs	r2, r1
 800487a:	629a      	str	r2, [r3, #40]	; 0x28
 800487c:	e028      	b.n	80048d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	4413      	add	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]
 8004890:	e00d      	b.n	80048ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	3340      	adds	r3, #64	; 0x40
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	4413      	add	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	3301      	adds	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
 80048ae:	7bfa      	ldrb	r2, [r7, #15]
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d3ec      	bcc.n	8004892 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048b8:	883b      	ldrh	r3, [r7, #0]
 80048ba:	0418      	lsls	r0, r3, #16
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	4302      	orrs	r2, r0
 80048c8:	3340      	adds	r3, #64	; 0x40
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	887a      	ldrh	r2, [r7, #2]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e264      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d075      	beq.n	8004a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004936:	4ba3      	ldr	r3, [pc, #652]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	2b04      	cmp	r3, #4
 8004940:	d00c      	beq.n	800495c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004942:	4ba0      	ldr	r3, [pc, #640]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800494a:	2b08      	cmp	r3, #8
 800494c:	d112      	bne.n	8004974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800494e:	4b9d      	ldr	r3, [pc, #628]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800495a:	d10b      	bne.n	8004974 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495c:	4b99      	ldr	r3, [pc, #612]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d05b      	beq.n	8004a20 <HAL_RCC_OscConfig+0x108>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d157      	bne.n	8004a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e23f      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497c:	d106      	bne.n	800498c <HAL_RCC_OscConfig+0x74>
 800497e:	4b91      	ldr	r3, [pc, #580]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a90      	ldr	r2, [pc, #576]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e01d      	b.n	80049c8 <HAL_RCC_OscConfig+0xb0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x98>
 8004996:	4b8b      	ldr	r3, [pc, #556]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a8a      	ldr	r2, [pc, #552]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 800499c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	4b88      	ldr	r3, [pc, #544]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a87      	ldr	r2, [pc, #540]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e00b      	b.n	80049c8 <HAL_RCC_OscConfig+0xb0>
 80049b0:	4b84      	ldr	r3, [pc, #528]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a83      	ldr	r2, [pc, #524]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4b81      	ldr	r3, [pc, #516]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a80      	ldr	r2, [pc, #512]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d013      	beq.n	80049f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fd ff3e 	bl	8002850 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d8:	f7fd ff3a 	bl	8002850 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	; 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e204      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	4b76      	ldr	r3, [pc, #472]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0xc0>
 80049f6:	e014      	b.n	8004a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fd ff2a 	bl	8002850 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fd ff26 	bl	8002850 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	; 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e1f0      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a12:	4b6c      	ldr	r3, [pc, #432]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0xe8>
 8004a1e:	e000      	b.n	8004a22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d063      	beq.n	8004af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a2e:	4b65      	ldr	r3, [pc, #404]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a3a:	4b62      	ldr	r3, [pc, #392]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d11c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a46:	4b5f      	ldr	r3, [pc, #380]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d116      	bne.n	8004a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a52:	4b5c      	ldr	r3, [pc, #368]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_RCC_OscConfig+0x152>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e1c4      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6a:	4b56      	ldr	r3, [pc, #344]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4952      	ldr	r1, [pc, #328]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7e:	e03a      	b.n	8004af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d020      	beq.n	8004aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a88:	4b4f      	ldr	r3, [pc, #316]	; (8004bc8 <HAL_RCC_OscConfig+0x2b0>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fd fedf 	bl	8002850 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a96:	f7fd fedb 	bl	8002850 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e1a5      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa8:	4b46      	ldr	r3, [pc, #280]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab4:	4b43      	ldr	r3, [pc, #268]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4940      	ldr	r1, [pc, #256]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]
 8004ac8:	e015      	b.n	8004af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aca:	4b3f      	ldr	r3, [pc, #252]	; (8004bc8 <HAL_RCC_OscConfig+0x2b0>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fd febe 	bl	8002850 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad8:	f7fd feba 	bl	8002850 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e184      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aea:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d030      	beq.n	8004b64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d016      	beq.n	8004b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0a:	4b30      	ldr	r3, [pc, #192]	; (8004bcc <HAL_RCC_OscConfig+0x2b4>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fd fe9e 	bl	8002850 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b18:	f7fd fe9a 	bl	8002850 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e164      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2a:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCC_OscConfig+0x200>
 8004b36:	e015      	b.n	8004b64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b38:	4b24      	ldr	r3, [pc, #144]	; (8004bcc <HAL_RCC_OscConfig+0x2b4>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3e:	f7fd fe87 	bl	8002850 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b46:	f7fd fe83 	bl	8002850 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e14d      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b58:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80a0 	beq.w	8004cb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b72:	2300      	movs	r3, #0
 8004b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b76:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10f      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	4a0e      	ldr	r2, [pc, #56]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b90:	6413      	str	r3, [r2, #64]	; 0x40
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_RCC_OscConfig+0x2b8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d121      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bae:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_RCC_OscConfig+0x2b8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a07      	ldr	r2, [pc, #28]	; (8004bd0 <HAL_RCC_OscConfig+0x2b8>)
 8004bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bba:	f7fd fe49 	bl	8002850 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc0:	e011      	b.n	8004be6 <HAL_RCC_OscConfig+0x2ce>
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	42470000 	.word	0x42470000
 8004bcc:	42470e80 	.word	0x42470e80
 8004bd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd4:	f7fd fe3c 	bl	8002850 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e106      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be6:	4b85      	ldr	r3, [pc, #532]	; (8004dfc <HAL_RCC_OscConfig+0x4e4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d106      	bne.n	8004c08 <HAL_RCC_OscConfig+0x2f0>
 8004bfa:	4b81      	ldr	r3, [pc, #516]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	4a80      	ldr	r2, [pc, #512]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6713      	str	r3, [r2, #112]	; 0x70
 8004c06:	e01c      	b.n	8004c42 <HAL_RCC_OscConfig+0x32a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b05      	cmp	r3, #5
 8004c0e:	d10c      	bne.n	8004c2a <HAL_RCC_OscConfig+0x312>
 8004c10:	4b7b      	ldr	r3, [pc, #492]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	4a7a      	ldr	r2, [pc, #488]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004c16:	f043 0304 	orr.w	r3, r3, #4
 8004c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1c:	4b78      	ldr	r3, [pc, #480]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c20:	4a77      	ldr	r2, [pc, #476]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	6713      	str	r3, [r2, #112]	; 0x70
 8004c28:	e00b      	b.n	8004c42 <HAL_RCC_OscConfig+0x32a>
 8004c2a:	4b75      	ldr	r3, [pc, #468]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	4a74      	ldr	r2, [pc, #464]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004c30:	f023 0301 	bic.w	r3, r3, #1
 8004c34:	6713      	str	r3, [r2, #112]	; 0x70
 8004c36:	4b72      	ldr	r3, [pc, #456]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	4a71      	ldr	r2, [pc, #452]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004c3c:	f023 0304 	bic.w	r3, r3, #4
 8004c40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d015      	beq.n	8004c76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4a:	f7fd fe01 	bl	8002850 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c50:	e00a      	b.n	8004c68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c52:	f7fd fdfd 	bl	8002850 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e0c5      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c68:	4b65      	ldr	r3, [pc, #404]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ee      	beq.n	8004c52 <HAL_RCC_OscConfig+0x33a>
 8004c74:	e014      	b.n	8004ca0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c76:	f7fd fdeb 	bl	8002850 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c7c:	e00a      	b.n	8004c94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c7e:	f7fd fde7 	bl	8002850 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e0af      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c94:	4b5a      	ldr	r3, [pc, #360]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1ee      	bne.n	8004c7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d105      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca6:	4b56      	ldr	r3, [pc, #344]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	4a55      	ldr	r2, [pc, #340]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 809b 	beq.w	8004df2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cbc:	4b50      	ldr	r3, [pc, #320]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 030c 	and.w	r3, r3, #12
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d05c      	beq.n	8004d82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d141      	bne.n	8004d54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd0:	4b4c      	ldr	r3, [pc, #304]	; (8004e04 <HAL_RCC_OscConfig+0x4ec>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd6:	f7fd fdbb 	bl	8002850 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cde:	f7fd fdb7 	bl	8002850 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e081      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf0:	4b43      	ldr	r3, [pc, #268]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1f0      	bne.n	8004cde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	019b      	lsls	r3, r3, #6
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	3b01      	subs	r3, #1
 8004d16:	041b      	lsls	r3, r3, #16
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	061b      	lsls	r3, r3, #24
 8004d20:	4937      	ldr	r1, [pc, #220]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d26:	4b37      	ldr	r3, [pc, #220]	; (8004e04 <HAL_RCC_OscConfig+0x4ec>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2c:	f7fd fd90 	bl	8002850 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fd fd8c 	bl	8002850 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e056      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d46:	4b2e      	ldr	r3, [pc, #184]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x41c>
 8004d52:	e04e      	b.n	8004df2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d54:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <HAL_RCC_OscConfig+0x4ec>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5a:	f7fd fd79 	bl	8002850 <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d62:	f7fd fd75 	bl	8002850 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e03f      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d74:	4b22      	ldr	r3, [pc, #136]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f0      	bne.n	8004d62 <HAL_RCC_OscConfig+0x44a>
 8004d80:	e037      	b.n	8004df2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e032      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d8e:	4b1c      	ldr	r3, [pc, #112]	; (8004e00 <HAL_RCC_OscConfig+0x4e8>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d028      	beq.n	8004dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d121      	bne.n	8004dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d11a      	bne.n	8004dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dc4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d111      	bne.n	8004dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d107      	bne.n	8004dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d001      	beq.n	8004df2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40007000 	.word	0x40007000
 8004e00:	40023800 	.word	0x40023800
 8004e04:	42470060 	.word	0x42470060

08004e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0cc      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b68      	ldr	r3, [pc, #416]	; (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d90c      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b65      	ldr	r3, [pc, #404]	; (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b63      	ldr	r3, [pc, #396]	; (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0b8      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d020      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e5c:	4b59      	ldr	r3, [pc, #356]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4a58      	ldr	r2, [pc, #352]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e74:	4b53      	ldr	r3, [pc, #332]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4a52      	ldr	r2, [pc, #328]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e80:	4b50      	ldr	r3, [pc, #320]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	494d      	ldr	r1, [pc, #308]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d044      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d107      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea6:	4b47      	ldr	r3, [pc, #284]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d119      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e07f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d003      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d107      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec6:	4b3f      	ldr	r3, [pc, #252]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d109      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e06f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed6:	4b3b      	ldr	r3, [pc, #236]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e067      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ee6:	4b37      	ldr	r3, [pc, #220]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 0203 	bic.w	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	4934      	ldr	r1, [pc, #208]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ef8:	f7fd fcaa 	bl	8002850 <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f00:	f7fd fca6 	bl	8002850 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e04f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f16:	4b2b      	ldr	r3, [pc, #172]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 020c 	and.w	r2, r3, #12
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d1eb      	bne.n	8004f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f28:	4b25      	ldr	r3, [pc, #148]	; (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d20c      	bcs.n	8004f50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f36:	4b22      	ldr	r3, [pc, #136]	; (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3e:	4b20      	ldr	r3, [pc, #128]	; (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e032      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f5c:	4b19      	ldr	r3, [pc, #100]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4916      	ldr	r1, [pc, #88]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f7a:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	490e      	ldr	r1, [pc, #56]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f8e:	f000 f821 	bl	8004fd4 <HAL_RCC_GetSysClockFreq>
 8004f92:	4602      	mov	r2, r0
 8004f94:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	490a      	ldr	r1, [pc, #40]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa0:	5ccb      	ldrb	r3, [r1, r3]
 8004fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa6:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004faa:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fd fc0a 	bl	80027c8 <HAL_InitTick>

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40023c00 	.word	0x40023c00
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	08009a8c 	.word	0x08009a8c
 8004fcc:	20000004 	.word	0x20000004
 8004fd0:	20000018 	.word	0x20000018

08004fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	607b      	str	r3, [r7, #4]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fec:	4b67      	ldr	r3, [pc, #412]	; (800518c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d00d      	beq.n	8005014 <HAL_RCC_GetSysClockFreq+0x40>
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	f200 80bd 	bhi.w	8005178 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0x34>
 8005002:	2b04      	cmp	r3, #4
 8005004:	d003      	beq.n	800500e <HAL_RCC_GetSysClockFreq+0x3a>
 8005006:	e0b7      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005008:	4b61      	ldr	r3, [pc, #388]	; (8005190 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800500a:	60bb      	str	r3, [r7, #8]
       break;
 800500c:	e0b7      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800500e:	4b61      	ldr	r3, [pc, #388]	; (8005194 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005010:	60bb      	str	r3, [r7, #8]
      break;
 8005012:	e0b4      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005014:	4b5d      	ldr	r3, [pc, #372]	; (800518c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800501c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800501e:	4b5b      	ldr	r3, [pc, #364]	; (800518c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d04d      	beq.n	80050c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800502a:	4b58      	ldr	r3, [pc, #352]	; (800518c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	099b      	lsrs	r3, r3, #6
 8005030:	461a      	mov	r2, r3
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	f240 10ff 	movw	r0, #511	; 0x1ff
 800503a:	f04f 0100 	mov.w	r1, #0
 800503e:	ea02 0800 	and.w	r8, r2, r0
 8005042:	ea03 0901 	and.w	r9, r3, r1
 8005046:	4640      	mov	r0, r8
 8005048:	4649      	mov	r1, r9
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	014b      	lsls	r3, r1, #5
 8005054:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005058:	0142      	lsls	r2, r0, #5
 800505a:	4610      	mov	r0, r2
 800505c:	4619      	mov	r1, r3
 800505e:	ebb0 0008 	subs.w	r0, r0, r8
 8005062:	eb61 0109 	sbc.w	r1, r1, r9
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	018b      	lsls	r3, r1, #6
 8005070:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005074:	0182      	lsls	r2, r0, #6
 8005076:	1a12      	subs	r2, r2, r0
 8005078:	eb63 0301 	sbc.w	r3, r3, r1
 800507c:	f04f 0000 	mov.w	r0, #0
 8005080:	f04f 0100 	mov.w	r1, #0
 8005084:	00d9      	lsls	r1, r3, #3
 8005086:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800508a:	00d0      	lsls	r0, r2, #3
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	eb12 0208 	adds.w	r2, r2, r8
 8005094:	eb43 0309 	adc.w	r3, r3, r9
 8005098:	f04f 0000 	mov.w	r0, #0
 800509c:	f04f 0100 	mov.w	r1, #0
 80050a0:	0259      	lsls	r1, r3, #9
 80050a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80050a6:	0250      	lsls	r0, r2, #9
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4610      	mov	r0, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	461a      	mov	r2, r3
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	f7fb f88c 	bl	80001d4 <__aeabi_uldivmod>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4613      	mov	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	e04a      	b.n	800515c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c6:	4b31      	ldr	r3, [pc, #196]	; (800518c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	099b      	lsrs	r3, r3, #6
 80050cc:	461a      	mov	r2, r3
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050d6:	f04f 0100 	mov.w	r1, #0
 80050da:	ea02 0400 	and.w	r4, r2, r0
 80050de:	ea03 0501 	and.w	r5, r3, r1
 80050e2:	4620      	mov	r0, r4
 80050e4:	4629      	mov	r1, r5
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	014b      	lsls	r3, r1, #5
 80050f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050f4:	0142      	lsls	r2, r0, #5
 80050f6:	4610      	mov	r0, r2
 80050f8:	4619      	mov	r1, r3
 80050fa:	1b00      	subs	r0, r0, r4
 80050fc:	eb61 0105 	sbc.w	r1, r1, r5
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	018b      	lsls	r3, r1, #6
 800510a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800510e:	0182      	lsls	r2, r0, #6
 8005110:	1a12      	subs	r2, r2, r0
 8005112:	eb63 0301 	sbc.w	r3, r3, r1
 8005116:	f04f 0000 	mov.w	r0, #0
 800511a:	f04f 0100 	mov.w	r1, #0
 800511e:	00d9      	lsls	r1, r3, #3
 8005120:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005124:	00d0      	lsls	r0, r2, #3
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	1912      	adds	r2, r2, r4
 800512c:	eb45 0303 	adc.w	r3, r5, r3
 8005130:	f04f 0000 	mov.w	r0, #0
 8005134:	f04f 0100 	mov.w	r1, #0
 8005138:	0299      	lsls	r1, r3, #10
 800513a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800513e:	0290      	lsls	r0, r2, #10
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4610      	mov	r0, r2
 8005146:	4619      	mov	r1, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	461a      	mov	r2, r3
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	f7fb f840 	bl	80001d4 <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4613      	mov	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800515c:	4b0b      	ldr	r3, [pc, #44]	; (800518c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	0c1b      	lsrs	r3, r3, #16
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	3301      	adds	r3, #1
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	fbb2 f3f3 	udiv	r3, r2, r3
 8005174:	60bb      	str	r3, [r7, #8]
      break;
 8005176:	e002      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800517a:	60bb      	str	r3, [r7, #8]
      break;
 800517c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800517e:	68bb      	ldr	r3, [r7, #8]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800
 8005190:	00f42400 	.word	0x00f42400
 8005194:	007a1200 	.word	0x007a1200

08005198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800519c:	4b03      	ldr	r3, [pc, #12]	; (80051ac <HAL_RCC_GetHCLKFreq+0x14>)
 800519e:	681b      	ldr	r3, [r3, #0]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000004 	.word	0x20000004

080051b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051b4:	f7ff fff0 	bl	8005198 <HAL_RCC_GetHCLKFreq>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	0a9b      	lsrs	r3, r3, #10
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	4903      	ldr	r1, [pc, #12]	; (80051d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c6:	5ccb      	ldrb	r3, [r1, r3]
 80051c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40023800 	.word	0x40023800
 80051d4:	08009a9c 	.word	0x08009a9c

080051d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051dc:	f7ff ffdc 	bl	8005198 <HAL_RCC_GetHCLKFreq>
 80051e0:	4602      	mov	r2, r0
 80051e2:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	0b5b      	lsrs	r3, r3, #13
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	4903      	ldr	r1, [pc, #12]	; (80051fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40023800 	.word	0x40023800
 80051fc:	08009a9c 	.word	0x08009a9c

08005200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e03f      	b.n	8005292 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fb fcee 	bl	8000c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2224      	movs	r2, #36	; 0x24
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 ff3f 	bl	80060c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695a      	ldr	r2, [r3, #20]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08c      	sub	sp, #48	; 0x30
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	4613      	mov	r3, r2
 80052a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	d165      	bne.n	8005382 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_UART_Transmit_DMA+0x26>
 80052bc:	88fb      	ldrh	r3, [r7, #6]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e05e      	b.n	8005384 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_UART_Transmit_DMA+0x38>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e057      	b.n	8005384 <HAL_UART_Transmit_DMA+0xe8>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	88fa      	ldrh	r2, [r7, #6]
 80052e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	88fa      	ldrh	r2, [r7, #6]
 80052ec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2221      	movs	r2, #33	; 0x21
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005300:	4a22      	ldr	r2, [pc, #136]	; (800538c <HAL_UART_Transmit_DMA+0xf0>)
 8005302:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005308:	4a21      	ldr	r2, [pc, #132]	; (8005390 <HAL_UART_Transmit_DMA+0xf4>)
 800530a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005310:	4a20      	ldr	r2, [pc, #128]	; (8005394 <HAL_UART_Transmit_DMA+0xf8>)
 8005312:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005318:	2200      	movs	r2, #0
 800531a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800531c:	f107 0308 	add.w	r3, r7, #8
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	6819      	ldr	r1, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3304      	adds	r3, #4
 8005330:	461a      	mov	r2, r3
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	f7fd fc7c 	bl	8002c30 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005340:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3314      	adds	r3, #20
 8005350:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	617b      	str	r3, [r7, #20]
   return(result);
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3314      	adds	r3, #20
 8005368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800536a:	627a      	str	r2, [r7, #36]	; 0x24
 800536c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6a39      	ldr	r1, [r7, #32]
 8005370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	61fb      	str	r3, [r7, #28]
   return(result);
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e5      	bne.n	800534a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	e000      	b.n	8005384 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005382:	2302      	movs	r3, #2
  }
}
 8005384:	4618      	mov	r0, r3
 8005386:	3730      	adds	r7, #48	; 0x30
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	08005969 	.word	0x08005969
 8005390:	08005a03 	.word	0x08005a03
 8005394:	08005b7b 	.word	0x08005b7b

08005398 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d11d      	bne.n	80053ee <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <HAL_UART_Receive_DMA+0x26>
 80053b8:	88fb      	ldrh	r3, [r7, #6]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e016      	b.n	80053f0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_UART_Receive_DMA+0x38>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e00f      	b.n	80053f0 <HAL_UART_Receive_DMA+0x58>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	461a      	mov	r2, r3
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 fc13 	bl	8005c10 <UART_Start_Receive_DMA>
 80053ea:	4603      	mov	r3, r0
 80053ec:	e000      	b.n	80053f0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80053ee:	2302      	movs	r3, #2
  }
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b0ba      	sub	sp, #232	; 0xe8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800541e:	2300      	movs	r3, #0
 8005420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005424:	2300      	movs	r3, #0
 8005426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10f      	bne.n	800545e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800543e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d009      	beq.n	800545e <HAL_UART_IRQHandler+0x66>
 800544a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fd7b 	bl	8005f52 <UART_Receive_IT>
      return;
 800545c:	e256      	b.n	800590c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800545e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 80de 	beq.w	8005624 <HAL_UART_IRQHandler+0x22c>
 8005468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d106      	bne.n	8005482 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005478:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80d1 	beq.w	8005624 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <HAL_UART_IRQHandler+0xae>
 800548e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f043 0201 	orr.w	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00b      	beq.n	80054ca <HAL_UART_IRQHandler+0xd2>
 80054b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f043 0202 	orr.w	r2, r3, #2
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <HAL_UART_IRQHandler+0xf6>
 80054d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f043 0204 	orr.w	r2, r3, #4
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d011      	beq.n	800551e <HAL_UART_IRQHandler+0x126>
 80054fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d105      	bne.n	8005512 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f043 0208 	orr.w	r2, r3, #8
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 81ed 	beq.w	8005902 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d008      	beq.n	8005546 <HAL_UART_IRQHandler+0x14e>
 8005534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fd06 	bl	8005f52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b40      	cmp	r3, #64	; 0x40
 8005552:	bf0c      	ite	eq
 8005554:	2301      	moveq	r3, #1
 8005556:	2300      	movne	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d103      	bne.n	8005572 <HAL_UART_IRQHandler+0x17a>
 800556a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800556e:	2b00      	cmp	r3, #0
 8005570:	d04f      	beq.n	8005612 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fc0e 	bl	8005d94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b40      	cmp	r3, #64	; 0x40
 8005584:	d141      	bne.n	800560a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3314      	adds	r3, #20
 800558c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800559c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3314      	adds	r3, #20
 80055ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1d9      	bne.n	8005586 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d013      	beq.n	8005602 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	4a7d      	ldr	r2, [pc, #500]	; (80057d4 <HAL_UART_IRQHandler+0x3dc>)
 80055e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fd fbea 	bl	8002dc0 <HAL_DMA_Abort_IT>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d016      	beq.n	8005620 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055fc:	4610      	mov	r0, r2
 80055fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005600:	e00e      	b.n	8005620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f99a 	bl	800593c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	e00a      	b.n	8005620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f996 	bl	800593c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005610:	e006      	b.n	8005620 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f992 	bl	800593c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800561e:	e170      	b.n	8005902 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005620:	bf00      	nop
    return;
 8005622:	e16e      	b.n	8005902 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	2b01      	cmp	r3, #1
 800562a:	f040 814a 	bne.w	80058c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800562e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 8143 	beq.w	80058c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800563c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 813c 	beq.w	80058c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800564a:	2300      	movs	r3, #0
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60bb      	str	r3, [r7, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	60bb      	str	r3, [r7, #8]
 800565e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b40      	cmp	r3, #64	; 0x40
 800566c:	f040 80b4 	bne.w	80057d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800567c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 8140 	beq.w	8005906 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800568a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800568e:	429a      	cmp	r2, r3
 8005690:	f080 8139 	bcs.w	8005906 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800569a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a6:	f000 8088 	beq.w	80057ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80056d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1d9      	bne.n	80056aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3314      	adds	r3, #20
 80056fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005708:	f023 0301 	bic.w	r3, r3, #1
 800570c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3314      	adds	r3, #20
 8005716:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800571a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800571e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005722:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800572c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e1      	bne.n	80056f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3314      	adds	r3, #20
 8005738:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005748:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3314      	adds	r3, #20
 8005752:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005756:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005758:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800575c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e3      	bne.n	8005732 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	330c      	adds	r3, #12
 800577e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800578a:	f023 0310 	bic.w	r3, r3, #16
 800578e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800579c:	65ba      	str	r2, [r7, #88]	; 0x58
 800579e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e3      	bne.n	8005778 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fd fa93 	bl	8002ce0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f8c0 	bl	8005950 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057d0:	e099      	b.n	8005906 <HAL_UART_IRQHandler+0x50e>
 80057d2:	bf00      	nop
 80057d4:	08005e5b 	.word	0x08005e5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 808b 	beq.w	800590a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80057f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 8086 	beq.w	800590a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800580e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005810:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005814:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	330c      	adds	r3, #12
 800581e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005822:	647a      	str	r2, [r7, #68]	; 0x44
 8005824:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005828:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e3      	bne.n	80057fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3314      	adds	r3, #20
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	623b      	str	r3, [r7, #32]
   return(result);
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	f023 0301 	bic.w	r3, r3, #1
 800584c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3314      	adds	r3, #20
 8005856:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800585a:	633a      	str	r2, [r7, #48]	; 0x30
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e3      	bne.n	8005836 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	330c      	adds	r3, #12
 8005882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	60fb      	str	r3, [r7, #12]
   return(result);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0310 	bic.w	r3, r3, #16
 8005892:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	330c      	adds	r3, #12
 800589c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058a0:	61fa      	str	r2, [r7, #28]
 80058a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	69b9      	ldr	r1, [r7, #24]
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	617b      	str	r3, [r7, #20]
   return(result);
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e3      	bne.n	800587c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f848 	bl	8005950 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058c0:	e023      	b.n	800590a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d009      	beq.n	80058e2 <HAL_UART_IRQHandler+0x4ea>
 80058ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fad1 	bl	8005e82 <UART_Transmit_IT>
    return;
 80058e0:	e014      	b.n	800590c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00e      	beq.n	800590c <HAL_UART_IRQHandler+0x514>
 80058ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fb11 	bl	8005f22 <UART_EndTransmit_IT>
    return;
 8005900:	e004      	b.n	800590c <HAL_UART_IRQHandler+0x514>
    return;
 8005902:	bf00      	nop
 8005904:	e002      	b.n	800590c <HAL_UART_IRQHandler+0x514>
      return;
 8005906:	bf00      	nop
 8005908:	e000      	b.n	800590c <HAL_UART_IRQHandler+0x514>
      return;
 800590a:	bf00      	nop
  }
}
 800590c:	37e8      	adds	r7, #232	; 0xe8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop

08005914 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b090      	sub	sp, #64	; 0x40
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005980:	2b00      	cmp	r3, #0
 8005982:	d137      	bne.n	80059f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005986:	2200      	movs	r2, #0
 8005988:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800598a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3314      	adds	r3, #20
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	623b      	str	r3, [r7, #32]
   return(result);
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80059a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3314      	adds	r3, #20
 80059a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059aa:	633a      	str	r2, [r7, #48]	; 0x30
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e5      	bne.n	800598a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	330c      	adds	r3, #12
 80059c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d4:	637b      	str	r3, [r7, #52]	; 0x34
 80059d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	330c      	adds	r3, #12
 80059dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059de:	61fa      	str	r2, [r7, #28]
 80059e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	69b9      	ldr	r1, [r7, #24]
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	617b      	str	r3, [r7, #20]
   return(result);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e5      	bne.n	80059be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059f2:	e002      	b.n	80059fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80059f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80059f6:	f7fb f8a1 	bl	8000b3c <HAL_UART_TxCpltCallback>
}
 80059fa:	bf00      	nop
 80059fc:	3740      	adds	r7, #64	; 0x40
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff ff7f 	bl	8005914 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b09c      	sub	sp, #112	; 0x70
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d172      	bne.n	8005b20 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	330c      	adds	r3, #12
 8005a46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a60:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e5      	bne.n	8005a40 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3314      	adds	r3, #20
 8005a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	f023 0301 	bic.w	r3, r3, #1
 8005a8a:	667b      	str	r3, [r7, #100]	; 0x64
 8005a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3314      	adds	r3, #20
 8005a92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a94:	647a      	str	r2, [r7, #68]	; 0x44
 8005a96:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e5      	bne.n	8005a74 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3314      	adds	r3, #20
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005abe:	663b      	str	r3, [r7, #96]	; 0x60
 8005ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3314      	adds	r3, #20
 8005ac6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ac8:	633a      	str	r2, [r7, #48]	; 0x30
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e5      	bne.n	8005aa8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d119      	bne.n	8005b20 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0310 	bic.w	r3, r3, #16
 8005b02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b0c:	61fa      	str	r2, [r7, #28]
 8005b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	69b9      	ldr	r1, [r7, #24]
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	617b      	str	r3, [r7, #20]
   return(result);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e5      	bne.n	8005aec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d106      	bne.n	8005b36 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b30:	f7ff ff0e 	bl	8005950 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b34:	e002      	b.n	8005b3c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005b36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b38:	f7fb f81c 	bl	8000b74 <HAL_UART_RxCpltCallback>
}
 8005b3c:	bf00      	nop
 8005b3e:	3770      	adds	r7, #112	; 0x70
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d108      	bne.n	8005b6c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b5e:	085b      	lsrs	r3, r3, #1
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	4619      	mov	r1, r3
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7ff fef3 	bl	8005950 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b6a:	e002      	b.n	8005b72 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff fedb 	bl	8005928 <HAL_UART_RxHalfCpltCallback>
}
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b96:	2b80      	cmp	r3, #128	; 0x80
 8005b98:	bf0c      	ite	eq
 8005b9a:	2301      	moveq	r3, #1
 8005b9c:	2300      	movne	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b21      	cmp	r3, #33	; 0x21
 8005bac:	d108      	bne.n	8005bc0 <UART_DMAError+0x46>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005bba:	68b8      	ldr	r0, [r7, #8]
 8005bbc:	f000 f8c2 	bl	8005d44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	bf0c      	ite	eq
 8005bce:	2301      	moveq	r3, #1
 8005bd0:	2300      	movne	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b22      	cmp	r3, #34	; 0x22
 8005be0:	d108      	bne.n	8005bf4 <UART_DMAError+0x7a>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2200      	movs	r2, #0
 8005bec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005bee:	68b8      	ldr	r0, [r7, #8]
 8005bf0:	f000 f8d0 	bl	8005d94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	f043 0210 	orr.w	r2, r3, #16
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c00:	68b8      	ldr	r0, [r7, #8]
 8005c02:	f7ff fe9b 	bl	800593c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c06:	bf00      	nop
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b098      	sub	sp, #96	; 0x60
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	88fa      	ldrh	r2, [r7, #6]
 8005c28:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2222      	movs	r2, #34	; 0x22
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	4a3e      	ldr	r2, [pc, #248]	; (8005d38 <UART_Start_Receive_DMA+0x128>)
 8005c3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	4a3d      	ldr	r2, [pc, #244]	; (8005d3c <UART_Start_Receive_DMA+0x12c>)
 8005c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	4a3c      	ldr	r2, [pc, #240]	; (8005d40 <UART_Start_Receive_DMA+0x130>)
 8005c4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	2200      	movs	r2, #0
 8005c56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005c58:	f107 0308 	add.w	r3, r7, #8
 8005c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	88fb      	ldrh	r3, [r7, #6]
 8005c70:	f7fc ffde 	bl	8002c30 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	330c      	adds	r3, #12
 8005cb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cb2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005cb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e5      	bne.n	8005c92 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3314      	adds	r3, #20
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	657b      	str	r3, [r7, #84]	; 0x54
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3314      	adds	r3, #20
 8005ce4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ce6:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ce8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e5      	bne.n	8005cc6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3314      	adds	r3, #20
 8005d00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	617b      	str	r3, [r7, #20]
   return(result);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d10:	653b      	str	r3, [r7, #80]	; 0x50
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3314      	adds	r3, #20
 8005d18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d1a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6a39      	ldr	r1, [r7, #32]
 8005d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e5      	bne.n	8005cfa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3760      	adds	r7, #96	; 0x60
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	08005a1f 	.word	0x08005a1f
 8005d3c:	08005b45 	.word	0x08005b45
 8005d40:	08005b7b 	.word	0x08005b7b

08005d44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b089      	sub	sp, #36	; 0x24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d62:	61fb      	str	r3, [r7, #28]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	330c      	adds	r3, #12
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	61ba      	str	r2, [r7, #24]
 8005d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	6979      	ldr	r1, [r7, #20]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e5      	bne.n	8005d4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005d88:	bf00      	nop
 8005d8a:	3724      	adds	r7, #36	; 0x24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b095      	sub	sp, #84	; 0x54
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	330c      	adds	r3, #12
 8005dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dbc:	643a      	str	r2, [r7, #64]	; 0x40
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e5      	bne.n	8005d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3314      	adds	r3, #20
 8005dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f023 0301 	bic.w	r3, r3, #1
 8005de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3314      	adds	r3, #20
 8005dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005df8:	e841 2300 	strex	r3, r2, [r1]
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e5      	bne.n	8005dd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d119      	bne.n	8005e40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	330c      	adds	r3, #12
 8005e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f023 0310 	bic.w	r3, r3, #16
 8005e22:	647b      	str	r3, [r7, #68]	; 0x44
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	330c      	adds	r3, #12
 8005e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e2c:	61ba      	str	r2, [r7, #24]
 8005e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e30:	6979      	ldr	r1, [r7, #20]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	e841 2300 	strex	r3, r2, [r1]
 8005e38:	613b      	str	r3, [r7, #16]
   return(result);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1e5      	bne.n	8005e0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e4e:	bf00      	nop
 8005e50:	3754      	adds	r7, #84	; 0x54
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff fd61 	bl	800593c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e7a:	bf00      	nop
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b21      	cmp	r3, #33	; 0x21
 8005e94:	d13e      	bne.n	8005f14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9e:	d114      	bne.n	8005eca <UART_Transmit_IT+0x48>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d110      	bne.n	8005eca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ebc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	1c9a      	adds	r2, r3, #2
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	621a      	str	r2, [r3, #32]
 8005ec8:	e008      	b.n	8005edc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	1c59      	adds	r1, r3, #1
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6211      	str	r1, [r2, #32]
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10f      	bne.n	8005f10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005efe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e000      	b.n	8005f16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f14:	2302      	movs	r3, #2
  }
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fa fdfa 	bl	8000b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b08c      	sub	sp, #48	; 0x30
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b22      	cmp	r3, #34	; 0x22
 8005f64:	f040 80ab 	bne.w	80060be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f70:	d117      	bne.n	8005fa2 <UART_Receive_IT+0x50>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d113      	bne.n	8005fa2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	1c9a      	adds	r2, r3, #2
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8005fa0:	e026      	b.n	8005ff0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb4:	d007      	beq.n	8005fc6 <UART_Receive_IT+0x74>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <UART_Receive_IT+0x82>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	e008      	b.n	8005fe6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006000:	2b00      	cmp	r3, #0
 8006002:	d15a      	bne.n	80060ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0220 	bic.w	r2, r2, #32
 8006012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695a      	ldr	r2, [r3, #20]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0201 	bic.w	r2, r2, #1
 8006032:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	2b01      	cmp	r3, #1
 8006042:	d135      	bne.n	80060b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	330c      	adds	r3, #12
 8006050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	613b      	str	r3, [r7, #16]
   return(result);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f023 0310 	bic.w	r3, r3, #16
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	330c      	adds	r3, #12
 8006068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606a:	623a      	str	r2, [r7, #32]
 800606c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	69f9      	ldr	r1, [r7, #28]
 8006070:	6a3a      	ldr	r2, [r7, #32]
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	61bb      	str	r3, [r7, #24]
   return(result);
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e5      	bne.n	800604a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b10      	cmp	r3, #16
 800608a:	d10a      	bne.n	80060a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff fc51 	bl	8005950 <HAL_UARTEx_RxEventCallback>
 80060ae:	e002      	b.n	80060b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7fa fd5f 	bl	8000b74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e002      	b.n	80060c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e000      	b.n	80060c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80060be:	2302      	movs	r3, #2
  }
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3730      	adds	r7, #48	; 0x30
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060cc:	b09f      	sub	sp, #124	; 0x7c
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060de:	68d9      	ldr	r1, [r3, #12]
 80060e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	ea40 0301 	orr.w	r3, r0, r1
 80060e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	431a      	orrs	r2, r3
 80060fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	4313      	orrs	r3, r2
 8006100:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800610c:	f021 010c 	bic.w	r1, r1, #12
 8006110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006116:	430b      	orrs	r3, r1
 8006118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800611a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006126:	6999      	ldr	r1, [r3, #24]
 8006128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	ea40 0301 	orr.w	r3, r0, r1
 8006130:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	4bc5      	ldr	r3, [pc, #788]	; (800644c <UART_SetConfig+0x384>)
 8006138:	429a      	cmp	r2, r3
 800613a:	d004      	beq.n	8006146 <UART_SetConfig+0x7e>
 800613c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	4bc3      	ldr	r3, [pc, #780]	; (8006450 <UART_SetConfig+0x388>)
 8006142:	429a      	cmp	r2, r3
 8006144:	d103      	bne.n	800614e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006146:	f7ff f847 	bl	80051d8 <HAL_RCC_GetPCLK2Freq>
 800614a:	6778      	str	r0, [r7, #116]	; 0x74
 800614c:	e002      	b.n	8006154 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800614e:	f7ff f82f 	bl	80051b0 <HAL_RCC_GetPCLK1Freq>
 8006152:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800615c:	f040 80b6 	bne.w	80062cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006162:	461c      	mov	r4, r3
 8006164:	f04f 0500 	mov.w	r5, #0
 8006168:	4622      	mov	r2, r4
 800616a:	462b      	mov	r3, r5
 800616c:	1891      	adds	r1, r2, r2
 800616e:	6439      	str	r1, [r7, #64]	; 0x40
 8006170:	415b      	adcs	r3, r3
 8006172:	647b      	str	r3, [r7, #68]	; 0x44
 8006174:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006178:	1912      	adds	r2, r2, r4
 800617a:	eb45 0303 	adc.w	r3, r5, r3
 800617e:	f04f 0000 	mov.w	r0, #0
 8006182:	f04f 0100 	mov.w	r1, #0
 8006186:	00d9      	lsls	r1, r3, #3
 8006188:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800618c:	00d0      	lsls	r0, r2, #3
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	1911      	adds	r1, r2, r4
 8006194:	6639      	str	r1, [r7, #96]	; 0x60
 8006196:	416b      	adcs	r3, r5
 8006198:	667b      	str	r3, [r7, #100]	; 0x64
 800619a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	461a      	mov	r2, r3
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	1891      	adds	r1, r2, r2
 80061a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80061a8:	415b      	adcs	r3, r3
 80061aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80061b4:	f7fa f80e 	bl	80001d4 <__aeabi_uldivmod>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4ba5      	ldr	r3, [pc, #660]	; (8006454 <UART_SetConfig+0x38c>)
 80061be:	fba3 2302 	umull	r2, r3, r3, r2
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	011e      	lsls	r6, r3, #4
 80061c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c8:	461c      	mov	r4, r3
 80061ca:	f04f 0500 	mov.w	r5, #0
 80061ce:	4622      	mov	r2, r4
 80061d0:	462b      	mov	r3, r5
 80061d2:	1891      	adds	r1, r2, r2
 80061d4:	6339      	str	r1, [r7, #48]	; 0x30
 80061d6:	415b      	adcs	r3, r3
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
 80061da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80061de:	1912      	adds	r2, r2, r4
 80061e0:	eb45 0303 	adc.w	r3, r5, r3
 80061e4:	f04f 0000 	mov.w	r0, #0
 80061e8:	f04f 0100 	mov.w	r1, #0
 80061ec:	00d9      	lsls	r1, r3, #3
 80061ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061f2:	00d0      	lsls	r0, r2, #3
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	1911      	adds	r1, r2, r4
 80061fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80061fc:	416b      	adcs	r3, r5
 80061fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	461a      	mov	r2, r3
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	1891      	adds	r1, r2, r2
 800620c:	62b9      	str	r1, [r7, #40]	; 0x28
 800620e:	415b      	adcs	r3, r3
 8006210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006216:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800621a:	f7f9 ffdb 	bl	80001d4 <__aeabi_uldivmod>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	4b8c      	ldr	r3, [pc, #560]	; (8006454 <UART_SetConfig+0x38c>)
 8006224:	fba3 1302 	umull	r1, r3, r3, r2
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	2164      	movs	r1, #100	; 0x64
 800622c:	fb01 f303 	mul.w	r3, r1, r3
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	3332      	adds	r3, #50	; 0x32
 8006236:	4a87      	ldr	r2, [pc, #540]	; (8006454 <UART_SetConfig+0x38c>)
 8006238:	fba2 2303 	umull	r2, r3, r2, r3
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006244:	441e      	add	r6, r3
 8006246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006248:	4618      	mov	r0, r3
 800624a:	f04f 0100 	mov.w	r1, #0
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	1894      	adds	r4, r2, r2
 8006254:	623c      	str	r4, [r7, #32]
 8006256:	415b      	adcs	r3, r3
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
 800625a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800625e:	1812      	adds	r2, r2, r0
 8006260:	eb41 0303 	adc.w	r3, r1, r3
 8006264:	f04f 0400 	mov.w	r4, #0
 8006268:	f04f 0500 	mov.w	r5, #0
 800626c:	00dd      	lsls	r5, r3, #3
 800626e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006272:	00d4      	lsls	r4, r2, #3
 8006274:	4622      	mov	r2, r4
 8006276:	462b      	mov	r3, r5
 8006278:	1814      	adds	r4, r2, r0
 800627a:	653c      	str	r4, [r7, #80]	; 0x50
 800627c:	414b      	adcs	r3, r1
 800627e:	657b      	str	r3, [r7, #84]	; 0x54
 8006280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	461a      	mov	r2, r3
 8006286:	f04f 0300 	mov.w	r3, #0
 800628a:	1891      	adds	r1, r2, r2
 800628c:	61b9      	str	r1, [r7, #24]
 800628e:	415b      	adcs	r3, r3
 8006290:	61fb      	str	r3, [r7, #28]
 8006292:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006296:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800629a:	f7f9 ff9b 	bl	80001d4 <__aeabi_uldivmod>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4b6c      	ldr	r3, [pc, #432]	; (8006454 <UART_SetConfig+0x38c>)
 80062a4:	fba3 1302 	umull	r1, r3, r3, r2
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	2164      	movs	r1, #100	; 0x64
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	3332      	adds	r3, #50	; 0x32
 80062b6:	4a67      	ldr	r2, [pc, #412]	; (8006454 <UART_SetConfig+0x38c>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	f003 0207 	and.w	r2, r3, #7
 80062c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4432      	add	r2, r6
 80062c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062ca:	e0b9      	b.n	8006440 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062ce:	461c      	mov	r4, r3
 80062d0:	f04f 0500 	mov.w	r5, #0
 80062d4:	4622      	mov	r2, r4
 80062d6:	462b      	mov	r3, r5
 80062d8:	1891      	adds	r1, r2, r2
 80062da:	6139      	str	r1, [r7, #16]
 80062dc:	415b      	adcs	r3, r3
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80062e4:	1912      	adds	r2, r2, r4
 80062e6:	eb45 0303 	adc.w	r3, r5, r3
 80062ea:	f04f 0000 	mov.w	r0, #0
 80062ee:	f04f 0100 	mov.w	r1, #0
 80062f2:	00d9      	lsls	r1, r3, #3
 80062f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062f8:	00d0      	lsls	r0, r2, #3
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	eb12 0804 	adds.w	r8, r2, r4
 8006302:	eb43 0905 	adc.w	r9, r3, r5
 8006306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4618      	mov	r0, r3
 800630c:	f04f 0100 	mov.w	r1, #0
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	008b      	lsls	r3, r1, #2
 800631a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800631e:	0082      	lsls	r2, r0, #2
 8006320:	4640      	mov	r0, r8
 8006322:	4649      	mov	r1, r9
 8006324:	f7f9 ff56 	bl	80001d4 <__aeabi_uldivmod>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4b49      	ldr	r3, [pc, #292]	; (8006454 <UART_SetConfig+0x38c>)
 800632e:	fba3 2302 	umull	r2, r3, r3, r2
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	011e      	lsls	r6, r3, #4
 8006336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006338:	4618      	mov	r0, r3
 800633a:	f04f 0100 	mov.w	r1, #0
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	1894      	adds	r4, r2, r2
 8006344:	60bc      	str	r4, [r7, #8]
 8006346:	415b      	adcs	r3, r3
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800634e:	1812      	adds	r2, r2, r0
 8006350:	eb41 0303 	adc.w	r3, r1, r3
 8006354:	f04f 0400 	mov.w	r4, #0
 8006358:	f04f 0500 	mov.w	r5, #0
 800635c:	00dd      	lsls	r5, r3, #3
 800635e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006362:	00d4      	lsls	r4, r2, #3
 8006364:	4622      	mov	r2, r4
 8006366:	462b      	mov	r3, r5
 8006368:	1814      	adds	r4, r2, r0
 800636a:	64bc      	str	r4, [r7, #72]	; 0x48
 800636c:	414b      	adcs	r3, r1
 800636e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	4618      	mov	r0, r3
 8006376:	f04f 0100 	mov.w	r1, #0
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	f04f 0300 	mov.w	r3, #0
 8006382:	008b      	lsls	r3, r1, #2
 8006384:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006388:	0082      	lsls	r2, r0, #2
 800638a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800638e:	f7f9 ff21 	bl	80001d4 <__aeabi_uldivmod>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4b2f      	ldr	r3, [pc, #188]	; (8006454 <UART_SetConfig+0x38c>)
 8006398:	fba3 1302 	umull	r1, r3, r3, r2
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	2164      	movs	r1, #100	; 0x64
 80063a0:	fb01 f303 	mul.w	r3, r1, r3
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	3332      	adds	r3, #50	; 0x32
 80063aa:	4a2a      	ldr	r2, [pc, #168]	; (8006454 <UART_SetConfig+0x38c>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063b6:	441e      	add	r6, r3
 80063b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ba:	4618      	mov	r0, r3
 80063bc:	f04f 0100 	mov.w	r1, #0
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	1894      	adds	r4, r2, r2
 80063c6:	603c      	str	r4, [r7, #0]
 80063c8:	415b      	adcs	r3, r3
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d0:	1812      	adds	r2, r2, r0
 80063d2:	eb41 0303 	adc.w	r3, r1, r3
 80063d6:	f04f 0400 	mov.w	r4, #0
 80063da:	f04f 0500 	mov.w	r5, #0
 80063de:	00dd      	lsls	r5, r3, #3
 80063e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063e4:	00d4      	lsls	r4, r2, #3
 80063e6:	4622      	mov	r2, r4
 80063e8:	462b      	mov	r3, r5
 80063ea:	eb12 0a00 	adds.w	sl, r2, r0
 80063ee:	eb43 0b01 	adc.w	fp, r3, r1
 80063f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f04f 0100 	mov.w	r1, #0
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	008b      	lsls	r3, r1, #2
 8006406:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800640a:	0082      	lsls	r2, r0, #2
 800640c:	4650      	mov	r0, sl
 800640e:	4659      	mov	r1, fp
 8006410:	f7f9 fee0 	bl	80001d4 <__aeabi_uldivmod>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4b0e      	ldr	r3, [pc, #56]	; (8006454 <UART_SetConfig+0x38c>)
 800641a:	fba3 1302 	umull	r1, r3, r3, r2
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	2164      	movs	r1, #100	; 0x64
 8006422:	fb01 f303 	mul.w	r3, r1, r3
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	3332      	adds	r3, #50	; 0x32
 800642c:	4a09      	ldr	r2, [pc, #36]	; (8006454 <UART_SetConfig+0x38c>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	f003 020f 	and.w	r2, r3, #15
 8006438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4432      	add	r2, r6
 800643e:	609a      	str	r2, [r3, #8]
}
 8006440:	bf00      	nop
 8006442:	377c      	adds	r7, #124	; 0x7c
 8006444:	46bd      	mov	sp, r7
 8006446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644a:	bf00      	nop
 800644c:	40011000 	.word	0x40011000
 8006450:	40011400 	.word	0x40011400
 8006454:	51eb851f 	.word	0x51eb851f

08006458 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006458:	b084      	sub	sp, #16
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	f107 001c 	add.w	r0, r7, #28
 8006466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	2b01      	cmp	r3, #1
 800646e:	d122      	bne.n	80064b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649a:	2b01      	cmp	r3, #1
 800649c:	d105      	bne.n	80064aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fb1c 	bl	8007ae8 <USB_CoreReset>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]
 80064b4:	e01a      	b.n	80064ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 fb10 	bl	8007ae8 <USB_CoreReset>
 80064c8:	4603      	mov	r3, r0
 80064ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	639a      	str	r2, [r3, #56]	; 0x38
 80064de:	e005      	b.n	80064ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d10b      	bne.n	800650a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f043 0206 	orr.w	r2, r3, #6
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f043 0220 	orr.w	r2, r3, #32
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800650a:	7bfb      	ldrb	r3, [r7, #15]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006516:	b004      	add	sp, #16
 8006518:	4770      	bx	lr
	...

0800651c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	4613      	mov	r3, r2
 8006528:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	2b02      	cmp	r3, #2
 800652e:	d165      	bne.n	80065fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4a41      	ldr	r2, [pc, #260]	; (8006638 <USB_SetTurnaroundTime+0x11c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d906      	bls.n	8006546 <USB_SetTurnaroundTime+0x2a>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4a40      	ldr	r2, [pc, #256]	; (800663c <USB_SetTurnaroundTime+0x120>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d202      	bcs.n	8006546 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006540:	230f      	movs	r3, #15
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	e062      	b.n	800660c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4a3c      	ldr	r2, [pc, #240]	; (800663c <USB_SetTurnaroundTime+0x120>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d306      	bcc.n	800655c <USB_SetTurnaroundTime+0x40>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4a3b      	ldr	r2, [pc, #236]	; (8006640 <USB_SetTurnaroundTime+0x124>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d202      	bcs.n	800655c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006556:	230e      	movs	r3, #14
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	e057      	b.n	800660c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a38      	ldr	r2, [pc, #224]	; (8006640 <USB_SetTurnaroundTime+0x124>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d306      	bcc.n	8006572 <USB_SetTurnaroundTime+0x56>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4a37      	ldr	r2, [pc, #220]	; (8006644 <USB_SetTurnaroundTime+0x128>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d202      	bcs.n	8006572 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800656c:	230d      	movs	r3, #13
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e04c      	b.n	800660c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	4a33      	ldr	r2, [pc, #204]	; (8006644 <USB_SetTurnaroundTime+0x128>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d306      	bcc.n	8006588 <USB_SetTurnaroundTime+0x6c>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4a32      	ldr	r2, [pc, #200]	; (8006648 <USB_SetTurnaroundTime+0x12c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d802      	bhi.n	8006588 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006582:	230c      	movs	r3, #12
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	e041      	b.n	800660c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4a2f      	ldr	r2, [pc, #188]	; (8006648 <USB_SetTurnaroundTime+0x12c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d906      	bls.n	800659e <USB_SetTurnaroundTime+0x82>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4a2e      	ldr	r2, [pc, #184]	; (800664c <USB_SetTurnaroundTime+0x130>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d802      	bhi.n	800659e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006598:	230b      	movs	r3, #11
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	e036      	b.n	800660c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	4a2a      	ldr	r2, [pc, #168]	; (800664c <USB_SetTurnaroundTime+0x130>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d906      	bls.n	80065b4 <USB_SetTurnaroundTime+0x98>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	4a29      	ldr	r2, [pc, #164]	; (8006650 <USB_SetTurnaroundTime+0x134>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d802      	bhi.n	80065b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80065ae:	230a      	movs	r3, #10
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	e02b      	b.n	800660c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4a26      	ldr	r2, [pc, #152]	; (8006650 <USB_SetTurnaroundTime+0x134>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d906      	bls.n	80065ca <USB_SetTurnaroundTime+0xae>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	4a25      	ldr	r2, [pc, #148]	; (8006654 <USB_SetTurnaroundTime+0x138>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d202      	bcs.n	80065ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065c4:	2309      	movs	r3, #9
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e020      	b.n	800660c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4a21      	ldr	r2, [pc, #132]	; (8006654 <USB_SetTurnaroundTime+0x138>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d306      	bcc.n	80065e0 <USB_SetTurnaroundTime+0xc4>
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	4a20      	ldr	r2, [pc, #128]	; (8006658 <USB_SetTurnaroundTime+0x13c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d802      	bhi.n	80065e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80065da:	2308      	movs	r3, #8
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	e015      	b.n	800660c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4a1d      	ldr	r2, [pc, #116]	; (8006658 <USB_SetTurnaroundTime+0x13c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d906      	bls.n	80065f6 <USB_SetTurnaroundTime+0xda>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4a1c      	ldr	r2, [pc, #112]	; (800665c <USB_SetTurnaroundTime+0x140>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d202      	bcs.n	80065f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065f0:	2307      	movs	r3, #7
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e00a      	b.n	800660c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065f6:	2306      	movs	r3, #6
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	e007      	b.n	800660c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006602:	2309      	movs	r3, #9
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	e001      	b.n	800660c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006608:	2309      	movs	r3, #9
 800660a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	029b      	lsls	r3, r3, #10
 8006620:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006624:	431a      	orrs	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	371c      	adds	r7, #28
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	00d8acbf 	.word	0x00d8acbf
 800663c:	00e4e1c0 	.word	0x00e4e1c0
 8006640:	00f42400 	.word	0x00f42400
 8006644:	01067380 	.word	0x01067380
 8006648:	011a499f 	.word	0x011a499f
 800664c:	01312cff 	.word	0x01312cff
 8006650:	014ca43f 	.word	0x014ca43f
 8006654:	016e3600 	.word	0x016e3600
 8006658:	01a6ab1f 	.word	0x01a6ab1f
 800665c:	01e84800 	.word	0x01e84800

08006660 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f043 0201 	orr.w	r2, r3, #1
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f023 0201 	bic.w	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d115      	bne.n	80066f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066d2:	2001      	movs	r0, #1
 80066d4:	f7fc f8c8 	bl	8002868 <HAL_Delay>
      ms++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 f972 	bl	80079c8 <USB_GetMode>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d01e      	beq.n	8006728 <USB_SetCurrentMode+0x84>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b31      	cmp	r3, #49	; 0x31
 80066ee:	d9f0      	bls.n	80066d2 <USB_SetCurrentMode+0x2e>
 80066f0:	e01a      	b.n	8006728 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d115      	bne.n	8006724 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006704:	2001      	movs	r0, #1
 8006706:	f7fc f8af 	bl	8002868 <HAL_Delay>
      ms++;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3301      	adds	r3, #1
 800670e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 f959 	bl	80079c8 <USB_GetMode>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <USB_SetCurrentMode+0x84>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b31      	cmp	r3, #49	; 0x31
 8006720:	d9f0      	bls.n	8006704 <USB_SetCurrentMode+0x60>
 8006722:	e001      	b.n	8006728 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e005      	b.n	8006734 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b32      	cmp	r3, #50	; 0x32
 800672c:	d101      	bne.n	8006732 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800673c:	b084      	sub	sp, #16
 800673e:	b580      	push	{r7, lr}
 8006740:	b086      	sub	sp, #24
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800674a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006756:	2300      	movs	r3, #0
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	e009      	b.n	8006770 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	3340      	adds	r3, #64	; 0x40
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	2200      	movs	r2, #0
 8006768:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	3301      	adds	r3, #1
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	2b0e      	cmp	r3, #14
 8006774:	d9f2      	bls.n	800675c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d11c      	bne.n	80067b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800678a:	f043 0302 	orr.w	r3, r3, #2
 800678e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	639a      	str	r2, [r3, #56]	; 0x38
 80067b4:	e00b      	b.n	80067ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067d4:	461a      	mov	r2, r3
 80067d6:	2300      	movs	r3, #0
 80067d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e0:	4619      	mov	r1, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e8:	461a      	mov	r2, r3
 80067ea:	680b      	ldr	r3, [r1, #0]
 80067ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d10c      	bne.n	800680e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d104      	bne.n	8006804 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067fa:	2100      	movs	r1, #0
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f945 	bl	8006a8c <USB_SetDevSpeed>
 8006802:	e008      	b.n	8006816 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006804:	2101      	movs	r1, #1
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f940 	bl	8006a8c <USB_SetDevSpeed>
 800680c:	e003      	b.n	8006816 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800680e:	2103      	movs	r1, #3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f93b 	bl	8006a8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006816:	2110      	movs	r1, #16
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f8f3 	bl	8006a04 <USB_FlushTxFifo>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f90f 	bl	8006a4c <USB_FlushRxFifo>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683e:	461a      	mov	r2, r3
 8006840:	2300      	movs	r3, #0
 8006842:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	461a      	mov	r2, r3
 800684c:	2300      	movs	r3, #0
 800684e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006856:	461a      	mov	r2, r3
 8006858:	2300      	movs	r3, #0
 800685a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800685c:	2300      	movs	r3, #0
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	e043      	b.n	80068ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006878:	d118      	bne.n	80068ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688c:	461a      	mov	r2, r3
 800688e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	e013      	b.n	80068be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a2:	461a      	mov	r2, r3
 80068a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	e008      	b.n	80068be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b8:	461a      	mov	r2, r3
 80068ba:	2300      	movs	r3, #0
 80068bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ca:	461a      	mov	r2, r3
 80068cc:	2300      	movs	r3, #0
 80068ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068dc:	461a      	mov	r2, r3
 80068de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	3301      	adds	r3, #1
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d3b7      	bcc.n	8006862 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068f2:	2300      	movs	r3, #0
 80068f4:	613b      	str	r3, [r7, #16]
 80068f6:	e043      	b.n	8006980 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800690a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800690e:	d118      	bne.n	8006942 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10a      	bne.n	800692c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006922:	461a      	mov	r2, r3
 8006924:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e013      	b.n	8006954 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	461a      	mov	r2, r3
 800693a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	e008      	b.n	8006954 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	461a      	mov	r2, r3
 8006950:	2300      	movs	r3, #0
 8006952:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006960:	461a      	mov	r2, r3
 8006962:	2300      	movs	r3, #0
 8006964:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006972:	461a      	mov	r2, r3
 8006974:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006978:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	3301      	adds	r3, #1
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	429a      	cmp	r2, r3
 8006986:	d3b7      	bcc.n	80068f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006996:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800699a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80069a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d105      	bne.n	80069bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	f043 0210 	orr.w	r2, r3, #16
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699a      	ldr	r2, [r3, #24]
 80069c0:	4b0f      	ldr	r3, [pc, #60]	; (8006a00 <USB_DevInit+0x2c4>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d005      	beq.n	80069da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	f043 0208 	orr.w	r2, r3, #8
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d107      	bne.n	80069f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069e8:	f043 0304 	orr.w	r3, r3, #4
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069fc:	b004      	add	sp, #16
 80069fe:	4770      	bx	lr
 8006a00:	803c3800 	.word	0x803c3800

08006a04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	019b      	lsls	r3, r3, #6
 8006a16:	f043 0220 	orr.w	r2, r3, #32
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3301      	adds	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	4a08      	ldr	r2, [pc, #32]	; (8006a48 <USB_FlushTxFifo+0x44>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d901      	bls.n	8006a2e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e006      	b.n	8006a3c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	d0f1      	beq.n	8006a1e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	00030d40 	.word	0x00030d40

08006a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2210      	movs	r2, #16
 8006a5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3301      	adds	r3, #1
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	4a08      	ldr	r2, [pc, #32]	; (8006a88 <USB_FlushRxFifo+0x3c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d901      	bls.n	8006a6e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e006      	b.n	8006a7c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	f003 0310 	and.w	r3, r3, #16
 8006a76:	2b10      	cmp	r3, #16
 8006a78:	d0f1      	beq.n	8006a5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	00030d40 	.word	0x00030d40

08006a8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	68f9      	ldr	r1, [r7, #12]
 8006aa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aac:	4313      	orrs	r3, r2
 8006aae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b087      	sub	sp, #28
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 0306 	and.w	r3, r3, #6
 8006ad6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	75fb      	strb	r3, [r7, #23]
 8006ae2:	e00a      	b.n	8006afa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d002      	beq.n	8006af0 <USB_GetDevSpeed+0x32>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b06      	cmp	r3, #6
 8006aee:	d102      	bne.n	8006af6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006af0:	2302      	movs	r3, #2
 8006af2:	75fb      	strb	r3, [r7, #23]
 8006af4:	e001      	b.n	8006afa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006af6:	230f      	movs	r3, #15
 8006af8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	371c      	adds	r7, #28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	785b      	ldrb	r3, [r3, #1]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d13a      	bne.n	8006b9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2a:	69da      	ldr	r2, [r3, #28]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	f003 030f 	and.w	r3, r3, #15
 8006b34:	2101      	movs	r1, #1
 8006b36:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	68f9      	ldr	r1, [r7, #12]
 8006b3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b42:	4313      	orrs	r3, r2
 8006b44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d155      	bne.n	8006c08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	78db      	ldrb	r3, [r3, #3]
 8006b76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	059b      	lsls	r3, r3, #22
 8006b7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b80:	4313      	orrs	r3, r2
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	e036      	b.n	8006c08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba0:	69da      	ldr	r2, [r3, #28]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	f003 030f 	and.w	r3, r3, #15
 8006baa:	2101      	movs	r1, #1
 8006bac:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb0:	041b      	lsls	r3, r3, #16
 8006bb2:	68f9      	ldr	r1, [r7, #12]
 8006bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d11a      	bne.n	8006c08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	78db      	ldrb	r3, [r3, #3]
 8006bec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bee:	430b      	orrs	r3, r1
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
	...

08006c18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d161      	bne.n	8006cf8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c4a:	d11f      	bne.n	8006c8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f003 030f 	and.w	r3, r3, #15
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cac:	4013      	ands	r3, r2
 8006cae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	68f9      	ldr	r1, [r7, #12]
 8006ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	0159      	lsls	r1, r3, #5
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	440b      	add	r3, r1
 8006cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4b35      	ldr	r3, [pc, #212]	; (8006dc8 <USB_DeactivateEndpoint+0x1b0>)
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	600b      	str	r3, [r1, #0]
 8006cf6:	e060      	b.n	8006dba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d0e:	d11f      	bne.n	8006d50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	0151      	lsls	r1, r2, #5
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	440a      	add	r2, r1
 8006d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	2101      	movs	r1, #1
 8006d62:	fa01 f303 	lsl.w	r3, r1, r3
 8006d66:	041b      	lsls	r3, r3, #16
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	68f9      	ldr	r1, [r7, #12]
 8006d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d70:	4013      	ands	r3, r2
 8006d72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7a:	69da      	ldr	r2, [r3, #28]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	f003 030f 	and.w	r3, r3, #15
 8006d84:	2101      	movs	r1, #1
 8006d86:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8a:	041b      	lsls	r3, r3, #16
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	68f9      	ldr	r1, [r7, #12]
 8006d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d94:	4013      	ands	r3, r2
 8006d96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	0159      	lsls	r1, r3, #5
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	440b      	add	r3, r1
 8006dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db2:	4619      	mov	r1, r3
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <USB_DeactivateEndpoint+0x1b4>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	ec337800 	.word	0xec337800
 8006dcc:	eff37800 	.word	0xeff37800

08006dd0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	; 0x28
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	f040 815c 	bne.w	80070aa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d132      	bne.n	8006e60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	0151      	lsls	r1, r2, #5
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	440a      	add	r2, r1
 8006e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e58:	0cdb      	lsrs	r3, r3, #19
 8006e5a:	04db      	lsls	r3, r3, #19
 8006e5c:	6113      	str	r3, [r2, #16]
 8006e5e:	e074      	b.n	8006f4a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	69fa      	ldr	r2, [r7, #28]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e7a:	0cdb      	lsrs	r3, r3, #19
 8006e7c:	04db      	lsls	r3, r3, #19
 8006e7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	0151      	lsls	r1, r2, #5
 8006e92:	69fa      	ldr	r2, [r7, #28]
 8006e94:	440a      	add	r2, r1
 8006e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ea2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6959      	ldr	r1, [r3, #20]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	440b      	add	r3, r1
 8006ebc:	1e59      	subs	r1, r3, #1
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ec6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ec8:	4b9d      	ldr	r3, [pc, #628]	; (8007140 <USB_EPStartXfer+0x370>)
 8006eca:	400b      	ands	r3, r1
 8006ecc:	69b9      	ldr	r1, [r7, #24]
 8006ece:	0148      	lsls	r0, r1, #5
 8006ed0:	69f9      	ldr	r1, [r7, #28]
 8006ed2:	4401      	add	r1, r0
 8006ed4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee8:	691a      	ldr	r2, [r3, #16]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef2:	69b9      	ldr	r1, [r7, #24]
 8006ef4:	0148      	lsls	r0, r1, #5
 8006ef6:	69f9      	ldr	r1, [r7, #28]
 8006ef8:	4401      	add	r1, r0
 8006efa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006efe:	4313      	orrs	r3, r2
 8006f00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	78db      	ldrb	r3, [r3, #3]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d11f      	bne.n	8006f4a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	0151      	lsls	r1, r2, #5
 8006f1c:	69fa      	ldr	r2, [r7, #28]
 8006f1e:	440a      	add	r2, r1
 8006f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006f28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	0151      	lsls	r1, r2, #5
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	440a      	add	r2, r1
 8006f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006f4a:	79fb      	ldrb	r3, [r7, #7]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d14b      	bne.n	8006fe8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d009      	beq.n	8006f6c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f64:	461a      	mov	r2, r3
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	78db      	ldrb	r3, [r3, #3]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d128      	bne.n	8006fc6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d110      	bne.n	8006fa6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	0151      	lsls	r1, r2, #5
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	440a      	add	r2, r1
 8006f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	e00f      	b.n	8006fc6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	0151      	lsls	r1, r2, #5
 8006fb8:	69fa      	ldr	r2, [r7, #28]
 8006fba:	440a      	add	r2, r1
 8006fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	0151      	lsls	r1, r2, #5
 8006fd8:	69fa      	ldr	r2, [r7, #28]
 8006fda:	440a      	add	r2, r1
 8006fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	e12f      	b.n	8007248 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007002:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007006:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	78db      	ldrb	r3, [r3, #3]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d015      	beq.n	800703c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 8117 	beq.w	8007248 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	2101      	movs	r1, #1
 800702c:	fa01 f303 	lsl.w	r3, r1, r3
 8007030:	69f9      	ldr	r1, [r7, #28]
 8007032:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007036:	4313      	orrs	r3, r2
 8007038:	634b      	str	r3, [r1, #52]	; 0x34
 800703a:	e105      	b.n	8007248 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007048:	2b00      	cmp	r3, #0
 800704a:	d110      	bne.n	800706e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	0151      	lsls	r1, r2, #5
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	440a      	add	r2, r1
 8007062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007066:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	e00f      	b.n	800708e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	0151      	lsls	r1, r2, #5
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	440a      	add	r2, r1
 8007084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800708c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	68d9      	ldr	r1, [r3, #12]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	781a      	ldrb	r2, [r3, #0]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	b298      	uxth	r0, r3
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	4603      	mov	r3, r0
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 fa2b 	bl	80074fe <USB_WritePacket>
 80070a8:	e0ce      	b.n	8007248 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	0151      	lsls	r1, r2, #5
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	440a      	add	r2, r1
 80070c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c4:	0cdb      	lsrs	r3, r3, #19
 80070c6:	04db      	lsls	r3, r3, #19
 80070c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	0151      	lsls	r1, r2, #5
 80070dc:	69fa      	ldr	r2, [r7, #28]
 80070de:	440a      	add	r2, r1
 80070e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d126      	bne.n	8007144 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	691a      	ldr	r2, [r3, #16]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800710c:	69b9      	ldr	r1, [r7, #24]
 800710e:	0148      	lsls	r0, r1, #5
 8007110:	69f9      	ldr	r1, [r7, #28]
 8007112:	4401      	add	r1, r0
 8007114:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007118:	4313      	orrs	r3, r2
 800711a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	0151      	lsls	r1, r2, #5
 800712e:	69fa      	ldr	r2, [r7, #28]
 8007130:	440a      	add	r2, r1
 8007132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007136:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800713a:	6113      	str	r3, [r2, #16]
 800713c:	e036      	b.n	80071ac <USB_EPStartXfer+0x3dc>
 800713e:	bf00      	nop
 8007140:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	695a      	ldr	r2, [r3, #20]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	4413      	add	r3, r2
 800714e:	1e5a      	subs	r2, r3, #1
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	fbb2 f3f3 	udiv	r3, r2, r3
 8007158:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007166:	691a      	ldr	r2, [r3, #16]
 8007168:	8afb      	ldrh	r3, [r7, #22]
 800716a:	04d9      	lsls	r1, r3, #19
 800716c:	4b39      	ldr	r3, [pc, #228]	; (8007254 <USB_EPStartXfer+0x484>)
 800716e:	400b      	ands	r3, r1
 8007170:	69b9      	ldr	r1, [r7, #24]
 8007172:	0148      	lsls	r0, r1, #5
 8007174:	69f9      	ldr	r1, [r7, #28]
 8007176:	4401      	add	r1, r0
 8007178:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800717c:	4313      	orrs	r3, r2
 800717e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	8af9      	ldrh	r1, [r7, #22]
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800719c:	69b9      	ldr	r1, [r7, #24]
 800719e:	0148      	lsls	r0, r1, #5
 80071a0:	69f9      	ldr	r1, [r7, #28]
 80071a2:	4401      	add	r1, r0
 80071a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071a8:	4313      	orrs	r3, r2
 80071aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d10d      	bne.n	80071ce <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	68d9      	ldr	r1, [r3, #12]
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ca:	460a      	mov	r2, r1
 80071cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	78db      	ldrb	r3, [r3, #3]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d128      	bne.n	8007228 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d110      	bne.n	8007208 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	69fa      	ldr	r2, [r7, #28]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007200:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	e00f      	b.n	8007228 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	0151      	lsls	r1, r2, #5
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	440a      	add	r2, r1
 800721e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007226:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	440a      	add	r2, r1
 800723e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007242:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3720      	adds	r7, #32
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	1ff80000 	.word	0x1ff80000

08007258 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	785b      	ldrb	r3, [r3, #1]
 8007274:	2b01      	cmp	r3, #1
 8007276:	f040 80cd 	bne.w	8007414 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d132      	bne.n	80072e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	0151      	lsls	r1, r2, #5
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	440a      	add	r2, r1
 8007298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	0151      	lsls	r1, r2, #5
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	440a      	add	r2, r1
 80072bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	0151      	lsls	r1, r2, #5
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	440a      	add	r2, r1
 80072dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072e0:	0cdb      	lsrs	r3, r3, #19
 80072e2:	04db      	lsls	r3, r3, #19
 80072e4:	6113      	str	r3, [r2, #16]
 80072e6:	e04e      	b.n	8007386 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	0151      	lsls	r1, r2, #5
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	440a      	add	r2, r1
 80072fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007302:	0cdb      	lsrs	r3, r3, #19
 8007304:	04db      	lsls	r3, r3, #19
 8007306:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	0151      	lsls	r1, r2, #5
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	440a      	add	r2, r1
 800731e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007322:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007326:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800732a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	695a      	ldr	r2, [r3, #20]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	429a      	cmp	r2, r3
 8007336:	d903      	bls.n	8007340 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	0151      	lsls	r1, r2, #5
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	440a      	add	r2, r1
 8007356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800735a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800735e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736c:	691a      	ldr	r2, [r3, #16]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007376:	6939      	ldr	r1, [r7, #16]
 8007378:	0148      	lsls	r0, r1, #5
 800737a:	6979      	ldr	r1, [r7, #20]
 800737c:	4401      	add	r1, r0
 800737e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007382:	4313      	orrs	r3, r2
 8007384:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007386:	79fb      	ldrb	r3, [r7, #7]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d11e      	bne.n	80073ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d009      	beq.n	80073a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a0:	461a      	mov	r2, r3
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	0151      	lsls	r1, r2, #5
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	440a      	add	r2, r1
 80073be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073c6:	6013      	str	r3, [r2, #0]
 80073c8:	e092      	b.n	80074f0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	0151      	lsls	r1, r2, #5
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	440a      	add	r2, r1
 80073e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d07e      	beq.n	80074f0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	2101      	movs	r1, #1
 8007404:	fa01 f303 	lsl.w	r3, r1, r3
 8007408:	6979      	ldr	r1, [r7, #20]
 800740a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800740e:	4313      	orrs	r3, r2
 8007410:	634b      	str	r3, [r1, #52]	; 0x34
 8007412:	e06d      	b.n	80074f0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	0151      	lsls	r1, r2, #5
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	440a      	add	r2, r1
 800742a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800742e:	0cdb      	lsrs	r3, r3, #19
 8007430:	04db      	lsls	r3, r3, #19
 8007432:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	0151      	lsls	r1, r2, #5
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	440a      	add	r2, r1
 800744a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800744e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007452:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007456:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	0151      	lsls	r1, r2, #5
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	440a      	add	r2, r1
 800747e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007486:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007494:	691a      	ldr	r2, [r3, #16]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800749e:	6939      	ldr	r1, [r7, #16]
 80074a0:	0148      	lsls	r0, r1, #5
 80074a2:	6979      	ldr	r1, [r7, #20]
 80074a4:	4401      	add	r1, r0
 80074a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074aa:	4313      	orrs	r3, r2
 80074ac:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d10d      	bne.n	80074d0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d009      	beq.n	80074d0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	68d9      	ldr	r1, [r3, #12]
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074cc:	460a      	mov	r2, r1
 80074ce:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	0151      	lsls	r1, r2, #5
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	440a      	add	r2, r1
 80074e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	371c      	adds	r7, #28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80074fe:	b480      	push	{r7}
 8007500:	b089      	sub	sp, #36	; 0x24
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	4611      	mov	r1, r2
 800750a:	461a      	mov	r2, r3
 800750c:	460b      	mov	r3, r1
 800750e:	71fb      	strb	r3, [r7, #7]
 8007510:	4613      	mov	r3, r2
 8007512:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800751c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007520:	2b00      	cmp	r3, #0
 8007522:	d123      	bne.n	800756c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007524:	88bb      	ldrh	r3, [r7, #4]
 8007526:	3303      	adds	r3, #3
 8007528:	089b      	lsrs	r3, r3, #2
 800752a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800752c:	2300      	movs	r3, #0
 800752e:	61bb      	str	r3, [r7, #24]
 8007530:	e018      	b.n	8007564 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	031a      	lsls	r2, r3, #12
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	4413      	add	r3, r2
 800753a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753e:	461a      	mov	r2, r3
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	3301      	adds	r3, #1
 800754a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	3301      	adds	r3, #1
 8007550:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	3301      	adds	r3, #1
 8007556:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	3301      	adds	r3, #1
 800755c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	3301      	adds	r3, #1
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	429a      	cmp	r2, r3
 800756a:	d3e2      	bcc.n	8007532 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3724      	adds	r7, #36	; 0x24
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800757a:	b480      	push	{r7}
 800757c:	b08b      	sub	sp, #44	; 0x2c
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	4613      	mov	r3, r2
 8007586:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007590:	88fb      	ldrh	r3, [r7, #6]
 8007592:	089b      	lsrs	r3, r3, #2
 8007594:	b29b      	uxth	r3, r3
 8007596:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007598:	88fb      	ldrh	r3, [r7, #6]
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075a0:	2300      	movs	r3, #0
 80075a2:	623b      	str	r3, [r7, #32]
 80075a4:	e014      	b.n	80075d0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	601a      	str	r2, [r3, #0]
    pDest++;
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	3301      	adds	r3, #1
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	3301      	adds	r3, #1
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	3301      	adds	r3, #1
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	3301      	adds	r3, #1
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	3301      	adds	r3, #1
 80075ce:	623b      	str	r3, [r7, #32]
 80075d0:	6a3a      	ldr	r2, [r7, #32]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d3e6      	bcc.n	80075a6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075d8:	8bfb      	ldrh	r3, [r7, #30]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d01e      	beq.n	800761c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e8:	461a      	mov	r2, r3
 80075ea:	f107 0310 	add.w	r3, r7, #16
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	fa22 f303 	lsr.w	r3, r2, r3
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	701a      	strb	r2, [r3, #0]
      i++;
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	3301      	adds	r3, #1
 8007608:	623b      	str	r3, [r7, #32]
      pDest++;
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	3301      	adds	r3, #1
 800760e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007610:	8bfb      	ldrh	r3, [r7, #30]
 8007612:	3b01      	subs	r3, #1
 8007614:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007616:	8bfb      	ldrh	r3, [r7, #30]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1ea      	bne.n	80075f2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800761e:	4618      	mov	r0, r3
 8007620:	372c      	adds	r7, #44	; 0x2c
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800762a:	b480      	push	{r7}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	785b      	ldrb	r3, [r3, #1]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d12c      	bne.n	80076a0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	db12      	blt.n	800767e <USB_EPSetStall+0x54>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00f      	beq.n	800767e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	0151      	lsls	r1, r2, #5
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	440a      	add	r2, r1
 8007674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007678:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800767c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	0151      	lsls	r1, r2, #5
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	440a      	add	r2, r1
 8007694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	e02b      	b.n	80076f8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	db12      	blt.n	80076d8 <USB_EPSetStall+0xae>
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00f      	beq.n	80076d8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	0151      	lsls	r1, r2, #5
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	440a      	add	r2, r1
 80076ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076d6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007706:	b480      	push	{r7}
 8007708:	b085      	sub	sp, #20
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	785b      	ldrb	r3, [r3, #1]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d128      	bne.n	8007774 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	440a      	add	r2, r1
 8007738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800773c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007740:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	78db      	ldrb	r3, [r3, #3]
 8007746:	2b03      	cmp	r3, #3
 8007748:	d003      	beq.n	8007752 <USB_EPClearStall+0x4c>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	78db      	ldrb	r3, [r3, #3]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d138      	bne.n	80077c4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	0151      	lsls	r1, r2, #5
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	440a      	add	r2, r1
 8007768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800776c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	e027      	b.n	80077c4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	440a      	add	r2, r1
 800778a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800778e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007792:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	78db      	ldrb	r3, [r3, #3]
 8007798:	2b03      	cmp	r3, #3
 800779a:	d003      	beq.n	80077a4 <USB_EPClearStall+0x9e>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	78db      	ldrb	r3, [r3, #3]
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d10f      	bne.n	80077c4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	0151      	lsls	r1, r2, #5
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	440a      	add	r2, r1
 80077ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077c2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b085      	sub	sp, #20
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	460b      	mov	r3, r1
 80077dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80077f4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	011b      	lsls	r3, r3, #4
 8007802:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007806:	68f9      	ldr	r1, [r7, #12]
 8007808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800780c:	4313      	orrs	r3, r2
 800780e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007838:	f023 0303 	bic.w	r3, r3, #3
 800783c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800784c:	f023 0302 	bic.w	r3, r3, #2
 8007850:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800788e:	f043 0302 	orr.w	r3, r3, #2
 8007892:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b085      	sub	sp, #20
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4013      	ands	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80078ba:	68fb      	ldr	r3, [r7, #12]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	4013      	ands	r3, r2
 80078ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	0c1b      	lsrs	r3, r3, #16
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	4013      	ands	r3, r2
 800791e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	b29b      	uxth	r3, r3
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	460b      	mov	r3, r1
 800793a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	4013      	ands	r3, r2
 800795c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800795e:	68bb      	ldr	r3, [r7, #8]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	f003 030f 	and.w	r3, r3, #15
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	fa22 f303 	lsr.w	r3, r2, r3
 800799c:	01db      	lsls	r3, r3, #7
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	4013      	ands	r3, r2
 80079b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079ba:	68bb      	ldr	r3, [r7, #8]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	f003 0301 	and.w	r3, r3, #1
}
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007a02:	f023 0307 	bic.w	r3, r3, #7
 8007a06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
	...

08007a2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	460b      	mov	r3, r1
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	333c      	adds	r3, #60	; 0x3c
 8007a42:	3304      	adds	r3, #4
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	4a26      	ldr	r2, [pc, #152]	; (8007ae4 <USB_EP0_OutStart+0xb8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d90a      	bls.n	8007a66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a60:	d101      	bne.n	8007a66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	e037      	b.n	8007ad6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	2300      	movs	r3, #0
 8007a70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a94:	f043 0318 	orr.w	r3, r3, #24
 8007a98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007aac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007aae:	7afb      	ldrb	r3, [r7, #11]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d10f      	bne.n	8007ad4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aba:	461a      	mov	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ace:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007ad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	4f54300a 	.word	0x4f54300a

08007ae8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3301      	adds	r3, #1
 8007af8:	60fb      	str	r3, [r7, #12]
 8007afa:	4a13      	ldr	r2, [pc, #76]	; (8007b48 <USB_CoreReset+0x60>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d901      	bls.n	8007b04 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e01a      	b.n	8007b3a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	daf3      	bge.n	8007af4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	f043 0201 	orr.w	r2, r3, #1
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	60fb      	str	r3, [r7, #12]
 8007b22:	4a09      	ldr	r2, [pc, #36]	; (8007b48 <USB_CoreReset+0x60>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d901      	bls.n	8007b2c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e006      	b.n	8007b3a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d0f1      	beq.n	8007b1c <USB_CoreReset+0x34>

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	00030d40 	.word	0x00030d40

08007b4c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007b58:	2010      	movs	r0, #16
 8007b5a:	f001 fef7 	bl	800994c <USBD_static_malloc>
 8007b5e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d105      	bne.n	8007b72 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007b6e:	2302      	movs	r3, #2
 8007b70:	e01b      	b.n	8007baa <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	7c1b      	ldrb	r3, [r3, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d103      	bne.n	8007b8a <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2207      	movs	r2, #7
 8007b86:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007b88:	e002      	b.n	8007b90 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	220a      	movs	r2, #10
 8007b8e:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007b90:	2304      	movs	r3, #4
 8007b92:	2203      	movs	r2, #3
 8007b94:	2181      	movs	r1, #129	; 0x81
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f001 fdc7 	bl	800972a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007bbe:	2181      	movs	r1, #129	; 0x81
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 fdd8 	bl	8009776 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d009      	beq.n	8007bf0 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007be2:	4618      	mov	r0, r3
 8007be4:	f001 fec0 	bl	8009968 <USBD_static_free>
    pdev->pClassData = NULL;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c0c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e0e8      	b.n	8007df2 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d046      	beq.n	8007cba <USBD_HID_Setup+0xbe>
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	f040 80d8 	bne.w	8007de2 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	785b      	ldrb	r3, [r3, #1]
 8007c36:	3b02      	subs	r3, #2
 8007c38:	2b09      	cmp	r3, #9
 8007c3a:	d836      	bhi.n	8007caa <USBD_HID_Setup+0xae>
 8007c3c:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <USBD_HID_Setup+0x48>)
 8007c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c42:	bf00      	nop
 8007c44:	08007c9b 	.word	0x08007c9b
 8007c48:	08007c7b 	.word	0x08007c7b
 8007c4c:	08007cab 	.word	0x08007cab
 8007c50:	08007cab 	.word	0x08007cab
 8007c54:	08007cab 	.word	0x08007cab
 8007c58:	08007cab 	.word	0x08007cab
 8007c5c:	08007cab 	.word	0x08007cab
 8007c60:	08007cab 	.word	0x08007cab
 8007c64:	08007c89 	.word	0x08007c89
 8007c68:	08007c6d 	.word	0x08007c6d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	885b      	ldrh	r3, [r3, #2]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	461a      	mov	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	601a      	str	r2, [r3, #0]
          break;
 8007c78:	e01e      	b.n	8007cb8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 f9fa 	bl	800907a <USBD_CtlSendData>
          break;
 8007c86:	e017      	b.n	8007cb8 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	885b      	ldrh	r3, [r3, #2]
 8007c8c:	0a1b      	lsrs	r3, r3, #8
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	461a      	mov	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	605a      	str	r2, [r3, #4]
          break;
 8007c98:	e00e      	b.n	8007cb8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f001 f9e9 	bl	800907a <USBD_CtlSendData>
          break;
 8007ca8:	e006      	b.n	8007cb8 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f001 f973 	bl	8008f98 <USBD_CtlError>
          ret = USBD_FAIL;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	75fb      	strb	r3, [r7, #23]
          break;
 8007cb6:	bf00      	nop
      }
      break;
 8007cb8:	e09a      	b.n	8007df0 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	785b      	ldrb	r3, [r3, #1]
 8007cbe:	2b0b      	cmp	r3, #11
 8007cc0:	f200 8086 	bhi.w	8007dd0 <USBD_HID_Setup+0x1d4>
 8007cc4:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <USBD_HID_Setup+0xd0>)
 8007cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cca:	bf00      	nop
 8007ccc:	08007cfd 	.word	0x08007cfd
 8007cd0:	08007ddf 	.word	0x08007ddf
 8007cd4:	08007dd1 	.word	0x08007dd1
 8007cd8:	08007dd1 	.word	0x08007dd1
 8007cdc:	08007dd1 	.word	0x08007dd1
 8007ce0:	08007dd1 	.word	0x08007dd1
 8007ce4:	08007d27 	.word	0x08007d27
 8007ce8:	08007dd1 	.word	0x08007dd1
 8007cec:	08007dd1 	.word	0x08007dd1
 8007cf0:	08007dd1 	.word	0x08007dd1
 8007cf4:	08007d7f 	.word	0x08007d7f
 8007cf8:	08007da9 	.word	0x08007da9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d107      	bne.n	8007d18 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d08:	f107 030a 	add.w	r3, r7, #10
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 f9b2 	bl	800907a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d16:	e063      	b.n	8007de0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 f93c 	bl	8008f98 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d20:	2303      	movs	r3, #3
 8007d22:	75fb      	strb	r3, [r7, #23]
          break;
 8007d24:	e05c      	b.n	8007de0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	885b      	ldrh	r3, [r3, #2]
 8007d2a:	0a1b      	lsrs	r3, r3, #8
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	2b22      	cmp	r3, #34	; 0x22
 8007d30:	d108      	bne.n	8007d44 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	88db      	ldrh	r3, [r3, #6]
 8007d36:	2b4a      	cmp	r3, #74	; 0x4a
 8007d38:	bf28      	it	cs
 8007d3a:	234a      	movcs	r3, #74	; 0x4a
 8007d3c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007d3e:	4b2f      	ldr	r3, [pc, #188]	; (8007dfc <USBD_HID_Setup+0x200>)
 8007d40:	613b      	str	r3, [r7, #16]
 8007d42:	e015      	b.n	8007d70 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	885b      	ldrh	r3, [r3, #2]
 8007d48:	0a1b      	lsrs	r3, r3, #8
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2b21      	cmp	r3, #33	; 0x21
 8007d4e:	d108      	bne.n	8007d62 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8007d50:	4b2b      	ldr	r3, [pc, #172]	; (8007e00 <USBD_HID_Setup+0x204>)
 8007d52:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	88db      	ldrh	r3, [r3, #6]
 8007d58:	2b09      	cmp	r3, #9
 8007d5a:	bf28      	it	cs
 8007d5c:	2309      	movcs	r3, #9
 8007d5e:	82bb      	strh	r3, [r7, #20]
 8007d60:	e006      	b.n	8007d70 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 f917 	bl	8008f98 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	75fb      	strb	r3, [r7, #23]
            break;
 8007d6e:	e037      	b.n	8007de0 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d70:	8abb      	ldrh	r3, [r7, #20]
 8007d72:	461a      	mov	r2, r3
 8007d74:	6939      	ldr	r1, [r7, #16]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 f97f 	bl	800907a <USBD_CtlSendData>
          break;
 8007d7c:	e030      	b.n	8007de0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d107      	bne.n	8007d9a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	2201      	movs	r2, #1
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 f971 	bl	800907a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d98:	e022      	b.n	8007de0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 f8fb 	bl	8008f98 <USBD_CtlError>
            ret = USBD_FAIL;
 8007da2:	2303      	movs	r3, #3
 8007da4:	75fb      	strb	r3, [r7, #23]
          break;
 8007da6:	e01b      	b.n	8007de0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d106      	bne.n	8007dc2 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	885b      	ldrh	r3, [r3, #2]
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	461a      	mov	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dc0:	e00e      	b.n	8007de0 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 f8e7 	bl	8008f98 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	75fb      	strb	r3, [r7, #23]
          break;
 8007dce:	e007      	b.n	8007de0 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 f8e0 	bl	8008f98 <USBD_CtlError>
          ret = USBD_FAIL;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	75fb      	strb	r3, [r7, #23]
          break;
 8007ddc:	e000      	b.n	8007de0 <USBD_HID_Setup+0x1e4>
          break;
 8007dde:	bf00      	nop
      }
      break;
 8007de0:	e006      	b.n	8007df0 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 f8d7 	bl	8008f98 <USBD_CtlError>
      ret = USBD_FAIL;
 8007dea:	2303      	movs	r3, #3
 8007dec:	75fb      	strb	r3, [r7, #23]
      break;
 8007dee:	bf00      	nop
  }

  return (uint8_t)ret;
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	200000dc 	.word	0x200000dc
 8007e00:	200000c4 	.word	0x200000c4

08007e04 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2222      	movs	r2, #34	; 0x22
 8007e10:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007e12:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20000058 	.word	0x20000058

08007e24 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2222      	movs	r2, #34	; 0x22
 8007e30:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8007e32:	4b03      	ldr	r3, [pc, #12]	; (8007e40 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	2000007c 	.word	0x2000007c

08007e44 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2222      	movs	r2, #34	; 0x22
 8007e50:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8007e52:	4b03      	ldr	r3, [pc, #12]	; (8007e60 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	200000a0 	.word	0x200000a0

08007e64 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e76:	2200      	movs	r2, #0
 8007e78:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	220a      	movs	r2, #10
 8007e94:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007e96:	4b03      	ldr	r3, [pc, #12]	; (8007ea4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	200000d0 	.word	0x200000d0

08007ea8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e01f      	b.n	8007f00 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	79fa      	ldrb	r2, [r7, #7]
 8007ef2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f001 fbb1 	bl	800965c <USBD_LL_Init>
 8007efa:	4603      	mov	r3, r0
 8007efc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e016      	b.n	8007f4e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00b      	beq.n	8007f4c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	f107 020e 	add.w	r2, r7, #14
 8007f40:	4610      	mov	r0, r2
 8007f42:	4798      	blx	r3
 8007f44:	4602      	mov	r2, r0
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fbc8 	bl	80096f4 <USBD_LL_Start>
 8007f64:	4603      	mov	r3, r0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f90:	2303      	movs	r3, #3
 8007f92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d009      	beq.n	8007fb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	78fa      	ldrb	r2, [r7, #3]
 8007fa8:	4611      	mov	r1, r2
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	4798      	blx	r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d007      	beq.n	8007fe2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	78fa      	ldrb	r2, [r7, #3]
 8007fdc:	4611      	mov	r1, r2
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
  }

  return USBD_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 ff90 	bl	8008f24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008012:	461a      	mov	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008020:	f003 031f 	and.w	r3, r3, #31
 8008024:	2b02      	cmp	r3, #2
 8008026:	d01a      	beq.n	800805e <USBD_LL_SetupStage+0x72>
 8008028:	2b02      	cmp	r3, #2
 800802a:	d822      	bhi.n	8008072 <USBD_LL_SetupStage+0x86>
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <USBD_LL_SetupStage+0x4a>
 8008030:	2b01      	cmp	r3, #1
 8008032:	d00a      	beq.n	800804a <USBD_LL_SetupStage+0x5e>
 8008034:	e01d      	b.n	8008072 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa62 	bl	8008508 <USBD_StdDevReq>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]
      break;
 8008048:	e020      	b.n	800808c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fac6 	bl	80085e4 <USBD_StdItfReq>
 8008058:	4603      	mov	r3, r0
 800805a:	73fb      	strb	r3, [r7, #15]
      break;
 800805c:	e016      	b.n	800808c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fb05 	bl	8008676 <USBD_StdEPReq>
 800806c:	4603      	mov	r3, r0
 800806e:	73fb      	strb	r3, [r7, #15]
      break;
 8008070:	e00c      	b.n	800808c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008078:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800807c:	b2db      	uxtb	r3, r3
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 fb97 	bl	80097b4 <USBD_LL_StallEP>
 8008086:	4603      	mov	r3, r0
 8008088:	73fb      	strb	r3, [r7, #15]
      break;
 800808a:	bf00      	nop
  }

  return ret;
 800808c:	7bfb      	ldrb	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b086      	sub	sp, #24
 800809a:	af00      	add	r7, sp, #0
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	460b      	mov	r3, r1
 80080a0:	607a      	str	r2, [r7, #4]
 80080a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080a4:	7afb      	ldrb	r3, [r7, #11]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d138      	bne.n	800811c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d14a      	bne.n	8008152 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d913      	bls.n	80080f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	1ad2      	subs	r2, r2, r3
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	4293      	cmp	r3, r2
 80080e0:	bf28      	it	cs
 80080e2:	4613      	movcs	r3, r2
 80080e4:	461a      	mov	r2, r3
 80080e6:	6879      	ldr	r1, [r7, #4]
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 fff2 	bl	80090d2 <USBD_CtlContinueRx>
 80080ee:	e030      	b.n	8008152 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d10b      	bne.n	8008114 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d005      	beq.n	8008114 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 ffed 	bl	80090f4 <USBD_CtlSendStatus>
 800811a:	e01a      	b.n	8008152 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b03      	cmp	r3, #3
 8008126:	d114      	bne.n	8008152 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00e      	beq.n	8008152 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	7afa      	ldrb	r2, [r7, #11]
 800813e:	4611      	mov	r1, r2
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	4798      	blx	r3
 8008144:	4603      	mov	r3, r0
 8008146:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008148:	7dfb      	ldrb	r3, [r7, #23]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800814e:	7dfb      	ldrb	r3, [r7, #23]
 8008150:	e000      	b.n	8008154 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3718      	adds	r7, #24
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	460b      	mov	r3, r1
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800816a:	7afb      	ldrb	r3, [r7, #11]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d16b      	bne.n	8008248 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3314      	adds	r3, #20
 8008174:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800817c:	2b02      	cmp	r3, #2
 800817e:	d156      	bne.n	800822e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	429a      	cmp	r2, r3
 800818a:	d914      	bls.n	80081b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	1ad2      	subs	r2, r2, r3
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	461a      	mov	r2, r3
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 ff84 	bl	80090b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081a8:	2300      	movs	r3, #0
 80081aa:	2200      	movs	r2, #0
 80081ac:	2100      	movs	r1, #0
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f001 fbaa 	bl	8009908 <USBD_LL_PrepareReceive>
 80081b4:	e03b      	b.n	800822e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d11c      	bne.n	80081fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d316      	bcc.n	80081fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081d8:	429a      	cmp	r2, r3
 80081da:	d20f      	bcs.n	80081fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081dc:	2200      	movs	r2, #0
 80081de:	2100      	movs	r1, #0
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 ff65 	bl	80090b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ee:	2300      	movs	r3, #0
 80081f0:	2200      	movs	r2, #0
 80081f2:	2100      	movs	r1, #0
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f001 fb87 	bl	8009908 <USBD_LL_PrepareReceive>
 80081fa:	e018      	b.n	800822e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b03      	cmp	r3, #3
 8008206:	d10b      	bne.n	8008220 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008220:	2180      	movs	r1, #128	; 0x80
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f001 fac6 	bl	80097b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 ff76 	bl	800911a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008234:	2b01      	cmp	r3, #1
 8008236:	d122      	bne.n	800827e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f7ff fe98 	bl	8007f6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008246:	e01a      	b.n	800827e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b03      	cmp	r3, #3
 8008252:	d114      	bne.n	800827e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00e      	beq.n	800827e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	7afa      	ldrb	r2, [r7, #11]
 800826a:	4611      	mov	r1, r2
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	4798      	blx	r3
 8008270:	4603      	mov	r3, r0
 8008272:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	e000      	b.n	8008280 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e02f      	b.n	800831c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00f      	beq.n	80082e6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d009      	beq.n	80082e6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6852      	ldr	r2, [r2, #4]
 80082de:	b2d2      	uxtb	r2, r2
 80082e0:	4611      	mov	r1, r2
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082e6:	2340      	movs	r3, #64	; 0x40
 80082e8:	2200      	movs	r2, #0
 80082ea:	2100      	movs	r1, #0
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 fa1c 	bl	800972a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2240      	movs	r2, #64	; 0x40
 80082fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008302:	2340      	movs	r3, #64	; 0x40
 8008304:	2200      	movs	r2, #0
 8008306:	2180      	movs	r1, #128	; 0x80
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 fa0e 	bl	800972a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2240      	movs	r2, #64	; 0x40
 8008318:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	78fa      	ldrb	r2, [r7, #3]
 8008334:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008352:	b2da      	uxtb	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2204      	movs	r2, #4
 800835e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b04      	cmp	r3, #4
 8008382:	d106      	bne.n	8008392 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800838a:	b2da      	uxtb	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e012      	b.n	80083dc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d10b      	bne.n	80083da <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d005      	beq.n	80083da <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e014      	b.n	8008428 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b03      	cmp	r3, #3
 8008408:	d10d      	bne.n	8008426 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d007      	beq.n	8008426 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	78fa      	ldrb	r2, [r7, #3]
 8008420:	4611      	mov	r1, r2
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008446:	2303      	movs	r3, #3
 8008448:	e014      	b.n	8008474 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b03      	cmp	r3, #3
 8008454:	d10d      	bne.n	8008472 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	2b00      	cmp	r3, #0
 8008460:	d007      	beq.n	8008472 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	78fa      	ldrb	r2, [r7, #3]
 800846c:	4611      	mov	r1, r2
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b082      	sub	sp, #8
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d009      	beq.n	80084c0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	6852      	ldr	r2, [r2, #4]
 80084b8:	b2d2      	uxtb	r2, r2
 80084ba:	4611      	mov	r1, r2
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	4798      	blx	r3
  }

  return USBD_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b087      	sub	sp, #28
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	3301      	adds	r3, #1
 80084e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80084e8:	8a3b      	ldrh	r3, [r7, #16]
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	b21a      	sxth	r2, r3
 80084ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	b21b      	sxth	r3, r3
 80084f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80084f8:	89fb      	ldrh	r3, [r7, #14]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
	...

08008508 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800851e:	2b40      	cmp	r3, #64	; 0x40
 8008520:	d005      	beq.n	800852e <USBD_StdDevReq+0x26>
 8008522:	2b40      	cmp	r3, #64	; 0x40
 8008524:	d853      	bhi.n	80085ce <USBD_StdDevReq+0xc6>
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00b      	beq.n	8008542 <USBD_StdDevReq+0x3a>
 800852a:	2b20      	cmp	r3, #32
 800852c:	d14f      	bne.n	80085ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	4798      	blx	r3
 800853c:	4603      	mov	r3, r0
 800853e:	73fb      	strb	r3, [r7, #15]
      break;
 8008540:	e04a      	b.n	80085d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	785b      	ldrb	r3, [r3, #1]
 8008546:	2b09      	cmp	r3, #9
 8008548:	d83b      	bhi.n	80085c2 <USBD_StdDevReq+0xba>
 800854a:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <USBD_StdDevReq+0x48>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	080085a5 	.word	0x080085a5
 8008554:	080085b9 	.word	0x080085b9
 8008558:	080085c3 	.word	0x080085c3
 800855c:	080085af 	.word	0x080085af
 8008560:	080085c3 	.word	0x080085c3
 8008564:	08008583 	.word	0x08008583
 8008568:	08008579 	.word	0x08008579
 800856c:	080085c3 	.word	0x080085c3
 8008570:	0800859b 	.word	0x0800859b
 8008574:	0800858d 	.word	0x0800858d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f9de 	bl	800893c <USBD_GetDescriptor>
          break;
 8008580:	e024      	b.n	80085cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fb43 	bl	8008c10 <USBD_SetAddress>
          break;
 800858a:	e01f      	b.n	80085cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fb82 	bl	8008c98 <USBD_SetConfig>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]
          break;
 8008598:	e018      	b.n	80085cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fc21 	bl	8008de4 <USBD_GetConfig>
          break;
 80085a2:	e013      	b.n	80085cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fc52 	bl	8008e50 <USBD_GetStatus>
          break;
 80085ac:	e00e      	b.n	80085cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fc81 	bl	8008eb8 <USBD_SetFeature>
          break;
 80085b6:	e009      	b.n	80085cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fc90 	bl	8008ee0 <USBD_ClrFeature>
          break;
 80085c0:	e004      	b.n	80085cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fce7 	bl	8008f98 <USBD_CtlError>
          break;
 80085ca:	bf00      	nop
      }
      break;
 80085cc:	e004      	b.n	80085d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fce1 	bl	8008f98 <USBD_CtlError>
      break;
 80085d6:	bf00      	nop
  }

  return ret;
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop

080085e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085fa:	2b40      	cmp	r3, #64	; 0x40
 80085fc:	d005      	beq.n	800860a <USBD_StdItfReq+0x26>
 80085fe:	2b40      	cmp	r3, #64	; 0x40
 8008600:	d82f      	bhi.n	8008662 <USBD_StdItfReq+0x7e>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <USBD_StdItfReq+0x26>
 8008606:	2b20      	cmp	r3, #32
 8008608:	d12b      	bne.n	8008662 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008610:	b2db      	uxtb	r3, r3
 8008612:	3b01      	subs	r3, #1
 8008614:	2b02      	cmp	r3, #2
 8008616:	d81d      	bhi.n	8008654 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	889b      	ldrh	r3, [r3, #4]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b01      	cmp	r3, #1
 8008620:	d813      	bhi.n	800864a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	88db      	ldrh	r3, [r3, #6]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d110      	bne.n	800865e <USBD_StdItfReq+0x7a>
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10d      	bne.n	800865e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fd56 	bl	80090f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008648:	e009      	b.n	800865e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fca3 	bl	8008f98 <USBD_CtlError>
          break;
 8008652:	e004      	b.n	800865e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fc9e 	bl	8008f98 <USBD_CtlError>
          break;
 800865c:	e000      	b.n	8008660 <USBD_StdItfReq+0x7c>
          break;
 800865e:	bf00      	nop
      }
      break;
 8008660:	e004      	b.n	800866c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fc97 	bl	8008f98 <USBD_CtlError>
      break;
 800866a:	bf00      	nop
  }

  return ret;
 800866c:	7bfb      	ldrb	r3, [r7, #15]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	889b      	ldrh	r3, [r3, #4]
 8008688:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008692:	2b40      	cmp	r3, #64	; 0x40
 8008694:	d007      	beq.n	80086a6 <USBD_StdEPReq+0x30>
 8008696:	2b40      	cmp	r3, #64	; 0x40
 8008698:	f200 8145 	bhi.w	8008926 <USBD_StdEPReq+0x2b0>
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00c      	beq.n	80086ba <USBD_StdEPReq+0x44>
 80086a0:	2b20      	cmp	r3, #32
 80086a2:	f040 8140 	bne.w	8008926 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	4798      	blx	r3
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]
      break;
 80086b8:	e13a      	b.n	8008930 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	785b      	ldrb	r3, [r3, #1]
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d007      	beq.n	80086d2 <USBD_StdEPReq+0x5c>
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	f300 8129 	bgt.w	800891a <USBD_StdEPReq+0x2a4>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d07f      	beq.n	80087cc <USBD_StdEPReq+0x156>
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d03c      	beq.n	800874a <USBD_StdEPReq+0xd4>
 80086d0:	e123      	b.n	800891a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d002      	beq.n	80086e4 <USBD_StdEPReq+0x6e>
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d016      	beq.n	8008710 <USBD_StdEPReq+0x9a>
 80086e2:	e02c      	b.n	800873e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00d      	beq.n	8008706 <USBD_StdEPReq+0x90>
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b80      	cmp	r3, #128	; 0x80
 80086ee:	d00a      	beq.n	8008706 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 f85d 	bl	80097b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086fa:	2180      	movs	r1, #128	; 0x80
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f001 f859 	bl	80097b4 <USBD_LL_StallEP>
 8008702:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008704:	e020      	b.n	8008748 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fc45 	bl	8008f98 <USBD_CtlError>
              break;
 800870e:	e01b      	b.n	8008748 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	885b      	ldrh	r3, [r3, #2]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10e      	bne.n	8008736 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008718:	7bbb      	ldrb	r3, [r7, #14]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <USBD_StdEPReq+0xc0>
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	2b80      	cmp	r3, #128	; 0x80
 8008722:	d008      	beq.n	8008736 <USBD_StdEPReq+0xc0>
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	88db      	ldrh	r3, [r3, #6]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d104      	bne.n	8008736 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f001 f83f 	bl	80097b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fcdc 	bl	80090f4 <USBD_CtlSendStatus>

              break;
 800873c:	e004      	b.n	8008748 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fc29 	bl	8008f98 <USBD_CtlError>
              break;
 8008746:	bf00      	nop
          }
          break;
 8008748:	e0ec      	b.n	8008924 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b02      	cmp	r3, #2
 8008754:	d002      	beq.n	800875c <USBD_StdEPReq+0xe6>
 8008756:	2b03      	cmp	r3, #3
 8008758:	d016      	beq.n	8008788 <USBD_StdEPReq+0x112>
 800875a:	e030      	b.n	80087be <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800875c:	7bbb      	ldrb	r3, [r7, #14]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00d      	beq.n	800877e <USBD_StdEPReq+0x108>
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b80      	cmp	r3, #128	; 0x80
 8008766:	d00a      	beq.n	800877e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 f821 	bl	80097b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008772:	2180      	movs	r1, #128	; 0x80
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f001 f81d 	bl	80097b4 <USBD_LL_StallEP>
 800877a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800877c:	e025      	b.n	80087ca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fc09 	bl	8008f98 <USBD_CtlError>
              break;
 8008786:	e020      	b.n	80087ca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	885b      	ldrh	r3, [r3, #2]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d11b      	bne.n	80087c8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008796:	2b00      	cmp	r3, #0
 8008798:	d004      	beq.n	80087a4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f001 f827 	bl	80097f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fca5 	bl	80090f4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	4798      	blx	r3
 80087b8:	4603      	mov	r3, r0
 80087ba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80087bc:	e004      	b.n	80087c8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fbe9 	bl	8008f98 <USBD_CtlError>
              break;
 80087c6:	e000      	b.n	80087ca <USBD_StdEPReq+0x154>
              break;
 80087c8:	bf00      	nop
          }
          break;
 80087ca:	e0ab      	b.n	8008924 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d002      	beq.n	80087de <USBD_StdEPReq+0x168>
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d032      	beq.n	8008842 <USBD_StdEPReq+0x1cc>
 80087dc:	e097      	b.n	800890e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d007      	beq.n	80087f4 <USBD_StdEPReq+0x17e>
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	2b80      	cmp	r3, #128	; 0x80
 80087e8:	d004      	beq.n	80087f4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fbd3 	bl	8008f98 <USBD_CtlError>
                break;
 80087f2:	e091      	b.n	8008918 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	da0b      	bge.n	8008814 <USBD_StdEPReq+0x19e>
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	3310      	adds	r3, #16
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	4413      	add	r3, r2
 8008810:	3304      	adds	r3, #4
 8008812:	e00b      	b.n	800882c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	4413      	add	r3, r2
 800882a:	3304      	adds	r3, #4
 800882c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2200      	movs	r2, #0
 8008832:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2202      	movs	r2, #2
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fc1d 	bl	800907a <USBD_CtlSendData>
              break;
 8008840:	e06a      	b.n	8008918 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008842:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008846:	2b00      	cmp	r3, #0
 8008848:	da11      	bge.n	800886e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	f003 020f 	and.w	r2, r3, #15
 8008850:	6879      	ldr	r1, [r7, #4]
 8008852:	4613      	mov	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	440b      	add	r3, r1
 800885c:	3324      	adds	r3, #36	; 0x24
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d117      	bne.n	8008894 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fb96 	bl	8008f98 <USBD_CtlError>
                  break;
 800886c:	e054      	b.n	8008918 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800886e:	7bbb      	ldrb	r3, [r7, #14]
 8008870:	f003 020f 	and.w	r2, r3, #15
 8008874:	6879      	ldr	r1, [r7, #4]
 8008876:	4613      	mov	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	440b      	add	r3, r1
 8008880:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d104      	bne.n	8008894 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fb83 	bl	8008f98 <USBD_CtlError>
                  break;
 8008892:	e041      	b.n	8008918 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008898:	2b00      	cmp	r3, #0
 800889a:	da0b      	bge.n	80088b4 <USBD_StdEPReq+0x23e>
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088a2:	4613      	mov	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	3310      	adds	r3, #16
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	4413      	add	r3, r2
 80088b0:	3304      	adds	r3, #4
 80088b2:	e00b      	b.n	80088cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	4413      	add	r3, r2
 80088ca:	3304      	adds	r3, #4
 80088cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <USBD_StdEPReq+0x264>
 80088d4:	7bbb      	ldrb	r3, [r7, #14]
 80088d6:	2b80      	cmp	r3, #128	; 0x80
 80088d8:	d103      	bne.n	80088e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2200      	movs	r2, #0
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	e00e      	b.n	8008900 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 ffa2 	bl	8009830 <USBD_LL_IsStallEP>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	e002      	b.n	8008900 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2202      	movs	r2, #2
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fbb7 	bl	800907a <USBD_CtlSendData>
              break;
 800890c:	e004      	b.n	8008918 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fb41 	bl	8008f98 <USBD_CtlError>
              break;
 8008916:	bf00      	nop
          }
          break;
 8008918:	e004      	b.n	8008924 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fb3b 	bl	8008f98 <USBD_CtlError>
          break;
 8008922:	bf00      	nop
      }
      break;
 8008924:	e004      	b.n	8008930 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fb35 	bl	8008f98 <USBD_CtlError>
      break;
 800892e:	bf00      	nop
  }

  return ret;
 8008930:	7bfb      	ldrb	r3, [r7, #15]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
	...

0800893c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800894a:	2300      	movs	r3, #0
 800894c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800894e:	2300      	movs	r3, #0
 8008950:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	885b      	ldrh	r3, [r3, #2]
 8008956:	0a1b      	lsrs	r3, r3, #8
 8008958:	b29b      	uxth	r3, r3
 800895a:	3b01      	subs	r3, #1
 800895c:	2b06      	cmp	r3, #6
 800895e:	f200 8128 	bhi.w	8008bb2 <USBD_GetDescriptor+0x276>
 8008962:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <USBD_GetDescriptor+0x2c>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	08008985 	.word	0x08008985
 800896c:	0800899d 	.word	0x0800899d
 8008970:	080089dd 	.word	0x080089dd
 8008974:	08008bb3 	.word	0x08008bb3
 8008978:	08008bb3 	.word	0x08008bb3
 800897c:	08008b53 	.word	0x08008b53
 8008980:	08008b7f 	.word	0x08008b7f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	7c12      	ldrb	r2, [r2, #16]
 8008990:	f107 0108 	add.w	r1, r7, #8
 8008994:	4610      	mov	r0, r2
 8008996:	4798      	blx	r3
 8008998:	60f8      	str	r0, [r7, #12]
      break;
 800899a:	e112      	b.n	8008bc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	7c1b      	ldrb	r3, [r3, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10d      	bne.n	80089c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ac:	f107 0208 	add.w	r2, r7, #8
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
 80089b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3301      	adds	r3, #1
 80089ba:	2202      	movs	r2, #2
 80089bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80089be:	e100      	b.n	8008bc2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c8:	f107 0208 	add.w	r2, r7, #8
 80089cc:	4610      	mov	r0, r2
 80089ce:	4798      	blx	r3
 80089d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3301      	adds	r3, #1
 80089d6:	2202      	movs	r2, #2
 80089d8:	701a      	strb	r2, [r3, #0]
      break;
 80089da:	e0f2      	b.n	8008bc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	885b      	ldrh	r3, [r3, #2]
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	f200 80ac 	bhi.w	8008b40 <USBD_GetDescriptor+0x204>
 80089e8:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <USBD_GetDescriptor+0xb4>)
 80089ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ee:	bf00      	nop
 80089f0:	08008a09 	.word	0x08008a09
 80089f4:	08008a3d 	.word	0x08008a3d
 80089f8:	08008a71 	.word	0x08008a71
 80089fc:	08008aa5 	.word	0x08008aa5
 8008a00:	08008ad9 	.word	0x08008ad9
 8008a04:	08008b0d 	.word	0x08008b0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00b      	beq.n	8008a2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	7c12      	ldrb	r2, [r2, #16]
 8008a20:	f107 0108 	add.w	r1, r7, #8
 8008a24:	4610      	mov	r0, r2
 8008a26:	4798      	blx	r3
 8008a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a2a:	e091      	b.n	8008b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fab2 	bl	8008f98 <USBD_CtlError>
            err++;
 8008a34:	7afb      	ldrb	r3, [r7, #11]
 8008a36:	3301      	adds	r3, #1
 8008a38:	72fb      	strb	r3, [r7, #11]
          break;
 8008a3a:	e089      	b.n	8008b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00b      	beq.n	8008a60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	7c12      	ldrb	r2, [r2, #16]
 8008a54:	f107 0108 	add.w	r1, r7, #8
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4798      	blx	r3
 8008a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a5e:	e077      	b.n	8008b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa98 	bl	8008f98 <USBD_CtlError>
            err++;
 8008a68:	7afb      	ldrb	r3, [r7, #11]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a6e:	e06f      	b.n	8008b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00b      	beq.n	8008a94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	7c12      	ldrb	r2, [r2, #16]
 8008a88:	f107 0108 	add.w	r1, r7, #8
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	4798      	blx	r3
 8008a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a92:	e05d      	b.n	8008b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fa7e 	bl	8008f98 <USBD_CtlError>
            err++;
 8008a9c:	7afb      	ldrb	r3, [r7, #11]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8008aa2:	e055      	b.n	8008b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	7c12      	ldrb	r2, [r2, #16]
 8008abc:	f107 0108 	add.w	r1, r7, #8
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	4798      	blx	r3
 8008ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ac6:	e043      	b.n	8008b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fa64 	bl	8008f98 <USBD_CtlError>
            err++;
 8008ad0:	7afb      	ldrb	r3, [r7, #11]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ad6:	e03b      	b.n	8008b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	7c12      	ldrb	r2, [r2, #16]
 8008af0:	f107 0108 	add.w	r1, r7, #8
 8008af4:	4610      	mov	r0, r2
 8008af6:	4798      	blx	r3
 8008af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008afa:	e029      	b.n	8008b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fa4a 	bl	8008f98 <USBD_CtlError>
            err++;
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	3301      	adds	r3, #1
 8008b08:	72fb      	strb	r3, [r7, #11]
          break;
 8008b0a:	e021      	b.n	8008b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00b      	beq.n	8008b30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	7c12      	ldrb	r2, [r2, #16]
 8008b24:	f107 0108 	add.w	r1, r7, #8
 8008b28:	4610      	mov	r0, r2
 8008b2a:	4798      	blx	r3
 8008b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b2e:	e00f      	b.n	8008b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fa30 	bl	8008f98 <USBD_CtlError>
            err++;
 8008b38:	7afb      	ldrb	r3, [r7, #11]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b3e:	e007      	b.n	8008b50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa28 	bl	8008f98 <USBD_CtlError>
          err++;
 8008b48:	7afb      	ldrb	r3, [r7, #11]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008b4e:	bf00      	nop
      }
      break;
 8008b50:	e037      	b.n	8008bc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	7c1b      	ldrb	r3, [r3, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d109      	bne.n	8008b6e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b62:	f107 0208 	add.w	r2, r7, #8
 8008b66:	4610      	mov	r0, r2
 8008b68:	4798      	blx	r3
 8008b6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b6c:	e029      	b.n	8008bc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fa11 	bl	8008f98 <USBD_CtlError>
        err++;
 8008b76:	7afb      	ldrb	r3, [r7, #11]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b7c:	e021      	b.n	8008bc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	7c1b      	ldrb	r3, [r3, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10d      	bne.n	8008ba2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8e:	f107 0208 	add.w	r2, r7, #8
 8008b92:	4610      	mov	r0, r2
 8008b94:	4798      	blx	r3
 8008b96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	2207      	movs	r2, #7
 8008b9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ba0:	e00f      	b.n	8008bc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f9f7 	bl	8008f98 <USBD_CtlError>
        err++;
 8008baa:	7afb      	ldrb	r3, [r7, #11]
 8008bac:	3301      	adds	r3, #1
 8008bae:	72fb      	strb	r3, [r7, #11]
      break;
 8008bb0:	e007      	b.n	8008bc2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f9ef 	bl	8008f98 <USBD_CtlError>
      err++;
 8008bba:	7afb      	ldrb	r3, [r7, #11]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	72fb      	strb	r3, [r7, #11]
      break;
 8008bc0:	bf00      	nop
  }

  if (err != 0U)
 8008bc2:	7afb      	ldrb	r3, [r7, #11]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d11e      	bne.n	8008c06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	88db      	ldrh	r3, [r3, #6]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d016      	beq.n	8008bfe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008bd0:	893b      	ldrh	r3, [r7, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00e      	beq.n	8008bf4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	88da      	ldrh	r2, [r3, #6]
 8008bda:	893b      	ldrh	r3, [r7, #8]
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	bf28      	it	cs
 8008be0:	4613      	movcs	r3, r2
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008be6:	893b      	ldrh	r3, [r7, #8]
 8008be8:	461a      	mov	r2, r3
 8008bea:	68f9      	ldr	r1, [r7, #12]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fa44 	bl	800907a <USBD_CtlSendData>
 8008bf2:	e009      	b.n	8008c08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f9ce 	bl	8008f98 <USBD_CtlError>
 8008bfc:	e004      	b.n	8008c08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa78 	bl	80090f4 <USBD_CtlSendStatus>
 8008c04:	e000      	b.n	8008c08 <USBD_GetDescriptor+0x2cc>
    return;
 8008c06:	bf00      	nop
  }
}
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop

08008c10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	889b      	ldrh	r3, [r3, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d131      	bne.n	8008c86 <USBD_SetAddress+0x76>
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	88db      	ldrh	r3, [r3, #6]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d12d      	bne.n	8008c86 <USBD_SetAddress+0x76>
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	885b      	ldrh	r3, [r3, #2]
 8008c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c30:	d829      	bhi.n	8008c86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	885b      	ldrh	r3, [r3, #2]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d104      	bne.n	8008c54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f9a3 	bl	8008f98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c52:	e01d      	b.n	8008c90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	7bfa      	ldrb	r2, [r7, #15]
 8008c58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fe11 	bl	8009888 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fa44 	bl	80090f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d004      	beq.n	8008c7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2202      	movs	r2, #2
 8008c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c7a:	e009      	b.n	8008c90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c84:	e004      	b.n	8008c90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f985 	bl	8008f98 <USBD_CtlError>
  }
}
 8008c8e:	bf00      	nop
 8008c90:	bf00      	nop
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	885b      	ldrh	r3, [r3, #2]
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	4b4c      	ldr	r3, [pc, #304]	; (8008de0 <USBD_SetConfig+0x148>)
 8008cae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008cb0:	4b4b      	ldr	r3, [pc, #300]	; (8008de0 <USBD_SetConfig+0x148>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d905      	bls.n	8008cc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f96c 	bl	8008f98 <USBD_CtlError>
    return USBD_FAIL;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e088      	b.n	8008dd6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d002      	beq.n	8008cd6 <USBD_SetConfig+0x3e>
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d025      	beq.n	8008d20 <USBD_SetConfig+0x88>
 8008cd4:	e071      	b.n	8008dba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008cd6:	4b42      	ldr	r3, [pc, #264]	; (8008de0 <USBD_SetConfig+0x148>)
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d01c      	beq.n	8008d18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008cde:	4b40      	ldr	r3, [pc, #256]	; (8008de0 <USBD_SetConfig+0x148>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ce8:	4b3d      	ldr	r3, [pc, #244]	; (8008de0 <USBD_SetConfig+0x148>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff f948 	bl	8007f84 <USBD_SetClassConfig>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d004      	beq.n	8008d08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f949 	bl	8008f98 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d06:	e065      	b.n	8008dd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f9f3 	bl	80090f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2203      	movs	r2, #3
 8008d12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d16:	e05d      	b.n	8008dd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f9eb 	bl	80090f4 <USBD_CtlSendStatus>
      break;
 8008d1e:	e059      	b.n	8008dd4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d20:	4b2f      	ldr	r3, [pc, #188]	; (8008de0 <USBD_SetConfig+0x148>)
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d112      	bne.n	8008d4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008d30:	4b2b      	ldr	r3, [pc, #172]	; (8008de0 <USBD_SetConfig+0x148>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	461a      	mov	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d3a:	4b29      	ldr	r3, [pc, #164]	; (8008de0 <USBD_SetConfig+0x148>)
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff f93b 	bl	8007fbc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f9d4 	bl	80090f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d4c:	e042      	b.n	8008dd4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008d4e:	4b24      	ldr	r3, [pc, #144]	; (8008de0 <USBD_SetConfig+0x148>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d02a      	beq.n	8008db2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff f929 	bl	8007fbc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d6a:	4b1d      	ldr	r3, [pc, #116]	; (8008de0 <USBD_SetConfig+0x148>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d74:	4b1a      	ldr	r3, [pc, #104]	; (8008de0 <USBD_SetConfig+0x148>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff f902 	bl	8007f84 <USBD_SetClassConfig>
 8008d80:	4603      	mov	r3, r0
 8008d82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00f      	beq.n	8008daa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f903 	bl	8008f98 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7ff f90e 	bl	8007fbc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008da8:	e014      	b.n	8008dd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f9a2 	bl	80090f4 <USBD_CtlSendStatus>
      break;
 8008db0:	e010      	b.n	8008dd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 f99e 	bl	80090f4 <USBD_CtlSendStatus>
      break;
 8008db8:	e00c      	b.n	8008dd4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f8eb 	bl	8008f98 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008dc2:	4b07      	ldr	r3, [pc, #28]	; (8008de0 <USBD_SetConfig+0x148>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff f8f7 	bl	8007fbc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd2:	bf00      	nop
  }

  return ret;
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000764 	.word	0x20000764

08008de4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	88db      	ldrh	r3, [r3, #6]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d004      	beq.n	8008e00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f8cd 	bl	8008f98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008dfe:	e023      	b.n	8008e48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	dc02      	bgt.n	8008e12 <USBD_GetConfig+0x2e>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	dc03      	bgt.n	8008e18 <USBD_GetConfig+0x34>
 8008e10:	e015      	b.n	8008e3e <USBD_GetConfig+0x5a>
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d00b      	beq.n	8008e2e <USBD_GetConfig+0x4a>
 8008e16:	e012      	b.n	8008e3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3308      	adds	r3, #8
 8008e22:	2201      	movs	r2, #1
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f927 	bl	800907a <USBD_CtlSendData>
        break;
 8008e2c:	e00c      	b.n	8008e48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	3304      	adds	r3, #4
 8008e32:	2201      	movs	r2, #1
 8008e34:	4619      	mov	r1, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f91f 	bl	800907a <USBD_CtlSendData>
        break;
 8008e3c:	e004      	b.n	8008e48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f8a9 	bl	8008f98 <USBD_CtlError>
        break;
 8008e46:	bf00      	nop
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d81e      	bhi.n	8008ea6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	88db      	ldrh	r3, [r3, #6]
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d004      	beq.n	8008e7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f890 	bl	8008f98 <USBD_CtlError>
        break;
 8008e78:	e01a      	b.n	8008eb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d005      	beq.n	8008e96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f043 0202 	orr.w	r2, r3, #2
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	330c      	adds	r3, #12
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f8eb 	bl	800907a <USBD_CtlSendData>
      break;
 8008ea4:	e004      	b.n	8008eb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f875 	bl	8008f98 <USBD_CtlError>
      break;
 8008eae:	bf00      	nop
  }
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	885b      	ldrh	r3, [r3, #2]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d106      	bne.n	8008ed8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f90e 	bl	80090f4 <USBD_CtlSendStatus>
  }
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d80b      	bhi.n	8008f10 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	885b      	ldrh	r3, [r3, #2]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d10c      	bne.n	8008f1a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f8f3 	bl	80090f4 <USBD_CtlSendStatus>
      }
      break;
 8008f0e:	e004      	b.n	8008f1a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f840 	bl	8008f98 <USBD_CtlError>
      break;
 8008f18:	e000      	b.n	8008f1c <USBD_ClrFeature+0x3c>
      break;
 8008f1a:	bf00      	nop
  }
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	781a      	ldrb	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7ff fabb 	bl	80084ca <SWAPBYTE>
 8008f54:	4603      	mov	r3, r0
 8008f56:	461a      	mov	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3301      	adds	r3, #1
 8008f66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f7ff faae 	bl	80084ca <SWAPBYTE>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	461a      	mov	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f7ff faa1 	bl	80084ca <SWAPBYTE>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	80da      	strh	r2, [r3, #6]
}
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fa2:	2180      	movs	r1, #128	; 0x80
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fc05 	bl	80097b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008faa:	2100      	movs	r1, #0
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fc01 	bl	80097b4 <USBD_LL_StallEP>
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b086      	sub	sp, #24
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d036      	beq.n	800903e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008fd4:	6938      	ldr	r0, [r7, #16]
 8008fd6:	f000 f836 	bl	8009046 <USBD_GetLen>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	3301      	adds	r3, #1
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	4413      	add	r3, r2
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	7812      	ldrb	r2, [r2, #0]
 8008ff2:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	4413      	add	r3, r2
 8009000:	2203      	movs	r2, #3
 8009002:	701a      	strb	r2, [r3, #0]
  idx++;
 8009004:	7dfb      	ldrb	r3, [r7, #23]
 8009006:	3301      	adds	r3, #1
 8009008:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800900a:	e013      	b.n	8009034 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	4413      	add	r3, r2
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	7812      	ldrb	r2, [r2, #0]
 8009016:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	3301      	adds	r3, #1
 800901c:	613b      	str	r3, [r7, #16]
    idx++;
 800901e:	7dfb      	ldrb	r3, [r7, #23]
 8009020:	3301      	adds	r3, #1
 8009022:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	4413      	add	r3, r2
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]
    idx++;
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	3301      	adds	r3, #1
 8009032:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e7      	bne.n	800900c <USBD_GetString+0x52>
 800903c:	e000      	b.n	8009040 <USBD_GetString+0x86>
    return;
 800903e:	bf00      	nop
  }
}
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009046:	b480      	push	{r7}
 8009048:	b085      	sub	sp, #20
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009056:	e005      	b.n	8009064 <USBD_GetLen+0x1e>
  {
    len++;
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	3301      	adds	r3, #1
 800905c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	3301      	adds	r3, #1
 8009062:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1f5      	bne.n	8009058 <USBD_GetLen+0x12>
  }

  return len;
 800906c:	7bfb      	ldrb	r3, [r7, #15]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2202      	movs	r2, #2
 800908a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	2100      	movs	r1, #0
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 fc10 	bl	80098c6 <USBD_LL_Transmit>

  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	2100      	movs	r1, #0
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f000 fbff 	bl	80098c6 <USBD_LL_Transmit>

  return USBD_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	2100      	movs	r1, #0
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 fc0f 	bl	8009908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2204      	movs	r2, #4
 8009100:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009104:	2300      	movs	r3, #0
 8009106:	2200      	movs	r2, #0
 8009108:	2100      	movs	r1, #0
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fbdb 	bl	80098c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2205      	movs	r2, #5
 8009126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800912a:	2300      	movs	r3, #0
 800912c:	2200      	movs	r2, #0
 800912e:	2100      	movs	r1, #0
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fbe9 	bl	8009908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009144:	2200      	movs	r2, #0
 8009146:	490e      	ldr	r1, [pc, #56]	; (8009180 <MX_USB_DEVICE_Init+0x40>)
 8009148:	480e      	ldr	r0, [pc, #56]	; (8009184 <MX_USB_DEVICE_Init+0x44>)
 800914a:	f7fe fead 	bl	8007ea8 <USBD_Init>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009154:	f7f7 fd2a 	bl	8000bac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009158:	490b      	ldr	r1, [pc, #44]	; (8009188 <MX_USB_DEVICE_Init+0x48>)
 800915a:	480a      	ldr	r0, [pc, #40]	; (8009184 <MX_USB_DEVICE_Init+0x44>)
 800915c:	f7fe fed4 	bl	8007f08 <USBD_RegisterClass>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009166:	f7f7 fd21 	bl	8000bac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800916a:	4806      	ldr	r0, [pc, #24]	; (8009184 <MX_USB_DEVICE_Init+0x44>)
 800916c:	f7fe fef3 	bl	8007f56 <USBD_Start>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009176:	f7f7 fd19 	bl	8000bac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800917a:	bf00      	nop
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20000128 	.word	0x20000128
 8009184:	20000994 	.word	0x20000994
 8009188:	20000020 	.word	0x20000020

0800918c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	6039      	str	r1, [r7, #0]
 8009196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2212      	movs	r2, #18
 800919c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800919e:	4b03      	ldr	r3, [pc, #12]	; (80091ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr
 80091ac:	20000144 	.word	0x20000144

080091b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	2204      	movs	r2, #4
 80091c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091c2:	4b03      	ldr	r3, [pc, #12]	; (80091d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	20000158 	.word	0x20000158

080091d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	6039      	str	r1, [r7, #0]
 80091de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091e0:	79fb      	ldrb	r3, [r7, #7]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d105      	bne.n	80091f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	4907      	ldr	r1, [pc, #28]	; (8009208 <USBD_FS_ProductStrDescriptor+0x34>)
 80091ea:	4808      	ldr	r0, [pc, #32]	; (800920c <USBD_FS_ProductStrDescriptor+0x38>)
 80091ec:	f7ff fee5 	bl	8008fba <USBD_GetString>
 80091f0:	e004      	b.n	80091fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	4904      	ldr	r1, [pc, #16]	; (8009208 <USBD_FS_ProductStrDescriptor+0x34>)
 80091f6:	4805      	ldr	r0, [pc, #20]	; (800920c <USBD_FS_ProductStrDescriptor+0x38>)
 80091f8:	f7ff fedf 	bl	8008fba <USBD_GetString>
  }
  return USBD_StrDesc;
 80091fc:	4b02      	ldr	r3, [pc, #8]	; (8009208 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20000c64 	.word	0x20000c64
 800920c:	08009a44 	.word	0x08009a44

08009210 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	6039      	str	r1, [r7, #0]
 800921a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	4904      	ldr	r1, [pc, #16]	; (8009230 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009220:	4804      	ldr	r0, [pc, #16]	; (8009234 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009222:	f7ff feca 	bl	8008fba <USBD_GetString>
  return USBD_StrDesc;
 8009226:	4b02      	ldr	r3, [pc, #8]	; (8009230 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	20000c64 	.word	0x20000c64
 8009234:	08009a5c 	.word	0x08009a5c

08009238 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	6039      	str	r1, [r7, #0]
 8009242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	221a      	movs	r2, #26
 8009248:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800924a:	f000 f843 	bl	80092d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800924e:	4b02      	ldr	r3, [pc, #8]	; (8009258 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009250:	4618      	mov	r0, r3
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	2000015c 	.word	0x2000015c

0800925c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	6039      	str	r1, [r7, #0]
 8009266:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d105      	bne.n	800927a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	4907      	ldr	r1, [pc, #28]	; (8009290 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009272:	4808      	ldr	r0, [pc, #32]	; (8009294 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009274:	f7ff fea1 	bl	8008fba <USBD_GetString>
 8009278:	e004      	b.n	8009284 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	4904      	ldr	r1, [pc, #16]	; (8009290 <USBD_FS_ConfigStrDescriptor+0x34>)
 800927e:	4805      	ldr	r0, [pc, #20]	; (8009294 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009280:	f7ff fe9b 	bl	8008fba <USBD_GetString>
  }
  return USBD_StrDesc;
 8009284:	4b02      	ldr	r3, [pc, #8]	; (8009290 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000c64 	.word	0x20000c64
 8009294:	08009a70 	.word	0x08009a70

08009298 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	6039      	str	r1, [r7, #0]
 80092a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d105      	bne.n	80092b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	4907      	ldr	r1, [pc, #28]	; (80092cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092ae:	4808      	ldr	r0, [pc, #32]	; (80092d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092b0:	f7ff fe83 	bl	8008fba <USBD_GetString>
 80092b4:	e004      	b.n	80092c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	4904      	ldr	r1, [pc, #16]	; (80092cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092ba:	4805      	ldr	r0, [pc, #20]	; (80092d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092bc:	f7ff fe7d 	bl	8008fba <USBD_GetString>
  }
  return USBD_StrDesc;
 80092c0:	4b02      	ldr	r3, [pc, #8]	; (80092cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20000c64 	.word	0x20000c64
 80092d0:	08009a7c 	.word	0x08009a7c

080092d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80092da:	4b0f      	ldr	r3, [pc, #60]	; (8009318 <Get_SerialNum+0x44>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80092e0:	4b0e      	ldr	r3, [pc, #56]	; (800931c <Get_SerialNum+0x48>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80092e6:	4b0e      	ldr	r3, [pc, #56]	; (8009320 <Get_SerialNum+0x4c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4413      	add	r3, r2
 80092f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d009      	beq.n	800930e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80092fa:	2208      	movs	r2, #8
 80092fc:	4909      	ldr	r1, [pc, #36]	; (8009324 <Get_SerialNum+0x50>)
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f000 f814 	bl	800932c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009304:	2204      	movs	r2, #4
 8009306:	4908      	ldr	r1, [pc, #32]	; (8009328 <Get_SerialNum+0x54>)
 8009308:	68b8      	ldr	r0, [r7, #8]
 800930a:	f000 f80f 	bl	800932c <IntToUnicode>
  }
}
 800930e:	bf00      	nop
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	1fff7a10 	.word	0x1fff7a10
 800931c:	1fff7a14 	.word	0x1fff7a14
 8009320:	1fff7a18 	.word	0x1fff7a18
 8009324:	2000015e 	.word	0x2000015e
 8009328:	2000016e 	.word	0x2000016e

0800932c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	4613      	mov	r3, r2
 8009338:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800933e:	2300      	movs	r3, #0
 8009340:	75fb      	strb	r3, [r7, #23]
 8009342:	e027      	b.n	8009394 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	0f1b      	lsrs	r3, r3, #28
 8009348:	2b09      	cmp	r3, #9
 800934a:	d80b      	bhi.n	8009364 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	0f1b      	lsrs	r3, r3, #28
 8009350:	b2da      	uxtb	r2, r3
 8009352:	7dfb      	ldrb	r3, [r7, #23]
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	4619      	mov	r1, r3
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	440b      	add	r3, r1
 800935c:	3230      	adds	r2, #48	; 0x30
 800935e:	b2d2      	uxtb	r2, r2
 8009360:	701a      	strb	r2, [r3, #0]
 8009362:	e00a      	b.n	800937a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	0f1b      	lsrs	r3, r3, #28
 8009368:	b2da      	uxtb	r2, r3
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	4619      	mov	r1, r3
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	440b      	add	r3, r1
 8009374:	3237      	adds	r2, #55	; 0x37
 8009376:	b2d2      	uxtb	r2, r2
 8009378:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	011b      	lsls	r3, r3, #4
 800937e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	3301      	adds	r3, #1
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	4413      	add	r3, r2
 800938a:	2200      	movs	r2, #0
 800938c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800938e:	7dfb      	ldrb	r3, [r7, #23]
 8009390:	3301      	adds	r3, #1
 8009392:	75fb      	strb	r3, [r7, #23]
 8009394:	7dfa      	ldrb	r2, [r7, #23]
 8009396:	79fb      	ldrb	r3, [r7, #7]
 8009398:	429a      	cmp	r2, r3
 800939a:	d3d3      	bcc.n	8009344 <IntToUnicode+0x18>
  }
}
 800939c:	bf00      	nop
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
	...

080093ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b08a      	sub	sp, #40	; 0x28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093b4:	f107 0314 	add.w	r3, r7, #20
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	605a      	str	r2, [r3, #4]
 80093be:	609a      	str	r2, [r3, #8]
 80093c0:	60da      	str	r2, [r3, #12]
 80093c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093cc:	d14b      	bne.n	8009466 <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093ce:	2300      	movs	r3, #0
 80093d0:	613b      	str	r3, [r7, #16]
 80093d2:	4b27      	ldr	r3, [pc, #156]	; (8009470 <HAL_PCD_MspInit+0xc4>)
 80093d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d6:	4a26      	ldr	r2, [pc, #152]	; (8009470 <HAL_PCD_MspInit+0xc4>)
 80093d8:	f043 0301 	orr.w	r3, r3, #1
 80093dc:	6313      	str	r3, [r2, #48]	; 0x30
 80093de:	4b24      	ldr	r3, [pc, #144]	; (8009470 <HAL_PCD_MspInit+0xc4>)
 80093e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	613b      	str	r3, [r7, #16]
 80093e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80093ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093f0:	2302      	movs	r3, #2
 80093f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093f4:	2300      	movs	r3, #0
 80093f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093f8:	2303      	movs	r3, #3
 80093fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80093fc:	230a      	movs	r3, #10
 80093fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009400:	f107 0314 	add.w	r3, r7, #20
 8009404:	4619      	mov	r1, r3
 8009406:	481b      	ldr	r0, [pc, #108]	; (8009474 <HAL_PCD_MspInit+0xc8>)
 8009408:	f7f9 ff66 	bl	80032d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800940c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009412:	2302      	movs	r3, #2
 8009414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009416:	2301      	movs	r3, #1
 8009418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800941a:	2303      	movs	r3, #3
 800941c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800941e:	230a      	movs	r3, #10
 8009420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009422:	f107 0314 	add.w	r3, r7, #20
 8009426:	4619      	mov	r1, r3
 8009428:	4812      	ldr	r0, [pc, #72]	; (8009474 <HAL_PCD_MspInit+0xc8>)
 800942a:	f7f9 ff55 	bl	80032d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800942e:	4b10      	ldr	r3, [pc, #64]	; (8009470 <HAL_PCD_MspInit+0xc4>)
 8009430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009432:	4a0f      	ldr	r2, [pc, #60]	; (8009470 <HAL_PCD_MspInit+0xc4>)
 8009434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009438:	6353      	str	r3, [r2, #52]	; 0x34
 800943a:	2300      	movs	r3, #0
 800943c:	60fb      	str	r3, [r7, #12]
 800943e:	4b0c      	ldr	r3, [pc, #48]	; (8009470 <HAL_PCD_MspInit+0xc4>)
 8009440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009442:	4a0b      	ldr	r2, [pc, #44]	; (8009470 <HAL_PCD_MspInit+0xc4>)
 8009444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009448:	6453      	str	r3, [r2, #68]	; 0x44
 800944a:	4b09      	ldr	r3, [pc, #36]	; (8009470 <HAL_PCD_MspInit+0xc4>)
 800944c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009456:	2200      	movs	r2, #0
 8009458:	2100      	movs	r1, #0
 800945a:	2043      	movs	r0, #67	; 0x43
 800945c:	f7f9 fb03 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009460:	2043      	movs	r0, #67	; 0x43
 8009462:	f7f9 fb1c 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009466:	bf00      	nop
 8009468:	3728      	adds	r7, #40	; 0x28
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	40023800 	.word	0x40023800
 8009474:	40020000 	.word	0x40020000

08009478 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800948c:	4619      	mov	r1, r3
 800948e:	4610      	mov	r0, r2
 8009490:	f7fe fdac 	bl	8007fec <USBD_LL_SetupStage>
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	460b      	mov	r3, r1
 80094a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80094ae:	78fa      	ldrb	r2, [r7, #3]
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	4613      	mov	r3, r2
 80094b4:	00db      	lsls	r3, r3, #3
 80094b6:	1a9b      	subs	r3, r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	440b      	add	r3, r1
 80094bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	78fb      	ldrb	r3, [r7, #3]
 80094c4:	4619      	mov	r1, r3
 80094c6:	f7fe fde6 	bl	8008096 <USBD_LL_DataOutStage>
}
 80094ca:	bf00      	nop
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b082      	sub	sp, #8
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	460b      	mov	r3, r1
 80094dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80094e4:	78fa      	ldrb	r2, [r7, #3]
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	4613      	mov	r3, r2
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	1a9b      	subs	r3, r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	440b      	add	r3, r1
 80094f2:	3348      	adds	r3, #72	; 0x48
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	78fb      	ldrb	r3, [r7, #3]
 80094f8:	4619      	mov	r1, r3
 80094fa:	f7fe fe2f 	bl	800815c <USBD_LL_DataInStage>
}
 80094fe:	bf00      	nop
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009514:	4618      	mov	r0, r3
 8009516:	f7fe ff43 	bl	80083a0 <USBD_LL_SOF>
}
 800951a:	bf00      	nop
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800952a:	2301      	movs	r3, #1
 800952c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d102      	bne.n	800953c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]
 800953a:	e008      	b.n	800954e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	2b02      	cmp	r3, #2
 8009542:	d102      	bne.n	800954a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009544:	2301      	movs	r3, #1
 8009546:	73fb      	strb	r3, [r7, #15]
 8009548:	e001      	b.n	800954e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800954a:	f7f7 fb2f 	bl	8000bac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009554:	7bfa      	ldrb	r2, [r7, #15]
 8009556:	4611      	mov	r1, r2
 8009558:	4618      	mov	r0, r3
 800955a:	f7fe fee3 	bl	8008324 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009564:	4618      	mov	r0, r3
 8009566:	f7fe fe8f 	bl	8008288 <USBD_LL_Reset>
}
 800956a:	bf00      	nop
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009582:	4618      	mov	r0, r3
 8009584:	f7fe fede 	bl	8008344 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	6812      	ldr	r2, [r2, #0]
 8009596:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800959a:	f043 0301 	orr.w	r3, r3, #1
 800959e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a1b      	ldr	r3, [r3, #32]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d005      	beq.n	80095b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095a8:	4b04      	ldr	r3, [pc, #16]	; (80095bc <HAL_PCD_SuspendCallback+0x48>)
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	4a03      	ldr	r2, [pc, #12]	; (80095bc <HAL_PCD_SuspendCallback+0x48>)
 80095ae:	f043 0306 	orr.w	r3, r3, #6
 80095b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80095b4:	bf00      	nop
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	e000ed00 	.word	0xe000ed00

080095c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fe fece 	bl	8008370 <USBD_LL_Resume>
}
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80095ee:	78fa      	ldrb	r2, [r7, #3]
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe ff1c 	bl	8008430 <USBD_LL_IsoOUTIncomplete>
}
 80095f8:	bf00      	nop
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	460b      	mov	r3, r1
 800960a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009612:	78fa      	ldrb	r2, [r7, #3]
 8009614:	4611      	mov	r1, r2
 8009616:	4618      	mov	r0, r3
 8009618:	f7fe fee4 	bl	80083e4 <USBD_LL_IsoINIncomplete>
}
 800961c:	bf00      	nop
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009632:	4618      	mov	r0, r3
 8009634:	f7fe ff22 	bl	800847c <USBD_LL_DevConnected>
}
 8009638:	bf00      	nop
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe ff1f 	bl	8008492 <USBD_LL_DevDisconnected>
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d13c      	bne.n	80096e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800966c:	4a20      	ldr	r2, [pc, #128]	; (80096f0 <USBD_LL_Init+0x94>)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a1e      	ldr	r2, [pc, #120]	; (80096f0 <USBD_LL_Init+0x94>)
 8009678:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800967c:	4b1c      	ldr	r3, [pc, #112]	; (80096f0 <USBD_LL_Init+0x94>)
 800967e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009682:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009684:	4b1a      	ldr	r3, [pc, #104]	; (80096f0 <USBD_LL_Init+0x94>)
 8009686:	2204      	movs	r2, #4
 8009688:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800968a:	4b19      	ldr	r3, [pc, #100]	; (80096f0 <USBD_LL_Init+0x94>)
 800968c:	2202      	movs	r2, #2
 800968e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009690:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <USBD_LL_Init+0x94>)
 8009692:	2200      	movs	r2, #0
 8009694:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009696:	4b16      	ldr	r3, [pc, #88]	; (80096f0 <USBD_LL_Init+0x94>)
 8009698:	2202      	movs	r2, #2
 800969a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800969c:	4b14      	ldr	r3, [pc, #80]	; (80096f0 <USBD_LL_Init+0x94>)
 800969e:	2200      	movs	r2, #0
 80096a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80096a2:	4b13      	ldr	r3, [pc, #76]	; (80096f0 <USBD_LL_Init+0x94>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80096a8:	4b11      	ldr	r3, [pc, #68]	; (80096f0 <USBD_LL_Init+0x94>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80096ae:	4b10      	ldr	r3, [pc, #64]	; (80096f0 <USBD_LL_Init+0x94>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80096b4:	4b0e      	ldr	r3, [pc, #56]	; (80096f0 <USBD_LL_Init+0x94>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80096ba:	480d      	ldr	r0, [pc, #52]	; (80096f0 <USBD_LL_Init+0x94>)
 80096bc:	f7f9 ffc1 	bl	8003642 <HAL_PCD_Init>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80096c6:	f7f7 fa71 	bl	8000bac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80096ca:	2180      	movs	r1, #128	; 0x80
 80096cc:	4808      	ldr	r0, [pc, #32]	; (80096f0 <USBD_LL_Init+0x94>)
 80096ce:	f7fb f906 	bl	80048de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80096d2:	2240      	movs	r2, #64	; 0x40
 80096d4:	2100      	movs	r1, #0
 80096d6:	4806      	ldr	r0, [pc, #24]	; (80096f0 <USBD_LL_Init+0x94>)
 80096d8:	f7fb f8ba 	bl	8004850 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80096dc:	2280      	movs	r2, #128	; 0x80
 80096de:	2101      	movs	r1, #1
 80096e0:	4803      	ldr	r0, [pc, #12]	; (80096f0 <USBD_LL_Init+0x94>)
 80096e2:	f7fb f8b5 	bl	8004850 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	20000e64 	.word	0x20000e64

080096f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800970a:	4618      	mov	r0, r3
 800970c:	f7fa f8b6 	bl	800387c <HAL_PCD_Start>
 8009710:	4603      	mov	r3, r0
 8009712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	4618      	mov	r0, r3
 8009718:	f000 f930 	bl	800997c <USBD_Get_USB_Status>
 800971c:	4603      	mov	r3, r0
 800971e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009720:	7bbb      	ldrb	r3, [r7, #14]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	4608      	mov	r0, r1
 8009734:	4611      	mov	r1, r2
 8009736:	461a      	mov	r2, r3
 8009738:	4603      	mov	r3, r0
 800973a:	70fb      	strb	r3, [r7, #3]
 800973c:	460b      	mov	r3, r1
 800973e:	70bb      	strb	r3, [r7, #2]
 8009740:	4613      	mov	r3, r2
 8009742:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009752:	78bb      	ldrb	r3, [r7, #2]
 8009754:	883a      	ldrh	r2, [r7, #0]
 8009756:	78f9      	ldrb	r1, [r7, #3]
 8009758:	f7fa fc9a 	bl	8004090 <HAL_PCD_EP_Open>
 800975c:	4603      	mov	r3, r0
 800975e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	4618      	mov	r0, r3
 8009764:	f000 f90a 	bl	800997c <USBD_Get_USB_Status>
 8009768:	4603      	mov	r3, r0
 800976a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800976c:	7bbb      	ldrb	r3, [r7, #14]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	460b      	mov	r3, r1
 8009780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009790:	78fa      	ldrb	r2, [r7, #3]
 8009792:	4611      	mov	r1, r2
 8009794:	4618      	mov	r0, r3
 8009796:	f7fa fce3 	bl	8004160 <HAL_PCD_EP_Close>
 800979a:	4603      	mov	r3, r0
 800979c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800979e:	7bfb      	ldrb	r3, [r7, #15]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 f8eb 	bl	800997c <USBD_Get_USB_Status>
 80097a6:	4603      	mov	r3, r0
 80097a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097ce:	78fa      	ldrb	r2, [r7, #3]
 80097d0:	4611      	mov	r1, r2
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fa fda3 	bl	800431e <HAL_PCD_EP_SetStall>
 80097d8:	4603      	mov	r3, r0
 80097da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 f8cc 	bl	800997c <USBD_Get_USB_Status>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b084      	sub	sp, #16
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	460b      	mov	r3, r1
 80097fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800980c:	78fa      	ldrb	r2, [r7, #3]
 800980e:	4611      	mov	r1, r2
 8009810:	4618      	mov	r0, r3
 8009812:	f7fa fde8 	bl	80043e6 <HAL_PCD_EP_ClrStall>
 8009816:	4603      	mov	r3, r0
 8009818:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 f8ad 	bl	800997c <USBD_Get_USB_Status>
 8009822:	4603      	mov	r3, r0
 8009824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009826:	7bbb      	ldrb	r3, [r7, #14]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009842:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009848:	2b00      	cmp	r3, #0
 800984a:	da0b      	bge.n	8009864 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009852:	68f9      	ldr	r1, [r7, #12]
 8009854:	4613      	mov	r3, r2
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	1a9b      	subs	r3, r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	440b      	add	r3, r1
 800985e:	333e      	adds	r3, #62	; 0x3e
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	e00b      	b.n	800987c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009864:	78fb      	ldrb	r3, [r7, #3]
 8009866:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800986a:	68f9      	ldr	r1, [r7, #12]
 800986c:	4613      	mov	r3, r2
 800986e:	00db      	lsls	r3, r3, #3
 8009870:	1a9b      	subs	r3, r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	440b      	add	r3, r1
 8009876:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800987a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098a2:	78fa      	ldrb	r2, [r7, #3]
 80098a4:	4611      	mov	r1, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fa fbcd 	bl	8004046 <HAL_PCD_SetAddress>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 f862 	bl	800997c <USBD_Get_USB_Status>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b086      	sub	sp, #24
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	60f8      	str	r0, [r7, #12]
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	603b      	str	r3, [r7, #0]
 80098d2:	460b      	mov	r3, r1
 80098d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80098e4:	7af9      	ldrb	r1, [r7, #11]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	f7fa fcce 	bl	800428a <HAL_PCD_EP_Transmit>
 80098ee:	4603      	mov	r3, r0
 80098f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 f841 	bl	800997c <USBD_Get_USB_Status>
 80098fa:	4603      	mov	r3, r0
 80098fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	607a      	str	r2, [r7, #4]
 8009912:	603b      	str	r3, [r7, #0]
 8009914:	460b      	mov	r3, r1
 8009916:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009926:	7af9      	ldrb	r1, [r7, #11]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	f7fa fc62 	bl	80041f4 <HAL_PCD_EP_Receive>
 8009930:	4603      	mov	r3, r0
 8009932:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009934:	7dfb      	ldrb	r3, [r7, #23]
 8009936:	4618      	mov	r0, r3
 8009938:	f000 f820 	bl	800997c <USBD_Get_USB_Status>
 800993c:	4603      	mov	r3, r0
 800993e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009940:	7dbb      	ldrb	r3, [r7, #22]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009954:	4b03      	ldr	r3, [pc, #12]	; (8009964 <USBD_static_malloc+0x18>)
}
 8009956:	4618      	mov	r0, r3
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	20000768 	.word	0x20000768

08009968 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]

}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	4603      	mov	r3, r0
 8009984:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	2b03      	cmp	r3, #3
 800998e:	d817      	bhi.n	80099c0 <USBD_Get_USB_Status+0x44>
 8009990:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <USBD_Get_USB_Status+0x1c>)
 8009992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009996:	bf00      	nop
 8009998:	080099a9 	.word	0x080099a9
 800999c:	080099af 	.word	0x080099af
 80099a0:	080099b5 	.word	0x080099b5
 80099a4:	080099bb 	.word	0x080099bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	73fb      	strb	r3, [r7, #15]
    break;
 80099ac:	e00b      	b.n	80099c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80099ae:	2303      	movs	r3, #3
 80099b0:	73fb      	strb	r3, [r7, #15]
    break;
 80099b2:	e008      	b.n	80099c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80099b4:	2301      	movs	r3, #1
 80099b6:	73fb      	strb	r3, [r7, #15]
    break;
 80099b8:	e005      	b.n	80099c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099ba:	2303      	movs	r3, #3
 80099bc:	73fb      	strb	r3, [r7, #15]
    break;
 80099be:	e002      	b.n	80099c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099c0:	2303      	movs	r3, #3
 80099c2:	73fb      	strb	r3, [r7, #15]
    break;
 80099c4:	bf00      	nop
  }
  return usb_status;
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <__libc_init_array>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	4d0d      	ldr	r5, [pc, #52]	; (8009a0c <__libc_init_array+0x38>)
 80099d8:	4c0d      	ldr	r4, [pc, #52]	; (8009a10 <__libc_init_array+0x3c>)
 80099da:	1b64      	subs	r4, r4, r5
 80099dc:	10a4      	asrs	r4, r4, #2
 80099de:	2600      	movs	r6, #0
 80099e0:	42a6      	cmp	r6, r4
 80099e2:	d109      	bne.n	80099f8 <__libc_init_array+0x24>
 80099e4:	4d0b      	ldr	r5, [pc, #44]	; (8009a14 <__libc_init_array+0x40>)
 80099e6:	4c0c      	ldr	r4, [pc, #48]	; (8009a18 <__libc_init_array+0x44>)
 80099e8:	f000 f820 	bl	8009a2c <_init>
 80099ec:	1b64      	subs	r4, r4, r5
 80099ee:	10a4      	asrs	r4, r4, #2
 80099f0:	2600      	movs	r6, #0
 80099f2:	42a6      	cmp	r6, r4
 80099f4:	d105      	bne.n	8009a02 <__libc_init_array+0x2e>
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099fc:	4798      	blx	r3
 80099fe:	3601      	adds	r6, #1
 8009a00:	e7ee      	b.n	80099e0 <__libc_init_array+0xc>
 8009a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a06:	4798      	blx	r3
 8009a08:	3601      	adds	r6, #1
 8009a0a:	e7f2      	b.n	80099f2 <__libc_init_array+0x1e>
 8009a0c:	08009ab4 	.word	0x08009ab4
 8009a10:	08009ab4 	.word	0x08009ab4
 8009a14:	08009ab4 	.word	0x08009ab4
 8009a18:	08009ab8 	.word	0x08009ab8

08009a1c <memset>:
 8009a1c:	4402      	add	r2, r0
 8009a1e:	4603      	mov	r3, r0
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d100      	bne.n	8009a26 <memset+0xa>
 8009a24:	4770      	bx	lr
 8009a26:	f803 1b01 	strb.w	r1, [r3], #1
 8009a2a:	e7f9      	b.n	8009a20 <memset+0x4>

08009a2c <_init>:
 8009a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2e:	bf00      	nop
 8009a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a32:	bc08      	pop	{r3}
 8009a34:	469e      	mov	lr, r3
 8009a36:	4770      	bx	lr

08009a38 <_fini>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	bf00      	nop
 8009a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3e:	bc08      	pop	{r3}
 8009a40:	469e      	mov	lr, r3
 8009a42:	4770      	bx	lr
