
GINGAAAN_1STLOTSLIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008820  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080089b4  080089b4  000189b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a1c  08008a1c  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08008a1c  08008a1c  00018a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a24  08008a24  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a24  08008a24  00018a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a28  08008a28  00018a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08008a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001094  20000158  08008b84  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011ec  08008b84  000211ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5e7  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d88  00000000  00000000  0003e76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  000424f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00043420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0c8  00000000  00000000  000441e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016083  00000000  00000000  0005e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a831  00000000  00000000  0007432b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000feb5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cec  00000000  00000000  000febb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000158 	.word	0x20000158
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800899c 	.word	0x0800899c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000015c 	.word	0x2000015c
 80001d0:	0800899c 	.word	0x0800899c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <appInit>:
//static void CheckTouch(uint8_t* recvData, bool* setData);
//static void SetColorData(uint8_t* setArray, uint8_t setColorTouch[][3], uint8_t setColorBar[][3]);
static bool IO_Read(uint8_t sensor);

//初期化
int appInit(void){
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
		SliderBarLEDData[i][1] = 00;
		SliderBarLEDData[i][2] = 128;
	}
	D_Slider_SetThreshold(TouchThreshold);
	*/
	return 0;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <appTask>:

int appTask(void){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	; 0x28
 80004e0:	af00      	add	r7, sp, #0
	static int testCount1 = 0;
	static int testCount2 = 140;
	static int testCount3 = 0;
	static int testCount4 = 0;

	sndTime += G_System_counter - recent_System_counter;
 80004e2:	4ba8      	ldr	r3, [pc, #672]	; (8000784 <appTask+0x2a8>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4ba8      	ldr	r3, [pc, #672]	; (8000788 <appTask+0x2ac>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	1ad2      	subs	r2, r2, r3
 80004ec:	4ba7      	ldr	r3, [pc, #668]	; (800078c <appTask+0x2b0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4413      	add	r3, r2
 80004f2:	4aa6      	ldr	r2, [pc, #664]	; (800078c <appTask+0x2b0>)
 80004f4:	6013      	str	r3, [r2, #0]
	rcvTime += G_System_counter - recent_System_counter;
 80004f6:	4ba3      	ldr	r3, [pc, #652]	; (8000784 <appTask+0x2a8>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	4ba3      	ldr	r3, [pc, #652]	; (8000788 <appTask+0x2ac>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	1ad2      	subs	r2, r2, r3
 8000500:	4ba3      	ldr	r3, [pc, #652]	; (8000790 <appTask+0x2b4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4413      	add	r3, r2
 8000506:	4aa2      	ldr	r2, [pc, #648]	; (8000790 <appTask+0x2b4>)
 8000508:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_counter;
 800050a:	4b9e      	ldr	r3, [pc, #632]	; (8000784 <appTask+0x2a8>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a9e      	ldr	r2, [pc, #632]	; (8000788 <appTask+0x2ac>)
 8000510:	6013      	str	r3, [r2, #0]

	//CAN送信タイミングなら送信
	if(sndTime >= CAN_SEND_INTERVAL){
 8000512:	4b9e      	ldr	r3, [pc, #632]	; (800078c <appTask+0x2b0>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b09      	cmp	r3, #9
 8000518:	d902      	bls.n	8000520 <appTask+0x44>

		sndTime = 0;
 800051a:	4b9c      	ldr	r3, [pc, #624]	; (800078c <appTask+0x2b0>)
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
	}

	static uint8_t sum = 0;
	if(rcvTime >= UART_RECEIVE_INTERVAL){
 8000520:	4b9b      	ldr	r3, [pc, #620]	; (8000790 <appTask+0x2b4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000528:	f0c0 809d 	bcc.w	8000666 <appTask+0x18a>
		sndData_UART[2] = testCount;
		sndData_UART[3] = 3;
		sndData_UART[4] = 50;
		*/
		static int sendLength = 12;
		sndData_UART[0] = 0xe0;//testCount1;
 800052c:	4b99      	ldr	r3, [pc, #612]	; (8000794 <appTask+0x2b8>)
 800052e:	22e0      	movs	r2, #224	; 0xe0
 8000530:	701a      	strb	r2, [r3, #0]
		sndData_UART[1] = 0x01;//testCount1;//testCount2;
 8000532:	4b98      	ldr	r3, [pc, #608]	; (8000794 <appTask+0x2b8>)
 8000534:	2201      	movs	r2, #1
 8000536:	705a      	strb	r2, [r3, #1]
		sndData_UART[2] = testCount;
 8000538:	4b97      	ldr	r3, [pc, #604]	; (8000798 <appTask+0x2bc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b95      	ldr	r3, [pc, #596]	; (8000794 <appTask+0x2b8>)
 8000540:	709a      	strb	r2, [r3, #2]
		sndData_UART[3] = 5;
 8000542:	4b94      	ldr	r3, [pc, #592]	; (8000794 <appTask+0x2b8>)
 8000544:	2205      	movs	r2, #5
 8000546:	70da      	strb	r2, [r3, #3]
		sndData_UART[4] = 50;
 8000548:	4b92      	ldr	r3, [pc, #584]	; (8000794 <appTask+0x2b8>)
 800054a:	2232      	movs	r2, #50	; 0x32
 800054c:	711a      	strb	r2, [r3, #4]
		testCount3 = 0;
 800054e:	4b93      	ldr	r3, [pc, #588]	; (800079c <appTask+0x2c0>)
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
		int R = testCount & 1;
 8000554:	4b90      	ldr	r3, [pc, #576]	; (8000798 <appTask+0x2bc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	617b      	str	r3, [r7, #20]
		int G = (testCount>>1) & 1;
 800055e:	4b8e      	ldr	r3, [pc, #568]	; (8000798 <appTask+0x2bc>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	105b      	asrs	r3, r3, #1
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	613b      	str	r3, [r7, #16]
		int B = (testCount>>2) & 1;
 800056a:	4b8b      	ldr	r3, [pc, #556]	; (8000798 <appTask+0x2bc>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	109b      	asrs	r3, r3, #2
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	60fb      	str	r3, [r7, #12]
		sndData_UART[5] = 0;//R * 36 + G * 146 + B * 72;//testCount;//150;//testCount;
 8000576:	4b87      	ldr	r3, [pc, #540]	; (8000794 <appTask+0x2b8>)
 8000578:	2200      	movs	r2, #0
 800057a:	715a      	strb	r2, [r3, #5]
		sndData_UART[6] = 208;//R * 73 + G * 36 + B * 146;//testCount;//testCount;//testCount2;
 800057c:	4b85      	ldr	r3, [pc, #532]	; (8000794 <appTask+0x2b8>)
 800057e:	22d0      	movs	r2, #208	; 0xd0
 8000580:	719a      	strb	r2, [r3, #6]
		sndData_UART[7] = 223;//R * 36 + G * 146 + B * 72;//testCount;//testCount2;
 8000582:	4b84      	ldr	r3, [pc, #528]	; (8000794 <appTask+0x2b8>)
 8000584:	22df      	movs	r2, #223	; 0xdf
 8000586:	71da      	strb	r2, [r3, #7]
		sndData_UART[8] = 0;//R * 73 + G * 36 + B * 146;//testCount;//243;//testCount2;
 8000588:	4b82      	ldr	r3, [pc, #520]	; (8000794 <appTask+0x2b8>)
 800058a:	2200      	movs	r2, #0
 800058c:	721a      	strb	r2, [r3, #8]
		sndData_UART[9] = 208;//testCount2;//testCount1;
 800058e:	4b81      	ldr	r3, [pc, #516]	; (8000794 <appTask+0x2b8>)
 8000590:	22d0      	movs	r2, #208	; 0xd0
 8000592:	725a      	strb	r2, [r3, #9]
		sndData_UART[10] = 223;//testCount2;
 8000594:	4b7f      	ldr	r3, [pc, #508]	; (8000794 <appTask+0x2b8>)
 8000596:	22df      	movs	r2, #223	; 0xdf
 8000598:	729a      	strb	r2, [r3, #10]
		sndData_UART[11] = 0;//testCount1;
 800059a:	4b7e      	ldr	r3, [pc, #504]	; (8000794 <appTask+0x2b8>)
 800059c:	2200      	movs	r2, #0
 800059e:	72da      	strb	r2, [r3, #11]
		sndData_UART[12] = 0;//testCount2;
 80005a0:	4b7c      	ldr	r3, [pc, #496]	; (8000794 <appTask+0x2b8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	731a      	strb	r2, [r3, #12]
		sndData_UART[13] = 0;//testCount1;
 80005a6:	4b7b      	ldr	r3, [pc, #492]	; (8000794 <appTask+0x2b8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	735a      	strb	r2, [r3, #13]
		sndData_UART[14] = 0;//testCount2;
 80005ac:	4b79      	ldr	r3, [pc, #484]	; (8000794 <appTask+0x2b8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	739a      	strb	r2, [r3, #14]
		sndData_UART[15] = 0;//testCount1;
 80005b2:	4b78      	ldr	r3, [pc, #480]	; (8000794 <appTask+0x2b8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	73da      	strb	r2, [r3, #15]

		uint8_t dataSum = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		//dataSum += sndData_UART[1];
		for(int j=1; j<sendLength-1; j++){
 80005be:	2301      	movs	r3, #1
 80005c0:	623b      	str	r3, [r7, #32]
 80005c2:	e012      	b.n	80005ea <appTask+0x10e>
			if(j!=6 && j!=9) dataSum += sndData_UART[j];
 80005c4:	6a3b      	ldr	r3, [r7, #32]
 80005c6:	2b06      	cmp	r3, #6
 80005c8:	d00c      	beq.n	80005e4 <appTask+0x108>
 80005ca:	6a3b      	ldr	r3, [r7, #32]
 80005cc:	2b09      	cmp	r3, #9
 80005ce:	d009      	beq.n	80005e4 <appTask+0x108>
 80005d0:	4a70      	ldr	r2, [pc, #448]	; (8000794 <appTask+0x2b8>)
 80005d2:	6a3b      	ldr	r3, [r7, #32]
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005de:	4413      	add	r3, r2
 80005e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(int j=1; j<sendLength-1; j++){
 80005e4:	6a3b      	ldr	r3, [r7, #32]
 80005e6:	3301      	adds	r3, #1
 80005e8:	623b      	str	r3, [r7, #32]
 80005ea:	4b6d      	ldr	r3, [pc, #436]	; (80007a0 <appTask+0x2c4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	6a3a      	ldr	r2, [r7, #32]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbe6      	blt.n	80005c4 <appTask+0xe8>
		}
		dataSum += 2;
 80005f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005fa:	3302      	adds	r3, #2
 80005fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		//int checkSum = 256 - (int)dataSum;
		//sndData_UART[2/*sendLength-1*/] = (uint8_t)checkSum - 1;
		sndData_UART[sendLength-1] = (uint8_t)dataSum;
 8000600:	4b67      	ldr	r3, [pc, #412]	; (80007a0 <appTask+0x2c4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3b01      	subs	r3, #1
 8000606:	4963      	ldr	r1, [pc, #396]	; (8000794 <appTask+0x2b8>)
 8000608:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800060c:	54ca      	strb	r2, [r1, r3]

		//retSnd = D_Slider_Send(sndData_UART,sendLength);
		//retRcv = D_Slider_Receive(rcvData_UART,16);
		rcvTime = 0;
 800060e:	4b60      	ldr	r3, [pc, #384]	; (8000790 <appTask+0x2b4>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
		for(int i=0; i<5; i++){
			if(((data[8]>>i) & 1) == 1) SensorCountR[i]++;
		}
		*/

		testCount1++;
 8000614:	4b63      	ldr	r3, [pc, #396]	; (80007a4 <appTask+0x2c8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a62      	ldr	r2, [pc, #392]	; (80007a4 <appTask+0x2c8>)
 800061c:	6013      	str	r3, [r2, #0]
		if(testCount1 >= 256){
 800061e:	4b61      	ldr	r3, [pc, #388]	; (80007a4 <appTask+0x2c8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2bff      	cmp	r3, #255	; 0xff
 8000624:	dd07      	ble.n	8000636 <appTask+0x15a>
			testCount1 = 0;
 8000626:	4b5f      	ldr	r3, [pc, #380]	; (80007a4 <appTask+0x2c8>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
			testCount2++;
 800062c:	4b5e      	ldr	r3, [pc, #376]	; (80007a8 <appTask+0x2cc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	3301      	adds	r3, #1
 8000632:	4a5d      	ldr	r2, [pc, #372]	; (80007a8 <appTask+0x2cc>)
 8000634:	6013      	str	r3, [r2, #0]
		}
		if(testCount2 >= 256){
 8000636:	4b5c      	ldr	r3, [pc, #368]	; (80007a8 <appTask+0x2cc>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2bff      	cmp	r3, #255	; 0xff
 800063c:	dd07      	ble.n	800064e <appTask+0x172>
			testCount2 = 0;
 800063e:	4b5a      	ldr	r3, [pc, #360]	; (80007a8 <appTask+0x2cc>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
			testCount3++;
 8000644:	4b55      	ldr	r3, [pc, #340]	; (800079c <appTask+0x2c0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	4a54      	ldr	r2, [pc, #336]	; (800079c <appTask+0x2c0>)
 800064c:	6013      	str	r3, [r2, #0]
		}
		if(testCount3 >= 256){
 800064e:	4b53      	ldr	r3, [pc, #332]	; (800079c <appTask+0x2c0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2bff      	cmp	r3, #255	; 0xff
 8000654:	dd07      	ble.n	8000666 <appTask+0x18a>
			testCount3 = 0;
 8000656:	4b51      	ldr	r3, [pc, #324]	; (800079c <appTask+0x2c0>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
			testCount4++;
 800065c:	4b53      	ldr	r3, [pc, #332]	; (80007ac <appTask+0x2d0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	4a52      	ldr	r2, [pc, #328]	; (80007ac <appTask+0x2d0>)
 8000664:	6013      	str	r3, [r2, #0]
		}
	}

	bool R = (testCount & 1) == 1;
 8000666:	4b4c      	ldr	r3, [pc, #304]	; (8000798 <appTask+0x2bc>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf14      	ite	ne
 8000672:	2301      	movne	r3, #1
 8000674:	2300      	moveq	r3, #0
 8000676:	72fb      	strb	r3, [r7, #11]
	bool G = ((testCount>>1) & 1) == 1;
 8000678:	4b47      	ldr	r3, [pc, #284]	; (8000798 <appTask+0x2bc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f003 0302 	and.w	r3, r3, #2
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	72bb      	strb	r3, [r7, #10]
	bool B = ((testCount>>2) & 1) == 1;
 800068a:	4b43      	ldr	r3, [pc, #268]	; (8000798 <appTask+0x2bc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	2b00      	cmp	r3, #0
 8000694:	bf14      	ite	ne
 8000696:	2301      	movne	r3, #1
 8000698:	2300      	moveq	r3, #0
 800069a:	727b      	strb	r3, [r7, #9]
	for(int i=0; i<5; i++){
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
 80006a0:	e044      	b.n	800072c <appTask+0x250>
		if (D_Slider_GetSensorData(0,i) != 0){
 80006a2:	69f9      	ldr	r1, [r7, #28]
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 fdb1 	bl	800120c <D_Slider_GetSensorData>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d019      	beq.n	80006e4 <appTask+0x208>
			SliderLEDDataR[i][0] = true;
 80006b0:	493f      	ldr	r1, [pc, #252]	; (80007b0 <appTask+0x2d4>)
 80006b2:	69fa      	ldr	r2, [r7, #28]
 80006b4:	4613      	mov	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
			SliderLEDDataR[i][1] = true;
 80006c0:	493b      	ldr	r1, [pc, #236]	; (80007b0 <appTask+0x2d4>)
 80006c2:	69fa      	ldr	r2, [r7, #28]
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	3301      	adds	r3, #1
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
			SliderLEDDataR[i][2] = true;
 80006d2:	4937      	ldr	r1, [pc, #220]	; (80007b0 <appTask+0x2d4>)
 80006d4:	69fa      	ldr	r2, [r7, #28]
 80006d6:	4613      	mov	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4413      	add	r3, r2
 80006dc:	440b      	add	r3, r1
 80006de:	3302      	adds	r3, #2
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
		}
		if (D_Slider_GetSensorData(1,i) != 0){
 80006e4:	69f9      	ldr	r1, [r7, #28]
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 fd90 	bl	800120c <D_Slider_GetSensorData>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d019      	beq.n	8000726 <appTask+0x24a>
			SliderLEDDataL[i][0] = true;
 80006f2:	4930      	ldr	r1, [pc, #192]	; (80007b4 <appTask+0x2d8>)
 80006f4:	69fa      	ldr	r2, [r7, #28]
 80006f6:	4613      	mov	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4413      	add	r3, r2
 80006fc:	440b      	add	r3, r1
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
			SliderLEDDataL[i][1] = true;
 8000702:	492c      	ldr	r1, [pc, #176]	; (80007b4 <appTask+0x2d8>)
 8000704:	69fa      	ldr	r2, [r7, #28]
 8000706:	4613      	mov	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4413      	add	r3, r2
 800070c:	440b      	add	r3, r1
 800070e:	3301      	adds	r3, #1
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
			SliderLEDDataL[i][2] = true;
 8000714:	4927      	ldr	r1, [pc, #156]	; (80007b4 <appTask+0x2d8>)
 8000716:	69fa      	ldr	r2, [r7, #28]
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	440b      	add	r3, r1
 8000720:	3302      	adds	r3, #2
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<5; i++){
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3301      	adds	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	2b04      	cmp	r3, #4
 8000730:	ddb7      	ble.n	80006a2 <appTask+0x1c6>
	SliderLEDDataL[0][2] = testCount1 % 2 == 0;
	SliderLEDDataL[3][0] = testCount1 % 2 == 0;
	SliderLEDDataL[3][2] = testCount1 % 2 == 0;
	SliderLEDDataL[2][0] = testCount1 % 2 == 0;
	*/
	D_Slider_SetColorData(SliderLEDDataR, SliderLEDDataL);
 8000732:	4920      	ldr	r1, [pc, #128]	; (80007b4 <appTask+0x2d8>)
 8000734:	481e      	ldr	r0, [pc, #120]	; (80007b0 <appTask+0x2d4>)
 8000736:	f000 fe1b 	bl	8001370 <D_Slider_SetColorData>
		HAL_UART_Transmit(&huart1, (uint8_t*)controllerSendData, 4, 10);
	}
	*/

	//マイコンについてるボタンかスタートボタンが押されたらボール発射
	if(IO_READ_USERBUTTON() && _userButton){
 800073a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073e:	481e      	ldr	r0, [pc, #120]	; (80007b8 <appTask+0x2dc>)
 8000740:	f000 ff78 	bl	8001634 <D_GPIO_Read>
 8000744:	4603      	mov	r3, r0
 8000746:	f083 0301 	eor.w	r3, r3, #1
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00b      	beq.n	8000768 <appTask+0x28c>
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <appTask+0x2e0>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d007      	beq.n	8000768 <appTask+0x28c>
		_userButton = false;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <appTask+0x2e0>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
		testCount++;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <appTask+0x2bc>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <appTask+0x2bc>)
 8000766:	6013      	str	r3, [r2, #0]
		int checkSum = 256 - (int)dataSum;
		controllerSendData[100] = (uint8_t)checkSum;
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)controllerSendData, 101);
		*/
	}
	if(!IO_READ_USERBUTTON()){
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	4812      	ldr	r0, [pc, #72]	; (80007b8 <appTask+0x2dc>)
 800076e:	f000 ff61 	bl	8001634 <D_GPIO_Read>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d002      	beq.n	800077e <appTask+0x2a2>
		_userButton = true;
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <appTask+0x2e0>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
		IO_RESET_USERLED();
	}
	*/
	//testMode---------------------------------------------------

	for(int i=0; i<16; i++){
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	e031      	b.n	80007e8 <appTask+0x30c>
 8000784:	20000220 	.word	0x20000220
 8000788:	200001c4 	.word	0x200001c4
 800078c:	200001c8 	.word	0x200001c8
 8000790:	200001cc 	.word	0x200001cc
 8000794:	20000194 	.word	0x20000194
 8000798:	20000000 	.word	0x20000000
 800079c:	200001d0 	.word	0x200001d0
 80007a0:	20000004 	.word	0x20000004
 80007a4:	200001d4 	.word	0x200001d4
 80007a8:	20000008 	.word	0x20000008
 80007ac:	200001d8 	.word	0x200001d8
 80007b0:	200001a4 	.word	0x200001a4
 80007b4:	200001b4 	.word	0x200001b4
 80007b8:	40020800 	.word	0x40020800
 80007bc:	200001dc 	.word	0x200001dc
		if(rcvData_UART[i] != 0) rcvJudge[i] = rcvData_UART[i];
 80007c0:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <appTask+0x324>)
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	4413      	add	r3, r2
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d009      	beq.n	80007e2 <appTask+0x306>
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <appTask+0x324>)
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4619      	mov	r1, r3
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <appTask+0x328>)
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<16; i++){
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	3301      	adds	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	2b0f      	cmp	r3, #15
 80007ec:	dde8      	ble.n	80007c0 <appTask+0x2e4>
	}

	//デバッグ用
	int16_t debug_bits = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	80fb      	strh	r3, [r7, #6]
	debug_bits &= 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	80fb      	strh	r3, [r7, #6]
	//D_Mess_printf("%08b\n", ownHold_Pocket);
	//D_Mess_printf("%08b\n", allHold_Pocket);
	//D_Mess_printf("processState: ,%2d\n", processState);
	//D_Mess_printf("PC: ,%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n",rcvData_UART[0],rcvData_UART[1],rcvData_UART[2],rcvData_UART[3],rcvData_UART[4],rcvData_UART[5],rcvData_UART[6],rcvData_UART[7]);

	return 0;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000174 	.word	0x20000174
 8000804:	200001e0 	.word	0x200001e0

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f000 ff71 	bl	80016f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f82d 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000816:	f000 f92f 	bl	8000a78 <MX_GPIO_Init>
  MX_DMA_Init();
 800081a:	f000 f8e7 	bl	80009ec <MX_DMA_Init>
  MX_USART1_UART_Init();
 800081e:	f000 f891 	bl	8000944 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000822:	f000 f8b9 	bl	8000998 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000826:	f007 fc43 	bl	80080b0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 800082a:	f7ff fe4f 	bl	80004cc <appInit>
	  uint8_t modifiers;
	  uint8_t reserved;
	  uint8_t key[38];
  };
  struct keyboardHID_t keyboardHID;
  keyboardHID.modifiers = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	713b      	strb	r3, [r7, #4]
  keyboardHID.reserved = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	717b      	strb	r3, [r7, #5]
  for(int i = 0 ;i < 38; i++){
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800083a:	e007      	b.n	800084c <main+0x44>
	  keyboardHID.key[i] = 0;
 800083c:	1dba      	adds	r2, r7, #6
 800083e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000840:	4413      	add	r3, r2
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ;i < 38; i++){
 8000846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000848:	3301      	adds	r3, #1
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800084c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800084e:	2b25      	cmp	r3, #37	; 0x25
 8000850:	ddf4      	ble.n	800083c <main+0x34>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appTask();
 8000852:	f7ff fe43 	bl	80004dc <appTask>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 0){
 8000856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <main+0x64>)
 800085c:	f001 fe78 	bl	8002550 <HAL_GPIO_ReadPin>
		  for(int i = 0 ;i < 38; i++){
			  keyboardHID.key[i] = 0;
		  }
	  }
	  */
	  D_Slider_SystickUpdate();
 8000860:	f000 fbe8 	bl	8001034 <D_Slider_SystickUpdate>
	  //D_USBHID_SysticUpdate();
	  D_Mess_flush();
 8000864:	f000 fefc 	bl	8001660 <D_Mess_flush>
	  appTask();
 8000868:	e7f3      	b.n	8000852 <main+0x4a>
 800086a:	bf00      	nop
 800086c:	40020800 	.word	0x40020800

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	; 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f008 f884 	bl	800898c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b28      	ldr	r3, [pc, #160]	; (800093c <SystemClock_Config+0xcc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a27      	ldr	r2, [pc, #156]	; (800093c <SystemClock_Config+0xcc>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <SystemClock_Config+0xcc>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <SystemClock_Config+0xd0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008bc:	4a20      	ldr	r2, [pc, #128]	; (8000940 <SystemClock_Config+0xd0>)
 80008be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <SystemClock_Config+0xd0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008e8:	23c0      	movs	r3, #192	; 0xc0
 80008ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80008ec:	2306      	movs	r3, #6
 80008ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008f0:	2308      	movs	r3, #8
 80008f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 ffc5 	bl	8003888 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000904:	f000 f95e 	bl	8000bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	230f      	movs	r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090c:	2302      	movs	r3, #2
 800090e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	2102      	movs	r1, #2
 8000924:	4618      	mov	r0, r3
 8000926:	f003 fa27 	bl	8003d78 <HAL_RCC_ClockConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000930:	f000 f948 	bl	8000bc4 <Error_Handler>
  }
}
 8000934:	bf00      	nop
 8000936:	3750      	adds	r7, #80	; 0x50
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_USART1_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800097c:	f003 fbf8 	bl	8004170 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 f91d 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000087c 	.word	0x2000087c
 8000994:	40011000 	.word	0x40011000

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_USART2_UART_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009d0:	f003 fbce 	bl	8004170 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 f8f3 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200008c0 	.word	0x200008c0
 80009e8:	40004400 	.word	0x40004400

080009ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_DMA_Init+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <MX_DMA_Init+0x88>)
 80009fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_DMA_Init+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_DMA_Init+0x88>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <MX_DMA_Init+0x88>)
 8000a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_DMA_Init+0x88>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2010      	movs	r0, #16
 8000a30:	f000 ffd1 	bl	80019d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a34:	2010      	movs	r0, #16
 8000a36:	f000 ffea 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2011      	movs	r0, #17
 8000a40:	f000 ffc9 	bl	80019d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a44:	2011      	movs	r0, #17
 8000a46:	f000 ffe2 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	203a      	movs	r0, #58	; 0x3a
 8000a50:	f000 ffc1 	bl	80019d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a54:	203a      	movs	r0, #58	; 0x3a
 8000a56:	f000 ffda 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2046      	movs	r0, #70	; 0x46
 8000a60:	f000 ffb9 	bl	80019d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000a64:	2046      	movs	r0, #70	; 0x46
 8000a66:	f000 ffd2 	bl	8001a0e <HAL_NVIC_EnableIRQ>

}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <MX_GPIO_Init+0xd0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a2c      	ldr	r2, [pc, #176]	; (8000b48 <MX_GPIO_Init+0xd0>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <MX_GPIO_Init+0xd0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <MX_GPIO_Init+0xd0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <MX_GPIO_Init+0xd0>)
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <MX_GPIO_Init+0xd0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_GPIO_Init+0xd0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <MX_GPIO_Init+0xd0>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_GPIO_Init+0xd0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_GPIO_Init+0xd0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <MX_GPIO_Init+0xd0>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_GPIO_Init+0xd0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2120      	movs	r1, #32
 8000b02:	4812      	ldr	r0, [pc, #72]	; (8000b4c <MX_GPIO_Init+0xd4>)
 8000b04:	f001 fd3c 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_GPIO_Init+0xd8>)
 8000b20:	f001 fb92 	bl	8002248 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b24:	2320      	movs	r3, #32
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_GPIO_Init+0xd4>)
 8000b3c:	f001 fb84 	bl	8002248 <HAL_GPIO_Init>

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000
 8000b50:	40020800 	.word	0x40020800

08000b54 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_UART_TxCpltCallback+0x30>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d102      	bne.n	8000b6c <HAL_UART_TxCpltCallback+0x18>
	  D_Mess_TransitionCompletedCallBack();
 8000b66:	f000 fdad 	bl	80016c4 <D_Mess_TransitionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_TransitionCompletedCallBack();
  }
}
 8000b6a:	e006      	b.n	8000b7a <HAL_UART_TxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <HAL_UART_TxCpltCallback+0x34>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_UART_TxCpltCallback+0x26>
	  D_Slider_TransitionCompletedCallBack();
 8000b76:	f000 fd23 	bl	80015c0 <D_Slider_TransitionCompletedCallBack>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40004400 	.word	0x40004400
 8000b88:	40011000 	.word	0x40011000

08000b8c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_UART_RxCpltCallback+0x30>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d102      	bne.n	8000ba4 <HAL_UART_RxCpltCallback+0x18>
	  D_Mess_ReceptionCompletedCallBack();
 8000b9e:	f000 fd9d 	bl	80016dc <D_Mess_ReceptionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_ReceptionCompletedCallBack();
  }
}
 8000ba2:	e006      	b.n	8000bb2 <HAL_UART_RxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <HAL_UART_RxCpltCallback+0x34>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d101      	bne.n	8000bb2 <HAL_UART_RxCpltCallback+0x26>
	  D_Slider_ReceptionCompletedCallBack();
 8000bae:	f000 fd13 	bl	80015d8 <D_Slider_ReceptionCompletedCallBack>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40004400 	.word	0x40004400
 8000bc0:	40011000 	.word	0x40011000

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c0e:	2007      	movs	r0, #7
 8000c10:	f000 fed6 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a97      	ldr	r2, [pc, #604]	; (8000e9c <HAL_UART_MspInit+0x27c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	f040 8092 	bne.w	8000d68 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	4b95      	ldr	r3, [pc, #596]	; (8000ea0 <HAL_UART_MspInit+0x280>)
 8000c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4c:	4a94      	ldr	r2, [pc, #592]	; (8000ea0 <HAL_UART_MspInit+0x280>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6453      	str	r3, [r2, #68]	; 0x44
 8000c54:	4b92      	ldr	r3, [pc, #584]	; (8000ea0 <HAL_UART_MspInit+0x280>)
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	4b8e      	ldr	r3, [pc, #568]	; (8000ea0 <HAL_UART_MspInit+0x280>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	4a8d      	ldr	r2, [pc, #564]	; (8000ea0 <HAL_UART_MspInit+0x280>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c70:	4b8b      	ldr	r3, [pc, #556]	; (8000ea0 <HAL_UART_MspInit+0x280>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c7c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c8e:	2307      	movs	r3, #7
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4882      	ldr	r0, [pc, #520]	; (8000ea4 <HAL_UART_MspInit+0x284>)
 8000c9a:	f001 fad5 	bl	8002248 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000c9e:	4b82      	ldr	r3, [pc, #520]	; (8000ea8 <HAL_UART_MspInit+0x288>)
 8000ca0:	4a82      	ldr	r2, [pc, #520]	; (8000eac <HAL_UART_MspInit+0x28c>)
 8000ca2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000ca4:	4b80      	ldr	r3, [pc, #512]	; (8000ea8 <HAL_UART_MspInit+0x288>)
 8000ca6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000caa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cac:	4b7e      	ldr	r3, [pc, #504]	; (8000ea8 <HAL_UART_MspInit+0x288>)
 8000cae:	2240      	movs	r2, #64	; 0x40
 8000cb0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb2:	4b7d      	ldr	r3, [pc, #500]	; (8000ea8 <HAL_UART_MspInit+0x288>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb8:	4b7b      	ldr	r3, [pc, #492]	; (8000ea8 <HAL_UART_MspInit+0x288>)
 8000cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cbe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc0:	4b79      	ldr	r3, [pc, #484]	; (8000ea8 <HAL_UART_MspInit+0x288>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cc6:	4b78      	ldr	r3, [pc, #480]	; (8000ea8 <HAL_UART_MspInit+0x288>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000ccc:	4b76      	ldr	r3, [pc, #472]	; (8000ea8 <HAL_UART_MspInit+0x288>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cd2:	4b75      	ldr	r3, [pc, #468]	; (8000ea8 <HAL_UART_MspInit+0x288>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cd8:	4b73      	ldr	r3, [pc, #460]	; (8000ea8 <HAL_UART_MspInit+0x288>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000cde:	4872      	ldr	r0, [pc, #456]	; (8000ea8 <HAL_UART_MspInit+0x288>)
 8000ce0:	f000 feb0 	bl	8001a44 <HAL_DMA_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000cea:	f7ff ff6b 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a6d      	ldr	r2, [pc, #436]	; (8000ea8 <HAL_UART_MspInit+0x288>)
 8000cf2:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf4:	4a6c      	ldr	r2, [pc, #432]	; (8000ea8 <HAL_UART_MspInit+0x288>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000cfa:	4b6d      	ldr	r3, [pc, #436]	; (8000eb0 <HAL_UART_MspInit+0x290>)
 8000cfc:	4a6d      	ldr	r2, [pc, #436]	; (8000eb4 <HAL_UART_MspInit+0x294>)
 8000cfe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d00:	4b6b      	ldr	r3, [pc, #428]	; (8000eb0 <HAL_UART_MspInit+0x290>)
 8000d02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d06:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d08:	4b69      	ldr	r3, [pc, #420]	; (8000eb0 <HAL_UART_MspInit+0x290>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0e:	4b68      	ldr	r3, [pc, #416]	; (8000eb0 <HAL_UART_MspInit+0x290>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d14:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <HAL_UART_MspInit+0x290>)
 8000d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d1a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d1c:	4b64      	ldr	r3, [pc, #400]	; (8000eb0 <HAL_UART_MspInit+0x290>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d22:	4b63      	ldr	r3, [pc, #396]	; (8000eb0 <HAL_UART_MspInit+0x290>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d28:	4b61      	ldr	r3, [pc, #388]	; (8000eb0 <HAL_UART_MspInit+0x290>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d2e:	4b60      	ldr	r3, [pc, #384]	; (8000eb0 <HAL_UART_MspInit+0x290>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <HAL_UART_MspInit+0x290>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d3a:	485d      	ldr	r0, [pc, #372]	; (8000eb0 <HAL_UART_MspInit+0x290>)
 8000d3c:	f000 fe82 	bl	8001a44 <HAL_DMA_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000d46:	f7ff ff3d 	bl	8000bc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a58      	ldr	r2, [pc, #352]	; (8000eb0 <HAL_UART_MspInit+0x290>)
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
 8000d50:	4a57      	ldr	r2, [pc, #348]	; (8000eb0 <HAL_UART_MspInit+0x290>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2025      	movs	r0, #37	; 0x25
 8000d5c:	f000 fe3b 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d60:	2025      	movs	r0, #37	; 0x25
 8000d62:	f000 fe54 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d66:	e095      	b.n	8000e94 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a52      	ldr	r2, [pc, #328]	; (8000eb8 <HAL_UART_MspInit+0x298>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	f040 8090 	bne.w	8000e94 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	4b49      	ldr	r3, [pc, #292]	; (8000ea0 <HAL_UART_MspInit+0x280>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4a48      	ldr	r2, [pc, #288]	; (8000ea0 <HAL_UART_MspInit+0x280>)
 8000d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d82:	6413      	str	r3, [r2, #64]	; 0x40
 8000d84:	4b46      	ldr	r3, [pc, #280]	; (8000ea0 <HAL_UART_MspInit+0x280>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <HAL_UART_MspInit+0x280>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a41      	ldr	r2, [pc, #260]	; (8000ea0 <HAL_UART_MspInit+0x280>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b3f      	ldr	r3, [pc, #252]	; (8000ea0 <HAL_UART_MspInit+0x280>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dac:	230c      	movs	r3, #12
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4837      	ldr	r0, [pc, #220]	; (8000ea4 <HAL_UART_MspInit+0x284>)
 8000dc8:	f001 fa3e 	bl	8002248 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000dcc:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <HAL_UART_MspInit+0x29c>)
 8000dce:	4a3c      	ldr	r2, [pc, #240]	; (8000ec0 <HAL_UART_MspInit+0x2a0>)
 8000dd0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000dd2:	4b3a      	ldr	r3, [pc, #232]	; (8000ebc <HAL_UART_MspInit+0x29c>)
 8000dd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dda:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <HAL_UART_MspInit+0x29c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000de0:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <HAL_UART_MspInit+0x29c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000de6:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <HAL_UART_MspInit+0x29c>)
 8000de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dee:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <HAL_UART_MspInit+0x29c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000df4:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <HAL_UART_MspInit+0x29c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000dfa:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <HAL_UART_MspInit+0x29c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e00:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <HAL_UART_MspInit+0x29c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e06:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <HAL_UART_MspInit+0x29c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e0c:	482b      	ldr	r0, [pc, #172]	; (8000ebc <HAL_UART_MspInit+0x29c>)
 8000e0e:	f000 fe19 	bl	8001a44 <HAL_DMA_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8000e18:	f7ff fed4 	bl	8000bc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a27      	ldr	r2, [pc, #156]	; (8000ebc <HAL_UART_MspInit+0x29c>)
 8000e20:	639a      	str	r2, [r3, #56]	; 0x38
 8000e22:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <HAL_UART_MspInit+0x29c>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <HAL_UART_MspInit+0x2a4>)
 8000e2a:	4a27      	ldr	r2, [pc, #156]	; (8000ec8 <HAL_UART_MspInit+0x2a8>)
 8000e2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <HAL_UART_MspInit+0x2a4>)
 8000e30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e34:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e36:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <HAL_UART_MspInit+0x2a4>)
 8000e38:	2240      	movs	r2, #64	; 0x40
 8000e3a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <HAL_UART_MspInit+0x2a4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <HAL_UART_MspInit+0x2a4>)
 8000e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e48:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <HAL_UART_MspInit+0x2a4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_UART_MspInit+0x2a4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_UART_MspInit+0x2a4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_UART_MspInit+0x2a4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_UART_MspInit+0x2a4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e68:	4816      	ldr	r0, [pc, #88]	; (8000ec4 <HAL_UART_MspInit+0x2a4>)
 8000e6a:	f000 fdeb 	bl	8001a44 <HAL_DMA_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8000e74:	f7ff fea6 	bl	8000bc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <HAL_UART_MspInit+0x2a4>)
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e7e:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <HAL_UART_MspInit+0x2a4>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	2026      	movs	r0, #38	; 0x26
 8000e8a:	f000 fda4 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e8e:	2026      	movs	r0, #38	; 0x26
 8000e90:	f000 fdbd 	bl	8001a0e <HAL_NVIC_EnableIRQ>
}
 8000e94:	bf00      	nop
 8000e96:	3730      	adds	r7, #48	; 0x30
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	2000075c 	.word	0x2000075c
 8000eac:	400264b8 	.word	0x400264b8
 8000eb0:	200007bc 	.word	0x200007bc
 8000eb4:	40026440 	.word	0x40026440
 8000eb8:	40004400 	.word	0x40004400
 8000ebc:	200006fc 	.word	0x200006fc
 8000ec0:	40026088 	.word	0x40026088
 8000ec4:	2000081c 	.word	0x2000081c
 8000ec8:	400260a0 	.word	0x400260a0

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 fc3e 	bl	8001798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <SysTick_Handler+0x18>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	4a02      	ldr	r2, [pc, #8]	; (8000f2c <SysTick_Handler+0x18>)
 8000f24:	6013      	str	r3, [r2, #0]
  //D_Slider_SystickUpdate();
  //D_USBHID_SysticUpdate();
  /* USER CODE END SysTick_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000220 	.word	0x20000220

08000f30 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <DMA1_Stream5_IRQHandler+0x10>)
 8000f36:	f000 ff1d 	bl	8001d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200006fc 	.word	0x200006fc

08000f44 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <DMA1_Stream6_IRQHandler+0x10>)
 8000f4a:	f000 ff13 	bl	8001d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000081c 	.word	0x2000081c

08000f58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <USART1_IRQHandler+0x10>)
 8000f5e:	f003 fa03 	bl	8004368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000087c 	.word	0x2000087c

08000f6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <USART2_IRQHandler+0x10>)
 8000f72:	f003 f9f9 	bl	8004368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200008c0 	.word	0x200008c0

08000f80 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA2_Stream2_IRQHandler+0x10>)
 8000f86:	f000 fef5 	bl	8001d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200007bc 	.word	0x200007bc

08000f94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <OTG_FS_IRQHandler+0x10>)
 8000f9a:	f001 fc5a 	bl	8002852 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000de4 	.word	0x20000de4

08000fa8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <DMA2_Stream7_IRQHandler+0x10>)
 8000fae:	f000 fee1 	bl	8001d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000075c 	.word	0x2000075c

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001018 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fe6:	490e      	ldr	r1, [pc, #56]	; (8001020 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ffc:	4c0b      	ldr	r4, [pc, #44]	; (800102c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800100a:	f7ff ffd7 	bl	8000fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800100e:	f007 fc99 	bl	8008944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fbf9 	bl	8000808 <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001018:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001024:	08008a2c 	.word	0x08008a2c
  ldr r2, =_sbss
 8001028:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 800102c:	200011ec 	.word	0x200011ec

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>
	...

08001034 <D_Slider_SystickUpdate>:
static bool _send = false;

static bool _firstSend = false;
static int receiveFaultCount = 0;

void D_Slider_SystickUpdate(){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	static uint32_t sndTime = 0;
	static uint32_t rcvTime = 0;

	static uint8_t count = 0;

	sndTime += G_System_counter - recent_System_counter;
 8001038:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <D_Slider_SystickUpdate+0xb8>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <D_Slider_SystickUpdate+0xbc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	1ad2      	subs	r2, r2, r3
 8001042:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <D_Slider_SystickUpdate+0xc0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a2a      	ldr	r2, [pc, #168]	; (80010f4 <D_Slider_SystickUpdate+0xc0>)
 800104a:	6013      	str	r3, [r2, #0]
	rcvTime += G_System_counter - recent_System_counter;
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <D_Slider_SystickUpdate+0xb8>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <D_Slider_SystickUpdate+0xbc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	1ad2      	subs	r2, r2, r3
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <D_Slider_SystickUpdate+0xc4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <D_Slider_SystickUpdate+0xc4>)
 800105e:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_counter;
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <D_Slider_SystickUpdate+0xb8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <D_Slider_SystickUpdate+0xbc>)
 8001066:	6013      	str	r3, [r2, #0]

	if(!_firstSend){
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <D_Slider_SystickUpdate+0xc8>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	f083 0301 	eor.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <D_Slider_SystickUpdate+0x4e>
		_firstSend = true;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <D_Slider_SystickUpdate+0xc8>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
		D_Slider_Start();
 800107c:	f000 f84a 	bl	8001114 <D_Slider_Start>
		//D_Slider_InitColorData();
		return;
 8001080:	e032      	b.n	80010e8 <D_Slider_SystickUpdate+0xb4>
	}
	if(sndTime >= SLIDER_SEND_INTERVAL){
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <D_Slider_SystickUpdate+0xc0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b13      	cmp	r3, #19
 8001088:	d91f      	bls.n	80010ca <D_Slider_SystickUpdate+0x96>
		sndTime = 0;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <D_Slider_SystickUpdate+0xc0>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
		count++;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <D_Slider_SystickUpdate+0xcc>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <D_Slider_SystickUpdate+0xcc>)
 800109a:	701a      	strb	r2, [r3, #0]
		if(count == 1){
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <D_Slider_SystickUpdate+0xcc>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d107      	bne.n	80010b4 <D_Slider_SystickUpdate+0x80>
			D_Slider_Send((uint8_t*)SendData, COLORSEND_LENGTH + AdditionalPacket);
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <D_Slider_SystickUpdate+0xd0>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	330a      	adds	r3, #10
 80010aa:	4619      	mov	r1, r3
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <D_Slider_SystickUpdate+0xd4>)
 80010ae:	f000 f861 	bl	8001174 <D_Slider_Send>
 80010b2:	e003      	b.n	80010bc <D_Slider_SystickUpdate+0x88>
		}else{
			D_Slider_Send((uint8_t*)SensorGetSendData, SENSORGET_LENGTH);
 80010b4:	2106      	movs	r1, #6
 80010b6:	4815      	ldr	r0, [pc, #84]	; (800110c <D_Slider_SystickUpdate+0xd8>)
 80010b8:	f000 f85c 	bl	8001174 <D_Slider_Send>
		}
		if(count >= 5) count = 0;
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <D_Slider_SystickUpdate+0xcc>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d902      	bls.n	80010ca <D_Slider_SystickUpdate+0x96>
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <D_Slider_SystickUpdate+0xcc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
	}

	if(rcvTime >= SLIDER_RECEIVE_INTERVAL){
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <D_Slider_SystickUpdate+0xc4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b09      	cmp	r3, #9
 80010d0:	d90a      	bls.n	80010e8 <D_Slider_SystickUpdate+0xb4>
		rcvTime = 0;
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <D_Slider_SystickUpdate+0xc4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
		D_Slider_Receive((uint8_t*)RecvData, 10);
 80010d8:	210a      	movs	r1, #10
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <D_Slider_SystickUpdate+0xdc>)
 80010dc:	f000 f872 	bl	80011c4 <D_Slider_Receive>
		D_Slider_CheckData((uint8_t*)RecvData, 10);
 80010e0:	210a      	movs	r1, #10
 80010e2:	480b      	ldr	r0, [pc, #44]	; (8001110 <D_Slider_SystickUpdate+0xdc>)
 80010e4:	f000 f8ae 	bl	8001244 <D_Slider_CheckData>
	if(receiveFaultCount >= 30){
		D_Slider_Start();
		receiveFaultCount = 0;
	}
	*/
}
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000220 	.word	0x20000220
 80010f0:	200002d4 	.word	0x200002d4
 80010f4:	200002d8 	.word	0x200002d8
 80010f8:	200002dc 	.word	0x200002dc
 80010fc:	200002d1 	.word	0x200002d1
 8001100:	200002e0 	.word	0x200002e0
 8001104:	20000264 	.word	0x20000264
 8001108:	20000224 	.word	0x20000224
 800110c:	20000244 	.word	0x20000244
 8001110:	20000268 	.word	0x20000268

08001114 <D_Slider_Start>:

void D_Slider_Start(){
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
	SensorGetSendData[0] = FIRSTBYTE;
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <D_Slider_Start+0x5c>)
 800111c:	22e0      	movs	r2, #224	; 0xe0
 800111e:	701a      	strb	r2, [r3, #0]
	SensorGetSendData[1] = ADDRESS;
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <D_Slider_Start+0x5c>)
 8001122:	2201      	movs	r2, #1
 8001124:	705a      	strb	r2, [r3, #1]
	SensorGetSendData[2] = SENSORGET_SEQNUM;
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <D_Slider_Start+0x5c>)
 8001128:	2201      	movs	r2, #1
 800112a:	709a      	strb	r2, [r3, #2]
	SensorGetSendData[3] = SENSORGET_DATANUM;
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <D_Slider_Start+0x5c>)
 800112e:	2201      	movs	r2, #1
 8001130:	70da      	strb	r2, [r3, #3]
	SensorGetSendData[4] = SENSORGET_CMD;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <D_Slider_Start+0x5c>)
 8001134:	2220      	movs	r2, #32
 8001136:	711a      	strb	r2, [r3, #4]
	uint8_t dataSum = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 800113c:	2301      	movs	r3, #1
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	e009      	b.n	8001156 <D_Slider_Start+0x42>
		dataSum += SensorGetSendData[i];
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <D_Slider_Start+0x5c>)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	4413      	add	r3, r2
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	4413      	add	r3, r2
 800114e:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2b04      	cmp	r3, #4
 800115a:	ddf2      	ble.n	8001142 <D_Slider_Start+0x2e>
	}
	SensorGetSendData[SENSORGET_LENGTH-1] = (uint8_t)dataSum;
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <D_Slider_Start+0x5c>)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	7153      	strb	r3, [r2, #5]
	data[3] = 0xfe;
	had_completed_tx = true;
	had_completed_rx = true;
	D_Slider_Send((uint8_t*)data, 4);
	*/
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000244 	.word	0x20000244

08001174 <D_Slider_Send>:

int D_Slider_Send(uint8_t* data, int length){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
	if(!had_completed_tx){
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <D_Slider_Send+0x44>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f083 0301 	eor.w	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <D_Slider_Send+0x20>
		return -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001192:	e00d      	b.n	80011b0 <D_Slider_Send+0x3c>
	}
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data, length);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4807      	ldr	r0, [pc, #28]	; (80011bc <D_Slider_Send+0x48>)
 800119e:	f003 f835 	bl	800420c <HAL_UART_Transmit_DMA>
	_send = true;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <D_Slider_Send+0x4c>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
	had_completed_tx = false;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <D_Slider_Send+0x44>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
	return 0;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000010 	.word	0x20000010
 80011bc:	2000087c 	.word	0x2000087c
 80011c0:	200002d0 	.word	0x200002d0

080011c4 <D_Slider_Receive>:

int D_Slider_Receive(uint8_t* data, int length){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	if(!had_completed_rx){
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <D_Slider_Receive+0x40>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f083 0301 	eor.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <D_Slider_Receive+0x20>
		return -1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011e2:	e00a      	b.n	80011fa <D_Slider_Receive+0x36>
	}
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)data, length);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <D_Slider_Receive+0x44>)
 80011ee:	f003 f88b 	bl	8004308 <HAL_UART_Receive_DMA>
	had_completed_rx = false;
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <D_Slider_Receive+0x40>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
	return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000011 	.word	0x20000011
 8001208:	2000087c 	.word	0x2000087c

0800120c <D_Slider_GetSensorData>:

int D_Slider_GetSensorData(int side, int num){
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
	if(side == 0){
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d104      	bne.n	8001226 <D_Slider_GetSensorData+0x1a>
		return SensorCountR[num];
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <D_Slider_GetSensorData+0x30>)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001224:	e003      	b.n	800122e <D_Slider_GetSensorData+0x22>
	}else{
		return SensorCountL[num];
 8001226:	4a06      	ldr	r2, [pc, #24]	; (8001240 <D_Slider_GetSensorData+0x34>)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	}
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200002a8 	.word	0x200002a8
 8001240:	200002bc 	.word	0x200002bc

08001244 <D_Slider_CheckData>:

void D_Slider_CheckData(uint8_t* data, int length){
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2be0      	cmp	r3, #224	; 0xe0
 8001254:	d15c      	bne.n	8001310 <D_Slider_CheckData+0xcc>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3301      	adds	r3, #1
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d157      	bne.n	8001310 <D_Slider_CheckData+0xcc>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3302      	adds	r3, #2
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d152      	bne.n	8001310 <D_Slider_CheckData+0xcc>
	uint8_t sum = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 800126e:	2301      	movs	r3, #1
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	e009      	b.n	8001288 <D_Slider_CheckData+0x44>
		sum += data[i];
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	4413      	add	r3, r2
 8001280:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	3301      	adds	r3, #1
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	2b08      	cmp	r3, #8
 800128c:	ddf2      	ble.n	8001274 <D_Slider_CheckData+0x30>
	}
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3309      	adds	r3, #9
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	7dfa      	ldrb	r2, [r7, #23]
 8001296:	429a      	cmp	r2, r3
 8001298:	d13c      	bne.n	8001314 <D_Slider_CheckData+0xd0>
	for(int i=0; i<5; i++){
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	e016      	b.n	80012ce <D_Slider_CheckData+0x8a>
		if(((data[7]>>i) & 1) == 1) SensorCountL[i]++;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3307      	adds	r3, #7
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	fa42 f303 	asr.w	r3, r2, r3
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d008      	beq.n	80012c8 <D_Slider_CheckData+0x84>
 80012b6:	4a1a      	ldr	r2, [pc, #104]	; (8001320 <D_Slider_CheckData+0xdc>)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	4917      	ldr	r1, [pc, #92]	; (8001320 <D_Slider_CheckData+0xdc>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	dde5      	ble.n	80012a0 <D_Slider_CheckData+0x5c>
	}
	for(int i=0; i<5; i++){
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	e016      	b.n	8001308 <D_Slider_CheckData+0xc4>
		if(((data[8]>>i) & 1) == 1) SensorCountR[i]++;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3308      	adds	r3, #8
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	fa42 f303 	asr.w	r3, r2, r3
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d008      	beq.n	8001302 <D_Slider_CheckData+0xbe>
 80012f0:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <D_Slider_CheckData+0xe0>)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	490a      	ldr	r1, [pc, #40]	; (8001324 <D_Slider_CheckData+0xe0>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	3301      	adds	r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2b04      	cmp	r3, #4
 800130c:	dde5      	ble.n	80012da <D_Slider_CheckData+0x96>
 800130e:	e002      	b.n	8001316 <D_Slider_CheckData+0xd2>
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 8001310:	bf00      	nop
 8001312:	e000      	b.n	8001316 <D_Slider_CheckData+0xd2>
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 8001314:	bf00      	nop
	}
}
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	200002bc 	.word	0x200002bc
 8001324:	200002a8 	.word	0x200002a8

08001328 <D_Slider_CheckSum>:

bool D_Slider_CheckSum(uint8_t* data, int length){
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	uint8_t sum = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<length; i++){
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	e009      	b.n	8001350 <D_Slider_CheckSum+0x28>
		sum += data[i];
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	781a      	ldrb	r2, [r3, #0]
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	4413      	add	r3, r2
 8001348:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<length; i++){
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	3301      	adds	r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbf1      	blt.n	800133c <D_Slider_CheckSum+0x14>
	}
	if(sum == 0){
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <D_Slider_CheckSum+0x3a>
		return true;
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <D_Slider_CheckSum+0x3c>
	}else{
		return false;
 8001362:	2300      	movs	r3, #0
	}
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <D_Slider_SetColorData>:
			returnData[i] = false;
		}
	}
}

void D_Slider_SetColorData(bool setColorR[][3], bool setColorL[][3]){
 8001370:	b4b0      	push	{r4, r5, r7}
 8001372:	b08b      	sub	sp, #44	; 0x2c
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	if (!_send) return;
 800137a:	4b8d      	ldr	r3, [pc, #564]	; (80015b0 <D_Slider_SetColorData+0x240>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	f083 0301 	eor.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	f040 810e 	bne.w	80015a6 <D_Slider_SetColorData+0x236>
	_send = false;
 800138a:	4b89      	ldr	r3, [pc, #548]	; (80015b0 <D_Slider_SetColorData+0x240>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
	SendData[0] = FIRSTBYTE;
 8001390:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <D_Slider_SetColorData+0x244>)
 8001392:	22e0      	movs	r2, #224	; 0xe0
 8001394:	701a      	strb	r2, [r3, #0]
	SendData[1] = ADDRESS;
 8001396:	4b87      	ldr	r3, [pc, #540]	; (80015b4 <D_Slider_SetColorData+0x244>)
 8001398:	2201      	movs	r2, #1
 800139a:	705a      	strb	r2, [r3, #1]
	SendData[2] = COLORSEND_SEQNUM;
 800139c:	4b85      	ldr	r3, [pc, #532]	; (80015b4 <D_Slider_SetColorData+0x244>)
 800139e:	2205      	movs	r2, #5
 80013a0:	709a      	strb	r2, [r3, #2]
	SendData[3] = COLORSEND_DATANUM;
 80013a2:	4b84      	ldr	r3, [pc, #528]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80013a4:	2205      	movs	r2, #5
 80013a6:	70da      	strb	r2, [r3, #3]
	SendData[4] = COLORSEND_CMD;
 80013a8:	4b82      	ldr	r3, [pc, #520]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80013aa:	2232      	movs	r2, #50	; 0x32
 80013ac:	711a      	strb	r2, [r3, #4]
	SendData[5] = 0;
 80013ae:	4b81      	ldr	r3, [pc, #516]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	715a      	strb	r2, [r3, #5]
	SendData[6] = 0;
 80013b4:	4b7f      	ldr	r3, [pc, #508]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	719a      	strb	r2, [r3, #6]
	SendData[7] = 0;
 80013ba:	4b7e      	ldr	r3, [pc, #504]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80013bc:	2200      	movs	r2, #0
 80013be:	71da      	strb	r2, [r3, #7]
	SendData[8] = 0;
 80013c0:	4b7c      	ldr	r3, [pc, #496]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	721a      	strb	r2, [r3, #8]
	SendData[9] = 0;
 80013c6:	4b7b      	ldr	r3, [pc, #492]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	725a      	strb	r2, [r3, #9]
	SendData[10] = 0;
 80013cc:	4b79      	ldr	r3, [pc, #484]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	729a      	strb	r2, [r3, #10]
	SendData[11] = 0;
 80013d2:	4b78      	ldr	r3, [pc, #480]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	72da      	strb	r2, [r3, #11]
	SendData[12] = 0;
 80013d8:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80013da:	2200      	movs	r2, #0
 80013dc:	731a      	strb	r2, [r3, #12]
	SendData[13] = 0;
 80013de:	4b75      	ldr	r3, [pc, #468]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	735a      	strb	r2, [r3, #13]
	SendData[14] = 0;
 80013e4:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	739a      	strb	r2, [r3, #14]
	for(int i=1; i<16; i++){
 80013ea:	2301      	movs	r3, #1
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	e038      	b.n	8001462 <D_Slider_SetColorData+0xf2>
		SendData[5 + (i/8)] |= (setColorR[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da00      	bge.n	80013f8 <D_Slider_SetColorData+0x88>
 80013f6:	3307      	adds	r3, #7
 80013f8:	10db      	asrs	r3, r3, #3
 80013fa:	4618      	mov	r0, r3
 80013fc:	1d43      	adds	r3, r0, #5
 80013fe:	4a6d      	ldr	r2, [pc, #436]	; (80015b4 <D_Slider_SetColorData+0x244>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	b25c      	sxtb	r4, r3
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	3b01      	subs	r3, #1
 8001408:	4a6b      	ldr	r2, [pc, #428]	; (80015b8 <D_Slider_SetColorData+0x248>)
 800140a:	fb82 1203 	smull	r1, r2, r2, r3
 800140e:	17db      	asrs	r3, r3, #31
 8001410:	1a9b      	subs	r3, r3, r2
 8001412:	3304      	adds	r3, #4
 8001414:	461a      	mov	r2, r3
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	18d5      	adds	r5, r2, r3
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	1e59      	subs	r1, r3, #1
 8001424:	4b64      	ldr	r3, [pc, #400]	; (80015b8 <D_Slider_SetColorData+0x248>)
 8001426:	fb83 3201 	smull	r3, r2, r3, r1
 800142a:	17cb      	asrs	r3, r1, #31
 800142c:	1ad2      	subs	r2, r2, r3
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	1aca      	subs	r2, r1, r3
 8001436:	5cab      	ldrb	r3, [r5, r2]
 8001438:	4619      	mov	r1, r3
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	425a      	negs	r2, r3
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	f002 0207 	and.w	r2, r2, #7
 8001446:	bf58      	it	pl
 8001448:	4253      	negpl	r3, r2
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	b25b      	sxtb	r3, r3
 8001450:	4323      	orrs	r3, r4
 8001452:	b25a      	sxtb	r2, r3
 8001454:	1d43      	adds	r3, r0, #5
 8001456:	b2d1      	uxtb	r1, r2
 8001458:	4a56      	ldr	r2, [pc, #344]	; (80015b4 <D_Slider_SetColorData+0x244>)
 800145a:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	3301      	adds	r3, #1
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	2b0f      	cmp	r3, #15
 8001466:	ddc3      	ble.n	80013f0 <D_Slider_SetColorData+0x80>
	}
	for(int i=1; i<16; i++){
 8001468:	2301      	movs	r3, #1
 800146a:	623b      	str	r3, [r7, #32]
 800146c:	e038      	b.n	80014e0 <D_Slider_SetColorData+0x170>
		SendData[7 + (i/8)] |= (setColorL[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	2b00      	cmp	r3, #0
 8001472:	da00      	bge.n	8001476 <D_Slider_SetColorData+0x106>
 8001474:	3307      	adds	r3, #7
 8001476:	10db      	asrs	r3, r3, #3
 8001478:	4618      	mov	r0, r3
 800147a:	1dc3      	adds	r3, r0, #7
 800147c:	4a4d      	ldr	r2, [pc, #308]	; (80015b4 <D_Slider_SetColorData+0x244>)
 800147e:	5cd3      	ldrb	r3, [r2, r3]
 8001480:	b25c      	sxtb	r4, r3
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	3b01      	subs	r3, #1
 8001486:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <D_Slider_SetColorData+0x248>)
 8001488:	fb82 1203 	smull	r1, r2, r2, r3
 800148c:	17db      	asrs	r3, r3, #31
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	3304      	adds	r3, #4
 8001492:	461a      	mov	r2, r3
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	18d5      	adds	r5, r2, r3
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	1e59      	subs	r1, r3, #1
 80014a2:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <D_Slider_SetColorData+0x248>)
 80014a4:	fb83 3201 	smull	r3, r2, r3, r1
 80014a8:	17cb      	asrs	r3, r1, #31
 80014aa:	1ad2      	subs	r2, r2, r3
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	1aca      	subs	r2, r1, r3
 80014b4:	5cab      	ldrb	r3, [r5, r2]
 80014b6:	4619      	mov	r1, r3
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	425a      	negs	r2, r3
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	f002 0207 	and.w	r2, r2, #7
 80014c4:	bf58      	it	pl
 80014c6:	4253      	negpl	r3, r2
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	4323      	orrs	r3, r4
 80014d0:	b25a      	sxtb	r2, r3
 80014d2:	1dc3      	adds	r3, r0, #7
 80014d4:	b2d1      	uxtb	r1, r2
 80014d6:	4a37      	ldr	r2, [pc, #220]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80014d8:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	3301      	adds	r3, #1
 80014de:	623b      	str	r3, [r7, #32]
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	ddc3      	ble.n	800146e <D_Slider_SetColorData+0xfe>
	}

	uint8_t dataSum = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	77fb      	strb	r3, [r7, #31]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 80014ea:	2301      	movs	r3, #1
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	e009      	b.n	8001504 <D_Slider_SetColorData+0x194>
		dataSum += SendData[i];
 80014f0:	4a30      	ldr	r2, [pc, #192]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4413      	add	r3, r2
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	7ffb      	ldrb	r3, [r7, #31]
 80014fa:	4413      	add	r3, r2
 80014fc:	77fb      	strb	r3, [r7, #31]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	3301      	adds	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b08      	cmp	r3, #8
 8001508:	ddf2      	ble.n	80014f0 <D_Slider_SetColorData+0x180>
	}

	AdditionalPacket = 0;
 800150a:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <D_Slider_SetColorData+0x24c>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
		//SendData[10] = SendData[9];
		//SendData[8] = SendData[7];
		SendData[10] = tempData;
	}
	*/
	for(int i=5; i<9+AdditionalPacket; i++){
 8001510:	2305      	movs	r3, #5
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	e03a      	b.n	800158c <D_Slider_SetColorData+0x21c>
		if(SendData[i] == ESCAPE_PACKET || SendData[i] == FIRSTBYTE) {
 8001516:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <D_Slider_SetColorData+0x244>)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	4413      	add	r3, r2
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2bd0      	cmp	r3, #208	; 0xd0
 8001520:	d005      	beq.n	800152e <D_Slider_SetColorData+0x1be>
 8001522:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <D_Slider_SetColorData+0x244>)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2be0      	cmp	r3, #224	; 0xe0
 800152c:	d12b      	bne.n	8001586 <D_Slider_SetColorData+0x216>
			AdditionalPacket++;
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <D_Slider_SetColorData+0x24c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <D_Slider_SetColorData+0x24c>)
 8001538:	701a      	strb	r2, [r3, #0]
			uint8_t tempData = SendData[i] - 1;
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <D_Slider_SetColorData+0x244>)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	4413      	add	r3, r2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	3b01      	subs	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
			SendData[i] = ESCAPE_PACKET;
 8001546:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <D_Slider_SetColorData+0x244>)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	4413      	add	r3, r2
 800154c:	22d0      	movs	r2, #208	; 0xd0
 800154e:	701a      	strb	r2, [r3, #0]
			for(int j=i+3; j>i; j--){
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3303      	adds	r3, #3
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	e00a      	b.n	800156e <D_Slider_SetColorData+0x1fe>
				SendData[j+1] = SendData[j];
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	3301      	adds	r3, #1
 800155c:	4915      	ldr	r1, [pc, #84]	; (80015b4 <D_Slider_SetColorData+0x244>)
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	440a      	add	r2, r1
 8001562:	7811      	ldrb	r1, [r2, #0]
 8001564:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <D_Slider_SetColorData+0x244>)
 8001566:	54d1      	strb	r1, [r2, r3]
			for(int j=i+3; j>i; j--){
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	3b01      	subs	r3, #1
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	429a      	cmp	r2, r3
 8001574:	dcf0      	bgt.n	8001558 <D_Slider_SetColorData+0x1e8>
			}
			SendData[i+1] = tempData;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	490e      	ldr	r1, [pc, #56]	; (80015b4 <D_Slider_SetColorData+0x244>)
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	54ca      	strb	r2, [r1, r3]
			i++;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
	for(int i=5; i<9+AdditionalPacket; i++){
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <D_Slider_SetColorData+0x24c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3308      	adds	r3, #8
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	429a      	cmp	r2, r3
 8001596:	ddbe      	ble.n	8001516 <D_Slider_SetColorData+0x1a6>
		}
	}

	SendData[COLORSEND_LENGTH-1 + AdditionalPacket] = (uint8_t)dataSum;
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <D_Slider_SetColorData+0x24c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	3309      	adds	r3, #9
 800159e:	4905      	ldr	r1, [pc, #20]	; (80015b4 <D_Slider_SetColorData+0x244>)
 80015a0:	7ffa      	ldrb	r2, [r7, #31]
 80015a2:	54ca      	strb	r2, [r1, r3]
 80015a4:	e000      	b.n	80015a8 <D_Slider_SetColorData+0x238>
	if (!_send) return;
 80015a6:	bf00      	nop
}
 80015a8:	372c      	adds	r7, #44	; 0x2c
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bcb0      	pop	{r4, r5, r7}
 80015ae:	4770      	bx	lr
 80015b0:	200002d0 	.word	0x200002d0
 80015b4:	20000224 	.word	0x20000224
 80015b8:	55555556 	.word	0x55555556
 80015bc:	20000264 	.word	0x20000264

080015c0 <D_Slider_TransitionCompletedCallBack>:
	}
	int checkSum = 256 - (int)dataSum;
	SendData[100] = (uint8_t)checkSum;
}

void D_Slider_TransitionCompletedCallBack(){
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
	had_completed_tx = true;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <D_Slider_TransitionCompletedCallBack+0x14>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	20000010 	.word	0x20000010

080015d8 <D_Slider_ReceptionCompletedCallBack>:

void D_Slider_ReceptionCompletedCallBack(){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
	had_completed_rx = true;
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <D_Slider_ReceptionCompletedCallBack+0x50>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
	if(D_Slider_CheckSum((uint8_t*)RecvData,36) && RecvData[0] != 0){
 80015e4:	2124      	movs	r1, #36	; 0x24
 80015e6:	4811      	ldr	r0, [pc, #68]	; (800162c <D_Slider_ReceptionCompletedCallBack+0x54>)
 80015e8:	f7ff fe9e 	bl	8001328 <D_Slider_CheckSum>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d015      	beq.n	800161e <D_Slider_ReceptionCompletedCallBack+0x46>
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <D_Slider_ReceptionCompletedCallBack+0x54>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d011      	beq.n	800161e <D_Slider_ReceptionCompletedCallBack+0x46>
		for(int i=0; i<32; i++){
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	e00b      	b.n	8001618 <D_Slider_ReceptionCompletedCallBack+0x40>
			TouchData[i] = RecvData[i+3];
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3303      	adds	r3, #3
 8001604:	4a09      	ldr	r2, [pc, #36]	; (800162c <D_Slider_ReceptionCompletedCallBack+0x54>)
 8001606:	5cd1      	ldrb	r1, [r2, r3]
 8001608:	4a09      	ldr	r2, [pc, #36]	; (8001630 <D_Slider_ReceptionCompletedCallBack+0x58>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	460a      	mov	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<32; i++){
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3301      	adds	r3, #1
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b1f      	cmp	r3, #31
 800161c:	ddf0      	ble.n	8001600 <D_Slider_ReceptionCompletedCallBack+0x28>
		}
	}
	//D_USBHID_SetSendData_Touch(TouchData);
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000011 	.word	0x20000011
 800162c:	20000268 	.word	0x20000268
 8001630:	20000288 	.word	0x20000288

08001634 <D_GPIO_Read>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
}

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 ff83 	bl	8002550 <HAL_GPIO_ReadPin>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf14      	ite	ne
 8001650:	2301      	movne	r3, #1
 8001652:	2300      	moveq	r3, #0
 8001654:	b2db      	uxtb	r3, r3
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed_tx){
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <D_Mess_flush+0x54>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f083 0301 	eor.w	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <D_Mess_flush+0x1c>
		outptr = buff;
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <D_Mess_flush+0x58>)
 8001676:	4a11      	ldr	r2, [pc, #68]	; (80016bc <D_Mess_flush+0x5c>)
 8001678:	601a      	str	r2, [r3, #0]
		return;
 800167a:	e01a      	b.n	80016b2 <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <D_Mess_flush+0x58>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <D_Mess_flush+0x58>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	490b      	ldr	r1, [pc, #44]	; (80016b8 <D_Mess_flush+0x58>)
 800168c:	600a      	str	r2, [r1, #0]
 800168e:	220a      	movs	r2, #10
 8001690:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <D_Mess_flush+0x58>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <D_Mess_flush+0x5c>)
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	b29b      	uxth	r3, r3
 800169c:	461a      	mov	r2, r3
 800169e:	4907      	ldr	r1, [pc, #28]	; (80016bc <D_Mess_flush+0x5c>)
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <D_Mess_flush+0x60>)
 80016a2:	f002 fdb3 	bl	800420c <HAL_UART_Transmit_DMA>
		had_completed_tx = false;
 80016a6:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <D_Mess_flush+0x54>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <D_Mess_flush+0x58>)
 80016ae:	4a03      	ldr	r2, [pc, #12]	; (80016bc <D_Mess_flush+0x5c>)
 80016b0:	601a      	str	r2, [r3, #0]
}
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000012 	.word	0x20000012
 80016b8:	2000090c 	.word	0x2000090c
 80016bc:	200002e4 	.word	0x200002e4
 80016c0:	200008c0 	.word	0x200008c0

080016c4 <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  had_completed_tx = true;
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <D_Mess_TransitionCompletedCallBack+0x14>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	20000012 	.word	0x20000012

080016dc <D_Mess_ReceptionCompletedCallBack>:
void D_Mess_ReceptionCompletedCallBack(void){
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  had_completed_rx = true;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <D_Mess_ReceptionCompletedCallBack+0x14>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20000013 	.word	0x20000013

080016f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <HAL_Init+0x40>)
 80016fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001702:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_Init+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_Init+0x40>)
 800170a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_Init+0x40>)
 8001716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171c:	2003      	movs	r0, #3
 800171e:	f000 f94f 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001722:	2000      	movs	r0, #0
 8001724:	f000 f808 	bl	8001738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001728:	f7ff fa52 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023c00 	.word	0x40023c00

08001738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x54>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_InitTick+0x58>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f000 f967 	bl	8001a2a <HAL_SYSTICK_Config>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e00e      	b.n	8001784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b0f      	cmp	r3, #15
 800176a:	d80a      	bhi.n	8001782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800176c:	2200      	movs	r2, #0
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001774:	f000 f92f 	bl	80019d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001778:	4a06      	ldr	r2, [pc, #24]	; (8001794 <HAL_InitTick+0x5c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e000      	b.n	8001784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	2000000c 	.word	0x2000000c
 8001790:	20000018 	.word	0x20000018
 8001794:	20000014 	.word	0x20000014

08001798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x20>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_IncTick+0x24>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_IncTick+0x24>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000018 	.word	0x20000018
 80017bc:	20000910 	.word	0x20000910

080017c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_GetTick+0x14>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000910 	.word	0x20000910

080017d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff ffee 	bl	80017c0 <HAL_GetTick>
 80017e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017f0:	d005      	beq.n	80017fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_Delay+0x44>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017fe:	bf00      	nop
 8001800:	f7ff ffde 	bl	80017c0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d8f7      	bhi.n	8001800 <HAL_Delay+0x28>
  {
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000018 	.word	0x20000018

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <__NVIC_EnableIRQ+0x38>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a0:	f7ff ff8e 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff29 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff3e 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff8e 	bl	8001914 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5d 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff31 	bl	8001884 <__NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffa2 	bl	800197c <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff feb6 	bl	80017c0 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e099      	b.n	8001b94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0201 	bic.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a80:	e00f      	b.n	8001aa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a82:	f7ff fe9d 	bl	80017c0 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d908      	bls.n	8001aa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2220      	movs	r2, #32
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e078      	b.n	8001b94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e8      	bne.n	8001a82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_DMA_Init+0x158>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ace:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d107      	bne.n	8001b0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	4313      	orrs	r3, r2
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f023 0307 	bic.w	r3, r3, #7
 8001b22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d117      	bne.n	8001b66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00e      	beq.n	8001b66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fb01 	bl	8002150 <DMA_CheckFifoParam>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2240      	movs	r2, #64	; 0x40
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b62:	2301      	movs	r3, #1
 8001b64:	e016      	b.n	8001b94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fab8 	bl	80020e4 <DMA_CalcBaseAndBitshift>
 8001b74:	4603      	mov	r3, r0
 8001b76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	223f      	movs	r2, #63	; 0x3f
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	f010803f 	.word	0xf010803f

08001ba0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_DMA_Start_IT+0x26>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e040      	b.n	8001c48 <HAL_DMA_Start_IT+0xa8>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d12f      	bne.n	8001c3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 fa4a 	bl	8002088 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	223f      	movs	r2, #63	; 0x3f
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0216 	orr.w	r2, r2, #22
 8001c0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0208 	orr.w	r2, r2, #8
 8001c26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e005      	b.n	8001c46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c42:	2302      	movs	r3, #2
 8001c44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c5e:	f7ff fdaf 	bl	80017c0 <HAL_GetTick>
 8001c62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d008      	beq.n	8001c82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e052      	b.n	8001d28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0216 	bic.w	r2, r2, #22
 8001c90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d103      	bne.n	8001cb2 <HAL_DMA_Abort+0x62>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0208 	bic.w	r2, r2, #8
 8001cc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd2:	e013      	b.n	8001cfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd4:	f7ff fd74 	bl	80017c0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d90c      	bls.n	8001cfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2203      	movs	r2, #3
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e015      	b.n	8001d28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1e4      	bne.n	8001cd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0e:	223f      	movs	r2, #63	; 0x3f
 8001d10:	409a      	lsls	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d004      	beq.n	8001d4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00c      	b.n	8001d68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2205      	movs	r2, #5
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d80:	4b92      	ldr	r3, [pc, #584]	; (8001fcc <HAL_DMA_IRQHandler+0x258>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a92      	ldr	r2, [pc, #584]	; (8001fd0 <HAL_DMA_IRQHandler+0x25c>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	0a9b      	lsrs	r3, r3, #10
 8001d8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	2208      	movs	r2, #8
 8001da0:	409a      	lsls	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d01a      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0204 	bic.w	r2, r2, #4
 8001dc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	2208      	movs	r2, #8
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de4:	2201      	movs	r2, #1
 8001de6:	409a      	lsls	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d012      	beq.n	8001e16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	2201      	movs	r2, #1
 8001e04:	409a      	lsls	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	f043 0202 	orr.w	r2, r3, #2
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d012      	beq.n	8001e4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00b      	beq.n	8001e4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	2204      	movs	r2, #4
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e44:	f043 0204 	orr.w	r2, r3, #4
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	2210      	movs	r2, #16
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d043      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d03c      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	2210      	movs	r2, #16
 8001e70:	409a      	lsls	r2, r3
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d018      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d108      	bne.n	8001ea4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d024      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	4798      	blx	r3
 8001ea2:	e01f      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01b      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	4798      	blx	r3
 8001eb4:	e016      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0208 	bic.w	r2, r2, #8
 8001ed2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee8:	2220      	movs	r2, #32
 8001eea:	409a      	lsls	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 808e 	beq.w	8002012 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 8086 	beq.w	8002012 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d136      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0216 	bic.w	r2, r2, #22
 8001f2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <HAL_DMA_IRQHandler+0x1da>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0208 	bic.w	r2, r2, #8
 8001f5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	223f      	movs	r2, #63	; 0x3f
 8001f64:	409a      	lsls	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d07d      	beq.n	800207e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
        }
        return;
 8001f8a:	e078      	b.n	800207e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01c      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d108      	bne.n	8001fba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d030      	beq.n	8002012 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
 8001fb8:	e02b      	b.n	8002012 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d027      	beq.n	8002012 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
 8001fca:	e022      	b.n	8002012 <HAL_DMA_IRQHandler+0x29e>
 8001fcc:	2000000c 	.word	0x2000000c
 8001fd0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10f      	bne.n	8002002 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0210 	bic.w	r2, r2, #16
 8001ff0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002016:	2b00      	cmp	r3, #0
 8002018:	d032      	beq.n	8002080 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d022      	beq.n	800206c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2205      	movs	r2, #5
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	3301      	adds	r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	429a      	cmp	r2, r3
 8002048:	d307      	bcc.n	800205a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f2      	bne.n	800203e <HAL_DMA_IRQHandler+0x2ca>
 8002058:	e000      	b.n	800205c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800205a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
 800207c:	e000      	b.n	8002080 <HAL_DMA_IRQHandler+0x30c>
        return;
 800207e:	bf00      	nop
    }
  }
}
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop

08002088 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d108      	bne.n	80020c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020c6:	e007      	b.n	80020d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	60da      	str	r2, [r3, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	3b10      	subs	r3, #16
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <DMA_CalcBaseAndBitshift+0x64>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020fe:	4a13      	ldr	r2, [pc, #76]	; (800214c <DMA_CalcBaseAndBitshift+0x68>)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d909      	bls.n	8002126 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800211a:	f023 0303 	bic.w	r3, r3, #3
 800211e:	1d1a      	adds	r2, r3, #4
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	659a      	str	r2, [r3, #88]	; 0x58
 8002124:	e007      	b.n	8002136 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800212e:	f023 0303 	bic.w	r3, r3, #3
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	aaaaaaab 	.word	0xaaaaaaab
 800214c:	08008a14 	.word	0x08008a14

08002150 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d11f      	bne.n	80021aa <DMA_CheckFifoParam+0x5a>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d856      	bhi.n	800221e <DMA_CheckFifoParam+0xce>
 8002170:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <DMA_CheckFifoParam+0x28>)
 8002172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002176:	bf00      	nop
 8002178:	08002189 	.word	0x08002189
 800217c:	0800219b 	.word	0x0800219b
 8002180:	08002189 	.word	0x08002189
 8002184:	0800221f 	.word	0x0800221f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d046      	beq.n	8002222 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002198:	e043      	b.n	8002222 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021a2:	d140      	bne.n	8002226 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a8:	e03d      	b.n	8002226 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b2:	d121      	bne.n	80021f8 <DMA_CheckFifoParam+0xa8>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d837      	bhi.n	800222a <DMA_CheckFifoParam+0xda>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <DMA_CheckFifoParam+0x70>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	080021d1 	.word	0x080021d1
 80021c4:	080021d7 	.word	0x080021d7
 80021c8:	080021d1 	.word	0x080021d1
 80021cc:	080021e9 	.word	0x080021e9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
      break;
 80021d4:	e030      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d025      	beq.n	800222e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e6:	e022      	b.n	800222e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021f0:	d11f      	bne.n	8002232 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021f6:	e01c      	b.n	8002232 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d903      	bls.n	8002206 <DMA_CheckFifoParam+0xb6>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d003      	beq.n	800220c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002204:	e018      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
      break;
 800220a:	e015      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00e      	beq.n	8002236 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      break;
 800221c:	e00b      	b.n	8002236 <DMA_CheckFifoParam+0xe6>
      break;
 800221e:	bf00      	nop
 8002220:	e00a      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      break;
 8002222:	bf00      	nop
 8002224:	e008      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      break;
 8002226:	bf00      	nop
 8002228:	e006      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      break;
 800222a:	bf00      	nop
 800222c:	e004      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      break;
 800222e:	bf00      	nop
 8002230:	e002      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      break;   
 8002232:	bf00      	nop
 8002234:	e000      	b.n	8002238 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
    }
  } 
  
  return status; 
 8002238:	7bfb      	ldrb	r3, [r7, #15]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop

08002248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e159      	b.n	8002518 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	429a      	cmp	r2, r3
 800227e:	f040 8148 	bne.w	8002512 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d005      	beq.n	800229a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002296:	2b02      	cmp	r3, #2
 8002298:	d130      	bne.n	80022fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	2203      	movs	r2, #3
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d0:	2201      	movs	r2, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 0201 	and.w	r2, r3, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b03      	cmp	r3, #3
 8002306:	d017      	beq.n	8002338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d123      	bne.n	800238c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	08da      	lsrs	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3208      	adds	r2, #8
 800234c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	08da      	lsrs	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	69b9      	ldr	r1, [r7, #24]
 8002388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2203      	movs	r2, #3
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0203 	and.w	r2, r3, #3
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80a2 	beq.w	8002512 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	4b57      	ldr	r3, [pc, #348]	; (8002530 <HAL_GPIO_Init+0x2e8>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	4a56      	ldr	r2, [pc, #344]	; (8002530 <HAL_GPIO_Init+0x2e8>)
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023dc:	6453      	str	r3, [r2, #68]	; 0x44
 80023de:	4b54      	ldr	r3, [pc, #336]	; (8002530 <HAL_GPIO_Init+0x2e8>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ea:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_GPIO_Init+0x2ec>)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	3302      	adds	r3, #2
 80023f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	220f      	movs	r2, #15
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a49      	ldr	r2, [pc, #292]	; (8002538 <HAL_GPIO_Init+0x2f0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d019      	beq.n	800244a <HAL_GPIO_Init+0x202>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a48      	ldr	r2, [pc, #288]	; (800253c <HAL_GPIO_Init+0x2f4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0x1fe>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a47      	ldr	r2, [pc, #284]	; (8002540 <HAL_GPIO_Init+0x2f8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00d      	beq.n	8002442 <HAL_GPIO_Init+0x1fa>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a46      	ldr	r2, [pc, #280]	; (8002544 <HAL_GPIO_Init+0x2fc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <HAL_GPIO_Init+0x1f6>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a45      	ldr	r2, [pc, #276]	; (8002548 <HAL_GPIO_Init+0x300>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_GPIO_Init+0x1f2>
 8002436:	2304      	movs	r3, #4
 8002438:	e008      	b.n	800244c <HAL_GPIO_Init+0x204>
 800243a:	2307      	movs	r3, #7
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x204>
 800243e:	2303      	movs	r3, #3
 8002440:	e004      	b.n	800244c <HAL_GPIO_Init+0x204>
 8002442:	2302      	movs	r3, #2
 8002444:	e002      	b.n	800244c <HAL_GPIO_Init+0x204>
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <HAL_GPIO_Init+0x204>
 800244a:	2300      	movs	r3, #0
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	f002 0203 	and.w	r2, r2, #3
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	4093      	lsls	r3, r2
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800245c:	4935      	ldr	r1, [pc, #212]	; (8002534 <HAL_GPIO_Init+0x2ec>)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800246a:	4b38      	ldr	r3, [pc, #224]	; (800254c <HAL_GPIO_Init+0x304>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800248e:	4a2f      	ldr	r2, [pc, #188]	; (800254c <HAL_GPIO_Init+0x304>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_GPIO_Init+0x304>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b8:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_GPIO_Init+0x304>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024be:	4b23      	ldr	r3, [pc, #140]	; (800254c <HAL_GPIO_Init+0x304>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e2:	4a1a      	ldr	r2, [pc, #104]	; (800254c <HAL_GPIO_Init+0x304>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e8:	4b18      	ldr	r3, [pc, #96]	; (800254c <HAL_GPIO_Init+0x304>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800250c:	4a0f      	ldr	r2, [pc, #60]	; (800254c <HAL_GPIO_Init+0x304>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3301      	adds	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b0f      	cmp	r3, #15
 800251c:	f67f aea2 	bls.w	8002264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800
 8002534:	40013800 	.word	0x40013800
 8002538:	40020000 	.word	0x40020000
 800253c:	40020400 	.word	0x40020400
 8002540:	40020800 	.word	0x40020800
 8002544:	40020c00 	.word	0x40020c00
 8002548:	40021000 	.word	0x40021000
 800254c:	40013c00 	.word	0x40013c00

08002550 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	887b      	ldrh	r3, [r7, #2]
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e001      	b.n	8002572 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002590:	787b      	ldrb	r3, [r7, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800259c:	e003      	b.n	80025a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	041a      	lsls	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	619a      	str	r2, [r3, #24]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b4:	b08f      	sub	sp, #60	; 0x3c
 80025b6:	af0a      	add	r7, sp, #40	; 0x28
 80025b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e10f      	b.n	80027e4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f005 fe9c 	bl	800831c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2203      	movs	r2, #3
 80025e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f002 fff5 	bl	80055f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	687e      	ldr	r6, [r7, #4]
 8002610:	466d      	mov	r5, sp
 8002612:	f106 0410 	add.w	r4, r6, #16
 8002616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800261c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002622:	e885 0003 	stmia.w	r5, {r0, r1}
 8002626:	1d33      	adds	r3, r6, #4
 8002628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262a:	6838      	ldr	r0, [r7, #0]
 800262c:	f002 fecc 	bl	80053c8 <USB_CoreInit>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2202      	movs	r2, #2
 800263a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0d0      	b.n	80027e4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f002 ffe3 	bl	8005614 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
 8002652:	e04a      	b.n	80026ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	333d      	adds	r3, #61	; 0x3d
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	333c      	adds	r3, #60	; 0x3c
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	b298      	uxth	r0, r3
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3342      	adds	r3, #66	; 0x42
 8002690:	4602      	mov	r2, r0
 8002692:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	333f      	adds	r3, #63	; 0x3f
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	3344      	adds	r3, #68	; 0x44
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3348      	adds	r3, #72	; 0x48
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3350      	adds	r3, #80	; 0x50
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	3301      	adds	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d3af      	bcc.n	8002654 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	e044      	b.n	8002784 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002710:	7bfa      	ldrb	r2, [r7, #15]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	1a9b      	subs	r3, r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	3301      	adds	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d3b5      	bcc.n	80026fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	687e      	ldr	r6, [r7, #4]
 8002796:	466d      	mov	r5, sp
 8002798:	f106 0410 	add.w	r4, r6, #16
 800279c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800279e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80027ac:	1d33      	adds	r3, r6, #4
 80027ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b0:	6838      	ldr	r0, [r7, #0]
 80027b2:	f002 ff7b 	bl	80056ac <USB_DevInit>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e00d      	b.n	80027e4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f003 fff7 	bl	80067d0 <USB_DevDisconnect>

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_PCD_Start+0x1c>
 8002804:	2302      	movs	r3, #2
 8002806:	e020      	b.n	800284a <HAL_PCD_Start+0x5e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	2b01      	cmp	r3, #1
 8002816:	d109      	bne.n	800282c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800281c:	2b01      	cmp	r3, #1
 800281e:	d005      	beq.n	800282c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002824:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fecd 	bl	80055d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f003 ffa7 	bl	800678e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002852:	b590      	push	{r4, r7, lr}
 8002854:	b08d      	sub	sp, #52	; 0x34
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f004 f865 	bl	8006938 <USB_GetMode>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	f040 839d 	bne.w	8002fb0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f003 ffc9 	bl	8006812 <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8393 	beq.w	8002fae <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f003 ffc0 	bl	8006812 <USB_ReadInterrupts>
 8002892:	4603      	mov	r3, r0
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b02      	cmp	r3, #2
 800289a:	d107      	bne.n	80028ac <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f002 0202 	and.w	r2, r2, #2
 80028aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 ffae 	bl	8006812 <USB_ReadInterrupts>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d161      	bne.n	8002984 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0210 	bic.w	r2, r2, #16
 80028ce:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f003 020f 	and.w	r2, r3, #15
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	3304      	adds	r3, #4
 80028ee:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	0c5b      	lsrs	r3, r3, #17
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d124      	bne.n	8002946 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d035      	beq.n	8002974 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002912:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002916:	b29b      	uxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	6a38      	ldr	r0, [r7, #32]
 800291c:	f003 fde5 	bl	80064ea <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800292c:	441a      	add	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800293e:	441a      	add	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	619a      	str	r2, [r3, #24]
 8002944:	e016      	b.n	8002974 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	0c5b      	lsrs	r3, r3, #17
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	2b06      	cmp	r3, #6
 8002950:	d110      	bne.n	8002974 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002958:	2208      	movs	r2, #8
 800295a:	4619      	mov	r1, r3
 800295c:	6a38      	ldr	r0, [r7, #32]
 800295e:	f003 fdc4 	bl	80064ea <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800296e:	441a      	add	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699a      	ldr	r2, [r3, #24]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0210 	orr.w	r2, r2, #16
 8002982:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f003 ff42 	bl	8006812 <USB_ReadInterrupts>
 800298e:	4603      	mov	r3, r0
 8002990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002994:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002998:	d16e      	bne.n	8002a78 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 ff48 	bl	8006838 <USB_ReadDevAllOutEpInterrupt>
 80029a8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80029aa:	e062      	b.n	8002a72 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d057      	beq.n	8002a66 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 ff6d 	bl	80068a0 <USB_ReadDevOutEPInterrupt>
 80029c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029de:	461a      	mov	r2, r3
 80029e0:	2301      	movs	r3, #1
 80029e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fd98 	bl	800351c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a02:	461a      	mov	r2, r3
 8002a04:	2308      	movs	r3, #8
 8002a06:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fe92 	bl	8003734 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a26:	461a      	mov	r2, r3
 8002a28:	2310      	movs	r3, #16
 8002a2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a42:	461a      	mov	r2, r3
 8002a44:	2320      	movs	r3, #32
 8002a46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a64:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	3301      	adds	r3, #1
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d199      	bne.n	80029ac <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 fec8 	bl	8006812 <USB_ReadInterrupts>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a8c:	f040 80c0 	bne.w	8002c10 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 fee9 	bl	800686c <USB_ReadDevAllInEpInterrupt>
 8002a9a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002aa0:	e0b2      	b.n	8002c08 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80a7 	beq.w	8002bfc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 ff0f 	bl	80068dc <USB_ReadDevInEPInterrupt>
 8002abe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d057      	beq.n	8002b7a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69f9      	ldr	r1, [r7, #28]
 8002ae6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002aea:	4013      	ands	r3, r2
 8002aec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002afa:	461a      	mov	r2, r3
 8002afc:	2301      	movs	r3, #1
 8002afe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d132      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	3348      	adds	r3, #72	; 0x48
 8002b18:	6819      	ldr	r1, [r3, #0]
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4403      	add	r3, r0
 8002b28:	3344      	adds	r3, #68	; 0x44
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4419      	add	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4403      	add	r3, r0
 8002b3c:	3348      	adds	r3, #72	; 0x48
 8002b3e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d113      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x31c>
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	3350      	adds	r3, #80	; 0x50
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d108      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b66:	461a      	mov	r2, r3
 8002b68:	2101      	movs	r1, #1
 8002b6a:	f003 ff17 	bl	800699c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f005 fc64 	bl	8008442 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b90:	461a      	mov	r2, r3
 8002b92:	2308      	movs	r3, #8
 8002b94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bac:	461a      	mov	r2, r3
 8002bae:	2310      	movs	r3, #16
 8002bb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2340      	movs	r3, #64	; 0x40
 8002bcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be4:	461a      	mov	r2, r3
 8002be6:	2302      	movs	r3, #2
 8002be8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fc03 	bl	8003402 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	3301      	adds	r3, #1
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f47f af49 	bne.w	8002aa2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 fdfc 	bl	8006812 <USB_ReadInterrupts>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c24:	d122      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d108      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fe0e 	bl	8003870 <HAL_PCDEx_LPM_Callback>
 8002c54:	e002      	b.n	8002c5c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f005 fc6a 	bl	8008530 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fdce 	bl	8006812 <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c80:	d112      	bne.n	8002ca8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d102      	bne.n	8002c98 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f005 fc26 	bl	80084e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ca6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f003 fdb0 	bl	8006812 <USB_ReadInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbc:	f040 80c7 	bne.w	8002e4e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2110      	movs	r1, #16
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 fe4a 	bl	8005974 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce4:	e056      	b.n	8002d94 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cf8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d0a:	0151      	lsls	r1, r2, #5
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	440a      	add	r2, r1
 8002d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d18:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d2a:	0151      	lsls	r1, r2, #5
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	440a      	add	r2, r1
 8002d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d46:	461a      	mov	r2, r3
 8002d48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5e:	0151      	lsls	r1, r2, #5
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	440a      	add	r2, r1
 8002d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d7e:	0151      	lsls	r1, r2, #5
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	440a      	add	r2, r1
 8002d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d90:	3301      	adds	r3, #1
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d3a3      	bcc.n	8002ce6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002db0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dca:	f043 030b 	orr.w	r3, r3, #11
 8002dce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002de0:	f043 030b 	orr.w	r3, r3, #11
 8002de4:	6453      	str	r3, [r2, #68]	; 0x44
 8002de6:	e015      	b.n	8002e14 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002df6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dfa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002dfe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e0e:	f043 030b 	orr.w	r3, r3, #11
 8002e12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f003 fdaf 	bl	800699c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 fcdd 	bl	8006812 <USB_ReadInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e62:	d124      	bne.n	8002eae <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 fd73 	bl	8006954 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f002 fddb 	bl	8005a2e <USB_GetDevSpeed>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681c      	ldr	r4, [r3, #0]
 8002e84:	f001 f940 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8002e88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	4620      	mov	r0, r4
 8002e94:	f002 fafa 	bl	800548c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f005 fafa 	bl	8008492 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695a      	ldr	r2, [r3, #20]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f003 fcad 	bl	8006812 <USB_ReadInterrupts>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d10a      	bne.n	8002ed8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f005 fad7 	bl	8008476 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f002 0208 	and.w	r2, r2, #8
 8002ed6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 fc98 	bl	8006812 <USB_ReadInterrupts>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eec:	d10f      	bne.n	8002f0e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f005 fb39 	bl	8008570 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 fc7d 	bl	8006812 <USB_ReadInterrupts>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f22:	d10f      	bne.n	8002f44 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f005 fb0c 	bl	800854c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 fc62 	bl	8006812 <USB_ReadInterrupts>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f58:	d10a      	bne.n	8002f70 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f005 fb1a 	bl	8008594 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f003 fc4c 	bl	8006812 <USB_ReadInterrupts>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d115      	bne.n	8002fb0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f005 fb0a 	bl	80085b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	e000      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002fae:	bf00      	nop
    }
  }
}
 8002fb0:	3734      	adds	r7, #52	; 0x34
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd90      	pop	{r4, r7, pc}

08002fb6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_PCD_SetAddress+0x1a>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e013      	b.n	8002ff8 <HAL_PCD_SetAddress+0x42>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f003 fbaa 	bl	8006742 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	4608      	mov	r0, r1
 800300a:	4611      	mov	r1, r2
 800300c:	461a      	mov	r2, r3
 800300e:	4603      	mov	r3, r0
 8003010:	70fb      	strb	r3, [r7, #3]
 8003012:	460b      	mov	r3, r1
 8003014:	803b      	strh	r3, [r7, #0]
 8003016:	4613      	mov	r3, r2
 8003018:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800301e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003022:	2b00      	cmp	r3, #0
 8003024:	da0f      	bge.n	8003046 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	3338      	adds	r3, #56	; 0x38
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	3304      	adds	r3, #4
 800303c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	705a      	strb	r2, [r3, #1]
 8003044:	e00f      	b.n	8003066 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 020f 	and.w	r2, r3, #15
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	4413      	add	r3, r2
 800305c:	3304      	adds	r3, #4
 800305e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	b2da      	uxtb	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003072:	883a      	ldrh	r2, [r7, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	78ba      	ldrb	r2, [r7, #2]
 800307c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d004      	beq.n	8003090 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003090:	78bb      	ldrb	r3, [r7, #2]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d102      	bne.n	800309c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_PCD_EP_Open+0xaa>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e00e      	b.n	80030c8 <HAL_PCD_EP_Open+0xc8>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68f9      	ldr	r1, [r7, #12]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f002 fcdd 	bl	8005a78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80030c6:	7afb      	ldrb	r3, [r7, #11]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	da0f      	bge.n	8003104 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	f003 020f 	and.w	r2, r3, #15
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	3338      	adds	r3, #56	; 0x38
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4413      	add	r3, r2
 80030f8:	3304      	adds	r3, #4
 80030fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	705a      	strb	r2, [r3, #1]
 8003102:	e00f      	b.n	8003124 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	f003 020f 	and.w	r2, r3, #15
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	3304      	adds	r3, #4
 800311c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	b2da      	uxtb	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_PCD_EP_Close+0x6e>
 800313a:	2302      	movs	r3, #2
 800313c:	e00e      	b.n	800315c <HAL_PCD_EP_Close+0x8c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68f9      	ldr	r1, [r7, #12]
 800314c:	4618      	mov	r0, r3
 800314e:	f002 fd1b 	bl	8005b88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	607a      	str	r2, [r7, #4]
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	460b      	mov	r3, r1
 8003172:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003174:	7afb      	ldrb	r3, [r7, #11]
 8003176:	f003 020f 	and.w	r2, r3, #15
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	3304      	adds	r3, #4
 800318c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2200      	movs	r2, #0
 800319e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2200      	movs	r2, #0
 80031a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a6:	7afb      	ldrb	r3, [r7, #11]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d102      	bne.n	80031c0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031c0:	7afb      	ldrb	r3, [r7, #11]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	6979      	ldr	r1, [r7, #20]
 80031d8:	f002 fff6 	bl	80061c8 <USB_EP0StartXfer>
 80031dc:	e008      	b.n	80031f0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	6979      	ldr	r1, [r7, #20]
 80031ec:	f002 fda8 	bl	8005d40 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b086      	sub	sp, #24
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	460b      	mov	r3, r1
 8003208:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800320a:	7afb      	ldrb	r3, [r7, #11]
 800320c:	f003 020f 	and.w	r2, r3, #15
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	3338      	adds	r3, #56	; 0x38
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	3304      	adds	r3, #4
 8003220:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2200      	movs	r2, #0
 8003232:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2201      	movs	r2, #1
 8003238:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800323a:	7afb      	ldrb	r3, [r7, #11]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	b2da      	uxtb	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d102      	bne.n	8003254 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	6979      	ldr	r1, [r7, #20]
 800326c:	f002 ffac 	bl	80061c8 <USB_EP0StartXfer>
 8003270:	e008      	b.n	8003284 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	6979      	ldr	r1, [r7, #20]
 8003280:	f002 fd5e 	bl	8005d40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	f003 020f 	and.w	r2, r3, #15
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d901      	bls.n	80032ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e050      	b.n	800334e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da0f      	bge.n	80032d4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	f003 020f 	and.w	r2, r3, #15
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	3338      	adds	r3, #56	; 0x38
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	3304      	adds	r3, #4
 80032ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	705a      	strb	r2, [r3, #1]
 80032d2:	e00d      	b.n	80032f0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	3304      	adds	r3, #4
 80032e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_PCD_EP_SetStall+0x82>
 800330c:	2302      	movs	r3, #2
 800330e:	e01e      	b.n	800334e <HAL_PCD_EP_SetStall+0xc0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68f9      	ldr	r1, [r7, #12]
 800331e:	4618      	mov	r0, r3
 8003320:	f003 f93b 	bl	800659a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	b2d9      	uxtb	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800333e:	461a      	mov	r2, r3
 8003340:	f003 fb2c 	bl	800699c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	f003 020f 	and.w	r2, r3, #15
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	429a      	cmp	r2, r3
 800336e:	d901      	bls.n	8003374 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e042      	b.n	80033fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003378:	2b00      	cmp	r3, #0
 800337a:	da0f      	bge.n	800339c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	f003 020f 	and.w	r2, r3, #15
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	3338      	adds	r3, #56	; 0x38
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	4413      	add	r3, r2
 8003390:	3304      	adds	r3, #4
 8003392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	705a      	strb	r2, [r3, #1]
 800339a:	e00f      	b.n	80033bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 020f 	and.w	r2, r3, #15
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	3304      	adds	r3, #4
 80033b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_PCD_EP_ClrStall+0x86>
 80033d8:	2302      	movs	r3, #2
 80033da:	e00e      	b.n	80033fa <HAL_PCD_EP_ClrStall+0xa4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68f9      	ldr	r1, [r7, #12]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 f943 	bl	8006676 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08a      	sub	sp, #40	; 0x28
 8003406:	af02      	add	r7, sp, #8
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	3338      	adds	r3, #56	; 0x38
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	3304      	adds	r3, #4
 8003428:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	429a      	cmp	r2, r3
 8003434:	d901      	bls.n	800343a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e06c      	b.n	8003514 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	429a      	cmp	r2, r3
 800344e:	d902      	bls.n	8003456 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3303      	adds	r3, #3
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800345e:	e02b      	b.n	80034b8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	429a      	cmp	r2, r3
 8003474:	d902      	bls.n	800347c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	3303      	adds	r3, #3
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	68d9      	ldr	r1, [r3, #12]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003494:	b2db      	uxtb	r3, r3
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	4603      	mov	r3, r0
 800349a:	6978      	ldr	r0, [r7, #20]
 800349c:	f002 ffe7 	bl	800646e <USB_WritePacket>

    ep->xfer_buff  += len;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	441a      	add	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	699a      	ldr	r2, [r3, #24]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	441a      	add	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d809      	bhi.n	80034e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d203      	bcs.n	80034e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1be      	bne.n	8003460 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d811      	bhi.n	8003512 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	2201      	movs	r2, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	43db      	mvns	r3, r3
 8003508:	6939      	ldr	r1, [r7, #16]
 800350a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800350e:	4013      	ands	r3, r2
 8003510:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3720      	adds	r7, #32
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	333c      	adds	r3, #60	; 0x3c
 8003534:	3304      	adds	r3, #4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b01      	cmp	r3, #1
 8003550:	f040 80a0 	bne.w	8003694 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d015      	beq.n	800358a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4a72      	ldr	r2, [pc, #456]	; (800372c <PCD_EP_OutXfrComplete_int+0x210>)
 8003562:	4293      	cmp	r3, r2
 8003564:	f240 80dd 	bls.w	8003722 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80d7 	beq.w	8003722 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003580:	461a      	mov	r2, r3
 8003582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003586:	6093      	str	r3, [r2, #8]
 8003588:	e0cb      	b.n	8003722 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d009      	beq.n	80035a8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a0:	461a      	mov	r2, r3
 80035a2:	2320      	movs	r3, #32
 80035a4:	6093      	str	r3, [r2, #8]
 80035a6:	e0bc      	b.n	8003722 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 80b7 	bne.w	8003722 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a5d      	ldr	r2, [pc, #372]	; (800372c <PCD_EP_OutXfrComplete_int+0x210>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d90f      	bls.n	80035dc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d2:	461a      	mov	r2, r3
 80035d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d8:	6093      	str	r3, [r2, #8]
 80035da:	e0a2      	b.n	8003722 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035ee:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	0159      	lsls	r1, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	440b      	add	r3, r1
 80035f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003602:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4403      	add	r3, r0
 8003612:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003616:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800362a:	6819      	ldr	r1, [r3, #0]
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4403      	add	r3, r0
 800363a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4419      	add	r1, r3
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4403      	add	r3, r0
 8003650:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003654:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d114      	bne.n	8003686 <PCD_EP_OutXfrComplete_int+0x16a>
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d108      	bne.n	8003686 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800367e:	461a      	mov	r2, r3
 8003680:	2101      	movs	r1, #1
 8003682:	f003 f98b 	bl	800699c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	4619      	mov	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f004 febd 	bl	800840c <HAL_PCD_DataOutStageCallback>
 8003692:	e046      	b.n	8003722 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a26      	ldr	r2, [pc, #152]	; (8003730 <PCD_EP_OutXfrComplete_int+0x214>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d124      	bne.n	80036e6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b2:	461a      	mov	r2, r3
 80036b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036b8:	6093      	str	r3, [r2, #8]
 80036ba:	e032      	b.n	8003722 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d2:	461a      	mov	r2, r3
 80036d4:	2320      	movs	r3, #32
 80036d6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	4619      	mov	r1, r3
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f004 fe94 	bl	800840c <HAL_PCD_DataOutStageCallback>
 80036e4:	e01d      	b.n	8003722 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d114      	bne.n	8003716 <PCD_EP_OutXfrComplete_int+0x1fa>
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d108      	bne.n	8003716 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800370e:	461a      	mov	r2, r3
 8003710:	2100      	movs	r1, #0
 8003712:	f003 f943 	bl	800699c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f004 fe75 	bl	800840c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	4f54300a 	.word	0x4f54300a
 8003730:	4f54310a 	.word	0x4f54310a

08003734 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	333c      	adds	r3, #60	; 0x3c
 800374c:	3304      	adds	r3, #4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4a15      	ldr	r2, [pc, #84]	; (80037bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d90e      	bls.n	8003788 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003770:	2b00      	cmp	r3, #0
 8003772:	d009      	beq.n	8003788 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003780:	461a      	mov	r2, r3
 8003782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003786:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f004 fe2d 	bl	80083e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d90c      	bls.n	80037b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d108      	bne.n	80037b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037a8:	461a      	mov	r2, r3
 80037aa:	2101      	movs	r1, #1
 80037ac:	f003 f8f6 	bl	800699c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	4f54300a 	.word	0x4f54300a

080037c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	70fb      	strb	r3, [r7, #3]
 80037cc:	4613      	mov	r3, r2
 80037ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d107      	bne.n	80037ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80037de:	883b      	ldrh	r3, [r7, #0]
 80037e0:	0419      	lsls	r1, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
 80037ec:	e028      	b.n	8003840 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	0c1b      	lsrs	r3, r3, #16
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	4413      	add	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037fc:	2300      	movs	r3, #0
 80037fe:	73fb      	strb	r3, [r7, #15]
 8003800:	e00d      	b.n	800381e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	3340      	adds	r3, #64	; 0x40
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	0c1b      	lsrs	r3, r3, #16
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	4413      	add	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	3301      	adds	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	3b01      	subs	r3, #1
 8003824:	429a      	cmp	r2, r3
 8003826:	d3ec      	bcc.n	8003802 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003828:	883b      	ldrh	r3, [r7, #0]
 800382a:	0418      	lsls	r0, r3, #16
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	3b01      	subs	r3, #1
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	4302      	orrs	r2, r0
 8003838:	3340      	adds	r3, #64	; 0x40
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	460b      	mov	r3, r1
 8003858:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e264      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d075      	beq.n	8003992 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038a6:	4ba3      	ldr	r3, [pc, #652]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d00c      	beq.n	80038cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038b2:	4ba0      	ldr	r3, [pc, #640]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d112      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038be:	4b9d      	ldr	r3, [pc, #628]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ca:	d10b      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	4b99      	ldr	r3, [pc, #612]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d05b      	beq.n	8003990 <HAL_RCC_OscConfig+0x108>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d157      	bne.n	8003990 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e23f      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ec:	d106      	bne.n	80038fc <HAL_RCC_OscConfig+0x74>
 80038ee:	4b91      	ldr	r3, [pc, #580]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a90      	ldr	r2, [pc, #576]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e01d      	b.n	8003938 <HAL_RCC_OscConfig+0xb0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003904:	d10c      	bne.n	8003920 <HAL_RCC_OscConfig+0x98>
 8003906:	4b8b      	ldr	r3, [pc, #556]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a8a      	ldr	r2, [pc, #552]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 800390c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	4b88      	ldr	r3, [pc, #544]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a87      	ldr	r2, [pc, #540]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e00b      	b.n	8003938 <HAL_RCC_OscConfig+0xb0>
 8003920:	4b84      	ldr	r3, [pc, #528]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a83      	ldr	r2, [pc, #524]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b81      	ldr	r3, [pc, #516]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a80      	ldr	r2, [pc, #512]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d013      	beq.n	8003968 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fd ff3e 	bl	80017c0 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003948:	f7fd ff3a 	bl	80017c0 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	; 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e204      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b76      	ldr	r3, [pc, #472]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0xc0>
 8003966:	e014      	b.n	8003992 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fd ff2a 	bl	80017c0 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003970:	f7fd ff26 	bl	80017c0 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e1f0      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003982:	4b6c      	ldr	r3, [pc, #432]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0xe8>
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d063      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800399e:	4b65      	ldr	r3, [pc, #404]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039aa:	4b62      	ldr	r3, [pc, #392]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d11c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b6:	4b5f      	ldr	r3, [pc, #380]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d116      	bne.n	80039f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c2:	4b5c      	ldr	r3, [pc, #368]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_RCC_OscConfig+0x152>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d001      	beq.n	80039da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e1c4      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039da:	4b56      	ldr	r3, [pc, #344]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4952      	ldr	r1, [pc, #328]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	e03a      	b.n	8003a66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f8:	4b4f      	ldr	r3, [pc, #316]	; (8003b38 <HAL_RCC_OscConfig+0x2b0>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fd fedf 	bl	80017c0 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a06:	f7fd fedb 	bl	80017c0 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e1a5      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a18:	4b46      	ldr	r3, [pc, #280]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	4b43      	ldr	r3, [pc, #268]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4940      	ldr	r1, [pc, #256]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
 8003a38:	e015      	b.n	8003a66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3a:	4b3f      	ldr	r3, [pc, #252]	; (8003b38 <HAL_RCC_OscConfig+0x2b0>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fd febe 	bl	80017c0 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a48:	f7fd feba 	bl	80017c0 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e184      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5a:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d030      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d016      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7a:	4b30      	ldr	r3, [pc, #192]	; (8003b3c <HAL_RCC_OscConfig+0x2b4>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fd fe9e 	bl	80017c0 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a88:	f7fd fe9a 	bl	80017c0 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e164      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9a:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x200>
 8003aa6:	e015      	b.n	8003ad4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa8:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <HAL_RCC_OscConfig+0x2b4>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aae:	f7fd fe87 	bl	80017c0 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab6:	f7fd fe83 	bl	80017c0 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e14d      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f0      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80a0 	beq.w	8003c22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	4a0e      	ldr	r2, [pc, #56]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b00:	6413      	str	r3, [r2, #64]	; 0x40
 8003b02:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_OscConfig+0x2b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d121      	bne.n	8003b62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <HAL_RCC_OscConfig+0x2b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a07      	ldr	r2, [pc, #28]	; (8003b40 <HAL_RCC_OscConfig+0x2b8>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2a:	f7fd fe49 	bl	80017c0 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	e011      	b.n	8003b56 <HAL_RCC_OscConfig+0x2ce>
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	42470000 	.word	0x42470000
 8003b3c:	42470e80 	.word	0x42470e80
 8003b40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b44:	f7fd fe3c 	bl	80017c0 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e106      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b56:	4b85      	ldr	r3, [pc, #532]	; (8003d6c <HAL_RCC_OscConfig+0x4e4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d106      	bne.n	8003b78 <HAL_RCC_OscConfig+0x2f0>
 8003b6a:	4b81      	ldr	r3, [pc, #516]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6e:	4a80      	ldr	r2, [pc, #512]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	6713      	str	r3, [r2, #112]	; 0x70
 8003b76:	e01c      	b.n	8003bb2 <HAL_RCC_OscConfig+0x32a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b05      	cmp	r3, #5
 8003b7e:	d10c      	bne.n	8003b9a <HAL_RCC_OscConfig+0x312>
 8003b80:	4b7b      	ldr	r3, [pc, #492]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4a7a      	ldr	r2, [pc, #488]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003b86:	f043 0304 	orr.w	r3, r3, #4
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8c:	4b78      	ldr	r3, [pc, #480]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	4a77      	ldr	r2, [pc, #476]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6713      	str	r3, [r2, #112]	; 0x70
 8003b98:	e00b      	b.n	8003bb2 <HAL_RCC_OscConfig+0x32a>
 8003b9a:	4b75      	ldr	r3, [pc, #468]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9e:	4a74      	ldr	r2, [pc, #464]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba6:	4b72      	ldr	r3, [pc, #456]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	4a71      	ldr	r2, [pc, #452]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003bac:	f023 0304 	bic.w	r3, r3, #4
 8003bb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d015      	beq.n	8003be6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bba:	f7fd fe01 	bl	80017c0 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc0:	e00a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fd fdfd 	bl	80017c0 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e0c5      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd8:	4b65      	ldr	r3, [pc, #404]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ee      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x33a>
 8003be4:	e014      	b.n	8003c10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be6:	f7fd fdeb 	bl	80017c0 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bec:	e00a      	b.n	8003c04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bee:	f7fd fde7 	bl	80017c0 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e0af      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c04:	4b5a      	ldr	r3, [pc, #360]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ee      	bne.n	8003bee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d105      	bne.n	8003c22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c16:	4b56      	ldr	r3, [pc, #344]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4a55      	ldr	r2, [pc, #340]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 809b 	beq.w	8003d62 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c2c:	4b50      	ldr	r3, [pc, #320]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 030c 	and.w	r3, r3, #12
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d05c      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d141      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c40:	4b4c      	ldr	r3, [pc, #304]	; (8003d74 <HAL_RCC_OscConfig+0x4ec>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c46:	f7fd fdbb 	bl	80017c0 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fd fdb7 	bl	80017c0 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e081      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c60:	4b43      	ldr	r3, [pc, #268]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1f0      	bne.n	8003c4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	019b      	lsls	r3, r3, #6
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	085b      	lsrs	r3, r3, #1
 8003c84:	3b01      	subs	r3, #1
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	061b      	lsls	r3, r3, #24
 8003c90:	4937      	ldr	r1, [pc, #220]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c96:	4b37      	ldr	r3, [pc, #220]	; (8003d74 <HAL_RCC_OscConfig+0x4ec>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9c:	f7fd fd90 	bl	80017c0 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7fd fd8c 	bl	80017c0 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e056      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb6:	4b2e      	ldr	r3, [pc, #184]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x41c>
 8003cc2:	e04e      	b.n	8003d62 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <HAL_RCC_OscConfig+0x4ec>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7fd fd79 	bl	80017c0 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fd fd75 	bl	80017c0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e03f      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce4:	4b22      	ldr	r3, [pc, #136]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f0      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x44a>
 8003cf0:	e037      	b.n	8003d62 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e032      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cfe:	4b1c      	ldr	r3, [pc, #112]	; (8003d70 <HAL_RCC_OscConfig+0x4e8>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d028      	beq.n	8003d5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d121      	bne.n	8003d5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d11a      	bne.n	8003d5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d2e:	4013      	ands	r3, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d34:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d111      	bne.n	8003d5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	3b01      	subs	r3, #1
 8003d48:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40007000 	.word	0x40007000
 8003d70:	40023800 	.word	0x40023800
 8003d74:	42470060 	.word	0x42470060

08003d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0cc      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b68      	ldr	r3, [pc, #416]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d90c      	bls.n	8003db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b65      	ldr	r3, [pc, #404]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da2:	4b63      	ldr	r3, [pc, #396]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0b8      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d020      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dcc:	4b59      	ldr	r3, [pc, #356]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a58      	ldr	r2, [pc, #352]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de4:	4b53      	ldr	r3, [pc, #332]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4a52      	ldr	r2, [pc, #328]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df0:	4b50      	ldr	r3, [pc, #320]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	494d      	ldr	r1, [pc, #308]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d044      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	4b47      	ldr	r3, [pc, #284]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d119      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e07f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e36:	4b3f      	ldr	r3, [pc, #252]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e06f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e46:	4b3b      	ldr	r3, [pc, #236]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e067      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e56:	4b37      	ldr	r3, [pc, #220]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 0203 	bic.w	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4934      	ldr	r1, [pc, #208]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e68:	f7fd fcaa 	bl	80017c0 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e70:	f7fd fca6 	bl	80017c0 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e04f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 020c 	and.w	r2, r3, #12
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1eb      	bne.n	8003e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d20c      	bcs.n	8003ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e032      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ecc:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4916      	ldr	r1, [pc, #88]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	490e      	ldr	r1, [pc, #56]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003efe:	f000 f821 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 8003f02:	4602      	mov	r2, r0
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	490a      	ldr	r1, [pc, #40]	; (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003f10:	5ccb      	ldrb	r3, [r1, r3]
 8003f12:	fa22 f303 	lsr.w	r3, r2, r3
 8003f16:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd fc0a 	bl	8001738 <HAL_InitTick>

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023c00 	.word	0x40023c00
 8003f34:	40023800 	.word	0x40023800
 8003f38:	080089fc 	.word	0x080089fc
 8003f3c:	2000000c 	.word	0x2000000c
 8003f40:	20000014 	.word	0x20000014

08003f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f48:	b084      	sub	sp, #16
 8003f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	2300      	movs	r3, #0
 8003f56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f5c:	4b67      	ldr	r3, [pc, #412]	; (80040fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d00d      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x40>
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	f200 80bd 	bhi.w	80040e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x34>
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d003      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f76:	e0b7      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f78:	4b61      	ldr	r3, [pc, #388]	; (8004100 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f7a:	60bb      	str	r3, [r7, #8]
       break;
 8003f7c:	e0b7      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f7e:	4b61      	ldr	r3, [pc, #388]	; (8004104 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003f80:	60bb      	str	r3, [r7, #8]
      break;
 8003f82:	e0b4      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f84:	4b5d      	ldr	r3, [pc, #372]	; (80040fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f8e:	4b5b      	ldr	r3, [pc, #364]	; (80040fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d04d      	beq.n	8004036 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9a:	4b58      	ldr	r3, [pc, #352]	; (80040fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	ea02 0800 	and.w	r8, r2, r0
 8003fb2:	ea03 0901 	and.w	r9, r3, r1
 8003fb6:	4640      	mov	r0, r8
 8003fb8:	4649      	mov	r1, r9
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	014b      	lsls	r3, r1, #5
 8003fc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003fc8:	0142      	lsls	r2, r0, #5
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	ebb0 0008 	subs.w	r0, r0, r8
 8003fd2:	eb61 0109 	sbc.w	r1, r1, r9
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	018b      	lsls	r3, r1, #6
 8003fe0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003fe4:	0182      	lsls	r2, r0, #6
 8003fe6:	1a12      	subs	r2, r2, r0
 8003fe8:	eb63 0301 	sbc.w	r3, r3, r1
 8003fec:	f04f 0000 	mov.w	r0, #0
 8003ff0:	f04f 0100 	mov.w	r1, #0
 8003ff4:	00d9      	lsls	r1, r3, #3
 8003ff6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ffa:	00d0      	lsls	r0, r2, #3
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	eb12 0208 	adds.w	r2, r2, r8
 8004004:	eb43 0309 	adc.w	r3, r3, r9
 8004008:	f04f 0000 	mov.w	r0, #0
 800400c:	f04f 0100 	mov.w	r1, #0
 8004010:	0259      	lsls	r1, r3, #9
 8004012:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004016:	0250      	lsls	r0, r2, #9
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4610      	mov	r0, r2
 800401e:	4619      	mov	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	461a      	mov	r2, r3
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	f7fc f8d4 	bl	80001d4 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4613      	mov	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e04a      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004036:	4b31      	ldr	r3, [pc, #196]	; (80040fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	099b      	lsrs	r3, r3, #6
 800403c:	461a      	mov	r2, r3
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	ea02 0400 	and.w	r4, r2, r0
 800404e:	ea03 0501 	and.w	r5, r3, r1
 8004052:	4620      	mov	r0, r4
 8004054:	4629      	mov	r1, r5
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	014b      	lsls	r3, r1, #5
 8004060:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004064:	0142      	lsls	r2, r0, #5
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	1b00      	subs	r0, r0, r4
 800406c:	eb61 0105 	sbc.w	r1, r1, r5
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	018b      	lsls	r3, r1, #6
 800407a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800407e:	0182      	lsls	r2, r0, #6
 8004080:	1a12      	subs	r2, r2, r0
 8004082:	eb63 0301 	sbc.w	r3, r3, r1
 8004086:	f04f 0000 	mov.w	r0, #0
 800408a:	f04f 0100 	mov.w	r1, #0
 800408e:	00d9      	lsls	r1, r3, #3
 8004090:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004094:	00d0      	lsls	r0, r2, #3
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	1912      	adds	r2, r2, r4
 800409c:	eb45 0303 	adc.w	r3, r5, r3
 80040a0:	f04f 0000 	mov.w	r0, #0
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	0299      	lsls	r1, r3, #10
 80040aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040ae:	0290      	lsls	r0, r2, #10
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	f7fc f888 	bl	80001d4 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	3301      	adds	r3, #1
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	60bb      	str	r3, [r7, #8]
      break;
 80040e6:	e002      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040ea:	60bb      	str	r3, [r7, #8]
      break;
 80040ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ee:	68bb      	ldr	r3, [r7, #8]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	00f42400 	.word	0x00f42400
 8004104:	007a1200 	.word	0x007a1200

08004108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <HAL_RCC_GetHCLKFreq+0x14>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	2000000c 	.word	0x2000000c

08004120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004124:	f7ff fff0 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004128:	4602      	mov	r2, r0
 800412a:	4b05      	ldr	r3, [pc, #20]	; (8004140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	0a9b      	lsrs	r3, r3, #10
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4903      	ldr	r1, [pc, #12]	; (8004144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004136:	5ccb      	ldrb	r3, [r1, r3]
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40023800 	.word	0x40023800
 8004144:	08008a0c 	.word	0x08008a0c

08004148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800414c:	f7ff ffdc 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0b5b      	lsrs	r3, r3, #13
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	; (800416c <HAL_RCC_GetPCLK2Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40023800 	.word	0x40023800
 800416c:	08008a0c 	.word	0x08008a0c

08004170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e03f      	b.n	8004202 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fc fd42 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2224      	movs	r2, #36	; 0x24
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 ff3f 	bl	8005038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	; 0x30
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	4613      	mov	r3, r2
 8004218:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b20      	cmp	r3, #32
 8004224:	d165      	bne.n	80042f2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_UART_Transmit_DMA+0x26>
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e05e      	b.n	80042f4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_UART_Transmit_DMA+0x38>
 8004240:	2302      	movs	r3, #2
 8004242:	e057      	b.n	80042f4 <HAL_UART_Transmit_DMA+0xe8>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	88fa      	ldrh	r2, [r7, #6]
 8004256:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2221      	movs	r2, #33	; 0x21
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004270:	4a22      	ldr	r2, [pc, #136]	; (80042fc <HAL_UART_Transmit_DMA+0xf0>)
 8004272:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004278:	4a21      	ldr	r2, [pc, #132]	; (8004300 <HAL_UART_Transmit_DMA+0xf4>)
 800427a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004280:	4a20      	ldr	r2, [pc, #128]	; (8004304 <HAL_UART_Transmit_DMA+0xf8>)
 8004282:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004288:	2200      	movs	r2, #0
 800428a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800428c:	f107 0308 	add.w	r3, r7, #8
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	6819      	ldr	r1, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3304      	adds	r3, #4
 80042a0:	461a      	mov	r2, r3
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	f7fd fc7c 	bl	8001ba0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042b0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3314      	adds	r3, #20
 80042c0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	617b      	str	r3, [r7, #20]
   return(result);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3314      	adds	r3, #20
 80042d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042da:	627a      	str	r2, [r7, #36]	; 0x24
 80042dc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	6a39      	ldr	r1, [r7, #32]
 80042e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e2:	e841 2300 	strex	r3, r2, [r1]
 80042e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e5      	bne.n	80042ba <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3730      	adds	r7, #48	; 0x30
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	080048d9 	.word	0x080048d9
 8004300:	08004973 	.word	0x08004973
 8004304:	08004aeb 	.word	0x08004aeb

08004308 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	4613      	mov	r3, r2
 8004314:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b20      	cmp	r3, #32
 8004320:	d11d      	bne.n	800435e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_UART_Receive_DMA+0x26>
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e016      	b.n	8004360 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_UART_Receive_DMA+0x38>
 800433c:	2302      	movs	r3, #2
 800433e:	e00f      	b.n	8004360 <HAL_UART_Receive_DMA+0x58>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	461a      	mov	r2, r3
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 fc13 	bl	8004b80 <UART_Start_Receive_DMA>
 800435a:	4603      	mov	r3, r0
 800435c:	e000      	b.n	8004360 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800435e:	2302      	movs	r3, #2
  }
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b0ba      	sub	sp, #232	; 0xe8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800438e:	2300      	movs	r3, #0
 8004390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004394:	2300      	movs	r3, #0
 8004396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10f      	bne.n	80043ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <HAL_UART_IRQHandler+0x66>
 80043ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fd7b 	bl	8004ec2 <UART_Receive_IT>
      return;
 80043cc:	e256      	b.n	800487c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80de 	beq.w	8004594 <HAL_UART_IRQHandler+0x22c>
 80043d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80d1 	beq.w	8004594 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00b      	beq.n	8004416 <HAL_UART_IRQHandler+0xae>
 80043fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f043 0201 	orr.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00b      	beq.n	800443a <HAL_UART_IRQHandler+0xd2>
 8004422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f043 0202 	orr.w	r2, r3, #2
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800443a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_UART_IRQHandler+0xf6>
 8004446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0204 	orr.w	r2, r3, #4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800445e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d011      	beq.n	800448e <HAL_UART_IRQHandler+0x126>
 800446a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d105      	bne.n	8004482 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f043 0208 	orr.w	r2, r3, #8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 81ed 	beq.w	8004872 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_UART_IRQHandler+0x14e>
 80044a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fd06 	bl	8004ec2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	bf0c      	ite	eq
 80044c4:	2301      	moveq	r3, #1
 80044c6:	2300      	movne	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d103      	bne.n	80044e2 <HAL_UART_IRQHandler+0x17a>
 80044da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d04f      	beq.n	8004582 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fc0e 	bl	8004d04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b40      	cmp	r3, #64	; 0x40
 80044f4:	d141      	bne.n	800457a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3314      	adds	r3, #20
 80044fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800450c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004522:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800452e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800453a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1d9      	bne.n	80044f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	2b00      	cmp	r3, #0
 8004548:	d013      	beq.n	8004572 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	4a7d      	ldr	r2, [pc, #500]	; (8004744 <HAL_UART_IRQHandler+0x3dc>)
 8004550:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	4618      	mov	r0, r3
 8004558:	f7fd fbea 	bl	8001d30 <HAL_DMA_Abort_IT>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800456c:	4610      	mov	r0, r2
 800456e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004570:	e00e      	b.n	8004590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f99a 	bl	80048ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004578:	e00a      	b.n	8004590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f996 	bl	80048ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004580:	e006      	b.n	8004590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f992 	bl	80048ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800458e:	e170      	b.n	8004872 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004590:	bf00      	nop
    return;
 8004592:	e16e      	b.n	8004872 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	2b01      	cmp	r3, #1
 800459a:	f040 814a 	bne.w	8004832 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800459e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8143 	beq.w	8004832 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 813c 	beq.w	8004832 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	f040 80b4 	bne.w	8004748 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8140 	beq.w	8004876 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045fe:	429a      	cmp	r2, r3
 8004600:	f080 8139 	bcs.w	8004876 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800460a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004616:	f000 8088 	beq.w	800472a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	330c      	adds	r3, #12
 8004620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	330c      	adds	r3, #12
 8004642:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004646:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800464a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004652:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800465e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1d9      	bne.n	800461a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3314      	adds	r3, #20
 800466c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3314      	adds	r3, #20
 8004686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800468a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800468e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004692:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800469c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e1      	bne.n	8004666 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3314      	adds	r3, #20
 80046a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3314      	adds	r3, #20
 80046c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e3      	bne.n	80046a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	330c      	adds	r3, #12
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046fa:	f023 0310 	bic.w	r3, r3, #16
 80046fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800470c:	65ba      	str	r2, [r7, #88]	; 0x58
 800470e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004714:	e841 2300 	strex	r3, r2, [r1]
 8004718:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800471a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e3      	bne.n	80046e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	4618      	mov	r0, r3
 8004726:	f7fd fa93 	bl	8001c50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004732:	b29b      	uxth	r3, r3
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	b29b      	uxth	r3, r3
 8004738:	4619      	mov	r1, r3
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8c0 	bl	80048c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004740:	e099      	b.n	8004876 <HAL_UART_IRQHandler+0x50e>
 8004742:	bf00      	nop
 8004744:	08004dcb 	.word	0x08004dcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004750:	b29b      	uxth	r3, r3
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 808b 	beq.w	800487a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8086 	beq.w	800487a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004784:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	330c      	adds	r3, #12
 800478e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004792:	647a      	str	r2, [r7, #68]	; 0x44
 8004794:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e3      	bne.n	800476e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3314      	adds	r3, #20
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	623b      	str	r3, [r7, #32]
   return(result);
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3314      	adds	r3, #20
 80047c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047ca:	633a      	str	r2, [r7, #48]	; 0x30
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e3      	bne.n	80047a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	e853 3f00 	ldrex	r3, [r3]
 80047fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0310 	bic.w	r3, r3, #16
 8004802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004810:	61fa      	str	r2, [r7, #28]
 8004812:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	69b9      	ldr	r1, [r7, #24]
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	617b      	str	r3, [r7, #20]
   return(result);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e3      	bne.n	80047ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004828:	4619      	mov	r1, r3
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f848 	bl	80048c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004830:	e023      	b.n	800487a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <HAL_UART_IRQHandler+0x4ea>
 800483e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fad1 	bl	8004df2 <UART_Transmit_IT>
    return;
 8004850:	e014      	b.n	800487c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00e      	beq.n	800487c <HAL_UART_IRQHandler+0x514>
 800485e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fb11 	bl	8004e92 <UART_EndTransmit_IT>
    return;
 8004870:	e004      	b.n	800487c <HAL_UART_IRQHandler+0x514>
    return;
 8004872:	bf00      	nop
 8004874:	e002      	b.n	800487c <HAL_UART_IRQHandler+0x514>
      return;
 8004876:	bf00      	nop
 8004878:	e000      	b.n	800487c <HAL_UART_IRQHandler+0x514>
      return;
 800487a:	bf00      	nop
  }
}
 800487c:	37e8      	adds	r7, #232	; 0xe8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop

08004884 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b090      	sub	sp, #64	; 0x40
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d137      	bne.n	8004964 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80048f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f6:	2200      	movs	r2, #0
 80048f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3314      	adds	r3, #20
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	623b      	str	r3, [r7, #32]
   return(result);
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004910:	63bb      	str	r3, [r7, #56]	; 0x38
 8004912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3314      	adds	r3, #20
 8004918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800491a:	633a      	str	r2, [r7, #48]	; 0x30
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004922:	e841 2300 	strex	r3, r2, [r1]
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1e5      	bne.n	80048fa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800492e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	60fb      	str	r3, [r7, #12]
   return(result);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
 8004946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	330c      	adds	r3, #12
 800494c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800494e:	61fa      	str	r2, [r7, #28]
 8004950:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	69b9      	ldr	r1, [r7, #24]
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	617b      	str	r3, [r7, #20]
   return(result);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e5      	bne.n	800492e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004962:	e002      	b.n	800496a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004964:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004966:	f7fc f8f5 	bl	8000b54 <HAL_UART_TxCpltCallback>
}
 800496a:	bf00      	nop
 800496c:	3740      	adds	r7, #64	; 0x40
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7ff ff7f 	bl	8004884 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b09c      	sub	sp, #112	; 0x70
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d172      	bne.n	8004a90 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80049aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ac:	2200      	movs	r2, #0
 80049ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80049c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	330c      	adds	r3, #12
 80049ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80049d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e5      	bne.n	80049b0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3314      	adds	r3, #20
 80049ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	667b      	str	r3, [r7, #100]	; 0x64
 80049fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3314      	adds	r3, #20
 8004a02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a04:	647a      	str	r2, [r7, #68]	; 0x44
 8004a06:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a0c:	e841 2300 	strex	r3, r2, [r1]
 8004a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e5      	bne.n	80049e4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3314      	adds	r3, #20
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	623b      	str	r3, [r7, #32]
   return(result);
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a2e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3314      	adds	r3, #20
 8004a36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a38:	633a      	str	r2, [r7, #48]	; 0x30
 8004a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e5      	bne.n	8004a18 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d119      	bne.n	8004a90 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0310 	bic.w	r3, r3, #16
 8004a72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a7c:	61fa      	str	r2, [r7, #28]
 8004a7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	69b9      	ldr	r1, [r7, #24]
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	617b      	str	r3, [r7, #20]
   return(result);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e5      	bne.n	8004a5c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d106      	bne.n	8004aa6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004aa0:	f7ff ff0e 	bl	80048c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004aa4:	e002      	b.n	8004aac <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004aa6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004aa8:	f7fc f870 	bl	8000b8c <HAL_UART_RxCpltCallback>
}
 8004aac:	bf00      	nop
 8004aae:	3770      	adds	r7, #112	; 0x70
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d108      	bne.n	8004adc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff fef3 	bl	80048c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ada:	e002      	b.n	8004ae2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f7ff fedb 	bl	8004898 <HAL_UART_RxHalfCpltCallback>
}
 8004ae2:	bf00      	nop
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b06:	2b80      	cmp	r3, #128	; 0x80
 8004b08:	bf0c      	ite	eq
 8004b0a:	2301      	moveq	r3, #1
 8004b0c:	2300      	movne	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b21      	cmp	r3, #33	; 0x21
 8004b1c:	d108      	bne.n	8004b30 <UART_DMAError+0x46>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2200      	movs	r2, #0
 8004b28:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	f000 f8c2 	bl	8004cb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b40      	cmp	r3, #64	; 0x40
 8004b3c:	bf0c      	ite	eq
 8004b3e:	2301      	moveq	r3, #1
 8004b40:	2300      	movne	r3, #0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b22      	cmp	r3, #34	; 0x22
 8004b50:	d108      	bne.n	8004b64 <UART_DMAError+0x7a>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004b5e:	68b8      	ldr	r0, [r7, #8]
 8004b60:	f000 f8d0 	bl	8004d04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	f043 0210 	orr.w	r2, r3, #16
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b70:	68b8      	ldr	r0, [r7, #8]
 8004b72:	f7ff fe9b 	bl	80048ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b098      	sub	sp, #96	; 0x60
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	88fa      	ldrh	r2, [r7, #6]
 8004b98:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2222      	movs	r2, #34	; 0x22
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	4a3e      	ldr	r2, [pc, #248]	; (8004ca8 <UART_Start_Receive_DMA+0x128>)
 8004bae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	4a3d      	ldr	r2, [pc, #244]	; (8004cac <UART_Start_Receive_DMA+0x12c>)
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	4a3c      	ldr	r2, [pc, #240]	; (8004cb0 <UART_Start_Receive_DMA+0x130>)
 8004bbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004bc8:	f107 0308 	add.w	r3, r7, #8
 8004bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4619      	mov	r1, r3
 8004bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	f7fc ffde 	bl	8001ba0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	330c      	adds	r3, #12
 8004c08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c18:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	330c      	adds	r3, #12
 8004c20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c22:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004c24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e5      	bne.n	8004c02 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3314      	adds	r3, #20
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3314      	adds	r3, #20
 8004c54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c56:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e5      	bne.n	8004c36 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3314      	adds	r3, #20
 8004c70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	e853 3f00 	ldrex	r3, [r3]
 8004c78:	617b      	str	r3, [r7, #20]
   return(result);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c80:	653b      	str	r3, [r7, #80]	; 0x50
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3314      	adds	r3, #20
 8004c88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c8a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6a39      	ldr	r1, [r7, #32]
 8004c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e5      	bne.n	8004c6a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3760      	adds	r7, #96	; 0x60
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	0800498f 	.word	0x0800498f
 8004cac:	08004ab5 	.word	0x08004ab5
 8004cb0:	08004aeb 	.word	0x08004aeb

08004cb4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b089      	sub	sp, #36	; 0x24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	330c      	adds	r3, #12
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	61ba      	str	r2, [r7, #24]
 8004cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	6979      	ldr	r1, [r7, #20]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e5      	bne.n	8004cbc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004cf8:	bf00      	nop
 8004cfa:	3724      	adds	r7, #36	; 0x24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b095      	sub	sp, #84	; 0x54
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	330c      	adds	r3, #12
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d2c:	643a      	str	r2, [r7, #64]	; 0x40
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e5      	bne.n	8004d0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3314      	adds	r3, #20
 8004d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3314      	adds	r3, #20
 8004d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e5      	bne.n	8004d40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d119      	bne.n	8004db0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f023 0310 	bic.w	r3, r3, #16
 8004d92:	647b      	str	r3, [r7, #68]	; 0x44
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d9c:	61ba      	str	r2, [r7, #24]
 8004d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6979      	ldr	r1, [r7, #20]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	613b      	str	r3, [r7, #16]
   return(result);
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e5      	bne.n	8004d7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004dbe:	bf00      	nop
 8004dc0:	3754      	adds	r7, #84	; 0x54
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f7ff fd61 	bl	80048ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b21      	cmp	r3, #33	; 0x21
 8004e04:	d13e      	bne.n	8004e84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0e:	d114      	bne.n	8004e3a <UART_Transmit_IT+0x48>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d110      	bne.n	8004e3a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	1c9a      	adds	r2, r3, #2
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	621a      	str	r2, [r3, #32]
 8004e38:	e008      	b.n	8004e4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	1c59      	adds	r1, r3, #1
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6211      	str	r1, [r2, #32]
 8004e44:	781a      	ldrb	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10f      	bne.n	8004e80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e000      	b.n	8004e86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fb fe4e 	bl	8000b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b08c      	sub	sp, #48	; 0x30
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b22      	cmp	r3, #34	; 0x22
 8004ed4:	f040 80ab 	bne.w	800502e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee0:	d117      	bne.n	8004f12 <UART_Receive_IT+0x50>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d113      	bne.n	8004f12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	1c9a      	adds	r2, r3, #2
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f10:	e026      	b.n	8004f60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f24:	d007      	beq.n	8004f36 <UART_Receive_IT+0x74>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10a      	bne.n	8004f44 <UART_Receive_IT+0x82>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	e008      	b.n	8004f56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d15a      	bne.n	800502a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0220 	bic.w	r2, r2, #32
 8004f82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695a      	ldr	r2, [r3, #20]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d135      	bne.n	8005020 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	330c      	adds	r3, #12
 8004fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f023 0310 	bic.w	r3, r3, #16
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fda:	623a      	str	r2, [r7, #32]
 8004fdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	69f9      	ldr	r1, [r7, #28]
 8004fe0:	6a3a      	ldr	r2, [r7, #32]
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e5      	bne.n	8004fba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0310 	and.w	r3, r3, #16
 8004ff8:	2b10      	cmp	r3, #16
 8004ffa:	d10a      	bne.n	8005012 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005016:	4619      	mov	r1, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff fc51 	bl	80048c0 <HAL_UARTEx_RxEventCallback>
 800501e:	e002      	b.n	8005026 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7fb fdb3 	bl	8000b8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	e002      	b.n	8005030 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	e000      	b.n	8005030 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800502e:	2302      	movs	r3, #2
  }
}
 8005030:	4618      	mov	r0, r3
 8005032:	3730      	adds	r7, #48	; 0x30
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503c:	b09f      	sub	sp, #124	; 0x7c
 800503e:	af00      	add	r7, sp, #0
 8005040:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800504c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504e:	68d9      	ldr	r1, [r3, #12]
 8005050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	ea40 0301 	orr.w	r3, r0, r1
 8005058:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800505a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	431a      	orrs	r2, r3
 8005064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	431a      	orrs	r2, r3
 800506a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	4313      	orrs	r3, r2
 8005070:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800507c:	f021 010c 	bic.w	r1, r1, #12
 8005080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005086:	430b      	orrs	r3, r1
 8005088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800508a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005096:	6999      	ldr	r1, [r3, #24]
 8005098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	ea40 0301 	orr.w	r3, r0, r1
 80050a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4bc5      	ldr	r3, [pc, #788]	; (80053bc <UART_SetConfig+0x384>)
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d004      	beq.n	80050b6 <UART_SetConfig+0x7e>
 80050ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	4bc3      	ldr	r3, [pc, #780]	; (80053c0 <UART_SetConfig+0x388>)
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d103      	bne.n	80050be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050b6:	f7ff f847 	bl	8004148 <HAL_RCC_GetPCLK2Freq>
 80050ba:	6778      	str	r0, [r7, #116]	; 0x74
 80050bc:	e002      	b.n	80050c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050be:	f7ff f82f 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 80050c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050cc:	f040 80b6 	bne.w	800523c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050d2:	461c      	mov	r4, r3
 80050d4:	f04f 0500 	mov.w	r5, #0
 80050d8:	4622      	mov	r2, r4
 80050da:	462b      	mov	r3, r5
 80050dc:	1891      	adds	r1, r2, r2
 80050de:	6439      	str	r1, [r7, #64]	; 0x40
 80050e0:	415b      	adcs	r3, r3
 80050e2:	647b      	str	r3, [r7, #68]	; 0x44
 80050e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050e8:	1912      	adds	r2, r2, r4
 80050ea:	eb45 0303 	adc.w	r3, r5, r3
 80050ee:	f04f 0000 	mov.w	r0, #0
 80050f2:	f04f 0100 	mov.w	r1, #0
 80050f6:	00d9      	lsls	r1, r3, #3
 80050f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050fc:	00d0      	lsls	r0, r2, #3
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	1911      	adds	r1, r2, r4
 8005104:	6639      	str	r1, [r7, #96]	; 0x60
 8005106:	416b      	adcs	r3, r5
 8005108:	667b      	str	r3, [r7, #100]	; 0x64
 800510a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	461a      	mov	r2, r3
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	1891      	adds	r1, r2, r2
 8005116:	63b9      	str	r1, [r7, #56]	; 0x38
 8005118:	415b      	adcs	r3, r3
 800511a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800511c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005120:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005124:	f7fb f856 	bl	80001d4 <__aeabi_uldivmod>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4ba5      	ldr	r3, [pc, #660]	; (80053c4 <UART_SetConfig+0x38c>)
 800512e:	fba3 2302 	umull	r2, r3, r3, r2
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	011e      	lsls	r6, r3, #4
 8005136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005138:	461c      	mov	r4, r3
 800513a:	f04f 0500 	mov.w	r5, #0
 800513e:	4622      	mov	r2, r4
 8005140:	462b      	mov	r3, r5
 8005142:	1891      	adds	r1, r2, r2
 8005144:	6339      	str	r1, [r7, #48]	; 0x30
 8005146:	415b      	adcs	r3, r3
 8005148:	637b      	str	r3, [r7, #52]	; 0x34
 800514a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800514e:	1912      	adds	r2, r2, r4
 8005150:	eb45 0303 	adc.w	r3, r5, r3
 8005154:	f04f 0000 	mov.w	r0, #0
 8005158:	f04f 0100 	mov.w	r1, #0
 800515c:	00d9      	lsls	r1, r3, #3
 800515e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005162:	00d0      	lsls	r0, r2, #3
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	1911      	adds	r1, r2, r4
 800516a:	65b9      	str	r1, [r7, #88]	; 0x58
 800516c:	416b      	adcs	r3, r5
 800516e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	461a      	mov	r2, r3
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	1891      	adds	r1, r2, r2
 800517c:	62b9      	str	r1, [r7, #40]	; 0x28
 800517e:	415b      	adcs	r3, r3
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005186:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800518a:	f7fb f823 	bl	80001d4 <__aeabi_uldivmod>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4b8c      	ldr	r3, [pc, #560]	; (80053c4 <UART_SetConfig+0x38c>)
 8005194:	fba3 1302 	umull	r1, r3, r3, r2
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	2164      	movs	r1, #100	; 0x64
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	3332      	adds	r3, #50	; 0x32
 80051a6:	4a87      	ldr	r2, [pc, #540]	; (80053c4 <UART_SetConfig+0x38c>)
 80051a8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051b4:	441e      	add	r6, r3
 80051b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051b8:	4618      	mov	r0, r3
 80051ba:	f04f 0100 	mov.w	r1, #0
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	1894      	adds	r4, r2, r2
 80051c4:	623c      	str	r4, [r7, #32]
 80051c6:	415b      	adcs	r3, r3
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051ce:	1812      	adds	r2, r2, r0
 80051d0:	eb41 0303 	adc.w	r3, r1, r3
 80051d4:	f04f 0400 	mov.w	r4, #0
 80051d8:	f04f 0500 	mov.w	r5, #0
 80051dc:	00dd      	lsls	r5, r3, #3
 80051de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051e2:	00d4      	lsls	r4, r2, #3
 80051e4:	4622      	mov	r2, r4
 80051e6:	462b      	mov	r3, r5
 80051e8:	1814      	adds	r4, r2, r0
 80051ea:	653c      	str	r4, [r7, #80]	; 0x50
 80051ec:	414b      	adcs	r3, r1
 80051ee:	657b      	str	r3, [r7, #84]	; 0x54
 80051f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	461a      	mov	r2, r3
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	1891      	adds	r1, r2, r2
 80051fc:	61b9      	str	r1, [r7, #24]
 80051fe:	415b      	adcs	r3, r3
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005206:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800520a:	f7fa ffe3 	bl	80001d4 <__aeabi_uldivmod>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4b6c      	ldr	r3, [pc, #432]	; (80053c4 <UART_SetConfig+0x38c>)
 8005214:	fba3 1302 	umull	r1, r3, r3, r2
 8005218:	095b      	lsrs	r3, r3, #5
 800521a:	2164      	movs	r1, #100	; 0x64
 800521c:	fb01 f303 	mul.w	r3, r1, r3
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	3332      	adds	r3, #50	; 0x32
 8005226:	4a67      	ldr	r2, [pc, #412]	; (80053c4 <UART_SetConfig+0x38c>)
 8005228:	fba2 2303 	umull	r2, r3, r2, r3
 800522c:	095b      	lsrs	r3, r3, #5
 800522e:	f003 0207 	and.w	r2, r3, #7
 8005232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4432      	add	r2, r6
 8005238:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800523a:	e0b9      	b.n	80053b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800523c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800523e:	461c      	mov	r4, r3
 8005240:	f04f 0500 	mov.w	r5, #0
 8005244:	4622      	mov	r2, r4
 8005246:	462b      	mov	r3, r5
 8005248:	1891      	adds	r1, r2, r2
 800524a:	6139      	str	r1, [r7, #16]
 800524c:	415b      	adcs	r3, r3
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005254:	1912      	adds	r2, r2, r4
 8005256:	eb45 0303 	adc.w	r3, r5, r3
 800525a:	f04f 0000 	mov.w	r0, #0
 800525e:	f04f 0100 	mov.w	r1, #0
 8005262:	00d9      	lsls	r1, r3, #3
 8005264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005268:	00d0      	lsls	r0, r2, #3
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	eb12 0804 	adds.w	r8, r2, r4
 8005272:	eb43 0905 	adc.w	r9, r3, r5
 8005276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4618      	mov	r0, r3
 800527c:	f04f 0100 	mov.w	r1, #0
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	008b      	lsls	r3, r1, #2
 800528a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800528e:	0082      	lsls	r2, r0, #2
 8005290:	4640      	mov	r0, r8
 8005292:	4649      	mov	r1, r9
 8005294:	f7fa ff9e 	bl	80001d4 <__aeabi_uldivmod>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4b49      	ldr	r3, [pc, #292]	; (80053c4 <UART_SetConfig+0x38c>)
 800529e:	fba3 2302 	umull	r2, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	011e      	lsls	r6, r3, #4
 80052a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a8:	4618      	mov	r0, r3
 80052aa:	f04f 0100 	mov.w	r1, #0
 80052ae:	4602      	mov	r2, r0
 80052b0:	460b      	mov	r3, r1
 80052b2:	1894      	adds	r4, r2, r2
 80052b4:	60bc      	str	r4, [r7, #8]
 80052b6:	415b      	adcs	r3, r3
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052be:	1812      	adds	r2, r2, r0
 80052c0:	eb41 0303 	adc.w	r3, r1, r3
 80052c4:	f04f 0400 	mov.w	r4, #0
 80052c8:	f04f 0500 	mov.w	r5, #0
 80052cc:	00dd      	lsls	r5, r3, #3
 80052ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052d2:	00d4      	lsls	r4, r2, #3
 80052d4:	4622      	mov	r2, r4
 80052d6:	462b      	mov	r3, r5
 80052d8:	1814      	adds	r4, r2, r0
 80052da:	64bc      	str	r4, [r7, #72]	; 0x48
 80052dc:	414b      	adcs	r3, r1
 80052de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f04f 0100 	mov.w	r1, #0
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	008b      	lsls	r3, r1, #2
 80052f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052f8:	0082      	lsls	r2, r0, #2
 80052fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80052fe:	f7fa ff69 	bl	80001d4 <__aeabi_uldivmod>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4b2f      	ldr	r3, [pc, #188]	; (80053c4 <UART_SetConfig+0x38c>)
 8005308:	fba3 1302 	umull	r1, r3, r3, r2
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	2164      	movs	r1, #100	; 0x64
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	3332      	adds	r3, #50	; 0x32
 800531a:	4a2a      	ldr	r2, [pc, #168]	; (80053c4 <UART_SetConfig+0x38c>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005326:	441e      	add	r6, r3
 8005328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800532a:	4618      	mov	r0, r3
 800532c:	f04f 0100 	mov.w	r1, #0
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	1894      	adds	r4, r2, r2
 8005336:	603c      	str	r4, [r7, #0]
 8005338:	415b      	adcs	r3, r3
 800533a:	607b      	str	r3, [r7, #4]
 800533c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005340:	1812      	adds	r2, r2, r0
 8005342:	eb41 0303 	adc.w	r3, r1, r3
 8005346:	f04f 0400 	mov.w	r4, #0
 800534a:	f04f 0500 	mov.w	r5, #0
 800534e:	00dd      	lsls	r5, r3, #3
 8005350:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005354:	00d4      	lsls	r4, r2, #3
 8005356:	4622      	mov	r2, r4
 8005358:	462b      	mov	r3, r5
 800535a:	eb12 0a00 	adds.w	sl, r2, r0
 800535e:	eb43 0b01 	adc.w	fp, r3, r1
 8005362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4618      	mov	r0, r3
 8005368:	f04f 0100 	mov.w	r1, #0
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	008b      	lsls	r3, r1, #2
 8005376:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800537a:	0082      	lsls	r2, r0, #2
 800537c:	4650      	mov	r0, sl
 800537e:	4659      	mov	r1, fp
 8005380:	f7fa ff28 	bl	80001d4 <__aeabi_uldivmod>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4b0e      	ldr	r3, [pc, #56]	; (80053c4 <UART_SetConfig+0x38c>)
 800538a:	fba3 1302 	umull	r1, r3, r3, r2
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	2164      	movs	r1, #100	; 0x64
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	3332      	adds	r3, #50	; 0x32
 800539c:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <UART_SetConfig+0x38c>)
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	f003 020f 	and.w	r2, r3, #15
 80053a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4432      	add	r2, r6
 80053ae:	609a      	str	r2, [r3, #8]
}
 80053b0:	bf00      	nop
 80053b2:	377c      	adds	r7, #124	; 0x7c
 80053b4:	46bd      	mov	sp, r7
 80053b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ba:	bf00      	nop
 80053bc:	40011000 	.word	0x40011000
 80053c0:	40011400 	.word	0x40011400
 80053c4:	51eb851f 	.word	0x51eb851f

080053c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053c8:	b084      	sub	sp, #16
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	f107 001c 	add.w	r0, r7, #28
 80053d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d122      	bne.n	8005426 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540a:	2b01      	cmp	r3, #1
 800540c:	d105      	bne.n	800541a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f001 fb1c 	bl	8006a58 <USB_CoreReset>
 8005420:	4603      	mov	r3, r0
 8005422:	73fb      	strb	r3, [r7, #15]
 8005424:	e01a      	b.n	800545c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f001 fb10 	bl	8006a58 <USB_CoreReset>
 8005438:	4603      	mov	r3, r0
 800543a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800543c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	639a      	str	r2, [r3, #56]	; 0x38
 800544e:	e005      	b.n	800545c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	2b01      	cmp	r3, #1
 8005460:	d10b      	bne.n	800547a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f043 0206 	orr.w	r2, r3, #6
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f043 0220 	orr.w	r2, r3, #32
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800547a:	7bfb      	ldrb	r3, [r7, #15]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005486:	b004      	add	sp, #16
 8005488:	4770      	bx	lr
	...

0800548c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	4613      	mov	r3, r2
 8005498:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d165      	bne.n	800556c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4a41      	ldr	r2, [pc, #260]	; (80055a8 <USB_SetTurnaroundTime+0x11c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d906      	bls.n	80054b6 <USB_SetTurnaroundTime+0x2a>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4a40      	ldr	r2, [pc, #256]	; (80055ac <USB_SetTurnaroundTime+0x120>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d202      	bcs.n	80054b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80054b0:	230f      	movs	r3, #15
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e062      	b.n	800557c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4a3c      	ldr	r2, [pc, #240]	; (80055ac <USB_SetTurnaroundTime+0x120>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d306      	bcc.n	80054cc <USB_SetTurnaroundTime+0x40>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4a3b      	ldr	r2, [pc, #236]	; (80055b0 <USB_SetTurnaroundTime+0x124>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d202      	bcs.n	80054cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054c6:	230e      	movs	r3, #14
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e057      	b.n	800557c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4a38      	ldr	r2, [pc, #224]	; (80055b0 <USB_SetTurnaroundTime+0x124>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d306      	bcc.n	80054e2 <USB_SetTurnaroundTime+0x56>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4a37      	ldr	r2, [pc, #220]	; (80055b4 <USB_SetTurnaroundTime+0x128>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d202      	bcs.n	80054e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054dc:	230d      	movs	r3, #13
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e04c      	b.n	800557c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4a33      	ldr	r2, [pc, #204]	; (80055b4 <USB_SetTurnaroundTime+0x128>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d306      	bcc.n	80054f8 <USB_SetTurnaroundTime+0x6c>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4a32      	ldr	r2, [pc, #200]	; (80055b8 <USB_SetTurnaroundTime+0x12c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d802      	bhi.n	80054f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054f2:	230c      	movs	r3, #12
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	e041      	b.n	800557c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4a2f      	ldr	r2, [pc, #188]	; (80055b8 <USB_SetTurnaroundTime+0x12c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d906      	bls.n	800550e <USB_SetTurnaroundTime+0x82>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4a2e      	ldr	r2, [pc, #184]	; (80055bc <USB_SetTurnaroundTime+0x130>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d802      	bhi.n	800550e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005508:	230b      	movs	r3, #11
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	e036      	b.n	800557c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4a2a      	ldr	r2, [pc, #168]	; (80055bc <USB_SetTurnaroundTime+0x130>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d906      	bls.n	8005524 <USB_SetTurnaroundTime+0x98>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4a29      	ldr	r2, [pc, #164]	; (80055c0 <USB_SetTurnaroundTime+0x134>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d802      	bhi.n	8005524 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800551e:	230a      	movs	r3, #10
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e02b      	b.n	800557c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4a26      	ldr	r2, [pc, #152]	; (80055c0 <USB_SetTurnaroundTime+0x134>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d906      	bls.n	800553a <USB_SetTurnaroundTime+0xae>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4a25      	ldr	r2, [pc, #148]	; (80055c4 <USB_SetTurnaroundTime+0x138>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d202      	bcs.n	800553a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005534:	2309      	movs	r3, #9
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	e020      	b.n	800557c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <USB_SetTurnaroundTime+0x138>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d306      	bcc.n	8005550 <USB_SetTurnaroundTime+0xc4>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4a20      	ldr	r2, [pc, #128]	; (80055c8 <USB_SetTurnaroundTime+0x13c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d802      	bhi.n	8005550 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800554a:	2308      	movs	r3, #8
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	e015      	b.n	800557c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4a1d      	ldr	r2, [pc, #116]	; (80055c8 <USB_SetTurnaroundTime+0x13c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d906      	bls.n	8005566 <USB_SetTurnaroundTime+0xda>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4a1c      	ldr	r2, [pc, #112]	; (80055cc <USB_SetTurnaroundTime+0x140>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d202      	bcs.n	8005566 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005560:	2307      	movs	r3, #7
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e00a      	b.n	800557c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005566:	2306      	movs	r3, #6
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e007      	b.n	800557c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d102      	bne.n	8005578 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005572:	2309      	movs	r3, #9
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	e001      	b.n	800557c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005578:	2309      	movs	r3, #9
 800557a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	029b      	lsls	r3, r3, #10
 8005590:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005594:	431a      	orrs	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	00d8acbf 	.word	0x00d8acbf
 80055ac:	00e4e1c0 	.word	0x00e4e1c0
 80055b0:	00f42400 	.word	0x00f42400
 80055b4:	01067380 	.word	0x01067380
 80055b8:	011a499f 	.word	0x011a499f
 80055bc:	01312cff 	.word	0x01312cff
 80055c0:	014ca43f 	.word	0x014ca43f
 80055c4:	016e3600 	.word	0x016e3600
 80055c8:	01a6ab1f 	.word	0x01a6ab1f
 80055cc:	01e84800 	.word	0x01e84800

080055d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f043 0201 	orr.w	r2, r3, #1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f023 0201 	bic.w	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d115      	bne.n	8005662 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005642:	2001      	movs	r0, #1
 8005644:	f7fc f8c8 	bl	80017d8 <HAL_Delay>
      ms++;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3301      	adds	r3, #1
 800564c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f001 f972 	bl	8006938 <USB_GetMode>
 8005654:	4603      	mov	r3, r0
 8005656:	2b01      	cmp	r3, #1
 8005658:	d01e      	beq.n	8005698 <USB_SetCurrentMode+0x84>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b31      	cmp	r3, #49	; 0x31
 800565e:	d9f0      	bls.n	8005642 <USB_SetCurrentMode+0x2e>
 8005660:	e01a      	b.n	8005698 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d115      	bne.n	8005694 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005674:	2001      	movs	r0, #1
 8005676:	f7fc f8af 	bl	80017d8 <HAL_Delay>
      ms++;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3301      	adds	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f001 f959 	bl	8006938 <USB_GetMode>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <USB_SetCurrentMode+0x84>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b31      	cmp	r3, #49	; 0x31
 8005690:	d9f0      	bls.n	8005674 <USB_SetCurrentMode+0x60>
 8005692:	e001      	b.n	8005698 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e005      	b.n	80056a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b32      	cmp	r3, #50	; 0x32
 800569c:	d101      	bne.n	80056a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056ac:	b084      	sub	sp, #16
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b086      	sub	sp, #24
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	e009      	b.n	80056e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	3340      	adds	r3, #64	; 0x40
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	2200      	movs	r2, #0
 80056d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	3301      	adds	r3, #1
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2b0e      	cmp	r3, #14
 80056e4:	d9f2      	bls.n	80056cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d11c      	bne.n	8005726 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056fa:	f043 0302 	orr.w	r3, r3, #2
 80056fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
 8005724:	e00b      	b.n	800573e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005744:	461a      	mov	r2, r3
 8005746:	2300      	movs	r3, #0
 8005748:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005750:	4619      	mov	r1, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005758:	461a      	mov	r2, r3
 800575a:	680b      	ldr	r3, [r1, #0]
 800575c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	2b01      	cmp	r3, #1
 8005762:	d10c      	bne.n	800577e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800576a:	2100      	movs	r1, #0
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f945 	bl	80059fc <USB_SetDevSpeed>
 8005772:	e008      	b.n	8005786 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005774:	2101      	movs	r1, #1
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f940 	bl	80059fc <USB_SetDevSpeed>
 800577c:	e003      	b.n	8005786 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800577e:	2103      	movs	r1, #3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f93b 	bl	80059fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005786:	2110      	movs	r1, #16
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f8f3 	bl	8005974 <USB_FlushTxFifo>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f90f 	bl	80059bc <USB_FlushRxFifo>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ae:	461a      	mov	r2, r3
 80057b0:	2300      	movs	r3, #0
 80057b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	461a      	mov	r2, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057cc:	2300      	movs	r3, #0
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	e043      	b.n	800585a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e8:	d118      	bne.n	800581c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	461a      	mov	r2, r3
 80057fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	e013      	b.n	800582e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	461a      	mov	r2, r3
 8005814:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	e008      	b.n	800582e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	461a      	mov	r2, r3
 800582a:	2300      	movs	r3, #0
 800582c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	461a      	mov	r2, r3
 800583c:	2300      	movs	r3, #0
 800583e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	461a      	mov	r2, r3
 800584e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005852:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	3301      	adds	r3, #1
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	429a      	cmp	r2, r3
 8005860:	d3b7      	bcc.n	80057d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005862:	2300      	movs	r3, #0
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	e043      	b.n	80058f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800587a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800587e:	d118      	bne.n	80058b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005892:	461a      	mov	r2, r3
 8005894:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	e013      	b.n	80058c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a8:	461a      	mov	r2, r3
 80058aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	e008      	b.n	80058c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	461a      	mov	r2, r3
 80058c0:	2300      	movs	r3, #0
 80058c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e2:	461a      	mov	r2, r3
 80058e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	3301      	adds	r3, #1
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d3b7      	bcc.n	8005868 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800590a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005918:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	2b00      	cmp	r3, #0
 800591e:	d105      	bne.n	800592c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f043 0210 	orr.w	r2, r3, #16
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699a      	ldr	r2, [r3, #24]
 8005930:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <USB_DevInit+0x2c4>)
 8005932:	4313      	orrs	r3, r2
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f043 0208 	orr.w	r2, r3, #8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800594a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d107      	bne.n	8005960 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005958:	f043 0304 	orr.w	r3, r3, #4
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005960:	7dfb      	ldrb	r3, [r7, #23]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800596c:	b004      	add	sp, #16
 800596e:	4770      	bx	lr
 8005970:	803c3800 	.word	0x803c3800

08005974 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	019b      	lsls	r3, r3, #6
 8005986:	f043 0220 	orr.w	r2, r3, #32
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3301      	adds	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	4a08      	ldr	r2, [pc, #32]	; (80059b8 <USB_FlushTxFifo+0x44>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e006      	b.n	80059ac <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d0f1      	beq.n	800598e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	00030d40 	.word	0x00030d40

080059bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2210      	movs	r2, #16
 80059cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3301      	adds	r3, #1
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	4a08      	ldr	r2, [pc, #32]	; (80059f8 <USB_FlushRxFifo+0x3c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e006      	b.n	80059ec <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0310 	and.w	r3, r3, #16
 80059e6:	2b10      	cmp	r3, #16
 80059e8:	d0f1      	beq.n	80059ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	00030d40 	.word	0x00030d40

080059fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	68f9      	ldr	r1, [r7, #12]
 8005a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b087      	sub	sp, #28
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 0306 	and.w	r3, r3, #6
 8005a46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d102      	bne.n	8005a54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	75fb      	strb	r3, [r7, #23]
 8005a52:	e00a      	b.n	8005a6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d002      	beq.n	8005a60 <USB_GetDevSpeed+0x32>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b06      	cmp	r3, #6
 8005a5e:	d102      	bne.n	8005a66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a60:	2302      	movs	r3, #2
 8005a62:	75fb      	strb	r3, [r7, #23]
 8005a64:	e001      	b.n	8005a6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a66:	230f      	movs	r3, #15
 8005a68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d13a      	bne.n	8005b0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	68f9      	ldr	r1, [r7, #12]
 8005aae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d155      	bne.n	8005b78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	78db      	ldrb	r3, [r3, #3]
 8005ae6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ae8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	059b      	lsls	r3, r3, #22
 8005aee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005af0:	4313      	orrs	r3, r2
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	e036      	b.n	8005b78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b10:	69da      	ldr	r2, [r3, #28]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b20:	041b      	lsls	r3, r3, #16
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d11a      	bne.n	8005b78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	78db      	ldrb	r3, [r3, #3]
 8005b5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b5e:	430b      	orrs	r3, r1
 8005b60:	4313      	orrs	r3, r2
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d161      	bne.n	8005c68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bba:	d11f      	bne.n	8005bfc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	0151      	lsls	r1, r2, #5
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	43db      	mvns	r3, r3
 8005c16:	68f9      	ldr	r1, [r7, #12]
 8005c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	2101      	movs	r1, #1
 8005c32:	fa01 f303 	lsl.w	r3, r1, r3
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c40:	4013      	ands	r3, r2
 8005c42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	0159      	lsls	r1, r3, #5
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	440b      	add	r3, r1
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5e:	4619      	mov	r1, r3
 8005c60:	4b35      	ldr	r3, [pc, #212]	; (8005d38 <USB_DeactivateEndpoint+0x1b0>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]
 8005c66:	e060      	b.n	8005d2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c7e:	d11f      	bne.n	8005cc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd6:	041b      	lsls	r3, r3, #16
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	68f9      	ldr	r1, [r7, #12]
 8005cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfa:	041b      	lsls	r3, r3, #16
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d04:	4013      	ands	r3, r2
 8005d06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	0159      	lsls	r1, r3, #5
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	440b      	add	r3, r1
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	4619      	mov	r1, r3
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <USB_DeactivateEndpoint+0x1b4>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	ec337800 	.word	0xec337800
 8005d3c:	eff37800 	.word	0xeff37800

08005d40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08a      	sub	sp, #40	; 0x28
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	785b      	ldrb	r3, [r3, #1]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	f040 815c 	bne.w	800601a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d132      	bne.n	8005dd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	0151      	lsls	r1, r2, #5
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	440a      	add	r2, r1
 8005d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc8:	0cdb      	lsrs	r3, r3, #19
 8005dca:	04db      	lsls	r3, r3, #19
 8005dcc:	6113      	str	r3, [r2, #16]
 8005dce:	e074      	b.n	8005eba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dea:	0cdb      	lsrs	r3, r3, #19
 8005dec:	04db      	lsls	r3, r3, #19
 8005dee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6959      	ldr	r1, [r3, #20]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	440b      	add	r3, r1
 8005e2c:	1e59      	subs	r1, r3, #1
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e36:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e38:	4b9d      	ldr	r3, [pc, #628]	; (80060b0 <USB_EPStartXfer+0x370>)
 8005e3a:	400b      	ands	r3, r1
 8005e3c:	69b9      	ldr	r1, [r7, #24]
 8005e3e:	0148      	lsls	r0, r1, #5
 8005e40:	69f9      	ldr	r1, [r7, #28]
 8005e42:	4401      	add	r1, r0
 8005e44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e62:	69b9      	ldr	r1, [r7, #24]
 8005e64:	0148      	lsls	r0, r1, #5
 8005e66:	69f9      	ldr	r1, [r7, #28]
 8005e68:	4401      	add	r1, r0
 8005e6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	78db      	ldrb	r3, [r3, #3]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d11f      	bne.n	8005eba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	0151      	lsls	r1, r2, #5
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	440a      	add	r2, r1
 8005eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eb8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d14b      	bne.n	8005f58 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d009      	beq.n	8005edc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	78db      	ldrb	r3, [r3, #3]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d128      	bne.n	8005f36 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d110      	bne.n	8005f16 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	e00f      	b.n	8005f36 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f34:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	e12f      	b.n	80061b8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f76:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	78db      	ldrb	r3, [r3, #3]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d015      	beq.n	8005fac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8117 	beq.w	80061b8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa0:	69f9      	ldr	r1, [r7, #28]
 8005fa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	634b      	str	r3, [r1, #52]	; 0x34
 8005faa:	e105      	b.n	80061b8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d110      	bne.n	8005fde <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	e00f      	b.n	8005ffe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	68d9      	ldr	r1, [r3, #12]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	781a      	ldrb	r2, [r3, #0]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	b298      	uxth	r0, r3
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	4603      	mov	r3, r0
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 fa2b 	bl	800646e <USB_WritePacket>
 8006018:	e0ce      	b.n	80061b8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	440a      	add	r2, r1
 8006030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006034:	0cdb      	lsrs	r3, r3, #19
 8006036:	04db      	lsls	r3, r3, #19
 8006038:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006054:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006058:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800605c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d126      	bne.n	80060b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800607c:	69b9      	ldr	r1, [r7, #24]
 800607e:	0148      	lsls	r0, r1, #5
 8006080:	69f9      	ldr	r1, [r7, #28]
 8006082:	4401      	add	r1, r0
 8006084:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006088:	4313      	orrs	r3, r2
 800608a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	69fa      	ldr	r2, [r7, #28]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060aa:	6113      	str	r3, [r2, #16]
 80060ac:	e036      	b.n	800611c <USB_EPStartXfer+0x3dc>
 80060ae:	bf00      	nop
 80060b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	695a      	ldr	r2, [r3, #20]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4413      	add	r3, r2
 80060be:	1e5a      	subs	r2, r3, #1
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	8afb      	ldrh	r3, [r7, #22]
 80060da:	04d9      	lsls	r1, r3, #19
 80060dc:	4b39      	ldr	r3, [pc, #228]	; (80061c4 <USB_EPStartXfer+0x484>)
 80060de:	400b      	ands	r3, r1
 80060e0:	69b9      	ldr	r1, [r7, #24]
 80060e2:	0148      	lsls	r0, r1, #5
 80060e4:	69f9      	ldr	r1, [r7, #28]
 80060e6:	4401      	add	r1, r0
 80060e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060ec:	4313      	orrs	r3, r2
 80060ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	8af9      	ldrh	r1, [r7, #22]
 8006104:	fb01 f303 	mul.w	r3, r1, r3
 8006108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800610c:	69b9      	ldr	r1, [r7, #24]
 800610e:	0148      	lsls	r0, r1, #5
 8006110:	69f9      	ldr	r1, [r7, #28]
 8006112:	4401      	add	r1, r0
 8006114:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006118:	4313      	orrs	r3, r2
 800611a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800611c:	79fb      	ldrb	r3, [r7, #7]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d10d      	bne.n	800613e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	68d9      	ldr	r1, [r3, #12]
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	460a      	mov	r2, r1
 800613c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	78db      	ldrb	r3, [r3, #3]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d128      	bne.n	8006198 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006152:	2b00      	cmp	r3, #0
 8006154:	d110      	bne.n	8006178 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	0151      	lsls	r1, r2, #5
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	440a      	add	r2, r1
 800616c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	e00f      	b.n	8006198 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006196:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	69fa      	ldr	r2, [r7, #28]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3720      	adds	r7, #32
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	1ff80000 	.word	0x1ff80000

080061c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	f040 80cd 	bne.w	8006384 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d132      	bne.n	8006258 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	440a      	add	r2, r1
 8006208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800620c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006210:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006214:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	0151      	lsls	r1, r2, #5
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	440a      	add	r2, r1
 800622c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006234:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	0151      	lsls	r1, r2, #5
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	440a      	add	r2, r1
 800624c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006250:	0cdb      	lsrs	r3, r3, #19
 8006252:	04db      	lsls	r3, r3, #19
 8006254:	6113      	str	r3, [r2, #16]
 8006256:	e04e      	b.n	80062f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006272:	0cdb      	lsrs	r3, r3, #19
 8006274:	04db      	lsls	r3, r3, #19
 8006276:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	0151      	lsls	r1, r2, #5
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	440a      	add	r2, r1
 800628e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006292:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006296:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800629a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	695a      	ldr	r2, [r3, #20]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d903      	bls.n	80062b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e6:	6939      	ldr	r1, [r7, #16]
 80062e8:	0148      	lsls	r0, r1, #5
 80062ea:	6979      	ldr	r1, [r7, #20]
 80062ec:	4401      	add	r1, r0
 80062ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062f2:	4313      	orrs	r3, r2
 80062f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062f6:	79fb      	ldrb	r3, [r7, #7]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d11e      	bne.n	800633a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006310:	461a      	mov	r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	0151      	lsls	r1, r2, #5
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	440a      	add	r2, r1
 800632e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006332:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	e092      	b.n	8006460 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006354:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006358:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d07e      	beq.n	8006460 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	2101      	movs	r1, #1
 8006374:	fa01 f303 	lsl.w	r3, r1, r3
 8006378:	6979      	ldr	r1, [r7, #20]
 800637a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800637e:	4313      	orrs	r3, r2
 8006380:	634b      	str	r3, [r1, #52]	; 0x34
 8006382:	e06d      	b.n	8006460 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	440a      	add	r2, r1
 800639a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800639e:	0cdb      	lsrs	r3, r3, #19
 80063a0:	04db      	lsls	r3, r3, #19
 80063a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800640e:	6939      	ldr	r1, [r7, #16]
 8006410:	0148      	lsls	r0, r1, #5
 8006412:	6979      	ldr	r1, [r7, #20]
 8006414:	4401      	add	r1, r0
 8006416:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800641a:	4313      	orrs	r3, r2
 800641c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d10d      	bne.n	8006440 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d009      	beq.n	8006440 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	68d9      	ldr	r1, [r3, #12]
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643c:	460a      	mov	r2, r1
 800643e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	440a      	add	r2, r1
 8006456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800645a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800645e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800646e:	b480      	push	{r7}
 8006470:	b089      	sub	sp, #36	; 0x24
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	4611      	mov	r1, r2
 800647a:	461a      	mov	r2, r3
 800647c:	460b      	mov	r3, r1
 800647e:	71fb      	strb	r3, [r7, #7]
 8006480:	4613      	mov	r3, r2
 8006482:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800648c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006490:	2b00      	cmp	r3, #0
 8006492:	d123      	bne.n	80064dc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006494:	88bb      	ldrh	r3, [r7, #4]
 8006496:	3303      	adds	r3, #3
 8006498:	089b      	lsrs	r3, r3, #2
 800649a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800649c:	2300      	movs	r3, #0
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	e018      	b.n	80064d4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064a2:	79fb      	ldrb	r3, [r7, #7]
 80064a4:	031a      	lsls	r2, r3, #12
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ae:	461a      	mov	r2, r3
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	3301      	adds	r3, #1
 80064ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	3301      	adds	r3, #1
 80064c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	3301      	adds	r3, #1
 80064c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	3301      	adds	r3, #1
 80064cc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	3301      	adds	r3, #1
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d3e2      	bcc.n	80064a2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3724      	adds	r7, #36	; 0x24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b08b      	sub	sp, #44	; 0x2c
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	4613      	mov	r3, r2
 80064f6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006500:	88fb      	ldrh	r3, [r7, #6]
 8006502:	089b      	lsrs	r3, r3, #2
 8006504:	b29b      	uxth	r3, r3
 8006506:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006510:	2300      	movs	r3, #0
 8006512:	623b      	str	r3, [r7, #32]
 8006514:	e014      	b.n	8006540 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	601a      	str	r2, [r3, #0]
    pDest++;
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	3301      	adds	r3, #1
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	3301      	adds	r3, #1
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	3301      	adds	r3, #1
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	3301      	adds	r3, #1
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	3301      	adds	r3, #1
 800653e:	623b      	str	r3, [r7, #32]
 8006540:	6a3a      	ldr	r2, [r7, #32]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	429a      	cmp	r2, r3
 8006546:	d3e6      	bcc.n	8006516 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006548:	8bfb      	ldrh	r3, [r7, #30]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01e      	beq.n	800658c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006558:	461a      	mov	r2, r3
 800655a:	f107 0310 	add.w	r3, r7, #16
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	b2db      	uxtb	r3, r3
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	fa22 f303 	lsr.w	r3, r2, r3
 800656e:	b2da      	uxtb	r2, r3
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	701a      	strb	r2, [r3, #0]
      i++;
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	3301      	adds	r3, #1
 8006578:	623b      	str	r3, [r7, #32]
      pDest++;
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	3301      	adds	r3, #1
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006580:	8bfb      	ldrh	r3, [r7, #30]
 8006582:	3b01      	subs	r3, #1
 8006584:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006586:	8bfb      	ldrh	r3, [r7, #30]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1ea      	bne.n	8006562 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800658e:	4618      	mov	r0, r3
 8006590:	372c      	adds	r7, #44	; 0x2c
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	785b      	ldrb	r3, [r3, #1]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d12c      	bne.n	8006610 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	db12      	blt.n	80065ee <USB_EPSetStall+0x54>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00f      	beq.n	80065ee <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065ec:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	440a      	add	r2, r1
 8006604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e02b      	b.n	8006668 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	db12      	blt.n	8006648 <USB_EPSetStall+0xae>
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00f      	beq.n	8006648 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	440a      	add	r2, r1
 800663e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006642:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006646:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	0151      	lsls	r1, r2, #5
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	440a      	add	r2, r1
 800665e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006662:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006666:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006676:	b480      	push	{r7}
 8006678:	b085      	sub	sp, #20
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d128      	bne.n	80066e4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	0151      	lsls	r1, r2, #5
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	440a      	add	r2, r1
 80066a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	78db      	ldrb	r3, [r3, #3]
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d003      	beq.n	80066c2 <USB_EPClearStall+0x4c>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	78db      	ldrb	r3, [r3, #3]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d138      	bne.n	8006734 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	e027      	b.n	8006734 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006702:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	78db      	ldrb	r3, [r3, #3]
 8006708:	2b03      	cmp	r3, #3
 800670a:	d003      	beq.n	8006714 <USB_EPClearStall+0x9e>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	78db      	ldrb	r3, [r3, #3]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d10f      	bne.n	8006734 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	440a      	add	r2, r1
 800672a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800672e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006732:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006742:	b480      	push	{r7}
 8006744:	b085      	sub	sp, #20
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	460b      	mov	r3, r1
 800674c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006760:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006764:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006776:	68f9      	ldr	r1, [r7, #12]
 8006778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800677c:	4313      	orrs	r3, r2
 800677e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800678e:	b480      	push	{r7}
 8006790:	b085      	sub	sp, #20
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067a8:	f023 0303 	bic.w	r3, r3, #3
 80067ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067bc:	f023 0302 	bic.w	r3, r3, #2
 80067c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067ea:	f023 0303 	bic.w	r3, r3, #3
 80067ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067fe:	f043 0302 	orr.w	r3, r3, #2
 8006802:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006812:	b480      	push	{r7}
 8006814:	b085      	sub	sp, #20
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	4013      	ands	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800682a:	68fb      	ldr	r3, [r7, #12]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	4013      	ands	r3, r2
 800685a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	0c1b      	lsrs	r3, r3, #16
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	4013      	ands	r3, r2
 800688e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	b29b      	uxth	r3, r3
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	4013      	ands	r3, r2
 80068cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068ce:	68bb      	ldr	r3, [r7, #8]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068fe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
 800690c:	01db      	lsls	r3, r3, #7
 800690e:	b2db      	uxtb	r3, r3
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4013      	ands	r3, r2
 8006928:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800692a:	68bb      	ldr	r3, [r7, #8]
}
 800692c:	4618      	mov	r0, r3
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	f003 0301 	and.w	r3, r3, #1
}
 8006948:	4618      	mov	r0, r3
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800696e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006972:	f023 0307 	bic.w	r3, r3, #7
 8006976:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800698a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
	...

0800699c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	460b      	mov	r3, r1
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	333c      	adds	r3, #60	; 0x3c
 80069b2:	3304      	adds	r3, #4
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	4a26      	ldr	r2, [pc, #152]	; (8006a54 <USB_EP0_OutStart+0xb8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d90a      	bls.n	80069d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069d0:	d101      	bne.n	80069d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	e037      	b.n	8006a46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069dc:	461a      	mov	r2, r3
 80069de:	2300      	movs	r3, #0
 80069e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a04:	f043 0318 	orr.w	r3, r3, #24
 8006a08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a1e:	7afb      	ldrb	r3, [r7, #11]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d10f      	bne.n	8006a44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	4f54300a 	.word	0x4f54300a

08006a58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3301      	adds	r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	4a13      	ldr	r2, [pc, #76]	; (8006ab8 <USB_CoreReset+0x60>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d901      	bls.n	8006a74 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e01a      	b.n	8006aaa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	daf3      	bge.n	8006a64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	f043 0201 	orr.w	r2, r3, #1
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	4a09      	ldr	r2, [pc, #36]	; (8006ab8 <USB_CoreReset+0x60>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d901      	bls.n	8006a9c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e006      	b.n	8006aaa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d0f1      	beq.n	8006a8c <USB_CoreReset+0x34>

  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	00030d40 	.word	0x00030d40

08006abc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006ac8:	2010      	movs	r0, #16
 8006aca:	f001 fef7 	bl	80088bc <USBD_static_malloc>
 8006ace:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e01b      	b.n	8006b1a <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	7c1b      	ldrb	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d103      	bne.n	8006afa <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2207      	movs	r2, #7
 8006af6:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006af8:	e002      	b.n	8006b00 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	220a      	movs	r2, #10
 8006afe:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006b00:	2308      	movs	r3, #8
 8006b02:	2203      	movs	r2, #3
 8006b04:	2181      	movs	r1, #129	; 0x81
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 fdc7 	bl	800869a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006b2e:	2181      	movs	r1, #129	; 0x81
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 fdd8 	bl	80086e6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 fec0 	bl	80088d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b7c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e0e8      	b.n	8006d62 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d046      	beq.n	8006c2a <USBD_HID_Setup+0xbe>
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	f040 80d8 	bne.w	8006d52 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	3b02      	subs	r3, #2
 8006ba8:	2b09      	cmp	r3, #9
 8006baa:	d836      	bhi.n	8006c1a <USBD_HID_Setup+0xae>
 8006bac:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <USBD_HID_Setup+0x48>)
 8006bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb2:	bf00      	nop
 8006bb4:	08006c0b 	.word	0x08006c0b
 8006bb8:	08006beb 	.word	0x08006beb
 8006bbc:	08006c1b 	.word	0x08006c1b
 8006bc0:	08006c1b 	.word	0x08006c1b
 8006bc4:	08006c1b 	.word	0x08006c1b
 8006bc8:	08006c1b 	.word	0x08006c1b
 8006bcc:	08006c1b 	.word	0x08006c1b
 8006bd0:	08006c1b 	.word	0x08006c1b
 8006bd4:	08006bf9 	.word	0x08006bf9
 8006bd8:	08006bdd 	.word	0x08006bdd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	885b      	ldrh	r3, [r3, #2]
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	461a      	mov	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	601a      	str	r2, [r3, #0]
          break;
 8006be8:	e01e      	b.n	8006c28 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2201      	movs	r2, #1
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 f9fa 	bl	8007fea <USBD_CtlSendData>
          break;
 8006bf6:	e017      	b.n	8006c28 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	885b      	ldrh	r3, [r3, #2]
 8006bfc:	0a1b      	lsrs	r3, r3, #8
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	461a      	mov	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	605a      	str	r2, [r3, #4]
          break;
 8006c08:	e00e      	b.n	8006c28 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	2201      	movs	r2, #1
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 f9e9 	bl	8007fea <USBD_CtlSendData>
          break;
 8006c18:	e006      	b.n	8006c28 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 f973 	bl	8007f08 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c22:	2303      	movs	r3, #3
 8006c24:	75fb      	strb	r3, [r7, #23]
          break;
 8006c26:	bf00      	nop
      }
      break;
 8006c28:	e09a      	b.n	8006d60 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	785b      	ldrb	r3, [r3, #1]
 8006c2e:	2b0b      	cmp	r3, #11
 8006c30:	f200 8086 	bhi.w	8006d40 <USBD_HID_Setup+0x1d4>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <USBD_HID_Setup+0xd0>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c6d 	.word	0x08006c6d
 8006c40:	08006d4f 	.word	0x08006d4f
 8006c44:	08006d41 	.word	0x08006d41
 8006c48:	08006d41 	.word	0x08006d41
 8006c4c:	08006d41 	.word	0x08006d41
 8006c50:	08006d41 	.word	0x08006d41
 8006c54:	08006c97 	.word	0x08006c97
 8006c58:	08006d41 	.word	0x08006d41
 8006c5c:	08006d41 	.word	0x08006d41
 8006c60:	08006d41 	.word	0x08006d41
 8006c64:	08006cef 	.word	0x08006cef
 8006c68:	08006d19 	.word	0x08006d19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d107      	bne.n	8006c88 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c78:	f107 030a 	add.w	r3, r7, #10
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 f9b2 	bl	8007fea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c86:	e063      	b.n	8006d50 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 f93c 	bl	8007f08 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c90:	2303      	movs	r3, #3
 8006c92:	75fb      	strb	r3, [r7, #23]
          break;
 8006c94:	e05c      	b.n	8006d50 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	885b      	ldrh	r3, [r3, #2]
 8006c9a:	0a1b      	lsrs	r3, r3, #8
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	2b22      	cmp	r3, #34	; 0x22
 8006ca0:	d108      	bne.n	8006cb4 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	88db      	ldrh	r3, [r3, #6]
 8006ca6:	2b2d      	cmp	r3, #45	; 0x2d
 8006ca8:	bf28      	it	cs
 8006caa:	232d      	movcs	r3, #45	; 0x2d
 8006cac:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006cae:	4b2f      	ldr	r3, [pc, #188]	; (8006d6c <USBD_HID_Setup+0x200>)
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	e015      	b.n	8006ce0 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	885b      	ldrh	r3, [r3, #2]
 8006cb8:	0a1b      	lsrs	r3, r3, #8
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b21      	cmp	r3, #33	; 0x21
 8006cbe:	d108      	bne.n	8006cd2 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8006cc0:	4b2b      	ldr	r3, [pc, #172]	; (8006d70 <USBD_HID_Setup+0x204>)
 8006cc2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	88db      	ldrh	r3, [r3, #6]
 8006cc8:	2b09      	cmp	r3, #9
 8006cca:	bf28      	it	cs
 8006ccc:	2309      	movcs	r3, #9
 8006cce:	82bb      	strh	r3, [r7, #20]
 8006cd0:	e006      	b.n	8006ce0 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 f917 	bl	8007f08 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	75fb      	strb	r3, [r7, #23]
            break;
 8006cde:	e037      	b.n	8006d50 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ce0:	8abb      	ldrh	r3, [r7, #20]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6939      	ldr	r1, [r7, #16]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 f97f 	bl	8007fea <USBD_CtlSendData>
          break;
 8006cec:	e030      	b.n	8006d50 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d107      	bne.n	8006d0a <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	2201      	movs	r2, #1
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 f971 	bl	8007fea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d08:	e022      	b.n	8006d50 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 f8fb 	bl	8007f08 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d12:	2303      	movs	r3, #3
 8006d14:	75fb      	strb	r3, [r7, #23]
          break;
 8006d16:	e01b      	b.n	8006d50 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d106      	bne.n	8006d32 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	885b      	ldrh	r3, [r3, #2]
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d30:	e00e      	b.n	8006d50 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 f8e7 	bl	8007f08 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d3e:	e007      	b.n	8006d50 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f001 f8e0 	bl	8007f08 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	75fb      	strb	r3, [r7, #23]
          break;
 8006d4c:	e000      	b.n	8006d50 <USBD_HID_Setup+0x1e4>
          break;
 8006d4e:	bf00      	nop
      }
      break;
 8006d50:	e006      	b.n	8006d60 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 f8d7 	bl	8007f08 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	200000d8 	.word	0x200000d8
 8006d70:	200000c0 	.word	0x200000c0

08006d74 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2222      	movs	r2, #34	; 0x22
 8006d80:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8006d82:	4b03      	ldr	r3, [pc, #12]	; (8006d90 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	20000054 	.word	0x20000054

08006d94 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2222      	movs	r2, #34	; 0x22
 8006da0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8006da2:	4b03      	ldr	r3, [pc, #12]	; (8006db0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	20000078 	.word	0x20000078

08006db4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2222      	movs	r2, #34	; 0x22
 8006dc0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8006dc2:	4b03      	ldr	r3, [pc, #12]	; (8006dd0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	2000009c 	.word	0x2000009c

08006dd4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006de6:	2200      	movs	r2, #0
 8006de8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	220a      	movs	r2, #10
 8006e04:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006e06:	4b03      	ldr	r3, [pc, #12]	; (8006e14 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	200000cc 	.word	0x200000cc

08006e18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e01f      	b.n	8006e70 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	79fa      	ldrb	r2, [r7, #7]
 8006e62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f001 fbb1 	bl	80085cc <USBD_LL_Init>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e016      	b.n	8006ebe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	f107 020e 	add.w	r2, r7, #14
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4798      	blx	r3
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b082      	sub	sp, #8
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fbc8 	bl	8008664 <USBD_LL_Start>
 8006ed4:	4603      	mov	r3, r0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b083      	sub	sp, #12
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f00:	2303      	movs	r3, #3
 8006f02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	78fa      	ldrb	r2, [r7, #3]
 8006f18:	4611      	mov	r1, r2
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	4798      	blx	r3
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d007      	beq.n	8006f52 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
  }

  return USBD_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 ff90 	bl	8007e94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f82:	461a      	mov	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f90:	f003 031f 	and.w	r3, r3, #31
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d01a      	beq.n	8006fce <USBD_LL_SetupStage+0x72>
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d822      	bhi.n	8006fe2 <USBD_LL_SetupStage+0x86>
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <USBD_LL_SetupStage+0x4a>
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d00a      	beq.n	8006fba <USBD_LL_SetupStage+0x5e>
 8006fa4:	e01d      	b.n	8006fe2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fac:	4619      	mov	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa62 	bl	8007478 <USBD_StdDevReq>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb8:	e020      	b.n	8006ffc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fac6 	bl	8007554 <USBD_StdItfReq>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73fb      	strb	r3, [r7, #15]
      break;
 8006fcc:	e016      	b.n	8006ffc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fb05 	bl	80075e6 <USBD_StdEPReq>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe0:	e00c      	b.n	8006ffc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006fe8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 fb97 	bl	8008724 <USBD_LL_StallEP>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffa:	bf00      	nop
  }

  return ret;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b086      	sub	sp, #24
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	460b      	mov	r3, r1
 8007010:	607a      	str	r2, [r7, #4]
 8007012:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007014:	7afb      	ldrb	r3, [r7, #11]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d138      	bne.n	800708c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007020:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007028:	2b03      	cmp	r3, #3
 800702a:	d14a      	bne.n	80070c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	429a      	cmp	r2, r3
 8007036:	d913      	bls.n	8007060 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	1ad2      	subs	r2, r2, r3
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	4293      	cmp	r3, r2
 8007050:	bf28      	it	cs
 8007052:	4613      	movcs	r3, r2
 8007054:	461a      	mov	r2, r3
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 fff2 	bl	8008042 <USBD_CtlContinueRx>
 800705e:	e030      	b.n	80070c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b03      	cmp	r3, #3
 800706a:	d10b      	bne.n	8007084 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d005      	beq.n	8007084 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 ffed 	bl	8008064 <USBD_CtlSendStatus>
 800708a:	e01a      	b.n	80070c2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b03      	cmp	r3, #3
 8007096:	d114      	bne.n	80070c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00e      	beq.n	80070c2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	7afa      	ldrb	r2, [r7, #11]
 80070ae:	4611      	mov	r1, r2
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	4798      	blx	r3
 80070b4:	4603      	mov	r3, r0
 80070b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	e000      	b.n	80070c4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	460b      	mov	r3, r1
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80070da:	7afb      	ldrb	r3, [r7, #11]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d16b      	bne.n	80071b8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3314      	adds	r3, #20
 80070e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d156      	bne.n	800719e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d914      	bls.n	8007126 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	1ad2      	subs	r2, r2, r3
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	461a      	mov	r2, r3
 8007110:	6879      	ldr	r1, [r7, #4]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 ff84 	bl	8008020 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007118:	2300      	movs	r3, #0
 800711a:	2200      	movs	r2, #0
 800711c:	2100      	movs	r1, #0
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f001 fbaa 	bl	8008878 <USBD_LL_PrepareReceive>
 8007124:	e03b      	b.n	800719e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	429a      	cmp	r2, r3
 8007130:	d11c      	bne.n	800716c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800713a:	429a      	cmp	r2, r3
 800713c:	d316      	bcc.n	800716c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007148:	429a      	cmp	r2, r3
 800714a:	d20f      	bcs.n	800716c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800714c:	2200      	movs	r2, #0
 800714e:	2100      	movs	r1, #0
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 ff65 	bl	8008020 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800715e:	2300      	movs	r3, #0
 8007160:	2200      	movs	r2, #0
 8007162:	2100      	movs	r1, #0
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f001 fb87 	bl	8008878 <USBD_LL_PrepareReceive>
 800716a:	e018      	b.n	800719e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b03      	cmp	r3, #3
 8007176:	d10b      	bne.n	8007190 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007190:	2180      	movs	r1, #128	; 0x80
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f001 fac6 	bl	8008724 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 ff76 	bl	800808a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d122      	bne.n	80071ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7ff fe98 	bl	8006ede <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071b6:	e01a      	b.n	80071ee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d114      	bne.n	80071ee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00e      	beq.n	80071ee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	7afa      	ldrb	r2, [r7, #11]
 80071da:	4611      	mov	r1, r2
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	4798      	blx	r3
 80071e0:	4603      	mov	r3, r0
 80071e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80071e4:	7dfb      	ldrb	r3, [r7, #23]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	e000      	b.n	80071f0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007228:	2303      	movs	r3, #3
 800722a:	e02f      	b.n	800728c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00f      	beq.n	8007256 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d009      	beq.n	8007256 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6852      	ldr	r2, [r2, #4]
 800724e:	b2d2      	uxtb	r2, r2
 8007250:	4611      	mov	r1, r2
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007256:	2340      	movs	r3, #64	; 0x40
 8007258:	2200      	movs	r2, #0
 800725a:	2100      	movs	r1, #0
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fa1c 	bl	800869a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2240      	movs	r2, #64	; 0x40
 800726e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007272:	2340      	movs	r3, #64	; 0x40
 8007274:	2200      	movs	r2, #0
 8007276:	2180      	movs	r1, #128	; 0x80
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 fa0e 	bl	800869a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2240      	movs	r2, #64	; 0x40
 8007288:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	78fa      	ldrb	r2, [r7, #3]
 80072a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2204      	movs	r2, #4
 80072ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d106      	bne.n	8007302 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007322:	2303      	movs	r3, #3
 8007324:	e012      	b.n	800734c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b03      	cmp	r3, #3
 8007330:	d10b      	bne.n	800734a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d005      	beq.n	800734a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800736a:	2303      	movs	r3, #3
 800736c:	e014      	b.n	8007398 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b03      	cmp	r3, #3
 8007378:	d10d      	bne.n	8007396 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d007      	beq.n	8007396 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	78fa      	ldrb	r2, [r7, #3]
 8007390:	4611      	mov	r1, r2
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e014      	b.n	80073e4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d10d      	bne.n	80073e2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d007      	beq.n	80073e2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	78fa      	ldrb	r2, [r7, #3]
 80073dc:	4611      	mov	r1, r2
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007418:	2b00      	cmp	r3, #0
 800741a:	d009      	beq.n	8007430 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6852      	ldr	r2, [r2, #4]
 8007428:	b2d2      	uxtb	r2, r2
 800742a:	4611      	mov	r1, r2
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
  }

  return USBD_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800743a:	b480      	push	{r7}
 800743c:	b087      	sub	sp, #28
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	3301      	adds	r3, #1
 8007450:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007458:	8a3b      	ldrh	r3, [r7, #16]
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	b21a      	sxth	r2, r3
 800745e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007462:	4313      	orrs	r3, r2
 8007464:	b21b      	sxth	r3, r3
 8007466:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007468:	89fb      	ldrh	r3, [r7, #14]
}
 800746a:	4618      	mov	r0, r3
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
	...

08007478 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d005      	beq.n	800749e <USBD_StdDevReq+0x26>
 8007492:	2b40      	cmp	r3, #64	; 0x40
 8007494:	d853      	bhi.n	800753e <USBD_StdDevReq+0xc6>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <USBD_StdDevReq+0x3a>
 800749a:	2b20      	cmp	r3, #32
 800749c:	d14f      	bne.n	800753e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	4798      	blx	r3
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]
      break;
 80074b0:	e04a      	b.n	8007548 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	785b      	ldrb	r3, [r3, #1]
 80074b6:	2b09      	cmp	r3, #9
 80074b8:	d83b      	bhi.n	8007532 <USBD_StdDevReq+0xba>
 80074ba:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <USBD_StdDevReq+0x48>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	08007515 	.word	0x08007515
 80074c4:	08007529 	.word	0x08007529
 80074c8:	08007533 	.word	0x08007533
 80074cc:	0800751f 	.word	0x0800751f
 80074d0:	08007533 	.word	0x08007533
 80074d4:	080074f3 	.word	0x080074f3
 80074d8:	080074e9 	.word	0x080074e9
 80074dc:	08007533 	.word	0x08007533
 80074e0:	0800750b 	.word	0x0800750b
 80074e4:	080074fd 	.word	0x080074fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f9de 	bl	80078ac <USBD_GetDescriptor>
          break;
 80074f0:	e024      	b.n	800753c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fb43 	bl	8007b80 <USBD_SetAddress>
          break;
 80074fa:	e01f      	b.n	800753c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fb82 	bl	8007c08 <USBD_SetConfig>
 8007504:	4603      	mov	r3, r0
 8007506:	73fb      	strb	r3, [r7, #15]
          break;
 8007508:	e018      	b.n	800753c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fc21 	bl	8007d54 <USBD_GetConfig>
          break;
 8007512:	e013      	b.n	800753c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fc52 	bl	8007dc0 <USBD_GetStatus>
          break;
 800751c:	e00e      	b.n	800753c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fc81 	bl	8007e28 <USBD_SetFeature>
          break;
 8007526:	e009      	b.n	800753c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fc90 	bl	8007e50 <USBD_ClrFeature>
          break;
 8007530:	e004      	b.n	800753c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fce7 	bl	8007f08 <USBD_CtlError>
          break;
 800753a:	bf00      	nop
      }
      break;
 800753c:	e004      	b.n	8007548 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fce1 	bl	8007f08 <USBD_CtlError>
      break;
 8007546:	bf00      	nop
  }

  return ret;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop

08007554 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	d005      	beq.n	800757a <USBD_StdItfReq+0x26>
 800756e:	2b40      	cmp	r3, #64	; 0x40
 8007570:	d82f      	bhi.n	80075d2 <USBD_StdItfReq+0x7e>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <USBD_StdItfReq+0x26>
 8007576:	2b20      	cmp	r3, #32
 8007578:	d12b      	bne.n	80075d2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007580:	b2db      	uxtb	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	2b02      	cmp	r3, #2
 8007586:	d81d      	bhi.n	80075c4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	889b      	ldrh	r3, [r3, #4]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b01      	cmp	r3, #1
 8007590:	d813      	bhi.n	80075ba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	4798      	blx	r3
 80075a0:	4603      	mov	r3, r0
 80075a2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	88db      	ldrh	r3, [r3, #6]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d110      	bne.n	80075ce <USBD_StdItfReq+0x7a>
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10d      	bne.n	80075ce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fd56 	bl	8008064 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075b8:	e009      	b.n	80075ce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fca3 	bl	8007f08 <USBD_CtlError>
          break;
 80075c2:	e004      	b.n	80075ce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fc9e 	bl	8007f08 <USBD_CtlError>
          break;
 80075cc:	e000      	b.n	80075d0 <USBD_StdItfReq+0x7c>
          break;
 80075ce:	bf00      	nop
      }
      break;
 80075d0:	e004      	b.n	80075dc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fc97 	bl	8007f08 <USBD_CtlError>
      break;
 80075da:	bf00      	nop
  }

  return ret;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b084      	sub	sp, #16
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	889b      	ldrh	r3, [r3, #4]
 80075f8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d007      	beq.n	8007616 <USBD_StdEPReq+0x30>
 8007606:	2b40      	cmp	r3, #64	; 0x40
 8007608:	f200 8145 	bhi.w	8007896 <USBD_StdEPReq+0x2b0>
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00c      	beq.n	800762a <USBD_StdEPReq+0x44>
 8007610:	2b20      	cmp	r3, #32
 8007612:	f040 8140 	bne.w	8007896 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	4798      	blx	r3
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]
      break;
 8007628:	e13a      	b.n	80078a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	785b      	ldrb	r3, [r3, #1]
 800762e:	2b03      	cmp	r3, #3
 8007630:	d007      	beq.n	8007642 <USBD_StdEPReq+0x5c>
 8007632:	2b03      	cmp	r3, #3
 8007634:	f300 8129 	bgt.w	800788a <USBD_StdEPReq+0x2a4>
 8007638:	2b00      	cmp	r3, #0
 800763a:	d07f      	beq.n	800773c <USBD_StdEPReq+0x156>
 800763c:	2b01      	cmp	r3, #1
 800763e:	d03c      	beq.n	80076ba <USBD_StdEPReq+0xd4>
 8007640:	e123      	b.n	800788a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b02      	cmp	r3, #2
 800764c:	d002      	beq.n	8007654 <USBD_StdEPReq+0x6e>
 800764e:	2b03      	cmp	r3, #3
 8007650:	d016      	beq.n	8007680 <USBD_StdEPReq+0x9a>
 8007652:	e02c      	b.n	80076ae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00d      	beq.n	8007676 <USBD_StdEPReq+0x90>
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	2b80      	cmp	r3, #128	; 0x80
 800765e:	d00a      	beq.n	8007676 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f85d 	bl	8008724 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800766a:	2180      	movs	r1, #128	; 0x80
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 f859 	bl	8008724 <USBD_LL_StallEP>
 8007672:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007674:	e020      	b.n	80076b8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fc45 	bl	8007f08 <USBD_CtlError>
              break;
 800767e:	e01b      	b.n	80076b8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	885b      	ldrh	r3, [r3, #2]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10e      	bne.n	80076a6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00b      	beq.n	80076a6 <USBD_StdEPReq+0xc0>
 800768e:	7bbb      	ldrb	r3, [r7, #14]
 8007690:	2b80      	cmp	r3, #128	; 0x80
 8007692:	d008      	beq.n	80076a6 <USBD_StdEPReq+0xc0>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	88db      	ldrh	r3, [r3, #6]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d104      	bne.n	80076a6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 f83f 	bl	8008724 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fcdc 	bl	8008064 <USBD_CtlSendStatus>

              break;
 80076ac:	e004      	b.n	80076b8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fc29 	bl	8007f08 <USBD_CtlError>
              break;
 80076b6:	bf00      	nop
          }
          break;
 80076b8:	e0ec      	b.n	8007894 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d002      	beq.n	80076cc <USBD_StdEPReq+0xe6>
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d016      	beq.n	80076f8 <USBD_StdEPReq+0x112>
 80076ca:	e030      	b.n	800772e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00d      	beq.n	80076ee <USBD_StdEPReq+0x108>
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	2b80      	cmp	r3, #128	; 0x80
 80076d6:	d00a      	beq.n	80076ee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 f821 	bl	8008724 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076e2:	2180      	movs	r1, #128	; 0x80
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 f81d 	bl	8008724 <USBD_LL_StallEP>
 80076ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076ec:	e025      	b.n	800773a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc09 	bl	8007f08 <USBD_CtlError>
              break;
 80076f6:	e020      	b.n	800773a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	885b      	ldrh	r3, [r3, #2]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d11b      	bne.n	8007738 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 f827 	bl	8008762 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fca5 	bl	8008064 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	4798      	blx	r3
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800772c:	e004      	b.n	8007738 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fbe9 	bl	8007f08 <USBD_CtlError>
              break;
 8007736:	e000      	b.n	800773a <USBD_StdEPReq+0x154>
              break;
 8007738:	bf00      	nop
          }
          break;
 800773a:	e0ab      	b.n	8007894 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b02      	cmp	r3, #2
 8007746:	d002      	beq.n	800774e <USBD_StdEPReq+0x168>
 8007748:	2b03      	cmp	r3, #3
 800774a:	d032      	beq.n	80077b2 <USBD_StdEPReq+0x1cc>
 800774c:	e097      	b.n	800787e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d007      	beq.n	8007764 <USBD_StdEPReq+0x17e>
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b80      	cmp	r3, #128	; 0x80
 8007758:	d004      	beq.n	8007764 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fbd3 	bl	8007f08 <USBD_CtlError>
                break;
 8007762:	e091      	b.n	8007888 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007768:	2b00      	cmp	r3, #0
 800776a:	da0b      	bge.n	8007784 <USBD_StdEPReq+0x19e>
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	3310      	adds	r3, #16
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	4413      	add	r3, r2
 8007780:	3304      	adds	r3, #4
 8007782:	e00b      	b.n	800779c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	4413      	add	r3, r2
 800779a:	3304      	adds	r3, #4
 800779c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2202      	movs	r2, #2
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fc1d 	bl	8007fea <USBD_CtlSendData>
              break;
 80077b0:	e06a      	b.n	8007888 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	da11      	bge.n	80077de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	f003 020f 	and.w	r2, r3, #15
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	440b      	add	r3, r1
 80077cc:	3324      	adds	r3, #36	; 0x24
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d117      	bne.n	8007804 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fb96 	bl	8007f08 <USBD_CtlError>
                  break;
 80077dc:	e054      	b.n	8007888 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	f003 020f 	and.w	r2, r3, #15
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	440b      	add	r3, r1
 80077f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d104      	bne.n	8007804 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fb83 	bl	8007f08 <USBD_CtlError>
                  break;
 8007802:	e041      	b.n	8007888 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007804:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007808:	2b00      	cmp	r3, #0
 800780a:	da0b      	bge.n	8007824 <USBD_StdEPReq+0x23e>
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	3310      	adds	r3, #16
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	4413      	add	r3, r2
 8007820:	3304      	adds	r3, #4
 8007822:	e00b      	b.n	800783c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	4413      	add	r3, r2
 800783a:	3304      	adds	r3, #4
 800783c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <USBD_StdEPReq+0x264>
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b80      	cmp	r3, #128	; 0x80
 8007848:	d103      	bne.n	8007852 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	e00e      	b.n	8007870 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 ffa2 	bl	80087a0 <USBD_LL_IsStallEP>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2201      	movs	r2, #1
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	e002      	b.n	8007870 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2202      	movs	r2, #2
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fbb7 	bl	8007fea <USBD_CtlSendData>
              break;
 800787c:	e004      	b.n	8007888 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fb41 	bl	8007f08 <USBD_CtlError>
              break;
 8007886:	bf00      	nop
          }
          break;
 8007888:	e004      	b.n	8007894 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fb3b 	bl	8007f08 <USBD_CtlError>
          break;
 8007892:	bf00      	nop
      }
      break;
 8007894:	e004      	b.n	80078a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fb35 	bl	8007f08 <USBD_CtlError>
      break;
 800789e:	bf00      	nop
  }

  return ret;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	885b      	ldrh	r3, [r3, #2]
 80078c6:	0a1b      	lsrs	r3, r3, #8
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	3b01      	subs	r3, #1
 80078cc:	2b06      	cmp	r3, #6
 80078ce:	f200 8128 	bhi.w	8007b22 <USBD_GetDescriptor+0x276>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <USBD_GetDescriptor+0x2c>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078f5 	.word	0x080078f5
 80078dc:	0800790d 	.word	0x0800790d
 80078e0:	0800794d 	.word	0x0800794d
 80078e4:	08007b23 	.word	0x08007b23
 80078e8:	08007b23 	.word	0x08007b23
 80078ec:	08007ac3 	.word	0x08007ac3
 80078f0:	08007aef 	.word	0x08007aef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	7c12      	ldrb	r2, [r2, #16]
 8007900:	f107 0108 	add.w	r1, r7, #8
 8007904:	4610      	mov	r0, r2
 8007906:	4798      	blx	r3
 8007908:	60f8      	str	r0, [r7, #12]
      break;
 800790a:	e112      	b.n	8007b32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	7c1b      	ldrb	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10d      	bne.n	8007930 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791c:	f107 0208 	add.w	r2, r7, #8
 8007920:	4610      	mov	r0, r2
 8007922:	4798      	blx	r3
 8007924:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3301      	adds	r3, #1
 800792a:	2202      	movs	r2, #2
 800792c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800792e:	e100      	b.n	8007b32 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	f107 0208 	add.w	r2, r7, #8
 800793c:	4610      	mov	r0, r2
 800793e:	4798      	blx	r3
 8007940:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3301      	adds	r3, #1
 8007946:	2202      	movs	r2, #2
 8007948:	701a      	strb	r2, [r3, #0]
      break;
 800794a:	e0f2      	b.n	8007b32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	885b      	ldrh	r3, [r3, #2]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b05      	cmp	r3, #5
 8007954:	f200 80ac 	bhi.w	8007ab0 <USBD_GetDescriptor+0x204>
 8007958:	a201      	add	r2, pc, #4	; (adr r2, 8007960 <USBD_GetDescriptor+0xb4>)
 800795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795e:	bf00      	nop
 8007960:	08007979 	.word	0x08007979
 8007964:	080079ad 	.word	0x080079ad
 8007968:	080079e1 	.word	0x080079e1
 800796c:	08007a15 	.word	0x08007a15
 8007970:	08007a49 	.word	0x08007a49
 8007974:	08007a7d 	.word	0x08007a7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00b      	beq.n	800799c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	7c12      	ldrb	r2, [r2, #16]
 8007990:	f107 0108 	add.w	r1, r7, #8
 8007994:	4610      	mov	r0, r2
 8007996:	4798      	blx	r3
 8007998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800799a:	e091      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fab2 	bl	8007f08 <USBD_CtlError>
            err++;
 80079a4:	7afb      	ldrb	r3, [r7, #11]
 80079a6:	3301      	adds	r3, #1
 80079a8:	72fb      	strb	r3, [r7, #11]
          break;
 80079aa:	e089      	b.n	8007ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	7c12      	ldrb	r2, [r2, #16]
 80079c4:	f107 0108 	add.w	r1, r7, #8
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
 80079cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ce:	e077      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa98 	bl	8007f08 <USBD_CtlError>
            err++;
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	3301      	adds	r3, #1
 80079dc:	72fb      	strb	r3, [r7, #11]
          break;
 80079de:	e06f      	b.n	8007ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00b      	beq.n	8007a04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	7c12      	ldrb	r2, [r2, #16]
 80079f8:	f107 0108 	add.w	r1, r7, #8
 80079fc:	4610      	mov	r0, r2
 80079fe:	4798      	blx	r3
 8007a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a02:	e05d      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa7e 	bl	8007f08 <USBD_CtlError>
            err++;
 8007a0c:	7afb      	ldrb	r3, [r7, #11]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	72fb      	strb	r3, [r7, #11]
          break;
 8007a12:	e055      	b.n	8007ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	7c12      	ldrb	r2, [r2, #16]
 8007a2c:	f107 0108 	add.w	r1, r7, #8
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
 8007a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a36:	e043      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa64 	bl	8007f08 <USBD_CtlError>
            err++;
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	3301      	adds	r3, #1
 8007a44:	72fb      	strb	r3, [r7, #11]
          break;
 8007a46:	e03b      	b.n	8007ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	7c12      	ldrb	r2, [r2, #16]
 8007a60:	f107 0108 	add.w	r1, r7, #8
 8007a64:	4610      	mov	r0, r2
 8007a66:	4798      	blx	r3
 8007a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a6a:	e029      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fa4a 	bl	8007f08 <USBD_CtlError>
            err++;
 8007a74:	7afb      	ldrb	r3, [r7, #11]
 8007a76:	3301      	adds	r3, #1
 8007a78:	72fb      	strb	r3, [r7, #11]
          break;
 8007a7a:	e021      	b.n	8007ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00b      	beq.n	8007aa0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	7c12      	ldrb	r2, [r2, #16]
 8007a94:	f107 0108 	add.w	r1, r7, #8
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4798      	blx	r3
 8007a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a9e:	e00f      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fa30 	bl	8007f08 <USBD_CtlError>
            err++;
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	72fb      	strb	r3, [r7, #11]
          break;
 8007aae:	e007      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa28 	bl	8007f08 <USBD_CtlError>
          err++;
 8007ab8:	7afb      	ldrb	r3, [r7, #11]
 8007aba:	3301      	adds	r3, #1
 8007abc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007abe:	bf00      	nop
      }
      break;
 8007ac0:	e037      	b.n	8007b32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	7c1b      	ldrb	r3, [r3, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d109      	bne.n	8007ade <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad2:	f107 0208 	add.w	r2, r7, #8
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	4798      	blx	r3
 8007ada:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007adc:	e029      	b.n	8007b32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fa11 	bl	8007f08 <USBD_CtlError>
        err++;
 8007ae6:	7afb      	ldrb	r3, [r7, #11]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	72fb      	strb	r3, [r7, #11]
      break;
 8007aec:	e021      	b.n	8007b32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	7c1b      	ldrb	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10d      	bne.n	8007b12 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afe:	f107 0208 	add.w	r2, r7, #8
 8007b02:	4610      	mov	r0, r2
 8007b04:	4798      	blx	r3
 8007b06:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	2207      	movs	r2, #7
 8007b0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b10:	e00f      	b.n	8007b32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f9f7 	bl	8007f08 <USBD_CtlError>
        err++;
 8007b1a:	7afb      	ldrb	r3, [r7, #11]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b20:	e007      	b.n	8007b32 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f9ef 	bl	8007f08 <USBD_CtlError>
      err++;
 8007b2a:	7afb      	ldrb	r3, [r7, #11]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b30:	bf00      	nop
  }

  if (err != 0U)
 8007b32:	7afb      	ldrb	r3, [r7, #11]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d11e      	bne.n	8007b76 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	88db      	ldrh	r3, [r3, #6]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d016      	beq.n	8007b6e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007b40:	893b      	ldrh	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00e      	beq.n	8007b64 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	88da      	ldrh	r2, [r3, #6]
 8007b4a:	893b      	ldrh	r3, [r7, #8]
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	bf28      	it	cs
 8007b50:	4613      	movcs	r3, r2
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b56:	893b      	ldrh	r3, [r7, #8]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fa44 	bl	8007fea <USBD_CtlSendData>
 8007b62:	e009      	b.n	8007b78 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f9ce 	bl	8007f08 <USBD_CtlError>
 8007b6c:	e004      	b.n	8007b78 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa78 	bl	8008064 <USBD_CtlSendStatus>
 8007b74:	e000      	b.n	8007b78 <USBD_GetDescriptor+0x2cc>
    return;
 8007b76:	bf00      	nop
  }
}
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop

08007b80 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	889b      	ldrh	r3, [r3, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d131      	bne.n	8007bf6 <USBD_SetAddress+0x76>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	88db      	ldrh	r3, [r3, #6]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d12d      	bne.n	8007bf6 <USBD_SetAddress+0x76>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	885b      	ldrh	r3, [r3, #2]
 8007b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8007ba0:	d829      	bhi.n	8007bf6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	885b      	ldrh	r3, [r3, #2]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d104      	bne.n	8007bc4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f9a3 	bl	8007f08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc2:	e01d      	b.n	8007c00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	7bfa      	ldrb	r2, [r7, #15]
 8007bc8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fe11 	bl	80087f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fa44 	bl	8008064 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2202      	movs	r2, #2
 8007be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bea:	e009      	b.n	8007c00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf4:	e004      	b.n	8007c00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f985 	bl	8007f08 <USBD_CtlError>
  }
}
 8007bfe:	bf00      	nop
 8007c00:	bf00      	nop
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	885b      	ldrh	r3, [r3, #2]
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	4b4c      	ldr	r3, [pc, #304]	; (8007d50 <USBD_SetConfig+0x148>)
 8007c1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c20:	4b4b      	ldr	r3, [pc, #300]	; (8007d50 <USBD_SetConfig+0x148>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d905      	bls.n	8007c34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f96c 	bl	8007f08 <USBD_CtlError>
    return USBD_FAIL;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e088      	b.n	8007d46 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d002      	beq.n	8007c46 <USBD_SetConfig+0x3e>
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d025      	beq.n	8007c90 <USBD_SetConfig+0x88>
 8007c44:	e071      	b.n	8007d2a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c46:	4b42      	ldr	r3, [pc, #264]	; (8007d50 <USBD_SetConfig+0x148>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d01c      	beq.n	8007c88 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007c4e:	4b40      	ldr	r3, [pc, #256]	; (8007d50 <USBD_SetConfig+0x148>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c58:	4b3d      	ldr	r3, [pc, #244]	; (8007d50 <USBD_SetConfig+0x148>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff f948 	bl	8006ef4 <USBD_SetClassConfig>
 8007c64:	4603      	mov	r3, r0
 8007c66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d004      	beq.n	8007c78 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007c6e:	6839      	ldr	r1, [r7, #0]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f949 	bl	8007f08 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c76:	e065      	b.n	8007d44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9f3 	bl	8008064 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2203      	movs	r2, #3
 8007c82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c86:	e05d      	b.n	8007d44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f9eb 	bl	8008064 <USBD_CtlSendStatus>
      break;
 8007c8e:	e059      	b.n	8007d44 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c90:	4b2f      	ldr	r3, [pc, #188]	; (8007d50 <USBD_SetConfig+0x148>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d112      	bne.n	8007cbe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ca0:	4b2b      	ldr	r3, [pc, #172]	; (8007d50 <USBD_SetConfig+0x148>)
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007caa:	4b29      	ldr	r3, [pc, #164]	; (8007d50 <USBD_SetConfig+0x148>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff f93b 	bl	8006f2c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f9d4 	bl	8008064 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cbc:	e042      	b.n	8007d44 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007cbe:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <USBD_SetConfig+0x148>)
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d02a      	beq.n	8007d22 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff f929 	bl	8006f2c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007cda:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <USBD_SetConfig+0x148>)
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ce4:	4b1a      	ldr	r3, [pc, #104]	; (8007d50 <USBD_SetConfig+0x148>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff f902 	bl	8006ef4 <USBD_SetClassConfig>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00f      	beq.n	8007d1a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f903 	bl	8007f08 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff f90e 	bl	8006f2c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d18:	e014      	b.n	8007d44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f9a2 	bl	8008064 <USBD_CtlSendStatus>
      break;
 8007d20:	e010      	b.n	8007d44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f99e 	bl	8008064 <USBD_CtlSendStatus>
      break;
 8007d28:	e00c      	b.n	8007d44 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f8eb 	bl	8007f08 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d32:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <USBD_SetConfig+0x148>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff f8f7 	bl	8006f2c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	73fb      	strb	r3, [r7, #15]
      break;
 8007d42:	bf00      	nop
  }

  return ret;
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	200006e4 	.word	0x200006e4

08007d54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	88db      	ldrh	r3, [r3, #6]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d004      	beq.n	8007d70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f8cd 	bl	8007f08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d6e:	e023      	b.n	8007db8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	dc02      	bgt.n	8007d82 <USBD_GetConfig+0x2e>
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	dc03      	bgt.n	8007d88 <USBD_GetConfig+0x34>
 8007d80:	e015      	b.n	8007dae <USBD_GetConfig+0x5a>
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d00b      	beq.n	8007d9e <USBD_GetConfig+0x4a>
 8007d86:	e012      	b.n	8007dae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3308      	adds	r3, #8
 8007d92:	2201      	movs	r2, #1
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f927 	bl	8007fea <USBD_CtlSendData>
        break;
 8007d9c:	e00c      	b.n	8007db8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3304      	adds	r3, #4
 8007da2:	2201      	movs	r2, #1
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f91f 	bl	8007fea <USBD_CtlSendData>
        break;
 8007dac:	e004      	b.n	8007db8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f8a9 	bl	8007f08 <USBD_CtlError>
        break;
 8007db6:	bf00      	nop
}
 8007db8:	bf00      	nop
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d81e      	bhi.n	8007e16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	88db      	ldrh	r3, [r3, #6]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d004      	beq.n	8007dea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f890 	bl	8007f08 <USBD_CtlError>
        break;
 8007de8:	e01a      	b.n	8007e20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f043 0202 	orr.w	r2, r3, #2
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	330c      	adds	r3, #12
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f8eb 	bl	8007fea <USBD_CtlSendData>
      break;
 8007e14:	e004      	b.n	8007e20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f875 	bl	8007f08 <USBD_CtlError>
      break;
 8007e1e:	bf00      	nop
  }
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	885b      	ldrh	r3, [r3, #2]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d106      	bne.n	8007e48 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f90e 	bl	8008064 <USBD_CtlSendStatus>
  }
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d80b      	bhi.n	8007e80 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	885b      	ldrh	r3, [r3, #2]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d10c      	bne.n	8007e8a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f8f3 	bl	8008064 <USBD_CtlSendStatus>
      }
      break;
 8007e7e:	e004      	b.n	8007e8a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f840 	bl	8007f08 <USBD_CtlError>
      break;
 8007e88:	e000      	b.n	8007e8c <USBD_ClrFeature+0x3c>
      break;
 8007e8a:	bf00      	nop
  }
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	781a      	ldrb	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3301      	adds	r3, #1
 8007eae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	781a      	ldrb	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f7ff fabb 	bl	800743a <SWAPBYTE>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f7ff faae 	bl	800743a <SWAPBYTE>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f7ff faa1 	bl	800743a <SWAPBYTE>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	461a      	mov	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	80da      	strh	r2, [r3, #6]
}
 8007f00:	bf00      	nop
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f12:	2180      	movs	r1, #128	; 0x80
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fc05 	bl	8008724 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fc01 	bl	8008724 <USBD_LL_StallEP>
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b086      	sub	sp, #24
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d036      	beq.n	8007fae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007f44:	6938      	ldr	r0, [r7, #16]
 8007f46:	f000 f836 	bl	8007fb6 <USBD_GetLen>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	7812      	ldrb	r2, [r2, #0]
 8007f62:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	3301      	adds	r3, #1
 8007f68:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f6a:	7dfb      	ldrb	r3, [r7, #23]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	4413      	add	r3, r2
 8007f70:	2203      	movs	r2, #3
 8007f72:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	3301      	adds	r3, #1
 8007f78:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f7a:	e013      	b.n	8007fa4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	4413      	add	r3, r2
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	7812      	ldrb	r2, [r2, #0]
 8007f86:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	613b      	str	r3, [r7, #16]
    idx++;
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	3301      	adds	r3, #1
 8007f92:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	4413      	add	r3, r2
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e7      	bne.n	8007f7c <USBD_GetString+0x52>
 8007fac:	e000      	b.n	8007fb0 <USBD_GetString+0x86>
    return;
 8007fae:	bf00      	nop
  }
}
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b085      	sub	sp, #20
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007fc6:	e005      	b.n	8007fd4 <USBD_GetLen+0x1e>
  {
    len++;
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1f5      	bne.n	8007fc8 <USBD_GetLen+0x12>
  }

  return len;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	2100      	movs	r1, #0
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 fc10 	bl	8008836 <USBD_LL_Transmit>

  return USBD_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	2100      	movs	r1, #0
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 fbff 	bl	8008836 <USBD_LL_Transmit>

  return USBD_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	2100      	movs	r1, #0
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 fc0f 	bl	8008878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2204      	movs	r2, #4
 8008070:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008074:	2300      	movs	r3, #0
 8008076:	2200      	movs	r2, #0
 8008078:	2100      	movs	r1, #0
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fbdb 	bl	8008836 <USBD_LL_Transmit>

  return USBD_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2205      	movs	r2, #5
 8008096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800809a:	2300      	movs	r3, #0
 800809c:	2200      	movs	r2, #0
 800809e:	2100      	movs	r1, #0
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fbe9 	bl	8008878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080b4:	2200      	movs	r2, #0
 80080b6:	490e      	ldr	r1, [pc, #56]	; (80080f0 <MX_USB_DEVICE_Init+0x40>)
 80080b8:	480e      	ldr	r0, [pc, #56]	; (80080f4 <MX_USB_DEVICE_Init+0x44>)
 80080ba:	f7fe fead 	bl	8006e18 <USBD_Init>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080c4:	f7f8 fd7e 	bl	8000bc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80080c8:	490b      	ldr	r1, [pc, #44]	; (80080f8 <MX_USB_DEVICE_Init+0x48>)
 80080ca:	480a      	ldr	r0, [pc, #40]	; (80080f4 <MX_USB_DEVICE_Init+0x44>)
 80080cc:	f7fe fed4 	bl	8006e78 <USBD_RegisterClass>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080d6:	f7f8 fd75 	bl	8000bc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080da:	4806      	ldr	r0, [pc, #24]	; (80080f4 <MX_USB_DEVICE_Init+0x44>)
 80080dc:	f7fe fef3 	bl	8006ec6 <USBD_Start>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80080e6:	f7f8 fd6d 	bl	8000bc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080ea:	bf00      	nop
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	20000108 	.word	0x20000108
 80080f4:	20000914 	.word	0x20000914
 80080f8:	2000001c 	.word	0x2000001c

080080fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	6039      	str	r1, [r7, #0]
 8008106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2212      	movs	r2, #18
 800810c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800810e:	4b03      	ldr	r3, [pc, #12]	; (800811c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008110:	4618      	mov	r0, r3
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	20000124 	.word	0x20000124

08008120 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	6039      	str	r1, [r7, #0]
 800812a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2204      	movs	r2, #4
 8008130:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	20000138 	.word	0x20000138

08008144 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	6039      	str	r1, [r7, #0]
 800814e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d105      	bne.n	8008162 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	4907      	ldr	r1, [pc, #28]	; (8008178 <USBD_FS_ProductStrDescriptor+0x34>)
 800815a:	4808      	ldr	r0, [pc, #32]	; (800817c <USBD_FS_ProductStrDescriptor+0x38>)
 800815c:	f7ff fee5 	bl	8007f2a <USBD_GetString>
 8008160:	e004      	b.n	800816c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	4904      	ldr	r1, [pc, #16]	; (8008178 <USBD_FS_ProductStrDescriptor+0x34>)
 8008166:	4805      	ldr	r0, [pc, #20]	; (800817c <USBD_FS_ProductStrDescriptor+0x38>)
 8008168:	f7ff fedf 	bl	8007f2a <USBD_GetString>
  }
  return USBD_StrDesc;
 800816c:	4b02      	ldr	r3, [pc, #8]	; (8008178 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20000be4 	.word	0x20000be4
 800817c:	080089b4 	.word	0x080089b4

08008180 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	6039      	str	r1, [r7, #0]
 800818a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	4904      	ldr	r1, [pc, #16]	; (80081a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008190:	4804      	ldr	r0, [pc, #16]	; (80081a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008192:	f7ff feca 	bl	8007f2a <USBD_GetString>
  return USBD_StrDesc;
 8008196:	4b02      	ldr	r3, [pc, #8]	; (80081a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000be4 	.word	0x20000be4
 80081a4:	080089cc 	.word	0x080089cc

080081a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	6039      	str	r1, [r7, #0]
 80081b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	221a      	movs	r2, #26
 80081b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081ba:	f000 f843 	bl	8008244 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081be:	4b02      	ldr	r3, [pc, #8]	; (80081c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	2000013c 	.word	0x2000013c

080081cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	4603      	mov	r3, r0
 80081d4:	6039      	str	r1, [r7, #0]
 80081d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d105      	bne.n	80081ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	4907      	ldr	r1, [pc, #28]	; (8008200 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081e2:	4808      	ldr	r0, [pc, #32]	; (8008204 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081e4:	f7ff fea1 	bl	8007f2a <USBD_GetString>
 80081e8:	e004      	b.n	80081f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	4904      	ldr	r1, [pc, #16]	; (8008200 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081ee:	4805      	ldr	r0, [pc, #20]	; (8008204 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081f0:	f7ff fe9b 	bl	8007f2a <USBD_GetString>
  }
  return USBD_StrDesc;
 80081f4:	4b02      	ldr	r3, [pc, #8]	; (8008200 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000be4 	.word	0x20000be4
 8008204:	080089e0 	.word	0x080089e0

08008208 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	6039      	str	r1, [r7, #0]
 8008212:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008214:	79fb      	ldrb	r3, [r7, #7]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d105      	bne.n	8008226 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	4907      	ldr	r1, [pc, #28]	; (800823c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800821e:	4808      	ldr	r0, [pc, #32]	; (8008240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008220:	f7ff fe83 	bl	8007f2a <USBD_GetString>
 8008224:	e004      	b.n	8008230 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	4904      	ldr	r1, [pc, #16]	; (800823c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800822a:	4805      	ldr	r0, [pc, #20]	; (8008240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800822c:	f7ff fe7d 	bl	8007f2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008230:	4b02      	ldr	r3, [pc, #8]	; (800823c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000be4 	.word	0x20000be4
 8008240:	080089ec 	.word	0x080089ec

08008244 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800824a:	4b0f      	ldr	r3, [pc, #60]	; (8008288 <Get_SerialNum+0x44>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008250:	4b0e      	ldr	r3, [pc, #56]	; (800828c <Get_SerialNum+0x48>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008256:	4b0e      	ldr	r3, [pc, #56]	; (8008290 <Get_SerialNum+0x4c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4413      	add	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d009      	beq.n	800827e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800826a:	2208      	movs	r2, #8
 800826c:	4909      	ldr	r1, [pc, #36]	; (8008294 <Get_SerialNum+0x50>)
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 f814 	bl	800829c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008274:	2204      	movs	r2, #4
 8008276:	4908      	ldr	r1, [pc, #32]	; (8008298 <Get_SerialNum+0x54>)
 8008278:	68b8      	ldr	r0, [r7, #8]
 800827a:	f000 f80f 	bl	800829c <IntToUnicode>
  }
}
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	1fff7a10 	.word	0x1fff7a10
 800828c:	1fff7a14 	.word	0x1fff7a14
 8008290:	1fff7a18 	.word	0x1fff7a18
 8008294:	2000013e 	.word	0x2000013e
 8008298:	2000014e 	.word	0x2000014e

0800829c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	4613      	mov	r3, r2
 80082a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082ae:	2300      	movs	r3, #0
 80082b0:	75fb      	strb	r3, [r7, #23]
 80082b2:	e027      	b.n	8008304 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	0f1b      	lsrs	r3, r3, #28
 80082b8:	2b09      	cmp	r3, #9
 80082ba:	d80b      	bhi.n	80082d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	0f1b      	lsrs	r3, r3, #28
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	4619      	mov	r1, r3
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	440b      	add	r3, r1
 80082cc:	3230      	adds	r2, #48	; 0x30
 80082ce:	b2d2      	uxtb	r2, r2
 80082d0:	701a      	strb	r2, [r3, #0]
 80082d2:	e00a      	b.n	80082ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	0f1b      	lsrs	r3, r3, #28
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	4619      	mov	r1, r3
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	440b      	add	r3, r1
 80082e4:	3237      	adds	r2, #55	; 0x37
 80082e6:	b2d2      	uxtb	r2, r2
 80082e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	011b      	lsls	r3, r3, #4
 80082ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	3301      	adds	r3, #1
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	4413      	add	r3, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
 8008300:	3301      	adds	r3, #1
 8008302:	75fb      	strb	r3, [r7, #23]
 8008304:	7dfa      	ldrb	r2, [r7, #23]
 8008306:	79fb      	ldrb	r3, [r7, #7]
 8008308:	429a      	cmp	r2, r3
 800830a:	d3d3      	bcc.n	80082b4 <IntToUnicode+0x18>
  }
}
 800830c:	bf00      	nop
 800830e:	bf00      	nop
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
	...

0800831c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b08a      	sub	sp, #40	; 0x28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	605a      	str	r2, [r3, #4]
 800832e:	609a      	str	r2, [r3, #8]
 8008330:	60da      	str	r2, [r3, #12]
 8008332:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800833c:	d14b      	bne.n	80083d6 <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800833e:	2300      	movs	r3, #0
 8008340:	613b      	str	r3, [r7, #16]
 8008342:	4b27      	ldr	r3, [pc, #156]	; (80083e0 <HAL_PCD_MspInit+0xc4>)
 8008344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008346:	4a26      	ldr	r2, [pc, #152]	; (80083e0 <HAL_PCD_MspInit+0xc4>)
 8008348:	f043 0301 	orr.w	r3, r3, #1
 800834c:	6313      	str	r3, [r2, #48]	; 0x30
 800834e:	4b24      	ldr	r3, [pc, #144]	; (80083e0 <HAL_PCD_MspInit+0xc4>)
 8008350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	613b      	str	r3, [r7, #16]
 8008358:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800835a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800835e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008360:	2302      	movs	r3, #2
 8008362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008364:	2300      	movs	r3, #0
 8008366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008368:	2303      	movs	r3, #3
 800836a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800836c:	230a      	movs	r3, #10
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008370:	f107 0314 	add.w	r3, r7, #20
 8008374:	4619      	mov	r1, r3
 8008376:	481b      	ldr	r0, [pc, #108]	; (80083e4 <HAL_PCD_MspInit+0xc8>)
 8008378:	f7f9 ff66 	bl	8002248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800837c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008382:	2302      	movs	r3, #2
 8008384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008386:	2301      	movs	r3, #1
 8008388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800838a:	2303      	movs	r3, #3
 800838c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800838e:	230a      	movs	r3, #10
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008392:	f107 0314 	add.w	r3, r7, #20
 8008396:	4619      	mov	r1, r3
 8008398:	4812      	ldr	r0, [pc, #72]	; (80083e4 <HAL_PCD_MspInit+0xc8>)
 800839a:	f7f9 ff55 	bl	8002248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800839e:	4b10      	ldr	r3, [pc, #64]	; (80083e0 <HAL_PCD_MspInit+0xc4>)
 80083a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a2:	4a0f      	ldr	r2, [pc, #60]	; (80083e0 <HAL_PCD_MspInit+0xc4>)
 80083a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a8:	6353      	str	r3, [r2, #52]	; 0x34
 80083aa:	2300      	movs	r3, #0
 80083ac:	60fb      	str	r3, [r7, #12]
 80083ae:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <HAL_PCD_MspInit+0xc4>)
 80083b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b2:	4a0b      	ldr	r2, [pc, #44]	; (80083e0 <HAL_PCD_MspInit+0xc4>)
 80083b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083b8:	6453      	str	r3, [r2, #68]	; 0x44
 80083ba:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <HAL_PCD_MspInit+0xc4>)
 80083bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083c6:	2200      	movs	r2, #0
 80083c8:	2100      	movs	r1, #0
 80083ca:	2043      	movs	r0, #67	; 0x43
 80083cc:	f7f9 fb03 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083d0:	2043      	movs	r0, #67	; 0x43
 80083d2:	f7f9 fb1c 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083d6:	bf00      	nop
 80083d8:	3728      	adds	r7, #40	; 0x28
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	40023800 	.word	0x40023800
 80083e4:	40020000 	.word	0x40020000

080083e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083fc:	4619      	mov	r1, r3
 80083fe:	4610      	mov	r0, r2
 8008400:	f7fe fdac 	bl	8006f5c <USBD_LL_SetupStage>
}
 8008404:	bf00      	nop
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	460b      	mov	r3, r1
 8008416:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800841e:	78fa      	ldrb	r2, [r7, #3]
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	4613      	mov	r3, r2
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	1a9b      	subs	r3, r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	440b      	add	r3, r1
 800842c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	78fb      	ldrb	r3, [r7, #3]
 8008434:	4619      	mov	r1, r3
 8008436:	f7fe fde6 	bl	8007006 <USBD_LL_DataOutStage>
}
 800843a:	bf00      	nop
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008454:	78fa      	ldrb	r2, [r7, #3]
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	4613      	mov	r3, r2
 800845a:	00db      	lsls	r3, r3, #3
 800845c:	1a9b      	subs	r3, r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	440b      	add	r3, r1
 8008462:	3348      	adds	r3, #72	; 0x48
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	4619      	mov	r1, r3
 800846a:	f7fe fe2f 	bl	80070cc <USBD_LL_DataInStage>
}
 800846e:	bf00      	nop
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008484:	4618      	mov	r0, r3
 8008486:	f7fe ff43 	bl	8007310 <USBD_LL_SOF>
}
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800849a:	2301      	movs	r3, #1
 800849c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80084a6:	2300      	movs	r3, #0
 80084a8:	73fb      	strb	r3, [r7, #15]
 80084aa:	e008      	b.n	80084be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d102      	bne.n	80084ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80084b4:	2301      	movs	r3, #1
 80084b6:	73fb      	strb	r3, [r7, #15]
 80084b8:	e001      	b.n	80084be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80084ba:	f7f8 fb83 	bl	8000bc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084c4:	7bfa      	ldrb	r2, [r7, #15]
 80084c6:	4611      	mov	r1, r2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fe fee3 	bl	8007294 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fe fe8f 	bl	80071f8 <USBD_LL_Reset>
}
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe fede 	bl	80072b4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	6812      	ldr	r2, [r2, #0]
 8008506:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800850a:	f043 0301 	orr.w	r3, r3, #1
 800850e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d005      	beq.n	8008524 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008518:	4b04      	ldr	r3, [pc, #16]	; (800852c <HAL_PCD_SuspendCallback+0x48>)
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	4a03      	ldr	r2, [pc, #12]	; (800852c <HAL_PCD_SuspendCallback+0x48>)
 800851e:	f043 0306 	orr.w	r3, r3, #6
 8008522:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	e000ed00 	.word	0xe000ed00

08008530 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800853e:	4618      	mov	r0, r3
 8008540:	f7fe fece 	bl	80072e0 <USBD_LL_Resume>
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	460b      	mov	r3, r1
 8008556:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800855e:	78fa      	ldrb	r2, [r7, #3]
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe ff1c 	bl	80073a0 <USBD_LL_IsoOUTIncomplete>
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008582:	78fa      	ldrb	r2, [r7, #3]
 8008584:	4611      	mov	r1, r2
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe fee4 	bl	8007354 <USBD_LL_IsoINIncomplete>
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe ff22 	bl	80073ec <USBD_LL_DevConnected>
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fe ff1f 	bl	8007402 <USBD_LL_DevDisconnected>
}
 80085c4:	bf00      	nop
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d13c      	bne.n	8008656 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80085dc:	4a20      	ldr	r2, [pc, #128]	; (8008660 <USBD_LL_Init+0x94>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a1e      	ldr	r2, [pc, #120]	; (8008660 <USBD_LL_Init+0x94>)
 80085e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085ec:	4b1c      	ldr	r3, [pc, #112]	; (8008660 <USBD_LL_Init+0x94>)
 80085ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80085f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80085f4:	4b1a      	ldr	r3, [pc, #104]	; (8008660 <USBD_LL_Init+0x94>)
 80085f6:	2204      	movs	r2, #4
 80085f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80085fa:	4b19      	ldr	r3, [pc, #100]	; (8008660 <USBD_LL_Init+0x94>)
 80085fc:	2202      	movs	r2, #2
 80085fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008600:	4b17      	ldr	r3, [pc, #92]	; (8008660 <USBD_LL_Init+0x94>)
 8008602:	2200      	movs	r2, #0
 8008604:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008606:	4b16      	ldr	r3, [pc, #88]	; (8008660 <USBD_LL_Init+0x94>)
 8008608:	2202      	movs	r2, #2
 800860a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800860c:	4b14      	ldr	r3, [pc, #80]	; (8008660 <USBD_LL_Init+0x94>)
 800860e:	2200      	movs	r2, #0
 8008610:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008612:	4b13      	ldr	r3, [pc, #76]	; (8008660 <USBD_LL_Init+0x94>)
 8008614:	2200      	movs	r2, #0
 8008616:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008618:	4b11      	ldr	r3, [pc, #68]	; (8008660 <USBD_LL_Init+0x94>)
 800861a:	2200      	movs	r2, #0
 800861c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800861e:	4b10      	ldr	r3, [pc, #64]	; (8008660 <USBD_LL_Init+0x94>)
 8008620:	2200      	movs	r2, #0
 8008622:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008624:	4b0e      	ldr	r3, [pc, #56]	; (8008660 <USBD_LL_Init+0x94>)
 8008626:	2200      	movs	r2, #0
 8008628:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800862a:	480d      	ldr	r0, [pc, #52]	; (8008660 <USBD_LL_Init+0x94>)
 800862c:	f7f9 ffc1 	bl	80025b2 <HAL_PCD_Init>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008636:	f7f8 fac5 	bl	8000bc4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800863a:	2180      	movs	r1, #128	; 0x80
 800863c:	4808      	ldr	r0, [pc, #32]	; (8008660 <USBD_LL_Init+0x94>)
 800863e:	f7fb f906 	bl	800384e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008642:	2240      	movs	r2, #64	; 0x40
 8008644:	2100      	movs	r1, #0
 8008646:	4806      	ldr	r0, [pc, #24]	; (8008660 <USBD_LL_Init+0x94>)
 8008648:	f7fb f8ba 	bl	80037c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800864c:	2280      	movs	r2, #128	; 0x80
 800864e:	2101      	movs	r1, #1
 8008650:	4803      	ldr	r0, [pc, #12]	; (8008660 <USBD_LL_Init+0x94>)
 8008652:	f7fb f8b5 	bl	80037c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20000de4 	.word	0x20000de4

08008664 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800867a:	4618      	mov	r0, r3
 800867c:	f7fa f8b6 	bl	80027ec <HAL_PCD_Start>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f930 	bl	80088ec <USBD_Get_USB_Status>
 800868c:	4603      	mov	r3, r0
 800868e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008690:	7bbb      	ldrb	r3, [r7, #14]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b084      	sub	sp, #16
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	4608      	mov	r0, r1
 80086a4:	4611      	mov	r1, r2
 80086a6:	461a      	mov	r2, r3
 80086a8:	4603      	mov	r3, r0
 80086aa:	70fb      	strb	r3, [r7, #3]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70bb      	strb	r3, [r7, #2]
 80086b0:	4613      	mov	r3, r2
 80086b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80086c2:	78bb      	ldrb	r3, [r7, #2]
 80086c4:	883a      	ldrh	r2, [r7, #0]
 80086c6:	78f9      	ldrb	r1, [r7, #3]
 80086c8:	f7fa fc9a 	bl	8003000 <HAL_PCD_EP_Open>
 80086cc:	4603      	mov	r3, r0
 80086ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 f90a 	bl	80088ec <USBD_Get_USB_Status>
 80086d8:	4603      	mov	r3, r0
 80086da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008700:	78fa      	ldrb	r2, [r7, #3]
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f7fa fce3 	bl	80030d0 <HAL_PCD_EP_Close>
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f8eb 	bl	80088ec <USBD_Get_USB_Status>
 8008716:	4603      	mov	r3, r0
 8008718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871a:	7bbb      	ldrb	r3, [r7, #14]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800873e:	78fa      	ldrb	r2, [r7, #3]
 8008740:	4611      	mov	r1, r2
 8008742:	4618      	mov	r0, r3
 8008744:	f7fa fda3 	bl	800328e <HAL_PCD_EP_SetStall>
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f8cc 	bl	80088ec <USBD_Get_USB_Status>
 8008754:	4603      	mov	r3, r0
 8008756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008758:	7bbb      	ldrb	r3, [r7, #14]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	460b      	mov	r3, r1
 800876c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800877c:	78fa      	ldrb	r2, [r7, #3]
 800877e:	4611      	mov	r1, r2
 8008780:	4618      	mov	r0, r3
 8008782:	f7fa fde8 	bl	8003356 <HAL_PCD_EP_ClrStall>
 8008786:	4603      	mov	r3, r0
 8008788:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	4618      	mov	r0, r3
 800878e:	f000 f8ad 	bl	80088ec <USBD_Get_USB_Status>
 8008792:	4603      	mov	r3, r0
 8008794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008796:	7bbb      	ldrb	r3, [r7, #14]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	da0b      	bge.n	80087d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c2:	68f9      	ldr	r1, [r7, #12]
 80087c4:	4613      	mov	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	1a9b      	subs	r3, r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	440b      	add	r3, r1
 80087ce:	333e      	adds	r3, #62	; 0x3e
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	e00b      	b.n	80087ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087d4:	78fb      	ldrb	r3, [r7, #3]
 80087d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087da:	68f9      	ldr	r1, [r7, #12]
 80087dc:	4613      	mov	r3, r2
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	1a9b      	subs	r3, r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	440b      	add	r3, r1
 80087e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80087ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008812:	78fa      	ldrb	r2, [r7, #3]
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f7fa fbcd 	bl	8002fb6 <HAL_PCD_SetAddress>
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 f862 	bl	80088ec <USBD_Get_USB_Status>
 8008828:	4603      	mov	r3, r0
 800882a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800882c:	7bbb      	ldrb	r3, [r7, #14]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b086      	sub	sp, #24
 800883a:	af00      	add	r7, sp, #0
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	603b      	str	r3, [r7, #0]
 8008842:	460b      	mov	r3, r1
 8008844:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008854:	7af9      	ldrb	r1, [r7, #11]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	f7fa fcce 	bl	80031fa <HAL_PCD_EP_Transmit>
 800885e:	4603      	mov	r3, r0
 8008860:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	4618      	mov	r0, r3
 8008866:	f000 f841 	bl	80088ec <USBD_Get_USB_Status>
 800886a:	4603      	mov	r3, r0
 800886c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800886e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	607a      	str	r2, [r7, #4]
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	460b      	mov	r3, r1
 8008886:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008896:	7af9      	ldrb	r1, [r7, #11]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	f7fa fc62 	bl	8003164 <HAL_PCD_EP_Receive>
 80088a0:	4603      	mov	r3, r0
 80088a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088a4:	7dfb      	ldrb	r3, [r7, #23]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 f820 	bl	80088ec <USBD_Get_USB_Status>
 80088ac:	4603      	mov	r3, r0
 80088ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3718      	adds	r7, #24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
	...

080088bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088c4:	4b03      	ldr	r3, [pc, #12]	; (80088d4 <USBD_static_malloc+0x18>)
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	200006e8 	.word	0x200006e8

080088d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]

}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	4603      	mov	r3, r0
 80088f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088fa:	79fb      	ldrb	r3, [r7, #7]
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d817      	bhi.n	8008930 <USBD_Get_USB_Status+0x44>
 8008900:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <USBD_Get_USB_Status+0x1c>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	08008919 	.word	0x08008919
 800890c:	0800891f 	.word	0x0800891f
 8008910:	08008925 	.word	0x08008925
 8008914:	0800892b 	.word	0x0800892b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	73fb      	strb	r3, [r7, #15]
    break;
 800891c:	e00b      	b.n	8008936 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800891e:	2303      	movs	r3, #3
 8008920:	73fb      	strb	r3, [r7, #15]
    break;
 8008922:	e008      	b.n	8008936 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008924:	2301      	movs	r3, #1
 8008926:	73fb      	strb	r3, [r7, #15]
    break;
 8008928:	e005      	b.n	8008936 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800892a:	2303      	movs	r3, #3
 800892c:	73fb      	strb	r3, [r7, #15]
    break;
 800892e:	e002      	b.n	8008936 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008930:	2303      	movs	r3, #3
 8008932:	73fb      	strb	r3, [r7, #15]
    break;
 8008934:	bf00      	nop
  }
  return usb_status;
 8008936:	7bfb      	ldrb	r3, [r7, #15]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <__libc_init_array>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	4d0d      	ldr	r5, [pc, #52]	; (800897c <__libc_init_array+0x38>)
 8008948:	4c0d      	ldr	r4, [pc, #52]	; (8008980 <__libc_init_array+0x3c>)
 800894a:	1b64      	subs	r4, r4, r5
 800894c:	10a4      	asrs	r4, r4, #2
 800894e:	2600      	movs	r6, #0
 8008950:	42a6      	cmp	r6, r4
 8008952:	d109      	bne.n	8008968 <__libc_init_array+0x24>
 8008954:	4d0b      	ldr	r5, [pc, #44]	; (8008984 <__libc_init_array+0x40>)
 8008956:	4c0c      	ldr	r4, [pc, #48]	; (8008988 <__libc_init_array+0x44>)
 8008958:	f000 f820 	bl	800899c <_init>
 800895c:	1b64      	subs	r4, r4, r5
 800895e:	10a4      	asrs	r4, r4, #2
 8008960:	2600      	movs	r6, #0
 8008962:	42a6      	cmp	r6, r4
 8008964:	d105      	bne.n	8008972 <__libc_init_array+0x2e>
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	f855 3b04 	ldr.w	r3, [r5], #4
 800896c:	4798      	blx	r3
 800896e:	3601      	adds	r6, #1
 8008970:	e7ee      	b.n	8008950 <__libc_init_array+0xc>
 8008972:	f855 3b04 	ldr.w	r3, [r5], #4
 8008976:	4798      	blx	r3
 8008978:	3601      	adds	r6, #1
 800897a:	e7f2      	b.n	8008962 <__libc_init_array+0x1e>
 800897c:	08008a24 	.word	0x08008a24
 8008980:	08008a24 	.word	0x08008a24
 8008984:	08008a24 	.word	0x08008a24
 8008988:	08008a28 	.word	0x08008a28

0800898c <memset>:
 800898c:	4402      	add	r2, r0
 800898e:	4603      	mov	r3, r0
 8008990:	4293      	cmp	r3, r2
 8008992:	d100      	bne.n	8008996 <memset+0xa>
 8008994:	4770      	bx	lr
 8008996:	f803 1b01 	strb.w	r1, [r3], #1
 800899a:	e7f9      	b.n	8008990 <memset+0x4>

0800899c <_init>:
 800899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899e:	bf00      	nop
 80089a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a2:	bc08      	pop	{r3}
 80089a4:	469e      	mov	lr, r3
 80089a6:	4770      	bx	lr

080089a8 <_fini>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	bf00      	nop
 80089ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ae:	bc08      	pop	{r3}
 80089b0:	469e      	mov	lr, r3
 80089b2:	4770      	bx	lr
