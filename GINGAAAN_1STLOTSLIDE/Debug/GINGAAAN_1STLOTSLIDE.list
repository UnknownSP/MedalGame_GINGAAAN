
GINGAAAN_1STLOTSLIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008968  08008968  00018968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d0  080089d0  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  080089d0  080089d0  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089d8  080089d8  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089d8  080089d8  000189d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089dc  080089dc  000189dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  080089e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e0  20000158  08008b38  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001238  08008b38  00021238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e566  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d66  00000000  00000000  0003e6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00042458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00043380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0bc  00000000  00000000  00044140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001601f  00000000  00000000  0005e1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a805  00000000  00000000  0007421b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fea20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce8  00000000  00000000  000fea74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000158 	.word	0x20000158
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008950 	.word	0x08008950

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000015c 	.word	0x2000015c
 80001d0:	08008950 	.word	0x08008950

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <appInit>:
//static void CheckTouch(uint8_t* recvData, bool* setData);
//static void SetColorData(uint8_t* setArray, uint8_t setColorTouch[][3], uint8_t setColorBar[][3]);
static bool IO_Read(uint8_t sensor);

//初期化
int appInit(void){
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
		SliderBarLEDData[i][1] = 00;
		SliderBarLEDData[i][2] = 128;
	}
	D_Slider_SetThreshold(TouchThreshold);
	*/
	return 0;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <appTask>:

int appTask(void){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
	static int testCount1 = 0;
	static int testCount2 = 140;
	static int testCount3 = 0;
	static int testCount4 = 0;

	sndTime += G_System_counter - recent_System_counter;
 80004e2:	4ba6      	ldr	r3, [pc, #664]	; (800077c <appTask+0x2a0>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4ba6      	ldr	r3, [pc, #664]	; (8000780 <appTask+0x2a4>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	1ad2      	subs	r2, r2, r3
 80004ec:	4ba5      	ldr	r3, [pc, #660]	; (8000784 <appTask+0x2a8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4413      	add	r3, r2
 80004f2:	4aa4      	ldr	r2, [pc, #656]	; (8000784 <appTask+0x2a8>)
 80004f4:	6013      	str	r3, [r2, #0]
	rcvTime += G_System_counter - recent_System_counter;
 80004f6:	4ba1      	ldr	r3, [pc, #644]	; (800077c <appTask+0x2a0>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	4ba1      	ldr	r3, [pc, #644]	; (8000780 <appTask+0x2a4>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	1ad2      	subs	r2, r2, r3
 8000500:	4ba1      	ldr	r3, [pc, #644]	; (8000788 <appTask+0x2ac>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4413      	add	r3, r2
 8000506:	4aa0      	ldr	r2, [pc, #640]	; (8000788 <appTask+0x2ac>)
 8000508:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_counter;
 800050a:	4b9c      	ldr	r3, [pc, #624]	; (800077c <appTask+0x2a0>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a9c      	ldr	r2, [pc, #624]	; (8000780 <appTask+0x2a4>)
 8000510:	6013      	str	r3, [r2, #0]

	//CAN送信タイミングなら送信
	if(sndTime >= CAN_SEND_INTERVAL){
 8000512:	4b9c      	ldr	r3, [pc, #624]	; (8000784 <appTask+0x2a8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b09      	cmp	r3, #9
 8000518:	d902      	bls.n	8000520 <appTask+0x44>

		sndTime = 0;
 800051a:	4b9a      	ldr	r3, [pc, #616]	; (8000784 <appTask+0x2a8>)
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
	}

	static uint8_t sum = 0;
	if(rcvTime >= UART_RECEIVE_INTERVAL){
 8000520:	4b99      	ldr	r3, [pc, #612]	; (8000788 <appTask+0x2ac>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b63      	cmp	r3, #99	; 0x63
 8000526:	d958      	bls.n	80005da <appTask+0xfe>
		static int sendLength = 6;
		sndData_UART[0] = 0xe0;//testCount1;
 8000528:	4b98      	ldr	r3, [pc, #608]	; (800078c <appTask+0x2b0>)
 800052a:	22e0      	movs	r2, #224	; 0xe0
 800052c:	701a      	strb	r2, [r3, #0]
		sndData_UART[1] = 0x01;//testCount1;//testCount2;
 800052e:	4b97      	ldr	r3, [pc, #604]	; (800078c <appTask+0x2b0>)
 8000530:	2201      	movs	r2, #1
 8000532:	705a      	strb	r2, [r3, #1]
		sndData_UART[2] = testCount1;
 8000534:	4b96      	ldr	r3, [pc, #600]	; (8000790 <appTask+0x2b4>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b94      	ldr	r3, [pc, #592]	; (800078c <appTask+0x2b0>)
 800053c:	709a      	strb	r2, [r3, #2]
		sndData_UART[3] = 1;
 800053e:	4b93      	ldr	r3, [pc, #588]	; (800078c <appTask+0x2b0>)
 8000540:	2201      	movs	r2, #1
 8000542:	70da      	strb	r2, [r3, #3]
		sndData_UART[4] = 32;
 8000544:	4b91      	ldr	r3, [pc, #580]	; (800078c <appTask+0x2b0>)
 8000546:	2220      	movs	r2, #32
 8000548:	711a      	strb	r2, [r3, #4]
		sndData_UART[12] = 0;//testCount2;
		sndData_UART[13] = 0;//testCount1;
		sndData_UART[14] = 0;//testCount2;
		sndData_UART[15] = 0;//testCount1;
		 */
		uint8_t dataSum = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	77fb      	strb	r3, [r7, #31]
		//dataSum += sndData_UART[1];
		for(int j=1; j<sendLength-1; j++){
 800054e:	2301      	movs	r3, #1
 8000550:	61bb      	str	r3, [r7, #24]
 8000552:	e00a      	b.n	800056a <appTask+0x8e>
			dataSum += sndData_UART[j];
 8000554:	4a8d      	ldr	r2, [pc, #564]	; (800078c <appTask+0x2b0>)
 8000556:	69bb      	ldr	r3, [r7, #24]
 8000558:	4413      	add	r3, r2
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b2da      	uxtb	r2, r3
 800055e:	7ffb      	ldrb	r3, [r7, #31]
 8000560:	4413      	add	r3, r2
 8000562:	77fb      	strb	r3, [r7, #31]
		for(int j=1; j<sendLength-1; j++){
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	3301      	adds	r3, #1
 8000568:	61bb      	str	r3, [r7, #24]
 800056a:	4b8a      	ldr	r3, [pc, #552]	; (8000794 <appTask+0x2b8>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	3b01      	subs	r3, #1
 8000570:	69ba      	ldr	r2, [r7, #24]
 8000572:	429a      	cmp	r2, r3
 8000574:	dbee      	blt.n	8000554 <appTask+0x78>
		}

		//int checkSum = 256 - (int)dataSum;
		//sndData_UART[2/*sendLength-1*/] = (uint8_t)checkSum - 1;
		sndData_UART[sendLength-1] = (uint8_t)dataSum;
 8000576:	4b87      	ldr	r3, [pc, #540]	; (8000794 <appTask+0x2b8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	3b01      	subs	r3, #1
 800057c:	4983      	ldr	r1, [pc, #524]	; (800078c <appTask+0x2b0>)
 800057e:	7ffa      	ldrb	r2, [r7, #31]
 8000580:	54ca      	strb	r2, [r1, r3]

		//retSnd = D_Slider_Send(sndData_UART,sendLength);
		//retRcv = D_Slider_Receive(rcvData_UART,10);
		rcvTime = 0;
 8000582:	4b81      	ldr	r3, [pc, #516]	; (8000788 <appTask+0x2ac>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
		for(int i=0; i<5; i++){
			if(((data[8]>>i) & 1) == 1) SensorCountR[i]++;
		}
		*/

		testCount1++;
 8000588:	4b81      	ldr	r3, [pc, #516]	; (8000790 <appTask+0x2b4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	4a80      	ldr	r2, [pc, #512]	; (8000790 <appTask+0x2b4>)
 8000590:	6013      	str	r3, [r2, #0]
		if(testCount1 >= 256){
 8000592:	4b7f      	ldr	r3, [pc, #508]	; (8000790 <appTask+0x2b4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2bff      	cmp	r3, #255	; 0xff
 8000598:	dd07      	ble.n	80005aa <appTask+0xce>
			testCount1 = 0;
 800059a:	4b7d      	ldr	r3, [pc, #500]	; (8000790 <appTask+0x2b4>)
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
			testCount2++;
 80005a0:	4b7d      	ldr	r3, [pc, #500]	; (8000798 <appTask+0x2bc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a7c      	ldr	r2, [pc, #496]	; (8000798 <appTask+0x2bc>)
 80005a8:	6013      	str	r3, [r2, #0]
		}
		if(testCount2 >= 256){
 80005aa:	4b7b      	ldr	r3, [pc, #492]	; (8000798 <appTask+0x2bc>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2bff      	cmp	r3, #255	; 0xff
 80005b0:	dd07      	ble.n	80005c2 <appTask+0xe6>
			testCount2 = 0;
 80005b2:	4b79      	ldr	r3, [pc, #484]	; (8000798 <appTask+0x2bc>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
			testCount3++;
 80005b8:	4b78      	ldr	r3, [pc, #480]	; (800079c <appTask+0x2c0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a77      	ldr	r2, [pc, #476]	; (800079c <appTask+0x2c0>)
 80005c0:	6013      	str	r3, [r2, #0]
		}
		if(testCount3 >= 256){
 80005c2:	4b76      	ldr	r3, [pc, #472]	; (800079c <appTask+0x2c0>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2bff      	cmp	r3, #255	; 0xff
 80005c8:	dd07      	ble.n	80005da <appTask+0xfe>
			testCount3 = 0;
 80005ca:	4b74      	ldr	r3, [pc, #464]	; (800079c <appTask+0x2c0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
			testCount4++;
 80005d0:	4b73      	ldr	r3, [pc, #460]	; (80007a0 <appTask+0x2c4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a72      	ldr	r2, [pc, #456]	; (80007a0 <appTask+0x2c4>)
 80005d8:	6013      	str	r3, [r2, #0]
		}
	}

	bool R = (testCount & 1) == 1;
 80005da:	4b72      	ldr	r3, [pc, #456]	; (80007a4 <appTask+0x2c8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	bf14      	ite	ne
 80005e6:	2301      	movne	r3, #1
 80005e8:	2300      	moveq	r3, #0
 80005ea:	72fb      	strb	r3, [r7, #11]
	bool G = ((testCount>>1) & 1) == 1;
 80005ec:	4b6d      	ldr	r3, [pc, #436]	; (80007a4 <appTask+0x2c8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f003 0302 	and.w	r3, r3, #2
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	72bb      	strb	r3, [r7, #10]
	bool B = ((testCount>>2) & 1) == 1;
 80005fe:	4b69      	ldr	r3, [pc, #420]	; (80007a4 <appTask+0x2c8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	2b00      	cmp	r3, #0
 8000608:	bf14      	ite	ne
 800060a:	2301      	movne	r3, #1
 800060c:	2300      	moveq	r3, #0
 800060e:	727b      	strb	r3, [r7, #9]
	for(int i=0; i<5; i++){
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	e044      	b.n	80006a0 <appTask+0x1c4>
		if (D_Slider_GetSensorData(0,i) != 0){
 8000616:	6979      	ldr	r1, [r7, #20]
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fe3d 	bl	8001298 <D_Slider_GetSensorData>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d019      	beq.n	8000658 <appTask+0x17c>
			SliderLEDDataR[i][0] = false;
 8000624:	4960      	ldr	r1, [pc, #384]	; (80007a8 <appTask+0x2cc>)
 8000626:	697a      	ldr	r2, [r7, #20]
 8000628:	4613      	mov	r3, r2
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	4413      	add	r3, r2
 800062e:	440b      	add	r3, r1
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
			SliderLEDDataR[i][1] = true;
 8000634:	495c      	ldr	r1, [pc, #368]	; (80007a8 <appTask+0x2cc>)
 8000636:	697a      	ldr	r2, [r7, #20]
 8000638:	4613      	mov	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	4413      	add	r3, r2
 800063e:	440b      	add	r3, r1
 8000640:	3301      	adds	r3, #1
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
			SliderLEDDataR[i][2] = false;
 8000646:	4958      	ldr	r1, [pc, #352]	; (80007a8 <appTask+0x2cc>)
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	440b      	add	r3, r1
 8000652:	3302      	adds	r3, #2
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
		}
		if (D_Slider_GetSensorData(1,i) != 0){
 8000658:	6979      	ldr	r1, [r7, #20]
 800065a:	2001      	movs	r0, #1
 800065c:	f000 fe1c 	bl	8001298 <D_Slider_GetSensorData>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d019      	beq.n	800069a <appTask+0x1be>
			SliderLEDDataL[i][0] = false;
 8000666:	4951      	ldr	r1, [pc, #324]	; (80007ac <appTask+0x2d0>)
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	4613      	mov	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4413      	add	r3, r2
 8000670:	440b      	add	r3, r1
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
			SliderLEDDataL[i][1] = true;
 8000676:	494d      	ldr	r1, [pc, #308]	; (80007ac <appTask+0x2d0>)
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	4613      	mov	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4413      	add	r3, r2
 8000680:	440b      	add	r3, r1
 8000682:	3301      	adds	r3, #1
 8000684:	2201      	movs	r2, #1
 8000686:	701a      	strb	r2, [r3, #0]
			SliderLEDDataL[i][2] = false;
 8000688:	4948      	ldr	r1, [pc, #288]	; (80007ac <appTask+0x2d0>)
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	4613      	mov	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	4413      	add	r3, r2
 8000692:	440b      	add	r3, r1
 8000694:	3302      	adds	r3, #2
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<5; i++){
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	3301      	adds	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	ddb7      	ble.n	8000616 <appTask+0x13a>
	//SliderLEDDataR[3][1] = false;
	//SliderLEDDataR[3][2] = false;
	//SliderLEDDataR[4][0] = true;
	//SliderLEDDataR[4][1] = true;
	//SliderLEDDataR[4][2] = true;
	D_Slider_SetColorData(SliderLEDDataR, SliderLEDDataL);
 80006a6:	4941      	ldr	r1, [pc, #260]	; (80007ac <appTask+0x2d0>)
 80006a8:	483f      	ldr	r0, [pc, #252]	; (80007a8 <appTask+0x2cc>)
 80006aa:	f000 fea7 	bl	80013fc <D_Slider_SetColorData>
		HAL_UART_Transmit(&huart1, (uint8_t*)controllerSendData, 4, 10);
	}
	*/

	//マイコンについてるボタンかスタートボタンが押されたらボール発射
	if(IO_READ_USERBUTTON() && _userButton){
 80006ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b2:	483f      	ldr	r0, [pc, #252]	; (80007b0 <appTask+0x2d4>)
 80006b4:	f000 ff98 	bl	80015e8 <D_GPIO_Read>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f083 0301 	eor.w	r3, r3, #1
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00b      	beq.n	80006dc <appTask+0x200>
 80006c4:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <appTask+0x2d8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d007      	beq.n	80006dc <appTask+0x200>
		_userButton = false;
 80006cc:	4b39      	ldr	r3, [pc, #228]	; (80007b4 <appTask+0x2d8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
		testCount++;
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <appTask+0x2c8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3301      	adds	r3, #1
 80006d8:	4a32      	ldr	r2, [pc, #200]	; (80007a4 <appTask+0x2c8>)
 80006da:	6013      	str	r3, [r2, #0]
		int checkSum = 256 - (int)dataSum;
		controllerSendData[100] = (uint8_t)checkSum;
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)controllerSendData, 101);
		*/
	}
	if(!IO_READ_USERBUTTON()){
 80006dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e0:	4833      	ldr	r0, [pc, #204]	; (80007b0 <appTask+0x2d4>)
 80006e2:	f000 ff81 	bl	80015e8 <D_GPIO_Read>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d002      	beq.n	80006f2 <appTask+0x216>
		_userButton = true;
 80006ec:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <appTask+0x2d8>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
	}

	//D_Slider_GetTouch((bool*)TouchSegment);
	for(int i=0; i<16; i++){
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	e0a8      	b.n	800084a <appTask+0x36e>
		SliderLEDData[i][0] = 0;
 80006f8:	492f      	ldr	r1, [pc, #188]	; (80007b8 <appTask+0x2dc>)
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	4613      	mov	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	4413      	add	r3, r2
 8000702:	440b      	add	r3, r1
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
		SliderLEDData[i][1] = 0;
 8000708:	492b      	ldr	r1, [pc, #172]	; (80007b8 <appTask+0x2dc>)
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	440b      	add	r3, r1
 8000714:	3301      	adds	r3, #1
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
		SliderLEDData[i][2] = 0;
 800071a:	4927      	ldr	r1, [pc, #156]	; (80007b8 <appTask+0x2dc>)
 800071c:	693a      	ldr	r2, [r7, #16]
 800071e:	4613      	mov	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	4413      	add	r3, r2
 8000724:	440b      	add	r3, r1
 8000726:	3302      	adds	r3, #2
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
		if(TouchSegment[i*2] && TouchSegment[i*2 + 1]){
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4a22      	ldr	r2, [pc, #136]	; (80007bc <appTask+0x2e0>)
 8000732:	5cd3      	ldrb	r3, [r2, r3]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d043      	beq.n	80007c0 <appTask+0x2e4>
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	3301      	adds	r3, #1
 800073e:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <appTask+0x2e0>)
 8000740:	5cd3      	ldrb	r3, [r2, r3]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d03c      	beq.n	80007c0 <appTask+0x2e4>
			SliderLEDData[i][0] = 0;
 8000746:	491c      	ldr	r1, [pc, #112]	; (80007b8 <appTask+0x2dc>)
 8000748:	693a      	ldr	r2, [r7, #16]
 800074a:	4613      	mov	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4413      	add	r3, r2
 8000750:	440b      	add	r3, r1
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
			SliderLEDData[i][1] = 254;
 8000756:	4918      	ldr	r1, [pc, #96]	; (80007b8 <appTask+0x2dc>)
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	4613      	mov	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4413      	add	r3, r2
 8000760:	440b      	add	r3, r1
 8000762:	3301      	adds	r3, #1
 8000764:	22fe      	movs	r2, #254	; 0xfe
 8000766:	701a      	strb	r2, [r3, #0]
			SliderLEDData[i][2] = 0;
 8000768:	4913      	ldr	r1, [pc, #76]	; (80007b8 <appTask+0x2dc>)
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	440b      	add	r3, r1
 8000774:	3302      	adds	r3, #2
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	e063      	b.n	8000844 <appTask+0x368>
 800077c:	20000270 	.word	0x20000270
 8000780:	20000214 	.word	0x20000214
 8000784:	20000218 	.word	0x20000218
 8000788:	2000021c 	.word	0x2000021c
 800078c:	20000194 	.word	0x20000194
 8000790:	20000220 	.word	0x20000220
 8000794:	20000000 	.word	0x20000000
 8000798:	20000004 	.word	0x20000004
 800079c:	20000224 	.word	0x20000224
 80007a0:	20000228 	.word	0x20000228
 80007a4:	20000008 	.word	0x20000008
 80007a8:	200001f4 	.word	0x200001f4
 80007ac:	20000204 	.word	0x20000204
 80007b0:	40020800 	.word	0x40020800
 80007b4:	2000022c 	.word	0x2000022c
 80007b8:	200001c4 	.word	0x200001c4
 80007bc:	200001a4 	.word	0x200001a4
		}else if(TouchSegment[i*2]){
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4a34      	ldr	r2, [pc, #208]	; (8000898 <appTask+0x3bc>)
 80007c6:	5cd3      	ldrb	r3, [r2, r3]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d01a      	beq.n	8000802 <appTask+0x326>
			SliderLEDData[i][0] = 254;
 80007cc:	4933      	ldr	r1, [pc, #204]	; (800089c <appTask+0x3c0>)
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	4613      	mov	r3, r2
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	4413      	add	r3, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	22fe      	movs	r2, #254	; 0xfe
 80007da:	701a      	strb	r2, [r3, #0]
			SliderLEDData[i][1] = 0;
 80007dc:	492f      	ldr	r1, [pc, #188]	; (800089c <appTask+0x3c0>)
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	440b      	add	r3, r1
 80007e8:	3301      	adds	r3, #1
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
			SliderLEDData[i][2] = 0;
 80007ee:	492b      	ldr	r1, [pc, #172]	; (800089c <appTask+0x3c0>)
 80007f0:	693a      	ldr	r2, [r7, #16]
 80007f2:	4613      	mov	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4413      	add	r3, r2
 80007f8:	440b      	add	r3, r1
 80007fa:	3302      	adds	r3, #2
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
 8000800:	e020      	b.n	8000844 <appTask+0x368>
		}else if(TouchSegment[i*2 + 1]){
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	3301      	adds	r3, #1
 8000808:	4a23      	ldr	r2, [pc, #140]	; (8000898 <appTask+0x3bc>)
 800080a:	5cd3      	ldrb	r3, [r2, r3]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d019      	beq.n	8000844 <appTask+0x368>
			SliderLEDData[i][0] = 0;
 8000810:	4922      	ldr	r1, [pc, #136]	; (800089c <appTask+0x3c0>)
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	440b      	add	r3, r1
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
			SliderLEDData[i][1] = 0;
 8000820:	491e      	ldr	r1, [pc, #120]	; (800089c <appTask+0x3c0>)
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	4613      	mov	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4413      	add	r3, r2
 800082a:	440b      	add	r3, r1
 800082c:	3301      	adds	r3, #1
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
			SliderLEDData[i][2] = 254;
 8000832:	491a      	ldr	r1, [pc, #104]	; (800089c <appTask+0x3c0>)
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	4613      	mov	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	4413      	add	r3, r2
 800083c:	440b      	add	r3, r1
 800083e:	3302      	adds	r3, #2
 8000840:	22fe      	movs	r2, #254	; 0xfe
 8000842:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<16; i++){
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	3301      	adds	r3, #1
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	2b0f      	cmp	r3, #15
 800084e:	f77f af53 	ble.w	80006f8 <appTask+0x21c>
		IO_RESET_USERLED();
	}
	*/
	//testMode---------------------------------------------------

	for(int i=0; i<16; i++){
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	e013      	b.n	8000880 <appTask+0x3a4>
		if(rcvData_UART[i] != 0) rcvJudge[i] = rcvData_UART[i];
 8000858:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <appTask+0x3c4>)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d009      	beq.n	800087a <appTask+0x39e>
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <appTask+0x3c4>)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4619      	mov	r1, r3
 8000872:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <appTask+0x3c8>)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<16; i++){
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3301      	adds	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b0f      	cmp	r3, #15
 8000884:	dde8      	ble.n	8000858 <appTask+0x37c>
	}

	//デバッグ用
	int16_t debug_bits = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	80fb      	strh	r3, [r7, #6]
	debug_bits &= 0;
 800088a:	2300      	movs	r3, #0
 800088c:	80fb      	strh	r3, [r7, #6]
	//D_Mess_printf("%08b\n", ownHold_Pocket);
	//D_Mess_printf("%08b\n", allHold_Pocket);
	//D_Mess_printf("processState: ,%2d\n", processState);
	//D_Mess_printf("PC: ,%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n",rcvData_UART[0],rcvData_UART[1],rcvData_UART[2],rcvData_UART[3],rcvData_UART[4],rcvData_UART[5],rcvData_UART[6],rcvData_UART[7]);

	return 0;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200001a4 	.word	0x200001a4
 800089c:	200001c4 	.word	0x200001c4
 80008a0:	20000174 	.word	0x20000174
 80008a4:	20000230 	.word	0x20000230

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	; 0x30
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ae:	f000 fefb 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 f82d 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f000 f92f 	bl	8000b18 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ba:	f000 f8e7 	bl	8000a8c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80008be:	f000 f891 	bl	80009e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80008c2:	f000 f8b9 	bl	8000a38 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80008c6:	f007 fbcd 	bl	8008064 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 80008ca:	f7ff fdff 	bl	80004cc <appInit>
	  uint8_t modifiers;
	  uint8_t reserved;
	  uint8_t key[38];
  };
  struct keyboardHID_t keyboardHID;
  keyboardHID.modifiers = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	713b      	strb	r3, [r7, #4]
  keyboardHID.reserved = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	717b      	strb	r3, [r7, #5]
  for(int i = 0 ;i < 38; i++){
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008da:	e007      	b.n	80008ec <main+0x44>
	  keyboardHID.key[i] = 0;
 80008dc:	1dba      	adds	r2, r7, #6
 80008de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e0:	4413      	add	r3, r2
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ;i < 38; i++){
 80008e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e8:	3301      	adds	r3, #1
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ee:	2b25      	cmp	r3, #37	; 0x25
 80008f0:	ddf4      	ble.n	80008dc <main+0x34>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appTask();
 80008f2:	f7ff fdf3 	bl	80004dc <appTask>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 0){
 80008f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <main+0x64>)
 80008fc:	f001 fe02 	bl	8002504 <HAL_GPIO_ReadPin>
		  for(int i = 0 ;i < 38; i++){
			  keyboardHID.key[i] = 0;
		  }
	  }
	  */
	  D_Slider_SystickUpdate();
 8000900:	f000 fbe8 	bl	80010d4 <D_Slider_SystickUpdate>
	  //D_USBHID_SysticUpdate();
	  D_Mess_flush();
 8000904:	f000 fe86 	bl	8001614 <D_Mess_flush>
	  appTask();
 8000908:	e7f3      	b.n	80008f2 <main+0x4a>
 800090a:	bf00      	nop
 800090c:	40020800 	.word	0x40020800

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	; 0x50
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	2230      	movs	r2, #48	; 0x30
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f008 f80e 	bl	8008940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	4b28      	ldr	r3, [pc, #160]	; (80009dc <SystemClock_Config+0xcc>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	4a27      	ldr	r2, [pc, #156]	; (80009dc <SystemClock_Config+0xcc>)
 800093e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000942:	6413      	str	r3, [r2, #64]	; 0x40
 8000944:	4b25      	ldr	r3, [pc, #148]	; (80009dc <SystemClock_Config+0xcc>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <SystemClock_Config+0xd0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800095c:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <SystemClock_Config+0xd0>)
 800095e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <SystemClock_Config+0xd0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000970:	2301      	movs	r3, #1
 8000972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000974:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097a:	2302      	movs	r3, #2
 800097c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800097e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000984:	2304      	movs	r3, #4
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000988:	23c0      	movs	r3, #192	; 0xc0
 800098a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800098c:	2306      	movs	r3, #6
 800098e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000990:	2308      	movs	r3, #8
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	4618      	mov	r0, r3
 800099a:	f002 ff4f 	bl	800383c <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009a4:	f000 f95e 	bl	8000c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	230f      	movs	r3, #15
 80009aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	2302      	movs	r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2102      	movs	r1, #2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 f9b1 	bl	8003d2c <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009d0:	f000 f948 	bl	8000c64 <Error_Handler>
  }
}
 80009d4:	bf00      	nop
 80009d6:	3750      	adds	r7, #80	; 0x50
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40007000 	.word	0x40007000

080009e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_USART1_UART_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a1c:	f003 fb82 	bl	8004124 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a26:	f000 f91d 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200008c8 	.word	0x200008c8
 8000a34:	40011000 	.word	0x40011000

08000a38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_USART2_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a70:	f003 fb58 	bl	8004124 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a7a:	f000 f8f3 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000090c 	.word	0x2000090c
 8000a88:	40004400 	.word	0x40004400

08000a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <MX_DMA_Init+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	; (8000b14 <MX_DMA_Init+0x88>)
 8000a9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <MX_DMA_Init+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_DMA_Init+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <MX_DMA_Init+0x88>)
 8000ab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_DMA_Init+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2010      	movs	r0, #16
 8000ad0:	f000 ff5b 	bl	800198a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ad4:	2010      	movs	r0, #16
 8000ad6:	f000 ff74 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2011      	movs	r0, #17
 8000ae0:	f000 ff53 	bl	800198a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ae4:	2011      	movs	r0, #17
 8000ae6:	f000 ff6c 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	203a      	movs	r0, #58	; 0x3a
 8000af0:	f000 ff4b 	bl	800198a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000af4:	203a      	movs	r0, #58	; 0x3a
 8000af6:	f000 ff64 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2046      	movs	r0, #70	; 0x46
 8000b00:	f000 ff43 	bl	800198a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000b04:	2046      	movs	r0, #70	; 0x46
 8000b06:	f000 ff5c 	bl	80019c2 <HAL_NVIC_EnableIRQ>

}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a2c      	ldr	r2, [pc, #176]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a25      	ldr	r2, [pc, #148]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_GPIO_Init+0xd0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	4812      	ldr	r0, [pc, #72]	; (8000bec <MX_GPIO_Init+0xd4>)
 8000ba4:	f001 fcc6 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <MX_GPIO_Init+0xd8>)
 8000bc0:	f001 fb1c 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bc4:	2320      	movs	r3, #32
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_GPIO_Init+0xd4>)
 8000bdc:	f001 fb0e 	bl	80021fc <HAL_GPIO_Init>

}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020800 	.word	0x40020800

08000bf4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_UART_TxCpltCallback+0x30>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d102      	bne.n	8000c0c <HAL_UART_TxCpltCallback+0x18>
	  D_Mess_TransitionCompletedCallBack();
 8000c06:	f000 fd37 	bl	8001678 <D_Mess_TransitionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_TransitionCompletedCallBack();
  }
}
 8000c0a:	e006      	b.n	8000c1a <HAL_UART_TxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <HAL_UART_TxCpltCallback+0x34>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d101      	bne.n	8000c1a <HAL_UART_TxCpltCallback+0x26>
	  D_Slider_TransitionCompletedCallBack();
 8000c16:	f000 fcad 	bl	8001574 <D_Slider_TransitionCompletedCallBack>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40004400 	.word	0x40004400
 8000c28:	40011000 	.word	0x40011000

08000c2c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_UART_RxCpltCallback+0x30>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d102      	bne.n	8000c44 <HAL_UART_RxCpltCallback+0x18>
	  D_Mess_ReceptionCompletedCallBack();
 8000c3e:	f000 fd27 	bl	8001690 <D_Mess_ReceptionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_ReceptionCompletedCallBack();
  }
}
 8000c42:	e006      	b.n	8000c52 <HAL_UART_RxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <HAL_UART_RxCpltCallback+0x34>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d101      	bne.n	8000c52 <HAL_UART_RxCpltCallback+0x26>
	  D_Slider_ReceptionCompletedCallBack();
 8000c4e:	f000 fc9d 	bl	800158c <D_Slider_ReceptionCompletedCallBack>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40004400 	.word	0x40004400
 8000c60:	40011000 	.word	0x40011000

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cae:	2007      	movs	r0, #7
 8000cb0:	f000 fe60 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a97      	ldr	r2, [pc, #604]	; (8000f3c <HAL_UART_MspInit+0x27c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	f040 8092 	bne.w	8000e08 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	4b95      	ldr	r3, [pc, #596]	; (8000f40 <HAL_UART_MspInit+0x280>)
 8000cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cec:	4a94      	ldr	r2, [pc, #592]	; (8000f40 <HAL_UART_MspInit+0x280>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf4:	4b92      	ldr	r3, [pc, #584]	; (8000f40 <HAL_UART_MspInit+0x280>)
 8000cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	4b8e      	ldr	r3, [pc, #568]	; (8000f40 <HAL_UART_MspInit+0x280>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a8d      	ldr	r2, [pc, #564]	; (8000f40 <HAL_UART_MspInit+0x280>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d10:	4b8b      	ldr	r3, [pc, #556]	; (8000f40 <HAL_UART_MspInit+0x280>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d2e:	2307      	movs	r3, #7
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	4882      	ldr	r0, [pc, #520]	; (8000f44 <HAL_UART_MspInit+0x284>)
 8000d3a:	f001 fa5f 	bl	80021fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000d3e:	4b82      	ldr	r3, [pc, #520]	; (8000f48 <HAL_UART_MspInit+0x288>)
 8000d40:	4a82      	ldr	r2, [pc, #520]	; (8000f4c <HAL_UART_MspInit+0x28c>)
 8000d42:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000d44:	4b80      	ldr	r3, [pc, #512]	; (8000f48 <HAL_UART_MspInit+0x288>)
 8000d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d4a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d4c:	4b7e      	ldr	r3, [pc, #504]	; (8000f48 <HAL_UART_MspInit+0x288>)
 8000d4e:	2240      	movs	r2, #64	; 0x40
 8000d50:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d52:	4b7d      	ldr	r3, [pc, #500]	; (8000f48 <HAL_UART_MspInit+0x288>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d58:	4b7b      	ldr	r3, [pc, #492]	; (8000f48 <HAL_UART_MspInit+0x288>)
 8000d5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d5e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d60:	4b79      	ldr	r3, [pc, #484]	; (8000f48 <HAL_UART_MspInit+0x288>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d66:	4b78      	ldr	r3, [pc, #480]	; (8000f48 <HAL_UART_MspInit+0x288>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d6c:	4b76      	ldr	r3, [pc, #472]	; (8000f48 <HAL_UART_MspInit+0x288>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d72:	4b75      	ldr	r3, [pc, #468]	; (8000f48 <HAL_UART_MspInit+0x288>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d78:	4b73      	ldr	r3, [pc, #460]	; (8000f48 <HAL_UART_MspInit+0x288>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d7e:	4872      	ldr	r0, [pc, #456]	; (8000f48 <HAL_UART_MspInit+0x288>)
 8000d80:	f000 fe3a 	bl	80019f8 <HAL_DMA_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000d8a:	f7ff ff6b 	bl	8000c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a6d      	ldr	r2, [pc, #436]	; (8000f48 <HAL_UART_MspInit+0x288>)
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34
 8000d94:	4a6c      	ldr	r2, [pc, #432]	; (8000f48 <HAL_UART_MspInit+0x288>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000d9a:	4b6d      	ldr	r3, [pc, #436]	; (8000f50 <HAL_UART_MspInit+0x290>)
 8000d9c:	4a6d      	ldr	r2, [pc, #436]	; (8000f54 <HAL_UART_MspInit+0x294>)
 8000d9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000da0:	4b6b      	ldr	r3, [pc, #428]	; (8000f50 <HAL_UART_MspInit+0x290>)
 8000da2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000da8:	4b69      	ldr	r3, [pc, #420]	; (8000f50 <HAL_UART_MspInit+0x290>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dae:	4b68      	ldr	r3, [pc, #416]	; (8000f50 <HAL_UART_MspInit+0x290>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000db4:	4b66      	ldr	r3, [pc, #408]	; (8000f50 <HAL_UART_MspInit+0x290>)
 8000db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dbc:	4b64      	ldr	r3, [pc, #400]	; (8000f50 <HAL_UART_MspInit+0x290>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc2:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <HAL_UART_MspInit+0x290>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000dc8:	4b61      	ldr	r3, [pc, #388]	; (8000f50 <HAL_UART_MspInit+0x290>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dce:	4b60      	ldr	r3, [pc, #384]	; (8000f50 <HAL_UART_MspInit+0x290>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd4:	4b5e      	ldr	r3, [pc, #376]	; (8000f50 <HAL_UART_MspInit+0x290>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000dda:	485d      	ldr	r0, [pc, #372]	; (8000f50 <HAL_UART_MspInit+0x290>)
 8000ddc:	f000 fe0c 	bl	80019f8 <HAL_DMA_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000de6:	f7ff ff3d 	bl	8000c64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a58      	ldr	r2, [pc, #352]	; (8000f50 <HAL_UART_MspInit+0x290>)
 8000dee:	639a      	str	r2, [r3, #56]	; 0x38
 8000df0:	4a57      	ldr	r2, [pc, #348]	; (8000f50 <HAL_UART_MspInit+0x290>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2025      	movs	r0, #37	; 0x25
 8000dfc:	f000 fdc5 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e00:	2025      	movs	r0, #37	; 0x25
 8000e02:	f000 fdde 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e06:	e095      	b.n	8000f34 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a52      	ldr	r2, [pc, #328]	; (8000f58 <HAL_UART_MspInit+0x298>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	f040 8090 	bne.w	8000f34 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <HAL_UART_MspInit+0x280>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	4a48      	ldr	r2, [pc, #288]	; (8000f40 <HAL_UART_MspInit+0x280>)
 8000e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e22:	6413      	str	r3, [r2, #64]	; 0x40
 8000e24:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <HAL_UART_MspInit+0x280>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4b42      	ldr	r3, [pc, #264]	; (8000f40 <HAL_UART_MspInit+0x280>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a41      	ldr	r2, [pc, #260]	; (8000f40 <HAL_UART_MspInit+0x280>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <HAL_UART_MspInit+0x280>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5c:	2307      	movs	r3, #7
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4837      	ldr	r0, [pc, #220]	; (8000f44 <HAL_UART_MspInit+0x284>)
 8000e68:	f001 f9c8 	bl	80021fc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e6c:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <HAL_UART_MspInit+0x29c>)
 8000e6e:	4a3c      	ldr	r2, [pc, #240]	; (8000f60 <HAL_UART_MspInit+0x2a0>)
 8000e70:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000e72:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <HAL_UART_MspInit+0x29c>)
 8000e74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e78:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e7a:	4b38      	ldr	r3, [pc, #224]	; (8000f5c <HAL_UART_MspInit+0x29c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e80:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <HAL_UART_MspInit+0x29c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e86:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <HAL_UART_MspInit+0x29c>)
 8000e88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e8c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e8e:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <HAL_UART_MspInit+0x29c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e94:	4b31      	ldr	r3, [pc, #196]	; (8000f5c <HAL_UART_MspInit+0x29c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e9a:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <HAL_UART_MspInit+0x29c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea0:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <HAL_UART_MspInit+0x29c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <HAL_UART_MspInit+0x29c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000eac:	482b      	ldr	r0, [pc, #172]	; (8000f5c <HAL_UART_MspInit+0x29c>)
 8000eae:	f000 fda3 	bl	80019f8 <HAL_DMA_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8000eb8:	f7ff fed4 	bl	8000c64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <HAL_UART_MspInit+0x29c>)
 8000ec0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ec2:	4a26      	ldr	r2, [pc, #152]	; (8000f5c <HAL_UART_MspInit+0x29c>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000ec8:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_UART_MspInit+0x2a4>)
 8000eca:	4a27      	ldr	r2, [pc, #156]	; (8000f68 <HAL_UART_MspInit+0x2a8>)
 8000ecc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <HAL_UART_MspInit+0x2a4>)
 8000ed0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ed4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_UART_MspInit+0x2a4>)
 8000ed8:	2240      	movs	r2, #64	; 0x40
 8000eda:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000edc:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <HAL_UART_MspInit+0x2a4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <HAL_UART_MspInit+0x2a4>)
 8000ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_UART_MspInit+0x2a4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_UART_MspInit+0x2a4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_UART_MspInit+0x2a4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_UART_MspInit+0x2a4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_UART_MspInit+0x2a4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f08:	4816      	ldr	r0, [pc, #88]	; (8000f64 <HAL_UART_MspInit+0x2a4>)
 8000f0a:	f000 fd75 	bl	80019f8 <HAL_DMA_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8000f14:	f7ff fea6 	bl	8000c64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <HAL_UART_MspInit+0x2a4>)
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f1e:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <HAL_UART_MspInit+0x2a4>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	2026      	movs	r0, #38	; 0x26
 8000f2a:	f000 fd2e 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f2e:	2026      	movs	r0, #38	; 0x26
 8000f30:	f000 fd47 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 8000f34:	bf00      	nop
 8000f36:	3730      	adds	r7, #48	; 0x30
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	200007a8 	.word	0x200007a8
 8000f4c:	400264b8 	.word	0x400264b8
 8000f50:	20000808 	.word	0x20000808
 8000f54:	40026440 	.word	0x40026440
 8000f58:	40004400 	.word	0x40004400
 8000f5c:	20000748 	.word	0x20000748
 8000f60:	40026088 	.word	0x40026088
 8000f64:	20000868 	.word	0x20000868
 8000f68:	400260a0 	.word	0x400260a0

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb8:	f000 fbc8 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <SysTick_Handler+0x18>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a02      	ldr	r2, [pc, #8]	; (8000fcc <SysTick_Handler+0x18>)
 8000fc4:	6013      	str	r3, [r2, #0]
  //D_Slider_SystickUpdate();
  //D_USBHID_SysticUpdate();
  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000270 	.word	0x20000270

08000fd0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <DMA1_Stream5_IRQHandler+0x10>)
 8000fd6:	f000 fea7 	bl	8001d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000748 	.word	0x20000748

08000fe4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <DMA1_Stream6_IRQHandler+0x10>)
 8000fea:	f000 fe9d 	bl	8001d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000868 	.word	0x20000868

08000ff8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <USART1_IRQHandler+0x10>)
 8000ffe:	f003 f98d 	bl	800431c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200008c8 	.word	0x200008c8

0800100c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <USART2_IRQHandler+0x10>)
 8001012:	f003 f983 	bl	800431c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000090c 	.word	0x2000090c

08001020 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <DMA2_Stream2_IRQHandler+0x10>)
 8001026:	f000 fe7f 	bl	8001d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000808 	.word	0x20000808

08001034 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <OTG_FS_IRQHandler+0x10>)
 800103a:	f001 fbe4 	bl	8002806 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000e30 	.word	0x20000e30

08001048 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <DMA2_Stream7_IRQHandler+0x10>)
 800104e:	f000 fe6b 	bl	8001d28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200007a8 	.word	0x200007a8

0800105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001086:	490e      	ldr	r1, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800109c:	4c0b      	ldr	r4, [pc, #44]	; (80010cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010aa:	f7ff ffd7 	bl	800105c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f007 fc23 	bl	80088f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fbf9 	bl	80008a8 <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80010c4:	080089e0 	.word	0x080089e0
  ldr r2, =_sbss
 80010c8:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80010cc:	20001238 	.word	0x20001238

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <D_Slider_SystickUpdate>:
volatile bool had_completed_rx = true;

static bool _firstSend = false;
static int receiveFaultCount = 0;

void D_Slider_SystickUpdate(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	static uint32_t sndTime = 0;
	static uint32_t rcvTime = 0;

	static uint8_t count = 0;

	sndTime += G_System_counter - recent_System_counter;
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <D_Slider_SystickUpdate+0xb0>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <D_Slider_SystickUpdate+0xb4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	1ad2      	subs	r2, r2, r3
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <D_Slider_SystickUpdate+0xb8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a28      	ldr	r2, [pc, #160]	; (800118c <D_Slider_SystickUpdate+0xb8>)
 80010ea:	6013      	str	r3, [r2, #0]
	rcvTime += G_System_counter - recent_System_counter;
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <D_Slider_SystickUpdate+0xb0>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b25      	ldr	r3, [pc, #148]	; (8001188 <D_Slider_SystickUpdate+0xb4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	1ad2      	subs	r2, r2, r3
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <D_Slider_SystickUpdate+0xbc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a24      	ldr	r2, [pc, #144]	; (8001190 <D_Slider_SystickUpdate+0xbc>)
 80010fe:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_counter;
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <D_Slider_SystickUpdate+0xb0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a20      	ldr	r2, [pc, #128]	; (8001188 <D_Slider_SystickUpdate+0xb4>)
 8001106:	6013      	str	r3, [r2, #0]

	if(!_firstSend){
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <D_Slider_SystickUpdate+0xc0>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	f083 0301 	eor.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <D_Slider_SystickUpdate+0x4e>
		_firstSend = true;
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <D_Slider_SystickUpdate+0xc0>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
		D_Slider_Start();
 800111c:	f000 f844 	bl	80011a8 <D_Slider_Start>
		//D_Slider_InitColorData();
		return;
 8001120:	e02f      	b.n	8001182 <D_Slider_SystickUpdate+0xae>
	}
	if(sndTime >= SLIDER_SEND_INTERVAL){
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <D_Slider_SystickUpdate+0xb8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b13      	cmp	r3, #19
 8001128:	d91c      	bls.n	8001164 <D_Slider_SystickUpdate+0x90>
		sndTime = 0;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <D_Slider_SystickUpdate+0xb8>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
		count++;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <D_Slider_SystickUpdate+0xc4>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <D_Slider_SystickUpdate+0xc4>)
 800113a:	701a      	strb	r2, [r3, #0]
		if(count == 1){
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <D_Slider_SystickUpdate+0xc4>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d104      	bne.n	800114e <D_Slider_SystickUpdate+0x7a>
			D_Slider_Send((uint8_t*)SendData, COLORSEND_LENGTH);
 8001144:	210a      	movs	r1, #10
 8001146:	4815      	ldr	r0, [pc, #84]	; (800119c <D_Slider_SystickUpdate+0xc8>)
 8001148:	f000 f85e 	bl	8001208 <D_Slider_Send>
 800114c:	e003      	b.n	8001156 <D_Slider_SystickUpdate+0x82>
		}else{
			D_Slider_Send((uint8_t*)SensorGetSendData, SENSORGET_LENGTH);
 800114e:	2106      	movs	r1, #6
 8001150:	4813      	ldr	r0, [pc, #76]	; (80011a0 <D_Slider_SystickUpdate+0xcc>)
 8001152:	f000 f859 	bl	8001208 <D_Slider_Send>
		}
		if(count >= 5) count = 0;
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <D_Slider_SystickUpdate+0xc4>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b04      	cmp	r3, #4
 800115c:	d902      	bls.n	8001164 <D_Slider_SystickUpdate+0x90>
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <D_Slider_SystickUpdate+0xc4>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
	}

	if(rcvTime >= SLIDER_RECEIVE_INTERVAL){
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <D_Slider_SystickUpdate+0xbc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b09      	cmp	r3, #9
 800116a:	d90a      	bls.n	8001182 <D_Slider_SystickUpdate+0xae>
		rcvTime = 0;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <D_Slider_SystickUpdate+0xbc>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
		D_Slider_Receive((uint8_t*)RecvData, 10);
 8001172:	210a      	movs	r1, #10
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <D_Slider_SystickUpdate+0xd0>)
 8001176:	f000 f86b 	bl	8001250 <D_Slider_Receive>
		D_Slider_CheckData((uint8_t*)RecvData, 10);
 800117a:	210a      	movs	r1, #10
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <D_Slider_SystickUpdate+0xd0>)
 800117e:	f000 f8a7 	bl	80012d0 <D_Slider_CheckData>
	if(receiveFaultCount >= 30){
		D_Slider_Start();
		receiveFaultCount = 0;
	}
	*/
}
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000270 	.word	0x20000270
 8001188:	20000320 	.word	0x20000320
 800118c:	20000324 	.word	0x20000324
 8001190:	20000328 	.word	0x20000328
 8001194:	2000031c 	.word	0x2000031c
 8001198:	2000032c 	.word	0x2000032c
 800119c:	20000274 	.word	0x20000274
 80011a0:	20000294 	.word	0x20000294
 80011a4:	200002b4 	.word	0x200002b4

080011a8 <D_Slider_Start>:

void D_Slider_Start(){
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
	SensorGetSendData[0] = FIRSTBYTE;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <D_Slider_Start+0x5c>)
 80011b0:	22e0      	movs	r2, #224	; 0xe0
 80011b2:	701a      	strb	r2, [r3, #0]
	SensorGetSendData[1] = ADDRESS;
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <D_Slider_Start+0x5c>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	705a      	strb	r2, [r3, #1]
	SensorGetSendData[2] = SENSORGET_SEQNUM;
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <D_Slider_Start+0x5c>)
 80011bc:	2201      	movs	r2, #1
 80011be:	709a      	strb	r2, [r3, #2]
	SensorGetSendData[3] = SENSORGET_DATANUM;
 80011c0:	4b10      	ldr	r3, [pc, #64]	; (8001204 <D_Slider_Start+0x5c>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	70da      	strb	r2, [r3, #3]
	SensorGetSendData[4] = SENSORGET_CMD;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <D_Slider_Start+0x5c>)
 80011c8:	2220      	movs	r2, #32
 80011ca:	711a      	strb	r2, [r3, #4]
	uint8_t dataSum = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 80011d0:	2301      	movs	r3, #1
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	e009      	b.n	80011ea <D_Slider_Start+0x42>
		dataSum += SensorGetSendData[i];
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <D_Slider_Start+0x5c>)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4413      	add	r3, r2
 80011e2:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	ddf2      	ble.n	80011d6 <D_Slider_Start+0x2e>
	}
	SensorGetSendData[SENSORGET_LENGTH-1] = (uint8_t)dataSum;
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <D_Slider_Start+0x5c>)
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	7153      	strb	r3, [r2, #5]
	data[3] = 0xfe;
	had_completed_tx = true;
	had_completed_rx = true;
	D_Slider_Send((uint8_t*)data, 4);
	*/
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000294 	.word	0x20000294

08001208 <D_Slider_Send>:

int D_Slider_Send(uint8_t* data, int length){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	if(!had_completed_tx){
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <D_Slider_Send+0x40>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f083 0301 	eor.w	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <D_Slider_Send+0x20>
		return -1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001226:	e00a      	b.n	800123e <D_Slider_Send+0x36>
	}
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data, length);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4806      	ldr	r0, [pc, #24]	; (800124c <D_Slider_Send+0x44>)
 8001232:	f002 ffc5 	bl	80041c0 <HAL_UART_Transmit_DMA>
	had_completed_tx = false;
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <D_Slider_Send+0x40>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
	return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000010 	.word	0x20000010
 800124c:	200008c8 	.word	0x200008c8

08001250 <D_Slider_Receive>:

int D_Slider_Receive(uint8_t* data, int length){
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	if(!had_completed_rx){
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <D_Slider_Receive+0x40>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <D_Slider_Receive+0x20>
		return -1;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800126e:	e00a      	b.n	8001286 <D_Slider_Receive+0x36>
	}
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)data, length);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <D_Slider_Receive+0x44>)
 800127a:	f003 f81f 	bl	80042bc <HAL_UART_Receive_DMA>
	had_completed_rx = false;
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <D_Slider_Receive+0x40>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
	return 0;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000011 	.word	0x20000011
 8001294:	200008c8 	.word	0x200008c8

08001298 <D_Slider_GetSensorData>:

int D_Slider_GetSensorData(int side, int num){
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	if(side == 0){
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d104      	bne.n	80012b2 <D_Slider_GetSensorData+0x1a>
		return SensorCountR[num];
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <D_Slider_GetSensorData+0x30>)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b0:	e003      	b.n	80012ba <D_Slider_GetSensorData+0x22>
	}else{
		return SensorCountL[num];
 80012b2:	4a06      	ldr	r2, [pc, #24]	; (80012cc <D_Slider_GetSensorData+0x34>)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	}
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	200002f4 	.word	0x200002f4
 80012cc:	20000308 	.word	0x20000308

080012d0 <D_Slider_CheckData>:

void D_Slider_CheckData(uint8_t* data, int length){
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2be0      	cmp	r3, #224	; 0xe0
 80012e0:	d15c      	bne.n	800139c <D_Slider_CheckData+0xcc>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3301      	adds	r3, #1
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d157      	bne.n	800139c <D_Slider_CheckData+0xcc>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3302      	adds	r3, #2
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d152      	bne.n	800139c <D_Slider_CheckData+0xcc>
	uint8_t sum = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 80012fa:	2301      	movs	r3, #1
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	e009      	b.n	8001314 <D_Slider_CheckData+0x44>
		sum += data[i];
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	4413      	add	r3, r2
 800130c:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	3301      	adds	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2b08      	cmp	r3, #8
 8001318:	ddf2      	ble.n	8001300 <D_Slider_CheckData+0x30>
	}
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3309      	adds	r3, #9
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	7dfa      	ldrb	r2, [r7, #23]
 8001322:	429a      	cmp	r2, r3
 8001324:	d13c      	bne.n	80013a0 <D_Slider_CheckData+0xd0>
	for(int i=0; i<5; i++){
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	e016      	b.n	800135a <D_Slider_CheckData+0x8a>
		if(((data[7]>>i) & 1) == 1) SensorCountL[i]++;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3307      	adds	r3, #7
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	fa42 f303 	asr.w	r3, r2, r3
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d008      	beq.n	8001354 <D_Slider_CheckData+0x84>
 8001342:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <D_Slider_CheckData+0xdc>)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	4917      	ldr	r1, [pc, #92]	; (80013ac <D_Slider_CheckData+0xdc>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3301      	adds	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b04      	cmp	r3, #4
 800135e:	dde5      	ble.n	800132c <D_Slider_CheckData+0x5c>
	}
	for(int i=0; i<5; i++){
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	e016      	b.n	8001394 <D_Slider_CheckData+0xc4>
		if(((data[8]>>i) & 1) == 1) SensorCountR[i]++;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3308      	adds	r3, #8
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	fa42 f303 	asr.w	r3, r2, r3
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d008      	beq.n	800138e <D_Slider_CheckData+0xbe>
 800137c:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <D_Slider_CheckData+0xe0>)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	490a      	ldr	r1, [pc, #40]	; (80013b0 <D_Slider_CheckData+0xe0>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	3301      	adds	r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b04      	cmp	r3, #4
 8001398:	dde5      	ble.n	8001366 <D_Slider_CheckData+0x96>
 800139a:	e002      	b.n	80013a2 <D_Slider_CheckData+0xd2>
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 800139c:	bf00      	nop
 800139e:	e000      	b.n	80013a2 <D_Slider_CheckData+0xd2>
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 80013a0:	bf00      	nop
	}
}
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	20000308 	.word	0x20000308
 80013b0:	200002f4 	.word	0x200002f4

080013b4 <D_Slider_CheckSum>:

bool D_Slider_CheckSum(uint8_t* data, int length){
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	uint8_t sum = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<length; i++){
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	e009      	b.n	80013dc <D_Slider_CheckSum+0x28>
		sum += data[i];
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	4413      	add	r3, r2
 80013d4:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<length; i++){
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3301      	adds	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	dbf1      	blt.n	80013c8 <D_Slider_CheckSum+0x14>
	}
	if(sum == 0){
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <D_Slider_CheckSum+0x3a>
		return true;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <D_Slider_CheckSum+0x3c>
	}else{
		return false;
 80013ee:	2300      	movs	r3, #0
	}
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <D_Slider_SetColorData>:
			returnData[i] = false;
		}
	}
}

void D_Slider_SetColorData(bool setColorR[][3], bool setColorL[][3]){
 80013fc:	b4b0      	push	{r4, r5, r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	SendData[0] = FIRSTBYTE;
 8001406:	4b59      	ldr	r3, [pc, #356]	; (800156c <D_Slider_SetColorData+0x170>)
 8001408:	22e0      	movs	r2, #224	; 0xe0
 800140a:	701a      	strb	r2, [r3, #0]
	SendData[1] = ADDRESS;
 800140c:	4b57      	ldr	r3, [pc, #348]	; (800156c <D_Slider_SetColorData+0x170>)
 800140e:	2201      	movs	r2, #1
 8001410:	705a      	strb	r2, [r3, #1]
	SendData[2] = COLORSEND_SEQNUM;
 8001412:	4b56      	ldr	r3, [pc, #344]	; (800156c <D_Slider_SetColorData+0x170>)
 8001414:	2205      	movs	r2, #5
 8001416:	709a      	strb	r2, [r3, #2]
	SendData[3] = COLORSEND_DATANUM;
 8001418:	4b54      	ldr	r3, [pc, #336]	; (800156c <D_Slider_SetColorData+0x170>)
 800141a:	2205      	movs	r2, #5
 800141c:	70da      	strb	r2, [r3, #3]
	SendData[4] = COLORSEND_CMD;
 800141e:	4b53      	ldr	r3, [pc, #332]	; (800156c <D_Slider_SetColorData+0x170>)
 8001420:	2232      	movs	r2, #50	; 0x32
 8001422:	711a      	strb	r2, [r3, #4]
	SendData[5] = 0;
 8001424:	4b51      	ldr	r3, [pc, #324]	; (800156c <D_Slider_SetColorData+0x170>)
 8001426:	2200      	movs	r2, #0
 8001428:	715a      	strb	r2, [r3, #5]
	SendData[6] = 0;
 800142a:	4b50      	ldr	r3, [pc, #320]	; (800156c <D_Slider_SetColorData+0x170>)
 800142c:	2200      	movs	r2, #0
 800142e:	719a      	strb	r2, [r3, #6]
	SendData[7] = 0;
 8001430:	4b4e      	ldr	r3, [pc, #312]	; (800156c <D_Slider_SetColorData+0x170>)
 8001432:	2200      	movs	r2, #0
 8001434:	71da      	strb	r2, [r3, #7]
	SendData[8] = 0;
 8001436:	4b4d      	ldr	r3, [pc, #308]	; (800156c <D_Slider_SetColorData+0x170>)
 8001438:	2200      	movs	r2, #0
 800143a:	721a      	strb	r2, [r3, #8]
	for(int i=1; i<16; i++){
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	e038      	b.n	80014b4 <D_Slider_SetColorData+0xb8>
		SendData[5 + (i/8)] |= (setColorR[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b00      	cmp	r3, #0
 8001446:	da00      	bge.n	800144a <D_Slider_SetColorData+0x4e>
 8001448:	3307      	adds	r3, #7
 800144a:	10db      	asrs	r3, r3, #3
 800144c:	4618      	mov	r0, r3
 800144e:	1d43      	adds	r3, r0, #5
 8001450:	4a46      	ldr	r2, [pc, #280]	; (800156c <D_Slider_SetColorData+0x170>)
 8001452:	5cd3      	ldrb	r3, [r2, r3]
 8001454:	b25c      	sxtb	r4, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	3b01      	subs	r3, #1
 800145a:	4a45      	ldr	r2, [pc, #276]	; (8001570 <D_Slider_SetColorData+0x174>)
 800145c:	fb82 1203 	smull	r1, r2, r2, r3
 8001460:	17db      	asrs	r3, r3, #31
 8001462:	1a9b      	subs	r3, r3, r2
 8001464:	3304      	adds	r3, #4
 8001466:	461a      	mov	r2, r3
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	18d5      	adds	r5, r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	1e59      	subs	r1, r3, #1
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <D_Slider_SetColorData+0x174>)
 8001478:	fb83 3201 	smull	r3, r2, r3, r1
 800147c:	17cb      	asrs	r3, r1, #31
 800147e:	1ad2      	subs	r2, r2, r3
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	1aca      	subs	r2, r1, r3
 8001488:	5cab      	ldrb	r3, [r5, r2]
 800148a:	4619      	mov	r1, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	425a      	negs	r2, r3
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	f002 0207 	and.w	r2, r2, #7
 8001498:	bf58      	it	pl
 800149a:	4253      	negpl	r3, r2
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4323      	orrs	r3, r4
 80014a4:	b25a      	sxtb	r2, r3
 80014a6:	1d43      	adds	r3, r0, #5
 80014a8:	b2d1      	uxtb	r1, r2
 80014aa:	4a30      	ldr	r2, [pc, #192]	; (800156c <D_Slider_SetColorData+0x170>)
 80014ac:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2b0f      	cmp	r3, #15
 80014b8:	ddc3      	ble.n	8001442 <D_Slider_SetColorData+0x46>
	}
	for(int i=1; i<16; i++){
 80014ba:	2301      	movs	r3, #1
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	e038      	b.n	8001532 <D_Slider_SetColorData+0x136>
		SendData[7 + (i/8)] |= (setColorL[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	da00      	bge.n	80014c8 <D_Slider_SetColorData+0xcc>
 80014c6:	3307      	adds	r3, #7
 80014c8:	10db      	asrs	r3, r3, #3
 80014ca:	4618      	mov	r0, r3
 80014cc:	1dc3      	adds	r3, r0, #7
 80014ce:	4a27      	ldr	r2, [pc, #156]	; (800156c <D_Slider_SetColorData+0x170>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	b25c      	sxtb	r4, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	4a25      	ldr	r2, [pc, #148]	; (8001570 <D_Slider_SetColorData+0x174>)
 80014da:	fb82 1203 	smull	r1, r2, r2, r3
 80014de:	17db      	asrs	r3, r3, #31
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	3304      	adds	r3, #4
 80014e4:	461a      	mov	r2, r3
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	18d5      	adds	r5, r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1e59      	subs	r1, r3, #1
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <D_Slider_SetColorData+0x174>)
 80014f6:	fb83 3201 	smull	r3, r2, r3, r1
 80014fa:	17cb      	asrs	r3, r1, #31
 80014fc:	1ad2      	subs	r2, r2, r3
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	1aca      	subs	r2, r1, r3
 8001506:	5cab      	ldrb	r3, [r5, r2]
 8001508:	4619      	mov	r1, r3
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	425a      	negs	r2, r3
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	f002 0207 	and.w	r2, r2, #7
 8001516:	bf58      	it	pl
 8001518:	4253      	negpl	r3, r2
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	b25b      	sxtb	r3, r3
 8001520:	4323      	orrs	r3, r4
 8001522:	b25a      	sxtb	r2, r3
 8001524:	1dc3      	adds	r3, r0, #7
 8001526:	b2d1      	uxtb	r1, r2
 8001528:	4a10      	ldr	r2, [pc, #64]	; (800156c <D_Slider_SetColorData+0x170>)
 800152a:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	3301      	adds	r3, #1
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	ddc3      	ble.n	80014c0 <D_Slider_SetColorData+0xc4>
	}

	uint8_t dataSum = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 800153c:	2301      	movs	r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	e009      	b.n	8001556 <D_Slider_SetColorData+0x15a>
		dataSum += SendData[i];
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <D_Slider_SetColorData+0x170>)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4413      	add	r3, r2
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	4413      	add	r3, r2
 800154e:	73fb      	strb	r3, [r7, #15]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	3301      	adds	r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2b08      	cmp	r3, #8
 800155a:	ddf2      	ble.n	8001542 <D_Slider_SetColorData+0x146>
	}
	SendData[COLORSEND_LENGTH-1] = (uint8_t)dataSum;
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <D_Slider_SetColorData+0x170>)
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	7253      	strb	r3, [r2, #9]
}
 8001562:	bf00      	nop
 8001564:	371c      	adds	r7, #28
 8001566:	46bd      	mov	sp, r7
 8001568:	bcb0      	pop	{r4, r5, r7}
 800156a:	4770      	bx	lr
 800156c:	20000274 	.word	0x20000274
 8001570:	55555556 	.word	0x55555556

08001574 <D_Slider_TransitionCompletedCallBack>:
	}
	int checkSum = 256 - (int)dataSum;
	SendData[100] = (uint8_t)checkSum;
}

void D_Slider_TransitionCompletedCallBack(){
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
	had_completed_tx = true;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <D_Slider_TransitionCompletedCallBack+0x14>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	20000010 	.word	0x20000010

0800158c <D_Slider_ReceptionCompletedCallBack>:

void D_Slider_ReceptionCompletedCallBack(){
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
	had_completed_rx = true;
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <D_Slider_ReceptionCompletedCallBack+0x50>)
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
	if(D_Slider_CheckSum((uint8_t*)RecvData,36) && RecvData[0] != 0){
 8001598:	2124      	movs	r1, #36	; 0x24
 800159a:	4811      	ldr	r0, [pc, #68]	; (80015e0 <D_Slider_ReceptionCompletedCallBack+0x54>)
 800159c:	f7ff ff0a 	bl	80013b4 <D_Slider_CheckSum>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d015      	beq.n	80015d2 <D_Slider_ReceptionCompletedCallBack+0x46>
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <D_Slider_ReceptionCompletedCallBack+0x54>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d011      	beq.n	80015d2 <D_Slider_ReceptionCompletedCallBack+0x46>
		for(int i=0; i<32; i++){
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	e00b      	b.n	80015cc <D_Slider_ReceptionCompletedCallBack+0x40>
			TouchData[i] = RecvData[i+3];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3303      	adds	r3, #3
 80015b8:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <D_Slider_ReceptionCompletedCallBack+0x54>)
 80015ba:	5cd1      	ldrb	r1, [r2, r3]
 80015bc:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <D_Slider_ReceptionCompletedCallBack+0x58>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	460a      	mov	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<32; i++){
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3301      	adds	r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b1f      	cmp	r3, #31
 80015d0:	ddf0      	ble.n	80015b4 <D_Slider_ReceptionCompletedCallBack+0x28>
		}
	}
	//D_USBHID_SetSendData_Touch(TouchData);
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000011 	.word	0x20000011
 80015e0:	200002b4 	.word	0x200002b4
 80015e4:	200002d4 	.word	0x200002d4

080015e8 <D_GPIO_Read>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
}

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4619      	mov	r1, r3
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 ff83 	bl	8002504 <HAL_GPIO_ReadPin>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf14      	ite	ne
 8001604:	2301      	movne	r3, #1
 8001606:	2300      	moveq	r3, #0
 8001608:	b2db      	uxtb	r3, r3
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed_tx){
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <D_Mess_flush+0x54>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f083 0301 	eor.w	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <D_Mess_flush+0x1c>
		outptr = buff;
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <D_Mess_flush+0x58>)
 800162a:	4a11      	ldr	r2, [pc, #68]	; (8001670 <D_Mess_flush+0x5c>)
 800162c:	601a      	str	r2, [r3, #0]
		return;
 800162e:	e01a      	b.n	8001666 <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <D_Mess_flush+0x58>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d013      	beq.n	8001660 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <D_Mess_flush+0x58>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	490b      	ldr	r1, [pc, #44]	; (800166c <D_Mess_flush+0x58>)
 8001640:	600a      	str	r2, [r1, #0]
 8001642:	220a      	movs	r2, #10
 8001644:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <D_Mess_flush+0x58>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <D_Mess_flush+0x5c>)
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	b29b      	uxth	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	4907      	ldr	r1, [pc, #28]	; (8001670 <D_Mess_flush+0x5c>)
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <D_Mess_flush+0x60>)
 8001656:	f002 fdb3 	bl	80041c0 <HAL_UART_Transmit_DMA>
		had_completed_tx = false;
 800165a:	4b03      	ldr	r3, [pc, #12]	; (8001668 <D_Mess_flush+0x54>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 8001660:	4b02      	ldr	r3, [pc, #8]	; (800166c <D_Mess_flush+0x58>)
 8001662:	4a03      	ldr	r2, [pc, #12]	; (8001670 <D_Mess_flush+0x5c>)
 8001664:	601a      	str	r2, [r3, #0]
}
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000012 	.word	0x20000012
 800166c:	20000958 	.word	0x20000958
 8001670:	20000330 	.word	0x20000330
 8001674:	2000090c 	.word	0x2000090c

08001678 <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  had_completed_tx = true;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <D_Mess_TransitionCompletedCallBack+0x14>)
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	20000012 	.word	0x20000012

08001690 <D_Mess_ReceptionCompletedCallBack>:
void D_Mess_ReceptionCompletedCallBack(void){
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  had_completed_rx = true;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <D_Mess_ReceptionCompletedCallBack+0x14>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	20000013 	.word	0x20000013

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f94f 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fac8 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f967 	bl	80019de <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001728:	f000 f92f 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000000c 	.word	0x2000000c
 8001744:	20000018 	.word	0x20000018
 8001748:	20000014 	.word	0x20000014

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000018 	.word	0x20000018
 8001770:	2000095c 	.word	0x2000095c

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2000095c 	.word	0x2000095c

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000018 	.word	0x20000018

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff feb6 	bl	8001774 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e099      	b.n	8001b48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a34:	e00f      	b.n	8001a56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a36:	f7ff fe9d 	bl	8001774 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d908      	bls.n	8001a56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2220      	movs	r2, #32
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e078      	b.n	8001b48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1e8      	bne.n	8001a36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <HAL_DMA_Init+0x158>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d107      	bne.n	8001ac0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f023 0307 	bic.w	r3, r3, #7
 8001ad6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d117      	bne.n	8001b1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00e      	beq.n	8001b1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fb01 	bl	8002104 <DMA_CheckFifoParam>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b16:	2301      	movs	r3, #1
 8001b18:	e016      	b.n	8001b48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fab8 	bl	8002098 <DMA_CalcBaseAndBitshift>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b30:	223f      	movs	r2, #63	; 0x3f
 8001b32:	409a      	lsls	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	f010803f 	.word	0xf010803f

08001b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_DMA_Start_IT+0x26>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e040      	b.n	8001bfc <HAL_DMA_Start_IT+0xa8>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d12f      	bne.n	8001bee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fa4a 	bl	800203c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	223f      	movs	r2, #63	; 0x3f
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0216 	orr.w	r2, r2, #22
 8001bc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0208 	orr.w	r2, r2, #8
 8001bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e005      	b.n	8001bfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c12:	f7ff fdaf 	bl	8001774 <HAL_GetTick>
 8001c16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d008      	beq.n	8001c36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2280      	movs	r2, #128	; 0x80
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e052      	b.n	8001cdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0216 	bic.w	r2, r2, #22
 8001c44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d103      	bne.n	8001c66 <HAL_DMA_Abort+0x62>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0208 	bic.w	r2, r2, #8
 8001c74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c86:	e013      	b.n	8001cb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c88:	f7ff fd74 	bl	8001774 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d90c      	bls.n	8001cb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e015      	b.n	8001cdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1e4      	bne.n	8001c88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc2:	223f      	movs	r2, #63	; 0x3f
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d004      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00c      	b.n	8001d1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2205      	movs	r2, #5
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0201 	bic.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d34:	4b92      	ldr	r3, [pc, #584]	; (8001f80 <HAL_DMA_IRQHandler+0x258>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a92      	ldr	r2, [pc, #584]	; (8001f84 <HAL_DMA_IRQHandler+0x25c>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0a9b      	lsrs	r3, r3, #10
 8001d40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	2208      	movs	r2, #8
 8001d54:	409a      	lsls	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01a      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0204 	bic.w	r2, r2, #4
 8001d7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d80:	2208      	movs	r2, #8
 8001d82:	409a      	lsls	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d98:	2201      	movs	r2, #1
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d012      	beq.n	8001dca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	2201      	movs	r2, #1
 8001db8:	409a      	lsls	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	f043 0202 	orr.w	r2, r3, #2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dce:	2204      	movs	r2, #4
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d012      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00b      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	2204      	movs	r2, #4
 8001dee:	409a      	lsls	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df8:	f043 0204 	orr.w	r2, r3, #4
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	2210      	movs	r2, #16
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d043      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d03c      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e22:	2210      	movs	r2, #16
 8001e24:	409a      	lsls	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d018      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d108      	bne.n	8001e58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d024      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	4798      	blx	r3
 8001e56:	e01f      	b.n	8001e98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01b      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
 8001e68:	e016      	b.n	8001e98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0208 	bic.w	r2, r2, #8
 8001e86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 808e 	beq.w	8001fc6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 8086 	beq.w	8001fc6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d136      	bne.n	8001f40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0216 	bic.w	r2, r2, #22
 8001ee0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <HAL_DMA_IRQHandler+0x1da>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0208 	bic.w	r2, r2, #8
 8001f10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	223f      	movs	r2, #63	; 0x3f
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d07d      	beq.n	8002032 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
        }
        return;
 8001f3e:	e078      	b.n	8002032 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d01c      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d108      	bne.n	8001f6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d030      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
 8001f6c:	e02b      	b.n	8001fc6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d027      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	4798      	blx	r3
 8001f7e:	e022      	b.n	8001fc6 <HAL_DMA_IRQHandler+0x29e>
 8001f80:	2000000c 	.word	0x2000000c
 8001f84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10f      	bne.n	8001fb6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0210 	bic.w	r2, r2, #16
 8001fa4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d032      	beq.n	8002034 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d022      	beq.n	8002020 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2205      	movs	r2, #5
 8001fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d307      	bcc.n	800200e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f2      	bne.n	8001ff2 <HAL_DMA_IRQHandler+0x2ca>
 800200c:	e000      	b.n	8002010 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800200e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	4798      	blx	r3
 8002030:	e000      	b.n	8002034 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002032:	bf00      	nop
    }
  }
}
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop

0800203c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002058:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b40      	cmp	r3, #64	; 0x40
 8002068:	d108      	bne.n	800207c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800207a:	e007      	b.n	800208c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	60da      	str	r2, [r3, #12]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	3b10      	subs	r3, #16
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <DMA_CalcBaseAndBitshift+0x64>)
 80020aa:	fba2 2303 	umull	r2, r3, r2, r3
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020b2:	4a13      	ldr	r2, [pc, #76]	; (8002100 <DMA_CalcBaseAndBitshift+0x68>)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d909      	bls.n	80020da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020ce:	f023 0303 	bic.w	r3, r3, #3
 80020d2:	1d1a      	adds	r2, r3, #4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	659a      	str	r2, [r3, #88]	; 0x58
 80020d8:	e007      	b.n	80020ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	aaaaaaab 	.word	0xaaaaaaab
 8002100:	080089c8 	.word	0x080089c8

08002104 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d11f      	bne.n	800215e <DMA_CheckFifoParam+0x5a>
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d856      	bhi.n	80021d2 <DMA_CheckFifoParam+0xce>
 8002124:	a201      	add	r2, pc, #4	; (adr r2, 800212c <DMA_CheckFifoParam+0x28>)
 8002126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212a:	bf00      	nop
 800212c:	0800213d 	.word	0x0800213d
 8002130:	0800214f 	.word	0x0800214f
 8002134:	0800213d 	.word	0x0800213d
 8002138:	080021d3 	.word	0x080021d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d046      	beq.n	80021d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800214c:	e043      	b.n	80021d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002156:	d140      	bne.n	80021da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215c:	e03d      	b.n	80021da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002166:	d121      	bne.n	80021ac <DMA_CheckFifoParam+0xa8>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d837      	bhi.n	80021de <DMA_CheckFifoParam+0xda>
 800216e:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <DMA_CheckFifoParam+0x70>)
 8002170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002174:	08002185 	.word	0x08002185
 8002178:	0800218b 	.word	0x0800218b
 800217c:	08002185 	.word	0x08002185
 8002180:	0800219d 	.word	0x0800219d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
      break;
 8002188:	e030      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d025      	beq.n	80021e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800219a:	e022      	b.n	80021e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021a4:	d11f      	bne.n	80021e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021aa:	e01c      	b.n	80021e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d903      	bls.n	80021ba <DMA_CheckFifoParam+0xb6>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d003      	beq.n	80021c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021b8:	e018      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
      break;
 80021be:	e015      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
      break;
 80021d0:	e00b      	b.n	80021ea <DMA_CheckFifoParam+0xe6>
      break;
 80021d2:	bf00      	nop
 80021d4:	e00a      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021d6:	bf00      	nop
 80021d8:	e008      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021da:	bf00      	nop
 80021dc:	e006      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021de:	bf00      	nop
 80021e0:	e004      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021e2:	bf00      	nop
 80021e4:	e002      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;   
 80021e6:	bf00      	nop
 80021e8:	e000      	b.n	80021ec <DMA_CheckFifoParam+0xe8>
      break;
 80021ea:	bf00      	nop
    }
  } 
  
  return status; 
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop

080021fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	e159      	b.n	80024cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	429a      	cmp	r2, r3
 8002232:	f040 8148 	bne.w	80024c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d005      	beq.n	800224e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224a:	2b02      	cmp	r3, #2
 800224c:	d130      	bne.n	80022b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002284:	2201      	movs	r2, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 0201 	and.w	r2, r3, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d017      	beq.n	80022ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d123      	bne.n	8002340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	69b9      	ldr	r1, [r7, #24]
 800233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0203 	and.w	r2, r3, #3
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80a2 	beq.w	80024c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b57      	ldr	r3, [pc, #348]	; (80024e4 <HAL_GPIO_Init+0x2e8>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4a56      	ldr	r2, [pc, #344]	; (80024e4 <HAL_GPIO_Init+0x2e8>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002390:	6453      	str	r3, [r2, #68]	; 0x44
 8002392:	4b54      	ldr	r3, [pc, #336]	; (80024e4 <HAL_GPIO_Init+0x2e8>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239e:	4a52      	ldr	r2, [pc, #328]	; (80024e8 <HAL_GPIO_Init+0x2ec>)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a49      	ldr	r2, [pc, #292]	; (80024ec <HAL_GPIO_Init+0x2f0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d019      	beq.n	80023fe <HAL_GPIO_Init+0x202>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a48      	ldr	r2, [pc, #288]	; (80024f0 <HAL_GPIO_Init+0x2f4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0x1fe>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a47      	ldr	r2, [pc, #284]	; (80024f4 <HAL_GPIO_Init+0x2f8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00d      	beq.n	80023f6 <HAL_GPIO_Init+0x1fa>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a46      	ldr	r2, [pc, #280]	; (80024f8 <HAL_GPIO_Init+0x2fc>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_Init+0x1f6>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a45      	ldr	r2, [pc, #276]	; (80024fc <HAL_GPIO_Init+0x300>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_GPIO_Init+0x1f2>
 80023ea:	2304      	movs	r3, #4
 80023ec:	e008      	b.n	8002400 <HAL_GPIO_Init+0x204>
 80023ee:	2307      	movs	r3, #7
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x204>
 80023f2:	2303      	movs	r3, #3
 80023f4:	e004      	b.n	8002400 <HAL_GPIO_Init+0x204>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e002      	b.n	8002400 <HAL_GPIO_Init+0x204>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_GPIO_Init+0x204>
 80023fe:	2300      	movs	r3, #0
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	f002 0203 	and.w	r2, r2, #3
 8002406:	0092      	lsls	r2, r2, #2
 8002408:	4093      	lsls	r3, r2
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002410:	4935      	ldr	r1, [pc, #212]	; (80024e8 <HAL_GPIO_Init+0x2ec>)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	3302      	adds	r3, #2
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800241e:	4b38      	ldr	r3, [pc, #224]	; (8002500 <HAL_GPIO_Init+0x304>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002442:	4a2f      	ldr	r2, [pc, #188]	; (8002500 <HAL_GPIO_Init+0x304>)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002448:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <HAL_GPIO_Init+0x304>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246c:	4a24      	ldr	r2, [pc, #144]	; (8002500 <HAL_GPIO_Init+0x304>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002472:	4b23      	ldr	r3, [pc, #140]	; (8002500 <HAL_GPIO_Init+0x304>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002496:	4a1a      	ldr	r2, [pc, #104]	; (8002500 <HAL_GPIO_Init+0x304>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800249c:	4b18      	ldr	r3, [pc, #96]	; (8002500 <HAL_GPIO_Init+0x304>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c0:	4a0f      	ldr	r2, [pc, #60]	; (8002500 <HAL_GPIO_Init+0x304>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3301      	adds	r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	2b0f      	cmp	r3, #15
 80024d0:	f67f aea2 	bls.w	8002218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3724      	adds	r7, #36	; 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40013800 	.word	0x40013800
 80024ec:	40020000 	.word	0x40020000
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020800 	.word	0x40020800
 80024f8:	40020c00 	.word	0x40020c00
 80024fc:	40021000 	.word	0x40021000
 8002500:	40013c00 	.word	0x40013c00

08002504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	887b      	ldrh	r3, [r7, #2]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	e001      	b.n	8002526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002526:	7bfb      	ldrb	r3, [r7, #15]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002568:	b08f      	sub	sp, #60	; 0x3c
 800256a:	af0a      	add	r7, sp, #40	; 0x28
 800256c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e10f      	b.n	8002798 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f005 fe9c 	bl	80082d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2203      	movs	r2, #3
 800259c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 fff5 	bl	80055a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	687e      	ldr	r6, [r7, #4]
 80025c4:	466d      	mov	r5, sp
 80025c6:	f106 0410 	add.w	r4, r6, #16
 80025ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80025da:	1d33      	adds	r3, r6, #4
 80025dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025de:	6838      	ldr	r0, [r7, #0]
 80025e0:	f002 fecc 	bl	800537c <USB_CoreInit>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2202      	movs	r2, #2
 80025ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e0d0      	b.n	8002798 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 ffe3 	bl	80055c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	e04a      	b.n	800269e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	333d      	adds	r3, #61	; 0x3d
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	333c      	adds	r3, #60	; 0x3c
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	b298      	uxth	r0, r3
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3342      	adds	r3, #66	; 0x42
 8002644:	4602      	mov	r2, r0
 8002646:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	333f      	adds	r3, #63	; 0x3f
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	3344      	adds	r3, #68	; 0x44
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3348      	adds	r3, #72	; 0x48
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	3350      	adds	r3, #80	; 0x50
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	3301      	adds	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d3af      	bcc.n	8002608 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e044      	b.n	8002738 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	3301      	adds	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	429a      	cmp	r2, r3
 8002740:	d3b5      	bcc.n	80026ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	687e      	ldr	r6, [r7, #4]
 800274a:	466d      	mov	r5, sp
 800274c:	f106 0410 	add.w	r4, r6, #16
 8002750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002758:	e894 0003 	ldmia.w	r4, {r0, r1}
 800275c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002760:	1d33      	adds	r3, r6, #4
 8002762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002764:	6838      	ldr	r0, [r7, #0]
 8002766:	f002 ff7b 	bl	8005660 <USB_DevInit>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e00d      	b.n	8002798 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f003 fff7 	bl	8006784 <USB_DevDisconnect>

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_PCD_Start+0x1c>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e020      	b.n	80027fe <HAL_PCD_Start+0x5e>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d109      	bne.n	80027e0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d005      	beq.n	80027e0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f002 fecd 	bl	8005584 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 ffa7 	bl	8006742 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002806:	b590      	push	{r4, r7, lr}
 8002808:	b08d      	sub	sp, #52	; 0x34
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f004 f865 	bl	80068ec <USB_GetMode>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	f040 839d 	bne.w	8002f64 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f003 ffc9 	bl	80067c6 <USB_ReadInterrupts>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8393 	beq.w	8002f62 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f003 ffc0 	bl	80067c6 <USB_ReadInterrupts>
 8002846:	4603      	mov	r3, r0
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b02      	cmp	r3, #2
 800284e:	d107      	bne.n	8002860 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f002 0202 	and.w	r2, r2, #2
 800285e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f003 ffae 	bl	80067c6 <USB_ReadInterrupts>
 800286a:	4603      	mov	r3, r0
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b10      	cmp	r3, #16
 8002872:	d161      	bne.n	8002938 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0210 	bic.w	r2, r2, #16
 8002882:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	f003 020f 	and.w	r2, r3, #15
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	0c5b      	lsrs	r3, r3, #17
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d124      	bne.n	80028fa <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d035      	beq.n	8002928 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	6a38      	ldr	r0, [r7, #32]
 80028d0:	f003 fde5 	bl	800649e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028e0:	441a      	add	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028f2:	441a      	add	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	619a      	str	r2, [r3, #24]
 80028f8:	e016      	b.n	8002928 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	0c5b      	lsrs	r3, r3, #17
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	2b06      	cmp	r3, #6
 8002904:	d110      	bne.n	8002928 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800290c:	2208      	movs	r2, #8
 800290e:	4619      	mov	r1, r3
 8002910:	6a38      	ldr	r0, [r7, #32]
 8002912:	f003 fdc4 	bl	800649e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002922:	441a      	add	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0210 	orr.w	r2, r2, #16
 8002936:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f003 ff42 	bl	80067c6 <USB_ReadInterrupts>
 8002942:	4603      	mov	r3, r0
 8002944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002948:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800294c:	d16e      	bne.n	8002a2c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f003 ff48 	bl	80067ec <USB_ReadDevAllOutEpInterrupt>
 800295c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800295e:	e062      	b.n	8002a26 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d057      	beq.n	8002a1a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f003 ff6d 	bl	8006854 <USB_ReadDevOutEPInterrupt>
 800297a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00c      	beq.n	80029a0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002992:	461a      	mov	r2, r3
 8002994:	2301      	movs	r3, #1
 8002996:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fd98 	bl	80034d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00c      	beq.n	80029c4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b6:	461a      	mov	r2, r3
 80029b8:	2308      	movs	r3, #8
 80029ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fe92 	bl	80036e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029da:	461a      	mov	r2, r3
 80029dc:	2310      	movs	r3, #16
 80029de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f6:	461a      	mov	r2, r3
 80029f8:	2320      	movs	r3, #32
 80029fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a12:	461a      	mov	r2, r3
 8002a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a18:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d199      	bne.n	8002960 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 fec8 	bl	80067c6 <USB_ReadInterrupts>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a40:	f040 80c0 	bne.w	8002bc4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 fee9 	bl	8006820 <USB_ReadDevAllInEpInterrupt>
 8002a4e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a54:	e0b2      	b.n	8002bbc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80a7 	beq.w	8002bb0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f003 ff0f 	bl	8006890 <USB_ReadDevInEPInterrupt>
 8002a72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d057      	beq.n	8002b2e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	2201      	movs	r2, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69f9      	ldr	r1, [r7, #28]
 8002a9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d132      	bne.n	8002b22 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	3348      	adds	r3, #72	; 0x48
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4403      	add	r3, r0
 8002adc:	3344      	adds	r3, #68	; 0x44
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4419      	add	r1, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4403      	add	r3, r0
 8002af0:	3348      	adds	r3, #72	; 0x48
 8002af2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d113      	bne.n	8002b22 <HAL_PCD_IRQHandler+0x31c>
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	3350      	adds	r3, #80	; 0x50
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d108      	bne.n	8002b22 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	f003 ff17 	bl	8006950 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	4619      	mov	r1, r3
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f005 fc64 	bl	80083f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b44:	461a      	mov	r2, r3
 8002b46:	2308      	movs	r3, #8
 8002b48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b60:	461a      	mov	r2, r3
 8002b62:	2310      	movs	r3, #16
 8002b64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2340      	movs	r3, #64	; 0x40
 8002b80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fc03 	bl	80033b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f47f af49 	bne.w	8002a56 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 fdfc 	bl	80067c6 <USB_ReadInterrupts>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bd8:	d122      	bne.n	8002c20 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d108      	bne.n	8002c0a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c00:	2100      	movs	r1, #0
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fe0e 	bl	8003824 <HAL_PCDEx_LPM_Callback>
 8002c08:	e002      	b.n	8002c10 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f005 fc6a 	bl	80084e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f003 fdce 	bl	80067c6 <USB_ReadInterrupts>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c34:	d112      	bne.n	8002c5c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d102      	bne.n	8002c4c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f005 fc26 	bl	8008498 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c5a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f003 fdb0 	bl	80067c6 <USB_ReadInterrupts>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c70:	f040 80c7 	bne.w	8002e02 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2110      	movs	r1, #16
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f002 fe4a 	bl	8005928 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c94:	2300      	movs	r3, #0
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c98:	e056      	b.n	8002d48 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cbe:	0151      	lsls	r1, r2, #5
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	440a      	add	r2, r1
 8002cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ccc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cde:	0151      	lsls	r1, r2, #5
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	440a      	add	r2, r1
 8002ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ce8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d00:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d12:	0151      	lsls	r1, r2, #5
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	440a      	add	r2, r1
 8002d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d32:	0151      	lsls	r1, r2, #5
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	440a      	add	r2, r1
 8002d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d40:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	3301      	adds	r3, #1
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3a3      	bcc.n	8002c9a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d60:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d64:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d016      	beq.n	8002d9c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d7e:	f043 030b 	orr.w	r3, r3, #11
 8002d82:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d94:	f043 030b 	orr.w	r3, r3, #11
 8002d98:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9a:	e015      	b.n	8002dc8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002daa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002db2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dc2:	f043 030b 	orr.w	r3, r3, #11
 8002dc6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002dda:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dec:	461a      	mov	r2, r3
 8002dee:	f003 fdaf 	bl	8006950 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 fcdd 	bl	80067c6 <USB_ReadInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e16:	d124      	bne.n	8002e62 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fd73 	bl	8006908 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f002 fddb 	bl	80059e2 <USB_GetDevSpeed>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681c      	ldr	r4, [r3, #0]
 8002e38:	f001 f940 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 8002e3c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	4620      	mov	r0, r4
 8002e48:	f002 fafa 	bl	8005440 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f005 fafa 	bl	8008446 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 fcad 	bl	80067c6 <USB_ReadInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d10a      	bne.n	8002e8c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f005 fad7 	bl	800842a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f002 0208 	and.w	r2, r2, #8
 8002e8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 fc98 	bl	80067c6 <USB_ReadInterrupts>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea0:	d10f      	bne.n	8002ec2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f005 fb39 	bl	8008524 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fc7d 	bl	80067c6 <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ed6:	d10f      	bne.n	8002ef8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f005 fb0c 	bl	8008500 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f003 fc62 	bl	80067c6 <USB_ReadInterrupts>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d10a      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f005 fb1a 	bl	8008548 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 fc4c 	bl	80067c6 <USB_ReadInterrupts>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d115      	bne.n	8002f64 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f005 fb0a 	bl	8008564 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6859      	ldr	r1, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	e000      	b.n	8002f64 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002f62:	bf00      	nop
    }
  }
}
 8002f64:	3734      	adds	r7, #52	; 0x34
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd90      	pop	{r4, r7, pc}

08002f6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_PCD_SetAddress+0x1a>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e013      	b.n	8002fac <HAL_PCD_SetAddress+0x42>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 fbaa 	bl	80066f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	70fb      	strb	r3, [r7, #3]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	803b      	strh	r3, [r7, #0]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	da0f      	bge.n	8002ffa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	f003 020f 	and.w	r2, r3, #15
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	3338      	adds	r3, #56	; 0x38
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	3304      	adds	r3, #4
 8002ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	705a      	strb	r2, [r3, #1]
 8002ff8:	e00f      	b.n	800301a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	f003 020f 	and.w	r2, r3, #15
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	3304      	adds	r3, #4
 8003012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003026:	883a      	ldrh	r2, [r7, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	78ba      	ldrb	r2, [r7, #2]
 8003030:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	785b      	ldrb	r3, [r3, #1]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003044:	78bb      	ldrb	r3, [r7, #2]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d102      	bne.n	8003050 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_PCD_EP_Open+0xaa>
 800305a:	2302      	movs	r3, #2
 800305c:	e00e      	b.n	800307c <HAL_PCD_EP_Open+0xc8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68f9      	ldr	r1, [r7, #12]
 800306c:	4618      	mov	r0, r3
 800306e:	f002 fcdd 	bl	8005a2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800307a:	7afb      	ldrb	r3, [r7, #11]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003094:	2b00      	cmp	r3, #0
 8003096:	da0f      	bge.n	80030b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	f003 020f 	and.w	r2, r3, #15
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	3338      	adds	r3, #56	; 0x38
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4413      	add	r3, r2
 80030ac:	3304      	adds	r3, #4
 80030ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	705a      	strb	r2, [r3, #1]
 80030b6:	e00f      	b.n	80030d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	f003 020f 	and.w	r2, r3, #15
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	3304      	adds	r3, #4
 80030d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_PCD_EP_Close+0x6e>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e00e      	b.n	8003110 <HAL_PCD_EP_Close+0x8c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68f9      	ldr	r1, [r7, #12]
 8003100:	4618      	mov	r0, r3
 8003102:	f002 fd1b 	bl	8005b3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	460b      	mov	r3, r1
 8003126:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003128:	7afb      	ldrb	r3, [r7, #11]
 800312a:	f003 020f 	and.w	r2, r3, #15
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	3304      	adds	r3, #4
 8003140:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2200      	movs	r2, #0
 8003152:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2200      	movs	r2, #0
 8003158:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800315a:	7afb      	ldrb	r3, [r7, #11]
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	b2da      	uxtb	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d102      	bne.n	8003174 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003174:	7afb      	ldrb	r3, [r7, #11]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	6979      	ldr	r1, [r7, #20]
 800318c:	f002 fff6 	bl	800617c <USB_EP0StartXfer>
 8003190:	e008      	b.n	80031a4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	6979      	ldr	r1, [r7, #20]
 80031a0:	f002 fda8 	bl	8005cf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b086      	sub	sp, #24
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	460b      	mov	r3, r1
 80031bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031be:	7afb      	ldrb	r3, [r7, #11]
 80031c0:	f003 020f 	and.w	r2, r3, #15
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	3338      	adds	r3, #56	; 0x38
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4413      	add	r3, r2
 80031d2:	3304      	adds	r3, #4
 80031d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2200      	movs	r2, #0
 80031e6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2201      	movs	r2, #1
 80031ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ee:	7afb      	ldrb	r3, [r7, #11]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d102      	bne.n	8003208 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003208:	7afb      	ldrb	r3, [r7, #11]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	6979      	ldr	r1, [r7, #20]
 8003220:	f002 ffac 	bl	800617c <USB_EP0StartXfer>
 8003224:	e008      	b.n	8003238 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	6979      	ldr	r1, [r7, #20]
 8003234:	f002 fd5e 	bl	8005cf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	f003 020f 	and.w	r2, r3, #15
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	d901      	bls.n	8003260 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e050      	b.n	8003302 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003264:	2b00      	cmp	r3, #0
 8003266:	da0f      	bge.n	8003288 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	f003 020f 	and.w	r2, r3, #15
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	3338      	adds	r3, #56	; 0x38
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	3304      	adds	r3, #4
 800327e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	705a      	strb	r2, [r3, #1]
 8003286:	e00d      	b.n	80032a4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	3304      	adds	r3, #4
 800329c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_PCD_EP_SetStall+0x82>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e01e      	b.n	8003302 <HAL_PCD_EP_SetStall+0xc0>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68f9      	ldr	r1, [r7, #12]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f003 f93b 	bl	800654e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10a      	bne.n	80032f8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	b2d9      	uxtb	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032f2:	461a      	mov	r2, r3
 80032f4:	f003 fb2c 	bl	8006950 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	460b      	mov	r3, r1
 8003314:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	f003 020f 	and.w	r2, r3, #15
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d901      	bls.n	8003328 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e042      	b.n	80033ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800332c:	2b00      	cmp	r3, #0
 800332e:	da0f      	bge.n	8003350 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	3338      	adds	r3, #56	; 0x38
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4413      	add	r3, r2
 8003344:	3304      	adds	r3, #4
 8003346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	705a      	strb	r2, [r3, #1]
 800334e:	e00f      	b.n	8003370 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	f003 020f 	and.w	r2, r3, #15
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	3304      	adds	r3, #4
 8003368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	b2da      	uxtb	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_PCD_EP_ClrStall+0x86>
 800338c:	2302      	movs	r3, #2
 800338e:	e00e      	b.n	80033ae <HAL_PCD_EP_ClrStall+0xa4>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68f9      	ldr	r1, [r7, #12]
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 f943 	bl	800662a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b08a      	sub	sp, #40	; 0x28
 80033ba:	af02      	add	r7, sp, #8
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	3338      	adds	r3, #56	; 0x38
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	3304      	adds	r3, #4
 80033dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d901      	bls.n	80033ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e06c      	b.n	80034c8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	429a      	cmp	r2, r3
 8003402:	d902      	bls.n	800340a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3303      	adds	r3, #3
 800340e:	089b      	lsrs	r3, r3, #2
 8003410:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003412:	e02b      	b.n	800346c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	429a      	cmp	r2, r3
 8003428:	d902      	bls.n	8003430 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	3303      	adds	r3, #3
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68d9      	ldr	r1, [r3, #12]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003448:	b2db      	uxtb	r3, r3
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	4603      	mov	r3, r0
 800344e:	6978      	ldr	r0, [r7, #20]
 8003450:	f002 ffe7 	bl	8006422 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	441a      	add	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	699a      	ldr	r2, [r3, #24]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	441a      	add	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	b29b      	uxth	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	429a      	cmp	r2, r3
 8003480:	d809      	bhi.n	8003496 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800348a:	429a      	cmp	r2, r3
 800348c:	d203      	bcs.n	8003496 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1be      	bne.n	8003414 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d811      	bhi.n	80034c6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	2201      	movs	r2, #1
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	6939      	ldr	r1, [r7, #16]
 80034be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034c2:	4013      	ands	r3, r2
 80034c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3720      	adds	r7, #32
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	333c      	adds	r3, #60	; 0x3c
 80034e8:	3304      	adds	r3, #4
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b01      	cmp	r3, #1
 8003504:	f040 80a0 	bne.w	8003648 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d015      	beq.n	800353e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4a72      	ldr	r2, [pc, #456]	; (80036e0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003516:	4293      	cmp	r3, r2
 8003518:	f240 80dd 	bls.w	80036d6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 80d7 	beq.w	80036d6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003534:	461a      	mov	r2, r3
 8003536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353a:	6093      	str	r3, [r2, #8]
 800353c:	e0cb      	b.n	80036d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003554:	461a      	mov	r2, r3
 8003556:	2320      	movs	r3, #32
 8003558:	6093      	str	r3, [r2, #8]
 800355a:	e0bc      	b.n	80036d6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 80b7 	bne.w	80036d6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a5d      	ldr	r2, [pc, #372]	; (80036e0 <PCD_EP_OutXfrComplete_int+0x210>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d90f      	bls.n	8003590 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003586:	461a      	mov	r2, r3
 8003588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358c:	6093      	str	r3, [r2, #8]
 800358e:	e0a2      	b.n	80036d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035a2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	0159      	lsls	r1, r3, #5
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	440b      	add	r3, r1
 80035ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80035b6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4403      	add	r3, r0
 80035c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80035ca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035de:	6819      	ldr	r1, [r3, #0]
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4403      	add	r3, r0
 80035ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4419      	add	r1, r3
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4403      	add	r3, r0
 8003604:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003608:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d114      	bne.n	800363a <PCD_EP_OutXfrComplete_int+0x16a>
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d108      	bne.n	800363a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003632:	461a      	mov	r2, r3
 8003634:	2101      	movs	r1, #1
 8003636:	f003 f98b 	bl	8006950 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f004 febd 	bl	80083c0 <HAL_PCD_DataOutStageCallback>
 8003646:	e046      	b.n	80036d6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a26      	ldr	r2, [pc, #152]	; (80036e4 <PCD_EP_OutXfrComplete_int+0x214>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d124      	bne.n	800369a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003666:	461a      	mov	r2, r3
 8003668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800366c:	6093      	str	r3, [r2, #8]
 800366e:	e032      	b.n	80036d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003686:	461a      	mov	r2, r3
 8003688:	2320      	movs	r3, #32
 800368a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f004 fe94 	bl	80083c0 <HAL_PCD_DataOutStageCallback>
 8003698:	e01d      	b.n	80036d6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d114      	bne.n	80036ca <PCD_EP_OutXfrComplete_int+0x1fa>
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d108      	bne.n	80036ca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036c2:	461a      	mov	r2, r3
 80036c4:	2100      	movs	r1, #0
 80036c6:	f003 f943 	bl	8006950 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	4619      	mov	r1, r3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f004 fe75 	bl	80083c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	4f54300a 	.word	0x4f54300a
 80036e4:	4f54310a 	.word	0x4f54310a

080036e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	333c      	adds	r3, #60	; 0x3c
 8003700:	3304      	adds	r3, #4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <PCD_EP_OutSetupPacket_int+0x88>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d90e      	bls.n	800373c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003724:	2b00      	cmp	r3, #0
 8003726:	d009      	beq.n	800373c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003734:	461a      	mov	r2, r3
 8003736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800373a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f004 fe2d 	bl	800839c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <PCD_EP_OutSetupPacket_int+0x88>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d90c      	bls.n	8003764 <PCD_EP_OutSetupPacket_int+0x7c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d108      	bne.n	8003764 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800375c:	461a      	mov	r2, r3
 800375e:	2101      	movs	r1, #1
 8003760:	f003 f8f6 	bl	8006950 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	4f54300a 	.word	0x4f54300a

08003774 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]
 8003780:	4613      	mov	r3, r2
 8003782:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d107      	bne.n	80037a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003792:	883b      	ldrh	r3, [r7, #0]
 8003794:	0419      	lsls	r1, r3, #16
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	430a      	orrs	r2, r1
 800379e:	629a      	str	r2, [r3, #40]	; 0x28
 80037a0:	e028      	b.n	80037f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4413      	add	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037b0:	2300      	movs	r3, #0
 80037b2:	73fb      	strb	r3, [r7, #15]
 80037b4:	e00d      	b.n	80037d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	3340      	adds	r3, #64	; 0x40
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4413      	add	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	3301      	adds	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	429a      	cmp	r2, r3
 80037da:	d3ec      	bcc.n	80037b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037dc:	883b      	ldrh	r3, [r7, #0]
 80037de:	0418      	lsls	r0, r3, #16
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	4302      	orrs	r2, r0
 80037ec:	3340      	adds	r3, #64	; 0x40
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	460b      	mov	r3, r1
 800380c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e264      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d075      	beq.n	8003946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800385a:	4ba3      	ldr	r3, [pc, #652]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
 8003862:	2b04      	cmp	r3, #4
 8003864:	d00c      	beq.n	8003880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003866:	4ba0      	ldr	r3, [pc, #640]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800386e:	2b08      	cmp	r3, #8
 8003870:	d112      	bne.n	8003898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003872:	4b9d      	ldr	r3, [pc, #628]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800387e:	d10b      	bne.n	8003898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003880:	4b99      	ldr	r3, [pc, #612]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d05b      	beq.n	8003944 <HAL_RCC_OscConfig+0x108>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d157      	bne.n	8003944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e23f      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a0:	d106      	bne.n	80038b0 <HAL_RCC_OscConfig+0x74>
 80038a2:	4b91      	ldr	r3, [pc, #580]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a90      	ldr	r2, [pc, #576]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	e01d      	b.n	80038ec <HAL_RCC_OscConfig+0xb0>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b8:	d10c      	bne.n	80038d4 <HAL_RCC_OscConfig+0x98>
 80038ba:	4b8b      	ldr	r3, [pc, #556]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a8a      	ldr	r2, [pc, #552]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b88      	ldr	r3, [pc, #544]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a87      	ldr	r2, [pc, #540]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e00b      	b.n	80038ec <HAL_RCC_OscConfig+0xb0>
 80038d4:	4b84      	ldr	r3, [pc, #528]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a83      	ldr	r2, [pc, #524]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 80038da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	4b81      	ldr	r3, [pc, #516]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a80      	ldr	r2, [pc, #512]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 80038e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d013      	beq.n	800391c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fd ff3e 	bl	8001774 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038fc:	f7fd ff3a 	bl	8001774 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e204      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	4b76      	ldr	r3, [pc, #472]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0xc0>
 800391a:	e014      	b.n	8003946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fd ff2a 	bl	8001774 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003924:	f7fd ff26 	bl	8001774 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	; 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e1f0      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003936:	4b6c      	ldr	r3, [pc, #432]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0xe8>
 8003942:	e000      	b.n	8003946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d063      	beq.n	8003a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003952:	4b65      	ldr	r3, [pc, #404]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800395e:	4b62      	ldr	r3, [pc, #392]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003966:	2b08      	cmp	r3, #8
 8003968:	d11c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396a:	4b5f      	ldr	r3, [pc, #380]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d116      	bne.n	80039a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003976:	4b5c      	ldr	r3, [pc, #368]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_RCC_OscConfig+0x152>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d001      	beq.n	800398e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e1c4      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398e:	4b56      	ldr	r3, [pc, #344]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4952      	ldr	r1, [pc, #328]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a2:	e03a      	b.n	8003a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d020      	beq.n	80039ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ac:	4b4f      	ldr	r3, [pc, #316]	; (8003aec <HAL_RCC_OscConfig+0x2b0>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fd fedf 	bl	8001774 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ba:	f7fd fedb 	bl	8001774 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e1a5      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039cc:	4b46      	ldr	r3, [pc, #280]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d8:	4b43      	ldr	r3, [pc, #268]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4940      	ldr	r1, [pc, #256]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	600b      	str	r3, [r1, #0]
 80039ec:	e015      	b.n	8003a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ee:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_RCC_OscConfig+0x2b0>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fd febe 	bl	8001774 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039fc:	f7fd feba 	bl	8001774 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e184      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0e:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d030      	beq.n	8003a88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a2e:	4b30      	ldr	r3, [pc, #192]	; (8003af0 <HAL_RCC_OscConfig+0x2b4>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fd fe9e 	bl	8001774 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3c:	f7fd fe9a 	bl	8001774 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e164      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4e:	4b26      	ldr	r3, [pc, #152]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x200>
 8003a5a:	e015      	b.n	8003a88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5c:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <HAL_RCC_OscConfig+0x2b4>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a62:	f7fd fe87 	bl	8001774 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a6a:	f7fd fe83 	bl	8001774 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e14d      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f0      	bne.n	8003a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80a0 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_OscConfig+0x2b8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d121      	bne.n	8003b16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad2:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <HAL_RCC_OscConfig+0x2b8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <HAL_RCC_OscConfig+0x2b8>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ade:	f7fd fe49 	bl	8001774 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	e011      	b.n	8003b0a <HAL_RCC_OscConfig+0x2ce>
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	42470000 	.word	0x42470000
 8003af0:	42470e80 	.word	0x42470e80
 8003af4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af8:	f7fd fe3c 	bl	8001774 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e106      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0a:	4b85      	ldr	r3, [pc, #532]	; (8003d20 <HAL_RCC_OscConfig+0x4e4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d106      	bne.n	8003b2c <HAL_RCC_OscConfig+0x2f0>
 8003b1e:	4b81      	ldr	r3, [pc, #516]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4a80      	ldr	r2, [pc, #512]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2a:	e01c      	b.n	8003b66 <HAL_RCC_OscConfig+0x32a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b05      	cmp	r3, #5
 8003b32:	d10c      	bne.n	8003b4e <HAL_RCC_OscConfig+0x312>
 8003b34:	4b7b      	ldr	r3, [pc, #492]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	4a7a      	ldr	r2, [pc, #488]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b3a:	f043 0304 	orr.w	r3, r3, #4
 8003b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b40:	4b78      	ldr	r3, [pc, #480]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b44:	4a77      	ldr	r2, [pc, #476]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4c:	e00b      	b.n	8003b66 <HAL_RCC_OscConfig+0x32a>
 8003b4e:	4b75      	ldr	r3, [pc, #468]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	4a74      	ldr	r2, [pc, #464]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5a:	4b72      	ldr	r3, [pc, #456]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4a71      	ldr	r2, [pc, #452]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d015      	beq.n	8003b9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6e:	f7fd fe01 	bl	8001774 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fd fdfd 	bl	8001774 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e0c5      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8c:	4b65      	ldr	r3, [pc, #404]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ee      	beq.n	8003b76 <HAL_RCC_OscConfig+0x33a>
 8003b98:	e014      	b.n	8003bc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9a:	f7fd fdeb 	bl	8001774 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba0:	e00a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba2:	f7fd fde7 	bl	8001774 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e0af      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb8:	4b5a      	ldr	r3, [pc, #360]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1ee      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d105      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bca:	4b56      	ldr	r3, [pc, #344]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	4a55      	ldr	r2, [pc, #340]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 809b 	beq.w	8003d16 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003be0:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 030c 	and.w	r3, r3, #12
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d05c      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d141      	bne.n	8003c78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf4:	4b4c      	ldr	r3, [pc, #304]	; (8003d28 <HAL_RCC_OscConfig+0x4ec>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfa:	f7fd fdbb 	bl	8001774 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c02:	f7fd fdb7 	bl	8001774 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e081      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c14:	4b43      	ldr	r3, [pc, #268]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f0      	bne.n	8003c02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	019b      	lsls	r3, r3, #6
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	085b      	lsrs	r3, r3, #1
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	041b      	lsls	r3, r3, #16
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	061b      	lsls	r3, r3, #24
 8003c44:	4937      	ldr	r1, [pc, #220]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c4a:	4b37      	ldr	r3, [pc, #220]	; (8003d28 <HAL_RCC_OscConfig+0x4ec>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fd fd90 	bl	8001774 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fd fd8c 	bl	8001774 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e056      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6a:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x41c>
 8003c76:	e04e      	b.n	8003d16 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c78:	4b2b      	ldr	r3, [pc, #172]	; (8003d28 <HAL_RCC_OscConfig+0x4ec>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fd fd79 	bl	8001774 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c86:	f7fd fd75 	bl	8001774 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e03f      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c98:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f0      	bne.n	8003c86 <HAL_RCC_OscConfig+0x44a>
 8003ca4:	e037      	b.n	8003d16 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e032      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cb2:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <HAL_RCC_OscConfig+0x4e8>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d028      	beq.n	8003d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d121      	bne.n	8003d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d11a      	bne.n	8003d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ce8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d111      	bne.n	8003d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d107      	bne.n	8003d12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40007000 	.word	0x40007000
 8003d24:	40023800 	.word	0x40023800
 8003d28:	42470060 	.word	0x42470060

08003d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0cc      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d40:	4b68      	ldr	r3, [pc, #416]	; (8003ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d90c      	bls.n	8003d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4e:	4b65      	ldr	r3, [pc, #404]	; (8003ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d56:	4b63      	ldr	r3, [pc, #396]	; (8003ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0b8      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d020      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d80:	4b59      	ldr	r3, [pc, #356]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a58      	ldr	r2, [pc, #352]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d98:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4a52      	ldr	r2, [pc, #328]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da4:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	494d      	ldr	r1, [pc, #308]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d044      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d119      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e07f      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d003      	beq.n	8003dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dea:	4b3f      	ldr	r3, [pc, #252]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e06f      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e067      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e0a:	4b37      	ldr	r3, [pc, #220]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f023 0203 	bic.w	r2, r3, #3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4934      	ldr	r1, [pc, #208]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e1c:	f7fd fcaa 	bl	8001774 <HAL_GetTick>
 8003e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e24:	f7fd fca6 	bl	8001774 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e04f      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 020c 	and.w	r2, r3, #12
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d1eb      	bne.n	8003e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e4c:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d20c      	bcs.n	8003e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5a:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e032      	b.n	8003eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4916      	ldr	r1, [pc, #88]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e9e:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	490e      	ldr	r1, [pc, #56]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eb2:	f000 f821 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	490a      	ldr	r1, [pc, #40]	; (8003eec <HAL_RCC_ClockConfig+0x1c0>)
 8003ec4:	5ccb      	ldrb	r3, [r1, r3]
 8003ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eca:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ece:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd fc0a 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023c00 	.word	0x40023c00
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	080089b0 	.word	0x080089b0
 8003ef0:	2000000c 	.word	0x2000000c
 8003ef4:	20000014 	.word	0x20000014

08003ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	607b      	str	r3, [r7, #4]
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f10:	4b67      	ldr	r3, [pc, #412]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 030c 	and.w	r3, r3, #12
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d00d      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x40>
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	f200 80bd 	bhi.w	800409c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x34>
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d003      	beq.n	8003f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f2a:	e0b7      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f2c:	4b61      	ldr	r3, [pc, #388]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f2e:	60bb      	str	r3, [r7, #8]
       break;
 8003f30:	e0b7      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f32:	4b61      	ldr	r3, [pc, #388]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003f34:	60bb      	str	r3, [r7, #8]
      break;
 8003f36:	e0b4      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f38:	4b5d      	ldr	r3, [pc, #372]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f42:	4b5b      	ldr	r3, [pc, #364]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04d      	beq.n	8003fea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4e:	4b58      	ldr	r3, [pc, #352]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	099b      	lsrs	r3, r3, #6
 8003f54:	461a      	mov	r2, r3
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	ea02 0800 	and.w	r8, r2, r0
 8003f66:	ea03 0901 	and.w	r9, r3, r1
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	014b      	lsls	r3, r1, #5
 8003f78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f7c:	0142      	lsls	r2, r0, #5
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	ebb0 0008 	subs.w	r0, r0, r8
 8003f86:	eb61 0109 	sbc.w	r1, r1, r9
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	018b      	lsls	r3, r1, #6
 8003f94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f98:	0182      	lsls	r2, r0, #6
 8003f9a:	1a12      	subs	r2, r2, r0
 8003f9c:	eb63 0301 	sbc.w	r3, r3, r1
 8003fa0:	f04f 0000 	mov.w	r0, #0
 8003fa4:	f04f 0100 	mov.w	r1, #0
 8003fa8:	00d9      	lsls	r1, r3, #3
 8003faa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fae:	00d0      	lsls	r0, r2, #3
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	eb12 0208 	adds.w	r2, r2, r8
 8003fb8:	eb43 0309 	adc.w	r3, r3, r9
 8003fbc:	f04f 0000 	mov.w	r0, #0
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	0259      	lsls	r1, r3, #9
 8003fc6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003fca:	0250      	lsls	r0, r2, #9
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	f7fc f8fa 	bl	80001d4 <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e04a      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fea:	4b31      	ldr	r3, [pc, #196]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	099b      	lsrs	r3, r3, #6
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ffa:	f04f 0100 	mov.w	r1, #0
 8003ffe:	ea02 0400 	and.w	r4, r2, r0
 8004002:	ea03 0501 	and.w	r5, r3, r1
 8004006:	4620      	mov	r0, r4
 8004008:	4629      	mov	r1, r5
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	014b      	lsls	r3, r1, #5
 8004014:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004018:	0142      	lsls	r2, r0, #5
 800401a:	4610      	mov	r0, r2
 800401c:	4619      	mov	r1, r3
 800401e:	1b00      	subs	r0, r0, r4
 8004020:	eb61 0105 	sbc.w	r1, r1, r5
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	018b      	lsls	r3, r1, #6
 800402e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004032:	0182      	lsls	r2, r0, #6
 8004034:	1a12      	subs	r2, r2, r0
 8004036:	eb63 0301 	sbc.w	r3, r3, r1
 800403a:	f04f 0000 	mov.w	r0, #0
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	00d9      	lsls	r1, r3, #3
 8004044:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004048:	00d0      	lsls	r0, r2, #3
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	1912      	adds	r2, r2, r4
 8004050:	eb45 0303 	adc.w	r3, r5, r3
 8004054:	f04f 0000 	mov.w	r0, #0
 8004058:	f04f 0100 	mov.w	r1, #0
 800405c:	0299      	lsls	r1, r3, #10
 800405e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004062:	0290      	lsls	r0, r2, #10
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4610      	mov	r0, r2
 800406a:	4619      	mov	r1, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	461a      	mov	r2, r3
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	f7fc f8ae 	bl	80001d4 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4613      	mov	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	3301      	adds	r3, #1
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	60bb      	str	r3, [r7, #8]
      break;
 800409a:	e002      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800409e:	60bb      	str	r3, [r7, #8]
      break;
 80040a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040a2:	68bb      	ldr	r3, [r7, #8]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
 80040b4:	00f42400 	.word	0x00f42400
 80040b8:	007a1200 	.word	0x007a1200

080040bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c0:	4b03      	ldr	r3, [pc, #12]	; (80040d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040c2:	681b      	ldr	r3, [r3, #0]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	2000000c 	.word	0x2000000c

080040d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040d8:	f7ff fff0 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	0a9b      	lsrs	r3, r3, #10
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	4903      	ldr	r1, [pc, #12]	; (80040f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ea:	5ccb      	ldrb	r3, [r1, r3]
 80040ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40023800 	.word	0x40023800
 80040f8:	080089c0 	.word	0x080089c0

080040fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004100:	f7ff ffdc 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 8004104:	4602      	mov	r2, r0
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	0b5b      	lsrs	r3, r3, #13
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	4903      	ldr	r1, [pc, #12]	; (8004120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004112:	5ccb      	ldrb	r3, [r1, r3]
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40023800 	.word	0x40023800
 8004120:	080089c0 	.word	0x080089c0

08004124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e03f      	b.n	80041b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc fdb8 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2224      	movs	r2, #36	; 0x24
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 ff3f 	bl	8004fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800417c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800418c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800419c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08c      	sub	sp, #48	; 0x30
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	4613      	mov	r3, r2
 80041cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d165      	bne.n	80042a6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_UART_Transmit_DMA+0x26>
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e05e      	b.n	80042a8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_UART_Transmit_DMA+0x38>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e057      	b.n	80042a8 <HAL_UART_Transmit_DMA+0xe8>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	88fa      	ldrh	r2, [r7, #6]
 800420a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2221      	movs	r2, #33	; 0x21
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004224:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <HAL_UART_Transmit_DMA+0xf0>)
 8004226:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422c:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <HAL_UART_Transmit_DMA+0xf4>)
 800422e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <HAL_UART_Transmit_DMA+0xf8>)
 8004236:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423c:	2200      	movs	r2, #0
 800423e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004240:	f107 0308 	add.w	r3, r7, #8
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	6819      	ldr	r1, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3304      	adds	r3, #4
 8004254:	461a      	mov	r2, r3
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	f7fd fc7c 	bl	8001b54 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004264:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3314      	adds	r3, #20
 8004274:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	617b      	str	r3, [r7, #20]
   return(result);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004284:	62bb      	str	r3, [r7, #40]	; 0x28
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3314      	adds	r3, #20
 800428c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800428e:	627a      	str	r2, [r7, #36]	; 0x24
 8004290:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6a39      	ldr	r1, [r7, #32]
 8004294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	61fb      	str	r3, [r7, #28]
   return(result);
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e5      	bne.n	800426e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e000      	b.n	80042a8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
  }
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3730      	adds	r7, #48	; 0x30
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	0800488d 	.word	0x0800488d
 80042b4:	08004927 	.word	0x08004927
 80042b8:	08004a9f 	.word	0x08004a9f

080042bc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	d11d      	bne.n	8004312 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_UART_Receive_DMA+0x26>
 80042dc:	88fb      	ldrh	r3, [r7, #6]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e016      	b.n	8004314 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_UART_Receive_DMA+0x38>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e00f      	b.n	8004314 <HAL_UART_Receive_DMA+0x58>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	461a      	mov	r2, r3
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fc13 	bl	8004b34 <UART_Start_Receive_DMA>
 800430e:	4603      	mov	r3, r0
 8004310:	e000      	b.n	8004314 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004312:	2302      	movs	r3, #2
  }
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b0ba      	sub	sp, #232	; 0xe8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004342:	2300      	movs	r3, #0
 8004344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004348:	2300      	movs	r3, #0
 800434a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800434e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800435a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10f      	bne.n	8004382 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_UART_IRQHandler+0x66>
 800436e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fd7b 	bl	8004e76 <UART_Receive_IT>
      return;
 8004380:	e256      	b.n	8004830 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 80de 	beq.w	8004548 <HAL_UART_IRQHandler+0x22c>
 800438c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800439c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80d1 	beq.w	8004548 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <HAL_UART_IRQHandler+0xae>
 80043b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f043 0201 	orr.w	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <HAL_UART_IRQHandler+0xd2>
 80043d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f043 0202 	orr.w	r2, r3, #2
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_UART_IRQHandler+0xf6>
 80043fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f043 0204 	orr.w	r2, r3, #4
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d011      	beq.n	8004442 <HAL_UART_IRQHandler+0x126>
 800441e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d105      	bne.n	8004436 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800442a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0208 	orr.w	r2, r3, #8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 81ed 	beq.w	8004826 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800444c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <HAL_UART_IRQHandler+0x14e>
 8004458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fd06 	bl	8004e76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	2b00      	cmp	r3, #0
 800448c:	d103      	bne.n	8004496 <HAL_UART_IRQHandler+0x17a>
 800448e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d04f      	beq.n	8004536 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fc0e 	bl	8004cb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d141      	bne.n	800452e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3314      	adds	r3, #20
 80044b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3314      	adds	r3, #20
 80044d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1d9      	bne.n	80044aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d013      	beq.n	8004526 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	4a7d      	ldr	r2, [pc, #500]	; (80046f8 <HAL_UART_IRQHandler+0x3dc>)
 8004504:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	4618      	mov	r0, r3
 800450c:	f7fd fbea 	bl	8001ce4 <HAL_DMA_Abort_IT>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d016      	beq.n	8004544 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004520:	4610      	mov	r0, r2
 8004522:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004524:	e00e      	b.n	8004544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f99a 	bl	8004860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452c:	e00a      	b.n	8004544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f996 	bl	8004860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004534:	e006      	b.n	8004544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f992 	bl	8004860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004542:	e170      	b.n	8004826 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	bf00      	nop
    return;
 8004546:	e16e      	b.n	8004826 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	2b01      	cmp	r3, #1
 800454e:	f040 814a 	bne.w	80047e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 8143 	beq.w	80047e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 813c 	beq.w	80047e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800456e:	2300      	movs	r3, #0
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b40      	cmp	r3, #64	; 0x40
 8004590:	f040 80b4 	bne.w	80046fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8140 	beq.w	800482a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045b2:	429a      	cmp	r2, r3
 80045b4:	f080 8139 	bcs.w	800482a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ca:	f000 8088 	beq.w	80046de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	330c      	adds	r3, #12
 80045d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004606:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1d9      	bne.n	80045ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3314      	adds	r3, #20
 8004620:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800462a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3314      	adds	r3, #20
 800463a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800463e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004642:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004646:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e1      	bne.n	800461a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3314      	adds	r3, #20
 800465c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3314      	adds	r3, #20
 8004676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800467a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800467c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e3      	bne.n	8004656 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ae:	f023 0310 	bic.w	r3, r3, #16
 80046b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	330c      	adds	r3, #12
 80046bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80046c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e3      	bne.n	800469c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fd fa93 	bl	8001c04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	4619      	mov	r1, r3
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f8c0 	bl	8004874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046f4:	e099      	b.n	800482a <HAL_UART_IRQHandler+0x50e>
 80046f6:	bf00      	nop
 80046f8:	08004d7f 	.word	0x08004d7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004704:	b29b      	uxth	r3, r3
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 808b 	beq.w	800482e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8086 	beq.w	800482e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004746:	647a      	str	r2, [r7, #68]	; 0x44
 8004748:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800474c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e3      	bne.n	8004722 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3314      	adds	r3, #20
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	623b      	str	r3, [r7, #32]
   return(result);
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3314      	adds	r3, #20
 800477a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800477e:	633a      	str	r2, [r7, #48]	; 0x30
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e3      	bne.n	800475a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0310 	bic.w	r3, r3, #16
 80047b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	330c      	adds	r3, #12
 80047c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047c4:	61fa      	str	r2, [r7, #28]
 80047c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	69b9      	ldr	r1, [r7, #24]
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	617b      	str	r3, [r7, #20]
   return(result);
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e3      	bne.n	80047a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047dc:	4619      	mov	r1, r3
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f848 	bl	8004874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047e4:	e023      	b.n	800482e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <HAL_UART_IRQHandler+0x4ea>
 80047f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fad1 	bl	8004da6 <UART_Transmit_IT>
    return;
 8004804:	e014      	b.n	8004830 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00e      	beq.n	8004830 <HAL_UART_IRQHandler+0x514>
 8004812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fb11 	bl	8004e46 <UART_EndTransmit_IT>
    return;
 8004824:	e004      	b.n	8004830 <HAL_UART_IRQHandler+0x514>
    return;
 8004826:	bf00      	nop
 8004828:	e002      	b.n	8004830 <HAL_UART_IRQHandler+0x514>
      return;
 800482a:	bf00      	nop
 800482c:	e000      	b.n	8004830 <HAL_UART_IRQHandler+0x514>
      return;
 800482e:	bf00      	nop
  }
}
 8004830:	37e8      	adds	r7, #232	; 0xe8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop

08004838 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b090      	sub	sp, #64	; 0x40
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d137      	bne.n	8004918 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80048a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048aa:	2200      	movs	r2, #0
 80048ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	623b      	str	r3, [r7, #32]
   return(result);
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80048c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ce:	633a      	str	r2, [r7, #48]	; 0x30
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
 80048fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	330c      	adds	r3, #12
 8004900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004902:	61fa      	str	r2, [r7, #28]
 8004904:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	69b9      	ldr	r1, [r7, #24]
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	617b      	str	r3, [r7, #20]
   return(result);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e5      	bne.n	80048e2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004916:	e002      	b.n	800491e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004918:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800491a:	f7fc f96b 	bl	8000bf4 <HAL_UART_TxCpltCallback>
}
 800491e:	bf00      	nop
 8004920:	3740      	adds	r7, #64	; 0x40
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7ff ff7f 	bl	8004838 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b09c      	sub	sp, #112	; 0x70
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d172      	bne.n	8004a44 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800495e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004960:	2200      	movs	r2, #0
 8004962:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800497a:	66bb      	str	r3, [r7, #104]	; 0x68
 800497c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004984:	65ba      	str	r2, [r7, #88]	; 0x58
 8004986:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800498a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e5      	bne.n	8004964 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3314      	adds	r3, #20
 800499e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	667b      	str	r3, [r7, #100]	; 0x64
 80049b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3314      	adds	r3, #20
 80049b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80049b8:	647a      	str	r2, [r7, #68]	; 0x44
 80049ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e5      	bne.n	8004998 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3314      	adds	r3, #20
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	623b      	str	r3, [r7, #32]
   return(result);
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e2:	663b      	str	r3, [r7, #96]	; 0x60
 80049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3314      	adds	r3, #20
 80049ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049ec:	633a      	str	r2, [r7, #48]	; 0x30
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e5      	bne.n	80049cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d119      	bne.n	8004a44 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0310 	bic.w	r3, r3, #16
 8004a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a30:	61fa      	str	r2, [r7, #28]
 8004a32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	69b9      	ldr	r1, [r7, #24]
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e5      	bne.n	8004a10 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d106      	bne.n	8004a5a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a50:	4619      	mov	r1, r3
 8004a52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a54:	f7ff ff0e 	bl	8004874 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a58:	e002      	b.n	8004a60 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004a5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a5c:	f7fc f8e6 	bl	8000c2c <HAL_UART_RxCpltCallback>
}
 8004a60:	bf00      	nop
 8004a62:	3770      	adds	r7, #112	; 0x70
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d108      	bne.n	8004a90 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	4619      	mov	r1, r3
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f7ff fef3 	bl	8004874 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a8e:	e002      	b.n	8004a96 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7ff fedb 	bl	800484c <HAL_UART_RxHalfCpltCallback>
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	2b80      	cmp	r3, #128	; 0x80
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b21      	cmp	r3, #33	; 0x21
 8004ad0:	d108      	bne.n	8004ae4 <UART_DMAError+0x46>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2200      	movs	r2, #0
 8004adc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004ade:	68b8      	ldr	r0, [r7, #8]
 8004ae0:	f000 f8c2 	bl	8004c68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b40      	cmp	r3, #64	; 0x40
 8004af0:	bf0c      	ite	eq
 8004af2:	2301      	moveq	r3, #1
 8004af4:	2300      	movne	r3, #0
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b22      	cmp	r3, #34	; 0x22
 8004b04:	d108      	bne.n	8004b18 <UART_DMAError+0x7a>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004b12:	68b8      	ldr	r0, [r7, #8]
 8004b14:	f000 f8d0 	bl	8004cb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	f043 0210 	orr.w	r2, r3, #16
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b24:	68b8      	ldr	r0, [r7, #8]
 8004b26:	f7ff fe9b 	bl	8004860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b2a:	bf00      	nop
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b098      	sub	sp, #96	; 0x60
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2222      	movs	r2, #34	; 0x22
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	4a3e      	ldr	r2, [pc, #248]	; (8004c5c <UART_Start_Receive_DMA+0x128>)
 8004b62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	4a3d      	ldr	r2, [pc, #244]	; (8004c60 <UART_Start_Receive_DMA+0x12c>)
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	4a3c      	ldr	r2, [pc, #240]	; (8004c64 <UART_Start_Receive_DMA+0x130>)
 8004b72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	2200      	movs	r2, #0
 8004b7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004b7c:	f107 0308 	add.w	r3, r7, #8
 8004b80:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	f7fc ffde 	bl	8001b54 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	330c      	adds	r3, #12
 8004bbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	330c      	adds	r3, #12
 8004bd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bd6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004bd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004bdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e5      	bne.n	8004bb6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3314      	adds	r3, #20
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	657b      	str	r3, [r7, #84]	; 0x54
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3314      	adds	r3, #20
 8004c08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c0a:	63ba      	str	r2, [r7, #56]	; 0x38
 8004c0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e5      	bne.n	8004bea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3314      	adds	r3, #20
 8004c24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c34:	653b      	str	r3, [r7, #80]	; 0x50
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3314      	adds	r3, #20
 8004c3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c3e:	627a      	str	r2, [r7, #36]	; 0x24
 8004c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6a39      	ldr	r1, [r7, #32]
 8004c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e5      	bne.n	8004c1e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3760      	adds	r7, #96	; 0x60
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	08004943 	.word	0x08004943
 8004c60:	08004a69 	.word	0x08004a69
 8004c64:	08004a9f 	.word	0x08004a9f

08004c68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b089      	sub	sp, #36	; 0x24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	61ba      	str	r2, [r7, #24]
 8004c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6979      	ldr	r1, [r7, #20]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e5      	bne.n	8004c70 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004cac:	bf00      	nop
 8004cae:	3724      	adds	r7, #36	; 0x24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b095      	sub	sp, #84	; 0x54
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ce0:	643a      	str	r2, [r7, #64]	; 0x40
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ce6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e5      	bne.n	8004cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	e853 3f00 	ldrex	r3, [r3]
 8004d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f023 0301 	bic.w	r3, r3, #1
 8004d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3314      	adds	r3, #20
 8004d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e5      	bne.n	8004cf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d119      	bne.n	8004d64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f023 0310 	bic.w	r3, r3, #16
 8004d46:	647b      	str	r3, [r7, #68]	; 0x44
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	330c      	adds	r3, #12
 8004d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d50:	61ba      	str	r2, [r7, #24]
 8004d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6979      	ldr	r1, [r7, #20]
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e5      	bne.n	8004d30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d72:	bf00      	nop
 8004d74:	3754      	adds	r7, #84	; 0x54
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff fd61 	bl	8004860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b21      	cmp	r3, #33	; 0x21
 8004db8:	d13e      	bne.n	8004e38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc2:	d114      	bne.n	8004dee <UART_Transmit_IT+0x48>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d110      	bne.n	8004dee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	1c9a      	adds	r2, r3, #2
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	621a      	str	r2, [r3, #32]
 8004dec:	e008      	b.n	8004e00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	1c59      	adds	r1, r3, #1
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6211      	str	r1, [r2, #32]
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10f      	bne.n	8004e34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	e000      	b.n	8004e3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e38:	2302      	movs	r3, #2
  }
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b082      	sub	sp, #8
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68da      	ldr	r2, [r3, #12]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fb fec4 	bl	8000bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b08c      	sub	sp, #48	; 0x30
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b22      	cmp	r3, #34	; 0x22
 8004e88:	f040 80ab 	bne.w	8004fe2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e94:	d117      	bne.n	8004ec6 <UART_Receive_IT+0x50>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d113      	bne.n	8004ec6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	1c9a      	adds	r2, r3, #2
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ec4:	e026      	b.n	8004f14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed8:	d007      	beq.n	8004eea <UART_Receive_IT+0x74>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <UART_Receive_IT+0x82>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d106      	bne.n	8004ef8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	e008      	b.n	8004f0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	4619      	mov	r1, r3
 8004f22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d15a      	bne.n	8004fde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0220 	bic.w	r2, r2, #32
 8004f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d135      	bne.n	8004fd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	330c      	adds	r3, #12
 8004f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f023 0310 	bic.w	r3, r3, #16
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8e:	623a      	str	r2, [r7, #32]
 8004f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	69f9      	ldr	r1, [r7, #28]
 8004f94:	6a3a      	ldr	r2, [r7, #32]
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e5      	bne.n	8004f6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d10a      	bne.n	8004fc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fc51 	bl	8004874 <HAL_UARTEx_RxEventCallback>
 8004fd2:	e002      	b.n	8004fda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7fb fe29 	bl	8000c2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e002      	b.n	8004fe4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
  }
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3730      	adds	r7, #48	; 0x30
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff0:	b09f      	sub	sp, #124	; 0x7c
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005002:	68d9      	ldr	r1, [r3, #12]
 8005004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	ea40 0301 	orr.w	r3, r0, r1
 800500c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800500e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	431a      	orrs	r2, r3
 8005018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	431a      	orrs	r2, r3
 800501e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	4313      	orrs	r3, r2
 8005024:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005030:	f021 010c 	bic.w	r1, r1, #12
 8005034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800503a:	430b      	orrs	r3, r1
 800503c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800503e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504a:	6999      	ldr	r1, [r3, #24]
 800504c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	ea40 0301 	orr.w	r3, r0, r1
 8005054:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4bc5      	ldr	r3, [pc, #788]	; (8005370 <UART_SetConfig+0x384>)
 800505c:	429a      	cmp	r2, r3
 800505e:	d004      	beq.n	800506a <UART_SetConfig+0x7e>
 8005060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	4bc3      	ldr	r3, [pc, #780]	; (8005374 <UART_SetConfig+0x388>)
 8005066:	429a      	cmp	r2, r3
 8005068:	d103      	bne.n	8005072 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800506a:	f7ff f847 	bl	80040fc <HAL_RCC_GetPCLK2Freq>
 800506e:	6778      	str	r0, [r7, #116]	; 0x74
 8005070:	e002      	b.n	8005078 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005072:	f7ff f82f 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
 8005076:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005080:	f040 80b6 	bne.w	80051f0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005086:	461c      	mov	r4, r3
 8005088:	f04f 0500 	mov.w	r5, #0
 800508c:	4622      	mov	r2, r4
 800508e:	462b      	mov	r3, r5
 8005090:	1891      	adds	r1, r2, r2
 8005092:	6439      	str	r1, [r7, #64]	; 0x40
 8005094:	415b      	adcs	r3, r3
 8005096:	647b      	str	r3, [r7, #68]	; 0x44
 8005098:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800509c:	1912      	adds	r2, r2, r4
 800509e:	eb45 0303 	adc.w	r3, r5, r3
 80050a2:	f04f 0000 	mov.w	r0, #0
 80050a6:	f04f 0100 	mov.w	r1, #0
 80050aa:	00d9      	lsls	r1, r3, #3
 80050ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050b0:	00d0      	lsls	r0, r2, #3
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	1911      	adds	r1, r2, r4
 80050b8:	6639      	str	r1, [r7, #96]	; 0x60
 80050ba:	416b      	adcs	r3, r5
 80050bc:	667b      	str	r3, [r7, #100]	; 0x64
 80050be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	1891      	adds	r1, r2, r2
 80050ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80050cc:	415b      	adcs	r3, r3
 80050ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80050d8:	f7fb f87c 	bl	80001d4 <__aeabi_uldivmod>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4ba5      	ldr	r3, [pc, #660]	; (8005378 <UART_SetConfig+0x38c>)
 80050e2:	fba3 2302 	umull	r2, r3, r3, r2
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	011e      	lsls	r6, r3, #4
 80050ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ec:	461c      	mov	r4, r3
 80050ee:	f04f 0500 	mov.w	r5, #0
 80050f2:	4622      	mov	r2, r4
 80050f4:	462b      	mov	r3, r5
 80050f6:	1891      	adds	r1, r2, r2
 80050f8:	6339      	str	r1, [r7, #48]	; 0x30
 80050fa:	415b      	adcs	r3, r3
 80050fc:	637b      	str	r3, [r7, #52]	; 0x34
 80050fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005102:	1912      	adds	r2, r2, r4
 8005104:	eb45 0303 	adc.w	r3, r5, r3
 8005108:	f04f 0000 	mov.w	r0, #0
 800510c:	f04f 0100 	mov.w	r1, #0
 8005110:	00d9      	lsls	r1, r3, #3
 8005112:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005116:	00d0      	lsls	r0, r2, #3
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	1911      	adds	r1, r2, r4
 800511e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005120:	416b      	adcs	r3, r5
 8005122:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	461a      	mov	r2, r3
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	1891      	adds	r1, r2, r2
 8005130:	62b9      	str	r1, [r7, #40]	; 0x28
 8005132:	415b      	adcs	r3, r3
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005136:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800513a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800513e:	f7fb f849 	bl	80001d4 <__aeabi_uldivmod>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4b8c      	ldr	r3, [pc, #560]	; (8005378 <UART_SetConfig+0x38c>)
 8005148:	fba3 1302 	umull	r1, r3, r3, r2
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	2164      	movs	r1, #100	; 0x64
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	3332      	adds	r3, #50	; 0x32
 800515a:	4a87      	ldr	r2, [pc, #540]	; (8005378 <UART_SetConfig+0x38c>)
 800515c:	fba2 2303 	umull	r2, r3, r2, r3
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005168:	441e      	add	r6, r3
 800516a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800516c:	4618      	mov	r0, r3
 800516e:	f04f 0100 	mov.w	r1, #0
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	1894      	adds	r4, r2, r2
 8005178:	623c      	str	r4, [r7, #32]
 800517a:	415b      	adcs	r3, r3
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
 800517e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005182:	1812      	adds	r2, r2, r0
 8005184:	eb41 0303 	adc.w	r3, r1, r3
 8005188:	f04f 0400 	mov.w	r4, #0
 800518c:	f04f 0500 	mov.w	r5, #0
 8005190:	00dd      	lsls	r5, r3, #3
 8005192:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005196:	00d4      	lsls	r4, r2, #3
 8005198:	4622      	mov	r2, r4
 800519a:	462b      	mov	r3, r5
 800519c:	1814      	adds	r4, r2, r0
 800519e:	653c      	str	r4, [r7, #80]	; 0x50
 80051a0:	414b      	adcs	r3, r1
 80051a2:	657b      	str	r3, [r7, #84]	; 0x54
 80051a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	461a      	mov	r2, r3
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	1891      	adds	r1, r2, r2
 80051b0:	61b9      	str	r1, [r7, #24]
 80051b2:	415b      	adcs	r3, r3
 80051b4:	61fb      	str	r3, [r7, #28]
 80051b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80051be:	f7fb f809 	bl	80001d4 <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4b6c      	ldr	r3, [pc, #432]	; (8005378 <UART_SetConfig+0x38c>)
 80051c8:	fba3 1302 	umull	r1, r3, r3, r2
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	2164      	movs	r1, #100	; 0x64
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	3332      	adds	r3, #50	; 0x32
 80051da:	4a67      	ldr	r2, [pc, #412]	; (8005378 <UART_SetConfig+0x38c>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	f003 0207 	and.w	r2, r3, #7
 80051e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4432      	add	r2, r6
 80051ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051ee:	e0b9      	b.n	8005364 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f2:	461c      	mov	r4, r3
 80051f4:	f04f 0500 	mov.w	r5, #0
 80051f8:	4622      	mov	r2, r4
 80051fa:	462b      	mov	r3, r5
 80051fc:	1891      	adds	r1, r2, r2
 80051fe:	6139      	str	r1, [r7, #16]
 8005200:	415b      	adcs	r3, r3
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005208:	1912      	adds	r2, r2, r4
 800520a:	eb45 0303 	adc.w	r3, r5, r3
 800520e:	f04f 0000 	mov.w	r0, #0
 8005212:	f04f 0100 	mov.w	r1, #0
 8005216:	00d9      	lsls	r1, r3, #3
 8005218:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800521c:	00d0      	lsls	r0, r2, #3
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	eb12 0804 	adds.w	r8, r2, r4
 8005226:	eb43 0905 	adc.w	r9, r3, r5
 800522a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4618      	mov	r0, r3
 8005230:	f04f 0100 	mov.w	r1, #0
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	008b      	lsls	r3, r1, #2
 800523e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005242:	0082      	lsls	r2, r0, #2
 8005244:	4640      	mov	r0, r8
 8005246:	4649      	mov	r1, r9
 8005248:	f7fa ffc4 	bl	80001d4 <__aeabi_uldivmod>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4b49      	ldr	r3, [pc, #292]	; (8005378 <UART_SetConfig+0x38c>)
 8005252:	fba3 2302 	umull	r2, r3, r3, r2
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	011e      	lsls	r6, r3, #4
 800525a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800525c:	4618      	mov	r0, r3
 800525e:	f04f 0100 	mov.w	r1, #0
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	1894      	adds	r4, r2, r2
 8005268:	60bc      	str	r4, [r7, #8]
 800526a:	415b      	adcs	r3, r3
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005272:	1812      	adds	r2, r2, r0
 8005274:	eb41 0303 	adc.w	r3, r1, r3
 8005278:	f04f 0400 	mov.w	r4, #0
 800527c:	f04f 0500 	mov.w	r5, #0
 8005280:	00dd      	lsls	r5, r3, #3
 8005282:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005286:	00d4      	lsls	r4, r2, #3
 8005288:	4622      	mov	r2, r4
 800528a:	462b      	mov	r3, r5
 800528c:	1814      	adds	r4, r2, r0
 800528e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005290:	414b      	adcs	r3, r1
 8005292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	4618      	mov	r0, r3
 800529a:	f04f 0100 	mov.w	r1, #0
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	008b      	lsls	r3, r1, #2
 80052a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052ac:	0082      	lsls	r2, r0, #2
 80052ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80052b2:	f7fa ff8f 	bl	80001d4 <__aeabi_uldivmod>
 80052b6:	4602      	mov	r2, r0
 80052b8:	460b      	mov	r3, r1
 80052ba:	4b2f      	ldr	r3, [pc, #188]	; (8005378 <UART_SetConfig+0x38c>)
 80052bc:	fba3 1302 	umull	r1, r3, r3, r2
 80052c0:	095b      	lsrs	r3, r3, #5
 80052c2:	2164      	movs	r1, #100	; 0x64
 80052c4:	fb01 f303 	mul.w	r3, r1, r3
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	3332      	adds	r3, #50	; 0x32
 80052ce:	4a2a      	ldr	r2, [pc, #168]	; (8005378 <UART_SetConfig+0x38c>)
 80052d0:	fba2 2303 	umull	r2, r3, r2, r3
 80052d4:	095b      	lsrs	r3, r3, #5
 80052d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052da:	441e      	add	r6, r3
 80052dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052de:	4618      	mov	r0, r3
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	1894      	adds	r4, r2, r2
 80052ea:	603c      	str	r4, [r7, #0]
 80052ec:	415b      	adcs	r3, r3
 80052ee:	607b      	str	r3, [r7, #4]
 80052f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052f4:	1812      	adds	r2, r2, r0
 80052f6:	eb41 0303 	adc.w	r3, r1, r3
 80052fa:	f04f 0400 	mov.w	r4, #0
 80052fe:	f04f 0500 	mov.w	r5, #0
 8005302:	00dd      	lsls	r5, r3, #3
 8005304:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005308:	00d4      	lsls	r4, r2, #3
 800530a:	4622      	mov	r2, r4
 800530c:	462b      	mov	r3, r5
 800530e:	eb12 0a00 	adds.w	sl, r2, r0
 8005312:	eb43 0b01 	adc.w	fp, r3, r1
 8005316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4618      	mov	r0, r3
 800531c:	f04f 0100 	mov.w	r1, #0
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	008b      	lsls	r3, r1, #2
 800532a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800532e:	0082      	lsls	r2, r0, #2
 8005330:	4650      	mov	r0, sl
 8005332:	4659      	mov	r1, fp
 8005334:	f7fa ff4e 	bl	80001d4 <__aeabi_uldivmod>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <UART_SetConfig+0x38c>)
 800533e:	fba3 1302 	umull	r1, r3, r3, r2
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2164      	movs	r1, #100	; 0x64
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	3332      	adds	r3, #50	; 0x32
 8005350:	4a09      	ldr	r2, [pc, #36]	; (8005378 <UART_SetConfig+0x38c>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	f003 020f 	and.w	r2, r3, #15
 800535c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4432      	add	r2, r6
 8005362:	609a      	str	r2, [r3, #8]
}
 8005364:	bf00      	nop
 8005366:	377c      	adds	r7, #124	; 0x7c
 8005368:	46bd      	mov	sp, r7
 800536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536e:	bf00      	nop
 8005370:	40011000 	.word	0x40011000
 8005374:	40011400 	.word	0x40011400
 8005378:	51eb851f 	.word	0x51eb851f

0800537c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800537c:	b084      	sub	sp, #16
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	f107 001c 	add.w	r0, r7, #28
 800538a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	2b01      	cmp	r3, #1
 8005392:	d122      	bne.n	80053da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d105      	bne.n	80053ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f001 fb1c 	bl	8006a0c <USB_CoreReset>
 80053d4:	4603      	mov	r3, r0
 80053d6:	73fb      	strb	r3, [r7, #15]
 80053d8:	e01a      	b.n	8005410 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f001 fb10 	bl	8006a0c <USB_CoreReset>
 80053ec:	4603      	mov	r3, r0
 80053ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	639a      	str	r2, [r3, #56]	; 0x38
 8005402:	e005      	b.n	8005410 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	2b01      	cmp	r3, #1
 8005414:	d10b      	bne.n	800542e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f043 0206 	orr.w	r2, r3, #6
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f043 0220 	orr.w	r2, r3, #32
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800542e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800543a:	b004      	add	sp, #16
 800543c:	4770      	bx	lr
	...

08005440 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	4613      	mov	r3, r2
 800544c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d165      	bne.n	8005520 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4a41      	ldr	r2, [pc, #260]	; (800555c <USB_SetTurnaroundTime+0x11c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d906      	bls.n	800546a <USB_SetTurnaroundTime+0x2a>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4a40      	ldr	r2, [pc, #256]	; (8005560 <USB_SetTurnaroundTime+0x120>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d202      	bcs.n	800546a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005464:	230f      	movs	r3, #15
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	e062      	b.n	8005530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	4a3c      	ldr	r2, [pc, #240]	; (8005560 <USB_SetTurnaroundTime+0x120>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d306      	bcc.n	8005480 <USB_SetTurnaroundTime+0x40>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4a3b      	ldr	r2, [pc, #236]	; (8005564 <USB_SetTurnaroundTime+0x124>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d202      	bcs.n	8005480 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800547a:	230e      	movs	r3, #14
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	e057      	b.n	8005530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4a38      	ldr	r2, [pc, #224]	; (8005564 <USB_SetTurnaroundTime+0x124>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d306      	bcc.n	8005496 <USB_SetTurnaroundTime+0x56>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4a37      	ldr	r2, [pc, #220]	; (8005568 <USB_SetTurnaroundTime+0x128>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d202      	bcs.n	8005496 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005490:	230d      	movs	r3, #13
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	e04c      	b.n	8005530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4a33      	ldr	r2, [pc, #204]	; (8005568 <USB_SetTurnaroundTime+0x128>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d306      	bcc.n	80054ac <USB_SetTurnaroundTime+0x6c>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	4a32      	ldr	r2, [pc, #200]	; (800556c <USB_SetTurnaroundTime+0x12c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d802      	bhi.n	80054ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054a6:	230c      	movs	r3, #12
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	e041      	b.n	8005530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4a2f      	ldr	r2, [pc, #188]	; (800556c <USB_SetTurnaroundTime+0x12c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d906      	bls.n	80054c2 <USB_SetTurnaroundTime+0x82>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4a2e      	ldr	r2, [pc, #184]	; (8005570 <USB_SetTurnaroundTime+0x130>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d802      	bhi.n	80054c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054bc:	230b      	movs	r3, #11
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	e036      	b.n	8005530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4a2a      	ldr	r2, [pc, #168]	; (8005570 <USB_SetTurnaroundTime+0x130>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d906      	bls.n	80054d8 <USB_SetTurnaroundTime+0x98>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4a29      	ldr	r2, [pc, #164]	; (8005574 <USB_SetTurnaroundTime+0x134>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d802      	bhi.n	80054d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054d2:	230a      	movs	r3, #10
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	e02b      	b.n	8005530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4a26      	ldr	r2, [pc, #152]	; (8005574 <USB_SetTurnaroundTime+0x134>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d906      	bls.n	80054ee <USB_SetTurnaroundTime+0xae>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4a25      	ldr	r2, [pc, #148]	; (8005578 <USB_SetTurnaroundTime+0x138>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d202      	bcs.n	80054ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054e8:	2309      	movs	r3, #9
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	e020      	b.n	8005530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	4a21      	ldr	r2, [pc, #132]	; (8005578 <USB_SetTurnaroundTime+0x138>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d306      	bcc.n	8005504 <USB_SetTurnaroundTime+0xc4>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	4a20      	ldr	r2, [pc, #128]	; (800557c <USB_SetTurnaroundTime+0x13c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d802      	bhi.n	8005504 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054fe:	2308      	movs	r3, #8
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	e015      	b.n	8005530 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4a1d      	ldr	r2, [pc, #116]	; (800557c <USB_SetTurnaroundTime+0x13c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d906      	bls.n	800551a <USB_SetTurnaroundTime+0xda>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4a1c      	ldr	r2, [pc, #112]	; (8005580 <USB_SetTurnaroundTime+0x140>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d202      	bcs.n	800551a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005514:	2307      	movs	r3, #7
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e00a      	b.n	8005530 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800551a:	2306      	movs	r3, #6
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	e007      	b.n	8005530 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d102      	bne.n	800552c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005526:	2309      	movs	r3, #9
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	e001      	b.n	8005530 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800552c:	2309      	movs	r3, #9
 800552e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	029b      	lsls	r3, r3, #10
 8005544:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005548:	431a      	orrs	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	00d8acbf 	.word	0x00d8acbf
 8005560:	00e4e1c0 	.word	0x00e4e1c0
 8005564:	00f42400 	.word	0x00f42400
 8005568:	01067380 	.word	0x01067380
 800556c:	011a499f 	.word	0x011a499f
 8005570:	01312cff 	.word	0x01312cff
 8005574:	014ca43f 	.word	0x014ca43f
 8005578:	016e3600 	.word	0x016e3600
 800557c:	01a6ab1f 	.word	0x01a6ab1f
 8005580:	01e84800 	.word	0x01e84800

08005584 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f043 0201 	orr.w	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f023 0201 	bic.w	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d115      	bne.n	8005616 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055f6:	2001      	movs	r0, #1
 80055f8:	f7fc f8c8 	bl	800178c <HAL_Delay>
      ms++;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3301      	adds	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f001 f972 	bl	80068ec <USB_GetMode>
 8005608:	4603      	mov	r3, r0
 800560a:	2b01      	cmp	r3, #1
 800560c:	d01e      	beq.n	800564c <USB_SetCurrentMode+0x84>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b31      	cmp	r3, #49	; 0x31
 8005612:	d9f0      	bls.n	80055f6 <USB_SetCurrentMode+0x2e>
 8005614:	e01a      	b.n	800564c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d115      	bne.n	8005648 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005628:	2001      	movs	r0, #1
 800562a:	f7fc f8af 	bl	800178c <HAL_Delay>
      ms++;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3301      	adds	r3, #1
 8005632:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f001 f959 	bl	80068ec <USB_GetMode>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <USB_SetCurrentMode+0x84>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b31      	cmp	r3, #49	; 0x31
 8005644:	d9f0      	bls.n	8005628 <USB_SetCurrentMode+0x60>
 8005646:	e001      	b.n	800564c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e005      	b.n	8005658 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b32      	cmp	r3, #50	; 0x32
 8005650:	d101      	bne.n	8005656 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005660:	b084      	sub	sp, #16
 8005662:	b580      	push	{r7, lr}
 8005664:	b086      	sub	sp, #24
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800566e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800567a:	2300      	movs	r3, #0
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	e009      	b.n	8005694 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	3340      	adds	r3, #64	; 0x40
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	2200      	movs	r2, #0
 800568c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	3301      	adds	r3, #1
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b0e      	cmp	r3, #14
 8005698:	d9f2      	bls.n	8005680 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800569a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d11c      	bne.n	80056da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ae:	f043 0302 	orr.w	r3, r3, #2
 80056b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	639a      	str	r2, [r3, #56]	; 0x38
 80056d8:	e00b      	b.n	80056f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056f8:	461a      	mov	r2, r3
 80056fa:	2300      	movs	r3, #0
 80056fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005704:	4619      	mov	r1, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570c:	461a      	mov	r2, r3
 800570e:	680b      	ldr	r3, [r1, #0]
 8005710:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	2b01      	cmp	r3, #1
 8005716:	d10c      	bne.n	8005732 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800571e:	2100      	movs	r1, #0
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f945 	bl	80059b0 <USB_SetDevSpeed>
 8005726:	e008      	b.n	800573a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005728:	2101      	movs	r1, #1
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f940 	bl	80059b0 <USB_SetDevSpeed>
 8005730:	e003      	b.n	800573a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005732:	2103      	movs	r1, #3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f93b 	bl	80059b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800573a:	2110      	movs	r1, #16
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f8f3 	bl	8005928 <USB_FlushTxFifo>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f90f 	bl	8005970 <USB_FlushRxFifo>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	461a      	mov	r2, r3
 8005764:	2300      	movs	r3, #0
 8005766:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576e:	461a      	mov	r2, r3
 8005770:	2300      	movs	r3, #0
 8005772:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577a:	461a      	mov	r2, r3
 800577c:	2300      	movs	r3, #0
 800577e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005780:	2300      	movs	r3, #0
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	e043      	b.n	800580e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800579c:	d118      	bne.n	80057d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	461a      	mov	r2, r3
 80057b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	e013      	b.n	80057e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c6:	461a      	mov	r2, r3
 80057c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	e008      	b.n	80057e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057dc:	461a      	mov	r2, r3
 80057de:	2300      	movs	r3, #0
 80057e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ee:	461a      	mov	r2, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	461a      	mov	r2, r3
 8005802:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005806:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	3301      	adds	r3, #1
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	429a      	cmp	r2, r3
 8005814:	d3b7      	bcc.n	8005786 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005816:	2300      	movs	r3, #0
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	e043      	b.n	80058a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800582e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005832:	d118      	bne.n	8005866 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005846:	461a      	mov	r2, r3
 8005848:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e013      	b.n	8005878 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585c:	461a      	mov	r2, r3
 800585e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	e008      	b.n	8005878 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005872:	461a      	mov	r2, r3
 8005874:	2300      	movs	r3, #0
 8005876:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005884:	461a      	mov	r2, r3
 8005886:	2300      	movs	r3, #0
 8005888:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005896:	461a      	mov	r2, r3
 8005898:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800589c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3301      	adds	r3, #1
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d3b7      	bcc.n	800581c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	f043 0210 	orr.w	r2, r3, #16
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699a      	ldr	r2, [r3, #24]
 80058e4:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <USB_DevInit+0x2c4>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d005      	beq.n	80058fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f043 0208 	orr.w	r2, r3, #8
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005900:	2b01      	cmp	r3, #1
 8005902:	d107      	bne.n	8005914 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800590c:	f043 0304 	orr.w	r3, r3, #4
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005914:	7dfb      	ldrb	r3, [r7, #23]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005920:	b004      	add	sp, #16
 8005922:	4770      	bx	lr
 8005924:	803c3800 	.word	0x803c3800

08005928 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	019b      	lsls	r3, r3, #6
 800593a:	f043 0220 	orr.w	r2, r3, #32
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3301      	adds	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	4a08      	ldr	r2, [pc, #32]	; (800596c <USB_FlushTxFifo+0x44>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d901      	bls.n	8005952 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e006      	b.n	8005960 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0320 	and.w	r3, r3, #32
 800595a:	2b20      	cmp	r3, #32
 800595c:	d0f1      	beq.n	8005942 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	00030d40 	.word	0x00030d40

08005970 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2210      	movs	r2, #16
 8005980:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3301      	adds	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	4a08      	ldr	r2, [pc, #32]	; (80059ac <USB_FlushRxFifo+0x3c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d901      	bls.n	8005992 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e006      	b.n	80059a0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2b10      	cmp	r3, #16
 800599c:	d0f1      	beq.n	8005982 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	00030d40 	.word	0x00030d40

080059b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	68f9      	ldr	r1, [r7, #12]
 80059cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059d0:	4313      	orrs	r3, r2
 80059d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b087      	sub	sp, #28
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 0306 	and.w	r3, r3, #6
 80059fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d102      	bne.n	8005a08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a02:	2300      	movs	r3, #0
 8005a04:	75fb      	strb	r3, [r7, #23]
 8005a06:	e00a      	b.n	8005a1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d002      	beq.n	8005a14 <USB_GetDevSpeed+0x32>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b06      	cmp	r3, #6
 8005a12:	d102      	bne.n	8005a1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a14:	2302      	movs	r3, #2
 8005a16:	75fb      	strb	r3, [r7, #23]
 8005a18:	e001      	b.n	8005a1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a1a:	230f      	movs	r3, #15
 8005a1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	785b      	ldrb	r3, [r3, #1]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d13a      	bne.n	8005abe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	2101      	movs	r1, #1
 8005a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	68f9      	ldr	r1, [r7, #12]
 8005a62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a66:	4313      	orrs	r3, r2
 8005a68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d155      	bne.n	8005b2c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	78db      	ldrb	r3, [r3, #3]
 8005a9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	059b      	lsls	r3, r3, #22
 8005aa2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	e036      	b.n	8005b2c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac4:	69da      	ldr	r2, [r3, #28]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	2101      	movs	r1, #1
 8005ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad4:	041b      	lsls	r3, r3, #16
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d11a      	bne.n	8005b2c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	78db      	ldrb	r3, [r3, #3]
 8005b10:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b12:	430b      	orrs	r3, r1
 8005b14:	4313      	orrs	r3, r2
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	785b      	ldrb	r3, [r3, #1]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d161      	bne.n	8005c1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b6e:	d11f      	bne.n	8005bb0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b8e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005baa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	68f9      	ldr	r1, [r7, #12]
 8005bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	2101      	movs	r1, #1
 8005be6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	43db      	mvns	r3, r3
 8005bee:	68f9      	ldr	r1, [r7, #12]
 8005bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	0159      	lsls	r1, r3, #5
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	440b      	add	r3, r1
 8005c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c12:	4619      	mov	r1, r3
 8005c14:	4b35      	ldr	r3, [pc, #212]	; (8005cec <USB_DeactivateEndpoint+0x1b0>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]
 8005c1a:	e060      	b.n	8005cde <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c32:	d11f      	bne.n	8005c74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	2101      	movs	r1, #1
 8005c86:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8a:	041b      	lsls	r3, r3, #16
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c94:	4013      	ands	r3, r2
 8005c96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9e:	69da      	ldr	r2, [r3, #28]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	2101      	movs	r1, #1
 8005caa:	fa01 f303 	lsl.w	r3, r1, r3
 8005cae:	041b      	lsls	r3, r3, #16
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	68f9      	ldr	r1, [r7, #12]
 8005cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb8:	4013      	ands	r3, r2
 8005cba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	0159      	lsls	r1, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	440b      	add	r3, r1
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <USB_DeactivateEndpoint+0x1b4>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	ec337800 	.word	0xec337800
 8005cf0:	eff37800 	.word	0xeff37800

08005cf4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	f040 815c 	bne.w	8005fce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d132      	bne.n	8005d84 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	69fa      	ldr	r2, [r7, #28]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7c:	0cdb      	lsrs	r3, r3, #19
 8005d7e:	04db      	lsls	r3, r3, #19
 8005d80:	6113      	str	r3, [r2, #16]
 8005d82:	e074      	b.n	8005e6e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9e:	0cdb      	lsrs	r3, r3, #19
 8005da0:	04db      	lsls	r3, r3, #19
 8005da2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	6959      	ldr	r1, [r3, #20]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	440b      	add	r3, r1
 8005de0:	1e59      	subs	r1, r3, #1
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dec:	4b9d      	ldr	r3, [pc, #628]	; (8006064 <USB_EPStartXfer+0x370>)
 8005dee:	400b      	ands	r3, r1
 8005df0:	69b9      	ldr	r1, [r7, #24]
 8005df2:	0148      	lsls	r0, r1, #5
 8005df4:	69f9      	ldr	r1, [r7, #28]
 8005df6:	4401      	add	r1, r0
 8005df8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e16:	69b9      	ldr	r1, [r7, #24]
 8005e18:	0148      	lsls	r0, r1, #5
 8005e1a:	69f9      	ldr	r1, [r7, #28]
 8005e1c:	4401      	add	r1, r0
 8005e1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e22:	4313      	orrs	r3, r2
 8005e24:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	78db      	ldrb	r3, [r3, #3]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d11f      	bne.n	8005e6e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e48:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e4c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e6c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d14b      	bne.n	8005f0c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d009      	beq.n	8005e90 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	461a      	mov	r2, r3
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	78db      	ldrb	r3, [r3, #3]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d128      	bne.n	8005eea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d110      	bne.n	8005eca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	0151      	lsls	r1, r2, #5
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	e00f      	b.n	8005eea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	0151      	lsls	r1, r2, #5
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	440a      	add	r2, r1
 8005ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	e12f      	b.n	800616c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f2a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	78db      	ldrb	r3, [r3, #3]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d015      	beq.n	8005f60 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 8117 	beq.w	800616c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	2101      	movs	r1, #1
 8005f50:	fa01 f303 	lsl.w	r3, r1, r3
 8005f54:	69f9      	ldr	r1, [r7, #28]
 8005f56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	634b      	str	r3, [r1, #52]	; 0x34
 8005f5e:	e105      	b.n	800616c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d110      	bne.n	8005f92 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	e00f      	b.n	8005fb2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	68d9      	ldr	r1, [r3, #12]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	b298      	uxth	r0, r3
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fa2b 	bl	8006422 <USB_WritePacket>
 8005fcc:	e0ce      	b.n	800616c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	0151      	lsls	r1, r2, #5
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe8:	0cdb      	lsrs	r3, r3, #19
 8005fea:	04db      	lsls	r3, r3, #19
 8005fec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	0151      	lsls	r1, r2, #5
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	440a      	add	r2, r1
 8006004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006008:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800600c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006010:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d126      	bne.n	8006068 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006030:	69b9      	ldr	r1, [r7, #24]
 8006032:	0148      	lsls	r0, r1, #5
 8006034:	69f9      	ldr	r1, [r7, #28]
 8006036:	4401      	add	r1, r0
 8006038:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800603c:	4313      	orrs	r3, r2
 800603e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	440a      	add	r2, r1
 8006056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800605a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800605e:	6113      	str	r3, [r2, #16]
 8006060:	e036      	b.n	80060d0 <USB_EPStartXfer+0x3dc>
 8006062:	bf00      	nop
 8006064:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	695a      	ldr	r2, [r3, #20]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	4413      	add	r3, r2
 8006072:	1e5a      	subs	r2, r3, #1
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	fbb2 f3f3 	udiv	r3, r2, r3
 800607c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	8afb      	ldrh	r3, [r7, #22]
 800608e:	04d9      	lsls	r1, r3, #19
 8006090:	4b39      	ldr	r3, [pc, #228]	; (8006178 <USB_EPStartXfer+0x484>)
 8006092:	400b      	ands	r3, r1
 8006094:	69b9      	ldr	r1, [r7, #24]
 8006096:	0148      	lsls	r0, r1, #5
 8006098:	69f9      	ldr	r1, [r7, #28]
 800609a:	4401      	add	r1, r0
 800609c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060a0:	4313      	orrs	r3, r2
 80060a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b0:	691a      	ldr	r2, [r3, #16]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	8af9      	ldrh	r1, [r7, #22]
 80060b8:	fb01 f303 	mul.w	r3, r1, r3
 80060bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060c0:	69b9      	ldr	r1, [r7, #24]
 80060c2:	0148      	lsls	r0, r1, #5
 80060c4:	69f9      	ldr	r1, [r7, #28]
 80060c6:	4401      	add	r1, r0
 80060c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060cc:	4313      	orrs	r3, r2
 80060ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d10d      	bne.n	80060f2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	68d9      	ldr	r1, [r3, #12]
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ee:	460a      	mov	r2, r1
 80060f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	78db      	ldrb	r3, [r3, #3]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d128      	bne.n	800614c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d110      	bne.n	800612c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	0151      	lsls	r1, r2, #5
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	440a      	add	r2, r1
 8006120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e00f      	b.n	800614c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800614a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006166:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800616a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	1ff80000 	.word	0x1ff80000

0800617c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	785b      	ldrb	r3, [r3, #1]
 8006198:	2b01      	cmp	r3, #1
 800619a:	f040 80cd 	bne.w	8006338 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d132      	bne.n	800620c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006204:	0cdb      	lsrs	r3, r3, #19
 8006206:	04db      	lsls	r3, r3, #19
 8006208:	6113      	str	r3, [r2, #16]
 800620a:	e04e      	b.n	80062aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	440a      	add	r2, r1
 8006222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006226:	0cdb      	lsrs	r3, r3, #19
 8006228:	04db      	lsls	r3, r3, #19
 800622a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	440a      	add	r2, r1
 8006242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006246:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800624a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800624e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	429a      	cmp	r2, r3
 800625a:	d903      	bls.n	8006264 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	440a      	add	r2, r1
 800627a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006282:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629a:	6939      	ldr	r1, [r7, #16]
 800629c:	0148      	lsls	r0, r1, #5
 800629e:	6979      	ldr	r1, [r7, #20]
 80062a0:	4401      	add	r1, r0
 80062a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062a6:	4313      	orrs	r3, r2
 80062a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d11e      	bne.n	80062ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d009      	beq.n	80062cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c4:	461a      	mov	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	0151      	lsls	r1, r2, #5
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	440a      	add	r2, r1
 80062e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	e092      	b.n	8006414 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	440a      	add	r2, r1
 8006304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006308:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800630c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d07e      	beq.n	8006414 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	f003 030f 	and.w	r3, r3, #15
 8006326:	2101      	movs	r1, #1
 8006328:	fa01 f303 	lsl.w	r3, r1, r3
 800632c:	6979      	ldr	r1, [r7, #20]
 800632e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006332:	4313      	orrs	r3, r2
 8006334:	634b      	str	r3, [r1, #52]	; 0x34
 8006336:	e06d      	b.n	8006414 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006352:	0cdb      	lsrs	r3, r3, #19
 8006354:	04db      	lsls	r3, r3, #19
 8006356:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	0151      	lsls	r1, r2, #5
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	440a      	add	r2, r1
 800636e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006372:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006376:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800637a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	0151      	lsls	r1, r2, #5
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	440a      	add	r2, r1
 80063a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063c2:	6939      	ldr	r1, [r7, #16]
 80063c4:	0148      	lsls	r0, r1, #5
 80063c6:	6979      	ldr	r1, [r7, #20]
 80063c8:	4401      	add	r1, r0
 80063ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063ce:	4313      	orrs	r3, r2
 80063d0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80063d2:	79fb      	ldrb	r3, [r7, #7]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d10d      	bne.n	80063f4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d009      	beq.n	80063f4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	68d9      	ldr	r1, [r3, #12]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f0:	460a      	mov	r2, r1
 80063f2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	0151      	lsls	r1, r2, #5
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	440a      	add	r2, r1
 800640a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800640e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006412:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	371c      	adds	r7, #28
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006422:	b480      	push	{r7}
 8006424:	b089      	sub	sp, #36	; 0x24
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	4611      	mov	r1, r2
 800642e:	461a      	mov	r2, r3
 8006430:	460b      	mov	r3, r1
 8006432:	71fb      	strb	r3, [r7, #7]
 8006434:	4613      	mov	r3, r2
 8006436:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006440:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006444:	2b00      	cmp	r3, #0
 8006446:	d123      	bne.n	8006490 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006448:	88bb      	ldrh	r3, [r7, #4]
 800644a:	3303      	adds	r3, #3
 800644c:	089b      	lsrs	r3, r3, #2
 800644e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006450:	2300      	movs	r3, #0
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	e018      	b.n	8006488 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	031a      	lsls	r2, r3, #12
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	4413      	add	r3, r2
 800645e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006462:	461a      	mov	r2, r3
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6013      	str	r3, [r2, #0]
      pSrc++;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	3301      	adds	r3, #1
 800646e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	3301      	adds	r3, #1
 8006474:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	3301      	adds	r3, #1
 800647a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	3301      	adds	r3, #1
 8006480:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	3301      	adds	r3, #1
 8006486:	61bb      	str	r3, [r7, #24]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	429a      	cmp	r2, r3
 800648e:	d3e2      	bcc.n	8006456 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3724      	adds	r7, #36	; 0x24
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800649e:	b480      	push	{r7}
 80064a0:	b08b      	sub	sp, #44	; 0x2c
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	4613      	mov	r3, r2
 80064aa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	089b      	lsrs	r3, r3, #2
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064c4:	2300      	movs	r3, #0
 80064c6:	623b      	str	r3, [r7, #32]
 80064c8:	e014      	b.n	80064f4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	601a      	str	r2, [r3, #0]
    pDest++;
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	3301      	adds	r3, #1
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	3301      	adds	r3, #1
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	3301      	adds	r3, #1
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	3301      	adds	r3, #1
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	3301      	adds	r3, #1
 80064f2:	623b      	str	r3, [r7, #32]
 80064f4:	6a3a      	ldr	r2, [r7, #32]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d3e6      	bcc.n	80064ca <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064fc:	8bfb      	ldrh	r3, [r7, #30]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d01e      	beq.n	8006540 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650c:	461a      	mov	r2, r3
 800650e:	f107 0310 	add.w	r3, r7, #16
 8006512:	6812      	ldr	r2, [r2, #0]
 8006514:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	fa22 f303 	lsr.w	r3, r2, r3
 8006522:	b2da      	uxtb	r2, r3
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	701a      	strb	r2, [r3, #0]
      i++;
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	3301      	adds	r3, #1
 800652c:	623b      	str	r3, [r7, #32]
      pDest++;
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	3301      	adds	r3, #1
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006534:	8bfb      	ldrh	r3, [r7, #30]
 8006536:	3b01      	subs	r3, #1
 8006538:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800653a:	8bfb      	ldrh	r3, [r7, #30]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1ea      	bne.n	8006516 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006542:	4618      	mov	r0, r3
 8006544:	372c      	adds	r7, #44	; 0x2c
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800654e:	b480      	push	{r7}
 8006550:	b085      	sub	sp, #20
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	785b      	ldrb	r3, [r3, #1]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d12c      	bne.n	80065c4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	db12      	blt.n	80065a2 <USB_EPSetStall+0x54>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00f      	beq.n	80065a2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	440a      	add	r2, r1
 8006598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800659c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065a0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	e02b      	b.n	800661c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	db12      	blt.n	80065fc <USB_EPSetStall+0xae>
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00f      	beq.n	80065fc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065fa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800661a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	785b      	ldrb	r3, [r3, #1]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d128      	bne.n	8006698 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006660:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006664:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	78db      	ldrb	r3, [r3, #3]
 800666a:	2b03      	cmp	r3, #3
 800666c:	d003      	beq.n	8006676 <USB_EPClearStall+0x4c>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	78db      	ldrb	r3, [r3, #3]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d138      	bne.n	80066e8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	e027      	b.n	80066e8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	0151      	lsls	r1, r2, #5
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	440a      	add	r2, r1
 80066ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	78db      	ldrb	r3, [r3, #3]
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d003      	beq.n	80066c8 <USB_EPClearStall+0x9e>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	78db      	ldrb	r3, [r3, #3]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d10f      	bne.n	80066e8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006714:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006718:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	78fb      	ldrb	r3, [r7, #3]
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006730:	4313      	orrs	r3, r2
 8006732:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006742:	b480      	push	{r7}
 8006744:	b085      	sub	sp, #20
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800675c:	f023 0303 	bic.w	r3, r3, #3
 8006760:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006770:	f023 0302 	bic.w	r3, r3, #2
 8006774:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800679e:	f023 0303 	bic.w	r3, r3, #3
 80067a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067b2:	f043 0302 	orr.w	r3, r3, #2
 80067b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4013      	ands	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067de:	68fb      	ldr	r3, [r7, #12]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	4013      	ands	r3, r2
 800680e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	0c1b      	lsrs	r3, r3, #16
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	4013      	ands	r3, r2
 8006842:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	b29b      	uxth	r3, r3
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	4013      	ands	r3, r2
 8006880:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006882:	68bb      	ldr	r3, [r7, #8]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	fa22 f303 	lsr.w	r3, r2, r3
 80068c0:	01db      	lsls	r3, r3, #7
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4013      	ands	r3, r2
 80068dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068de:	68bb      	ldr	r3, [r7, #8]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	371c      	adds	r7, #28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f003 0301 	and.w	r3, r3, #1
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006922:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006926:	f023 0307 	bic.w	r3, r3, #7
 800692a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800693a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800693e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
	...

08006950 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	460b      	mov	r3, r1
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	333c      	adds	r3, #60	; 0x3c
 8006966:	3304      	adds	r3, #4
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	4a26      	ldr	r2, [pc, #152]	; (8006a08 <USB_EP0_OutStart+0xb8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d90a      	bls.n	800698a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006980:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006984:	d101      	bne.n	800698a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	e037      	b.n	80069fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	461a      	mov	r2, r3
 8006992:	2300      	movs	r3, #0
 8006994:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b8:	f043 0318 	orr.w	r3, r3, #24
 80069bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80069d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069d2:	7afb      	ldrb	r3, [r7, #11]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d10f      	bne.n	80069f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	4f54300a 	.word	0x4f54300a

08006a0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	4a13      	ldr	r2, [pc, #76]	; (8006a6c <USB_CoreReset+0x60>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d901      	bls.n	8006a28 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e01a      	b.n	8006a5e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	daf3      	bge.n	8006a18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f043 0201 	orr.w	r2, r3, #1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3301      	adds	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	4a09      	ldr	r2, [pc, #36]	; (8006a6c <USB_CoreReset+0x60>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d901      	bls.n	8006a50 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e006      	b.n	8006a5e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d0f1      	beq.n	8006a40 <USB_CoreReset+0x34>

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	00030d40 	.word	0x00030d40

08006a70 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006a7c:	2010      	movs	r0, #16
 8006a7e:	f001 fef7 	bl	8008870 <USBD_static_malloc>
 8006a82:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d105      	bne.n	8006a96 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a92:	2302      	movs	r3, #2
 8006a94:	e01b      	b.n	8006ace <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	7c1b      	ldrb	r3, [r3, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d103      	bne.n	8006aae <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2207      	movs	r2, #7
 8006aaa:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006aac:	e002      	b.n	8006ab4 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	220a      	movs	r2, #10
 8006ab2:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	2181      	movs	r1, #129	; 0x81
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 fdc7 	bl	800864e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006ae2:	2181      	movs	r1, #129	; 0x81
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 fdd8 	bl	800869a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d009      	beq.n	8006b14 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b06:	4618      	mov	r0, r3
 8006b08:	f001 fec0 	bl	800888c <USBD_static_free>
    pdev->pClassData = NULL;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b30:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e0e8      	b.n	8006d16 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d046      	beq.n	8006bde <USBD_HID_Setup+0xbe>
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	f040 80d8 	bne.w	8006d06 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	3b02      	subs	r3, #2
 8006b5c:	2b09      	cmp	r3, #9
 8006b5e:	d836      	bhi.n	8006bce <USBD_HID_Setup+0xae>
 8006b60:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <USBD_HID_Setup+0x48>)
 8006b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b66:	bf00      	nop
 8006b68:	08006bbf 	.word	0x08006bbf
 8006b6c:	08006b9f 	.word	0x08006b9f
 8006b70:	08006bcf 	.word	0x08006bcf
 8006b74:	08006bcf 	.word	0x08006bcf
 8006b78:	08006bcf 	.word	0x08006bcf
 8006b7c:	08006bcf 	.word	0x08006bcf
 8006b80:	08006bcf 	.word	0x08006bcf
 8006b84:	08006bcf 	.word	0x08006bcf
 8006b88:	08006bad 	.word	0x08006bad
 8006b8c:	08006b91 	.word	0x08006b91
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	885b      	ldrh	r3, [r3, #2]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	601a      	str	r2, [r3, #0]
          break;
 8006b9c:	e01e      	b.n	8006bdc <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f9fa 	bl	8007f9e <USBD_CtlSendData>
          break;
 8006baa:	e017      	b.n	8006bdc <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	885b      	ldrh	r3, [r3, #2]
 8006bb0:	0a1b      	lsrs	r3, r3, #8
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	605a      	str	r2, [r3, #4]
          break;
 8006bbc:	e00e      	b.n	8006bdc <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f001 f9e9 	bl	8007f9e <USBD_CtlSendData>
          break;
 8006bcc:	e006      	b.n	8006bdc <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 f973 	bl	8007ebc <USBD_CtlError>
          ret = USBD_FAIL;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8006bda:	bf00      	nop
      }
      break;
 8006bdc:	e09a      	b.n	8006d14 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	785b      	ldrb	r3, [r3, #1]
 8006be2:	2b0b      	cmp	r3, #11
 8006be4:	f200 8086 	bhi.w	8006cf4 <USBD_HID_Setup+0x1d4>
 8006be8:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <USBD_HID_Setup+0xd0>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006c21 	.word	0x08006c21
 8006bf4:	08006d03 	.word	0x08006d03
 8006bf8:	08006cf5 	.word	0x08006cf5
 8006bfc:	08006cf5 	.word	0x08006cf5
 8006c00:	08006cf5 	.word	0x08006cf5
 8006c04:	08006cf5 	.word	0x08006cf5
 8006c08:	08006c4b 	.word	0x08006c4b
 8006c0c:	08006cf5 	.word	0x08006cf5
 8006c10:	08006cf5 	.word	0x08006cf5
 8006c14:	08006cf5 	.word	0x08006cf5
 8006c18:	08006ca3 	.word	0x08006ca3
 8006c1c:	08006ccd 	.word	0x08006ccd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d107      	bne.n	8006c3c <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c2c:	f107 030a 	add.w	r3, r7, #10
 8006c30:	2202      	movs	r2, #2
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 f9b2 	bl	8007f9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c3a:	e063      	b.n	8006d04 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 f93c 	bl	8007ebc <USBD_CtlError>
            ret = USBD_FAIL;
 8006c44:	2303      	movs	r3, #3
 8006c46:	75fb      	strb	r3, [r7, #23]
          break;
 8006c48:	e05c      	b.n	8006d04 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	885b      	ldrh	r3, [r3, #2]
 8006c4e:	0a1b      	lsrs	r3, r3, #8
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b22      	cmp	r3, #34	; 0x22
 8006c54:	d108      	bne.n	8006c68 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	88db      	ldrh	r3, [r3, #6]
 8006c5a:	2b2d      	cmp	r3, #45	; 0x2d
 8006c5c:	bf28      	it	cs
 8006c5e:	232d      	movcs	r3, #45	; 0x2d
 8006c60:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006c62:	4b2f      	ldr	r3, [pc, #188]	; (8006d20 <USBD_HID_Setup+0x200>)
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	e015      	b.n	8006c94 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	885b      	ldrh	r3, [r3, #2]
 8006c6c:	0a1b      	lsrs	r3, r3, #8
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b21      	cmp	r3, #33	; 0x21
 8006c72:	d108      	bne.n	8006c86 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8006c74:	4b2b      	ldr	r3, [pc, #172]	; (8006d24 <USBD_HID_Setup+0x204>)
 8006c76:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	88db      	ldrh	r3, [r3, #6]
 8006c7c:	2b09      	cmp	r3, #9
 8006c7e:	bf28      	it	cs
 8006c80:	2309      	movcs	r3, #9
 8006c82:	82bb      	strh	r3, [r7, #20]
 8006c84:	e006      	b.n	8006c94 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 f917 	bl	8007ebc <USBD_CtlError>
            ret = USBD_FAIL;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	75fb      	strb	r3, [r7, #23]
            break;
 8006c92:	e037      	b.n	8006d04 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c94:	8abb      	ldrh	r3, [r7, #20]
 8006c96:	461a      	mov	r2, r3
 8006c98:	6939      	ldr	r1, [r7, #16]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 f97f 	bl	8007f9e <USBD_CtlSendData>
          break;
 8006ca0:	e030      	b.n	8006d04 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d107      	bne.n	8006cbe <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 f971 	bl	8007f9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cbc:	e022      	b.n	8006d04 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 f8fb 	bl	8007ebc <USBD_CtlError>
            ret = USBD_FAIL;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cca:	e01b      	b.n	8006d04 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d106      	bne.n	8006ce6 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	885b      	ldrh	r3, [r3, #2]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	461a      	mov	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ce4:	e00e      	b.n	8006d04 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 f8e7 	bl	8007ebc <USBD_CtlError>
            ret = USBD_FAIL;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8006cf2:	e007      	b.n	8006d04 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 f8e0 	bl	8007ebc <USBD_CtlError>
          ret = USBD_FAIL;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	75fb      	strb	r3, [r7, #23]
          break;
 8006d00:	e000      	b.n	8006d04 <USBD_HID_Setup+0x1e4>
          break;
 8006d02:	bf00      	nop
      }
      break;
 8006d04:	e006      	b.n	8006d14 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 f8d7 	bl	8007ebc <USBD_CtlError>
      ret = USBD_FAIL;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	75fb      	strb	r3, [r7, #23]
      break;
 8006d12:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	200000d8 	.word	0x200000d8
 8006d24:	200000c0 	.word	0x200000c0

08006d28 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2222      	movs	r2, #34	; 0x22
 8006d34:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8006d36:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	20000054 	.word	0x20000054

08006d48 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2222      	movs	r2, #34	; 0x22
 8006d54:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8006d56:	4b03      	ldr	r3, [pc, #12]	; (8006d64 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	20000078 	.word	0x20000078

08006d68 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2222      	movs	r2, #34	; 0x22
 8006d74:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8006d76:	4b03      	ldr	r3, [pc, #12]	; (8006d84 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	2000009c 	.word	0x2000009c

08006d88 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	220a      	movs	r2, #10
 8006db8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006dba:	4b03      	ldr	r3, [pc, #12]	; (8006dc8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	200000cc 	.word	0x200000cc

08006dcc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e01f      	b.n	8006e24 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	79fa      	ldrb	r2, [r7, #7]
 8006e16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f001 fbb1 	bl	8008580 <USBD_LL_Init>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e016      	b.n	8006e72 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00b      	beq.n	8006e70 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	f107 020e 	add.w	r2, r7, #14
 8006e64:	4610      	mov	r0, r2
 8006e66:	4798      	blx	r3
 8006e68:	4602      	mov	r2, r0
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 fbc8 	bl	8008618 <USBD_LL_Start>
 8006e88:	4603      	mov	r3, r0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	78fa      	ldrb	r2, [r7, #3]
 8006ecc:	4611      	mov	r1, r2
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d007      	beq.n	8006f06 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	78fa      	ldrb	r2, [r7, #3]
 8006f00:	4611      	mov	r1, r2
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
  }

  return USBD_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 ff90 	bl	8007e48 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006f36:	461a      	mov	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d01a      	beq.n	8006f82 <USBD_LL_SetupStage+0x72>
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d822      	bhi.n	8006f96 <USBD_LL_SetupStage+0x86>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <USBD_LL_SetupStage+0x4a>
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d00a      	beq.n	8006f6e <USBD_LL_SetupStage+0x5e>
 8006f58:	e01d      	b.n	8006f96 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fa62 	bl	800742c <USBD_StdDevReq>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6c:	e020      	b.n	8006fb0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fac6 	bl	8007508 <USBD_StdItfReq>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f80:	e016      	b.n	8006fb0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fb05 	bl	800759a <USBD_StdEPReq>
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]
      break;
 8006f94:	e00c      	b.n	8006fb0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f001 fb97 	bl	80086d8 <USBD_LL_StallEP>
 8006faa:	4603      	mov	r3, r0
 8006fac:	73fb      	strb	r3, [r7, #15]
      break;
 8006fae:	bf00      	nop
  }

  return ret;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b086      	sub	sp, #24
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	607a      	str	r2, [r7, #4]
 8006fc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006fc8:	7afb      	ldrb	r3, [r7, #11]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d138      	bne.n	8007040 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006fd4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d14a      	bne.n	8007076 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d913      	bls.n	8007014 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	1ad2      	subs	r2, r2, r3
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	4293      	cmp	r3, r2
 8007004:	bf28      	it	cs
 8007006:	4613      	movcs	r3, r2
 8007008:	461a      	mov	r2, r3
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 fff2 	bl	8007ff6 <USBD_CtlContinueRx>
 8007012:	e030      	b.n	8007076 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b03      	cmp	r3, #3
 800701e:	d10b      	bne.n	8007038 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 ffed 	bl	8008018 <USBD_CtlSendStatus>
 800703e:	e01a      	b.n	8007076 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b03      	cmp	r3, #3
 800704a:	d114      	bne.n	8007076 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00e      	beq.n	8007076 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	7afa      	ldrb	r2, [r7, #11]
 8007062:	4611      	mov	r1, r2
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	4798      	blx	r3
 8007068:	4603      	mov	r3, r0
 800706a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800706c:	7dfb      	ldrb	r3, [r7, #23]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	e000      	b.n	8007078 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	460b      	mov	r3, r1
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800708e:	7afb      	ldrb	r3, [r7, #11]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d16b      	bne.n	800716c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3314      	adds	r3, #20
 8007098:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d156      	bne.n	8007152 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d914      	bls.n	80070da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	1ad2      	subs	r2, r2, r3
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	461a      	mov	r2, r3
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 ff84 	bl	8007fd4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070cc:	2300      	movs	r3, #0
 80070ce:	2200      	movs	r2, #0
 80070d0:	2100      	movs	r1, #0
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f001 fbaa 	bl	800882c <USBD_LL_PrepareReceive>
 80070d8:	e03b      	b.n	8007152 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d11c      	bne.n	8007120 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d316      	bcc.n	8007120 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d20f      	bcs.n	8007120 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007100:	2200      	movs	r2, #0
 8007102:	2100      	movs	r1, #0
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 ff65 	bl	8007fd4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007112:	2300      	movs	r3, #0
 8007114:	2200      	movs	r2, #0
 8007116:	2100      	movs	r1, #0
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f001 fb87 	bl	800882c <USBD_LL_PrepareReceive>
 800711e:	e018      	b.n	8007152 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b03      	cmp	r3, #3
 800712a:	d10b      	bne.n	8007144 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007144:	2180      	movs	r1, #128	; 0x80
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f001 fac6 	bl	80086d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 ff76 	bl	800803e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007158:	2b01      	cmp	r3, #1
 800715a:	d122      	bne.n	80071a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff fe98 	bl	8006e92 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800716a:	e01a      	b.n	80071a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b03      	cmp	r3, #3
 8007176:	d114      	bne.n	80071a2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00e      	beq.n	80071a2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	7afa      	ldrb	r2, [r7, #11]
 800718e:	4611      	mov	r1, r2
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	4798      	blx	r3
 8007194:	4603      	mov	r3, r0
 8007196:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007198:	7dfb      	ldrb	r3, [r7, #23]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	e000      	b.n	80071a4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80071dc:	2303      	movs	r3, #3
 80071de:	e02f      	b.n	8007240 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00f      	beq.n	800720a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6852      	ldr	r2, [r2, #4]
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	4611      	mov	r1, r2
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800720a:	2340      	movs	r3, #64	; 0x40
 800720c:	2200      	movs	r2, #0
 800720e:	2100      	movs	r1, #0
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 fa1c 	bl	800864e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2240      	movs	r2, #64	; 0x40
 8007222:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007226:	2340      	movs	r3, #64	; 0x40
 8007228:	2200      	movs	r2, #0
 800722a:	2180      	movs	r1, #128	; 0x80
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 fa0e 	bl	800864e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2240      	movs	r2, #64	; 0x40
 800723c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	78fa      	ldrb	r2, [r7, #3]
 8007258:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007276:	b2da      	uxtb	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2204      	movs	r2, #4
 8007282:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d106      	bne.n	80072b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e012      	b.n	8007300 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d10b      	bne.n	80072fe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d005      	beq.n	80072fe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800731e:	2303      	movs	r3, #3
 8007320:	e014      	b.n	800734c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b03      	cmp	r3, #3
 800732c:	d10d      	bne.n	800734a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d007      	beq.n	800734a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	78fa      	ldrb	r2, [r7, #3]
 8007344:	4611      	mov	r1, r2
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800736a:	2303      	movs	r3, #3
 800736c:	e014      	b.n	8007398 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b03      	cmp	r3, #3
 8007378:	d10d      	bne.n	8007396 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	d007      	beq.n	8007396 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	78fa      	ldrb	r2, [r7, #3]
 8007390:	4611      	mov	r1, r2
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b082      	sub	sp, #8
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d009      	beq.n	80073e4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6852      	ldr	r2, [r2, #4]
 80073dc:	b2d2      	uxtb	r2, r2
 80073de:	4611      	mov	r1, r2
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
  }

  return USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b087      	sub	sp, #28
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	3301      	adds	r3, #1
 8007404:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800740c:	8a3b      	ldrh	r3, [r7, #16]
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	b21a      	sxth	r2, r3
 8007412:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007416:	4313      	orrs	r3, r2
 8007418:	b21b      	sxth	r3, r3
 800741a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800741c:	89fb      	ldrh	r3, [r7, #14]
}
 800741e:	4618      	mov	r0, r3
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
	...

0800742c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d005      	beq.n	8007452 <USBD_StdDevReq+0x26>
 8007446:	2b40      	cmp	r3, #64	; 0x40
 8007448:	d853      	bhi.n	80074f2 <USBD_StdDevReq+0xc6>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <USBD_StdDevReq+0x3a>
 800744e:	2b20      	cmp	r3, #32
 8007450:	d14f      	bne.n	80074f2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4798      	blx	r3
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]
      break;
 8007464:	e04a      	b.n	80074fc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	785b      	ldrb	r3, [r3, #1]
 800746a:	2b09      	cmp	r3, #9
 800746c:	d83b      	bhi.n	80074e6 <USBD_StdDevReq+0xba>
 800746e:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <USBD_StdDevReq+0x48>)
 8007470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007474:	080074c9 	.word	0x080074c9
 8007478:	080074dd 	.word	0x080074dd
 800747c:	080074e7 	.word	0x080074e7
 8007480:	080074d3 	.word	0x080074d3
 8007484:	080074e7 	.word	0x080074e7
 8007488:	080074a7 	.word	0x080074a7
 800748c:	0800749d 	.word	0x0800749d
 8007490:	080074e7 	.word	0x080074e7
 8007494:	080074bf 	.word	0x080074bf
 8007498:	080074b1 	.word	0x080074b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f9de 	bl	8007860 <USBD_GetDescriptor>
          break;
 80074a4:	e024      	b.n	80074f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fb43 	bl	8007b34 <USBD_SetAddress>
          break;
 80074ae:	e01f      	b.n	80074f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fb82 	bl	8007bbc <USBD_SetConfig>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73fb      	strb	r3, [r7, #15]
          break;
 80074bc:	e018      	b.n	80074f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fc21 	bl	8007d08 <USBD_GetConfig>
          break;
 80074c6:	e013      	b.n	80074f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fc52 	bl	8007d74 <USBD_GetStatus>
          break;
 80074d0:	e00e      	b.n	80074f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fc81 	bl	8007ddc <USBD_SetFeature>
          break;
 80074da:	e009      	b.n	80074f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fc90 	bl	8007e04 <USBD_ClrFeature>
          break;
 80074e4:	e004      	b.n	80074f0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fce7 	bl	8007ebc <USBD_CtlError>
          break;
 80074ee:	bf00      	nop
      }
      break;
 80074f0:	e004      	b.n	80074fc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fce1 	bl	8007ebc <USBD_CtlError>
      break;
 80074fa:	bf00      	nop
  }

  return ret;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop

08007508 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800751e:	2b40      	cmp	r3, #64	; 0x40
 8007520:	d005      	beq.n	800752e <USBD_StdItfReq+0x26>
 8007522:	2b40      	cmp	r3, #64	; 0x40
 8007524:	d82f      	bhi.n	8007586 <USBD_StdItfReq+0x7e>
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <USBD_StdItfReq+0x26>
 800752a:	2b20      	cmp	r3, #32
 800752c:	d12b      	bne.n	8007586 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007534:	b2db      	uxtb	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	2b02      	cmp	r3, #2
 800753a:	d81d      	bhi.n	8007578 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	889b      	ldrh	r3, [r3, #4]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b01      	cmp	r3, #1
 8007544:	d813      	bhi.n	800756e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	4798      	blx	r3
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	88db      	ldrh	r3, [r3, #6]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d110      	bne.n	8007582 <USBD_StdItfReq+0x7a>
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10d      	bne.n	8007582 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fd56 	bl	8008018 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800756c:	e009      	b.n	8007582 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fca3 	bl	8007ebc <USBD_CtlError>
          break;
 8007576:	e004      	b.n	8007582 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fc9e 	bl	8007ebc <USBD_CtlError>
          break;
 8007580:	e000      	b.n	8007584 <USBD_StdItfReq+0x7c>
          break;
 8007582:	bf00      	nop
      }
      break;
 8007584:	e004      	b.n	8007590 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fc97 	bl	8007ebc <USBD_CtlError>
      break;
 800758e:	bf00      	nop
  }

  return ret;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	889b      	ldrh	r3, [r3, #4]
 80075ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075b6:	2b40      	cmp	r3, #64	; 0x40
 80075b8:	d007      	beq.n	80075ca <USBD_StdEPReq+0x30>
 80075ba:	2b40      	cmp	r3, #64	; 0x40
 80075bc:	f200 8145 	bhi.w	800784a <USBD_StdEPReq+0x2b0>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00c      	beq.n	80075de <USBD_StdEPReq+0x44>
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	f040 8140 	bne.w	800784a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	4798      	blx	r3
 80075d8:	4603      	mov	r3, r0
 80075da:	73fb      	strb	r3, [r7, #15]
      break;
 80075dc:	e13a      	b.n	8007854 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d007      	beq.n	80075f6 <USBD_StdEPReq+0x5c>
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	f300 8129 	bgt.w	800783e <USBD_StdEPReq+0x2a4>
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d07f      	beq.n	80076f0 <USBD_StdEPReq+0x156>
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d03c      	beq.n	800766e <USBD_StdEPReq+0xd4>
 80075f4:	e123      	b.n	800783e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d002      	beq.n	8007608 <USBD_StdEPReq+0x6e>
 8007602:	2b03      	cmp	r3, #3
 8007604:	d016      	beq.n	8007634 <USBD_StdEPReq+0x9a>
 8007606:	e02c      	b.n	8007662 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00d      	beq.n	800762a <USBD_StdEPReq+0x90>
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	2b80      	cmp	r3, #128	; 0x80
 8007612:	d00a      	beq.n	800762a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 f85d 	bl	80086d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800761e:	2180      	movs	r1, #128	; 0x80
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 f859 	bl	80086d8 <USBD_LL_StallEP>
 8007626:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007628:	e020      	b.n	800766c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fc45 	bl	8007ebc <USBD_CtlError>
              break;
 8007632:	e01b      	b.n	800766c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	885b      	ldrh	r3, [r3, #2]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10e      	bne.n	800765a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00b      	beq.n	800765a <USBD_StdEPReq+0xc0>
 8007642:	7bbb      	ldrb	r3, [r7, #14]
 8007644:	2b80      	cmp	r3, #128	; 0x80
 8007646:	d008      	beq.n	800765a <USBD_StdEPReq+0xc0>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	88db      	ldrh	r3, [r3, #6]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d104      	bne.n	800765a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007650:	7bbb      	ldrb	r3, [r7, #14]
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 f83f 	bl	80086d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fcdc 	bl	8008018 <USBD_CtlSendStatus>

              break;
 8007660:	e004      	b.n	800766c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fc29 	bl	8007ebc <USBD_CtlError>
              break;
 800766a:	bf00      	nop
          }
          break;
 800766c:	e0ec      	b.n	8007848 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d002      	beq.n	8007680 <USBD_StdEPReq+0xe6>
 800767a:	2b03      	cmp	r3, #3
 800767c:	d016      	beq.n	80076ac <USBD_StdEPReq+0x112>
 800767e:	e030      	b.n	80076e2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00d      	beq.n	80076a2 <USBD_StdEPReq+0x108>
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	2b80      	cmp	r3, #128	; 0x80
 800768a:	d00a      	beq.n	80076a2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 f821 	bl	80086d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007696:	2180      	movs	r1, #128	; 0x80
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 f81d 	bl	80086d8 <USBD_LL_StallEP>
 800769e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076a0:	e025      	b.n	80076ee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fc09 	bl	8007ebc <USBD_CtlError>
              break;
 80076aa:	e020      	b.n	80076ee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	885b      	ldrh	r3, [r3, #2]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d11b      	bne.n	80076ec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d004      	beq.n	80076c8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 f827 	bl	8008716 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fca5 	bl	8008018 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	4798      	blx	r3
 80076dc:	4603      	mov	r3, r0
 80076de:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80076e0:	e004      	b.n	80076ec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fbe9 	bl	8007ebc <USBD_CtlError>
              break;
 80076ea:	e000      	b.n	80076ee <USBD_StdEPReq+0x154>
              break;
 80076ec:	bf00      	nop
          }
          break;
 80076ee:	e0ab      	b.n	8007848 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d002      	beq.n	8007702 <USBD_StdEPReq+0x168>
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d032      	beq.n	8007766 <USBD_StdEPReq+0x1cc>
 8007700:	e097      	b.n	8007832 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d007      	beq.n	8007718 <USBD_StdEPReq+0x17e>
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	2b80      	cmp	r3, #128	; 0x80
 800770c:	d004      	beq.n	8007718 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fbd3 	bl	8007ebc <USBD_CtlError>
                break;
 8007716:	e091      	b.n	800783c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800771c:	2b00      	cmp	r3, #0
 800771e:	da0b      	bge.n	8007738 <USBD_StdEPReq+0x19e>
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007726:	4613      	mov	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	3310      	adds	r3, #16
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	4413      	add	r3, r2
 8007734:	3304      	adds	r3, #4
 8007736:	e00b      	b.n	8007750 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007738:	7bbb      	ldrb	r3, [r7, #14]
 800773a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	4413      	add	r3, r2
 800774e:	3304      	adds	r3, #4
 8007750:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2200      	movs	r2, #0
 8007756:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2202      	movs	r2, #2
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fc1d 	bl	8007f9e <USBD_CtlSendData>
              break;
 8007764:	e06a      	b.n	800783c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007766:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800776a:	2b00      	cmp	r3, #0
 800776c:	da11      	bge.n	8007792 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800776e:	7bbb      	ldrb	r3, [r7, #14]
 8007770:	f003 020f 	and.w	r2, r3, #15
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	3324      	adds	r3, #36	; 0x24
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d117      	bne.n	80077b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fb96 	bl	8007ebc <USBD_CtlError>
                  break;
 8007790:	e054      	b.n	800783c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	f003 020f 	and.w	r2, r3, #15
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	440b      	add	r3, r1
 80077a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d104      	bne.n	80077b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fb83 	bl	8007ebc <USBD_CtlError>
                  break;
 80077b6:	e041      	b.n	800783c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	da0b      	bge.n	80077d8 <USBD_StdEPReq+0x23e>
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077c6:	4613      	mov	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	3310      	adds	r3, #16
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	4413      	add	r3, r2
 80077d4:	3304      	adds	r3, #4
 80077d6:	e00b      	b.n	80077f0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	4413      	add	r3, r2
 80077ee:	3304      	adds	r3, #4
 80077f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <USBD_StdEPReq+0x264>
 80077f8:	7bbb      	ldrb	r3, [r7, #14]
 80077fa:	2b80      	cmp	r3, #128	; 0x80
 80077fc:	d103      	bne.n	8007806 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2200      	movs	r2, #0
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	e00e      	b.n	8007824 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 ffa2 	bl	8008754 <USBD_LL_IsStallEP>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2201      	movs	r2, #1
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	e002      	b.n	8007824 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2202      	movs	r2, #2
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fbb7 	bl	8007f9e <USBD_CtlSendData>
              break;
 8007830:	e004      	b.n	800783c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fb41 	bl	8007ebc <USBD_CtlError>
              break;
 800783a:	bf00      	nop
          }
          break;
 800783c:	e004      	b.n	8007848 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fb3b 	bl	8007ebc <USBD_CtlError>
          break;
 8007846:	bf00      	nop
      }
      break;
 8007848:	e004      	b.n	8007854 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fb35 	bl	8007ebc <USBD_CtlError>
      break;
 8007852:	bf00      	nop
  }

  return ret;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
	...

08007860 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	885b      	ldrh	r3, [r3, #2]
 800787a:	0a1b      	lsrs	r3, r3, #8
 800787c:	b29b      	uxth	r3, r3
 800787e:	3b01      	subs	r3, #1
 8007880:	2b06      	cmp	r3, #6
 8007882:	f200 8128 	bhi.w	8007ad6 <USBD_GetDescriptor+0x276>
 8007886:	a201      	add	r2, pc, #4	; (adr r2, 800788c <USBD_GetDescriptor+0x2c>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	080078a9 	.word	0x080078a9
 8007890:	080078c1 	.word	0x080078c1
 8007894:	08007901 	.word	0x08007901
 8007898:	08007ad7 	.word	0x08007ad7
 800789c:	08007ad7 	.word	0x08007ad7
 80078a0:	08007a77 	.word	0x08007a77
 80078a4:	08007aa3 	.word	0x08007aa3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	7c12      	ldrb	r2, [r2, #16]
 80078b4:	f107 0108 	add.w	r1, r7, #8
 80078b8:	4610      	mov	r0, r2
 80078ba:	4798      	blx	r3
 80078bc:	60f8      	str	r0, [r7, #12]
      break;
 80078be:	e112      	b.n	8007ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	7c1b      	ldrb	r3, [r3, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10d      	bne.n	80078e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d0:	f107 0208 	add.w	r2, r7, #8
 80078d4:	4610      	mov	r0, r2
 80078d6:	4798      	blx	r3
 80078d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3301      	adds	r3, #1
 80078de:	2202      	movs	r2, #2
 80078e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078e2:	e100      	b.n	8007ae6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ec:	f107 0208 	add.w	r2, r7, #8
 80078f0:	4610      	mov	r0, r2
 80078f2:	4798      	blx	r3
 80078f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3301      	adds	r3, #1
 80078fa:	2202      	movs	r2, #2
 80078fc:	701a      	strb	r2, [r3, #0]
      break;
 80078fe:	e0f2      	b.n	8007ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	885b      	ldrh	r3, [r3, #2]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b05      	cmp	r3, #5
 8007908:	f200 80ac 	bhi.w	8007a64 <USBD_GetDescriptor+0x204>
 800790c:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <USBD_GetDescriptor+0xb4>)
 800790e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007912:	bf00      	nop
 8007914:	0800792d 	.word	0x0800792d
 8007918:	08007961 	.word	0x08007961
 800791c:	08007995 	.word	0x08007995
 8007920:	080079c9 	.word	0x080079c9
 8007924:	080079fd 	.word	0x080079fd
 8007928:	08007a31 	.word	0x08007a31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00b      	beq.n	8007950 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	7c12      	ldrb	r2, [r2, #16]
 8007944:	f107 0108 	add.w	r1, r7, #8
 8007948:	4610      	mov	r0, r2
 800794a:	4798      	blx	r3
 800794c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800794e:	e091      	b.n	8007a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fab2 	bl	8007ebc <USBD_CtlError>
            err++;
 8007958:	7afb      	ldrb	r3, [r7, #11]
 800795a:	3301      	adds	r3, #1
 800795c:	72fb      	strb	r3, [r7, #11]
          break;
 800795e:	e089      	b.n	8007a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	7c12      	ldrb	r2, [r2, #16]
 8007978:	f107 0108 	add.w	r1, r7, #8
 800797c:	4610      	mov	r0, r2
 800797e:	4798      	blx	r3
 8007980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007982:	e077      	b.n	8007a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fa98 	bl	8007ebc <USBD_CtlError>
            err++;
 800798c:	7afb      	ldrb	r3, [r7, #11]
 800798e:	3301      	adds	r3, #1
 8007990:	72fb      	strb	r3, [r7, #11]
          break;
 8007992:	e06f      	b.n	8007a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00b      	beq.n	80079b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	7c12      	ldrb	r2, [r2, #16]
 80079ac:	f107 0108 	add.w	r1, r7, #8
 80079b0:	4610      	mov	r0, r2
 80079b2:	4798      	blx	r3
 80079b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079b6:	e05d      	b.n	8007a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fa7e 	bl	8007ebc <USBD_CtlError>
            err++;
 80079c0:	7afb      	ldrb	r3, [r7, #11]
 80079c2:	3301      	adds	r3, #1
 80079c4:	72fb      	strb	r3, [r7, #11]
          break;
 80079c6:	e055      	b.n	8007a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00b      	beq.n	80079ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	7c12      	ldrb	r2, [r2, #16]
 80079e0:	f107 0108 	add.w	r1, r7, #8
 80079e4:	4610      	mov	r0, r2
 80079e6:	4798      	blx	r3
 80079e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ea:	e043      	b.n	8007a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fa64 	bl	8007ebc <USBD_CtlError>
            err++;
 80079f4:	7afb      	ldrb	r3, [r7, #11]
 80079f6:	3301      	adds	r3, #1
 80079f8:	72fb      	strb	r3, [r7, #11]
          break;
 80079fa:	e03b      	b.n	8007a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00b      	beq.n	8007a20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	7c12      	ldrb	r2, [r2, #16]
 8007a14:	f107 0108 	add.w	r1, r7, #8
 8007a18:	4610      	mov	r0, r2
 8007a1a:	4798      	blx	r3
 8007a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a1e:	e029      	b.n	8007a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa4a 	bl	8007ebc <USBD_CtlError>
            err++;
 8007a28:	7afb      	ldrb	r3, [r7, #11]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a2e:	e021      	b.n	8007a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00b      	beq.n	8007a54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	7c12      	ldrb	r2, [r2, #16]
 8007a48:	f107 0108 	add.w	r1, r7, #8
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4798      	blx	r3
 8007a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a52:	e00f      	b.n	8007a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa30 	bl	8007ebc <USBD_CtlError>
            err++;
 8007a5c:	7afb      	ldrb	r3, [r7, #11]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	72fb      	strb	r3, [r7, #11]
          break;
 8007a62:	e007      	b.n	8007a74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa28 	bl	8007ebc <USBD_CtlError>
          err++;
 8007a6c:	7afb      	ldrb	r3, [r7, #11]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007a72:	bf00      	nop
      }
      break;
 8007a74:	e037      	b.n	8007ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	7c1b      	ldrb	r3, [r3, #16]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d109      	bne.n	8007a92 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a86:	f107 0208 	add.w	r2, r7, #8
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	4798      	blx	r3
 8007a8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a90:	e029      	b.n	8007ae6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fa11 	bl	8007ebc <USBD_CtlError>
        err++;
 8007a9a:	7afb      	ldrb	r3, [r7, #11]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	72fb      	strb	r3, [r7, #11]
      break;
 8007aa0:	e021      	b.n	8007ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	7c1b      	ldrb	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10d      	bne.n	8007ac6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab2:	f107 0208 	add.w	r2, r7, #8
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	4798      	blx	r3
 8007aba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	2207      	movs	r2, #7
 8007ac2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ac4:	e00f      	b.n	8007ae6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f9f7 	bl	8007ebc <USBD_CtlError>
        err++;
 8007ace:	7afb      	ldrb	r3, [r7, #11]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ad4:	e007      	b.n	8007ae6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f9ef 	bl	8007ebc <USBD_CtlError>
      err++;
 8007ade:	7afb      	ldrb	r3, [r7, #11]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ae4:	bf00      	nop
  }

  if (err != 0U)
 8007ae6:	7afb      	ldrb	r3, [r7, #11]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d11e      	bne.n	8007b2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	88db      	ldrh	r3, [r3, #6]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d016      	beq.n	8007b22 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007af4:	893b      	ldrh	r3, [r7, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00e      	beq.n	8007b18 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	88da      	ldrh	r2, [r3, #6]
 8007afe:	893b      	ldrh	r3, [r7, #8]
 8007b00:	4293      	cmp	r3, r2
 8007b02:	bf28      	it	cs
 8007b04:	4613      	movcs	r3, r2
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b0a:	893b      	ldrh	r3, [r7, #8]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	68f9      	ldr	r1, [r7, #12]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fa44 	bl	8007f9e <USBD_CtlSendData>
 8007b16:	e009      	b.n	8007b2c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f9ce 	bl	8007ebc <USBD_CtlError>
 8007b20:	e004      	b.n	8007b2c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fa78 	bl	8008018 <USBD_CtlSendStatus>
 8007b28:	e000      	b.n	8007b2c <USBD_GetDescriptor+0x2cc>
    return;
 8007b2a:	bf00      	nop
  }
}
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop

08007b34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	889b      	ldrh	r3, [r3, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d131      	bne.n	8007baa <USBD_SetAddress+0x76>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	88db      	ldrh	r3, [r3, #6]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d12d      	bne.n	8007baa <USBD_SetAddress+0x76>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	885b      	ldrh	r3, [r3, #2]
 8007b52:	2b7f      	cmp	r3, #127	; 0x7f
 8007b54:	d829      	bhi.n	8007baa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	885b      	ldrh	r3, [r3, #2]
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d104      	bne.n	8007b78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f9a3 	bl	8007ebc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b76:	e01d      	b.n	8007bb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	7bfa      	ldrb	r2, [r7, #15]
 8007b7c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fe11 	bl	80087ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fa44 	bl	8008018 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b9e:	e009      	b.n	8007bb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba8:	e004      	b.n	8007bb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f985 	bl	8007ebc <USBD_CtlError>
  }
}
 8007bb2:	bf00      	nop
 8007bb4:	bf00      	nop
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	885b      	ldrh	r3, [r3, #2]
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	4b4c      	ldr	r3, [pc, #304]	; (8007d04 <USBD_SetConfig+0x148>)
 8007bd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007bd4:	4b4b      	ldr	r3, [pc, #300]	; (8007d04 <USBD_SetConfig+0x148>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d905      	bls.n	8007be8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f96c 	bl	8007ebc <USBD_CtlError>
    return USBD_FAIL;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e088      	b.n	8007cfa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d002      	beq.n	8007bfa <USBD_SetConfig+0x3e>
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d025      	beq.n	8007c44 <USBD_SetConfig+0x88>
 8007bf8:	e071      	b.n	8007cde <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007bfa:	4b42      	ldr	r3, [pc, #264]	; (8007d04 <USBD_SetConfig+0x148>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d01c      	beq.n	8007c3c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007c02:	4b40      	ldr	r3, [pc, #256]	; (8007d04 <USBD_SetConfig+0x148>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c0c:	4b3d      	ldr	r3, [pc, #244]	; (8007d04 <USBD_SetConfig+0x148>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7ff f948 	bl	8006ea8 <USBD_SetClassConfig>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d004      	beq.n	8007c2c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f949 	bl	8007ebc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c2a:	e065      	b.n	8007cf8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f9f3 	bl	8008018 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2203      	movs	r2, #3
 8007c36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c3a:	e05d      	b.n	8007cf8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f9eb 	bl	8008018 <USBD_CtlSendStatus>
      break;
 8007c42:	e059      	b.n	8007cf8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c44:	4b2f      	ldr	r3, [pc, #188]	; (8007d04 <USBD_SetConfig+0x148>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d112      	bne.n	8007c72 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c54:	4b2b      	ldr	r3, [pc, #172]	; (8007d04 <USBD_SetConfig+0x148>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c5e:	4b29      	ldr	r3, [pc, #164]	; (8007d04 <USBD_SetConfig+0x148>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff f93b 	bl	8006ee0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f9d4 	bl	8008018 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c70:	e042      	b.n	8007cf8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007c72:	4b24      	ldr	r3, [pc, #144]	; (8007d04 <USBD_SetConfig+0x148>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d02a      	beq.n	8007cd6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7ff f929 	bl	8006ee0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c8e:	4b1d      	ldr	r3, [pc, #116]	; (8007d04 <USBD_SetConfig+0x148>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c98:	4b1a      	ldr	r3, [pc, #104]	; (8007d04 <USBD_SetConfig+0x148>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff f902 	bl	8006ea8 <USBD_SetClassConfig>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00f      	beq.n	8007cce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f903 	bl	8007ebc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7ff f90e 	bl	8006ee0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ccc:	e014      	b.n	8007cf8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f9a2 	bl	8008018 <USBD_CtlSendStatus>
      break;
 8007cd4:	e010      	b.n	8007cf8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f99e 	bl	8008018 <USBD_CtlSendStatus>
      break;
 8007cdc:	e00c      	b.n	8007cf8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f8eb 	bl	8007ebc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ce6:	4b07      	ldr	r3, [pc, #28]	; (8007d04 <USBD_SetConfig+0x148>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff f8f7 	bl	8006ee0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf6:	bf00      	nop
  }

  return ret;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000730 	.word	0x20000730

08007d08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	88db      	ldrh	r3, [r3, #6]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d004      	beq.n	8007d24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f8cd 	bl	8007ebc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d22:	e023      	b.n	8007d6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	dc02      	bgt.n	8007d36 <USBD_GetConfig+0x2e>
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	dc03      	bgt.n	8007d3c <USBD_GetConfig+0x34>
 8007d34:	e015      	b.n	8007d62 <USBD_GetConfig+0x5a>
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d00b      	beq.n	8007d52 <USBD_GetConfig+0x4a>
 8007d3a:	e012      	b.n	8007d62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3308      	adds	r3, #8
 8007d46:	2201      	movs	r2, #1
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f927 	bl	8007f9e <USBD_CtlSendData>
        break;
 8007d50:	e00c      	b.n	8007d6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3304      	adds	r3, #4
 8007d56:	2201      	movs	r2, #1
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f91f 	bl	8007f9e <USBD_CtlSendData>
        break;
 8007d60:	e004      	b.n	8007d6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f8a9 	bl	8007ebc <USBD_CtlError>
        break;
 8007d6a:	bf00      	nop
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	3b01      	subs	r3, #1
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d81e      	bhi.n	8007dca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	88db      	ldrh	r3, [r3, #6]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d004      	beq.n	8007d9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f890 	bl	8007ebc <USBD_CtlError>
        break;
 8007d9c:	e01a      	b.n	8007dd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d005      	beq.n	8007dba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f043 0202 	orr.w	r2, r3, #2
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	330c      	adds	r3, #12
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f8eb 	bl	8007f9e <USBD_CtlSendData>
      break;
 8007dc8:	e004      	b.n	8007dd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f875 	bl	8007ebc <USBD_CtlError>
      break;
 8007dd2:	bf00      	nop
  }
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	885b      	ldrh	r3, [r3, #2]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d106      	bne.n	8007dfc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f90e 	bl	8008018 <USBD_CtlSendStatus>
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	3b01      	subs	r3, #1
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d80b      	bhi.n	8007e34 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	885b      	ldrh	r3, [r3, #2]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d10c      	bne.n	8007e3e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f8f3 	bl	8008018 <USBD_CtlSendStatus>
      }
      break;
 8007e32:	e004      	b.n	8007e3e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f840 	bl	8007ebc <USBD_CtlError>
      break;
 8007e3c:	e000      	b.n	8007e40 <USBD_ClrFeature+0x3c>
      break;
 8007e3e:	bf00      	nop
  }
}
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	781a      	ldrb	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3301      	adds	r3, #1
 8007e62:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	781a      	ldrb	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f7ff fabb 	bl	80073ee <SWAPBYTE>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3301      	adds	r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f7ff faae 	bl	80073ee <SWAPBYTE>
 8007e92:	4603      	mov	r3, r0
 8007e94:	461a      	mov	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f7ff faa1 	bl	80073ee <SWAPBYTE>
 8007eac:	4603      	mov	r3, r0
 8007eae:	461a      	mov	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	80da      	strh	r2, [r3, #6]
}
 8007eb4:	bf00      	nop
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ec6:	2180      	movs	r1, #128	; 0x80
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fc05 	bl	80086d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ece:	2100      	movs	r1, #0
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fc01 	bl	80086d8 <USBD_LL_StallEP>
}
 8007ed6:	bf00      	nop
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b086      	sub	sp, #24
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d036      	beq.n	8007f62 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ef8:	6938      	ldr	r0, [r7, #16]
 8007efa:	f000 f836 	bl	8007f6a <USBD_GetLen>
 8007efe:	4603      	mov	r3, r0
 8007f00:	3301      	adds	r3, #1
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	4413      	add	r3, r2
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	7812      	ldrb	r2, [r2, #0]
 8007f16:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	4413      	add	r3, r2
 8007f24:	2203      	movs	r2, #3
 8007f26:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f2e:	e013      	b.n	8007f58 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f30:	7dfb      	ldrb	r3, [r7, #23]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	4413      	add	r3, r2
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	7812      	ldrb	r2, [r2, #0]
 8007f3a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	613b      	str	r3, [r7, #16]
    idx++;
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	3301      	adds	r3, #1
 8007f46:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	2200      	movs	r2, #0
 8007f50:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	3301      	adds	r3, #1
 8007f56:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e7      	bne.n	8007f30 <USBD_GetString+0x52>
 8007f60:	e000      	b.n	8007f64 <USBD_GetString+0x86>
    return;
 8007f62:	bf00      	nop
  }
}
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f7a:	e005      	b.n	8007f88 <USBD_GetLen+0x1e>
  {
    len++;
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	3301      	adds	r3, #1
 8007f86:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1f5      	bne.n	8007f7c <USBD_GetLen+0x12>
  }

  return len;
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b084      	sub	sp, #16
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2202      	movs	r2, #2
 8007fae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 fc10 	bl	80087ea <USBD_LL_Transmit>

  return USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 fbff 	bl	80087ea <USBD_LL_Transmit>

  return USBD_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	2100      	movs	r1, #0
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 fc0f 	bl	800882c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2204      	movs	r2, #4
 8008024:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008028:	2300      	movs	r3, #0
 800802a:	2200      	movs	r2, #0
 800802c:	2100      	movs	r1, #0
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fbdb 	bl	80087ea <USBD_LL_Transmit>

  return USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2205      	movs	r2, #5
 800804a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800804e:	2300      	movs	r3, #0
 8008050:	2200      	movs	r2, #0
 8008052:	2100      	movs	r1, #0
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fbe9 	bl	800882c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008068:	2200      	movs	r2, #0
 800806a:	490e      	ldr	r1, [pc, #56]	; (80080a4 <MX_USB_DEVICE_Init+0x40>)
 800806c:	480e      	ldr	r0, [pc, #56]	; (80080a8 <MX_USB_DEVICE_Init+0x44>)
 800806e:	f7fe fead 	bl	8006dcc <USBD_Init>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008078:	f7f8 fdf4 	bl	8000c64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800807c:	490b      	ldr	r1, [pc, #44]	; (80080ac <MX_USB_DEVICE_Init+0x48>)
 800807e:	480a      	ldr	r0, [pc, #40]	; (80080a8 <MX_USB_DEVICE_Init+0x44>)
 8008080:	f7fe fed4 	bl	8006e2c <USBD_RegisterClass>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800808a:	f7f8 fdeb 	bl	8000c64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800808e:	4806      	ldr	r0, [pc, #24]	; (80080a8 <MX_USB_DEVICE_Init+0x44>)
 8008090:	f7fe fef3 	bl	8006e7a <USBD_Start>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800809a:	f7f8 fde3 	bl	8000c64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800809e:	bf00      	nop
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20000108 	.word	0x20000108
 80080a8:	20000960 	.word	0x20000960
 80080ac:	2000001c 	.word	0x2000001c

080080b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	6039      	str	r1, [r7, #0]
 80080ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2212      	movs	r2, #18
 80080c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080c2:	4b03      	ldr	r3, [pc, #12]	; (80080d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	20000124 	.word	0x20000124

080080d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	6039      	str	r1, [r7, #0]
 80080de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2204      	movs	r2, #4
 80080e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080e6:	4b03      	ldr	r3, [pc, #12]	; (80080f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	20000138 	.word	0x20000138

080080f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	6039      	str	r1, [r7, #0]
 8008102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d105      	bne.n	8008116 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	4907      	ldr	r1, [pc, #28]	; (800812c <USBD_FS_ProductStrDescriptor+0x34>)
 800810e:	4808      	ldr	r0, [pc, #32]	; (8008130 <USBD_FS_ProductStrDescriptor+0x38>)
 8008110:	f7ff fee5 	bl	8007ede <USBD_GetString>
 8008114:	e004      	b.n	8008120 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	4904      	ldr	r1, [pc, #16]	; (800812c <USBD_FS_ProductStrDescriptor+0x34>)
 800811a:	4805      	ldr	r0, [pc, #20]	; (8008130 <USBD_FS_ProductStrDescriptor+0x38>)
 800811c:	f7ff fedf 	bl	8007ede <USBD_GetString>
  }
  return USBD_StrDesc;
 8008120:	4b02      	ldr	r3, [pc, #8]	; (800812c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20000c30 	.word	0x20000c30
 8008130:	08008968 	.word	0x08008968

08008134 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	4904      	ldr	r1, [pc, #16]	; (8008154 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008144:	4804      	ldr	r0, [pc, #16]	; (8008158 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008146:	f7ff feca 	bl	8007ede <USBD_GetString>
  return USBD_StrDesc;
 800814a:	4b02      	ldr	r3, [pc, #8]	; (8008154 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20000c30 	.word	0x20000c30
 8008158:	08008980 	.word	0x08008980

0800815c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	4603      	mov	r3, r0
 8008164:	6039      	str	r1, [r7, #0]
 8008166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	221a      	movs	r2, #26
 800816c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800816e:	f000 f843 	bl	80081f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008172:	4b02      	ldr	r3, [pc, #8]	; (800817c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	2000013c 	.word	0x2000013c

08008180 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	6039      	str	r1, [r7, #0]
 800818a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d105      	bne.n	800819e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	4907      	ldr	r1, [pc, #28]	; (80081b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008196:	4808      	ldr	r0, [pc, #32]	; (80081b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008198:	f7ff fea1 	bl	8007ede <USBD_GetString>
 800819c:	e004      	b.n	80081a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	4904      	ldr	r1, [pc, #16]	; (80081b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081a2:	4805      	ldr	r0, [pc, #20]	; (80081b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081a4:	f7ff fe9b 	bl	8007ede <USBD_GetString>
  }
  return USBD_StrDesc;
 80081a8:	4b02      	ldr	r3, [pc, #8]	; (80081b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20000c30 	.word	0x20000c30
 80081b8:	08008994 	.word	0x08008994

080081bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d105      	bne.n	80081da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	4907      	ldr	r1, [pc, #28]	; (80081f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081d2:	4808      	ldr	r0, [pc, #32]	; (80081f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081d4:	f7ff fe83 	bl	8007ede <USBD_GetString>
 80081d8:	e004      	b.n	80081e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	4904      	ldr	r1, [pc, #16]	; (80081f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081de:	4805      	ldr	r0, [pc, #20]	; (80081f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081e0:	f7ff fe7d 	bl	8007ede <USBD_GetString>
  }
  return USBD_StrDesc;
 80081e4:	4b02      	ldr	r3, [pc, #8]	; (80081f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	20000c30 	.word	0x20000c30
 80081f4:	080089a0 	.word	0x080089a0

080081f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081fe:	4b0f      	ldr	r3, [pc, #60]	; (800823c <Get_SerialNum+0x44>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008204:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <Get_SerialNum+0x48>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800820a:	4b0e      	ldr	r3, [pc, #56]	; (8008244 <Get_SerialNum+0x4c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4413      	add	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d009      	beq.n	8008232 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800821e:	2208      	movs	r2, #8
 8008220:	4909      	ldr	r1, [pc, #36]	; (8008248 <Get_SerialNum+0x50>)
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 f814 	bl	8008250 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008228:	2204      	movs	r2, #4
 800822a:	4908      	ldr	r1, [pc, #32]	; (800824c <Get_SerialNum+0x54>)
 800822c:	68b8      	ldr	r0, [r7, #8]
 800822e:	f000 f80f 	bl	8008250 <IntToUnicode>
  }
}
 8008232:	bf00      	nop
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	1fff7a10 	.word	0x1fff7a10
 8008240:	1fff7a14 	.word	0x1fff7a14
 8008244:	1fff7a18 	.word	0x1fff7a18
 8008248:	2000013e 	.word	0x2000013e
 800824c:	2000014e 	.word	0x2000014e

08008250 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	4613      	mov	r3, r2
 800825c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008262:	2300      	movs	r3, #0
 8008264:	75fb      	strb	r3, [r7, #23]
 8008266:	e027      	b.n	80082b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	0f1b      	lsrs	r3, r3, #28
 800826c:	2b09      	cmp	r3, #9
 800826e:	d80b      	bhi.n	8008288 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	0f1b      	lsrs	r3, r3, #28
 8008274:	b2da      	uxtb	r2, r3
 8008276:	7dfb      	ldrb	r3, [r7, #23]
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	4619      	mov	r1, r3
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	440b      	add	r3, r1
 8008280:	3230      	adds	r2, #48	; 0x30
 8008282:	b2d2      	uxtb	r2, r2
 8008284:	701a      	strb	r2, [r3, #0]
 8008286:	e00a      	b.n	800829e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	0f1b      	lsrs	r3, r3, #28
 800828c:	b2da      	uxtb	r2, r3
 800828e:	7dfb      	ldrb	r3, [r7, #23]
 8008290:	005b      	lsls	r3, r3, #1
 8008292:	4619      	mov	r1, r3
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	440b      	add	r3, r1
 8008298:	3237      	adds	r2, #55	; 0x37
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	011b      	lsls	r3, r3, #4
 80082a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	3301      	adds	r3, #1
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	4413      	add	r3, r2
 80082ae:	2200      	movs	r2, #0
 80082b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
 80082b4:	3301      	adds	r3, #1
 80082b6:	75fb      	strb	r3, [r7, #23]
 80082b8:	7dfa      	ldrb	r2, [r7, #23]
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d3d3      	bcc.n	8008268 <IntToUnicode+0x18>
  }
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	371c      	adds	r7, #28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
	...

080082d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	; 0x28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082d8:	f107 0314 	add.w	r3, r7, #20
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	605a      	str	r2, [r3, #4]
 80082e2:	609a      	str	r2, [r3, #8]
 80082e4:	60da      	str	r2, [r3, #12]
 80082e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082f0:	d14b      	bne.n	800838a <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082f2:	2300      	movs	r3, #0
 80082f4:	613b      	str	r3, [r7, #16]
 80082f6:	4b27      	ldr	r3, [pc, #156]	; (8008394 <HAL_PCD_MspInit+0xc4>)
 80082f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fa:	4a26      	ldr	r2, [pc, #152]	; (8008394 <HAL_PCD_MspInit+0xc4>)
 80082fc:	f043 0301 	orr.w	r3, r3, #1
 8008300:	6313      	str	r3, [r2, #48]	; 0x30
 8008302:	4b24      	ldr	r3, [pc, #144]	; (8008394 <HAL_PCD_MspInit+0xc4>)
 8008304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	613b      	str	r3, [r7, #16]
 800830c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800830e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008314:	2302      	movs	r3, #2
 8008316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008318:	2300      	movs	r3, #0
 800831a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800831c:	2303      	movs	r3, #3
 800831e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008320:	230a      	movs	r3, #10
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	4619      	mov	r1, r3
 800832a:	481b      	ldr	r0, [pc, #108]	; (8008398 <HAL_PCD_MspInit+0xc8>)
 800832c:	f7f9 ff66 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008336:	2302      	movs	r3, #2
 8008338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800833a:	2301      	movs	r3, #1
 800833c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800833e:	2303      	movs	r3, #3
 8008340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008342:	230a      	movs	r3, #10
 8008344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008346:	f107 0314 	add.w	r3, r7, #20
 800834a:	4619      	mov	r1, r3
 800834c:	4812      	ldr	r0, [pc, #72]	; (8008398 <HAL_PCD_MspInit+0xc8>)
 800834e:	f7f9 ff55 	bl	80021fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008352:	4b10      	ldr	r3, [pc, #64]	; (8008394 <HAL_PCD_MspInit+0xc4>)
 8008354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008356:	4a0f      	ldr	r2, [pc, #60]	; (8008394 <HAL_PCD_MspInit+0xc4>)
 8008358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800835c:	6353      	str	r3, [r2, #52]	; 0x34
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <HAL_PCD_MspInit+0xc4>)
 8008364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008366:	4a0b      	ldr	r2, [pc, #44]	; (8008394 <HAL_PCD_MspInit+0xc4>)
 8008368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800836c:	6453      	str	r3, [r2, #68]	; 0x44
 800836e:	4b09      	ldr	r3, [pc, #36]	; (8008394 <HAL_PCD_MspInit+0xc4>)
 8008370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800837a:	2200      	movs	r2, #0
 800837c:	2100      	movs	r1, #0
 800837e:	2043      	movs	r0, #67	; 0x43
 8008380:	f7f9 fb03 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008384:	2043      	movs	r0, #67	; 0x43
 8008386:	f7f9 fb1c 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800838a:	bf00      	nop
 800838c:	3728      	adds	r7, #40	; 0x28
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	40023800 	.word	0x40023800
 8008398:	40020000 	.word	0x40020000

0800839c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f7fe fdac 	bl	8006f10 <USBD_LL_SetupStage>
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80083d2:	78fa      	ldrb	r2, [r7, #3]
 80083d4:	6879      	ldr	r1, [r7, #4]
 80083d6:	4613      	mov	r3, r2
 80083d8:	00db      	lsls	r3, r3, #3
 80083da:	1a9b      	subs	r3, r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	440b      	add	r3, r1
 80083e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	4619      	mov	r1, r3
 80083ea:	f7fe fde6 	bl	8006fba <USBD_LL_DataOutStage>
}
 80083ee:	bf00      	nop
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008408:	78fa      	ldrb	r2, [r7, #3]
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	1a9b      	subs	r3, r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	3348      	adds	r3, #72	; 0x48
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	4619      	mov	r1, r3
 800841e:	f7fe fe2f 	bl	8007080 <USBD_LL_DataInStage>
}
 8008422:	bf00      	nop
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008438:	4618      	mov	r0, r3
 800843a:	f7fe ff43 	bl	80072c4 <USBD_LL_SOF>
}
 800843e:	bf00      	nop
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800844e:	2301      	movs	r3, #1
 8008450:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d102      	bne.n	8008460 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
 800845e:	e008      	b.n	8008472 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	2b02      	cmp	r3, #2
 8008466:	d102      	bne.n	800846e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008468:	2301      	movs	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]
 800846c:	e001      	b.n	8008472 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800846e:	f7f8 fbf9 	bl	8000c64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008478:	7bfa      	ldrb	r2, [r7, #15]
 800847a:	4611      	mov	r1, r2
 800847c:	4618      	mov	r0, r3
 800847e:	f7fe fee3 	bl	8007248 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe fe8f 	bl	80071ac <USBD_LL_Reset>
}
 800848e:	bf00      	nop
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe fede 	bl	8007268 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	6812      	ldr	r2, [r2, #0]
 80084ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084be:	f043 0301 	orr.w	r3, r3, #1
 80084c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d005      	beq.n	80084d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084cc:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <HAL_PCD_SuspendCallback+0x48>)
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	4a03      	ldr	r2, [pc, #12]	; (80084e0 <HAL_PCD_SuspendCallback+0x48>)
 80084d2:	f043 0306 	orr.w	r3, r3, #6
 80084d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	e000ed00 	.word	0xe000ed00

080084e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe fece 	bl	8007294 <USBD_LL_Resume>
}
 80084f8:	bf00      	nop
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008512:	78fa      	ldrb	r2, [r7, #3]
 8008514:	4611      	mov	r1, r2
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe ff1c 	bl	8007354 <USBD_LL_IsoOUTIncomplete>
}
 800851c:	bf00      	nop
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008536:	78fa      	ldrb	r2, [r7, #3]
 8008538:	4611      	mov	r1, r2
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe fee4 	bl	8007308 <USBD_LL_IsoINIncomplete>
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008556:	4618      	mov	r0, r3
 8008558:	f7fe ff22 	bl	80073a0 <USBD_LL_DevConnected>
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe ff1f 	bl	80073b6 <USBD_LL_DevDisconnected>
}
 8008578:	bf00      	nop
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d13c      	bne.n	800860a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008590:	4a20      	ldr	r2, [pc, #128]	; (8008614 <USBD_LL_Init+0x94>)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a1e      	ldr	r2, [pc, #120]	; (8008614 <USBD_LL_Init+0x94>)
 800859c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085a0:	4b1c      	ldr	r3, [pc, #112]	; (8008614 <USBD_LL_Init+0x94>)
 80085a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80085a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80085a8:	4b1a      	ldr	r3, [pc, #104]	; (8008614 <USBD_LL_Init+0x94>)
 80085aa:	2204      	movs	r2, #4
 80085ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80085ae:	4b19      	ldr	r3, [pc, #100]	; (8008614 <USBD_LL_Init+0x94>)
 80085b0:	2202      	movs	r2, #2
 80085b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085b4:	4b17      	ldr	r3, [pc, #92]	; (8008614 <USBD_LL_Init+0x94>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80085ba:	4b16      	ldr	r3, [pc, #88]	; (8008614 <USBD_LL_Init+0x94>)
 80085bc:	2202      	movs	r2, #2
 80085be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80085c0:	4b14      	ldr	r3, [pc, #80]	; (8008614 <USBD_LL_Init+0x94>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80085c6:	4b13      	ldr	r3, [pc, #76]	; (8008614 <USBD_LL_Init+0x94>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80085cc:	4b11      	ldr	r3, [pc, #68]	; (8008614 <USBD_LL_Init+0x94>)
 80085ce:	2200      	movs	r2, #0
 80085d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80085d2:	4b10      	ldr	r3, [pc, #64]	; (8008614 <USBD_LL_Init+0x94>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80085d8:	4b0e      	ldr	r3, [pc, #56]	; (8008614 <USBD_LL_Init+0x94>)
 80085da:	2200      	movs	r2, #0
 80085dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80085de:	480d      	ldr	r0, [pc, #52]	; (8008614 <USBD_LL_Init+0x94>)
 80085e0:	f7f9 ffc1 	bl	8002566 <HAL_PCD_Init>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80085ea:	f7f8 fb3b 	bl	8000c64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80085ee:	2180      	movs	r1, #128	; 0x80
 80085f0:	4808      	ldr	r0, [pc, #32]	; (8008614 <USBD_LL_Init+0x94>)
 80085f2:	f7fb f906 	bl	8003802 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80085f6:	2240      	movs	r2, #64	; 0x40
 80085f8:	2100      	movs	r1, #0
 80085fa:	4806      	ldr	r0, [pc, #24]	; (8008614 <USBD_LL_Init+0x94>)
 80085fc:	f7fb f8ba 	bl	8003774 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008600:	2280      	movs	r2, #128	; 0x80
 8008602:	2101      	movs	r1, #1
 8008604:	4803      	ldr	r0, [pc, #12]	; (8008614 <USBD_LL_Init+0x94>)
 8008606:	f7fb f8b5 	bl	8003774 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	20000e30 	.word	0x20000e30

08008618 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800862e:	4618      	mov	r0, r3
 8008630:	f7fa f8b6 	bl	80027a0 <HAL_PCD_Start>
 8008634:	4603      	mov	r3, r0
 8008636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	4618      	mov	r0, r3
 800863c:	f000 f930 	bl	80088a0 <USBD_Get_USB_Status>
 8008640:	4603      	mov	r3, r0
 8008642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008644:	7bbb      	ldrb	r3, [r7, #14]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b084      	sub	sp, #16
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	4608      	mov	r0, r1
 8008658:	4611      	mov	r1, r2
 800865a:	461a      	mov	r2, r3
 800865c:	4603      	mov	r3, r0
 800865e:	70fb      	strb	r3, [r7, #3]
 8008660:	460b      	mov	r3, r1
 8008662:	70bb      	strb	r3, [r7, #2]
 8008664:	4613      	mov	r3, r2
 8008666:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008676:	78bb      	ldrb	r3, [r7, #2]
 8008678:	883a      	ldrh	r2, [r7, #0]
 800867a:	78f9      	ldrb	r1, [r7, #3]
 800867c:	f7fa fc9a 	bl	8002fb4 <HAL_PCD_EP_Open>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f90a 	bl	80088a0 <USBD_Get_USB_Status>
 800868c:	4603      	mov	r3, r0
 800868e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008690:	7bbb      	ldrb	r3, [r7, #14]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b084      	sub	sp, #16
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	460b      	mov	r3, r1
 80086a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086b4:	78fa      	ldrb	r2, [r7, #3]
 80086b6:	4611      	mov	r1, r2
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fa fce3 	bl	8003084 <HAL_PCD_EP_Close>
 80086be:	4603      	mov	r3, r0
 80086c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 f8eb 	bl	80088a0 <USBD_Get_USB_Status>
 80086ca:	4603      	mov	r3, r0
 80086cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fa fda3 	bl	8003242 <HAL_PCD_EP_SetStall>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	4618      	mov	r0, r3
 8008704:	f000 f8cc 	bl	80088a0 <USBD_Get_USB_Status>
 8008708:	4603      	mov	r3, r0
 800870a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800870c:	7bbb      	ldrb	r3, [r7, #14]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	460b      	mov	r3, r1
 8008720:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008730:	78fa      	ldrb	r2, [r7, #3]
 8008732:	4611      	mov	r1, r2
 8008734:	4618      	mov	r0, r3
 8008736:	f7fa fde8 	bl	800330a <HAL_PCD_EP_ClrStall>
 800873a:	4603      	mov	r3, r0
 800873c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	4618      	mov	r0, r3
 8008742:	f000 f8ad 	bl	80088a0 <USBD_Get_USB_Status>
 8008746:	4603      	mov	r3, r0
 8008748:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800874a:	7bbb      	ldrb	r3, [r7, #14]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008766:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800876c:	2b00      	cmp	r3, #0
 800876e:	da0b      	bge.n	8008788 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008776:	68f9      	ldr	r1, [r7, #12]
 8008778:	4613      	mov	r3, r2
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	1a9b      	subs	r3, r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	440b      	add	r3, r1
 8008782:	333e      	adds	r3, #62	; 0x3e
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	e00b      	b.n	80087a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800878e:	68f9      	ldr	r1, [r7, #12]
 8008790:	4613      	mov	r3, r2
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	1a9b      	subs	r3, r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	440b      	add	r3, r1
 800879a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800879e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087c6:	78fa      	ldrb	r2, [r7, #3]
 80087c8:	4611      	mov	r1, r2
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fa fbcd 	bl	8002f6a <HAL_PCD_SetAddress>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 f862 	bl	80088a0 <USBD_Get_USB_Status>
 80087dc:	4603      	mov	r3, r0
 80087de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b086      	sub	sp, #24
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	60f8      	str	r0, [r7, #12]
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	603b      	str	r3, [r7, #0]
 80087f6:	460b      	mov	r3, r1
 80087f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008808:	7af9      	ldrb	r1, [r7, #11]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	f7fa fcce 	bl	80031ae <HAL_PCD_EP_Transmit>
 8008812:	4603      	mov	r3, r0
 8008814:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	4618      	mov	r0, r3
 800881a:	f000 f841 	bl	80088a0 <USBD_Get_USB_Status>
 800881e:	4603      	mov	r3, r0
 8008820:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008822:	7dbb      	ldrb	r3, [r7, #22]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	607a      	str	r2, [r7, #4]
 8008836:	603b      	str	r3, [r7, #0]
 8008838:	460b      	mov	r3, r1
 800883a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800884a:	7af9      	ldrb	r1, [r7, #11]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	f7fa fc62 	bl	8003118 <HAL_PCD_EP_Receive>
 8008854:	4603      	mov	r3, r0
 8008856:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008858:	7dfb      	ldrb	r3, [r7, #23]
 800885a:	4618      	mov	r0, r3
 800885c:	f000 f820 	bl	80088a0 <USBD_Get_USB_Status>
 8008860:	4603      	mov	r3, r0
 8008862:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008864:	7dbb      	ldrb	r3, [r7, #22]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008878:	4b03      	ldr	r3, [pc, #12]	; (8008888 <USBD_static_malloc+0x18>)
}
 800887a:	4618      	mov	r0, r3
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	20000734 	.word	0x20000734

0800888c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]

}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088ae:	79fb      	ldrb	r3, [r7, #7]
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d817      	bhi.n	80088e4 <USBD_Get_USB_Status+0x44>
 80088b4:	a201      	add	r2, pc, #4	; (adr r2, 80088bc <USBD_Get_USB_Status+0x1c>)
 80088b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ba:	bf00      	nop
 80088bc:	080088cd 	.word	0x080088cd
 80088c0:	080088d3 	.word	0x080088d3
 80088c4:	080088d9 	.word	0x080088d9
 80088c8:	080088df 	.word	0x080088df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]
    break;
 80088d0:	e00b      	b.n	80088ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088d2:	2303      	movs	r3, #3
 80088d4:	73fb      	strb	r3, [r7, #15]
    break;
 80088d6:	e008      	b.n	80088ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088d8:	2301      	movs	r3, #1
 80088da:	73fb      	strb	r3, [r7, #15]
    break;
 80088dc:	e005      	b.n	80088ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088de:	2303      	movs	r3, #3
 80088e0:	73fb      	strb	r3, [r7, #15]
    break;
 80088e2:	e002      	b.n	80088ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088e4:	2303      	movs	r3, #3
 80088e6:	73fb      	strb	r3, [r7, #15]
    break;
 80088e8:	bf00      	nop
  }
  return usb_status;
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <__libc_init_array>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	4d0d      	ldr	r5, [pc, #52]	; (8008930 <__libc_init_array+0x38>)
 80088fc:	4c0d      	ldr	r4, [pc, #52]	; (8008934 <__libc_init_array+0x3c>)
 80088fe:	1b64      	subs	r4, r4, r5
 8008900:	10a4      	asrs	r4, r4, #2
 8008902:	2600      	movs	r6, #0
 8008904:	42a6      	cmp	r6, r4
 8008906:	d109      	bne.n	800891c <__libc_init_array+0x24>
 8008908:	4d0b      	ldr	r5, [pc, #44]	; (8008938 <__libc_init_array+0x40>)
 800890a:	4c0c      	ldr	r4, [pc, #48]	; (800893c <__libc_init_array+0x44>)
 800890c:	f000 f820 	bl	8008950 <_init>
 8008910:	1b64      	subs	r4, r4, r5
 8008912:	10a4      	asrs	r4, r4, #2
 8008914:	2600      	movs	r6, #0
 8008916:	42a6      	cmp	r6, r4
 8008918:	d105      	bne.n	8008926 <__libc_init_array+0x2e>
 800891a:	bd70      	pop	{r4, r5, r6, pc}
 800891c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008920:	4798      	blx	r3
 8008922:	3601      	adds	r6, #1
 8008924:	e7ee      	b.n	8008904 <__libc_init_array+0xc>
 8008926:	f855 3b04 	ldr.w	r3, [r5], #4
 800892a:	4798      	blx	r3
 800892c:	3601      	adds	r6, #1
 800892e:	e7f2      	b.n	8008916 <__libc_init_array+0x1e>
 8008930:	080089d8 	.word	0x080089d8
 8008934:	080089d8 	.word	0x080089d8
 8008938:	080089d8 	.word	0x080089d8
 800893c:	080089dc 	.word	0x080089dc

08008940 <memset>:
 8008940:	4402      	add	r2, r0
 8008942:	4603      	mov	r3, r0
 8008944:	4293      	cmp	r3, r2
 8008946:	d100      	bne.n	800894a <memset+0xa>
 8008948:	4770      	bx	lr
 800894a:	f803 1b01 	strb.w	r1, [r3], #1
 800894e:	e7f9      	b.n	8008944 <memset+0x4>

08008950 <_init>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	bf00      	nop
 8008954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008956:	bc08      	pop	{r3}
 8008958:	469e      	mov	lr, r3
 800895a:	4770      	bx	lr

0800895c <_fini>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	bf00      	nop
 8008960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008962:	bc08      	pop	{r3}
 8008964:	469e      	mov	lr, r3
 8008966:	4770      	bx	lr
