
GINGAAAN_2NDLOT_ONLY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006534  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006718  08006718  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08006718  08006718  00016718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006720  08006720  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006720  08006720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08006728  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  20000038  0800675c  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  0800675c  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018eb2  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003005  00000000  00000000  00038f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0003bf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  0003cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b9a  00000000  00000000  0003de08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001485d  00000000  00000000  000619a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d448e  00000000  00000000  000761ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a68d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b8  00000000  00000000  0014a6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000038 	.word	0x20000038
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080066e0 	.word	0x080066e0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000003c 	.word	0x2000003c
 8000200:	080066e0 	.word	0x080066e0

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__gedf2>:
 80009a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a4:	e006      	b.n	80009b4 <__cmpdf2+0x4>
 80009a6:	bf00      	nop

080009a8 <__ledf2>:
 80009a8:	f04f 0c01 	mov.w	ip, #1
 80009ac:	e002      	b.n	80009b4 <__cmpdf2+0x4>
 80009ae:	bf00      	nop

080009b0 <__cmpdf2>:
 80009b0:	f04f 0c01 	mov.w	ip, #1
 80009b4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ca:	d01b      	beq.n	8000a04 <__cmpdf2+0x54>
 80009cc:	b001      	add	sp, #4
 80009ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d2:	bf0c      	ite	eq
 80009d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d8:	ea91 0f03 	teqne	r1, r3
 80009dc:	bf02      	ittt	eq
 80009de:	ea90 0f02 	teqeq	r0, r2
 80009e2:	2000      	moveq	r0, #0
 80009e4:	4770      	bxeq	lr
 80009e6:	f110 0f00 	cmn.w	r0, #0
 80009ea:	ea91 0f03 	teq	r1, r3
 80009ee:	bf58      	it	pl
 80009f0:	4299      	cmppl	r1, r3
 80009f2:	bf08      	it	eq
 80009f4:	4290      	cmpeq	r0, r2
 80009f6:	bf2c      	ite	cs
 80009f8:	17d8      	asrcs	r0, r3, #31
 80009fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fe:	f040 0001 	orr.w	r0, r0, #1
 8000a02:	4770      	bx	lr
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__cmpdf2+0x64>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d107      	bne.n	8000a24 <__cmpdf2+0x74>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d1d6      	bne.n	80009cc <__cmpdf2+0x1c>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d0d3      	beq.n	80009cc <__cmpdf2+0x1c>
 8000a24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdrcmple>:
 8000a2c:	4684      	mov	ip, r0
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4662      	mov	r2, ip
 8000a32:	468c      	mov	ip, r1
 8000a34:	4619      	mov	r1, r3
 8000a36:	4663      	mov	r3, ip
 8000a38:	e000      	b.n	8000a3c <__aeabi_cdcmpeq>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_cdcmpeq>:
 8000a3c:	b501      	push	{r0, lr}
 8000a3e:	f7ff ffb7 	bl	80009b0 <__cmpdf2>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	bf48      	it	mi
 8000a46:	f110 0f00 	cmnmi.w	r0, #0
 8000a4a:	bd01      	pop	{r0, pc}

08000a4c <__aeabi_dcmpeq>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff fff4 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a54:	bf0c      	ite	eq
 8000a56:	2001      	moveq	r0, #1
 8000a58:	2000      	movne	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmplt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffea 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmple>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffe0 	bl	8000a3c <__aeabi_cdcmpeq>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpge>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffce 	bl	8000a2c <__aeabi_cdrcmple>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpgt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffc4 	bl	8000a2c <__aeabi_cdrcmple>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <appInit>:
static uint8_t BLDC_MaxCount = 200;
static uint8_t BLDC_GoLing_Speed = 0;
static uint8_t BLDC_Table_Speed = 0;

//初期化
int appInit(void){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	//D_CAN_SetReceiveAddress(8,9,10,11);
	D_CAN_SetReceiveAddressAll();
 8000e3e:	f001 fb09 	bl	8002454 <D_CAN_SetReceiveAddressAll>
	for(int i=0; i<8; i++){
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	e01b      	b.n	8000e80 <appInit+0x48>
		for(int j=0; j<4; j++){
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	e012      	b.n	8000e74 <appInit+0x3c>
			rcvData[j][i] = 0;
 8000e4e:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <appInit+0x58>)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	441a      	add	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
			sndData[j][i] = 0;
 8000e5e:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <appInit+0x5c>)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	441a      	add	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<4; j++){
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	dde9      	ble.n	8000e4e <appInit+0x16>
	for(int i=0; i<8; i++){
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b07      	cmp	r3, #7
 8000e84:	dde0      	ble.n	8000e48 <appInit+0x10>
		}
	}
	return 0;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000074 	.word	0x20000074
 8000e94:	20000054 	.word	0x20000054

08000e98 <appTask>:

int appTask(void){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
		sndData[i][sendLength-1] = (uint8_t)checkSum;
	}
	*/

	//SMsndTime += G_System_MicroCounter - recent_System_counter;
	sndTime += G_System_counter - recent_System_counter;
 8000e9e:	4ba1      	ldr	r3, [pc, #644]	; (8001124 <appTask+0x28c>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4ba1      	ldr	r3, [pc, #644]	; (8001128 <appTask+0x290>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1ad2      	subs	r2, r2, r3
 8000ea8:	4ba0      	ldr	r3, [pc, #640]	; (800112c <appTask+0x294>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a9f      	ldr	r2, [pc, #636]	; (800112c <appTask+0x294>)
 8000eb0:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_counter;
 8000eb2:	4b9c      	ldr	r3, [pc, #624]	; (8001124 <appTask+0x28c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a9c      	ldr	r2, [pc, #624]	; (8001128 <appTask+0x290>)
 8000eb8:	6013      	str	r3, [r2, #0]
	//CAN送信タイミングの場合送信
	if(sndTime >= CAN_SEND_INTERVAL){
 8000eba:	4b9c      	ldr	r3, [pc, #624]	; (800112c <appTask+0x294>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ec2:	f0c0 8088 	bcc.w	8000fd6 <appTask+0x13e>
		sndTime = 0;
 8000ec6:	4b99      	ldr	r3, [pc, #612]	; (800112c <appTask+0x294>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
		static int sendLength = 8;
		sndData[0][0] = testSendData;
 8000ecc:	4b98      	ldr	r3, [pc, #608]	; (8001130 <appTask+0x298>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b98      	ldr	r3, [pc, #608]	; (8001134 <appTask+0x29c>)
 8000ed4:	701a      	strb	r2, [r3, #0]
		sndData[0][1] = testSendData2;
 8000ed6:	4b98      	ldr	r3, [pc, #608]	; (8001138 <appTask+0x2a0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b95      	ldr	r3, [pc, #596]	; (8001134 <appTask+0x29c>)
 8000ede:	705a      	strb	r2, [r3, #1]
		sndData[0][2] = testSendData2;
 8000ee0:	4b95      	ldr	r3, [pc, #596]	; (8001138 <appTask+0x2a0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b93      	ldr	r3, [pc, #588]	; (8001134 <appTask+0x29c>)
 8000ee8:	709a      	strb	r2, [r3, #2]
		sndData[0][3] = testSendData2;
 8000eea:	4b93      	ldr	r3, [pc, #588]	; (8001138 <appTask+0x2a0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b90      	ldr	r3, [pc, #576]	; (8001134 <appTask+0x29c>)
 8000ef2:	70da      	strb	r2, [r3, #3]
		sndData[0][4] = testSendData2;
 8000ef4:	4b90      	ldr	r3, [pc, #576]	; (8001138 <appTask+0x2a0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b8e      	ldr	r3, [pc, #568]	; (8001134 <appTask+0x29c>)
 8000efc:	711a      	strb	r2, [r3, #4]
		sndData[0][5] = testSendData2;
 8000efe:	4b8e      	ldr	r3, [pc, #568]	; (8001138 <appTask+0x2a0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b8b      	ldr	r3, [pc, #556]	; (8001134 <appTask+0x29c>)
 8000f06:	715a      	strb	r2, [r3, #5]
		sndData[0][6] = testSendData2;
 8000f08:	4b8b      	ldr	r3, [pc, #556]	; (8001138 <appTask+0x2a0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b89      	ldr	r3, [pc, #548]	; (8001134 <appTask+0x29c>)
 8000f10:	719a      	strb	r2, [r3, #6]
		sndData[0][7] = testSendData2;
 8000f12:	4b89      	ldr	r3, [pc, #548]	; (8001138 <appTask+0x2a0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b86      	ldr	r3, [pc, #536]	; (8001134 <appTask+0x29c>)
 8000f1a:	71da      	strb	r2, [r3, #7]
		uint8_t dataSum = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]
		for(int j=0; j<sendLength-1; j++){
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	e009      	b.n	8000f3a <appTask+0xa2>
			dataSum += sndData[0][j];
 8000f26:	4a83      	ldr	r2, [pc, #524]	; (8001134 <appTask+0x29c>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	4413      	add	r3, r2
 8000f32:	73fb      	strb	r3, [r7, #15]
		for(int j=0; j<sendLength-1; j++){
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	3301      	adds	r3, #1
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b80      	ldr	r3, [pc, #512]	; (800113c <appTask+0x2a4>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dbef      	blt.n	8000f26 <appTask+0x8e>
		}
		//int checkSum = 256 - (int)dataSum;
		sndData[0][sendLength-1] = (uint8_t)dataSum;
 8000f46:	4b7d      	ldr	r3, [pc, #500]	; (800113c <appTask+0x2a4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	4979      	ldr	r1, [pc, #484]	; (8001134 <appTask+0x29c>)
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	54ca      	strb	r2, [r1, r3]


		errorHandle = D_CAN_Transmit(0x7ff/*testSendData*/,sndData[0],sendLength);
 8000f52:	4b7a      	ldr	r3, [pc, #488]	; (800113c <appTask+0x2a4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4976      	ldr	r1, [pc, #472]	; (8001134 <appTask+0x29c>)
 8000f5c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000f60:	f001 fa20 	bl	80023a4 <D_CAN_Transmit>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a76      	ldr	r2, [pc, #472]	; (8001140 <appTask+0x2a8>)
 8000f68:	6013      	str	r3, [r2, #0]
		sndTime = 0;
 8000f6a:	4b70      	ldr	r3, [pc, #448]	; (800112c <appTask+0x294>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
		count1++;
 8000f70:	4b74      	ldr	r3, [pc, #464]	; (8001144 <appTask+0x2ac>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a73      	ldr	r2, [pc, #460]	; (8001144 <appTask+0x2ac>)
 8000f78:	6013      	str	r3, [r2, #0]
		if(count1 >= 1 ){//&& errorHandle == 0){
 8000f7a:	4b72      	ldr	r3, [pc, #456]	; (8001144 <appTask+0x2ac>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dd07      	ble.n	8000f92 <appTask+0xfa>
			count1 = 0;
 8000f82:	4b70      	ldr	r3, [pc, #448]	; (8001144 <appTask+0x2ac>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
			testSendData++;
 8000f88:	4b69      	ldr	r3, [pc, #420]	; (8001130 <appTask+0x298>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	4a68      	ldr	r2, [pc, #416]	; (8001130 <appTask+0x298>)
 8000f90:	6013      	str	r3, [r2, #0]
		}
		if(testSendData >= 1000){ //&& errorHandle == 0){
 8000f92:	4b67      	ldr	r3, [pc, #412]	; (8001130 <appTask+0x298>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f9a:	db0c      	blt.n	8000fb6 <appTask+0x11e>
			testSendData = 0;
 8000f9c:	4b64      	ldr	r3, [pc, #400]	; (8001130 <appTask+0x298>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
			testSendData2++;
 8000fa2:	4b65      	ldr	r3, [pc, #404]	; (8001138 <appTask+0x2a0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a63      	ldr	r2, [pc, #396]	; (8001138 <appTask+0x2a0>)
 8000faa:	6013      	str	r3, [r2, #0]
			ownIdCount++;
 8000fac:	4b66      	ldr	r3, [pc, #408]	; (8001148 <appTask+0x2b0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a65      	ldr	r2, [pc, #404]	; (8001148 <appTask+0x2b0>)
 8000fb4:	6013      	str	r3, [r2, #0]
		}
		if(testSendData2 >= 256 && errorHandle == 0){
 8000fb6:	4b60      	ldr	r3, [pc, #384]	; (8001138 <appTask+0x2a0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2bff      	cmp	r3, #255	; 0xff
 8000fbc:	dd0b      	ble.n	8000fd6 <appTask+0x13e>
 8000fbe:	4b60      	ldr	r3, [pc, #384]	; (8001140 <appTask+0x2a8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d107      	bne.n	8000fd6 <appTask+0x13e>
			testSendData2 = 1;
 8000fc6:	4b5c      	ldr	r3, [pc, #368]	; (8001138 <appTask+0x2a0>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
			testSendData3++;
 8000fcc:	4b5f      	ldr	r3, [pc, #380]	; (800114c <appTask+0x2b4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	4a5e      	ldr	r2, [pc, #376]	; (800114c <appTask+0x2b4>)
 8000fd4:	6013      	str	r3, [r2, #0]
			ownIdCount++;
		}
		*/
	}
	//CAN受信処理
	D_CAN_Receive(0,rcvData[0],receiveLength);
 8000fd6:	4b5e      	ldr	r3, [pc, #376]	; (8001150 <appTask+0x2b8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	495d      	ldr	r1, [pc, #372]	; (8001154 <appTask+0x2bc>)
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f001 fa69 	bl	80024b8 <D_CAN_Receive>
	D_CAN_Receive(1,rcvData[1],receiveLength);
 8000fe6:	4b5a      	ldr	r3, [pc, #360]	; (8001150 <appTask+0x2b8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	495a      	ldr	r1, [pc, #360]	; (8001158 <appTask+0x2c0>)
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f001 fa61 	bl	80024b8 <D_CAN_Receive>

	//D_Mess_printf("%d\n", G_System_counter);
	//D_PWM_Set(1,100);
	//D_PWM_Set(2,100);
	//IO_SET_BLDC2_DIR();
	if(IO_READ_USERBUTTON()){
 8000ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffa:	4858      	ldr	r0, [pc, #352]	; (800115c <appTask+0x2c4>)
 8000ffc:	f001 fb3e 	bl	800267c <D_GPIO_Read>
 8001000:	4603      	mov	r3, r0
 8001002:	f083 0301 	eor.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d048      	beq.n	800109e <appTask+0x206>
		IO_SET_USERLED();
 800100c:	2120      	movs	r1, #32
 800100e:	4854      	ldr	r0, [pc, #336]	; (8001160 <appTask+0x2c8>)
 8001010:	f001 fb14 	bl	800263c <D_GPIO_Set>
		if(_userButton){
 8001014:	4b53      	ldr	r3, [pc, #332]	; (8001164 <appTask+0x2cc>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d007      	beq.n	800102c <appTask+0x194>
			_userButton = false;
 800101c:	4b51      	ldr	r3, [pc, #324]	; (8001164 <appTask+0x2cc>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
			testSendData += 1;
 8001022:	4b43      	ldr	r3, [pc, #268]	; (8001130 <appTask+0x298>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a41      	ldr	r2, [pc, #260]	; (8001130 <appTask+0x298>)
 800102a:	6013      	str	r3, [r2, #0]
		}

		IO_RESET_GOLED_1();
 800102c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001030:	484a      	ldr	r0, [pc, #296]	; (800115c <appTask+0x2c4>)
 8001032:	f001 fb13 	bl	800265c <D_GPIO_Reset>
		IO_RESET_HOLDLED_1();
 8001036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103a:	4848      	ldr	r0, [pc, #288]	; (800115c <appTask+0x2c4>)
 800103c:	f001 fb0e 	bl	800265c <D_GPIO_Reset>
		IO_RESET_GOLED_2();
 8001040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001044:	4845      	ldr	r0, [pc, #276]	; (800115c <appTask+0x2c4>)
 8001046:	f001 fb09 	bl	800265c <D_GPIO_Reset>
		IO_RESET_HOLDLED_2();
 800104a:	2104      	movs	r1, #4
 800104c:	4846      	ldr	r0, [pc, #280]	; (8001168 <appTask+0x2d0>)
 800104e:	f001 fb05 	bl	800265c <D_GPIO_Reset>
		IO_RESET_GOLED_3();
 8001052:	2180      	movs	r1, #128	; 0x80
 8001054:	4845      	ldr	r0, [pc, #276]	; (800116c <appTask+0x2d4>)
 8001056:	f001 fb01 	bl	800265c <D_GPIO_Reset>
		IO_RESET_HOLDLED_3();
 800105a:	2101      	movs	r1, #1
 800105c:	4840      	ldr	r0, [pc, #256]	; (8001160 <appTask+0x2c8>)
 800105e:	f001 fafd 	bl	800265c <D_GPIO_Reset>
		IO_RESET_GOLED_4();
 8001062:	2110      	movs	r1, #16
 8001064:	483e      	ldr	r0, [pc, #248]	; (8001160 <appTask+0x2c8>)
 8001066:	f001 faf9 	bl	800265c <D_GPIO_Reset>
		IO_RESET_HOLDLED_4();
 800106a:	2104      	movs	r1, #4
 800106c:	483b      	ldr	r0, [pc, #236]	; (800115c <appTask+0x2c4>)
 800106e:	f001 faf5 	bl	800265c <D_GPIO_Reset>

		IO_SET_2ND_SOL();
 8001072:	2101      	movs	r1, #1
 8001074:	4839      	ldr	r0, [pc, #228]	; (800115c <appTask+0x2c4>)
 8001076:	f001 fae1 	bl	800263c <D_GPIO_Set>
		//Lottery_1st2nd_SetSpeed(500);
		//Lottery_3rd_SetSpeed(800);
		//Lottery_JP_SetSpeed(300,0);
		//Lottery_JP_SetSpeed(JPC_MAX_SPEED,0);

		BLDC_GoLing_SetMotorState(false, true);
 800107a:	2101      	movs	r1, #1
 800107c:	2000      	movs	r0, #0
 800107e:	f000 f943 	bl	8001308 <BLDC_GoLing_SetMotorState>
		BLDC_GoLing_SetSpeedTrapezoidal(20, -1);
 8001082:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001086:	2014      	movs	r0, #20
 8001088:	f000 f894 	bl	80011b4 <BLDC_GoLing_SetSpeedTrapezoidal>
		BLDC_Table_SetMotorState(false, true);
 800108c:	2101      	movs	r1, #1
 800108e:	2000      	movs	r0, #0
 8001090:	f000 fa72 	bl	8001578 <BLDC_Table_SetMotorState>
		BLDC_Table_SetSpeedTrapezoidal(30, 1);
 8001094:	2101      	movs	r1, #1
 8001096:	201e      	movs	r0, #30
 8001098:	f000 f9c4 	bl	8001424 <BLDC_Table_SetSpeedTrapezoidal>
 800109c:	e03e      	b.n	800111c <appTask+0x284>
	}else{
		_userButton = true;
 800109e:	4b31      	ldr	r3, [pc, #196]	; (8001164 <appTask+0x2cc>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
		IO_RESET_USERLED();
 80010a4:	2120      	movs	r1, #32
 80010a6:	482e      	ldr	r0, [pc, #184]	; (8001160 <appTask+0x2c8>)
 80010a8:	f001 fad8 	bl	800265c <D_GPIO_Reset>

		IO_SET_GOLED_1();
 80010ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b0:	482a      	ldr	r0, [pc, #168]	; (800115c <appTask+0x2c4>)
 80010b2:	f001 fac3 	bl	800263c <D_GPIO_Set>
		IO_SET_HOLDLED_1();
 80010b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ba:	4828      	ldr	r0, [pc, #160]	; (800115c <appTask+0x2c4>)
 80010bc:	f001 fabe 	bl	800263c <D_GPIO_Set>
		IO_SET_GOLED_2();
 80010c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c4:	4825      	ldr	r0, [pc, #148]	; (800115c <appTask+0x2c4>)
 80010c6:	f001 fab9 	bl	800263c <D_GPIO_Set>
		IO_SET_HOLDLED_2();
 80010ca:	2104      	movs	r1, #4
 80010cc:	4826      	ldr	r0, [pc, #152]	; (8001168 <appTask+0x2d0>)
 80010ce:	f001 fab5 	bl	800263c <D_GPIO_Set>
		IO_SET_GOLED_3();
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	4825      	ldr	r0, [pc, #148]	; (800116c <appTask+0x2d4>)
 80010d6:	f001 fab1 	bl	800263c <D_GPIO_Set>
		IO_SET_HOLDLED_3();
 80010da:	2101      	movs	r1, #1
 80010dc:	4820      	ldr	r0, [pc, #128]	; (8001160 <appTask+0x2c8>)
 80010de:	f001 faad 	bl	800263c <D_GPIO_Set>
		IO_SET_GOLED_4();
 80010e2:	2110      	movs	r1, #16
 80010e4:	481e      	ldr	r0, [pc, #120]	; (8001160 <appTask+0x2c8>)
 80010e6:	f001 faa9 	bl	800263c <D_GPIO_Set>
		IO_SET_HOLDLED_4();
 80010ea:	2104      	movs	r1, #4
 80010ec:	481b      	ldr	r0, [pc, #108]	; (800115c <appTask+0x2c4>)
 80010ee:	f001 faa5 	bl	800263c <D_GPIO_Set>

		IO_RESET_2ND_SOL();
 80010f2:	2101      	movs	r1, #1
 80010f4:	4819      	ldr	r0, [pc, #100]	; (800115c <appTask+0x2c4>)
 80010f6:	f001 fab1 	bl	800265c <D_GPIO_Reset>
		//IO_RESET_BLDC3_ENA();
		//D_PWM_Set(BLDC1,300);
		//D_PWM_Set(BLDC2,3000);
		//D_PWM_Set(BLDC3,3500);
		//JP_Lift_Up();
		BLDC_GoLing_SetMotorState(false, true);
 80010fa:	2101      	movs	r1, #1
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 f903 	bl	8001308 <BLDC_GoLing_SetMotorState>
		BLDC_GoLing_SetSpeedTrapezoidal(20, 1);
 8001102:	2101      	movs	r1, #1
 8001104:	2014      	movs	r0, #20
 8001106:	f000 f855 	bl	80011b4 <BLDC_GoLing_SetSpeedTrapezoidal>
		BLDC_Table_SetMotorState(false, true);
 800110a:	2101      	movs	r1, #1
 800110c:	2000      	movs	r0, #0
 800110e:	f000 fa33 	bl	8001578 <BLDC_Table_SetMotorState>
		BLDC_Table_SetSpeedTrapezoidal(2, -1);
 8001112:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001116:	2002      	movs	r0, #2
 8001118:	f000 f984 	bl	8001424 <BLDC_Table_SetSpeedTrapezoidal>
	}

	for(int i=0; i<8; i++){
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	e038      	b.n	8001194 <appTask+0x2fc>
 8001122:	bf00      	nop
 8001124:	200000f0 	.word	0x200000f0
 8001128:	200000a0 	.word	0x200000a0
 800112c:	200000a4 	.word	0x200000a4
 8001130:	200000a8 	.word	0x200000a8
 8001134:	20000054 	.word	0x20000054
 8001138:	20000014 	.word	0x20000014
 800113c:	20000018 	.word	0x20000018
 8001140:	200000ac 	.word	0x200000ac
 8001144:	200000b0 	.word	0x200000b0
 8001148:	2000001c 	.word	0x2000001c
 800114c:	200000b4 	.word	0x200000b4
 8001150:	20000020 	.word	0x20000020
 8001154:	20000074 	.word	0x20000074
 8001158:	2000007c 	.word	0x2000007c
 800115c:	40020800 	.word	0x40020800
 8001160:	40020000 	.word	0x40020000
 8001164:	200000b8 	.word	0x200000b8
 8001168:	40020c00 	.word	0x40020c00
 800116c:	40020400 	.word	0x40020400
		if(rcvData[0][i] != 0) rcvDataJudge[i] = rcvData[0][i];
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <appTask+0x314>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d008      	beq.n	800118e <appTask+0x2f6>
 800117c:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <appTask+0x314>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	7819      	ldrb	r1, [r3, #0]
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <appTask+0x318>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	460a      	mov	r2, r1
 800118c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<8; i++){
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3301      	adds	r3, #1
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b07      	cmp	r3, #7
 8001198:	ddea      	ble.n	8001170 <appTask+0x2d8>
	}
	//デバッグ用
	int16_t debug_bits = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	807b      	strh	r3, [r7, #2]
	debug_bits &= 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	807b      	strh	r3, [r7, #2]
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", sndData[0][0],sndData[0][1],sndData[0][2],sndData[0][3],sndData[0][4],sndData[0][5],sndData[0][6],sndData[0][7]);
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", rcvData[0][0],rcvData[0][1],rcvData[0][2],rcvData[0][3],rcvData[0][4],rcvData[0][5],rcvData[0][6],rcvData[0][7]);
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", rcvDataJudge[0],rcvDataJudge[1],rcvDataJudge[2],rcvDataJudge[3],rcvDataJudge[4],rcvDataJudge[5],rcvDataJudge[6],rcvDataJudge[7]);
	D_Mess_printf("id : %3d, err : %3d\n", rcvData[1][0],rcvData[1][1]);
	*/
	return 0;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000074 	.word	0x20000074
 80011b0:	20000094 	.word	0x20000094

080011b4 <BLDC_GoLing_SetSpeedTrapezoidal>:

void BLDC_GoLing_SetSpeedTrapezoidal(int speed, int dir){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	if(speed < 0) speed = 0;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da01      	bge.n	80011c8 <BLDC_GoLing_SetSpeedTrapezoidal+0x14>
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
	if(speed > 100) speed = 100;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b64      	cmp	r3, #100	; 0x64
 80011cc:	dd01      	ble.n	80011d2 <BLDC_GoLing_SetSpeedTrapezoidal+0x1e>
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	607b      	str	r3, [r7, #4]
	speed *= dir;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	fb02 f303 	mul.w	r3, r2, r3
 80011da:	607b      	str	r3, [r7, #4]

	static int recentSetSpeed = 0;
	static double nowSpeed = 0.0;
	static double speedAdd = 0.0;
	if(speed != recentSetSpeed){
 80011dc:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <BLDC_GoLing_SetSpeedTrapezoidal+0x140>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d015      	beq.n	8001212 <BLDC_GoLing_SetSpeedTrapezoidal+0x5e>
		speedAdd = ((double)speed - nowSpeed) / BLDC_GoLing_TrapezoidalTargetTime;
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff f95e 	bl	80004a8 <__aeabi_i2d>
 80011ec:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <BLDC_GoLing_SetSpeedTrapezoidal+0x144>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff f80b 	bl	800020c <__aeabi_dsub>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <BLDC_GoLing_SetSpeedTrapezoidal+0x148>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fae4 	bl	80007d0 <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	493c      	ldr	r1, [pc, #240]	; (8001300 <BLDC_GoLing_SetSpeedTrapezoidal+0x14c>)
 800120e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	recentSetSpeed = speed;
 8001212:	4a38      	ldr	r2, [pc, #224]	; (80012f4 <BLDC_GoLing_SetSpeedTrapezoidal+0x140>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6013      	str	r3, [r2, #0]

	if(nowSpeed >= speed - 1.0 && nowSpeed <= speed + 1.0){
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff f945 	bl	80004a8 <__aeabi_i2d>
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	4b38      	ldr	r3, [pc, #224]	; (8001304 <BLDC_GoLing_SetSpeedTrapezoidal+0x150>)
 8001224:	f7fe fff2 	bl	800020c <__aeabi_dsub>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <BLDC_GoLing_SetSpeedTrapezoidal+0x144>)
 8001232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001236:	f7ff fc1d 	bl	8000a74 <__aeabi_dcmple>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d01c      	beq.n	800127a <BLDC_GoLing_SetSpeedTrapezoidal+0xc6>
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff f931 	bl	80004a8 <__aeabi_i2d>
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <BLDC_GoLing_SetSpeedTrapezoidal+0x150>)
 800124c:	f7fe ffe0 	bl	8000210 <__adddf3>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <BLDC_GoLing_SetSpeedTrapezoidal+0x144>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff fc13 	bl	8000a88 <__aeabi_dcmpge>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <BLDC_GoLing_SetSpeedTrapezoidal+0xc6>
		nowSpeed = speed;
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff f91d 	bl	80004a8 <__aeabi_i2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4921      	ldr	r1, [pc, #132]	; (80012f8 <BLDC_GoLing_SetSpeedTrapezoidal+0x144>)
 8001274:	e9c1 2300 	strd	r2, r3, [r1]
 8001278:	e00c      	b.n	8001294 <BLDC_GoLing_SetSpeedTrapezoidal+0xe0>
	}else{
		nowSpeed += speedAdd;
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <BLDC_GoLing_SetSpeedTrapezoidal+0x144>)
 800127c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <BLDC_GoLing_SetSpeedTrapezoidal+0x14c>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7fe ffc3 	bl	8000210 <__adddf3>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	491a      	ldr	r1, [pc, #104]	; (80012f8 <BLDC_GoLing_SetSpeedTrapezoidal+0x144>)
 8001290:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(nowSpeed > 0.0){
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <BLDC_GoLing_SetSpeedTrapezoidal+0x144>)
 8001296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	f7ff fbfb 	bl	8000a9c <__aeabi_dcmpgt>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00f      	beq.n	80012cc <BLDC_GoLing_SetSpeedTrapezoidal+0x118>
		BLDC_GoLing_SetMotorSpeed(abs((int)nowSpeed), 1);
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <BLDC_GoLing_SetSpeedTrapezoidal+0x144>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fbfb 	bl	8000ab0 <__aeabi_d2iz>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bfb8      	it	lt
 80012c0:	425b      	neglt	r3, r3
 80012c2:	2101      	movs	r1, #1
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f863 	bl	8001390 <BLDC_GoLing_SetMotorSpeed>
	}else{
		BLDC_GoLing_SetMotorSpeed(abs((int)nowSpeed), -1);
	}
}
 80012ca:	e00f      	b.n	80012ec <BLDC_GoLing_SetSpeedTrapezoidal+0x138>
		BLDC_GoLing_SetMotorSpeed(abs((int)nowSpeed), -1);
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <BLDC_GoLing_SetSpeedTrapezoidal+0x144>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fbeb 	bl	8000ab0 <__aeabi_d2iz>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bfb8      	it	lt
 80012e0:	425b      	neglt	r3, r3
 80012e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f852 	bl	8001390 <BLDC_GoLing_SetMotorSpeed>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200000bc 	.word	0x200000bc
 80012f8:	200000c0 	.word	0x200000c0
 80012fc:	20000000 	.word	0x20000000
 8001300:	200000c8 	.word	0x200000c8
 8001304:	3ff00000 	.word	0x3ff00000

08001308 <BLDC_GoLing_SetMotorState>:

void BLDC_GoLing_SetMotorState(bool _stop, bool _ena){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	460a      	mov	r2, r1
 8001312:	71fb      	strb	r3, [r7, #7]
 8001314:	4613      	mov	r3, r2
 8001316:	71bb      	strb	r3, [r7, #6]
	static bool _isStop = false;
	static bool _isEna = false;
	_isStop = _stop;
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <BLDC_GoLing_SetMotorState+0x78>)
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	7013      	strb	r3, [r2, #0]
	_isEna = _ena;
 800131e:	4a19      	ldr	r2, [pc, #100]	; (8001384 <BLDC_GoLing_SetMotorState+0x7c>)
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	7013      	strb	r3, [r2, #0]
	if(_isStop){
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <BLDC_GoLing_SetMotorState+0x78>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <BLDC_GoLing_SetMotorState+0x36>
		IO_RESET_GOLING_BRAKE();
 800132c:	2108      	movs	r1, #8
 800132e:	4816      	ldr	r0, [pc, #88]	; (8001388 <BLDC_GoLing_SetMotorState+0x80>)
 8001330:	f001 f994 	bl	800265c <D_GPIO_Reset>
		IO_RESET_GOLING_START();
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	4815      	ldr	r0, [pc, #84]	; (800138c <BLDC_GoLing_SetMotorState+0x84>)
 8001338:	f001 f990 	bl	800265c <D_GPIO_Reset>
		return;
 800133c:	e01c      	b.n	8001378 <BLDC_GoLing_SetMotorState+0x70>
	}else{
		IO_SET_GOLING_BRAKE();
 800133e:	2108      	movs	r1, #8
 8001340:	4811      	ldr	r0, [pc, #68]	; (8001388 <BLDC_GoLing_SetMotorState+0x80>)
 8001342:	f001 f97b 	bl	800263c <D_GPIO_Set>
		IO_SET_GOLING_START();
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	4810      	ldr	r0, [pc, #64]	; (800138c <BLDC_GoLing_SetMotorState+0x84>)
 800134a:	f001 f977 	bl	800263c <D_GPIO_Set>
	}
	if(_isEna){
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <BLDC_GoLing_SetMotorState+0x7c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d008      	beq.n	8001368 <BLDC_GoLing_SetMotorState+0x60>
		IO_SET_GOLING_BRAKE();
 8001356:	2108      	movs	r1, #8
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <BLDC_GoLing_SetMotorState+0x80>)
 800135a:	f001 f96f 	bl	800263c <D_GPIO_Set>
		IO_SET_GOLING_START();
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	480a      	ldr	r0, [pc, #40]	; (800138c <BLDC_GoLing_SetMotorState+0x84>)
 8001362:	f001 f96b 	bl	800263c <D_GPIO_Set>
 8001366:	e007      	b.n	8001378 <BLDC_GoLing_SetMotorState+0x70>
	}else{
		IO_RESET_GOLING_BRAKE();
 8001368:	2108      	movs	r1, #8
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <BLDC_GoLing_SetMotorState+0x80>)
 800136c:	f001 f976 	bl	800265c <D_GPIO_Reset>
		IO_RESET_GOLING_START();
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <BLDC_GoLing_SetMotorState+0x84>)
 8001374:	f001 f972 	bl	800265c <D_GPIO_Reset>
	}
}
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200000d0 	.word	0x200000d0
 8001384:	200000d1 	.word	0x200000d1
 8001388:	40020800 	.word	0x40020800
 800138c:	40020000 	.word	0x40020000

08001390 <BLDC_GoLing_SetMotorSpeed>:

void BLDC_GoLing_SetMotorSpeed(int speed, int dir){
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
	if(speed < 0) speed = 0;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	da01      	bge.n	80013a4 <BLDC_GoLing_SetMotorSpeed+0x14>
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
	if(speed > 100) speed = 100;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b64      	cmp	r3, #100	; 0x64
 80013a8:	dd01      	ble.n	80013ae <BLDC_GoLing_SetMotorSpeed+0x1e>
 80013aa:	2364      	movs	r3, #100	; 0x64
 80013ac:	607b      	str	r3, [r7, #4]
	BLDC_GoLing_Speed = (uint8_t)((double)speed * (double)BLDC_MaxCount/100.0);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff f87a 	bl	80004a8 <__aeabi_i2d>
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <BLDC_GoLing_SetMotorSpeed+0x84>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f863 	bl	8000488 <__aeabi_ui2d>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4620      	mov	r0, r4
 80013c8:	4629      	mov	r1, r5
 80013ca:	f7ff f8d7 	bl	800057c <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <BLDC_GoLing_SetMotorSpeed+0x88>)
 80013dc:	f7ff f9f8 	bl	80007d0 <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fb8a 	bl	8000b00 <__aeabi_d2uiz>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <BLDC_GoLing_SetMotorSpeed+0x8c>)
 80013f2:	701a      	strb	r2, [r3, #0]
	if(dir > 0){
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	dd04      	ble.n	8001404 <BLDC_GoLing_SetMotorSpeed+0x74>
		IO_RESET_GOLING_DIR();
 80013fa:	2102      	movs	r1, #2
 80013fc:	4808      	ldr	r0, [pc, #32]	; (8001420 <BLDC_GoLing_SetMotorSpeed+0x90>)
 80013fe:	f001 f92d 	bl	800265c <D_GPIO_Reset>
	}else{
		IO_SET_GOLING_DIR();
	}
}
 8001402:	e003      	b.n	800140c <BLDC_GoLing_SetMotorSpeed+0x7c>
		IO_SET_GOLING_DIR();
 8001404:	2102      	movs	r1, #2
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <BLDC_GoLing_SetMotorSpeed+0x90>)
 8001408:	f001 f918 	bl	800263c <D_GPIO_Set>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bdb0      	pop	{r4, r5, r7, pc}
 8001414:	20000010 	.word	0x20000010
 8001418:	40590000 	.word	0x40590000
 800141c:	2000009c 	.word	0x2000009c
 8001420:	40020400 	.word	0x40020400

08001424 <BLDC_Table_SetSpeedTrapezoidal>:

void BLDC_Table_SetSpeedTrapezoidal(int speed, int dir){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
	if(speed < 0) speed = 0;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	da01      	bge.n	8001438 <BLDC_Table_SetSpeedTrapezoidal+0x14>
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
	if(speed > 100) speed = 100;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b64      	cmp	r3, #100	; 0x64
 800143c:	dd01      	ble.n	8001442 <BLDC_Table_SetSpeedTrapezoidal+0x1e>
 800143e:	2364      	movs	r3, #100	; 0x64
 8001440:	607b      	str	r3, [r7, #4]
	speed *= dir;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	607b      	str	r3, [r7, #4]

	static int recentSetSpeed = 0;
	static double nowSpeed = 0.0;
	static double speedAdd = 0.0;
	if(speed != recentSetSpeed){
 800144c:	4b45      	ldr	r3, [pc, #276]	; (8001564 <BLDC_Table_SetSpeedTrapezoidal+0x140>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	429a      	cmp	r2, r3
 8001454:	d015      	beq.n	8001482 <BLDC_Table_SetSpeedTrapezoidal+0x5e>
		speedAdd = ((double)speed - nowSpeed) / BLDC_Table_TrapezoidalTargetTime;
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff f826 	bl	80004a8 <__aeabi_i2d>
 800145c:	4b42      	ldr	r3, [pc, #264]	; (8001568 <BLDC_Table_SetSpeedTrapezoidal+0x144>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7fe fed3 	bl	800020c <__aeabi_dsub>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <BLDC_Table_SetSpeedTrapezoidal+0x148>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f9ac 	bl	80007d0 <__aeabi_ddiv>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	493c      	ldr	r1, [pc, #240]	; (8001570 <BLDC_Table_SetSpeedTrapezoidal+0x14c>)
 800147e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	recentSetSpeed = speed;
 8001482:	4a38      	ldr	r2, [pc, #224]	; (8001564 <BLDC_Table_SetSpeedTrapezoidal+0x140>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6013      	str	r3, [r2, #0]

	if(nowSpeed >= speed - 1.0 && nowSpeed <= speed + 1.0){
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff f80d 	bl	80004a8 <__aeabi_i2d>
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <BLDC_Table_SetSpeedTrapezoidal+0x150>)
 8001494:	f7fe feba 	bl	800020c <__aeabi_dsub>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	4b31      	ldr	r3, [pc, #196]	; (8001568 <BLDC_Table_SetSpeedTrapezoidal+0x144>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7ff fae5 	bl	8000a74 <__aeabi_dcmple>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01c      	beq.n	80014ea <BLDC_Table_SetSpeedTrapezoidal+0xc6>
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7fe fff9 	bl	80004a8 <__aeabi_i2d>
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <BLDC_Table_SetSpeedTrapezoidal+0x150>)
 80014bc:	f7fe fea8 	bl	8000210 <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <BLDC_Table_SetSpeedTrapezoidal+0x144>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff fadb 	bl	8000a88 <__aeabi_dcmpge>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <BLDC_Table_SetSpeedTrapezoidal+0xc6>
		nowSpeed = speed;
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7fe ffe5 	bl	80004a8 <__aeabi_i2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4921      	ldr	r1, [pc, #132]	; (8001568 <BLDC_Table_SetSpeedTrapezoidal+0x144>)
 80014e4:	e9c1 2300 	strd	r2, r3, [r1]
 80014e8:	e00c      	b.n	8001504 <BLDC_Table_SetSpeedTrapezoidal+0xe0>
	}else{
		nowSpeed += speedAdd;
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <BLDC_Table_SetSpeedTrapezoidal+0x144>)
 80014ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <BLDC_Table_SetSpeedTrapezoidal+0x14c>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7fe fe8b 	bl	8000210 <__adddf3>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	491a      	ldr	r1, [pc, #104]	; (8001568 <BLDC_Table_SetSpeedTrapezoidal+0x144>)
 8001500:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if(nowSpeed > 0.0){
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <BLDC_Table_SetSpeedTrapezoidal+0x144>)
 8001506:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	f7ff fac3 	bl	8000a9c <__aeabi_dcmpgt>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00f      	beq.n	800153c <BLDC_Table_SetSpeedTrapezoidal+0x118>
		BLDC_Table_SetMotorSpeed(abs((int)nowSpeed), 1);
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <BLDC_Table_SetSpeedTrapezoidal+0x144>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fac3 	bl	8000ab0 <__aeabi_d2iz>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	bfb8      	it	lt
 8001530:	425b      	neglt	r3, r3
 8001532:	2101      	movs	r1, #1
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f867 	bl	8001608 <BLDC_Table_SetMotorSpeed>
	}else{
		BLDC_Table_SetMotorSpeed(abs((int)nowSpeed), -1);
	}
}
 800153a:	e00f      	b.n	800155c <BLDC_Table_SetSpeedTrapezoidal+0x138>
		BLDC_Table_SetMotorSpeed(abs((int)nowSpeed), -1);
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <BLDC_Table_SetSpeedTrapezoidal+0x144>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fab3 	bl	8000ab0 <__aeabi_d2iz>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bfb8      	it	lt
 8001550:	425b      	neglt	r3, r3
 8001552:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f856 	bl	8001608 <BLDC_Table_SetMotorSpeed>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200000d4 	.word	0x200000d4
 8001568:	200000d8 	.word	0x200000d8
 800156c:	20000008 	.word	0x20000008
 8001570:	200000e0 	.word	0x200000e0
 8001574:	3ff00000 	.word	0x3ff00000

08001578 <BLDC_Table_SetMotorState>:

void BLDC_Table_SetMotorState(bool _stop, bool _ena){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	460a      	mov	r2, r1
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	4613      	mov	r3, r2
 8001586:	71bb      	strb	r3, [r7, #6]
	static bool _isStop = false;
	static bool _isEna = false;
	_isStop = _stop;
 8001588:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <BLDC_Table_SetMotorState+0x80>)
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	7013      	strb	r3, [r2, #0]
	_isEna = _ena;
 800158e:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <BLDC_Table_SetMotorState+0x84>)
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	7013      	strb	r3, [r2, #0]
	if(_isStop){
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <BLDC_Table_SetMotorState+0x80>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d009      	beq.n	80015b0 <BLDC_Table_SetMotorState+0x38>
		IO_RESET_TABLE_BRAKE();
 800159c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a0:	4817      	ldr	r0, [pc, #92]	; (8001600 <BLDC_Table_SetMotorState+0x88>)
 80015a2:	f001 f85b 	bl	800265c <D_GPIO_Reset>
		IO_RESET_TABLE_START();
 80015a6:	2101      	movs	r1, #1
 80015a8:	4816      	ldr	r0, [pc, #88]	; (8001604 <BLDC_Table_SetMotorState+0x8c>)
 80015aa:	f001 f847 	bl	800263c <D_GPIO_Set>
		return;
 80015ae:	e01f      	b.n	80015f0 <BLDC_Table_SetMotorState+0x78>
	}else{
		IO_SET_TABLE_BRAKE();
 80015b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b4:	4812      	ldr	r0, [pc, #72]	; (8001600 <BLDC_Table_SetMotorState+0x88>)
 80015b6:	f001 f841 	bl	800263c <D_GPIO_Set>
		IO_SET_TABLE_START();
 80015ba:	2101      	movs	r1, #1
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <BLDC_Table_SetMotorState+0x8c>)
 80015be:	f001 f84d 	bl	800265c <D_GPIO_Reset>
	}
	if(_isEna){
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <BLDC_Table_SetMotorState+0x84>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d009      	beq.n	80015de <BLDC_Table_SetMotorState+0x66>
		IO_SET_TABLE_BRAKE();
 80015ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ce:	480c      	ldr	r0, [pc, #48]	; (8001600 <BLDC_Table_SetMotorState+0x88>)
 80015d0:	f001 f834 	bl	800263c <D_GPIO_Set>
		IO_SET_TABLE_START();
 80015d4:	2101      	movs	r1, #1
 80015d6:	480b      	ldr	r0, [pc, #44]	; (8001604 <BLDC_Table_SetMotorState+0x8c>)
 80015d8:	f001 f840 	bl	800265c <D_GPIO_Reset>
 80015dc:	e008      	b.n	80015f0 <BLDC_Table_SetMotorState+0x78>
	}else{
		IO_RESET_TABLE_BRAKE();
 80015de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <BLDC_Table_SetMotorState+0x88>)
 80015e4:	f001 f83a 	bl	800265c <D_GPIO_Reset>
		IO_RESET_TABLE_START();
 80015e8:	2101      	movs	r1, #1
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <BLDC_Table_SetMotorState+0x8c>)
 80015ec:	f001 f826 	bl	800263c <D_GPIO_Set>
	}
}
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200000e8 	.word	0x200000e8
 80015fc:	200000e9 	.word	0x200000e9
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400

08001608 <BLDC_Table_SetMotorSpeed>:

void BLDC_Table_SetMotorSpeed(int speed, int dir){
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	if(speed < 0) speed = 0;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	da01      	bge.n	800161c <BLDC_Table_SetMotorSpeed+0x14>
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
	if(speed > 100) speed = 100;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	dd01      	ble.n	8001626 <BLDC_Table_SetMotorSpeed+0x1e>
 8001622:	2364      	movs	r3, #100	; 0x64
 8001624:	607b      	str	r3, [r7, #4]
	BLDC_Table_Speed = (uint8_t)((double)speed * (double)BLDC_MaxCount/100.0);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7fe ff3e 	bl	80004a8 <__aeabi_i2d>
 800162c:	4604      	mov	r4, r0
 800162e:	460d      	mov	r5, r1
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <BLDC_Table_SetMotorSpeed+0x84>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff27 	bl	8000488 <__aeabi_ui2d>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4620      	mov	r0, r4
 8001640:	4629      	mov	r1, r5
 8001642:	f7fe ff9b 	bl	800057c <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <BLDC_Table_SetMotorSpeed+0x88>)
 8001654:	f7ff f8bc 	bl	80007d0 <__aeabi_ddiv>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff fa4e 	bl	8000b00 <__aeabi_d2uiz>
 8001664:	4603      	mov	r3, r0
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <BLDC_Table_SetMotorSpeed+0x8c>)
 800166a:	701a      	strb	r2, [r3, #0]
	if(dir > 0){
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	dd04      	ble.n	800167c <BLDC_Table_SetMotorSpeed+0x74>
		IO_RESET_TABLE_DIR();
 8001672:	2102      	movs	r1, #2
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <BLDC_Table_SetMotorSpeed+0x90>)
 8001676:	f000 fff1 	bl	800265c <D_GPIO_Reset>
	}else{
		IO_SET_TABLE_DIR();
	}
}
 800167a:	e003      	b.n	8001684 <BLDC_Table_SetMotorSpeed+0x7c>
		IO_SET_TABLE_DIR();
 800167c:	2102      	movs	r1, #2
 800167e:	4806      	ldr	r0, [pc, #24]	; (8001698 <BLDC_Table_SetMotorSpeed+0x90>)
 8001680:	f000 ffdc 	bl	800263c <D_GPIO_Set>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bdb0      	pop	{r4, r5, r7, pc}
 800168c:	20000010 	.word	0x20000010
 8001690:	40590000 	.word	0x40590000
 8001694:	2000009d 	.word	0x2000009d
 8001698:	40020000 	.word	0x40020000

0800169c <BLDC_Set>:

void BLDC_Set(void){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	static uint8_t counter = 0;
	static bool _golingSet = false;
	static bool _tableSet = false;
	if(counter >= BLDC_MaxCount){
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <BLDC_Set+0x98>)
 80016a2:	781a      	ldrb	r2, [r3, #0]
 80016a4:	4b24      	ldr	r3, [pc, #144]	; (8001738 <BLDC_Set+0x9c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d318      	bcc.n	80016de <BLDC_Set+0x42>
		counter = 0;
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <BLDC_Set+0x98>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
		if(BLDC_GoLing_Speed != 0) IO_SET_GOLING_PWM();
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <BLDC_Set+0xa0>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <BLDC_Set+0x26>
 80016ba:	2140      	movs	r1, #64	; 0x40
 80016bc:	4820      	ldr	r0, [pc, #128]	; (8001740 <BLDC_Set+0xa4>)
 80016be:	f000 ffbd 	bl	800263c <D_GPIO_Set>
		if(BLDC_Table_Speed != 0) IO_SET_TABLE_PWM();
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <BLDC_Set+0xa8>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <BLDC_Set+0x36>
 80016ca:	2102      	movs	r1, #2
 80016cc:	481e      	ldr	r0, [pc, #120]	; (8001748 <BLDC_Set+0xac>)
 80016ce:	f000 ffb5 	bl	800263c <D_GPIO_Set>
		_golingSet = true;
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <BLDC_Set+0xb0>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	701a      	strb	r2, [r3, #0]
		_tableSet = true;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <BLDC_Set+0xb4>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
	}
	if(counter >= BLDC_GoLing_Speed && _golingSet){
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <BLDC_Set+0x98>)
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <BLDC_Set+0xa0>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d30a      	bcc.n	8001700 <BLDC_Set+0x64>
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <BLDC_Set+0xb0>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <BLDC_Set+0x64>
		IO_RESET_GOLING_PWM();
 80016f2:	2140      	movs	r1, #64	; 0x40
 80016f4:	4812      	ldr	r0, [pc, #72]	; (8001740 <BLDC_Set+0xa4>)
 80016f6:	f000 ffb1 	bl	800265c <D_GPIO_Reset>
		_golingSet = false;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <BLDC_Set+0xb0>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
	}
	if(counter >= BLDC_Table_Speed && _tableSet){
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <BLDC_Set+0x98>)
 8001702:	781a      	ldrb	r2, [r3, #0]
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <BLDC_Set+0xa8>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d30a      	bcc.n	8001722 <BLDC_Set+0x86>
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <BLDC_Set+0xb4>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <BLDC_Set+0x86>
		IO_RESET_TABLE_PWM();
 8001714:	2102      	movs	r1, #2
 8001716:	480c      	ldr	r0, [pc, #48]	; (8001748 <BLDC_Set+0xac>)
 8001718:	f000 ffa0 	bl	800265c <D_GPIO_Reset>
		_tableSet = false;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <BLDC_Set+0xb4>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
	}
	counter++;
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <BLDC_Set+0x98>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b02      	ldr	r3, [pc, #8]	; (8001734 <BLDC_Set+0x98>)
 800172c:	701a      	strb	r2, [r3, #0]
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200000ea 	.word	0x200000ea
 8001738:	20000010 	.word	0x20000010
 800173c:	2000009c 	.word	0x2000009c
 8001740:	40020000 	.word	0x40020000
 8001744:	2000009d 	.word	0x2000009d
 8001748:	40020800 	.word	0x40020800
 800174c:	200000eb 	.word	0x200000eb
 8001750:	200000ec 	.word	0x200000ec

08001754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001758:	f000 ffec 	bl	8002734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800175c:	f000 f81c 	bl	8001798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001760:	f000 f9a2 	bl	8001aa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001764:	f000 f95a 	bl	8001a1c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001768:	f000 f904 	bl	8001974 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800176c:	f000 f92c 	bl	80019c8 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001770:	f000 f87e 	bl	8001870 <MX_CAN1_Init>
  MX_TIM2_Init();
 8001774:	f000 f8b2 	bl	80018dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  D_PWM_Init();
 8001778:	f000 ffd4 	bl	8002724 <D_PWM_Init>
  D_CAN_Init();
 800177c:	f000 fdd6 	bl	800232c <D_CAN_Init>

  HAL_TIM_Base_Start_IT(&htim2);
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <main+0x40>)
 8001782:	f003 fb9b 	bl	8004ebc <HAL_TIM_Base_Start_IT>

  appInit();
 8001786:	f7ff fb57 	bl	8000e38 <appInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //メインタスクの処理
	  appTask();
 800178a:	f7ff fb85 	bl	8000e98 <appTask>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
//		  D_Mess_printf("tes2");
//		  D_Mess_flush();
	  }*/
	  D_Mess_flush();
 800178e:	f000 ff8b 	bl	80026a8 <D_Mess_flush>
	  appTask();
 8001792:	e7fa      	b.n	800178a <main+0x36>
 8001794:	20000750 	.word	0x20000750

08001798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b094      	sub	sp, #80	; 0x50
 800179c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	2234      	movs	r2, #52	; 0x34
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f004 ff92 	bl	80066d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <SystemClock_Config+0xd0>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	4a28      	ldr	r2, [pc, #160]	; (8001868 <SystemClock_Config+0xd0>)
 80017c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ca:	6413      	str	r3, [r2, #64]	; 0x40
 80017cc:	4b26      	ldr	r3, [pc, #152]	; (8001868 <SystemClock_Config+0xd0>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017d8:	2300      	movs	r3, #0
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	4b23      	ldr	r3, [pc, #140]	; (800186c <SystemClock_Config+0xd4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017e4:	4a21      	ldr	r2, [pc, #132]	; (800186c <SystemClock_Config+0xd4>)
 80017e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <SystemClock_Config+0xd4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fc:	2301      	movs	r3, #1
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001800:	2310      	movs	r3, #16
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001804:	2302      	movs	r3, #2
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001808:	2300      	movs	r3, #0
 800180a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800180c:	2308      	movs	r3, #8
 800180e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001810:	2350      	movs	r3, #80	; 0x50
 8001812:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001814:	2302      	movs	r3, #2
 8001816:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001818:	2302      	movs	r3, #2
 800181a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800181c:	2302      	movs	r3, #2
 800181e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4618      	mov	r0, r3
 8001826:	f003 f85b 	bl	80048e0 <HAL_RCC_OscConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001830:	f000 fa8c 	bl	8001d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001834:	230f      	movs	r3, #15
 8001836:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001838:	2302      	movs	r3, #2
 800183a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001844:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	2102      	movs	r1, #2
 8001850:	4618      	mov	r0, r3
 8001852:	f002 fd79 	bl	8004348 <HAL_RCC_ClockConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800185c:	f000 fa76 	bl	8001d4c <Error_Handler>
  }
}
 8001860:	bf00      	nop
 8001862:	3750      	adds	r7, #80	; 0x50
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	40007000 	.word	0x40007000

08001870 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_CAN1_Init+0x64>)
 8001876:	4a18      	ldr	r2, [pc, #96]	; (80018d8 <MX_CAN1_Init+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <MX_CAN1_Init+0x64>)
 800187c:	2204      	movs	r2, #4
 800187e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_CAN1_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <MX_CAN1_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_CAN1_Init+0x64>)
 800188e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001892:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_CAN1_Init+0x64>)
 8001896:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800189a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <MX_CAN1_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_CAN1_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <MX_CAN1_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_CAN1_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MX_CAN1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_CAN1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_CAN1_Init+0x64>)
 80018c2:	f000 ffa9 	bl	8002818 <HAL_CAN_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80018cc:	f000 fa3e 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200007dc 	.word	0x200007dc
 80018d8:	40006400 	.word	0x40006400

080018dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	463b      	mov	r3, r7
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <MX_TIM2_Init+0x94>)
 80018fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <MX_TIM2_Init+0x94>)
 8001902:	2208      	movs	r2, #8
 8001904:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <MX_TIM2_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <MX_TIM2_Init+0x94>)
 800190e:	2263      	movs	r2, #99	; 0x63
 8001910:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <MX_TIM2_Init+0x94>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <MX_TIM2_Init+0x94>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800191e:	4814      	ldr	r0, [pc, #80]	; (8001970 <MX_TIM2_Init+0x94>)
 8001920:	f003 fa7c 	bl	8004e1c <HAL_TIM_Base_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800192a:	f000 fa0f 	bl	8001d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001932:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	4619      	mov	r1, r3
 800193a:	480d      	ldr	r0, [pc, #52]	; (8001970 <MX_TIM2_Init+0x94>)
 800193c:	f003 fc36 	bl	80051ac <HAL_TIM_ConfigClockSource>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001946:	f000 fa01 	bl	8001d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001952:	463b      	mov	r3, r7
 8001954:	4619      	mov	r1, r3
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <MX_TIM2_Init+0x94>)
 8001958:	f003 fe52 	bl	8005600 <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001962:	f000 f9f3 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000750 	.word	0x20000750

08001974 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <MX_USART1_UART_Init+0x50>)
 800197c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 8001980:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001984:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <MX_USART1_UART_Init+0x4c>)
 80019ac:	f003 feb8 	bl	8005720 <HAL_UART_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019b6:	f000 f9c9 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2000070c 	.word	0x2000070c
 80019c4:	40011000 	.word	0x40011000

080019c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <MX_USART2_UART_Init+0x50>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_USART2_UART_Init+0x4c>)
 8001a00:	f003 fe8e 	bl	8005720 <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a0a:	f000 f99f 	bl	8001d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000798 	.word	0x20000798
 8001a18:	40004400 	.word	0x40004400

08001a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <MX_DMA_Init+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <MX_DMA_Init+0x88>)
 8001a2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <MX_DMA_Init+0x88>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MX_DMA_Init+0x88>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <MX_DMA_Init+0x88>)
 8001a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_DMA_Init+0x88>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2010      	movs	r0, #16
 8001a60:	f001 fe73 	bl	800374a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a64:	2010      	movs	r0, #16
 8001a66:	f001 fe8c 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2011      	movs	r0, #17
 8001a70:	f001 fe6b 	bl	800374a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a74:	2011      	movs	r0, #17
 8001a76:	f001 fe84 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	203a      	movs	r0, #58	; 0x3a
 8001a80:	f001 fe63 	bl	800374a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a84:	203a      	movs	r0, #58	; 0x3a
 8001a86:	f001 fe7c 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2046      	movs	r0, #70	; 0x46
 8001a90:	f001 fe5b 	bl	800374a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001a94:	2046      	movs	r0, #70	; 0x46
 8001a96:	f001 fe74 	bl	8003782 <HAL_NVIC_EnableIRQ>

}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	4b74      	ldr	r3, [pc, #464]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a73      	ldr	r2, [pc, #460]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b71      	ldr	r3, [pc, #452]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b6d      	ldr	r3, [pc, #436]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a6c      	ldr	r2, [pc, #432]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	4b66      	ldr	r3, [pc, #408]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a65      	ldr	r2, [pc, #404]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b63      	ldr	r3, [pc, #396]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	4b5f      	ldr	r3, [pc, #380]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a5e      	ldr	r2, [pc, #376]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b5c      	ldr	r3, [pc, #368]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	4b58      	ldr	r3, [pc, #352]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a57      	ldr	r2, [pc, #348]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001b38:	f043 0308 	orr.w	r3, r3, #8
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b55      	ldr	r3, [pc, #340]	; (8001c94 <MX_GPIO_Init+0x1ec>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8001b50:	4851      	ldr	r0, [pc, #324]	; (8001c98 <MX_GPIO_Init+0x1f0>)
 8001b52:	f002 fbdf 	bl	8004314 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8001b56:	2200      	movs	r2, #0
 8001b58:	f248 01f3 	movw	r1, #33011	; 0x80f3
 8001b5c:	484f      	ldr	r0, [pc, #316]	; (8001c9c <MX_GPIO_Init+0x1f4>)
 8001b5e:	f002 fbd9 	bl	8004314 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2183      	movs	r1, #131	; 0x83
 8001b66:	484e      	ldr	r0, [pc, #312]	; (8001ca0 <MX_GPIO_Init+0x1f8>)
 8001b68:	f002 fbd4 	bl	8004314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2104      	movs	r1, #4
 8001b70:	484c      	ldr	r0, [pc, #304]	; (8001ca4 <MX_GPIO_Init+0x1fc>)
 8001b72:	f002 fbcf 	bl	8004314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b7c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4842      	ldr	r0, [pc, #264]	; (8001c98 <MX_GPIO_Init+0x1f0>)
 8001b8e:	f002 fa15 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10
 8001b92:	f641 430d 	movw	r3, #7181	; 0x1c0d
 8001b96:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	483b      	ldr	r0, [pc, #236]	; (8001c98 <MX_GPIO_Init+0x1f0>)
 8001bac:	f002 fa06 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4834      	ldr	r0, [pc, #208]	; (8001c98 <MX_GPIO_Init+0x1f0>)
 8001bc8:	f002 f9f8 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin
                           PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8001bcc:	f248 03b3 	movw	r3, #32947	; 0x80b3
 8001bd0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	482d      	ldr	r0, [pc, #180]	; (8001c9c <MX_GPIO_Init+0x1f4>)
 8001be6:	f002 f9e9 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bea:	2340      	movs	r3, #64	; 0x40
 8001bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4826      	ldr	r0, [pc, #152]	; (8001c9c <MX_GPIO_Init+0x1f4>)
 8001c02:	f002 f9db 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8001c06:	2390      	movs	r3, #144	; 0x90
 8001c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	481f      	ldr	r0, [pc, #124]	; (8001c98 <MX_GPIO_Init+0x1f0>)
 8001c1a:	f002 f9cf 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 8001c1e:	2383      	movs	r3, #131	; 0x83
 8001c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c22:	2301      	movs	r3, #1
 8001c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 0314 	add.w	r3, r7, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	481a      	ldr	r0, [pc, #104]	; (8001ca0 <MX_GPIO_Init+0x1f8>)
 8001c36:	f002 f9c1 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB13
                           PB14 PB15 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 8001c3a:	f24f 4374 	movw	r3, #62580	; 0xf474
 8001c3e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4814      	ldr	r0, [pc, #80]	; (8001ca0 <MX_GPIO_Init+0x1f8>)
 8001c50:	f002 f9b4 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001c54:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <MX_GPIO_Init+0x1f4>)
 8001c6a:	f002 f9a7 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c6e:	2304      	movs	r3, #4
 8001c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <MX_GPIO_Init+0x1fc>)
 8001c86:	f002 f999 	bl	8003fbc <HAL_GPIO_Init>

}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	; 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	40020c00 	.word	0x40020c00

08001ca8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_UART_TxCpltCallback+0x20>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_UART_TxCpltCallback+0x16>
	  D_Mess_TransitionCompletedCallBack();
 8001cba:	f000 fd27 	bl	800270c <D_Mess_TransitionCompletedCallBack>
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40004400 	.word	0x40004400

08001ccc <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  D_CAN_ReceiveCallBack(hcan);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 fc41 	bl	800255c <D_CAN_ReceiveCallBack>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_CAN_TxMailboxCompleteCallback>:
void HAL_CAN_TxMailboxCompleteCallback(){
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailboxComplete\n");
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailbox0Complete\n");
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailbox1Complete\n");
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailbox2Complete\n");
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_TIM_PeriodElapsedCallback+0x14>
    	BLDC_Set();
 8001d3c:	f7ff fcae 	bl	800169c <BLDC_Set>
    }
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000750 	.word	0x20000750

08001d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d50:	b672      	cpsid	i
}
 8001d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <Error_Handler+0x8>
	...

08001d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_MspInit+0x4c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d96:	2007      	movs	r0, #7
 8001d98:	f001 fccc 	bl	8003734 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800

08001da8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <HAL_CAN_MspInit+0xc4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d14c      	bne.n	8001e64 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <HAL_CAN_MspInit+0xc8>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <HAL_CAN_MspInit+0xc8>)
 8001dd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_CAN_MspInit+0xc8>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_CAN_MspInit+0xc8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <HAL_CAN_MspInit+0xc8>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_CAN_MspInit+0xc8>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e14:	2309      	movs	r3, #9
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4815      	ldr	r0, [pc, #84]	; (8001e74 <HAL_CAN_MspInit+0xcc>)
 8001e20:	f002 f8cc 	bl	8003fbc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	2013      	movs	r0, #19
 8001e2a:	f001 fc8e 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001e2e:	2013      	movs	r0, #19
 8001e30:	f001 fca7 	bl	8003782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2100      	movs	r1, #0
 8001e38:	2014      	movs	r0, #20
 8001e3a:	f001 fc86 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001e3e:	2014      	movs	r0, #20
 8001e40:	f001 fc9f 	bl	8003782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	2015      	movs	r0, #21
 8001e4a:	f001 fc7e 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001e4e:	2015      	movs	r0, #21
 8001e50:	f001 fc97 	bl	8003782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	2016      	movs	r0, #22
 8001e5a:	f001 fc76 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001e5e:	2016      	movs	r0, #22
 8001e60:	f001 fc8f 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001e64:	bf00      	nop
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40006400 	.word	0x40006400
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020400 	.word	0x40020400

08001e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e88:	d115      	bne.n	8001eb6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <HAL_TIM_Base_MspInit+0x48>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <HAL_TIM_Base_MspInit+0x48>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_TIM_Base_MspInit+0x48>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	201c      	movs	r0, #28
 8001eac:	f001 fc4d 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eb0:	201c      	movs	r0, #28
 8001eb2:	f001 fc66 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	; 0x30
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a97      	ldr	r2, [pc, #604]	; (8002140 <HAL_UART_MspInit+0x27c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	f040 8092 	bne.w	800200c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	4b95      	ldr	r3, [pc, #596]	; (8002144 <HAL_UART_MspInit+0x280>)
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	4a94      	ldr	r2, [pc, #592]	; (8002144 <HAL_UART_MspInit+0x280>)
 8001ef2:	f043 0310 	orr.w	r3, r3, #16
 8001ef6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef8:	4b92      	ldr	r3, [pc, #584]	; (8002144 <HAL_UART_MspInit+0x280>)
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	4b8e      	ldr	r3, [pc, #568]	; (8002144 <HAL_UART_MspInit+0x280>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	4a8d      	ldr	r2, [pc, #564]	; (8002144 <HAL_UART_MspInit+0x280>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6313      	str	r3, [r2, #48]	; 0x30
 8001f14:	4b8b      	ldr	r3, [pc, #556]	; (8002144 <HAL_UART_MspInit+0x280>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f32:	2307      	movs	r3, #7
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4882      	ldr	r0, [pc, #520]	; (8002148 <HAL_UART_MspInit+0x284>)
 8001f3e:	f002 f83d 	bl	8003fbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001f42:	4b82      	ldr	r3, [pc, #520]	; (800214c <HAL_UART_MspInit+0x288>)
 8001f44:	4a82      	ldr	r2, [pc, #520]	; (8002150 <HAL_UART_MspInit+0x28c>)
 8001f46:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001f48:	4b80      	ldr	r3, [pc, #512]	; (800214c <HAL_UART_MspInit+0x288>)
 8001f4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f4e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f50:	4b7e      	ldr	r3, [pc, #504]	; (800214c <HAL_UART_MspInit+0x288>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f56:	4b7d      	ldr	r3, [pc, #500]	; (800214c <HAL_UART_MspInit+0x288>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f5c:	4b7b      	ldr	r3, [pc, #492]	; (800214c <HAL_UART_MspInit+0x288>)
 8001f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f62:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f64:	4b79      	ldr	r3, [pc, #484]	; (800214c <HAL_UART_MspInit+0x288>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f6a:	4b78      	ldr	r3, [pc, #480]	; (800214c <HAL_UART_MspInit+0x288>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001f70:	4b76      	ldr	r3, [pc, #472]	; (800214c <HAL_UART_MspInit+0x288>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f76:	4b75      	ldr	r3, [pc, #468]	; (800214c <HAL_UART_MspInit+0x288>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f7c:	4b73      	ldr	r3, [pc, #460]	; (800214c <HAL_UART_MspInit+0x288>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f82:	4872      	ldr	r0, [pc, #456]	; (800214c <HAL_UART_MspInit+0x288>)
 8001f84:	f001 fc18 	bl	80037b8 <HAL_DMA_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001f8e:	f7ff fedd 	bl	8001d4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a6d      	ldr	r2, [pc, #436]	; (800214c <HAL_UART_MspInit+0x288>)
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38
 8001f98:	4a6c      	ldr	r2, [pc, #432]	; (800214c <HAL_UART_MspInit+0x288>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001f9e:	4b6d      	ldr	r3, [pc, #436]	; (8002154 <HAL_UART_MspInit+0x290>)
 8001fa0:	4a6d      	ldr	r2, [pc, #436]	; (8002158 <HAL_UART_MspInit+0x294>)
 8001fa2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001fa4:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <HAL_UART_MspInit+0x290>)
 8001fa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001faa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fac:	4b69      	ldr	r3, [pc, #420]	; (8002154 <HAL_UART_MspInit+0x290>)
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb2:	4b68      	ldr	r3, [pc, #416]	; (8002154 <HAL_UART_MspInit+0x290>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb8:	4b66      	ldr	r3, [pc, #408]	; (8002154 <HAL_UART_MspInit+0x290>)
 8001fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fbe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc0:	4b64      	ldr	r3, [pc, #400]	; (8002154 <HAL_UART_MspInit+0x290>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc6:	4b63      	ldr	r3, [pc, #396]	; (8002154 <HAL_UART_MspInit+0x290>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001fcc:	4b61      	ldr	r3, [pc, #388]	; (8002154 <HAL_UART_MspInit+0x290>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd2:	4b60      	ldr	r3, [pc, #384]	; (8002154 <HAL_UART_MspInit+0x290>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd8:	4b5e      	ldr	r3, [pc, #376]	; (8002154 <HAL_UART_MspInit+0x290>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fde:	485d      	ldr	r0, [pc, #372]	; (8002154 <HAL_UART_MspInit+0x290>)
 8001fe0:	f001 fbea 	bl	80037b8 <HAL_DMA_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001fea:	f7ff feaf 	bl	8001d4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a58      	ldr	r2, [pc, #352]	; (8002154 <HAL_UART_MspInit+0x290>)
 8001ff2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff4:	4a57      	ldr	r2, [pc, #348]	; (8002154 <HAL_UART_MspInit+0x290>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2025      	movs	r0, #37	; 0x25
 8002000:	f001 fba3 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002004:	2025      	movs	r0, #37	; 0x25
 8002006:	f001 fbbc 	bl	8003782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800200a:	e095      	b.n	8002138 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a52      	ldr	r2, [pc, #328]	; (800215c <HAL_UART_MspInit+0x298>)
 8002012:	4293      	cmp	r3, r2
 8002014:	f040 8090 	bne.w	8002138 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	4b49      	ldr	r3, [pc, #292]	; (8002144 <HAL_UART_MspInit+0x280>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	4a48      	ldr	r2, [pc, #288]	; (8002144 <HAL_UART_MspInit+0x280>)
 8002022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002026:	6413      	str	r3, [r2, #64]	; 0x40
 8002028:	4b46      	ldr	r3, [pc, #280]	; (8002144 <HAL_UART_MspInit+0x280>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	4b42      	ldr	r3, [pc, #264]	; (8002144 <HAL_UART_MspInit+0x280>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a41      	ldr	r2, [pc, #260]	; (8002144 <HAL_UART_MspInit+0x280>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_UART_MspInit+0x280>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002050:	230c      	movs	r3, #12
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002060:	2307      	movs	r3, #7
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4837      	ldr	r0, [pc, #220]	; (8002148 <HAL_UART_MspInit+0x284>)
 800206c:	f001 ffa6 	bl	8003fbc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002070:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_UART_MspInit+0x29c>)
 8002072:	4a3c      	ldr	r2, [pc, #240]	; (8002164 <HAL_UART_MspInit+0x2a0>)
 8002074:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002076:	4b3a      	ldr	r3, [pc, #232]	; (8002160 <HAL_UART_MspInit+0x29c>)
 8002078:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800207c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800207e:	4b38      	ldr	r3, [pc, #224]	; (8002160 <HAL_UART_MspInit+0x29c>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002084:	4b36      	ldr	r3, [pc, #216]	; (8002160 <HAL_UART_MspInit+0x29c>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800208a:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HAL_UART_MspInit+0x29c>)
 800208c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002090:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002092:	4b33      	ldr	r3, [pc, #204]	; (8002160 <HAL_UART_MspInit+0x29c>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002098:	4b31      	ldr	r3, [pc, #196]	; (8002160 <HAL_UART_MspInit+0x29c>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_UART_MspInit+0x29c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020a4:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <HAL_UART_MspInit+0x29c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_UART_MspInit+0x29c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020b0:	482b      	ldr	r0, [pc, #172]	; (8002160 <HAL_UART_MspInit+0x29c>)
 80020b2:	f001 fb81 	bl	80037b8 <HAL_DMA_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80020bc:	f7ff fe46 	bl	8001d4c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a27      	ldr	r2, [pc, #156]	; (8002160 <HAL_UART_MspInit+0x29c>)
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38
 80020c6:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_UART_MspInit+0x29c>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80020cc:	4b26      	ldr	r3, [pc, #152]	; (8002168 <HAL_UART_MspInit+0x2a4>)
 80020ce:	4a27      	ldr	r2, [pc, #156]	; (800216c <HAL_UART_MspInit+0x2a8>)
 80020d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80020d2:	4b25      	ldr	r3, [pc, #148]	; (8002168 <HAL_UART_MspInit+0x2a4>)
 80020d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020d8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020da:	4b23      	ldr	r3, [pc, #140]	; (8002168 <HAL_UART_MspInit+0x2a4>)
 80020dc:	2240      	movs	r2, #64	; 0x40
 80020de:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e0:	4b21      	ldr	r3, [pc, #132]	; (8002168 <HAL_UART_MspInit+0x2a4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_UART_MspInit+0x2a4>)
 80020e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_UART_MspInit+0x2a4>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020f4:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <HAL_UART_MspInit+0x2a4>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80020fa:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_UART_MspInit+0x2a4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <HAL_UART_MspInit+0x2a4>)
 8002102:	2200      	movs	r2, #0
 8002104:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_UART_MspInit+0x2a4>)
 8002108:	2200      	movs	r2, #0
 800210a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800210c:	4816      	ldr	r0, [pc, #88]	; (8002168 <HAL_UART_MspInit+0x2a4>)
 800210e:	f001 fb53 	bl	80037b8 <HAL_DMA_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_UART_MspInit+0x258>
      Error_Handler();
 8002118:	f7ff fe18 	bl	8001d4c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a12      	ldr	r2, [pc, #72]	; (8002168 <HAL_UART_MspInit+0x2a4>)
 8002120:	635a      	str	r2, [r3, #52]	; 0x34
 8002122:	4a11      	ldr	r2, [pc, #68]	; (8002168 <HAL_UART_MspInit+0x2a4>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002128:	2200      	movs	r2, #0
 800212a:	2100      	movs	r1, #0
 800212c:	2026      	movs	r0, #38	; 0x26
 800212e:	f001 fb0c 	bl	800374a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002132:	2026      	movs	r0, #38	; 0x26
 8002134:	f001 fb25 	bl	8003782 <HAL_NVIC_EnableIRQ>
}
 8002138:	bf00      	nop
 800213a:	3730      	adds	r7, #48	; 0x30
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40011000 	.word	0x40011000
 8002144:	40023800 	.word	0x40023800
 8002148:	40020000 	.word	0x40020000
 800214c:	2000064c 	.word	0x2000064c
 8002150:	40026440 	.word	0x40026440
 8002154:	200005ec 	.word	0x200005ec
 8002158:	400264b8 	.word	0x400264b8
 800215c:	40004400 	.word	0x40004400
 8002160:	2000058c 	.word	0x2000058c
 8002164:	40026088 	.word	0x40026088
 8002168:	200006ac 	.word	0x200006ac
 800216c:	400260a0 	.word	0x400260a0

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <NMI_Handler+0x4>

08002176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler+0x4>

08002182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <UsageFault_Handler+0x4>

0800218e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021bc:	f000 fb0c 	bl	80027d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <SysTick_Handler+0x18>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3301      	adds	r3, #1
 80021c6:	4a02      	ldr	r2, [pc, #8]	; (80021d0 <SysTick_Handler+0x18>)
 80021c8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200000f0 	.word	0x200000f0

080021d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <DMA1_Stream5_IRQHandler+0x10>)
 80021da:	f001 fc85 	bl	8003ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000058c 	.word	0x2000058c

080021e8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <DMA1_Stream6_IRQHandler+0x10>)
 80021ee:	f001 fc7b 	bl	8003ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200006ac 	.word	0x200006ac

080021fc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
  HAL_CAN_TxMailboxCompleteCallback();
 8002200:	f7ff fd6f 	bl	8001ce2 <HAL_CAN_TxMailboxCompleteCallback>
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <CAN1_TX_IRQHandler+0x14>)
 8002206:	f000 ffb4 	bl	8003172 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200007dc 	.word	0x200007dc

08002214 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <CAN1_RX0_IRQHandler+0x10>)
 800221a:	f000 ffaa 	bl	8003172 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200007dc 	.word	0x200007dc

08002228 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <CAN1_RX1_IRQHandler+0x10>)
 800222e:	f000 ffa0 	bl	8003172 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200007dc 	.word	0x200007dc

0800223c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <CAN1_SCE_IRQHandler+0x10>)
 8002242:	f000 ff96 	bl	8003172 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200007dc 	.word	0x200007dc

08002250 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <TIM2_IRQHandler+0x10>)
 8002256:	f002 fea1 	bl	8004f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000750 	.word	0x20000750

08002264 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <USART1_IRQHandler+0x10>)
 800226a:	f003 fb25 	bl	80058b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	2000070c 	.word	0x2000070c

08002278 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <USART2_IRQHandler+0x10>)
 800227e:	f003 fb1b 	bl	80058b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000798 	.word	0x20000798

0800228c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <DMA2_Stream2_IRQHandler+0x10>)
 8002292:	f001 fc29 	bl	8003ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000064c 	.word	0x2000064c

080022a0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <DMA2_Stream7_IRQHandler+0x10>)
 80022a6:	f001 fc1f 	bl	8003ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200005ec 	.word	0x200005ec

080022b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <SystemInit+0x20>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <SystemInit+0x20>)
 80022c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002310 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022dc:	480d      	ldr	r0, [pc, #52]	; (8002314 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022de:	490e      	ldr	r1, [pc, #56]	; (8002318 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022e0:	4a0e      	ldr	r2, [pc, #56]	; (800231c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e4:	e002      	b.n	80022ec <LoopCopyDataInit>

080022e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ea:	3304      	adds	r3, #4

080022ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f0:	d3f9      	bcc.n	80022e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022f4:	4c0b      	ldr	r4, [pc, #44]	; (8002324 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f8:	e001      	b.n	80022fe <LoopFillZerobss>

080022fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022fc:	3204      	adds	r2, #4

080022fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002300:	d3fb      	bcc.n	80022fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002302:	f7ff ffd7 	bl	80022b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002306:	f004 f9bf 	bl	8006688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800230a:	f7ff fa23 	bl	8001754 <main>
  bx  lr    
 800230e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002318:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800231c:	08006728 	.word	0x08006728
  ldr r2, =_sbss
 8002320:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8002324:	20000814 	.word	0x20000814

08002328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002328:	e7fe      	b.n	8002328 <ADC_IRQHandler>
	...

0800232c <D_CAN_Init>:

#include "../Inc/CAN.h"
#include <stdlib.h>
#include "stm32f4xx_hal.h"

void D_CAN_Init(void){
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
	HAL_CAN_Start(&hcan1);
 8002332:	4818      	ldr	r0, [pc, #96]	; (8002394 <D_CAN_Init+0x68>)
 8002334:	f000 fc4c 	bl	8002bd0 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002338:	2102      	movs	r1, #2
 800233a:	4816      	ldr	r0, [pc, #88]	; (8002394 <D_CAN_Init+0x68>)
 800233c:	f000 fef3 	bl	8003126 <HAL_CAN_ActivateNotification>
	for(int i=0; i<8; i++){
 8002340:	2300      	movs	r3, #0
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	e01d      	b.n	8002382 <D_CAN_Init+0x56>
		TxData[i] = 0;
 8002346:	4a14      	ldr	r2, [pc, #80]	; (8002398 <D_CAN_Init+0x6c>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
		RxData[i] = 0;
 8002350:	4a12      	ldr	r2, [pc, #72]	; (800239c <D_CAN_Init+0x70>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<5; j++){
 800235a:	2300      	movs	r3, #0
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	e00a      	b.n	8002376 <D_CAN_Init+0x4a>
			AllData[j][i] = 0;
 8002360:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <D_CAN_Init+0x74>)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	441a      	add	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<5; j++){
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	3301      	adds	r3, #1
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b04      	cmp	r3, #4
 800237a:	ddf1      	ble.n	8002360 <D_CAN_Init+0x34>
	for(int i=0; i<8; i++){
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3301      	adds	r3, #1
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b07      	cmp	r3, #7
 8002386:	ddde      	ble.n	8002346 <D_CAN_Init+0x1a>
		}
	}
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200007dc 	.word	0x200007dc
 8002398:	20000544 	.word	0x20000544
 800239c:	20000550 	.word	0x20000550
 80023a0:	2000051c 	.word	0x2000051c

080023a4 <D_CAN_Transmit>:

int D_CAN_Transmit(uint16_t ownAddress, const uint8_t *data, uint16_t size){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	80fb      	strh	r3, [r7, #6]
 80023b0:	4613      	mov	r3, r2
 80023b2:	80bb      	strh	r3, [r7, #4]
	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0){
 80023b4:	4823      	ldr	r0, [pc, #140]	; (8002444 <D_CAN_Transmit+0xa0>)
 80023b6:	f000 fd6f 	bl	8002e98 <HAL_CAN_GetTxMailboxesFreeLevel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d02d      	beq.n	800241c <D_CAN_Transmit+0x78>
		TxHeader.StdId = ownAddress;
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	4a21      	ldr	r2, [pc, #132]	; (8002448 <D_CAN_Transmit+0xa4>)
 80023c4:	6013      	str	r3, [r2, #0]
		TxHeader.RTR = CAN_RTR_DATA;
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <D_CAN_Transmit+0xa4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
		TxHeader.IDE = CAN_ID_STD;
 80023cc:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <D_CAN_Transmit+0xa4>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
		TxHeader.DLC = size;
 80023d2:	88bb      	ldrh	r3, [r7, #4]
 80023d4:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <D_CAN_Transmit+0xa4>)
 80023d6:	6113      	str	r3, [r2, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <D_CAN_Transmit+0xa4>)
 80023da:	2200      	movs	r2, #0
 80023dc:	751a      	strb	r2, [r3, #20]
		for(int i=0; i<size; i++){
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e00b      	b.n	80023fc <D_CAN_Transmit+0x58>
			TxData[i] = data[i];
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	7819      	ldrb	r1, [r3, #0]
 80023ec:	4a17      	ldr	r2, [pc, #92]	; (800244c <D_CAN_Transmit+0xa8>)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4413      	add	r3, r2
 80023f2:	460a      	mov	r2, r1
 80023f4:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<size; i++){
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3301      	adds	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	88bb      	ldrh	r3, [r7, #4]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	429a      	cmp	r2, r3
 8002402:	dbef      	blt.n	80023e4 <D_CAN_Transmit+0x40>
		}
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <D_CAN_Transmit+0xac>)
 8002406:	4a11      	ldr	r2, [pc, #68]	; (800244c <D_CAN_Transmit+0xa8>)
 8002408:	490f      	ldr	r1, [pc, #60]	; (8002448 <D_CAN_Transmit+0xa4>)
 800240a:	480e      	ldr	r0, [pc, #56]	; (8002444 <D_CAN_Transmit+0xa0>)
 800240c:	f000 fc24 	bl	8002c58 <HAL_CAN_AddTxMessage>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d011      	beq.n	800243a <D_CAN_Transmit+0x96>
			return -2;
 8002416:	f06f 0301 	mvn.w	r3, #1
 800241a:	e00f      	b.n	800243c <D_CAN_Transmit+0x98>
		}
	}else{
		HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX0);
 800241c:	2101      	movs	r1, #1
 800241e:	4809      	ldr	r0, [pc, #36]	; (8002444 <D_CAN_Transmit+0xa0>)
 8002420:	f000 fcf5 	bl	8002e0e <HAL_CAN_AbortTxRequest>
		HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX1);
 8002424:	2102      	movs	r1, #2
 8002426:	4807      	ldr	r0, [pc, #28]	; (8002444 <D_CAN_Transmit+0xa0>)
 8002428:	f000 fcf1 	bl	8002e0e <HAL_CAN_AbortTxRequest>
		HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX2);
 800242c:	2104      	movs	r1, #4
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <D_CAN_Transmit+0xa0>)
 8002430:	f000 fced 	bl	8002e0e <HAL_CAN_AbortTxRequest>
		return -1;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002438:	e000      	b.n	800243c <D_CAN_Transmit+0x98>
	}
	return 0;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200007dc 	.word	0x200007dc
 8002448:	20000558 	.word	0x20000558
 800244c:	20000544 	.word	0x20000544
 8002450:	2000054c 	.word	0x2000054c

08002454 <D_CAN_SetReceiveAddressAll>:
	}

	return 0;
}

int D_CAN_SetReceiveAddressAll(void){
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	sFilterConfig.FilterBank = 0;
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <D_CAN_SetReceiveAddressAll+0x5c>)
 800245a:	2200      	movs	r2, #0
 800245c:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002466:	2201      	movs	r2, #1
 8002468:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <D_CAN_SetReceiveAddressAll+0x5c>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002472:	2200      	movs	r2, #0
 8002474:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <D_CAN_SetReceiveAddressAll+0x5c>)
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <D_CAN_SetReceiveAddressAll+0x5c>)
 800248a:	2201      	movs	r2, #1
 800248c:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002490:	220e      	movs	r2, #14
 8002492:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8002494:	4906      	ldr	r1, [pc, #24]	; (80024b0 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002496:	4807      	ldr	r0, [pc, #28]	; (80024b4 <D_CAN_SetReceiveAddressAll+0x60>)
 8002498:	f000 faba 	bl	8002a10 <HAL_CAN_ConfigFilter>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <D_CAN_SetReceiveAddressAll+0x54>
		return -1;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024a6:	e000      	b.n	80024aa <D_CAN_SetReceiveAddressAll+0x56>
	}

	return 0;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200004f4 	.word	0x200004f4
 80024b4:	200007dc 	.word	0x200007dc

080024b8 <D_CAN_Receive>:

int D_CAN_Receive(uint16_t SenderAddress, uint8_t *data, uint16_t size){
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	80fb      	strh	r3, [r7, #6]
 80024c4:	4613      	mov	r3, r2
 80024c6:	80bb      	strh	r3, [r7, #4]
	int setIdx = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
	switch(SenderAddress){
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d2:	d01b      	beq.n	800250c <D_CAN_Receive+0x54>
 80024d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d8:	dc1e      	bgt.n	8002518 <D_CAN_Receive+0x60>
 80024da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024de:	d012      	beq.n	8002506 <D_CAN_Receive+0x4e>
 80024e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024e4:	dc18      	bgt.n	8002518 <D_CAN_Receive+0x60>
 80024e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ea:	d009      	beq.n	8002500 <D_CAN_Receive+0x48>
 80024ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f0:	dc12      	bgt.n	8002518 <D_CAN_Receive+0x60>
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00d      	beq.n	8002512 <D_CAN_Receive+0x5a>
 80024f6:	2b09      	cmp	r3, #9
 80024f8:	d10e      	bne.n	8002518 <D_CAN_Receive+0x60>
	case CAN_MECH1_ADDRESS:
		setIdx = CAN_MECH1;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
		break;
 80024fe:	e00e      	b.n	800251e <D_CAN_Receive+0x66>
	case CAN_ST2_ADDRESS:
		setIdx = CAN_ST2;
 8002500:	2301      	movs	r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
		break;
 8002504:	e00b      	b.n	800251e <D_CAN_Receive+0x66>
	case CAN_ST3_ADDRESS:
		setIdx = CAN_ST3;
 8002506:	2302      	movs	r3, #2
 8002508:	60bb      	str	r3, [r7, #8]
		break;
 800250a:	e008      	b.n	800251e <D_CAN_Receive+0x66>
	case CAN_ST4_ADDRESS:
		setIdx = CAN_ST4;
 800250c:	2303      	movs	r3, #3
 800250e:	60bb      	str	r3, [r7, #8]
		break;
 8002510:	e005      	b.n	800251e <D_CAN_Receive+0x66>
	case CAN_MAIN_ADDRESS:
		setIdx = CAN_MAIN;
 8002512:	2304      	movs	r3, #4
 8002514:	60bb      	str	r3, [r7, #8]
		break;
 8002516:	e002      	b.n	800251e <D_CAN_Receive+0x66>
	default:
		setIdx = CAN_MAIN;
 8002518:	2304      	movs	r3, #4
 800251a:	60bb      	str	r3, [r7, #8]
		break;
 800251c:	bf00      	nop
	}
	//test
	for(int i=0; i<size; i++){
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	e00d      	b.n	8002540 <D_CAN_Receive+0x88>
		data[i] = AllData[SenderAddress][i];
 8002524:	88fa      	ldrh	r2, [r7, #6]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	440b      	add	r3, r1
 800252c:	490a      	ldr	r1, [pc, #40]	; (8002558 <D_CAN_Receive+0xa0>)
 800252e:	00d2      	lsls	r2, r2, #3
 8002530:	4411      	add	r1, r2
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	440a      	add	r2, r1
 8002536:	7812      	ldrb	r2, [r2, #0]
 8002538:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++){
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3301      	adds	r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	88bb      	ldrh	r3, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	429a      	cmp	r2, r3
 8002546:	dbed      	blt.n	8002524 <D_CAN_Receive+0x6c>
		data[i] = AllData[setIdx][i];
	}
	*/


	return 0;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	2000051c 	.word	0x2000051c

0800255c <D_CAN_ReceiveCallBack>:

void D_CAN_ReceiveCallBack(CAN_HandleTypeDef *hcan){
 800255c:	b580      	push	{r7, lr}
 800255e:	b08e      	sub	sp, #56	; 0x38
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8002564:	f107 020c 	add.w	r2, r7, #12
 8002568:	4b32      	ldr	r3, [pc, #200]	; (8002634 <D_CAN_ReceiveCallBack+0xd8>)
 800256a:	2100      	movs	r1, #0
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fcc8 	bl	8002f02 <HAL_CAN_GetRxMessage>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d155      	bne.n	8002624 <D_CAN_ReceiveCallBack+0xc8>
		uint32_t id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <D_CAN_ReceiveCallBack+0x26>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	e000      	b.n	8002584 <D_CAN_ReceiveCallBack+0x28>
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t size = RxHeader.DLC;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
		int setIdx = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
		switch(id){
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002594:	d022      	beq.n	80025dc <D_CAN_ReceiveCallBack+0x80>
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259c:	d824      	bhi.n	80025e8 <D_CAN_ReceiveCallBack+0x8c>
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025a4:	d017      	beq.n	80025d6 <D_CAN_ReceiveCallBack+0x7a>
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025ac:	d81c      	bhi.n	80025e8 <D_CAN_ReceiveCallBack+0x8c>
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b4:	d00c      	beq.n	80025d0 <D_CAN_ReceiveCallBack+0x74>
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025bc:	d814      	bhi.n	80025e8 <D_CAN_ReceiveCallBack+0x8c>
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00e      	beq.n	80025e2 <D_CAN_ReceiveCallBack+0x86>
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	2b09      	cmp	r3, #9
 80025c8:	d10e      	bne.n	80025e8 <D_CAN_ReceiveCallBack+0x8c>
		case CAN_MECH1_ADDRESS:
			setIdx = CAN_MECH1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80025ce:	e00e      	b.n	80025ee <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST2_ADDRESS:
			setIdx = CAN_ST2;
 80025d0:	2301      	movs	r3, #1
 80025d2:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80025d4:	e00b      	b.n	80025ee <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST3_ADDRESS:
			setIdx = CAN_ST3;
 80025d6:	2302      	movs	r3, #2
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80025da:	e008      	b.n	80025ee <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST4_ADDRESS:
			setIdx = CAN_ST4;
 80025dc:	2303      	movs	r3, #3
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80025e0:	e005      	b.n	80025ee <D_CAN_ReceiveCallBack+0x92>
		case CAN_MAIN_ADDRESS:
			setIdx = CAN_MAIN;
 80025e2:	2304      	movs	r3, #4
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80025e6:	e002      	b.n	80025ee <D_CAN_ReceiveCallBack+0x92>
		default:
			setIdx = CAN_MAIN;
 80025e8:	2304      	movs	r3, #4
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80025ec:	bf00      	nop
		}
		//test
		for(int i=0; i<size; i++){
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
 80025f2:	e00b      	b.n	800260c <D_CAN_ReceiveCallBack+0xb0>
			AllData[0][i] = RxData[i];
 80025f4:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <D_CAN_ReceiveCallBack+0xd8>)
 80025f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f8:	4413      	add	r3, r2
 80025fa:	7819      	ldrb	r1, [r3, #0]
 80025fc:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <D_CAN_ReceiveCallBack+0xdc>)
 80025fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002600:	4413      	add	r3, r2
 8002602:	460a      	mov	r2, r1
 8002604:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<size; i++){
 8002606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002608:	3301      	adds	r3, #1
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
 800260c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002610:	429a      	cmp	r2, r3
 8002612:	d8ef      	bhi.n	80025f4 <D_CAN_ReceiveCallBack+0x98>
		}
		AllData[1][0] = id;
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	b2da      	uxtb	r2, r3
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <D_CAN_ReceiveCallBack+0xdc>)
 800261a:	721a      	strb	r2, [r3, #8]
		AllData[1][1] = 254;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <D_CAN_ReceiveCallBack+0xdc>)
 800261e:	22fe      	movs	r2, #254	; 0xfe
 8002620:	725a      	strb	r2, [r3, #9]
		}
		*/
	}else{
		AllData[1][1] = 255;
	}
}
 8002622:	e002      	b.n	800262a <D_CAN_ReceiveCallBack+0xce>
		AllData[1][1] = 255;
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <D_CAN_ReceiveCallBack+0xdc>)
 8002626:	22ff      	movs	r2, #255	; 0xff
 8002628:	725a      	strb	r2, [r3, #9]
}
 800262a:	bf00      	nop
 800262c:	3738      	adds	r7, #56	; 0x38
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000550 	.word	0x20000550
 8002638:	2000051c 	.word	0x2000051c

0800263c <D_GPIO_Set>:
#include "../Inc/GPIO.h"
#include <stdlib.h>
#include <stdbool.h>
#include "stm32f4xx_hal.h"

void D_GPIO_Set(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_SET);
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	2201      	movs	r2, #1
 800264c:	4619      	mov	r1, r3
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f001 fe60 	bl	8004314 <HAL_GPIO_WritePin>
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <D_GPIO_Reset>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	2200      	movs	r2, #0
 800266c:	4619      	mov	r1, r3
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f001 fe50 	bl	8004314 <HAL_GPIO_WritePin>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <D_GPIO_Read>:

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 8002688:	887b      	ldrh	r3, [r7, #2]
 800268a:	4619      	mov	r1, r3
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f001 fe29 	bl	80042e4 <HAL_GPIO_ReadPin>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed){
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <D_Mess_flush+0x54>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f083 0301 	eor.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <D_Mess_flush+0x1c>
		outptr = buff;
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <D_Mess_flush+0x58>)
 80026be:	4a11      	ldr	r2, [pc, #68]	; (8002704 <D_Mess_flush+0x5c>)
 80026c0:	601a      	str	r2, [r3, #0]
		return;
 80026c2:	e01a      	b.n	80026fa <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 80026c4:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <D_Mess_flush+0x58>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <D_Mess_flush+0x58>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	490b      	ldr	r1, [pc, #44]	; (8002700 <D_Mess_flush+0x58>)
 80026d4:	600a      	str	r2, [r1, #0]
 80026d6:	220a      	movs	r2, #10
 80026d8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <D_Mess_flush+0x58>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a09      	ldr	r2, [pc, #36]	; (8002704 <D_Mess_flush+0x5c>)
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	4907      	ldr	r1, [pc, #28]	; (8002704 <D_Mess_flush+0x5c>)
 80026e8:	4807      	ldr	r0, [pc, #28]	; (8002708 <D_Mess_flush+0x60>)
 80026ea:	f003 f867 	bl	80057bc <HAL_UART_Transmit_DMA>
		had_completed = false;
 80026ee:	4b03      	ldr	r3, [pc, #12]	; (80026fc <D_Mess_flush+0x54>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 80026f4:	4b02      	ldr	r3, [pc, #8]	; (8002700 <D_Mess_flush+0x58>)
 80026f6:	4a03      	ldr	r2, [pc, #12]	; (8002704 <D_Mess_flush+0x5c>)
 80026f8:	601a      	str	r2, [r3, #0]
}
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000028 	.word	0x20000028
 8002700:	2000080c 	.word	0x2000080c
 8002704:	200000f4 	.word	0x200000f4
 8002708:	20000798 	.word	0x20000798

0800270c <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  had_completed = true;
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <D_Mess_TransitionCompletedCallBack+0x14>)
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	20000028 	.word	0x20000028

08002724 <D_PWM_Init>:
#include <stdlib.h>
#include "stm32f4xx_hal.h"

//extern TIM_HandleTypeDef htim3;

void D_PWM_Init(void){
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
#endif
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_Init+0x40>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <HAL_Init+0x40>)
 800273e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_Init+0x40>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <HAL_Init+0x40>)
 800274a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800274e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_Init+0x40>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <HAL_Init+0x40>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275c:	2003      	movs	r0, #3
 800275e:	f000 ffe9 	bl	8003734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002762:	2000      	movs	r0, #0
 8002764:	f000 f808 	bl	8002778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002768:	f7ff faf6 	bl	8001d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023c00 	.word	0x40023c00

08002778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_InitTick+0x54>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_InitTick+0x58>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	4618      	mov	r0, r3
 8002798:	f001 f801 	bl	800379e <HAL_SYSTICK_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00e      	b.n	80027c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d80a      	bhi.n	80027c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ac:	2200      	movs	r2, #0
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027b4:	f000 ffc9 	bl	800374a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b8:	4a06      	ldr	r2, [pc, #24]	; (80027d4 <HAL_InitTick+0x5c>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000024 	.word	0x20000024
 80027d0:	20000030 	.word	0x20000030
 80027d4:	2000002c 	.word	0x2000002c

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000030 	.word	0x20000030
 80027fc:	20000810 	.word	0x20000810

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000810 	.word	0x20000810

08002818 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e0ed      	b.n	8002a06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d102      	bne.n	800283c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff fab6 	bl	8001da8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800284c:	f7ff ffd8 	bl	8002800 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002852:	e012      	b.n	800287a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002854:	f7ff ffd4 	bl	8002800 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b0a      	cmp	r3, #10
 8002860:	d90b      	bls.n	800287a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2205      	movs	r2, #5
 8002872:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0c5      	b.n	8002a06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0e5      	beq.n	8002854 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0202 	bic.w	r2, r2, #2
 8002896:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002898:	f7ff ffb2 	bl	8002800 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800289e:	e012      	b.n	80028c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028a0:	f7ff ffae 	bl	8002800 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b0a      	cmp	r3, #10
 80028ac:	d90b      	bls.n	80028c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2205      	movs	r2, #5
 80028be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e09f      	b.n	8002a06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1e5      	bne.n	80028a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7e1b      	ldrb	r3, [r3, #24]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d108      	bne.n	80028ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e007      	b.n	80028fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7e5b      	ldrb	r3, [r3, #25]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d108      	bne.n	8002918 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e007      	b.n	8002928 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002926:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7e9b      	ldrb	r3, [r3, #26]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d108      	bne.n	8002942 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0220 	orr.w	r2, r2, #32
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	e007      	b.n	8002952 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0220 	bic.w	r2, r2, #32
 8002950:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7edb      	ldrb	r3, [r3, #27]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d108      	bne.n	800296c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0210 	bic.w	r2, r2, #16
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e007      	b.n	800297c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0210 	orr.w	r2, r2, #16
 800297a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7f1b      	ldrb	r3, [r3, #28]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d108      	bne.n	8002996 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0208 	orr.w	r2, r2, #8
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e007      	b.n	80029a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0208 	bic.w	r2, r2, #8
 80029a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	7f5b      	ldrb	r3, [r3, #29]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d108      	bne.n	80029c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0204 	orr.w	r2, r2, #4
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e007      	b.n	80029d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0204 	bic.w	r2, r2, #4
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	ea42 0103 	orr.w	r1, r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	1e5a      	subs	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a26:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d003      	beq.n	8002a36 <HAL_CAN_ConfigFilter+0x26>
 8002a2e:	7cfb      	ldrb	r3, [r7, #19]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	f040 80be 	bne.w	8002bb2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002a36:	4b65      	ldr	r3, [pc, #404]	; (8002bcc <HAL_CAN_ConfigFilter+0x1bc>)
 8002a38:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	431a      	orrs	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 031f 	and.w	r3, r3, #31
 8002a76:	2201      	movs	r2, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	401a      	ands	r2, r3
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d123      	bne.n	8002ae0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002aba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3248      	adds	r2, #72	; 0x48
 8002ac0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ad4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ad6:	6979      	ldr	r1, [r7, #20]
 8002ad8:	3348      	adds	r3, #72	; 0x48
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d122      	bne.n	8002b2e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3248      	adds	r2, #72	; 0x48
 8002b0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b24:	6979      	ldr	r1, [r7, #20]
 8002b26:	3348      	adds	r3, #72	; 0x48
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	401a      	ands	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002b48:	e007      	b.n	8002b5a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002b74:	e007      	b.n	8002b86 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d107      	bne.n	8002b9e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ba4:	f023 0201 	bic.w	r2, r3, #1
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e006      	b.n	8002bc0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
  }
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	40006400 	.word	0x40006400

08002bd0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d12e      	bne.n	8002c42 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bfc:	f7ff fe00 	bl	8002800 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c02:	e012      	b.n	8002c2a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c04:	f7ff fdfc 	bl	8002800 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b0a      	cmp	r3, #10
 8002c10:	d90b      	bls.n	8002c2a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2205      	movs	r2, #5
 8002c22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e012      	b.n	8002c50 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e5      	bne.n	8002c04 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e006      	b.n	8002c50 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
  }
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c6c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c76:	7ffb      	ldrb	r3, [r7, #31]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d003      	beq.n	8002c84 <HAL_CAN_AddTxMessage+0x2c>
 8002c7c:	7ffb      	ldrb	r3, [r7, #31]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	f040 80b8 	bne.w	8002df4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80a0 	beq.w	8002de4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	0e1b      	lsrs	r3, r3, #24
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d907      	bls.n	8002cc4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e09e      	b.n	8002e02 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ce0:	68f9      	ldr	r1, [r7, #12]
 8002ce2:	6809      	ldr	r1, [r1, #0]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3318      	adds	r3, #24
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	440b      	add	r3, r1
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e00f      	b.n	8002d12 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cfc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d02:	68f9      	ldr	r1, [r7, #12]
 8002d04:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d06:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	3318      	adds	r3, #24
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	440b      	add	r3, r1
 8002d10:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6819      	ldr	r1, [r3, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3318      	adds	r3, #24
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	440b      	add	r3, r1
 8002d22:	3304      	adds	r3, #4
 8002d24:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	7d1b      	ldrb	r3, [r3, #20]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d111      	bne.n	8002d52 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	3318      	adds	r3, #24
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	4413      	add	r3, r2
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	6811      	ldr	r1, [r2, #0]
 8002d42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3318      	adds	r3, #24
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3304      	adds	r3, #4
 8002d50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3307      	adds	r3, #7
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	061a      	lsls	r2, r3, #24
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3306      	adds	r3, #6
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3305      	adds	r3, #5
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	3204      	adds	r2, #4
 8002d72:	7812      	ldrb	r2, [r2, #0]
 8002d74:	4610      	mov	r0, r2
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	6811      	ldr	r1, [r2, #0]
 8002d7a:	ea43 0200 	orr.w	r2, r3, r0
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	440b      	add	r3, r1
 8002d84:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002d88:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3303      	adds	r3, #3
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	061a      	lsls	r2, r3, #24
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3302      	adds	r3, #2
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	041b      	lsls	r3, r3, #16
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	4313      	orrs	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	7812      	ldrb	r2, [r2, #0]
 8002daa:	4610      	mov	r0, r2
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	6811      	ldr	r1, [r2, #0]
 8002db0:	ea43 0200 	orr.w	r2, r3, r0
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	440b      	add	r3, r1
 8002dba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002dbe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3318      	adds	r3, #24
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	4413      	add	r3, r2
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	6811      	ldr	r1, [r2, #0]
 8002dd2:	f043 0201 	orr.w	r2, r3, #1
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	3318      	adds	r3, #24
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	440b      	add	r3, r1
 8002dde:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e00e      	b.n	8002e02 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e006      	b.n	8002e02 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
  }
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3724      	adds	r7, #36	; 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e1e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d002      	beq.n	8002e2c <HAL_CAN_AbortTxRequest+0x1e>
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d128      	bne.n	8002e7e <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e44:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e5e:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e78:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e006      	b.n	8002e8c <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
  }
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eaa:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002eac:	7afb      	ldrb	r3, [r7, #11]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d002      	beq.n	8002eb8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002eb2:	7afb      	ldrb	r3, [r7, #11]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d11d      	bne.n	8002ef4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3301      	adds	r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002f02:	b480      	push	{r7}
 8002f04:	b087      	sub	sp, #28
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f16:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d003      	beq.n	8002f26 <HAL_CAN_GetRxMessage+0x24>
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	f040 80f3 	bne.w	800310c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10e      	bne.n	8002f4a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d116      	bne.n	8002f68 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0e7      	b.n	800311a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d107      	bne.n	8002f68 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0d8      	b.n	800311a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	331b      	adds	r3, #27
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	4413      	add	r3, r2
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0204 	and.w	r2, r3, #4
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10c      	bne.n	8002fa0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	331b      	adds	r3, #27
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	4413      	add	r3, r2
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	0d5b      	lsrs	r3, r3, #21
 8002f96:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	331b      	adds	r3, #27
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	4413      	add	r3, r2
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	08db      	lsrs	r3, r3, #3
 8002fb0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	331b      	adds	r3, #27
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	4413      	add	r3, r2
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0202 	and.w	r2, r3, #2
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	331b      	adds	r3, #27
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	4413      	add	r3, r2
 8002fda:	3304      	adds	r3, #4
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 020f 	and.w	r2, r3, #15
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	331b      	adds	r3, #27
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	0a1b      	lsrs	r3, r3, #8
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	331b      	adds	r3, #27
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	4413      	add	r3, r2
 800300a:	3304      	adds	r3, #4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	0c1b      	lsrs	r3, r3, #16
 8003010:	b29a      	uxth	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	4413      	add	r3, r2
 8003020:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	4413      	add	r3, r2
 8003036:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0a1a      	lsrs	r2, r3, #8
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	4413      	add	r3, r2
 8003050:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	0c1a      	lsrs	r2, r3, #16
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	3302      	adds	r3, #2
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	4413      	add	r3, r2
 800306a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0e1a      	lsrs	r2, r3, #24
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	3303      	adds	r3, #3
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	4413      	add	r3, r2
 8003084:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	3304      	adds	r3, #4
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	4413      	add	r3, r2
 800309c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	0a1a      	lsrs	r2, r3, #8
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	3305      	adds	r3, #5
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0c1a      	lsrs	r2, r3, #16
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	3306      	adds	r3, #6
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	0e1a      	lsrs	r2, r3, #24
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	3307      	adds	r3, #7
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d108      	bne.n	80030f8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0220 	orr.w	r2, r2, #32
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	e007      	b.n	8003108 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0220 	orr.w	r2, r2, #32
 8003106:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e006      	b.n	800311a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
  }
}
 800311a:	4618      	mov	r0, r3
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003126:	b480      	push	{r7}
 8003128:	b085      	sub	sp, #20
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003136:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d002      	beq.n	8003144 <HAL_CAN_ActivateNotification+0x1e>
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d109      	bne.n	8003158 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6959      	ldr	r1, [r3, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e006      	b.n	8003166 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
  }
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b08a      	sub	sp, #40	; 0x28
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800317a:	2300      	movs	r3, #0
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d07c      	beq.n	80032b2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d023      	beq.n	800320a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2201      	movs	r2, #1
 80031c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7fe fd8b 	bl	8001cf0 <HAL_CAN_TxMailbox0CompleteCallback>
 80031da:	e016      	b.n	800320a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
 80031ee:	e00c      	b.n	800320a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d004      	beq.n	8003204 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
 8003202:	e002      	b.n	800320a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f96b 	bl	80034e0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d024      	beq.n	800325e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800321c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7fe fd6b 	bl	8001d04 <HAL_CAN_TxMailbox1CompleteCallback>
 800322e:	e016      	b.n	800325e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003236:	2b00      	cmp	r3, #0
 8003238:	d004      	beq.n	8003244 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
 8003242:	e00c      	b.n	800325e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324a:	2b00      	cmp	r3, #0
 800324c:	d004      	beq.n	8003258 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
 8003256:	e002      	b.n	800325e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f94b 	bl	80034f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d024      	beq.n	80032b2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003270:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fe fd4b 	bl	8001d18 <HAL_CAN_TxMailbox2CompleteCallback>
 8003282:	e016      	b.n	80032b2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d004      	beq.n	8003298 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	e00c      	b.n	80032b2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d004      	beq.n	80032ac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
 80032aa:	e002      	b.n	80032b2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f92b 	bl	8003508 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00c      	beq.n	80032d6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2210      	movs	r2, #16
 80032d4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d006      	beq.n	80032f8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2208      	movs	r2, #8
 80032f0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f912 	bl	800351c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7fe fcdb 	bl	8001ccc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00c      	beq.n	800333a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003330:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2210      	movs	r2, #16
 8003338:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00b      	beq.n	800335c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2208      	movs	r2, #8
 8003354:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8f4 	bl	8003544 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f8db 	bl	8003530 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d006      	beq.n	800339c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2210      	movs	r2, #16
 8003394:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f8de 	bl	8003558 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d006      	beq.n	80033be <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2208      	movs	r2, #8
 80033b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f8d7 	bl	800356c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d07b      	beq.n	80034c0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d072      	beq.n	80034b8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	f043 0304 	orr.w	r3, r3, #4
 8003424:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342c:	2b00      	cmp	r3, #0
 800342e:	d043      	beq.n	80034b8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003436:	2b00      	cmp	r3, #0
 8003438:	d03e      	beq.n	80034b8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003440:	2b60      	cmp	r3, #96	; 0x60
 8003442:	d02b      	beq.n	800349c <HAL_CAN_IRQHandler+0x32a>
 8003444:	2b60      	cmp	r3, #96	; 0x60
 8003446:	d82e      	bhi.n	80034a6 <HAL_CAN_IRQHandler+0x334>
 8003448:	2b50      	cmp	r3, #80	; 0x50
 800344a:	d022      	beq.n	8003492 <HAL_CAN_IRQHandler+0x320>
 800344c:	2b50      	cmp	r3, #80	; 0x50
 800344e:	d82a      	bhi.n	80034a6 <HAL_CAN_IRQHandler+0x334>
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d019      	beq.n	8003488 <HAL_CAN_IRQHandler+0x316>
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d826      	bhi.n	80034a6 <HAL_CAN_IRQHandler+0x334>
 8003458:	2b30      	cmp	r3, #48	; 0x30
 800345a:	d010      	beq.n	800347e <HAL_CAN_IRQHandler+0x30c>
 800345c:	2b30      	cmp	r3, #48	; 0x30
 800345e:	d822      	bhi.n	80034a6 <HAL_CAN_IRQHandler+0x334>
 8003460:	2b10      	cmp	r3, #16
 8003462:	d002      	beq.n	800346a <HAL_CAN_IRQHandler+0x2f8>
 8003464:	2b20      	cmp	r3, #32
 8003466:	d005      	beq.n	8003474 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003468:	e01d      	b.n	80034a6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	f043 0308 	orr.w	r3, r3, #8
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003472:	e019      	b.n	80034a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	f043 0310 	orr.w	r3, r3, #16
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800347c:	e014      	b.n	80034a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	f043 0320 	orr.w	r3, r3, #32
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003486:	e00f      	b.n	80034a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003490:	e00a      	b.n	80034a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800349a:	e005      	b.n	80034a8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034a4:	e000      	b.n	80034a8 <HAL_CAN_IRQHandler+0x336>
            break;
 80034a6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034b6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2204      	movs	r2, #4
 80034be:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f854 	bl	8003580 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80034d8:	bf00      	nop
 80034da:	3728      	adds	r7, #40	; 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b0:	4013      	ands	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c6:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	60d3      	str	r3, [r2, #12]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <__NVIC_GetPriorityGrouping+0x18>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 0307 	and.w	r3, r3, #7
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	2b00      	cmp	r3, #0
 8003608:	db0b      	blt.n	8003622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	f003 021f 	and.w	r2, r3, #31
 8003610:	4907      	ldr	r1, [pc, #28]	; (8003630 <__NVIC_EnableIRQ+0x38>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	2001      	movs	r0, #1
 800361a:	fa00 f202 	lsl.w	r2, r0, r2
 800361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000e100 	.word	0xe000e100

08003634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	6039      	str	r1, [r7, #0]
 800363e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003644:	2b00      	cmp	r3, #0
 8003646:	db0a      	blt.n	800365e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	b2da      	uxtb	r2, r3
 800364c:	490c      	ldr	r1, [pc, #48]	; (8003680 <__NVIC_SetPriority+0x4c>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	0112      	lsls	r2, r2, #4
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	440b      	add	r3, r1
 8003658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800365c:	e00a      	b.n	8003674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	b2da      	uxtb	r2, r3
 8003662:	4908      	ldr	r1, [pc, #32]	; (8003684 <__NVIC_SetPriority+0x50>)
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	3b04      	subs	r3, #4
 800366c:	0112      	lsls	r2, r2, #4
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	440b      	add	r3, r1
 8003672:	761a      	strb	r2, [r3, #24]
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000e100 	.word	0xe000e100
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003688:	b480      	push	{r7}
 800368a:	b089      	sub	sp, #36	; 0x24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f1c3 0307 	rsb	r3, r3, #7
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	bf28      	it	cs
 80036a6:	2304      	movcs	r3, #4
 80036a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3304      	adds	r3, #4
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d902      	bls.n	80036b8 <NVIC_EncodePriority+0x30>
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3b03      	subs	r3, #3
 80036b6:	e000      	b.n	80036ba <NVIC_EncodePriority+0x32>
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	401a      	ands	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	43d9      	mvns	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e0:	4313      	orrs	r3, r2
         );
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3724      	adds	r7, #36	; 0x24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003700:	d301      	bcc.n	8003706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003702:	2301      	movs	r3, #1
 8003704:	e00f      	b.n	8003726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <SysTick_Config+0x40>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3b01      	subs	r3, #1
 800370c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800370e:	210f      	movs	r1, #15
 8003710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003714:	f7ff ff8e 	bl	8003634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <SysTick_Config+0x40>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371e:	4b04      	ldr	r3, [pc, #16]	; (8003730 <SysTick_Config+0x40>)
 8003720:	2207      	movs	r2, #7
 8003722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	e000e010 	.word	0xe000e010

08003734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ff29 	bl	8003594 <__NVIC_SetPriorityGrouping>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800375c:	f7ff ff3e 	bl	80035dc <__NVIC_GetPriorityGrouping>
 8003760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	6978      	ldr	r0, [r7, #20]
 8003768:	f7ff ff8e 	bl	8003688 <NVIC_EncodePriority>
 800376c:	4602      	mov	r2, r0
 800376e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff5d 	bl	8003634 <__NVIC_SetPriority>
}
 800377a:	bf00      	nop
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff31 	bl	80035f8 <__NVIC_EnableIRQ>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ffa2 	bl	80036f0 <SysTick_Config>
 80037ac:	4603      	mov	r3, r0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037c4:	f7ff f81c 	bl	8002800 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e099      	b.n	8003908 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f4:	e00f      	b.n	8003816 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037f6:	f7ff f803 	bl	8002800 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b05      	cmp	r3, #5
 8003802:	d908      	bls.n	8003816 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2203      	movs	r2, #3
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e078      	b.n	8003908 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e8      	bne.n	80037f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4b38      	ldr	r3, [pc, #224]	; (8003910 <HAL_DMA_Init+0x158>)
 8003830:	4013      	ands	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800385a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	2b04      	cmp	r3, #4
 800386e:	d107      	bne.n	8003880 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	4313      	orrs	r3, r2
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f023 0307 	bic.w	r3, r3, #7
 8003896:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d117      	bne.n	80038da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00e      	beq.n	80038da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fb01 	bl	8003ec4 <DMA_CheckFifoParam>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2240      	movs	r2, #64	; 0x40
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038d6:	2301      	movs	r3, #1
 80038d8:	e016      	b.n	8003908 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fab8 	bl	8003e58 <DMA_CalcBaseAndBitshift>
 80038e8:	4603      	mov	r3, r0
 80038ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	223f      	movs	r2, #63	; 0x3f
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	f010803f 	.word	0xf010803f

08003914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_DMA_Start_IT+0x26>
 8003936:	2302      	movs	r3, #2
 8003938:	e040      	b.n	80039bc <HAL_DMA_Start_IT+0xa8>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d12f      	bne.n	80039ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fa4a 	bl	8003dfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	223f      	movs	r2, #63	; 0x3f
 800396e:	409a      	lsls	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0216 	orr.w	r2, r2, #22
 8003982:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0208 	orr.w	r2, r2, #8
 800399a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	e005      	b.n	80039ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039b6:	2302      	movs	r3, #2
 80039b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039d2:	f7fe ff15 	bl	8002800 <HAL_GetTick>
 80039d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d008      	beq.n	80039f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2280      	movs	r2, #128	; 0x80
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e052      	b.n	8003a9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0216 	bic.w	r2, r2, #22
 8003a04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <HAL_DMA_Abort+0x62>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0208 	bic.w	r2, r2, #8
 8003a34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a46:	e013      	b.n	8003a70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a48:	f7fe feda 	bl	8002800 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d90c      	bls.n	8003a70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e015      	b.n	8003a9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e4      	bne.n	8003a48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	223f      	movs	r2, #63	; 0x3f
 8003a84:	409a      	lsls	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e00c      	b.n	8003adc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2205      	movs	r2, #5
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003af4:	4b92      	ldr	r3, [pc, #584]	; (8003d40 <HAL_DMA_IRQHandler+0x258>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a92      	ldr	r2, [pc, #584]	; (8003d44 <HAL_DMA_IRQHandler+0x25c>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	0a9b      	lsrs	r3, r3, #10
 8003b00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	2208      	movs	r2, #8
 8003b14:	409a      	lsls	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01a      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0204 	bic.w	r2, r2, #4
 8003b3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	2208      	movs	r2, #8
 8003b42:	409a      	lsls	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f043 0201 	orr.w	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	2201      	movs	r2, #1
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d012      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00b      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	2201      	movs	r2, #1
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	f043 0202 	orr.w	r2, r3, #2
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	2204      	movs	r2, #4
 8003b90:	409a      	lsls	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d012      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	2204      	movs	r2, #4
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	f043 0204 	orr.w	r2, r3, #4
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d043      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d03c      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be2:	2210      	movs	r2, #16
 8003be4:	409a      	lsls	r2, r3
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d018      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d108      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d024      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
 8003c16:	e01f      	b.n	8003c58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01b      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
 8003c28:	e016      	b.n	8003c58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d107      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0208 	bic.w	r2, r2, #8
 8003c46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 808e 	beq.w	8003d86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8086 	beq.w	8003d86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7e:	2220      	movs	r2, #32
 8003c80:	409a      	lsls	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d136      	bne.n	8003d00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0216 	bic.w	r2, r2, #22
 8003ca0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <HAL_DMA_IRQHandler+0x1da>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0208 	bic.w	r2, r2, #8
 8003cd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd6:	223f      	movs	r2, #63	; 0x3f
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d07d      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
        }
        return;
 8003cfe:	e078      	b.n	8003df2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01c      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d108      	bne.n	8003d2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d030      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	4798      	blx	r3
 8003d2c:	e02b      	b.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d027      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
 8003d3e:	e022      	b.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
 8003d40:	20000024 	.word	0x20000024
 8003d44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10f      	bne.n	8003d76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0210 	bic.w	r2, r2, #16
 8003d64:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d032      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d022      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2205      	movs	r2, #5
 8003d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d307      	bcc.n	8003dce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f2      	bne.n	8003db2 <HAL_DMA_IRQHandler+0x2ca>
 8003dcc:	e000      	b.n	8003dd0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003dce:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
 8003df0:	e000      	b.n	8003df4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003df2:	bf00      	nop
    }
  }
}
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop

08003dfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b40      	cmp	r3, #64	; 0x40
 8003e28:	d108      	bne.n	8003e3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e3a:	e007      	b.n	8003e4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	60da      	str	r2, [r3, #12]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	3b10      	subs	r3, #16
 8003e68:	4a14      	ldr	r2, [pc, #80]	; (8003ebc <DMA_CalcBaseAndBitshift+0x64>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e72:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <DMA_CalcBaseAndBitshift+0x68>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d909      	bls.n	8003e9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e8e:	f023 0303 	bic.w	r3, r3, #3
 8003e92:	1d1a      	adds	r2, r3, #4
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	659a      	str	r2, [r3, #88]	; 0x58
 8003e98:	e007      	b.n	8003eaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	aaaaaaab 	.word	0xaaaaaaab
 8003ec0:	08006710 	.word	0x08006710

08003ec4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d11f      	bne.n	8003f1e <DMA_CheckFifoParam+0x5a>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d856      	bhi.n	8003f92 <DMA_CheckFifoParam+0xce>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <DMA_CheckFifoParam+0x28>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003efd 	.word	0x08003efd
 8003ef0:	08003f0f 	.word	0x08003f0f
 8003ef4:	08003efd 	.word	0x08003efd
 8003ef8:	08003f93 	.word	0x08003f93
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d046      	beq.n	8003f96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f0c:	e043      	b.n	8003f96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f16:	d140      	bne.n	8003f9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f1c:	e03d      	b.n	8003f9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f26:	d121      	bne.n	8003f6c <DMA_CheckFifoParam+0xa8>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d837      	bhi.n	8003f9e <DMA_CheckFifoParam+0xda>
 8003f2e:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <DMA_CheckFifoParam+0x70>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f4b 	.word	0x08003f4b
 8003f3c:	08003f45 	.word	0x08003f45
 8003f40:	08003f5d 	.word	0x08003f5d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      break;
 8003f48:	e030      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d025      	beq.n	8003fa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f5a:	e022      	b.n	8003fa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f64:	d11f      	bne.n	8003fa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f6a:	e01c      	b.n	8003fa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d903      	bls.n	8003f7a <DMA_CheckFifoParam+0xb6>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d003      	beq.n	8003f80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f78:	e018      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7e:	e015      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f90:	e00b      	b.n	8003faa <DMA_CheckFifoParam+0xe6>
      break;
 8003f92:	bf00      	nop
 8003f94:	e00a      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003f96:	bf00      	nop
 8003f98:	e008      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003f9a:	bf00      	nop
 8003f9c:	e006      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003f9e:	bf00      	nop
 8003fa0:	e004      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003fa2:	bf00      	nop
 8003fa4:	e002      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;   
 8003fa6:	bf00      	nop
 8003fa8:	e000      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
      break;
 8003faa:	bf00      	nop
    }
  } 
  
  return status; 
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop

08003fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b089      	sub	sp, #36	; 0x24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	e165      	b.n	80042a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fd8:	2201      	movs	r2, #1
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	f040 8154 	bne.w	800429e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d005      	beq.n	800400e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800400a:	2b02      	cmp	r3, #2
 800400c:	d130      	bne.n	8004070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	2203      	movs	r2, #3
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4013      	ands	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004044:	2201      	movs	r2, #1
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 0201 	and.w	r2, r3, #1
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	2b03      	cmp	r3, #3
 800407a:	d017      	beq.n	80040ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	2203      	movs	r2, #3
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d123      	bne.n	8004100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	08da      	lsrs	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3208      	adds	r2, #8
 80040c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	220f      	movs	r2, #15
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	08da      	lsrs	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3208      	adds	r2, #8
 80040fa:	69b9      	ldr	r1, [r7, #24]
 80040fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 0203 	and.w	r2, r3, #3
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80ae 	beq.w	800429e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	4b5d      	ldr	r3, [pc, #372]	; (80042bc <HAL_GPIO_Init+0x300>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	4a5c      	ldr	r2, [pc, #368]	; (80042bc <HAL_GPIO_Init+0x300>)
 800414c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004150:	6453      	str	r3, [r2, #68]	; 0x44
 8004152:	4b5a      	ldr	r3, [pc, #360]	; (80042bc <HAL_GPIO_Init+0x300>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800415e:	4a58      	ldr	r2, [pc, #352]	; (80042c0 <HAL_GPIO_Init+0x304>)
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	089b      	lsrs	r3, r3, #2
 8004164:	3302      	adds	r3, #2
 8004166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	220f      	movs	r2, #15
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a4f      	ldr	r2, [pc, #316]	; (80042c4 <HAL_GPIO_Init+0x308>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d025      	beq.n	80041d6 <HAL_GPIO_Init+0x21a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a4e      	ldr	r2, [pc, #312]	; (80042c8 <HAL_GPIO_Init+0x30c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d01f      	beq.n	80041d2 <HAL_GPIO_Init+0x216>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a4d      	ldr	r2, [pc, #308]	; (80042cc <HAL_GPIO_Init+0x310>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d019      	beq.n	80041ce <HAL_GPIO_Init+0x212>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a4c      	ldr	r2, [pc, #304]	; (80042d0 <HAL_GPIO_Init+0x314>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_GPIO_Init+0x20e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a4b      	ldr	r2, [pc, #300]	; (80042d4 <HAL_GPIO_Init+0x318>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00d      	beq.n	80041c6 <HAL_GPIO_Init+0x20a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a4a      	ldr	r2, [pc, #296]	; (80042d8 <HAL_GPIO_Init+0x31c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d007      	beq.n	80041c2 <HAL_GPIO_Init+0x206>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a49      	ldr	r2, [pc, #292]	; (80042dc <HAL_GPIO_Init+0x320>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d101      	bne.n	80041be <HAL_GPIO_Init+0x202>
 80041ba:	2306      	movs	r3, #6
 80041bc:	e00c      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041be:	2307      	movs	r3, #7
 80041c0:	e00a      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041c2:	2305      	movs	r3, #5
 80041c4:	e008      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041c6:	2304      	movs	r3, #4
 80041c8:	e006      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041ca:	2303      	movs	r3, #3
 80041cc:	e004      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e002      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <HAL_GPIO_Init+0x21c>
 80041d6:	2300      	movs	r3, #0
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	f002 0203 	and.w	r2, r2, #3
 80041de:	0092      	lsls	r2, r2, #2
 80041e0:	4093      	lsls	r3, r2
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041e8:	4935      	ldr	r1, [pc, #212]	; (80042c0 <HAL_GPIO_Init+0x304>)
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	089b      	lsrs	r3, r3, #2
 80041ee:	3302      	adds	r3, #2
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041f6:	4b3a      	ldr	r3, [pc, #232]	; (80042e0 <HAL_GPIO_Init+0x324>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800421a:	4a31      	ldr	r2, [pc, #196]	; (80042e0 <HAL_GPIO_Init+0x324>)
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004220:	4b2f      	ldr	r3, [pc, #188]	; (80042e0 <HAL_GPIO_Init+0x324>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004244:	4a26      	ldr	r2, [pc, #152]	; (80042e0 <HAL_GPIO_Init+0x324>)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800424a:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <HAL_GPIO_Init+0x324>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	43db      	mvns	r3, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4013      	ands	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800426e:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <HAL_GPIO_Init+0x324>)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <HAL_GPIO_Init+0x324>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004298:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <HAL_GPIO_Init+0x324>)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3301      	adds	r3, #1
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	2b0f      	cmp	r3, #15
 80042a8:	f67f ae96 	bls.w	8003fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	3724      	adds	r7, #36	; 0x24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40013800 	.word	0x40013800
 80042c4:	40020000 	.word	0x40020000
 80042c8:	40020400 	.word	0x40020400
 80042cc:	40020800 	.word	0x40020800
 80042d0:	40020c00 	.word	0x40020c00
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40021400 	.word	0x40021400
 80042dc:	40021800 	.word	0x40021800
 80042e0:	40013c00 	.word	0x40013c00

080042e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	887b      	ldrh	r3, [r7, #2]
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
 8004300:	e001      	b.n	8004306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004306:	7bfb      	ldrb	r3, [r7, #15]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	807b      	strh	r3, [r7, #2]
 8004320:	4613      	mov	r3, r2
 8004322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004324:	787b      	ldrb	r3, [r7, #1]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800432a:	887a      	ldrh	r2, [r7, #2]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004330:	e003      	b.n	800433a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004332:	887b      	ldrh	r3, [r7, #2]
 8004334:	041a      	lsls	r2, r3, #16
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	619a      	str	r2, [r3, #24]
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0cc      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800435c:	4b68      	ldr	r3, [pc, #416]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d90c      	bls.n	8004384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b65      	ldr	r3, [pc, #404]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004372:	4b63      	ldr	r3, [pc, #396]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0b8      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d020      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800439c:	4b59      	ldr	r3, [pc, #356]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4a58      	ldr	r2, [pc, #352]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043b4:	4b53      	ldr	r3, [pc, #332]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4a52      	ldr	r2, [pc, #328]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c0:	4b50      	ldr	r3, [pc, #320]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	494d      	ldr	r1, [pc, #308]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d044      	beq.n	8004468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d107      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d119      	bne.n	8004426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e07f      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d003      	beq.n	8004406 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004402:	2b03      	cmp	r3, #3
 8004404:	d107      	bne.n	8004416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004406:	4b3f      	ldr	r3, [pc, #252]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e06f      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004416:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e067      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004426:	4b37      	ldr	r3, [pc, #220]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f023 0203 	bic.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4934      	ldr	r1, [pc, #208]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004438:	f7fe f9e2 	bl	8002800 <HAL_GetTick>
 800443c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443e:	e00a      	b.n	8004456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004440:	f7fe f9de 	bl	8002800 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	f241 3288 	movw	r2, #5000	; 0x1388
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e04f      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	4b2b      	ldr	r3, [pc, #172]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 020c 	and.w	r2, r3, #12
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	429a      	cmp	r2, r3
 8004466:	d1eb      	bne.n	8004440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004468:	4b25      	ldr	r3, [pc, #148]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d20c      	bcs.n	8004490 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b22      	ldr	r3, [pc, #136]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e032      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800449c:	4b19      	ldr	r3, [pc, #100]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4916      	ldr	r1, [pc, #88]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	490e      	ldr	r1, [pc, #56]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ce:	f000 f855 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80044d2:	4602      	mov	r2, r0
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	490a      	ldr	r1, [pc, #40]	; (8004508 <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	5ccb      	ldrb	r3, [r1, r3]
 80044e2:	fa22 f303 	lsr.w	r3, r2, r3
 80044e6:	4a09      	ldr	r2, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1c4>)
 80044e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <HAL_RCC_ClockConfig+0x1c8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe f942 	bl	8002778 <HAL_InitTick>

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40023c00 	.word	0x40023c00
 8004504:	40023800 	.word	0x40023800
 8004508:	080066f8 	.word	0x080066f8
 800450c:	20000024 	.word	0x20000024
 8004510:	2000002c 	.word	0x2000002c

08004514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <HAL_RCC_GetHCLKFreq+0x14>)
 800451a:	681b      	ldr	r3, [r3, #0]
}
 800451c:	4618      	mov	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000024 	.word	0x20000024

0800452c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004530:	f7ff fff0 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	0a9b      	lsrs	r3, r3, #10
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4903      	ldr	r1, [pc, #12]	; (8004550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40023800 	.word	0x40023800
 8004550:	08006708 	.word	0x08006708

08004554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004558:	f7ff ffdc 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0b5b      	lsrs	r3, r3, #13
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4903      	ldr	r1, [pc, #12]	; (8004578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40023800 	.word	0x40023800
 8004578:	08006708 	.word	0x08006708

0800457c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800457c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004580:	b088      	sub	sp, #32
 8004582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004598:	4bce      	ldr	r3, [pc, #824]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x358>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 030c 	and.w	r3, r3, #12
 80045a0:	2b0c      	cmp	r3, #12
 80045a2:	f200 818d 	bhi.w	80048c0 <HAL_RCC_GetSysClockFreq+0x344>
 80045a6:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <HAL_RCC_GetSysClockFreq+0x30>)
 80045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	080048c1 	.word	0x080048c1
 80045b4:	080048c1 	.word	0x080048c1
 80045b8:	080048c1 	.word	0x080048c1
 80045bc:	080045e7 	.word	0x080045e7
 80045c0:	080048c1 	.word	0x080048c1
 80045c4:	080048c1 	.word	0x080048c1
 80045c8:	080048c1 	.word	0x080048c1
 80045cc:	080045ed 	.word	0x080045ed
 80045d0:	080048c1 	.word	0x080048c1
 80045d4:	080048c1 	.word	0x080048c1
 80045d8:	080048c1 	.word	0x080048c1
 80045dc:	08004761 	.word	0x08004761
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045e0:	4bbd      	ldr	r3, [pc, #756]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80045e2:	61bb      	str	r3, [r7, #24]
       break;
 80045e4:	e16f      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045e6:	4bbd      	ldr	r3, [pc, #756]	; (80048dc <HAL_RCC_GetSysClockFreq+0x360>)
 80045e8:	61bb      	str	r3, [r7, #24]
      break;
 80045ea:	e16c      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ec:	4bb9      	ldr	r3, [pc, #740]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045f6:	4bb7      	ldr	r3, [pc, #732]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d053      	beq.n	80046aa <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004602:	4bb4      	ldr	r3, [pc, #720]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	099b      	lsrs	r3, r3, #6
 8004608:	461a      	mov	r2, r3
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004612:	f04f 0100 	mov.w	r1, #0
 8004616:	ea02 0400 	and.w	r4, r2, r0
 800461a:	603c      	str	r4, [r7, #0]
 800461c:	400b      	ands	r3, r1
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004624:	4620      	mov	r0, r4
 8004626:	4629      	mov	r1, r5
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	014b      	lsls	r3, r1, #5
 8004632:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004636:	0142      	lsls	r2, r0, #5
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	4623      	mov	r3, r4
 800463e:	1ac0      	subs	r0, r0, r3
 8004640:	462b      	mov	r3, r5
 8004642:	eb61 0103 	sbc.w	r1, r1, r3
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	018b      	lsls	r3, r1, #6
 8004650:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004654:	0182      	lsls	r2, r0, #6
 8004656:	1a12      	subs	r2, r2, r0
 8004658:	eb63 0301 	sbc.w	r3, r3, r1
 800465c:	f04f 0000 	mov.w	r0, #0
 8004660:	f04f 0100 	mov.w	r1, #0
 8004664:	00d9      	lsls	r1, r3, #3
 8004666:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800466a:	00d0      	lsls	r0, r2, #3
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4621      	mov	r1, r4
 8004672:	1852      	adds	r2, r2, r1
 8004674:	4629      	mov	r1, r5
 8004676:	eb43 0101 	adc.w	r1, r3, r1
 800467a:	460b      	mov	r3, r1
 800467c:	f04f 0000 	mov.w	r0, #0
 8004680:	f04f 0100 	mov.w	r1, #0
 8004684:	0259      	lsls	r1, r3, #9
 8004686:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800468a:	0250      	lsls	r0, r2, #9
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4610      	mov	r0, r2
 8004692:	4619      	mov	r1, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	461a      	mov	r2, r3
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	f7fc fa50 	bl	8000b40 <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4613      	mov	r3, r2
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	e04c      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046aa:	4b8a      	ldr	r3, [pc, #552]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	099b      	lsrs	r3, r3, #6
 80046b0:	461a      	mov	r2, r3
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046ba:	f04f 0100 	mov.w	r1, #0
 80046be:	ea02 0a00 	and.w	sl, r2, r0
 80046c2:	ea03 0b01 	and.w	fp, r3, r1
 80046c6:	4650      	mov	r0, sl
 80046c8:	4659      	mov	r1, fp
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	014b      	lsls	r3, r1, #5
 80046d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046d8:	0142      	lsls	r2, r0, #5
 80046da:	4610      	mov	r0, r2
 80046dc:	4619      	mov	r1, r3
 80046de:	ebb0 000a 	subs.w	r0, r0, sl
 80046e2:	eb61 010b 	sbc.w	r1, r1, fp
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	018b      	lsls	r3, r1, #6
 80046f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046f4:	0182      	lsls	r2, r0, #6
 80046f6:	1a12      	subs	r2, r2, r0
 80046f8:	eb63 0301 	sbc.w	r3, r3, r1
 80046fc:	f04f 0000 	mov.w	r0, #0
 8004700:	f04f 0100 	mov.w	r1, #0
 8004704:	00d9      	lsls	r1, r3, #3
 8004706:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800470a:	00d0      	lsls	r0, r2, #3
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	eb12 020a 	adds.w	r2, r2, sl
 8004714:	eb43 030b 	adc.w	r3, r3, fp
 8004718:	f04f 0000 	mov.w	r0, #0
 800471c:	f04f 0100 	mov.w	r1, #0
 8004720:	0299      	lsls	r1, r3, #10
 8004722:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004726:	0290      	lsls	r0, r2, #10
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4610      	mov	r0, r2
 800472e:	4619      	mov	r1, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	461a      	mov	r2, r3
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	f7fc fa02 	bl	8000b40 <__aeabi_uldivmod>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4613      	mov	r3, r2
 8004742:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004744:	4b63      	ldr	r3, [pc, #396]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	3301      	adds	r3, #1
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004754:	69fa      	ldr	r2, [r7, #28]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	fbb2 f3f3 	udiv	r3, r2, r3
 800475c:	61bb      	str	r3, [r7, #24]
      break;
 800475e:	e0b2      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004760:	4b5c      	ldr	r3, [pc, #368]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004768:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800476a:	4b5a      	ldr	r3, [pc, #360]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x358>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d04d      	beq.n	8004812 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004776:	4b57      	ldr	r3, [pc, #348]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	099b      	lsrs	r3, r3, #6
 800477c:	461a      	mov	r2, r3
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004786:	f04f 0100 	mov.w	r1, #0
 800478a:	ea02 0800 	and.w	r8, r2, r0
 800478e:	ea03 0901 	and.w	r9, r3, r1
 8004792:	4640      	mov	r0, r8
 8004794:	4649      	mov	r1, r9
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	014b      	lsls	r3, r1, #5
 80047a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047a4:	0142      	lsls	r2, r0, #5
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	ebb0 0008 	subs.w	r0, r0, r8
 80047ae:	eb61 0109 	sbc.w	r1, r1, r9
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	018b      	lsls	r3, r1, #6
 80047bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047c0:	0182      	lsls	r2, r0, #6
 80047c2:	1a12      	subs	r2, r2, r0
 80047c4:	eb63 0301 	sbc.w	r3, r3, r1
 80047c8:	f04f 0000 	mov.w	r0, #0
 80047cc:	f04f 0100 	mov.w	r1, #0
 80047d0:	00d9      	lsls	r1, r3, #3
 80047d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047d6:	00d0      	lsls	r0, r2, #3
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	eb12 0208 	adds.w	r2, r2, r8
 80047e0:	eb43 0309 	adc.w	r3, r3, r9
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f04f 0100 	mov.w	r1, #0
 80047ec:	0259      	lsls	r1, r3, #9
 80047ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80047f2:	0250      	lsls	r0, r2, #9
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	461a      	mov	r2, r3
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	f7fc f99c 	bl	8000b40 <__aeabi_uldivmod>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4613      	mov	r3, r2
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	e04a      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004812:	4b30      	ldr	r3, [pc, #192]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	099b      	lsrs	r3, r3, #6
 8004818:	461a      	mov	r2, r3
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004822:	f04f 0100 	mov.w	r1, #0
 8004826:	ea02 0400 	and.w	r4, r2, r0
 800482a:	ea03 0501 	and.w	r5, r3, r1
 800482e:	4620      	mov	r0, r4
 8004830:	4629      	mov	r1, r5
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	014b      	lsls	r3, r1, #5
 800483c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004840:	0142      	lsls	r2, r0, #5
 8004842:	4610      	mov	r0, r2
 8004844:	4619      	mov	r1, r3
 8004846:	1b00      	subs	r0, r0, r4
 8004848:	eb61 0105 	sbc.w	r1, r1, r5
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	018b      	lsls	r3, r1, #6
 8004856:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800485a:	0182      	lsls	r2, r0, #6
 800485c:	1a12      	subs	r2, r2, r0
 800485e:	eb63 0301 	sbc.w	r3, r3, r1
 8004862:	f04f 0000 	mov.w	r0, #0
 8004866:	f04f 0100 	mov.w	r1, #0
 800486a:	00d9      	lsls	r1, r3, #3
 800486c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004870:	00d0      	lsls	r0, r2, #3
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	1912      	adds	r2, r2, r4
 8004878:	eb45 0303 	adc.w	r3, r5, r3
 800487c:	f04f 0000 	mov.w	r0, #0
 8004880:	f04f 0100 	mov.w	r1, #0
 8004884:	0299      	lsls	r1, r3, #10
 8004886:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800488a:	0290      	lsls	r0, r2, #10
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	461a      	mov	r2, r3
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	f7fc f950 	bl	8000b40 <__aeabi_uldivmod>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4613      	mov	r3, r2
 80048a6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048a8:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	0f1b      	lsrs	r3, r3, #28
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	61bb      	str	r3, [r7, #24]
      break;
 80048be:	e002      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80048c2:	61bb      	str	r3, [r7, #24]
      break;
 80048c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048c6:	69bb      	ldr	r3, [r7, #24]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3720      	adds	r7, #32
 80048cc:	46bd      	mov	sp, r7
 80048ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800
 80048d8:	00f42400 	.word	0x00f42400
 80048dc:	007a1200 	.word	0x007a1200

080048e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e28d      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 8083 	beq.w	8004a06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004900:	4b94      	ldr	r3, [pc, #592]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 030c 	and.w	r3, r3, #12
 8004908:	2b04      	cmp	r3, #4
 800490a:	d019      	beq.n	8004940 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800490c:	4b91      	ldr	r3, [pc, #580]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004914:	2b08      	cmp	r3, #8
 8004916:	d106      	bne.n	8004926 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004918:	4b8e      	ldr	r3, [pc, #568]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004924:	d00c      	beq.n	8004940 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004926:	4b8b      	ldr	r3, [pc, #556]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800492e:	2b0c      	cmp	r3, #12
 8004930:	d112      	bne.n	8004958 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004932:	4b88      	ldr	r3, [pc, #544]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800493e:	d10b      	bne.n	8004958 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	4b84      	ldr	r3, [pc, #528]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d05b      	beq.n	8004a04 <HAL_RCC_OscConfig+0x124>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d157      	bne.n	8004a04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e25a      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004960:	d106      	bne.n	8004970 <HAL_RCC_OscConfig+0x90>
 8004962:	4b7c      	ldr	r3, [pc, #496]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a7b      	ldr	r2, [pc, #492]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	e01d      	b.n	80049ac <HAL_RCC_OscConfig+0xcc>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004978:	d10c      	bne.n	8004994 <HAL_RCC_OscConfig+0xb4>
 800497a:	4b76      	ldr	r3, [pc, #472]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a75      	ldr	r2, [pc, #468]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	4b73      	ldr	r3, [pc, #460]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a72      	ldr	r2, [pc, #456]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e00b      	b.n	80049ac <HAL_RCC_OscConfig+0xcc>
 8004994:	4b6f      	ldr	r3, [pc, #444]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a6e      	ldr	r2, [pc, #440]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 800499a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	4b6c      	ldr	r3, [pc, #432]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a6b      	ldr	r2, [pc, #428]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80049a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d013      	beq.n	80049dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd ff24 	bl	8002800 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fd ff20 	bl	8002800 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	; 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e21f      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	4b61      	ldr	r3, [pc, #388]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0xdc>
 80049da:	e014      	b.n	8004a06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fd ff10 	bl	8002800 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e4:	f7fd ff0c 	bl	8002800 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	; 0x64
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e20b      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f6:	4b57      	ldr	r3, [pc, #348]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x104>
 8004a02:	e000      	b.n	8004a06 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d06f      	beq.n	8004af2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a12:	4b50      	ldr	r3, [pc, #320]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d017      	beq.n	8004a4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a1e:	4b4d      	ldr	r3, [pc, #308]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d105      	bne.n	8004a36 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a2a:	4b4a      	ldr	r3, [pc, #296]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00b      	beq.n	8004a4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a36:	4b47      	ldr	r3, [pc, #284]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d11c      	bne.n	8004a7c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a42:	4b44      	ldr	r3, [pc, #272]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d116      	bne.n	8004a7c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4e:	4b41      	ldr	r3, [pc, #260]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <HAL_RCC_OscConfig+0x186>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d001      	beq.n	8004a66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e1d3      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a66:	4b3b      	ldr	r3, [pc, #236]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4937      	ldr	r1, [pc, #220]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7a:	e03a      	b.n	8004af2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d020      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a84:	4b34      	ldr	r3, [pc, #208]	; (8004b58 <HAL_RCC_OscConfig+0x278>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7fd feb9 	bl	8002800 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a92:	f7fd feb5 	bl	8002800 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e1b4      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa4:	4b2b      	ldr	r3, [pc, #172]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab0:	4b28      	ldr	r3, [pc, #160]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	4925      	ldr	r1, [pc, #148]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	600b      	str	r3, [r1, #0]
 8004ac4:	e015      	b.n	8004af2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac6:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <HAL_RCC_OscConfig+0x278>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fd fe98 	bl	8002800 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad4:	f7fd fe94 	bl	8002800 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e193      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae6:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d036      	beq.n	8004b6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d016      	beq.n	8004b34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b06:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <HAL_RCC_OscConfig+0x27c>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0c:	f7fd fe78 	bl	8002800 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b14:	f7fd fe74 	bl	8002800 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e173      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_RCC_OscConfig+0x274>)
 8004b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCC_OscConfig+0x234>
 8004b32:	e01b      	b.n	8004b6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b34:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <HAL_RCC_OscConfig+0x27c>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3a:	f7fd fe61 	bl	8002800 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b40:	e00e      	b.n	8004b60 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b42:	f7fd fe5d 	bl	8002800 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d907      	bls.n	8004b60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e15c      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
 8004b54:	40023800 	.word	0x40023800
 8004b58:	42470000 	.word	0x42470000
 8004b5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b60:	4b8a      	ldr	r3, [pc, #552]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1ea      	bne.n	8004b42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 8097 	beq.w	8004ca8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b7e:	4b83      	ldr	r3, [pc, #524]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10f      	bne.n	8004baa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	4b7f      	ldr	r3, [pc, #508]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	4a7e      	ldr	r2, [pc, #504]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b98:	6413      	str	r3, [r2, #64]	; 0x40
 8004b9a:	4b7c      	ldr	r3, [pc, #496]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	60bb      	str	r3, [r7, #8]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004baa:	4b79      	ldr	r3, [pc, #484]	; (8004d90 <HAL_RCC_OscConfig+0x4b0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d118      	bne.n	8004be8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bb6:	4b76      	ldr	r3, [pc, #472]	; (8004d90 <HAL_RCC_OscConfig+0x4b0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a75      	ldr	r2, [pc, #468]	; (8004d90 <HAL_RCC_OscConfig+0x4b0>)
 8004bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc2:	f7fd fe1d 	bl	8002800 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bca:	f7fd fe19 	bl	8002800 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e118      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bdc:	4b6c      	ldr	r3, [pc, #432]	; (8004d90 <HAL_RCC_OscConfig+0x4b0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d106      	bne.n	8004bfe <HAL_RCC_OscConfig+0x31e>
 8004bf0:	4b66      	ldr	r3, [pc, #408]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf4:	4a65      	ldr	r2, [pc, #404]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfc:	e01c      	b.n	8004c38 <HAL_RCC_OscConfig+0x358>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCC_OscConfig+0x340>
 8004c06:	4b61      	ldr	r3, [pc, #388]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	4a60      	ldr	r2, [pc, #384]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004c0c:	f043 0304 	orr.w	r3, r3, #4
 8004c10:	6713      	str	r3, [r2, #112]	; 0x70
 8004c12:	4b5e      	ldr	r3, [pc, #376]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	4a5d      	ldr	r2, [pc, #372]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1e:	e00b      	b.n	8004c38 <HAL_RCC_OscConfig+0x358>
 8004c20:	4b5a      	ldr	r3, [pc, #360]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	4a59      	ldr	r2, [pc, #356]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004c26:	f023 0301 	bic.w	r3, r3, #1
 8004c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2c:	4b57      	ldr	r3, [pc, #348]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	4a56      	ldr	r2, [pc, #344]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004c32:	f023 0304 	bic.w	r3, r3, #4
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d015      	beq.n	8004c6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c40:	f7fd fdde 	bl	8002800 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c46:	e00a      	b.n	8004c5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c48:	f7fd fdda 	bl	8002800 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e0d7      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5e:	4b4b      	ldr	r3, [pc, #300]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0ee      	beq.n	8004c48 <HAL_RCC_OscConfig+0x368>
 8004c6a:	e014      	b.n	8004c96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fd fdc8 	bl	8002800 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c74:	f7fd fdc4 	bl	8002800 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e0c1      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8a:	4b40      	ldr	r3, [pc, #256]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1ee      	bne.n	8004c74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c96:	7dfb      	ldrb	r3, [r7, #23]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d105      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c9c:	4b3b      	ldr	r3, [pc, #236]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	4a3a      	ldr	r2, [pc, #232]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80ad 	beq.w	8004e0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cb2:	4b36      	ldr	r3, [pc, #216]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d060      	beq.n	8004d80 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d145      	bne.n	8004d52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc6:	4b33      	ldr	r3, [pc, #204]	; (8004d94 <HAL_RCC_OscConfig+0x4b4>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fd fd98 	bl	8002800 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd4:	f7fd fd94 	bl	8002800 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e093      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce6:	4b29      	ldr	r3, [pc, #164]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69da      	ldr	r2, [r3, #28]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	019b      	lsls	r3, r3, #6
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	085b      	lsrs	r3, r3, #1
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	061b      	lsls	r3, r3, #24
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	071b      	lsls	r3, r3, #28
 8004d1e:	491b      	ldr	r1, [pc, #108]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d24:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <HAL_RCC_OscConfig+0x4b4>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2a:	f7fd fd69 	bl	8002800 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d32:	f7fd fd65 	bl	8002800 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e064      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d44:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <HAL_RCC_OscConfig+0x452>
 8004d50:	e05c      	b.n	8004e0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d52:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <HAL_RCC_OscConfig+0x4b4>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fd fd52 	bl	8002800 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fd fd4e 	bl	8002800 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e04d      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_RCC_OscConfig+0x4ac>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x480>
 8004d7e:	e045      	b.n	8004e0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d107      	bne.n	8004d98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e040      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	40007000 	.word	0x40007000
 8004d94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d98:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <HAL_RCC_OscConfig+0x538>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d030      	beq.n	8004e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d129      	bne.n	8004e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d122      	bne.n	8004e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dc8:	4013      	ands	r3, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d119      	bne.n	8004e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	3b01      	subs	r3, #1
 8004de2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d10f      	bne.n	8004e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d107      	bne.n	8004e08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d001      	beq.n	8004e0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40023800 	.word	0x40023800

08004e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e041      	b.n	8004eb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fd f818 	bl	8001e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f000 fa96 	bl	800538c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d001      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e04e      	b.n	8004f72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a23      	ldr	r2, [pc, #140]	; (8004f80 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d022      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d01d      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1f      	ldr	r2, [pc, #124]	; (8004f84 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d018      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1e      	ldr	r2, [pc, #120]	; (8004f88 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d013      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1c      	ldr	r2, [pc, #112]	; (8004f8c <HAL_TIM_Base_Start_IT+0xd0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00e      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1b      	ldr	r2, [pc, #108]	; (8004f90 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d009      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a19      	ldr	r2, [pc, #100]	; (8004f94 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x80>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a18      	ldr	r2, [pc, #96]	; (8004f98 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d111      	bne.n	8004f60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b06      	cmp	r3, #6
 8004f4c:	d010      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0201 	orr.w	r2, r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5e:	e007      	b.n	8004f70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	40000c00 	.word	0x40000c00
 8004f90:	40010400 	.word	0x40010400
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40001800 	.word	0x40001800

08004f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d122      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d11b      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0202 	mvn.w	r2, #2
 8004fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f9b5 	bl	800534e <HAL_TIM_IC_CaptureCallback>
 8004fe4:	e005      	b.n	8004ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f9a7 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f9b8 	bl	8005362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b04      	cmp	r3, #4
 8005004:	d122      	bne.n	800504c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b04      	cmp	r3, #4
 8005012:	d11b      	bne.n	800504c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0204 	mvn.w	r2, #4
 800501c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2202      	movs	r2, #2
 8005022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f98b 	bl	800534e <HAL_TIM_IC_CaptureCallback>
 8005038:	e005      	b.n	8005046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f97d 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f98e 	bl	8005362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b08      	cmp	r3, #8
 8005058:	d122      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b08      	cmp	r3, #8
 8005066:	d11b      	bne.n	80050a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0208 	mvn.w	r2, #8
 8005070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2204      	movs	r2, #4
 8005076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f961 	bl	800534e <HAL_TIM_IC_CaptureCallback>
 800508c:	e005      	b.n	800509a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f953 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f964 	bl	8005362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b10      	cmp	r3, #16
 80050ac:	d122      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d11b      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0210 	mvn.w	r2, #16
 80050c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2208      	movs	r2, #8
 80050ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f937 	bl	800534e <HAL_TIM_IC_CaptureCallback>
 80050e0:	e005      	b.n	80050ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f929 	bl	800533a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f93a 	bl	8005362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d10e      	bne.n	8005120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b01      	cmp	r3, #1
 800510e:	d107      	bne.n	8005120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0201 	mvn.w	r2, #1
 8005118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fc fe06 	bl	8001d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	2b80      	cmp	r3, #128	; 0x80
 800512c:	d10e      	bne.n	800514c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005138:	2b80      	cmp	r3, #128	; 0x80
 800513a:	d107      	bne.n	800514c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fae0 	bl	800570c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005156:	2b40      	cmp	r3, #64	; 0x40
 8005158:	d10e      	bne.n	8005178 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005164:	2b40      	cmp	r3, #64	; 0x40
 8005166:	d107      	bne.n	8005178 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f8ff 	bl	8005376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b20      	cmp	r3, #32
 8005184:	d10e      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b20      	cmp	r3, #32
 8005192:	d107      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0220 	mvn.w	r2, #32
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 faaa 	bl	80056f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051a4:	bf00      	nop
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_TIM_ConfigClockSource+0x1c>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e0b4      	b.n	8005332 <HAL_TIM_ConfigClockSource+0x186>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005200:	d03e      	beq.n	8005280 <HAL_TIM_ConfigClockSource+0xd4>
 8005202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005206:	f200 8087 	bhi.w	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520e:	f000 8086 	beq.w	800531e <HAL_TIM_ConfigClockSource+0x172>
 8005212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005216:	d87f      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005218:	2b70      	cmp	r3, #112	; 0x70
 800521a:	d01a      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0xa6>
 800521c:	2b70      	cmp	r3, #112	; 0x70
 800521e:	d87b      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005220:	2b60      	cmp	r3, #96	; 0x60
 8005222:	d050      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005224:	2b60      	cmp	r3, #96	; 0x60
 8005226:	d877      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005228:	2b50      	cmp	r3, #80	; 0x50
 800522a:	d03c      	beq.n	80052a6 <HAL_TIM_ConfigClockSource+0xfa>
 800522c:	2b50      	cmp	r3, #80	; 0x50
 800522e:	d873      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005230:	2b40      	cmp	r3, #64	; 0x40
 8005232:	d058      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005234:	2b40      	cmp	r3, #64	; 0x40
 8005236:	d86f      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005238:	2b30      	cmp	r3, #48	; 0x30
 800523a:	d064      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 800523c:	2b30      	cmp	r3, #48	; 0x30
 800523e:	d86b      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005240:	2b20      	cmp	r3, #32
 8005242:	d060      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 8005244:	2b20      	cmp	r3, #32
 8005246:	d867      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d05c      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 800524c:	2b10      	cmp	r3, #16
 800524e:	d05a      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x15a>
 8005250:	e062      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6899      	ldr	r1, [r3, #8]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f000 f9ad 	bl	80055c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	609a      	str	r2, [r3, #8]
      break;
 800527e:	e04f      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	6899      	ldr	r1, [r3, #8]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f000 f996 	bl	80055c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052a2:	609a      	str	r2, [r3, #8]
      break;
 80052a4:	e03c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6859      	ldr	r1, [r3, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f000 f90a 	bl	80054cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2150      	movs	r1, #80	; 0x50
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f963 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 80052c4:	e02c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6859      	ldr	r1, [r3, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	461a      	mov	r2, r3
 80052d4:	f000 f929 	bl	800552a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2160      	movs	r1, #96	; 0x60
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f953 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 80052e4:	e01c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6859      	ldr	r1, [r3, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f000 f8ea 	bl	80054cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2140      	movs	r1, #64	; 0x40
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f943 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 8005304:	e00c      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4619      	mov	r1, r3
 8005310:	4610      	mov	r0, r2
 8005312:	f000 f93a 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 8005316:	e003      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]
      break;
 800531c:	e000      	b.n	8005320 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800531e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a40      	ldr	r2, [pc, #256]	; (80054a0 <TIM_Base_SetConfig+0x114>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053aa:	d00f      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a3d      	ldr	r2, [pc, #244]	; (80054a4 <TIM_Base_SetConfig+0x118>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00b      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a3c      	ldr	r2, [pc, #240]	; (80054a8 <TIM_Base_SetConfig+0x11c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d007      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a3b      	ldr	r2, [pc, #236]	; (80054ac <TIM_Base_SetConfig+0x120>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a3a      	ldr	r2, [pc, #232]	; (80054b0 <TIM_Base_SetConfig+0x124>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d108      	bne.n	80053de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a2f      	ldr	r2, [pc, #188]	; (80054a0 <TIM_Base_SetConfig+0x114>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d02b      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ec:	d027      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a2c      	ldr	r2, [pc, #176]	; (80054a4 <TIM_Base_SetConfig+0x118>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d023      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2b      	ldr	r2, [pc, #172]	; (80054a8 <TIM_Base_SetConfig+0x11c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d01f      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a2a      	ldr	r2, [pc, #168]	; (80054ac <TIM_Base_SetConfig+0x120>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d01b      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a29      	ldr	r2, [pc, #164]	; (80054b0 <TIM_Base_SetConfig+0x124>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d017      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a28      	ldr	r2, [pc, #160]	; (80054b4 <TIM_Base_SetConfig+0x128>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d013      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a27      	ldr	r2, [pc, #156]	; (80054b8 <TIM_Base_SetConfig+0x12c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00f      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a26      	ldr	r2, [pc, #152]	; (80054bc <TIM_Base_SetConfig+0x130>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00b      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a25      	ldr	r2, [pc, #148]	; (80054c0 <TIM_Base_SetConfig+0x134>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d007      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a24      	ldr	r2, [pc, #144]	; (80054c4 <TIM_Base_SetConfig+0x138>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a23      	ldr	r2, [pc, #140]	; (80054c8 <TIM_Base_SetConfig+0x13c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d108      	bne.n	8005450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <TIM_Base_SetConfig+0x114>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_Base_SetConfig+0xf8>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a0c      	ldr	r2, [pc, #48]	; (80054b0 <TIM_Base_SetConfig+0x124>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d103      	bne.n	800548c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	615a      	str	r2, [r3, #20]
}
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40010000 	.word	0x40010000
 80054a4:	40000400 	.word	0x40000400
 80054a8:	40000800 	.word	0x40000800
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	40010400 	.word	0x40010400
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40014400 	.word	0x40014400
 80054bc:	40014800 	.word	0x40014800
 80054c0:	40001800 	.word	0x40001800
 80054c4:	40001c00 	.word	0x40001c00
 80054c8:	40002000 	.word	0x40002000

080054cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f023 0201 	bic.w	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f023 030a 	bic.w	r3, r3, #10
 8005508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800552a:	b480      	push	{r7}
 800552c:	b087      	sub	sp, #28
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	f023 0210 	bic.w	r2, r3, #16
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	031b      	lsls	r3, r3, #12
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005566:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	621a      	str	r2, [r3, #32]
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f043 0307 	orr.w	r3, r3, #7
 80055ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	021a      	lsls	r2, r3, #8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	609a      	str	r2, [r3, #8]
}
 80055f4:	bf00      	nop
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005614:	2302      	movs	r3, #2
 8005616:	e05a      	b.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a21      	ldr	r2, [pc, #132]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d022      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005664:	d01d      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a1d      	ldr	r2, [pc, #116]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d018      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1b      	ldr	r2, [pc, #108]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d013      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1a      	ldr	r2, [pc, #104]	; (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00e      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a18      	ldr	r2, [pc, #96]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a17      	ldr	r2, [pc, #92]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a15      	ldr	r2, [pc, #84]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d10c      	bne.n	80056bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40000c00 	.word	0x40000c00
 80056ec:	40010400 	.word	0x40010400
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40001800 	.word	0x40001800

080056f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e03f      	b.n	80057b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fc fbbc 	bl	8001ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2224      	movs	r2, #36	; 0x24
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fdc7 	bl	80062f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08c      	sub	sp, #48	; 0x30
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d165      	bne.n	80058a2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_UART_Transmit_DMA+0x26>
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e05e      	b.n	80058a4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_UART_Transmit_DMA+0x38>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e057      	b.n	80058a4 <HAL_UART_Transmit_DMA+0xe8>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	88fa      	ldrh	r2, [r7, #6]
 8005806:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	88fa      	ldrh	r2, [r7, #6]
 800580c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2221      	movs	r2, #33	; 0x21
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005820:	4a22      	ldr	r2, [pc, #136]	; (80058ac <HAL_UART_Transmit_DMA+0xf0>)
 8005822:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005828:	4a21      	ldr	r2, [pc, #132]	; (80058b0 <HAL_UART_Transmit_DMA+0xf4>)
 800582a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005830:	4a20      	ldr	r2, [pc, #128]	; (80058b4 <HAL_UART_Transmit_DMA+0xf8>)
 8005832:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005838:	2200      	movs	r2, #0
 800583a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800583c:	f107 0308 	add.w	r3, r7, #8
 8005840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005848:	6819      	ldr	r1, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3304      	adds	r3, #4
 8005850:	461a      	mov	r2, r3
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	f7fe f85e 	bl	8003914 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005860:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3314      	adds	r3, #20
 8005870:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	617b      	str	r3, [r7, #20]
   return(result);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3314      	adds	r3, #20
 8005888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800588a:	627a      	str	r2, [r7, #36]	; 0x24
 800588c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	6a39      	ldr	r1, [r7, #32]
 8005890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	61fb      	str	r3, [r7, #28]
   return(result);
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e5      	bne.n	800586a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	e000      	b.n	80058a4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80058a2:	2302      	movs	r3, #2
  }
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3730      	adds	r7, #48	; 0x30
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	08005e29 	.word	0x08005e29
 80058b0:	08005ec3 	.word	0x08005ec3
 80058b4:	08005edf 	.word	0x08005edf

080058b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b0ba      	sub	sp, #232	; 0xe8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058de:	2300      	movs	r3, #0
 80058e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10f      	bne.n	800591e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d009      	beq.n	800591e <HAL_UART_IRQHandler+0x66>
 800590a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fc32 	bl	8006180 <UART_Receive_IT>
      return;
 800591c:	e256      	b.n	8005dcc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800591e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 80de 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x22c>
 8005928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005938:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80d1 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <HAL_UART_IRQHandler+0xae>
 800594e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f043 0201 	orr.w	r2, r3, #1
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00b      	beq.n	800598a <HAL_UART_IRQHandler+0xd2>
 8005972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f043 0202 	orr.w	r2, r3, #2
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800598a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00b      	beq.n	80059ae <HAL_UART_IRQHandler+0xf6>
 8005996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f043 0204 	orr.w	r2, r3, #4
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d011      	beq.n	80059de <HAL_UART_IRQHandler+0x126>
 80059ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d105      	bne.n	80059d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d005      	beq.n	80059de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f043 0208 	orr.w	r2, r3, #8
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 81ed 	beq.w	8005dc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <HAL_UART_IRQHandler+0x14e>
 80059f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fbbd 	bl	8006180 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <HAL_UART_IRQHandler+0x17a>
 8005a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d04f      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fac5 	bl	8005fc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d141      	bne.n	8005aca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3314      	adds	r3, #20
 8005a6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1d9      	bne.n	8005a46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d013      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	4a7d      	ldr	r2, [pc, #500]	; (8005c94 <HAL_UART_IRQHandler+0x3dc>)
 8005aa0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fd fffc 	bl	8003aa4 <HAL_DMA_Abort_IT>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d016      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005abc:	4610      	mov	r0, r2
 8005abe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	e00e      	b.n	8005ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f99a 	bl	8005dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac8:	e00a      	b.n	8005ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f996 	bl	8005dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad0:	e006      	b.n	8005ae0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f992 	bl	8005dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ade:	e170      	b.n	8005dc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	bf00      	nop
    return;
 8005ae2:	e16e      	b.n	8005dc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	f040 814a 	bne.w	8005d82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 8143 	beq.w	8005d82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 813c 	beq.w	8005d82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	60bb      	str	r3, [r7, #8]
 8005b1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2a:	2b40      	cmp	r3, #64	; 0x40
 8005b2c:	f040 80b4 	bne.w	8005c98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8140 	beq.w	8005dc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	f080 8139 	bcs.w	8005dc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b66:	f000 8088 	beq.w	8005c7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ba2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1d9      	bne.n	8005b6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3314      	adds	r3, #20
 8005bbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bc0:	e853 3f00 	ldrex	r3, [r3]
 8005bc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bc8:	f023 0301 	bic.w	r3, r3, #1
 8005bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3314      	adds	r3, #20
 8005bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005be2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e1      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3314      	adds	r3, #20
 8005bf8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3314      	adds	r3, #20
 8005c12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e3      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	330c      	adds	r3, #12
 8005c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c4a:	f023 0310 	bic.w	r3, r3, #16
 8005c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e3      	bne.n	8005c38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fd fea5 	bl	80039c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f8c0 	bl	8005e10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c90:	e099      	b.n	8005dc6 <HAL_UART_IRQHandler+0x50e>
 8005c92:	bf00      	nop
 8005c94:	08006089 	.word	0x08006089
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 808b 	beq.w	8005dca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 8086 	beq.w	8005dca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ce2:	647a      	str	r2, [r7, #68]	; 0x44
 8005ce4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e3      	bne.n	8005cbe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3314      	adds	r3, #20
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	623b      	str	r3, [r7, #32]
   return(result);
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3314      	adds	r3, #20
 8005d16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d1a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e3      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	330c      	adds	r3, #12
 8005d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0310 	bic.w	r3, r3, #16
 8005d52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	330c      	adds	r3, #12
 8005d5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d60:	61fa      	str	r2, [r7, #28]
 8005d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e3      	bne.n	8005d3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f848 	bl	8005e10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d80:	e023      	b.n	8005dca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <HAL_UART_IRQHandler+0x4ea>
 8005d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f988 	bl	80060b0 <UART_Transmit_IT>
    return;
 8005da0:	e014      	b.n	8005dcc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00e      	beq.n	8005dcc <HAL_UART_IRQHandler+0x514>
 8005dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f9c8 	bl	8006150 <UART_EndTransmit_IT>
    return;
 8005dc0:	e004      	b.n	8005dcc <HAL_UART_IRQHandler+0x514>
    return;
 8005dc2:	bf00      	nop
 8005dc4:	e002      	b.n	8005dcc <HAL_UART_IRQHandler+0x514>
      return;
 8005dc6:	bf00      	nop
 8005dc8:	e000      	b.n	8005dcc <HAL_UART_IRQHandler+0x514>
      return;
 8005dca:	bf00      	nop
  }
}
 8005dcc:	37e8      	adds	r7, #232	; 0xe8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop

08005dd4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b090      	sub	sp, #64	; 0x40
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d137      	bne.n	8005eb4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e46:	2200      	movs	r2, #0
 8005e48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3314      	adds	r3, #20
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	623b      	str	r3, [r7, #32]
   return(result);
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e60:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3314      	adds	r3, #20
 8005e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e6a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e5      	bne.n	8005e4a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	330c      	adds	r3, #12
 8005e84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	e853 3f00 	ldrex	r3, [r3]
 8005e8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
 8005e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	330c      	adds	r3, #12
 8005e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e9e:	61fa      	str	r2, [r7, #28]
 8005ea0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	69b9      	ldr	r1, [r7, #24]
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	617b      	str	r3, [r7, #20]
   return(result);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e5      	bne.n	8005e7e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005eb2:	e002      	b.n	8005eba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005eb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005eb6:	f7fb fef7 	bl	8001ca8 <HAL_UART_TxCpltCallback>
}
 8005eba:	bf00      	nop
 8005ebc:	3740      	adds	r7, #64	; 0x40
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff ff7f 	bl	8005dd4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efa:	2b80      	cmp	r3, #128	; 0x80
 8005efc:	bf0c      	ite	eq
 8005efe:	2301      	moveq	r3, #1
 8005f00:	2300      	movne	r3, #0
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b21      	cmp	r3, #33	; 0x21
 8005f10:	d108      	bne.n	8005f24 <UART_DMAError+0x46>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d005      	beq.n	8005f24 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005f1e:	68b8      	ldr	r0, [r7, #8]
 8005f20:	f000 f827 	bl	8005f72 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2e:	2b40      	cmp	r3, #64	; 0x40
 8005f30:	bf0c      	ite	eq
 8005f32:	2301      	moveq	r3, #1
 8005f34:	2300      	movne	r3, #0
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b22      	cmp	r3, #34	; 0x22
 8005f44:	d108      	bne.n	8005f58 <UART_DMAError+0x7a>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005f52:	68b8      	ldr	r0, [r7, #8]
 8005f54:	f000 f835 	bl	8005fc2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	f043 0210 	orr.w	r2, r3, #16
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f64:	68b8      	ldr	r0, [r7, #8]
 8005f66:	f7ff ff49 	bl	8005dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b089      	sub	sp, #36	; 0x24
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	330c      	adds	r3, #12
 8005f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f90:	61fb      	str	r3, [r7, #28]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	330c      	adds	r3, #12
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	61ba      	str	r2, [r7, #24]
 8005f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	6979      	ldr	r1, [r7, #20]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e5      	bne.n	8005f7a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005fb6:	bf00      	nop
 8005fb8:	3724      	adds	r7, #36	; 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b095      	sub	sp, #84	; 0x54
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fea:	643a      	str	r2, [r7, #64]	; 0x40
 8005fec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ff0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e5      	bne.n	8005fca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3314      	adds	r3, #20
 8006004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	61fb      	str	r3, [r7, #28]
   return(result);
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	f023 0301 	bic.w	r3, r3, #1
 8006014:	64bb      	str	r3, [r7, #72]	; 0x48
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3314      	adds	r3, #20
 800601c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800601e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e5      	bne.n	8005ffe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	2b01      	cmp	r3, #1
 8006038:	d119      	bne.n	800606e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	330c      	adds	r3, #12
 8006040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	60bb      	str	r3, [r7, #8]
   return(result);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f023 0310 	bic.w	r3, r3, #16
 8006050:	647b      	str	r3, [r7, #68]	; 0x44
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	330c      	adds	r3, #12
 8006058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800605a:	61ba      	str	r2, [r7, #24]
 800605c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	6979      	ldr	r1, [r7, #20]
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	613b      	str	r3, [r7, #16]
   return(result);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e5      	bne.n	800603a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800607c:	bf00      	nop
 800607e:	3754      	adds	r7, #84	; 0x54
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f7ff feaa 	bl	8005dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b21      	cmp	r3, #33	; 0x21
 80060c2:	d13e      	bne.n	8006142 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060cc:	d114      	bne.n	80060f8 <UART_Transmit_IT+0x48>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d110      	bne.n	80060f8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	1c9a      	adds	r2, r3, #2
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	621a      	str	r2, [r3, #32]
 80060f6:	e008      	b.n	800610a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	1c59      	adds	r1, r3, #1
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6211      	str	r1, [r2, #32]
 8006102:	781a      	ldrb	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29b      	uxth	r3, r3
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	4619      	mov	r1, r3
 8006118:	84d1      	strh	r1, [r2, #38]	; 0x26
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10f      	bne.n	800613e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68da      	ldr	r2, [r3, #12]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800612c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800613c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e000      	b.n	8006144 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006142:	2302      	movs	r3, #2
  }
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006166:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7fb fd99 	bl	8001ca8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08c      	sub	sp, #48	; 0x30
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b22      	cmp	r3, #34	; 0x22
 8006192:	f040 80ab 	bne.w	80062ec <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619e:	d117      	bne.n	80061d0 <UART_Receive_IT+0x50>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d113      	bne.n	80061d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061a8:	2300      	movs	r3, #0
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061be:	b29a      	uxth	r2, r3
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	1c9a      	adds	r2, r3, #2
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	629a      	str	r2, [r3, #40]	; 0x28
 80061ce:	e026      	b.n	800621e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e2:	d007      	beq.n	80061f4 <UART_Receive_IT+0x74>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <UART_Receive_IT+0x82>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d106      	bne.n	8006202 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	e008      	b.n	8006214 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	b2db      	uxtb	r3, r3
 800620a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800620e:	b2da      	uxtb	r2, r3
 8006210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006212:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006222:	b29b      	uxth	r3, r3
 8006224:	3b01      	subs	r3, #1
 8006226:	b29b      	uxth	r3, r3
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	4619      	mov	r1, r3
 800622c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800622e:	2b00      	cmp	r3, #0
 8006230:	d15a      	bne.n	80062e8 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0220 	bic.w	r2, r2, #32
 8006240:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006250:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695a      	ldr	r2, [r3, #20]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0201 	bic.w	r2, r2, #1
 8006260:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2220      	movs	r2, #32
 8006266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	2b01      	cmp	r3, #1
 8006270:	d135      	bne.n	80062de <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	613b      	str	r3, [r7, #16]
   return(result);
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f023 0310 	bic.w	r3, r3, #16
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	330c      	adds	r3, #12
 8006296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006298:	623a      	str	r2, [r7, #32]
 800629a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	69f9      	ldr	r1, [r7, #28]
 800629e:	6a3a      	ldr	r2, [r7, #32]
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e5      	bne.n	8006278 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	2b10      	cmp	r3, #16
 80062b8:	d10a      	bne.n	80062d0 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff fd9a 	bl	8005e10 <HAL_UARTEx_RxEventCallback>
 80062dc:	e002      	b.n	80062e4 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff fd82 	bl	8005de8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	e002      	b.n	80062ee <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e000      	b.n	80062ee <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80062ec:	2302      	movs	r3, #2
  }
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3730      	adds	r7, #48	; 0x30
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fc:	b09f      	sub	sp, #124	; 0x7c
 80062fe:	af00      	add	r7, sp, #0
 8006300:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800630c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630e:	68d9      	ldr	r1, [r3, #12]
 8006310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	ea40 0301 	orr.w	r3, r0, r1
 8006318:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800631a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	431a      	orrs	r2, r3
 8006324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	431a      	orrs	r2, r3
 800632a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	4313      	orrs	r3, r2
 8006330:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800633c:	f021 010c 	bic.w	r1, r1, #12
 8006340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006346:	430b      	orrs	r3, r1
 8006348:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800634a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006356:	6999      	ldr	r1, [r3, #24]
 8006358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	ea40 0301 	orr.w	r3, r0, r1
 8006360:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4bc5      	ldr	r3, [pc, #788]	; (800667c <UART_SetConfig+0x384>)
 8006368:	429a      	cmp	r2, r3
 800636a:	d004      	beq.n	8006376 <UART_SetConfig+0x7e>
 800636c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	4bc3      	ldr	r3, [pc, #780]	; (8006680 <UART_SetConfig+0x388>)
 8006372:	429a      	cmp	r2, r3
 8006374:	d103      	bne.n	800637e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006376:	f7fe f8ed 	bl	8004554 <HAL_RCC_GetPCLK2Freq>
 800637a:	6778      	str	r0, [r7, #116]	; 0x74
 800637c:	e002      	b.n	8006384 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800637e:	f7fe f8d5 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8006382:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800638c:	f040 80b6 	bne.w	80064fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006392:	461c      	mov	r4, r3
 8006394:	f04f 0500 	mov.w	r5, #0
 8006398:	4622      	mov	r2, r4
 800639a:	462b      	mov	r3, r5
 800639c:	1891      	adds	r1, r2, r2
 800639e:	6439      	str	r1, [r7, #64]	; 0x40
 80063a0:	415b      	adcs	r3, r3
 80063a2:	647b      	str	r3, [r7, #68]	; 0x44
 80063a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063a8:	1912      	adds	r2, r2, r4
 80063aa:	eb45 0303 	adc.w	r3, r5, r3
 80063ae:	f04f 0000 	mov.w	r0, #0
 80063b2:	f04f 0100 	mov.w	r1, #0
 80063b6:	00d9      	lsls	r1, r3, #3
 80063b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063bc:	00d0      	lsls	r0, r2, #3
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	1911      	adds	r1, r2, r4
 80063c4:	6639      	str	r1, [r7, #96]	; 0x60
 80063c6:	416b      	adcs	r3, r5
 80063c8:	667b      	str	r3, [r7, #100]	; 0x64
 80063ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	461a      	mov	r2, r3
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	1891      	adds	r1, r2, r2
 80063d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80063d8:	415b      	adcs	r3, r3
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80063e4:	f7fa fbac 	bl	8000b40 <__aeabi_uldivmod>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4ba5      	ldr	r3, [pc, #660]	; (8006684 <UART_SetConfig+0x38c>)
 80063ee:	fba3 2302 	umull	r2, r3, r3, r2
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	011e      	lsls	r6, r3, #4
 80063f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063f8:	461c      	mov	r4, r3
 80063fa:	f04f 0500 	mov.w	r5, #0
 80063fe:	4622      	mov	r2, r4
 8006400:	462b      	mov	r3, r5
 8006402:	1891      	adds	r1, r2, r2
 8006404:	6339      	str	r1, [r7, #48]	; 0x30
 8006406:	415b      	adcs	r3, r3
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
 800640a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800640e:	1912      	adds	r2, r2, r4
 8006410:	eb45 0303 	adc.w	r3, r5, r3
 8006414:	f04f 0000 	mov.w	r0, #0
 8006418:	f04f 0100 	mov.w	r1, #0
 800641c:	00d9      	lsls	r1, r3, #3
 800641e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006422:	00d0      	lsls	r0, r2, #3
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	1911      	adds	r1, r2, r4
 800642a:	65b9      	str	r1, [r7, #88]	; 0x58
 800642c:	416b      	adcs	r3, r5
 800642e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	461a      	mov	r2, r3
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	1891      	adds	r1, r2, r2
 800643c:	62b9      	str	r1, [r7, #40]	; 0x28
 800643e:	415b      	adcs	r3, r3
 8006440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006446:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800644a:	f7fa fb79 	bl	8000b40 <__aeabi_uldivmod>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4b8c      	ldr	r3, [pc, #560]	; (8006684 <UART_SetConfig+0x38c>)
 8006454:	fba3 1302 	umull	r1, r3, r3, r2
 8006458:	095b      	lsrs	r3, r3, #5
 800645a:	2164      	movs	r1, #100	; 0x64
 800645c:	fb01 f303 	mul.w	r3, r1, r3
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	3332      	adds	r3, #50	; 0x32
 8006466:	4a87      	ldr	r2, [pc, #540]	; (8006684 <UART_SetConfig+0x38c>)
 8006468:	fba2 2303 	umull	r2, r3, r2, r3
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006474:	441e      	add	r6, r3
 8006476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006478:	4618      	mov	r0, r3
 800647a:	f04f 0100 	mov.w	r1, #0
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	1894      	adds	r4, r2, r2
 8006484:	623c      	str	r4, [r7, #32]
 8006486:	415b      	adcs	r3, r3
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
 800648a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800648e:	1812      	adds	r2, r2, r0
 8006490:	eb41 0303 	adc.w	r3, r1, r3
 8006494:	f04f 0400 	mov.w	r4, #0
 8006498:	f04f 0500 	mov.w	r5, #0
 800649c:	00dd      	lsls	r5, r3, #3
 800649e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064a2:	00d4      	lsls	r4, r2, #3
 80064a4:	4622      	mov	r2, r4
 80064a6:	462b      	mov	r3, r5
 80064a8:	1814      	adds	r4, r2, r0
 80064aa:	653c      	str	r4, [r7, #80]	; 0x50
 80064ac:	414b      	adcs	r3, r1
 80064ae:	657b      	str	r3, [r7, #84]	; 0x54
 80064b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	461a      	mov	r2, r3
 80064b6:	f04f 0300 	mov.w	r3, #0
 80064ba:	1891      	adds	r1, r2, r2
 80064bc:	61b9      	str	r1, [r7, #24]
 80064be:	415b      	adcs	r3, r3
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80064ca:	f7fa fb39 	bl	8000b40 <__aeabi_uldivmod>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4b6c      	ldr	r3, [pc, #432]	; (8006684 <UART_SetConfig+0x38c>)
 80064d4:	fba3 1302 	umull	r1, r3, r3, r2
 80064d8:	095b      	lsrs	r3, r3, #5
 80064da:	2164      	movs	r1, #100	; 0x64
 80064dc:	fb01 f303 	mul.w	r3, r1, r3
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	3332      	adds	r3, #50	; 0x32
 80064e6:	4a67      	ldr	r2, [pc, #412]	; (8006684 <UART_SetConfig+0x38c>)
 80064e8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	f003 0207 	and.w	r2, r3, #7
 80064f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4432      	add	r2, r6
 80064f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064fa:	e0b9      	b.n	8006670 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064fe:	461c      	mov	r4, r3
 8006500:	f04f 0500 	mov.w	r5, #0
 8006504:	4622      	mov	r2, r4
 8006506:	462b      	mov	r3, r5
 8006508:	1891      	adds	r1, r2, r2
 800650a:	6139      	str	r1, [r7, #16]
 800650c:	415b      	adcs	r3, r3
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006514:	1912      	adds	r2, r2, r4
 8006516:	eb45 0303 	adc.w	r3, r5, r3
 800651a:	f04f 0000 	mov.w	r0, #0
 800651e:	f04f 0100 	mov.w	r1, #0
 8006522:	00d9      	lsls	r1, r3, #3
 8006524:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006528:	00d0      	lsls	r0, r2, #3
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	eb12 0804 	adds.w	r8, r2, r4
 8006532:	eb43 0905 	adc.w	r9, r3, r5
 8006536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	4618      	mov	r0, r3
 800653c:	f04f 0100 	mov.w	r1, #0
 8006540:	f04f 0200 	mov.w	r2, #0
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	008b      	lsls	r3, r1, #2
 800654a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800654e:	0082      	lsls	r2, r0, #2
 8006550:	4640      	mov	r0, r8
 8006552:	4649      	mov	r1, r9
 8006554:	f7fa faf4 	bl	8000b40 <__aeabi_uldivmod>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4b49      	ldr	r3, [pc, #292]	; (8006684 <UART_SetConfig+0x38c>)
 800655e:	fba3 2302 	umull	r2, r3, r3, r2
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	011e      	lsls	r6, r3, #4
 8006566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006568:	4618      	mov	r0, r3
 800656a:	f04f 0100 	mov.w	r1, #0
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	1894      	adds	r4, r2, r2
 8006574:	60bc      	str	r4, [r7, #8]
 8006576:	415b      	adcs	r3, r3
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800657e:	1812      	adds	r2, r2, r0
 8006580:	eb41 0303 	adc.w	r3, r1, r3
 8006584:	f04f 0400 	mov.w	r4, #0
 8006588:	f04f 0500 	mov.w	r5, #0
 800658c:	00dd      	lsls	r5, r3, #3
 800658e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006592:	00d4      	lsls	r4, r2, #3
 8006594:	4622      	mov	r2, r4
 8006596:	462b      	mov	r3, r5
 8006598:	1814      	adds	r4, r2, r0
 800659a:	64bc      	str	r4, [r7, #72]	; 0x48
 800659c:	414b      	adcs	r3, r1
 800659e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f04f 0100 	mov.w	r1, #0
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	f04f 0300 	mov.w	r3, #0
 80065b2:	008b      	lsls	r3, r1, #2
 80065b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065b8:	0082      	lsls	r2, r0, #2
 80065ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80065be:	f7fa fabf 	bl	8000b40 <__aeabi_uldivmod>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4b2f      	ldr	r3, [pc, #188]	; (8006684 <UART_SetConfig+0x38c>)
 80065c8:	fba3 1302 	umull	r1, r3, r3, r2
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	2164      	movs	r1, #100	; 0x64
 80065d0:	fb01 f303 	mul.w	r3, r1, r3
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	3332      	adds	r3, #50	; 0x32
 80065da:	4a2a      	ldr	r2, [pc, #168]	; (8006684 <UART_SetConfig+0x38c>)
 80065dc:	fba2 2303 	umull	r2, r3, r2, r3
 80065e0:	095b      	lsrs	r3, r3, #5
 80065e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065e6:	441e      	add	r6, r3
 80065e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ea:	4618      	mov	r0, r3
 80065ec:	f04f 0100 	mov.w	r1, #0
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	1894      	adds	r4, r2, r2
 80065f6:	603c      	str	r4, [r7, #0]
 80065f8:	415b      	adcs	r3, r3
 80065fa:	607b      	str	r3, [r7, #4]
 80065fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006600:	1812      	adds	r2, r2, r0
 8006602:	eb41 0303 	adc.w	r3, r1, r3
 8006606:	f04f 0400 	mov.w	r4, #0
 800660a:	f04f 0500 	mov.w	r5, #0
 800660e:	00dd      	lsls	r5, r3, #3
 8006610:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006614:	00d4      	lsls	r4, r2, #3
 8006616:	4622      	mov	r2, r4
 8006618:	462b      	mov	r3, r5
 800661a:	eb12 0a00 	adds.w	sl, r2, r0
 800661e:	eb43 0b01 	adc.w	fp, r3, r1
 8006622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	4618      	mov	r0, r3
 8006628:	f04f 0100 	mov.w	r1, #0
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	008b      	lsls	r3, r1, #2
 8006636:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800663a:	0082      	lsls	r2, r0, #2
 800663c:	4650      	mov	r0, sl
 800663e:	4659      	mov	r1, fp
 8006640:	f7fa fa7e 	bl	8000b40 <__aeabi_uldivmod>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <UART_SetConfig+0x38c>)
 800664a:	fba3 1302 	umull	r1, r3, r3, r2
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	2164      	movs	r1, #100	; 0x64
 8006652:	fb01 f303 	mul.w	r3, r1, r3
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	3332      	adds	r3, #50	; 0x32
 800665c:	4a09      	ldr	r2, [pc, #36]	; (8006684 <UART_SetConfig+0x38c>)
 800665e:	fba2 2303 	umull	r2, r3, r2, r3
 8006662:	095b      	lsrs	r3, r3, #5
 8006664:	f003 020f 	and.w	r2, r3, #15
 8006668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4432      	add	r2, r6
 800666e:	609a      	str	r2, [r3, #8]
}
 8006670:	bf00      	nop
 8006672:	377c      	adds	r7, #124	; 0x7c
 8006674:	46bd      	mov	sp, r7
 8006676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667a:	bf00      	nop
 800667c:	40011000 	.word	0x40011000
 8006680:	40011400 	.word	0x40011400
 8006684:	51eb851f 	.word	0x51eb851f

08006688 <__libc_init_array>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	4d0d      	ldr	r5, [pc, #52]	; (80066c0 <__libc_init_array+0x38>)
 800668c:	4c0d      	ldr	r4, [pc, #52]	; (80066c4 <__libc_init_array+0x3c>)
 800668e:	1b64      	subs	r4, r4, r5
 8006690:	10a4      	asrs	r4, r4, #2
 8006692:	2600      	movs	r6, #0
 8006694:	42a6      	cmp	r6, r4
 8006696:	d109      	bne.n	80066ac <__libc_init_array+0x24>
 8006698:	4d0b      	ldr	r5, [pc, #44]	; (80066c8 <__libc_init_array+0x40>)
 800669a:	4c0c      	ldr	r4, [pc, #48]	; (80066cc <__libc_init_array+0x44>)
 800669c:	f000 f820 	bl	80066e0 <_init>
 80066a0:	1b64      	subs	r4, r4, r5
 80066a2:	10a4      	asrs	r4, r4, #2
 80066a4:	2600      	movs	r6, #0
 80066a6:	42a6      	cmp	r6, r4
 80066a8:	d105      	bne.n	80066b6 <__libc_init_array+0x2e>
 80066aa:	bd70      	pop	{r4, r5, r6, pc}
 80066ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b0:	4798      	blx	r3
 80066b2:	3601      	adds	r6, #1
 80066b4:	e7ee      	b.n	8006694 <__libc_init_array+0xc>
 80066b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ba:	4798      	blx	r3
 80066bc:	3601      	adds	r6, #1
 80066be:	e7f2      	b.n	80066a6 <__libc_init_array+0x1e>
 80066c0:	08006720 	.word	0x08006720
 80066c4:	08006720 	.word	0x08006720
 80066c8:	08006720 	.word	0x08006720
 80066cc:	08006724 	.word	0x08006724

080066d0 <memset>:
 80066d0:	4402      	add	r2, r0
 80066d2:	4603      	mov	r3, r0
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d100      	bne.n	80066da <memset+0xa>
 80066d8:	4770      	bx	lr
 80066da:	f803 1b01 	strb.w	r1, [r3], #1
 80066de:	e7f9      	b.n	80066d4 <memset+0x4>

080066e0 <_init>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	bf00      	nop
 80066e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e6:	bc08      	pop	{r3}
 80066e8:	469e      	mov	lr, r3
 80066ea:	4770      	bx	lr

080066ec <_fini>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	bf00      	nop
 80066f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f2:	bc08      	pop	{r3}
 80066f4:	469e      	mov	lr, r3
 80066f6:	4770      	bx	lr
