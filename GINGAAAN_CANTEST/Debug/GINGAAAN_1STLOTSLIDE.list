
GINGAAAN_1STLOTSLIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cb8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ee0  08009ee0  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ee0  08009ee0  00019ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ee8  08009ee8  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ee8  08009ee8  00019ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eec  08009eec  00019eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08009ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010f0  2000017c  0800a06c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000126c  0800a06c  0002126c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e85d  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d9d  00000000  00000000  0003ea09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  000427a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  000436d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0c8  00000000  00000000  000444a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165b6  00000000  00000000  0005e568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a95c  00000000  00000000  00074b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff47a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d1c  00000000  00000000  000ff4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000017c 	.word	0x2000017c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08009e34 	.word	0x08009e34

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000180 	.word	0x20000180
 80001d0:	08009e34 	.word	0x08009e34

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <appInit>:
//static void CheckTouch(uint8_t* recvData, bool* setData);
//static void SetColorData(uint8_t* setArray, uint8_t setColorTouch[][3], uint8_t setColorBar[][3]);
static bool IO_Read(uint8_t sensor);

//初期化
int appInit(void){
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
		SliderBarLEDData[i][1] = 00;
		SliderBarLEDData[i][2] = 128;
	}
	D_Slider_SetThreshold(TouchThreshold);
	*/
	return 0;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <appTask>:

int appTask(void){
 80004dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80004e0:	b08a      	sub	sp, #40	; 0x28
 80004e2:	af02      	add	r7, sp, #8
	static int testCount1 = 0;
	static int testCount2 = 0;
	static int testCount3 = 0;
	static int testCount4 = 0;

	sndTime += G_System_counter - recent_System_counter;
 80004e4:	4ba4      	ldr	r3, [pc, #656]	; (8000778 <appTask+0x29c>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4ba4      	ldr	r3, [pc, #656]	; (800077c <appTask+0x2a0>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	1ad2      	subs	r2, r2, r3
 80004ee:	4ba4      	ldr	r3, [pc, #656]	; (8000780 <appTask+0x2a4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4413      	add	r3, r2
 80004f4:	4aa2      	ldr	r2, [pc, #648]	; (8000780 <appTask+0x2a4>)
 80004f6:	6013      	str	r3, [r2, #0]
	rcvTime += G_System_counter - recent_System_counter;
 80004f8:	4b9f      	ldr	r3, [pc, #636]	; (8000778 <appTask+0x29c>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b9f      	ldr	r3, [pc, #636]	; (800077c <appTask+0x2a0>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	1ad2      	subs	r2, r2, r3
 8000502:	4ba0      	ldr	r3, [pc, #640]	; (8000784 <appTask+0x2a8>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4413      	add	r3, r2
 8000508:	4a9e      	ldr	r2, [pc, #632]	; (8000784 <appTask+0x2a8>)
 800050a:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_counter;
 800050c:	4b9a      	ldr	r3, [pc, #616]	; (8000778 <appTask+0x29c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a9a      	ldr	r2, [pc, #616]	; (800077c <appTask+0x2a0>)
 8000512:	6013      	str	r3, [r2, #0]

	//CAN送信タイミングなら送信
	if(sndTime >= CAN_SEND_INTERVAL){
 8000514:	4b9a      	ldr	r3, [pc, #616]	; (8000780 <appTask+0x2a4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b09      	cmp	r3, #9
 800051a:	d902      	bls.n	8000522 <appTask+0x46>

		sndTime = 0;
 800051c:	4b98      	ldr	r3, [pc, #608]	; (8000780 <appTask+0x2a4>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
	}

	static uint8_t sum = 0;
	if(rcvTime >= UART_RECEIVE_INTERVAL){
 8000522:	4b98      	ldr	r3, [pc, #608]	; (8000784 <appTask+0x2a8>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b13      	cmp	r3, #19
 8000528:	d964      	bls.n	80005f4 <appTask+0x118>
		sndData_UART[2] = testCount;
		sndData_UART[3] = 3;
		sndData_UART[4] = 225;
		*/
		static int sendLength = 8;
		sndData_UART[0] = 0xe0;//testCount1;
 800052a:	4b97      	ldr	r3, [pc, #604]	; (8000788 <appTask+0x2ac>)
 800052c:	22e0      	movs	r2, #224	; 0xe0
 800052e:	701a      	strb	r2, [r3, #0]
		sndData_UART[1] = 0x01;//testCount1;//testCount2;
 8000530:	4b95      	ldr	r3, [pc, #596]	; (8000788 <appTask+0x2ac>)
 8000532:	2201      	movs	r2, #1
 8000534:	705a      	strb	r2, [r3, #1]
		sndData_UART[2] = 255;
 8000536:	4b94      	ldr	r3, [pc, #592]	; (8000788 <appTask+0x2ac>)
 8000538:	22ff      	movs	r2, #255	; 0xff
 800053a:	709a      	strb	r2, [r3, #2]
		sndData_UART[3] = 3;
 800053c:	4b92      	ldr	r3, [pc, #584]	; (8000788 <appTask+0x2ac>)
 800053e:	2203      	movs	r2, #3
 8000540:	70da      	strb	r2, [r3, #3]
		sndData_UART[4] = testCount;
 8000542:	4b92      	ldr	r3, [pc, #584]	; (800078c <appTask+0x2b0>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b8f      	ldr	r3, [pc, #572]	; (8000788 <appTask+0x2ac>)
 800054a:	711a      	strb	r2, [r3, #4]
		sndData_UART[5] = 1;
 800054c:	4b8e      	ldr	r3, [pc, #568]	; (8000788 <appTask+0x2ac>)
 800054e:	2201      	movs	r2, #1
 8000550:	715a      	strb	r2, [r3, #5]
		sndData_UART[6] = 8;
 8000552:	4b8d      	ldr	r3, [pc, #564]	; (8000788 <appTask+0x2ac>)
 8000554:	2208      	movs	r2, #8
 8000556:	719a      	strb	r2, [r3, #6]
		sndData_UART[7] = 250;
 8000558:	4b8b      	ldr	r3, [pc, #556]	; (8000788 <appTask+0x2ac>)
 800055a:	22fa      	movs	r2, #250	; 0xfa
 800055c:	71da      	strb	r2, [r3, #7]
		sndData_UART[8] = 250;
 800055e:	4b8a      	ldr	r3, [pc, #552]	; (8000788 <appTask+0x2ac>)
 8000560:	22fa      	movs	r2, #250	; 0xfa
 8000562:	721a      	strb	r2, [r3, #8]
		sndData_UART[13] = 0;//testCount1;
		sndData_UART[14] = 0;//testCount2;
		sndData_UART[15] = 0;//testCount1;
		*/

		uint8_t dataSum = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	77fb      	strb	r3, [r7, #31]
		//dataSum += sndData_UART[1];
		for(int j=1; j<sendLength-1; j++){
 8000568:	2301      	movs	r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
 800056c:	e00a      	b.n	8000584 <appTask+0xa8>
			dataSum += sndData_UART[j];
 800056e:	4a86      	ldr	r2, [pc, #536]	; (8000788 <appTask+0x2ac>)
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	4413      	add	r3, r2
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b2da      	uxtb	r2, r3
 8000578:	7ffb      	ldrb	r3, [r7, #31]
 800057a:	4413      	add	r3, r2
 800057c:	77fb      	strb	r3, [r7, #31]
		for(int j=1; j<sendLength-1; j++){
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	3301      	adds	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	4b82      	ldr	r3, [pc, #520]	; (8000790 <appTask+0x2b4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3b01      	subs	r3, #1
 800058a:	69ba      	ldr	r2, [r7, #24]
 800058c:	429a      	cmp	r2, r3
 800058e:	dbee      	blt.n	800056e <appTask+0x92>
		}
		//dataSum += 2;

		//int checkSum = 256 - (int)dataSum;
		//sndData_UART[2/*sendLength-1*/] = (uint8_t)checkSum - 1;
		sndData_UART[sendLength-1] = (uint8_t)dataSum;
 8000590:	4b7f      	ldr	r3, [pc, #508]	; (8000790 <appTask+0x2b4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3b01      	subs	r3, #1
 8000596:	497c      	ldr	r1, [pc, #496]	; (8000788 <appTask+0x2ac>)
 8000598:	7ffa      	ldrb	r2, [r7, #31]
 800059a:	54ca      	strb	r2, [r1, r3]

		//retSnd = D_Slider_Send(sndData_UART,sendLength);
		//retRcv = D_Slider_Receive(rcvData_UART,16);
		rcvTime = 0;
 800059c:	4b79      	ldr	r3, [pc, #484]	; (8000784 <appTask+0x2a8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
		for(int i=0; i<5; i++){
			if(((data[8]>>i) & 1) == 1) SensorCountR[i]++;
		}
		*/

		testCount1++;
 80005a2:	4b7c      	ldr	r3, [pc, #496]	; (8000794 <appTask+0x2b8>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	3301      	adds	r3, #1
 80005a8:	4a7a      	ldr	r2, [pc, #488]	; (8000794 <appTask+0x2b8>)
 80005aa:	6013      	str	r3, [r2, #0]
		if(testCount1 >= 256){
 80005ac:	4b79      	ldr	r3, [pc, #484]	; (8000794 <appTask+0x2b8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2bff      	cmp	r3, #255	; 0xff
 80005b2:	dd07      	ble.n	80005c4 <appTask+0xe8>
			testCount1 = 0;
 80005b4:	4b77      	ldr	r3, [pc, #476]	; (8000794 <appTask+0x2b8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
			testCount2++;
 80005ba:	4b77      	ldr	r3, [pc, #476]	; (8000798 <appTask+0x2bc>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	4a75      	ldr	r2, [pc, #468]	; (8000798 <appTask+0x2bc>)
 80005c2:	6013      	str	r3, [r2, #0]
		}
		if(testCount2 >= 256){
 80005c4:	4b74      	ldr	r3, [pc, #464]	; (8000798 <appTask+0x2bc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2bff      	cmp	r3, #255	; 0xff
 80005ca:	dd07      	ble.n	80005dc <appTask+0x100>
			testCount2 = 0;
 80005cc:	4b72      	ldr	r3, [pc, #456]	; (8000798 <appTask+0x2bc>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
			testCount3++;
 80005d2:	4b72      	ldr	r3, [pc, #456]	; (800079c <appTask+0x2c0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	4a70      	ldr	r2, [pc, #448]	; (800079c <appTask+0x2c0>)
 80005da:	6013      	str	r3, [r2, #0]
		}
		if(testCount3 >= 256){
 80005dc:	4b6f      	ldr	r3, [pc, #444]	; (800079c <appTask+0x2c0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2bff      	cmp	r3, #255	; 0xff
 80005e2:	dd07      	ble.n	80005f4 <appTask+0x118>
			testCount3 = 0;
 80005e4:	4b6d      	ldr	r3, [pc, #436]	; (800079c <appTask+0x2c0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
			testCount4++;
 80005ea:	4b6d      	ldr	r3, [pc, #436]	; (80007a0 <appTask+0x2c4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	4a6b      	ldr	r2, [pc, #428]	; (80007a0 <appTask+0x2c4>)
 80005f2:	6013      	str	r3, [r2, #0]
		}
	}

	bool R = (testCount & 1) == 1;
 80005f4:	4b65      	ldr	r3, [pc, #404]	; (800078c <appTask+0x2b0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf14      	ite	ne
 8000600:	2301      	movne	r3, #1
 8000602:	2300      	moveq	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
	bool G = ((testCount>>1) & 1) == 1;
 8000606:	4b61      	ldr	r3, [pc, #388]	; (800078c <appTask+0x2b0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	2b00      	cmp	r3, #0
 8000610:	bf14      	ite	ne
 8000612:	2301      	movne	r3, #1
 8000614:	2300      	moveq	r3, #0
 8000616:	73bb      	strb	r3, [r7, #14]
	bool B = ((testCount>>2) & 1) == 1;
 8000618:	4b5c      	ldr	r3, [pc, #368]	; (800078c <appTask+0x2b0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	2b00      	cmp	r3, #0
 8000622:	bf14      	ite	ne
 8000624:	2301      	movne	r3, #1
 8000626:	2300      	moveq	r3, #0
 8000628:	737b      	strb	r3, [r7, #13]
	for(int i=0; i<5; i++){
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	e044      	b.n	80006ba <appTask+0x1de>
		if (D_Slider_GetSensorData(0,i) != 0){
 8000630:	6979      	ldr	r1, [r7, #20]
 8000632:	2000      	movs	r0, #0
 8000634:	f001 fea8 	bl	8002388 <D_Slider_GetSensorData>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d019      	beq.n	8000672 <appTask+0x196>
			SliderLEDDataR[i][0] = true;
 800063e:	4959      	ldr	r1, [pc, #356]	; (80007a4 <appTask+0x2c8>)
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	440b      	add	r3, r1
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
			SliderLEDDataR[i][1] = true;
 800064e:	4955      	ldr	r1, [pc, #340]	; (80007a4 <appTask+0x2c8>)
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	4613      	mov	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	440b      	add	r3, r1
 800065a:	3301      	adds	r3, #1
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
			SliderLEDDataR[i][2] = true;
 8000660:	4950      	ldr	r1, [pc, #320]	; (80007a4 <appTask+0x2c8>)
 8000662:	697a      	ldr	r2, [r7, #20]
 8000664:	4613      	mov	r3, r2
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	4413      	add	r3, r2
 800066a:	440b      	add	r3, r1
 800066c:	3302      	adds	r3, #2
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
		}
		if (D_Slider_GetSensorData(1,i) != 0){
 8000672:	6979      	ldr	r1, [r7, #20]
 8000674:	2001      	movs	r0, #1
 8000676:	f001 fe87 	bl	8002388 <D_Slider_GetSensorData>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d019      	beq.n	80006b4 <appTask+0x1d8>
			SliderLEDDataL[i][0] = true;
 8000680:	4949      	ldr	r1, [pc, #292]	; (80007a8 <appTask+0x2cc>)
 8000682:	697a      	ldr	r2, [r7, #20]
 8000684:	4613      	mov	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	4413      	add	r3, r2
 800068a:	440b      	add	r3, r1
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
			SliderLEDDataL[i][1] = true;
 8000690:	4945      	ldr	r1, [pc, #276]	; (80007a8 <appTask+0x2cc>)
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	440b      	add	r3, r1
 800069c:	3301      	adds	r3, #1
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
			SliderLEDDataL[i][2] = true;
 80006a2:	4941      	ldr	r1, [pc, #260]	; (80007a8 <appTask+0x2cc>)
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	4613      	mov	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	3302      	adds	r3, #2
 80006b0:	2201      	movs	r2, #1
 80006b2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<5; i++){
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	3301      	adds	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2b04      	cmp	r3, #4
 80006be:	ddb7      	ble.n	8000630 <appTask+0x154>
	//D_Slider_SetColorData(SliderLEDDataR, SliderLEDDataL);
	static bool _first = false;
	static bool _firstR = false;
	static bool _firstL = false;

	if(!_first){
 80006c0:	4b3a      	ldr	r3, [pc, #232]	; (80007ac <appTask+0x2d0>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	f083 0301 	eor.w	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00a      	beq.n	80006e4 <appTask+0x208>
		D_Slider_SetLightingR(SL_NORMAL_FLASH,0);
 80006ce:	2100      	movs	r1, #0
 80006d0:	2002      	movs	r0, #2
 80006d2:	f000 fd73 	bl	80011bc <D_Slider_SetLightingR>
		D_Slider_SetLightingL(SL_NORMAL_FLASH,0);
 80006d6:	2100      	movs	r1, #0
 80006d8:	2002      	movs	r0, #2
 80006da:	f000 fdaf 	bl	800123c <D_Slider_SetLightingL>
		_first = true;
 80006de:	4b33      	ldr	r3, [pc, #204]	; (80007ac <appTask+0x2d0>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
	}
	int pocketR = D_Slider_GetPocketR(false);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f001 fd89 	bl	80021fc <D_Slider_GetPocketR>
 80006ea:	60b8      	str	r0, [r7, #8]
	if(pocketR != -1){
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006f2:	d006      	beq.n	8000702 <appTask+0x226>
		D_Slider_SetLightingR(SL_POCKET_IN,pocketR);
 80006f4:	68b9      	ldr	r1, [r7, #8]
 80006f6:	2003      	movs	r0, #3
 80006f8:	f000 fd60 	bl	80011bc <D_Slider_SetLightingR>
		D_Slider_GetPocketR(true);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f001 fd7d 	bl	80021fc <D_Slider_GetPocketR>
	}
	int pocketL = D_Slider_GetPocketL(false);
 8000702:	2000      	movs	r0, #0
 8000704:	f001 fdb6 	bl	8002274 <D_Slider_GetPocketL>
 8000708:	6078      	str	r0, [r7, #4]
	if(pocketL != -1){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000710:	d006      	beq.n	8000720 <appTask+0x244>
		D_Slider_SetLightingL(SL_POCKET_IN,pocketL);
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	2003      	movs	r0, #3
 8000716:	f000 fd91 	bl	800123c <D_Slider_SetLightingL>
		D_Slider_GetPocketL(true);
 800071a:	2001      	movs	r0, #1
 800071c:	f001 fdaa 	bl	8002274 <D_Slider_GetPocketL>
		HAL_UART_Transmit(&huart1, (uint8_t*)controllerSendData, 4, 10);
	}
	*/

	//マイコンについてるボタンかスタートボタンが押されたらボール発射
	if(IO_READ_USERBUTTON() && _userButton){
 8000720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000724:	4822      	ldr	r0, [pc, #136]	; (80007b0 <appTask+0x2d4>)
 8000726:	f001 fff7 	bl	8002718 <D_GPIO_Read>
 800072a:	4603      	mov	r3, r0
 800072c:	f083 0301 	eor.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d012      	beq.n	800075c <appTask+0x280>
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <appTask+0x2d8>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00e      	beq.n	800075c <appTask+0x280>
		_userButton = false;
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <appTask+0x2d8>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
		testCount--;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <appTask+0x2b0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3b01      	subs	r3, #1
 800074a:	4a10      	ldr	r2, [pc, #64]	; (800078c <appTask+0x2b0>)
 800074c:	6013      	str	r3, [r2, #0]
		if(testCount < 0) testCount = 255;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <appTask+0x2b0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	da02      	bge.n	800075c <appTask+0x280>
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <appTask+0x2b0>)
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	601a      	str	r2, [r3, #0]
		int checkSum = 256 - (int)dataSum;
		controllerSendData[100] = (uint8_t)checkSum;
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)controllerSendData, 101);
		*/
	}
	if(!IO_READ_USERBUTTON()){
 800075c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <appTask+0x2d4>)
 8000762:	f001 ffd9 	bl	8002718 <D_GPIO_Read>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d002      	beq.n	8000772 <appTask+0x296>
		_userButton = true;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <appTask+0x2d8>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
		IO_RESET_USERLED();
	}
	*/
	//testMode---------------------------------------------------

	for(int i=0; i<16; i++){
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	e033      	b.n	80007e0 <appTask+0x304>
 8000778:	20000248 	.word	0x20000248
 800077c:	200001e8 	.word	0x200001e8
 8000780:	200001ec 	.word	0x200001ec
 8000784:	200001f0 	.word	0x200001f0
 8000788:	200001b8 	.word	0x200001b8
 800078c:	20000000 	.word	0x20000000
 8000790:	20000004 	.word	0x20000004
 8000794:	200001f4 	.word	0x200001f4
 8000798:	200001f8 	.word	0x200001f8
 800079c:	200001fc 	.word	0x200001fc
 80007a0:	20000200 	.word	0x20000200
 80007a4:	200001c8 	.word	0x200001c8
 80007a8:	200001d8 	.word	0x200001d8
 80007ac:	20000204 	.word	0x20000204
 80007b0:	40020800 	.word	0x40020800
 80007b4:	20000205 	.word	0x20000205
		if(rcvData_UART[i] != 0) rcvJudge[i] = rcvData_UART[i];
 80007b8:	4a22      	ldr	r2, [pc, #136]	; (8000844 <appTask+0x368>)
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d009      	beq.n	80007da <appTask+0x2fe>
 80007c6:	4a1f      	ldr	r2, [pc, #124]	; (8000844 <appTask+0x368>)
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	4413      	add	r3, r2
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	4a1d      	ldr	r2, [pc, #116]	; (8000848 <appTask+0x36c>)
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<16; i++){
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	3301      	adds	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	2b0f      	cmp	r3, #15
 80007e4:	dde8      	ble.n	80007b8 <appTask+0x2dc>
	}

	//デバッグ用
	int16_t debug_bits = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	807b      	strh	r3, [r7, #2]
	debug_bits &= 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	807b      	strh	r3, [r7, #2]
	debug_bits |= ((int)IO_READ_L_MECHA() << 9);
	debug_bits |= ((int)IO_READ_L_BALLWAIT() << 10);
	debug_bits |= ((int)IO_READ_L_START() << 11);
	debug_bits |= ((int)IO_READ_L_BALLSUPPLY() << 12);
	*/
	D_Mess_printf("\033[1;1H");
 80007ee:	4817      	ldr	r0, [pc, #92]	; (800084c <appTask+0x370>)
 80007f0:	f001 ffa8 	bl	8002744 <D_Mess_printf>

	//D_Mess_printf("%016b\n", debug_bits);
	//D_Mess_printf("%10d\n", G_System_counter);
	//D_Mess_printf("R :[%3d],[%3d],[%3d],[%3d],[%3d]\n", D_Slider_GetSensorData(0,0), D_Slider_GetSensorData(0,1), D_Slider_GetSensorData(0,2), D_Slider_GetSensorData(0,3), D_Slider_GetSensorData(0,4));
	D_Mess_printf("L :[%3d],[%3d],[%3d],[%3d],[%3d]\n", D_Slider_GetSensorData(1,0), D_Slider_GetSensorData(1,1), D_Slider_GetSensorData(1,2), D_Slider_GetSensorData(1,3), D_Slider_GetSensorData(1,4));
 80007f4:	2100      	movs	r1, #0
 80007f6:	2001      	movs	r0, #1
 80007f8:	f001 fdc6 	bl	8002388 <D_Slider_GetSensorData>
 80007fc:	4605      	mov	r5, r0
 80007fe:	2101      	movs	r1, #1
 8000800:	2001      	movs	r0, #1
 8000802:	f001 fdc1 	bl	8002388 <D_Slider_GetSensorData>
 8000806:	4606      	mov	r6, r0
 8000808:	2102      	movs	r1, #2
 800080a:	2001      	movs	r0, #1
 800080c:	f001 fdbc 	bl	8002388 <D_Slider_GetSensorData>
 8000810:	4680      	mov	r8, r0
 8000812:	2103      	movs	r1, #3
 8000814:	2001      	movs	r0, #1
 8000816:	f001 fdb7 	bl	8002388 <D_Slider_GetSensorData>
 800081a:	4604      	mov	r4, r0
 800081c:	2104      	movs	r1, #4
 800081e:	2001      	movs	r0, #1
 8000820:	f001 fdb2 	bl	8002388 <D_Slider_GetSensorData>
 8000824:	4603      	mov	r3, r0
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	9400      	str	r4, [sp, #0]
 800082a:	4643      	mov	r3, r8
 800082c:	4632      	mov	r2, r6
 800082e:	4629      	mov	r1, r5
 8000830:	4807      	ldr	r0, [pc, #28]	; (8000850 <appTask+0x374>)
 8000832:	f001 ff87 	bl	8002744 <D_Mess_printf>
	//D_Mess_printf("%08b\n", ownHold_Pocket);
	//D_Mess_printf("%08b\n", allHold_Pocket);
	//D_Mess_printf("processState: ,%2d\n", processState);
	//D_Mess_printf("PC: ,%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n",rcvData_UART[0],rcvData_UART[1],rcvData_UART[2],rcvData_UART[3],rcvData_UART[4],rcvData_UART[5],rcvData_UART[6],rcvData_UART[7]);

	return 0;
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000842:	bf00      	nop
 8000844:	20000198 	.word	0x20000198
 8000848:	20000208 	.word	0x20000208
 800084c:	08009e4c 	.word	0x08009e4c
 8000850:	08009e54 	.word	0x08009e54

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f002 f997 	bl	8002b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f82d 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f000 f92f 	bl	8000ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000866:	f000 f8e7 	bl	8000a38 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800086a:	f000 f891 	bl	8000990 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800086e:	f000 f8b9 	bl	80009e4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000872:	f008 fe69 	bl	8009548 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  appInit();
 8000876:	f7ff fe29 	bl	80004cc <appInit>
	  uint8_t modifiers;
	  uint8_t reserved;
	  uint8_t key[38];
  };
  struct keyboardHID_t keyboardHID;
  keyboardHID.modifiers = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	713b      	strb	r3, [r7, #4]
  keyboardHID.reserved = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	717b      	strb	r3, [r7, #5]
  for(int i = 0 ;i < 38; i++){
 8000882:	2300      	movs	r3, #0
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000886:	e007      	b.n	8000898 <main+0x44>
	  keyboardHID.key[i] = 0;
 8000888:	1dba      	adds	r2, r7, #6
 800088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088c:	4413      	add	r3, r2
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
  for(int i = 0 ;i < 38; i++){
 8000892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000894:	3301      	adds	r3, #1
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089a:	2b25      	cmp	r3, #37	; 0x25
 800089c:	ddf4      	ble.n	8000888 <main+0x34>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appTask();
 800089e:	f7ff fe1d 	bl	80004dc <appTask>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 0){
 80008a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <main+0x64>)
 80008a8:	f003 f89e 	bl	80039e8 <HAL_GPIO_ReadPin>
		  for(int i = 0 ;i < 38; i++){
			  keyboardHID.key[i] = 0;
		  }
	  }
	  */
	  D_Slider_SystickUpdate();
 80008ac:	f000 fbe8 	bl	8001080 <D_Slider_SystickUpdate>
	  //D_USBHID_SysticUpdate();
	  D_Mess_flush();
 80008b0:	f001 ff68 	bl	8002784 <D_Mess_flush>
	  appTask();
 80008b4:	e7f3      	b.n	800089e <main+0x4a>
 80008b6:	bf00      	nop
 80008b8:	40020800 	.word	0x40020800

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b094      	sub	sp, #80	; 0x50
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	2230      	movs	r2, #48	; 0x30
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f009 faaa 	bl	8009e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <SystemClock_Config+0xcc>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	4a27      	ldr	r2, [pc, #156]	; (8000988 <SystemClock_Config+0xcc>)
 80008ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <SystemClock_Config+0xcc>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <SystemClock_Config+0xd0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000908:	4a20      	ldr	r2, [pc, #128]	; (800098c <SystemClock_Config+0xd0>)
 800090a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <SystemClock_Config+0xd0>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000920:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000930:	2304      	movs	r3, #4
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000934:	23c0      	movs	r3, #192	; 0xc0
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000938:	2306      	movs	r3, #6
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800093c:	2308      	movs	r3, #8
 800093e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4618      	mov	r0, r3
 8000946:	f004 f9eb 	bl	8004d20 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000950:	f000 f95e 	bl	8000c10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2102      	movs	r1, #2
 8000970:	4618      	mov	r0, r3
 8000972:	f004 fc4d 	bl	8005210 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800097c:	f000 f948 	bl	8000c10 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3750      	adds	r7, #80	; 0x50
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <MX_USART1_UART_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c8:	f004 fe1e 	bl	8005608 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009d2:	f000 f91d 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200008fc 	.word	0x200008fc
 80009e0:	40011000 	.word	0x40011000

080009e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_USART2_UART_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	f004 fdf4 	bl	8005608 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a26:	f000 f8f3 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000940 	.word	0x20000940
 8000a34:	40004400 	.word	0x40004400

08000a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_DMA_Init+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a1e      	ldr	r2, [pc, #120]	; (8000ac0 <MX_DMA_Init+0x88>)
 8000a48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MX_DMA_Init+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_DMA_Init+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <MX_DMA_Init+0x88>)
 8000a64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_DMA_Init+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2010      	movs	r0, #16
 8000a7c:	f002 f9f7 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a80:	2010      	movs	r0, #16
 8000a82:	f002 fa10 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2011      	movs	r0, #17
 8000a8c:	f002 f9ef 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a90:	2011      	movs	r0, #17
 8000a92:	f002 fa08 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	203a      	movs	r0, #58	; 0x3a
 8000a9c:	f002 f9e7 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000aa0:	203a      	movs	r0, #58	; 0x3a
 8000aa2:	f002 fa00 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2046      	movs	r0, #70	; 0x46
 8000aac:	f002 f9df 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ab0:	2046      	movs	r0, #70	; 0x46
 8000ab2:	f002 f9f8 	bl	8002ea6 <HAL_NVIC_EnableIRQ>

}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a2c      	ldr	r2, [pc, #176]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a25      	ldr	r2, [pc, #148]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a1e      	ldr	r2, [pc, #120]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_GPIO_Init+0xd0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	4812      	ldr	r0, [pc, #72]	; (8000b98 <MX_GPIO_Init+0xd4>)
 8000b50:	f002 ff62 	bl	8003a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <MX_GPIO_Init+0xd8>)
 8000b6c:	f002 fdb8 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b70:	2320      	movs	r3, #32
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_GPIO_Init+0xd4>)
 8000b88:	f002 fdaa 	bl	80036e0 <HAL_GPIO_Init>

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020800 	.word	0x40020800

08000ba0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_UART_TxCpltCallback+0x30>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d102      	bne.n	8000bb8 <HAL_UART_TxCpltCallback+0x18>
	  D_Mess_TransitionCompletedCallBack();
 8000bb2:	f001 fe19 	bl	80027e8 <D_Mess_TransitionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_TransitionCompletedCallBack();
  }
}
 8000bb6:	e006      	b.n	8000bc6 <HAL_UART_TxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <HAL_UART_TxCpltCallback+0x34>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d101      	bne.n	8000bc6 <HAL_UART_TxCpltCallback+0x26>
	  D_Slider_TransitionCompletedCallBack();
 8000bc2:	f001 fd8d 	bl	80026e0 <D_Slider_TransitionCompletedCallBack>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	40011000 	.word	0x40011000

08000bd8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_UART_RxCpltCallback+0x30>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d102      	bne.n	8000bf0 <HAL_UART_RxCpltCallback+0x18>
	  D_Mess_ReceptionCompletedCallBack();
 8000bea:	f001 fe09 	bl	8002800 <D_Mess_ReceptionCompletedCallBack>
  }else if(UartHandle->Instance == USART1){
	  D_Slider_ReceptionCompletedCallBack();
  }
}
 8000bee:	e006      	b.n	8000bfe <HAL_UART_RxCpltCallback+0x26>
  }else if(UartHandle->Instance == USART1){
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <HAL_UART_RxCpltCallback+0x34>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d101      	bne.n	8000bfe <HAL_UART_RxCpltCallback+0x26>
	  D_Slider_ReceptionCompletedCallBack();
 8000bfa:	f001 fd7d 	bl	80026f8 <D_Slider_ReceptionCompletedCallBack>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40011000 	.word	0x40011000

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c5a:	2007      	movs	r0, #7
 8000c5c:	f002 f8fc 	bl	8002e58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	; 0x30
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a97      	ldr	r2, [pc, #604]	; (8000ee8 <HAL_UART_MspInit+0x27c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	f040 8092 	bne.w	8000db4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	4b95      	ldr	r3, [pc, #596]	; (8000eec <HAL_UART_MspInit+0x280>)
 8000c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c98:	4a94      	ldr	r2, [pc, #592]	; (8000eec <HAL_UART_MspInit+0x280>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca0:	4b92      	ldr	r3, [pc, #584]	; (8000eec <HAL_UART_MspInit+0x280>)
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	4b8e      	ldr	r3, [pc, #568]	; (8000eec <HAL_UART_MspInit+0x280>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	4a8d      	ldr	r2, [pc, #564]	; (8000eec <HAL_UART_MspInit+0x280>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbc:	4b8b      	ldr	r3, [pc, #556]	; (8000eec <HAL_UART_MspInit+0x280>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cc8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4882      	ldr	r0, [pc, #520]	; (8000ef0 <HAL_UART_MspInit+0x284>)
 8000ce6:	f002 fcfb 	bl	80036e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000cea:	4b82      	ldr	r3, [pc, #520]	; (8000ef4 <HAL_UART_MspInit+0x288>)
 8000cec:	4a82      	ldr	r2, [pc, #520]	; (8000ef8 <HAL_UART_MspInit+0x28c>)
 8000cee:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000cf0:	4b80      	ldr	r3, [pc, #512]	; (8000ef4 <HAL_UART_MspInit+0x288>)
 8000cf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cf8:	4b7e      	ldr	r3, [pc, #504]	; (8000ef4 <HAL_UART_MspInit+0x288>)
 8000cfa:	2240      	movs	r2, #64	; 0x40
 8000cfc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfe:	4b7d      	ldr	r3, [pc, #500]	; (8000ef4 <HAL_UART_MspInit+0x288>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d04:	4b7b      	ldr	r3, [pc, #492]	; (8000ef4 <HAL_UART_MspInit+0x288>)
 8000d06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0c:	4b79      	ldr	r3, [pc, #484]	; (8000ef4 <HAL_UART_MspInit+0x288>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d12:	4b78      	ldr	r3, [pc, #480]	; (8000ef4 <HAL_UART_MspInit+0x288>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d18:	4b76      	ldr	r3, [pc, #472]	; (8000ef4 <HAL_UART_MspInit+0x288>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d1e:	4b75      	ldr	r3, [pc, #468]	; (8000ef4 <HAL_UART_MspInit+0x288>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d24:	4b73      	ldr	r3, [pc, #460]	; (8000ef4 <HAL_UART_MspInit+0x288>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d2a:	4872      	ldr	r0, [pc, #456]	; (8000ef4 <HAL_UART_MspInit+0x288>)
 8000d2c:	f002 f8d6 	bl	8002edc <HAL_DMA_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000d36:	f7ff ff6b 	bl	8000c10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a6d      	ldr	r2, [pc, #436]	; (8000ef4 <HAL_UART_MspInit+0x288>)
 8000d3e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d40:	4a6c      	ldr	r2, [pc, #432]	; (8000ef4 <HAL_UART_MspInit+0x288>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000d46:	4b6d      	ldr	r3, [pc, #436]	; (8000efc <HAL_UART_MspInit+0x290>)
 8000d48:	4a6d      	ldr	r2, [pc, #436]	; (8000f00 <HAL_UART_MspInit+0x294>)
 8000d4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d4c:	4b6b      	ldr	r3, [pc, #428]	; (8000efc <HAL_UART_MspInit+0x290>)
 8000d4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d52:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d54:	4b69      	ldr	r3, [pc, #420]	; (8000efc <HAL_UART_MspInit+0x290>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5a:	4b68      	ldr	r3, [pc, #416]	; (8000efc <HAL_UART_MspInit+0x290>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d60:	4b66      	ldr	r3, [pc, #408]	; (8000efc <HAL_UART_MspInit+0x290>)
 8000d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d66:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d68:	4b64      	ldr	r3, [pc, #400]	; (8000efc <HAL_UART_MspInit+0x290>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d6e:	4b63      	ldr	r3, [pc, #396]	; (8000efc <HAL_UART_MspInit+0x290>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d74:	4b61      	ldr	r3, [pc, #388]	; (8000efc <HAL_UART_MspInit+0x290>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d7a:	4b60      	ldr	r3, [pc, #384]	; (8000efc <HAL_UART_MspInit+0x290>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d80:	4b5e      	ldr	r3, [pc, #376]	; (8000efc <HAL_UART_MspInit+0x290>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d86:	485d      	ldr	r0, [pc, #372]	; (8000efc <HAL_UART_MspInit+0x290>)
 8000d88:	f002 f8a8 	bl	8002edc <HAL_DMA_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000d92:	f7ff ff3d 	bl	8000c10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a58      	ldr	r2, [pc, #352]	; (8000efc <HAL_UART_MspInit+0x290>)
 8000d9a:	639a      	str	r2, [r3, #56]	; 0x38
 8000d9c:	4a57      	ldr	r2, [pc, #348]	; (8000efc <HAL_UART_MspInit+0x290>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	2025      	movs	r0, #37	; 0x25
 8000da8:	f002 f861 	bl	8002e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dac:	2025      	movs	r0, #37	; 0x25
 8000dae:	f002 f87a 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000db2:	e095      	b.n	8000ee0 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a52      	ldr	r2, [pc, #328]	; (8000f04 <HAL_UART_MspInit+0x298>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	f040 8090 	bne.w	8000ee0 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	4b49      	ldr	r3, [pc, #292]	; (8000eec <HAL_UART_MspInit+0x280>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a48      	ldr	r2, [pc, #288]	; (8000eec <HAL_UART_MspInit+0x280>)
 8000dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd0:	4b46      	ldr	r3, [pc, #280]	; (8000eec <HAL_UART_MspInit+0x280>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	4b42      	ldr	r3, [pc, #264]	; (8000eec <HAL_UART_MspInit+0x280>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a41      	ldr	r2, [pc, #260]	; (8000eec <HAL_UART_MspInit+0x280>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b3f      	ldr	r3, [pc, #252]	; (8000eec <HAL_UART_MspInit+0x280>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000df8:	230c      	movs	r3, #12
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	4837      	ldr	r0, [pc, #220]	; (8000ef0 <HAL_UART_MspInit+0x284>)
 8000e14:	f002 fc64 	bl	80036e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e18:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <HAL_UART_MspInit+0x29c>)
 8000e1a:	4a3c      	ldr	r2, [pc, #240]	; (8000f0c <HAL_UART_MspInit+0x2a0>)
 8000e1c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000e1e:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <HAL_UART_MspInit+0x29c>)
 8000e20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e24:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e26:	4b38      	ldr	r3, [pc, #224]	; (8000f08 <HAL_UART_MspInit+0x29c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e2c:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <HAL_UART_MspInit+0x29c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e32:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <HAL_UART_MspInit+0x29c>)
 8000e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e38:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <HAL_UART_MspInit+0x29c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e40:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <HAL_UART_MspInit+0x29c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e46:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <HAL_UART_MspInit+0x29c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e4c:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <HAL_UART_MspInit+0x29c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <HAL_UART_MspInit+0x29c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e58:	482b      	ldr	r0, [pc, #172]	; (8000f08 <HAL_UART_MspInit+0x29c>)
 8000e5a:	f002 f83f 	bl	8002edc <HAL_DMA_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8000e64:	f7ff fed4 	bl	8000c10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <HAL_UART_MspInit+0x29c>)
 8000e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e6e:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <HAL_UART_MspInit+0x29c>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <HAL_UART_MspInit+0x2a4>)
 8000e76:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <HAL_UART_MspInit+0x2a8>)
 8000e78:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e7a:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <HAL_UART_MspInit+0x2a4>)
 8000e7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e80:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <HAL_UART_MspInit+0x2a4>)
 8000e84:	2240      	movs	r2, #64	; 0x40
 8000e86:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <HAL_UART_MspInit+0x2a4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <HAL_UART_MspInit+0x2a4>)
 8000e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e94:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <HAL_UART_MspInit+0x2a4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_UART_MspInit+0x2a4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_UART_MspInit+0x2a4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_UART_MspInit+0x2a4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_UART_MspInit+0x2a4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000eb4:	4816      	ldr	r0, [pc, #88]	; (8000f10 <HAL_UART_MspInit+0x2a4>)
 8000eb6:	f002 f811 	bl	8002edc <HAL_DMA_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8000ec0:	f7ff fea6 	bl	8000c10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <HAL_UART_MspInit+0x2a4>)
 8000ec8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eca:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <HAL_UART_MspInit+0x2a4>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2026      	movs	r0, #38	; 0x26
 8000ed6:	f001 ffca 	bl	8002e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eda:	2026      	movs	r0, #38	; 0x26
 8000edc:	f001 ffe3 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
}
 8000ee0:	bf00      	nop
 8000ee2:	3730      	adds	r7, #48	; 0x30
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40011000 	.word	0x40011000
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	200007dc 	.word	0x200007dc
 8000ef8:	400264b8 	.word	0x400264b8
 8000efc:	2000083c 	.word	0x2000083c
 8000f00:	40026440 	.word	0x40026440
 8000f04:	40004400 	.word	0x40004400
 8000f08:	2000077c 	.word	0x2000077c
 8000f0c:	40026088 	.word	0x40026088
 8000f10:	2000089c 	.word	0x2000089c
 8000f14:	400260a0 	.word	0x400260a0

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f001 fe64 	bl	8002c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <SysTick_Handler+0x18>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	4a02      	ldr	r2, [pc, #8]	; (8000f78 <SysTick_Handler+0x18>)
 8000f70:	6013      	str	r3, [r2, #0]
  //D_Slider_SystickUpdate();
  //D_USBHID_SysticUpdate();
  /* USER CODE END SysTick_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000248 	.word	0x20000248

08000f7c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <DMA1_Stream5_IRQHandler+0x10>)
 8000f82:	f002 f943 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000077c 	.word	0x2000077c

08000f90 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <DMA1_Stream6_IRQHandler+0x10>)
 8000f96:	f002 f939 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000089c 	.word	0x2000089c

08000fa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <USART1_IRQHandler+0x10>)
 8000faa:	f004 fc29 	bl	8005800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200008fc 	.word	0x200008fc

08000fb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <USART2_IRQHandler+0x10>)
 8000fbe:	f004 fc1f 	bl	8005800 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000940 	.word	0x20000940

08000fcc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <DMA2_Stream2_IRQHandler+0x10>)
 8000fd2:	f002 f91b 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000083c 	.word	0x2000083c

08000fe0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <OTG_FS_IRQHandler+0x10>)
 8000fe6:	f002 fe80 	bl	8003cea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000e64 	.word	0x20000e64

08000ff4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <DMA2_Stream7_IRQHandler+0x10>)
 8000ffa:	f002 f907 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200007dc 	.word	0x200007dc

08001008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <SystemInit+0x20>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <SystemInit+0x20>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001064 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001032:	490e      	ldr	r1, [pc, #56]	; (800106c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001034:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001048:	4c0b      	ldr	r4, [pc, #44]	; (8001078 <LoopFillZerobss+0x26>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001056:	f7ff ffd7 	bl	8001008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105a:	f008 febf 	bl	8009ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105e:	f7ff fbf9 	bl	8000854 <main>
  bx  lr    
 8001062:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001064:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001070:	08009ef0 	.word	0x08009ef0
  ldr r2, =_sbss
 8001074:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001078:	2000126c 	.word	0x2000126c

0800107c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC_IRQHandler>
	...

08001080 <D_Slider_SystickUpdate>:
//static volatile uint32_t SndErrTime = 0;
//static volatile uint32_t RcvErrTime = 0;

//static volatile int SndCount = 0;

void D_Slider_SystickUpdate(){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	static uint32_t sndTime = 0;
	static uint32_t rcvTime = 0;

	static uint8_t count = 0;

	int deltaT = G_System_counter - recent_System_counter;
 8001086:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <D_Slider_SystickUpdate+0xb4>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <D_Slider_SystickUpdate+0xb8>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	607b      	str	r3, [r7, #4]
	sndTime += deltaT;
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <D_Slider_SystickUpdate+0xbc>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a28      	ldr	r2, [pc, #160]	; (800113c <D_Slider_SystickUpdate+0xbc>)
 800109c:	6013      	str	r3, [r2, #0]
	rcvTime += deltaT;
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <D_Slider_SystickUpdate+0xc0>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a26      	ldr	r2, [pc, #152]	; (8001140 <D_Slider_SystickUpdate+0xc0>)
 80010a8:	6013      	str	r3, [r2, #0]
	//SndErrTime += deltaT;
	//RcvErrTime += deltaT;
	recent_System_counter = G_System_counter;
 80010aa:	4b22      	ldr	r3, [pc, #136]	; (8001134 <D_Slider_SystickUpdate+0xb4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a22      	ldr	r2, [pc, #136]	; (8001138 <D_Slider_SystickUpdate+0xb8>)
 80010b0:	6013      	str	r3, [r2, #0]

	if(!_firstSend){
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <D_Slider_SystickUpdate+0xc4>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	f083 0301 	eor.w	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <D_Slider_SystickUpdate+0x4c>
		_firstSend = true;
 80010c0:	4b20      	ldr	r3, [pc, #128]	; (8001144 <D_Slider_SystickUpdate+0xc4>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
		D_Slider_Start();
 80010c6:	f000 f849 	bl	800115c <D_Slider_Start>
		//D_Slider_InitColorData();
		return;
 80010ca:	e030      	b.n	800112e <D_Slider_SystickUpdate+0xae>
	}
	if(sndTime >= SLIDER_SEND_INTERVAL){
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <D_Slider_SystickUpdate+0xbc>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d91f      	bls.n	8001114 <D_Slider_SystickUpdate+0x94>
		sndTime = 0;
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <D_Slider_SystickUpdate+0xbc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
		count++;
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <D_Slider_SystickUpdate+0xc8>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <D_Slider_SystickUpdate+0xc8>)
 80010e4:	701a      	strb	r2, [r3, #0]
		if(count == 1){
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <D_Slider_SystickUpdate+0xc8>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d107      	bne.n	80010fe <D_Slider_SystickUpdate+0x7e>
			D_Slider_Send((uint8_t*)SendData, COLORSEND_LENGTH + AdditionalPacket);
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <D_Slider_SystickUpdate+0xcc>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	330a      	adds	r3, #10
 80010f4:	4619      	mov	r1, r3
 80010f6:	4816      	ldr	r0, [pc, #88]	; (8001150 <D_Slider_SystickUpdate+0xd0>)
 80010f8:	f001 f8fa 	bl	80022f0 <D_Slider_Send>
 80010fc:	e003      	b.n	8001106 <D_Slider_SystickUpdate+0x86>
		}else{
			D_Slider_Send((uint8_t*)SensorGetSendData, SENSORGET_LENGTH);
 80010fe:	2106      	movs	r1, #6
 8001100:	4814      	ldr	r0, [pc, #80]	; (8001154 <D_Slider_SystickUpdate+0xd4>)
 8001102:	f001 f8f5 	bl	80022f0 <D_Slider_Send>
		}
		if(count >= 10) count = 0;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <D_Slider_SystickUpdate+0xc8>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b09      	cmp	r3, #9
 800110c:	d902      	bls.n	8001114 <D_Slider_SystickUpdate+0x94>
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <D_Slider_SystickUpdate+0xc8>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
	}

	if(rcvTime >= SLIDER_RECEIVE_INTERVAL){
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <D_Slider_SystickUpdate+0xc0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b04      	cmp	r3, #4
 800111a:	d906      	bls.n	800112a <D_Slider_SystickUpdate+0xaa>
		rcvTime = 0;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <D_Slider_SystickUpdate+0xc0>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
		D_Slider_Receive((uint8_t*)RecvData, 10);
 8001122:	210a      	movs	r1, #10
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <D_Slider_SystickUpdate+0xd8>)
 8001126:	f001 f90b 	bl	8002340 <D_Slider_Receive>
		//D_Slider_Receive((uint8_t*)RecvData, 10);
		RcvErrTime = 0;
	}
	*/

	D_Slider_LightingUpdate();
 800112a:	f000 f8c7 	bl	80012bc <D_Slider_LightingUpdate>
	if(receiveFaultCount >= 30){
		D_Slider_Start();
		receiveFaultCount = 0;
	}
	*/
}
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000248 	.word	0x20000248
 8001138:	200002e4 	.word	0x200002e4
 800113c:	200002e8 	.word	0x200002e8
 8001140:	200002ec 	.word	0x200002ec
 8001144:	200002d9 	.word	0x200002d9
 8001148:	200002f0 	.word	0x200002f0
 800114c:	2000028c 	.word	0x2000028c
 8001150:	2000024c 	.word	0x2000024c
 8001154:	2000026c 	.word	0x2000026c
 8001158:	20000290 	.word	0x20000290

0800115c <D_Slider_Start>:

void D_Slider_Start(void){
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
	SensorGetSendData[0] = FIRSTBYTE;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <D_Slider_Start+0x5c>)
 8001164:	22e0      	movs	r2, #224	; 0xe0
 8001166:	701a      	strb	r2, [r3, #0]
	SensorGetSendData[1] = ADDRESS;
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <D_Slider_Start+0x5c>)
 800116a:	2201      	movs	r2, #1
 800116c:	705a      	strb	r2, [r3, #1]
	SensorGetSendData[2] = SENSORGET_SEQNUM;
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <D_Slider_Start+0x5c>)
 8001170:	2201      	movs	r2, #1
 8001172:	709a      	strb	r2, [r3, #2]
	SensorGetSendData[3] = SENSORGET_DATANUM;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <D_Slider_Start+0x5c>)
 8001176:	2201      	movs	r2, #1
 8001178:	70da      	strb	r2, [r3, #3]
	SensorGetSendData[4] = SENSORGET_CMD;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <D_Slider_Start+0x5c>)
 800117c:	2220      	movs	r2, #32
 800117e:	711a      	strb	r2, [r3, #4]
	uint8_t dataSum = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 8001184:	2301      	movs	r3, #1
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	e009      	b.n	800119e <D_Slider_Start+0x42>
		dataSum += SensorGetSendData[i];
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <D_Slider_Start+0x5c>)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	4413      	add	r3, r2
 8001190:	781a      	ldrb	r2, [r3, #0]
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4413      	add	r3, r2
 8001196:	71fb      	strb	r3, [r7, #7]
	for(int i=1; i<SENSORGET_LENGTH-1; i++){
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	ddf2      	ble.n	800118a <D_Slider_Start+0x2e>
	}
	SensorGetSendData[SENSORGET_LENGTH-1] = (uint8_t)dataSum;
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <D_Slider_Start+0x5c>)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	7153      	strb	r3, [r2, #5]
	data[3] = 0xfe;
	had_completed_tx = true;
	had_completed_rx = true;
	D_Slider_Send((uint8_t*)data, 4);
	*/
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	2000026c 	.word	0x2000026c

080011bc <D_Slider_SetLightingR>:

void D_Slider_SetLightingR(SliderLightingMode rightType, int pocketR){
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
	//LightingMode[0] = rightType;
	inPocket[0] = pocketR;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <D_Slider_SetLightingR+0x78>)
 80011ce:	701a      	strb	r2, [r3, #0]
	if(rightType == SL_POCKET_IN){
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d124      	bne.n	8001220 <D_Slider_SetLightingR+0x64>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d825      	bhi.n	8001228 <D_Slider_SetLightingR+0x6c>
 80011dc:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <D_Slider_SetLightingR+0x28>)
 80011de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e2:	bf00      	nop
 80011e4:	080011f9 	.word	0x080011f9
 80011e8:	08001201 	.word	0x08001201
 80011ec:	08001209 	.word	0x08001209
 80011f0:	08001211 	.word	0x08001211
 80011f4:	08001219 	.word	0x08001219
		switch(pocketR){
		case 0:
			LightingMode[0] = SL_POCKET_IN_OUT;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <D_Slider_SetLightingR+0x7c>)
 80011fa:	2205      	movs	r2, #5
 80011fc:	701a      	strb	r2, [r3, #0]
			break;
 80011fe:	e013      	b.n	8001228 <D_Slider_SetLightingR+0x6c>
		case 1:
			LightingMode[0] = SL_POCKET_IN_DIA;
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <D_Slider_SetLightingR+0x7c>)
 8001202:	2206      	movs	r2, #6
 8001204:	701a      	strb	r2, [r3, #0]
			break;
 8001206:	e00f      	b.n	8001228 <D_Slider_SetLightingR+0x6c>
		case 2:
			LightingMode[0] = SL_POCKET_IN_UP;
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <D_Slider_SetLightingR+0x7c>)
 800120a:	2204      	movs	r2, #4
 800120c:	701a      	strb	r2, [r3, #0]
			break;
 800120e:	e00b      	b.n	8001228 <D_Slider_SetLightingR+0x6c>
		case 3:
			LightingMode[0] = SL_POCKET_IN_DIA;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <D_Slider_SetLightingR+0x7c>)
 8001212:	2206      	movs	r2, #6
 8001214:	701a      	strb	r2, [r3, #0]
			break;
 8001216:	e007      	b.n	8001228 <D_Slider_SetLightingR+0x6c>
		case 4:
			LightingMode[0] = SL_POCKET_IN_OUT;
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <D_Slider_SetLightingR+0x7c>)
 800121a:	2205      	movs	r2, #5
 800121c:	701a      	strb	r2, [r3, #0]
			break;
 800121e:	e003      	b.n	8001228 <D_Slider_SetLightingR+0x6c>
		}
	}else{
		LightingMode[0] = rightType;
 8001220:	4a05      	ldr	r2, [pc, #20]	; (8001238 <D_Slider_SetLightingR+0x7c>)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	7013      	strb	r3, [r2, #0]
	}
}
 8001226:	e7ff      	b.n	8001228 <D_Slider_SetLightingR+0x6c>
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	200002e0 	.word	0x200002e0
 8001238:	200002dc 	.word	0x200002dc

0800123c <D_Slider_SetLightingL>:

void D_Slider_SetLightingL(SliderLightingMode leftType, int pocketL){
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
	//LightingMode[1] = leftType;
	inPocket[1] = pocketL;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <D_Slider_SetLightingL+0x78>)
 800124e:	705a      	strb	r2, [r3, #1]
	if(leftType == SL_POCKET_IN){
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d124      	bne.n	80012a0 <D_Slider_SetLightingL+0x64>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b04      	cmp	r3, #4
 800125a:	d825      	bhi.n	80012a8 <D_Slider_SetLightingL+0x6c>
 800125c:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <D_Slider_SetLightingL+0x28>)
 800125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001262:	bf00      	nop
 8001264:	08001279 	.word	0x08001279
 8001268:	08001281 	.word	0x08001281
 800126c:	08001289 	.word	0x08001289
 8001270:	08001291 	.word	0x08001291
 8001274:	08001299 	.word	0x08001299
		switch(pocketL){
		case 0:
			LightingMode[1] = SL_POCKET_IN_OUT;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <D_Slider_SetLightingL+0x7c>)
 800127a:	2205      	movs	r2, #5
 800127c:	705a      	strb	r2, [r3, #1]
			break;
 800127e:	e013      	b.n	80012a8 <D_Slider_SetLightingL+0x6c>
		case 1:
			LightingMode[1] = SL_POCKET_IN_DIA;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <D_Slider_SetLightingL+0x7c>)
 8001282:	2206      	movs	r2, #6
 8001284:	705a      	strb	r2, [r3, #1]
			break;
 8001286:	e00f      	b.n	80012a8 <D_Slider_SetLightingL+0x6c>
		case 2:
			LightingMode[1] = SL_POCKET_IN_UP;
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <D_Slider_SetLightingL+0x7c>)
 800128a:	2204      	movs	r2, #4
 800128c:	705a      	strb	r2, [r3, #1]
			break;
 800128e:	e00b      	b.n	80012a8 <D_Slider_SetLightingL+0x6c>
		case 3:
			LightingMode[1] = SL_POCKET_IN_DIA;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <D_Slider_SetLightingL+0x7c>)
 8001292:	2206      	movs	r2, #6
 8001294:	705a      	strb	r2, [r3, #1]
			break;
 8001296:	e007      	b.n	80012a8 <D_Slider_SetLightingL+0x6c>
		case 4:
			LightingMode[1] = SL_POCKET_IN_OUT;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <D_Slider_SetLightingL+0x7c>)
 800129a:	2205      	movs	r2, #5
 800129c:	705a      	strb	r2, [r3, #1]
			break;
 800129e:	e003      	b.n	80012a8 <D_Slider_SetLightingL+0x6c>
		}
	}else{
		LightingMode[1] = leftType;
 80012a0:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <D_Slider_SetLightingL+0x7c>)
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	7053      	strb	r3, [r2, #1]
	}
}
 80012a6:	e7ff      	b.n	80012a8 <D_Slider_SetLightingL+0x6c>
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	200002e0 	.word	0x200002e0
 80012b8:	200002dc 	.word	0x200002dc

080012bc <D_Slider_LightingUpdate>:

void D_Slider_LightingUpdate(void){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
	static bool _changeMode[2] = {false};
	static bool _animUpdate_1[2] = {false};
	static bool _animUpdate_2[2] = {false};
	static int counter1[2] = {0};

	int nowCount = G_System_counter;
 80012c2:	4ba9      	ldr	r3, [pc, #676]	; (8001568 <D_Slider_LightingUpdate+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	607b      	str	r3, [r7, #4]

	for(int side = 0; side < 2; side++){
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
 80012cc:	f000 bf6f 	b.w	80021ae <D_Slider_LightingUpdate+0xef2>
		updateCount[side] += nowCount - recentUpdateCount;
 80012d0:	4aa6      	ldr	r2, [pc, #664]	; (800156c <D_Slider_LightingUpdate+0x2b0>)
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012d8:	4ba5      	ldr	r3, [pc, #660]	; (8001570 <D_Slider_LightingUpdate+0x2b4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	1acb      	subs	r3, r1, r3
 80012e0:	441a      	add	r2, r3
 80012e2:	49a2      	ldr	r1, [pc, #648]	; (800156c <D_Slider_LightingUpdate+0x2b0>)
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(LightingMode[side] != recentMode[side] || inPocket[side] != recentInPocket[side]){
 80012ea:	4aa2      	ldr	r2, [pc, #648]	; (8001574 <D_Slider_LightingUpdate+0x2b8>)
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	4413      	add	r3, r2
 80012f0:	781a      	ldrb	r2, [r3, #0]
 80012f2:	49a1      	ldr	r1, [pc, #644]	; (8001578 <D_Slider_LightingUpdate+0x2bc>)
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	440b      	add	r3, r1
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d109      	bne.n	8001312 <D_Slider_LightingUpdate+0x56>
 80012fe:	4a9f      	ldr	r2, [pc, #636]	; (800157c <D_Slider_LightingUpdate+0x2c0>)
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	4413      	add	r3, r2
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	499e      	ldr	r1, [pc, #632]	; (8001580 <D_Slider_LightingUpdate+0x2c4>)
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	440b      	add	r3, r1
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d013      	beq.n	800133a <D_Slider_LightingUpdate+0x7e>
			_changeMode[side] = true;
 8001312:	4a9c      	ldr	r2, [pc, #624]	; (8001584 <D_Slider_LightingUpdate+0x2c8>)
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	4413      	add	r3, r2
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
			updateCount[side] = 0;
 800131c:	4a93      	ldr	r2, [pc, #588]	; (800156c <D_Slider_LightingUpdate+0x2b0>)
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	2100      	movs	r1, #0
 8001322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			_animUpdate_1[side] = false;
 8001326:	4a98      	ldr	r2, [pc, #608]	; (8001588 <D_Slider_LightingUpdate+0x2cc>)
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	4413      	add	r3, r2
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
			_animUpdate_2[side] = false;
 8001330:	4a96      	ldr	r2, [pc, #600]	; (800158c <D_Slider_LightingUpdate+0x2d0>)
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	4413      	add	r3, r2
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
		}
		recentMode[side] = LightingMode[side];
 800133a:	4a8e      	ldr	r2, [pc, #568]	; (8001574 <D_Slider_LightingUpdate+0x2b8>)
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	4413      	add	r3, r2
 8001340:	7819      	ldrb	r1, [r3, #0]
 8001342:	4a8d      	ldr	r2, [pc, #564]	; (8001578 <D_Slider_LightingUpdate+0x2bc>)
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	4413      	add	r3, r2
 8001348:	460a      	mov	r2, r1
 800134a:	701a      	strb	r2, [r3, #0]
		recentInPocket[side] = inPocket[side];
 800134c:	4a8b      	ldr	r2, [pc, #556]	; (800157c <D_Slider_LightingUpdate+0x2c0>)
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	4413      	add	r3, r2
 8001352:	7819      	ldrb	r1, [r3, #0]
 8001354:	4a8a      	ldr	r2, [pc, #552]	; (8001580 <D_Slider_LightingUpdate+0x2c4>)
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	4413      	add	r3, r2
 800135a:	460a      	mov	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
		switch(LightingMode[side]){
 800135e:	4a85      	ldr	r2, [pc, #532]	; (8001574 <D_Slider_LightingUpdate+0x2b8>)
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b06      	cmp	r3, #6
 8001368:	f200 871e 	bhi.w	80021a8 <D_Slider_LightingUpdate+0xeec>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <D_Slider_LightingUpdate+0xb8>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001391 	.word	0x08001391
 8001378:	08001411 	.word	0x08001411
 800137c:	08001491 	.word	0x08001491
 8001380:	080021a9 	.word	0x080021a9
 8001384:	08001f3b 	.word	0x08001f3b
 8001388:	08001611 	.word	0x08001611
 800138c:	080019fb 	.word	0x080019fb
		case SL_DISABLE:
			if(_changeMode[side]){
 8001390:	4a7c      	ldr	r2, [pc, #496]	; (8001584 <D_Slider_LightingUpdate+0x2c8>)
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 86fa 	beq.w	8002192 <D_Slider_LightingUpdate+0xed6>
				for(int i=0; i<5; i++){
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
 80013a2:	e02b      	b.n	80013fc <D_Slider_LightingUpdate+0x140>
					slideColor[side][i][0] = false;
 80013a4:	487a      	ldr	r0, [pc, #488]	; (8001590 <D_Slider_LightingUpdate+0x2d4>)
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013aa:	461a      	mov	r2, r3
 80013ac:	0052      	lsls	r2, r2, #1
 80013ae:	441a      	add	r2, r3
 80013b0:	460b      	mov	r3, r1
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	1a5b      	subs	r3, r3, r1
 80013b6:	4413      	add	r3, r2
 80013b8:	4403      	add	r3, r0
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 80013be:	4874      	ldr	r0, [pc, #464]	; (8001590 <D_Slider_LightingUpdate+0x2d4>)
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013c4:	461a      	mov	r2, r3
 80013c6:	0052      	lsls	r2, r2, #1
 80013c8:	441a      	add	r2, r3
 80013ca:	460b      	mov	r3, r1
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	1a5b      	subs	r3, r3, r1
 80013d0:	4413      	add	r3, r2
 80013d2:	4403      	add	r3, r0
 80013d4:	3301      	adds	r3, #1
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 80013da:	486d      	ldr	r0, [pc, #436]	; (8001590 <D_Slider_LightingUpdate+0x2d4>)
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013e0:	461a      	mov	r2, r3
 80013e2:	0052      	lsls	r2, r2, #1
 80013e4:	441a      	add	r2, r3
 80013e6:	460b      	mov	r3, r1
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	1a5b      	subs	r3, r3, r1
 80013ec:	4413      	add	r3, r2
 80013ee:	4403      	add	r3, r0
 80013f0:	3302      	adds	r3, #2
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	3301      	adds	r3, #1
 80013fa:	623b      	str	r3, [r7, #32]
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	2b04      	cmp	r3, #4
 8001400:	ddd0      	ble.n	80013a4 <D_Slider_LightingUpdate+0xe8>
				}
				_changeMode[side] = false;
 8001402:	4a60      	ldr	r2, [pc, #384]	; (8001584 <D_Slider_LightingUpdate+0x2c8>)
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	4413      	add	r3, r2
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800140c:	f000 bec1 	b.w	8002192 <D_Slider_LightingUpdate+0xed6>

		case SL_NORMAL:
			if(_changeMode[side]){
 8001410:	4a5c      	ldr	r2, [pc, #368]	; (8001584 <D_Slider_LightingUpdate+0x2c8>)
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	4413      	add	r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 86bc 	beq.w	8002196 <D_Slider_LightingUpdate+0xeda>
				for(int i=0; i<5; i++){
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	e02b      	b.n	800147c <D_Slider_LightingUpdate+0x1c0>
					slideColor[side][i][0] = true;
 8001424:	485a      	ldr	r0, [pc, #360]	; (8001590 <D_Slider_LightingUpdate+0x2d4>)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800142a:	461a      	mov	r2, r3
 800142c:	0052      	lsls	r2, r2, #1
 800142e:	441a      	add	r2, r3
 8001430:	460b      	mov	r3, r1
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	1a5b      	subs	r3, r3, r1
 8001436:	4413      	add	r3, r2
 8001438:	4403      	add	r3, r0
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = true;
 800143e:	4854      	ldr	r0, [pc, #336]	; (8001590 <D_Slider_LightingUpdate+0x2d4>)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001444:	461a      	mov	r2, r3
 8001446:	0052      	lsls	r2, r2, #1
 8001448:	441a      	add	r2, r3
 800144a:	460b      	mov	r3, r1
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	1a5b      	subs	r3, r3, r1
 8001450:	4413      	add	r3, r2
 8001452:	4403      	add	r3, r0
 8001454:	3301      	adds	r3, #1
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = true;
 800145a:	484d      	ldr	r0, [pc, #308]	; (8001590 <D_Slider_LightingUpdate+0x2d4>)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001460:	461a      	mov	r2, r3
 8001462:	0052      	lsls	r2, r2, #1
 8001464:	441a      	add	r2, r3
 8001466:	460b      	mov	r3, r1
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	1a5b      	subs	r3, r3, r1
 800146c:	4413      	add	r3, r2
 800146e:	4403      	add	r3, r0
 8001470:	3302      	adds	r3, #2
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3301      	adds	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	2b04      	cmp	r3, #4
 8001480:	ddd0      	ble.n	8001424 <D_Slider_LightingUpdate+0x168>
				}
				_changeMode[side] = false;
 8001482:	4a40      	ldr	r2, [pc, #256]	; (8001584 <D_Slider_LightingUpdate+0x2c8>)
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	4413      	add	r3, r2
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800148c:	f000 be83 	b.w	8002196 <D_Slider_LightingUpdate+0xeda>

		case SL_NORMAL_FLASH:
			if(updateCount[side] <= 1700 && !_animUpdate_1[side]){
 8001490:	4a36      	ldr	r2, [pc, #216]	; (800156c <D_Slider_LightingUpdate+0x2b0>)
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001498:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800149c:	4293      	cmp	r3, r2
 800149e:	dc44      	bgt.n	800152a <D_Slider_LightingUpdate+0x26e>
 80014a0:	4a39      	ldr	r2, [pc, #228]	; (8001588 <D_Slider_LightingUpdate+0x2cc>)
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	f083 0301 	eor.w	r3, r3, #1
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d03b      	beq.n	800152a <D_Slider_LightingUpdate+0x26e>
				_animUpdate_1[side] = true;
 80014b2:	4a35      	ldr	r2, [pc, #212]	; (8001588 <D_Slider_LightingUpdate+0x2cc>)
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	4413      	add	r3, r2
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 80014bc:	4a33      	ldr	r2, [pc, #204]	; (800158c <D_Slider_LightingUpdate+0x2d0>)
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	4413      	add	r3, r2
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	e02b      	b.n	8001524 <D_Slider_LightingUpdate+0x268>
					slideColor[side][i][0] = true;
 80014cc:	4830      	ldr	r0, [pc, #192]	; (8001590 <D_Slider_LightingUpdate+0x2d4>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d2:	461a      	mov	r2, r3
 80014d4:	0052      	lsls	r2, r2, #1
 80014d6:	441a      	add	r2, r3
 80014d8:	460b      	mov	r3, r1
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	1a5b      	subs	r3, r3, r1
 80014de:	4413      	add	r3, r2
 80014e0:	4403      	add	r3, r0
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = true;
 80014e6:	482a      	ldr	r0, [pc, #168]	; (8001590 <D_Slider_LightingUpdate+0x2d4>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ec:	461a      	mov	r2, r3
 80014ee:	0052      	lsls	r2, r2, #1
 80014f0:	441a      	add	r2, r3
 80014f2:	460b      	mov	r3, r1
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	1a5b      	subs	r3, r3, r1
 80014f8:	4413      	add	r3, r2
 80014fa:	4403      	add	r3, r0
 80014fc:	3301      	adds	r3, #1
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = true;
 8001502:	4823      	ldr	r0, [pc, #140]	; (8001590 <D_Slider_LightingUpdate+0x2d4>)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001508:	461a      	mov	r2, r3
 800150a:	0052      	lsls	r2, r2, #1
 800150c:	441a      	add	r2, r3
 800150e:	460b      	mov	r3, r1
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	1a5b      	subs	r3, r3, r1
 8001514:	4413      	add	r3, r2
 8001516:	4403      	add	r3, r0
 8001518:	3302      	adds	r3, #2
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	3301      	adds	r3, #1
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2b04      	cmp	r3, #4
 8001528:	ddd0      	ble.n	80014cc <D_Slider_LightingUpdate+0x210>
				}
			}
			if(updateCount[side] > 1700 && !_animUpdate_2[side]){
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <D_Slider_LightingUpdate+0x2b0>)
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001532:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001536:	4293      	cmp	r3, r2
 8001538:	dd5b      	ble.n	80015f2 <D_Slider_LightingUpdate+0x336>
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <D_Slider_LightingUpdate+0x2d0>)
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	4413      	add	r3, r2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	f083 0301 	eor.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d052      	beq.n	80015f2 <D_Slider_LightingUpdate+0x336>
				_animUpdate_1[side] = false;
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <D_Slider_LightingUpdate+0x2cc>)
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	4413      	add	r3, r2
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8001556:	4a0d      	ldr	r2, [pc, #52]	; (800158c <D_Slider_LightingUpdate+0x2d0>)
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	4413      	add	r3, r2
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	e042      	b.n	80015ec <D_Slider_LightingUpdate+0x330>
 8001566:	bf00      	nop
 8001568:	20000248 	.word	0x20000248
 800156c:	200002f4 	.word	0x200002f4
 8001570:	200002fc 	.word	0x200002fc
 8001574:	200002dc 	.word	0x200002dc
 8001578:	20000300 	.word	0x20000300
 800157c:	200002e0 	.word	0x200002e0
 8001580:	20000304 	.word	0x20000304
 8001584:	20000308 	.word	0x20000308
 8001588:	2000030c 	.word	0x2000030c
 800158c:	20000310 	.word	0x20000310
 8001590:	20000314 	.word	0x20000314
					slideColor[side][i][0] = false;
 8001594:	4823      	ldr	r0, [pc, #140]	; (8001624 <D_Slider_LightingUpdate+0x368>)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800159a:	461a      	mov	r2, r3
 800159c:	0052      	lsls	r2, r2, #1
 800159e:	441a      	add	r2, r3
 80015a0:	460b      	mov	r3, r1
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	1a5b      	subs	r3, r3, r1
 80015a6:	4413      	add	r3, r2
 80015a8:	4403      	add	r3, r0
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 80015ae:	481d      	ldr	r0, [pc, #116]	; (8001624 <D_Slider_LightingUpdate+0x368>)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015b4:	461a      	mov	r2, r3
 80015b6:	0052      	lsls	r2, r2, #1
 80015b8:	441a      	add	r2, r3
 80015ba:	460b      	mov	r3, r1
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	1a5b      	subs	r3, r3, r1
 80015c0:	4413      	add	r3, r2
 80015c2:	4403      	add	r3, r0
 80015c4:	3301      	adds	r3, #1
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 80015ca:	4816      	ldr	r0, [pc, #88]	; (8001624 <D_Slider_LightingUpdate+0x368>)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d0:	461a      	mov	r2, r3
 80015d2:	0052      	lsls	r2, r2, #1
 80015d4:	441a      	add	r2, r3
 80015d6:	460b      	mov	r3, r1
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	1a5b      	subs	r3, r3, r1
 80015dc:	4413      	add	r3, r2
 80015de:	4403      	add	r3, r0
 80015e0:	3302      	adds	r3, #2
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	ddd0      	ble.n	8001594 <D_Slider_LightingUpdate+0x2d8>
				}
			}
			if(updateCount[side] >= 2000) updateCount[side] = 0;
 80015f2:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <D_Slider_LightingUpdate+0x36c>)
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015fe:	f2c0 85cc 	blt.w	800219a <D_Slider_LightingUpdate+0xede>
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <D_Slider_LightingUpdate+0x36c>)
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	2100      	movs	r1, #0
 8001608:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800160c:	f000 bdc5 	b.w	800219a <D_Slider_LightingUpdate+0xede>

		case SL_POCKET_IN_OUT:
			if(_changeMode[side]){
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <D_Slider_LightingUpdate+0x370>)
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	4413      	add	r3, r2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d03d      	beq.n	8001698 <D_Slider_LightingUpdate+0x3dc>
				for(int i=0; i<5; i++){
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	e032      	b.n	8001688 <D_Slider_LightingUpdate+0x3cc>
 8001622:	bf00      	nop
 8001624:	20000314 	.word	0x20000314
 8001628:	200002f4 	.word	0x200002f4
 800162c:	20000308 	.word	0x20000308
					slideColor[side][i][0] = false;
 8001630:	48ba      	ldr	r0, [pc, #744]	; (800191c <D_Slider_LightingUpdate+0x660>)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001636:	461a      	mov	r2, r3
 8001638:	0052      	lsls	r2, r2, #1
 800163a:	441a      	add	r2, r3
 800163c:	460b      	mov	r3, r1
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	1a5b      	subs	r3, r3, r1
 8001642:	4413      	add	r3, r2
 8001644:	4403      	add	r3, r0
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 800164a:	48b4      	ldr	r0, [pc, #720]	; (800191c <D_Slider_LightingUpdate+0x660>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001650:	461a      	mov	r2, r3
 8001652:	0052      	lsls	r2, r2, #1
 8001654:	441a      	add	r2, r3
 8001656:	460b      	mov	r3, r1
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	1a5b      	subs	r3, r3, r1
 800165c:	4413      	add	r3, r2
 800165e:	4403      	add	r3, r0
 8001660:	3301      	adds	r3, #1
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 8001666:	48ad      	ldr	r0, [pc, #692]	; (800191c <D_Slider_LightingUpdate+0x660>)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800166c:	461a      	mov	r2, r3
 800166e:	0052      	lsls	r2, r2, #1
 8001670:	441a      	add	r2, r3
 8001672:	460b      	mov	r3, r1
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	1a5b      	subs	r3, r3, r1
 8001678:	4413      	add	r3, r2
 800167a:	4403      	add	r3, r0
 800167c:	3302      	adds	r3, #2
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	3301      	adds	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b04      	cmp	r3, #4
 800168c:	ddd0      	ble.n	8001630 <D_Slider_LightingUpdate+0x374>
				}
				_changeMode[side] = false;
 800168e:	4aa4      	ldr	r2, [pc, #656]	; (8001920 <D_Slider_LightingUpdate+0x664>)
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	4413      	add	r3, r2
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] < 100 && !_animUpdate_1[side]){
 8001698:	4aa2      	ldr	r2, [pc, #648]	; (8001924 <D_Slider_LightingUpdate+0x668>)
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a0:	2b63      	cmp	r3, #99	; 0x63
 80016a2:	dc44      	bgt.n	800172e <D_Slider_LightingUpdate+0x472>
 80016a4:	4aa0      	ldr	r2, [pc, #640]	; (8001928 <D_Slider_LightingUpdate+0x66c>)
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	4413      	add	r3, r2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	f083 0301 	eor.w	r3, r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d03b      	beq.n	800172e <D_Slider_LightingUpdate+0x472>
				_animUpdate_1[side] = true;
 80016b6:	4a9c      	ldr	r2, [pc, #624]	; (8001928 <D_Slider_LightingUpdate+0x66c>)
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	4413      	add	r3, r2
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 80016c0:	4a9a      	ldr	r2, [pc, #616]	; (800192c <D_Slider_LightingUpdate+0x670>)
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	4413      	add	r3, r2
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 80016ca:	4a99      	ldr	r2, [pc, #612]	; (8001930 <D_Slider_LightingUpdate+0x674>)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	4413      	add	r3, r2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	4892      	ldr	r0, [pc, #584]	; (800191c <D_Slider_LightingUpdate+0x660>)
 80016d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016d6:	461a      	mov	r2, r3
 80016d8:	0052      	lsls	r2, r2, #1
 80016da:	441a      	add	r2, r3
 80016dc:	460b      	mov	r3, r1
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	1a5b      	subs	r3, r3, r1
 80016e2:	4413      	add	r3, r2
 80016e4:	4403      	add	r3, r0
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 80016ea:	4a91      	ldr	r2, [pc, #580]	; (8001930 <D_Slider_LightingUpdate+0x674>)
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	4413      	add	r3, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	488a      	ldr	r0, [pc, #552]	; (800191c <D_Slider_LightingUpdate+0x660>)
 80016f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016f6:	461a      	mov	r2, r3
 80016f8:	0052      	lsls	r2, r2, #1
 80016fa:	441a      	add	r2, r3
 80016fc:	460b      	mov	r3, r1
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	1a5b      	subs	r3, r3, r1
 8001702:	4413      	add	r3, r2
 8001704:	4403      	add	r3, r0
 8001706:	3301      	adds	r3, #1
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 800170c:	4a88      	ldr	r2, [pc, #544]	; (8001930 <D_Slider_LightingUpdate+0x674>)
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	4413      	add	r3, r2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4881      	ldr	r0, [pc, #516]	; (800191c <D_Slider_LightingUpdate+0x660>)
 8001716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001718:	461a      	mov	r2, r3
 800171a:	0052      	lsls	r2, r2, #1
 800171c:	441a      	add	r2, r3
 800171e:	460b      	mov	r3, r1
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	1a5b      	subs	r3, r3, r1
 8001724:	4413      	add	r3, r2
 8001726:	4403      	add	r3, r0
 8001728:	3302      	adds	r3, #2
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 100 && updateCount[side] < 200 && !_animUpdate_2[side]){
 800172e:	4a7d      	ldr	r2, [pc, #500]	; (8001924 <D_Slider_LightingUpdate+0x668>)
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001736:	2b63      	cmp	r3, #99	; 0x63
 8001738:	dd4a      	ble.n	80017d0 <D_Slider_LightingUpdate+0x514>
 800173a:	4a7a      	ldr	r2, [pc, #488]	; (8001924 <D_Slider_LightingUpdate+0x668>)
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001742:	2bc7      	cmp	r3, #199	; 0xc7
 8001744:	dc44      	bgt.n	80017d0 <D_Slider_LightingUpdate+0x514>
 8001746:	4a79      	ldr	r2, [pc, #484]	; (800192c <D_Slider_LightingUpdate+0x670>)
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	f083 0301 	eor.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d03b      	beq.n	80017d0 <D_Slider_LightingUpdate+0x514>
				_animUpdate_1[side] = false;
 8001758:	4a73      	ldr	r2, [pc, #460]	; (8001928 <D_Slider_LightingUpdate+0x66c>)
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	4413      	add	r3, r2
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8001762:	4a72      	ldr	r2, [pc, #456]	; (800192c <D_Slider_LightingUpdate+0x670>)
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	4413      	add	r3, r2
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 800176c:	4a70      	ldr	r2, [pc, #448]	; (8001930 <D_Slider_LightingUpdate+0x674>)
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4869      	ldr	r0, [pc, #420]	; (800191c <D_Slider_LightingUpdate+0x660>)
 8001776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001778:	461a      	mov	r2, r3
 800177a:	0052      	lsls	r2, r2, #1
 800177c:	441a      	add	r2, r3
 800177e:	460b      	mov	r3, r1
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	1a5b      	subs	r3, r3, r1
 8001784:	4413      	add	r3, r2
 8001786:	4403      	add	r3, r0
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = false;
 800178c:	4a68      	ldr	r2, [pc, #416]	; (8001930 <D_Slider_LightingUpdate+0x674>)
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	4413      	add	r3, r2
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4861      	ldr	r0, [pc, #388]	; (800191c <D_Slider_LightingUpdate+0x660>)
 8001796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001798:	461a      	mov	r2, r3
 800179a:	0052      	lsls	r2, r2, #1
 800179c:	441a      	add	r2, r3
 800179e:	460b      	mov	r3, r1
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	1a5b      	subs	r3, r3, r1
 80017a4:	4413      	add	r3, r2
 80017a6:	4403      	add	r3, r0
 80017a8:	3301      	adds	r3, #1
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = false;
 80017ae:	4a60      	ldr	r2, [pc, #384]	; (8001930 <D_Slider_LightingUpdate+0x674>)
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4859      	ldr	r0, [pc, #356]	; (800191c <D_Slider_LightingUpdate+0x660>)
 80017b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ba:	461a      	mov	r2, r3
 80017bc:	0052      	lsls	r2, r2, #1
 80017be:	441a      	add	r2, r3
 80017c0:	460b      	mov	r3, r1
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	1a5b      	subs	r3, r3, r1
 80017c6:	4413      	add	r3, r2
 80017c8:	4403      	add	r3, r0
 80017ca:	3302      	adds	r3, #2
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 200 && updateCount[side] < 375 && !_animUpdate_1[side]){
 80017d0:	4a54      	ldr	r2, [pc, #336]	; (8001924 <D_Slider_LightingUpdate+0x668>)
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d8:	2bc7      	cmp	r3, #199	; 0xc7
 80017da:	dd4b      	ble.n	8001874 <D_Slider_LightingUpdate+0x5b8>
 80017dc:	4a51      	ldr	r2, [pc, #324]	; (8001924 <D_Slider_LightingUpdate+0x668>)
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 80017e8:	dc44      	bgt.n	8001874 <D_Slider_LightingUpdate+0x5b8>
 80017ea:	4a4f      	ldr	r2, [pc, #316]	; (8001928 <D_Slider_LightingUpdate+0x66c>)
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	f083 0301 	eor.w	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d03b      	beq.n	8001874 <D_Slider_LightingUpdate+0x5b8>
				_animUpdate_1[side] = true;
 80017fc:	4a4a      	ldr	r2, [pc, #296]	; (8001928 <D_Slider_LightingUpdate+0x66c>)
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	4413      	add	r3, r2
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8001806:	4a49      	ldr	r2, [pc, #292]	; (800192c <D_Slider_LightingUpdate+0x670>)
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	4413      	add	r3, r2
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8001810:	4a47      	ldr	r2, [pc, #284]	; (8001930 <D_Slider_LightingUpdate+0x674>)
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	4413      	add	r3, r2
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4840      	ldr	r0, [pc, #256]	; (800191c <D_Slider_LightingUpdate+0x660>)
 800181a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800181c:	461a      	mov	r2, r3
 800181e:	0052      	lsls	r2, r2, #1
 8001820:	441a      	add	r2, r3
 8001822:	460b      	mov	r3, r1
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	1a5b      	subs	r3, r3, r1
 8001828:	4413      	add	r3, r2
 800182a:	4403      	add	r3, r0
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001830:	4a3f      	ldr	r2, [pc, #252]	; (8001930 <D_Slider_LightingUpdate+0x674>)
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	4413      	add	r3, r2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4838      	ldr	r0, [pc, #224]	; (800191c <D_Slider_LightingUpdate+0x660>)
 800183a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800183c:	461a      	mov	r2, r3
 800183e:	0052      	lsls	r2, r2, #1
 8001840:	441a      	add	r2, r3
 8001842:	460b      	mov	r3, r1
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	1a5b      	subs	r3, r3, r1
 8001848:	4413      	add	r3, r2
 800184a:	4403      	add	r3, r0
 800184c:	3301      	adds	r3, #1
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001852:	4a37      	ldr	r2, [pc, #220]	; (8001930 <D_Slider_LightingUpdate+0x674>)
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	4830      	ldr	r0, [pc, #192]	; (800191c <D_Slider_LightingUpdate+0x660>)
 800185c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800185e:	461a      	mov	r2, r3
 8001860:	0052      	lsls	r2, r2, #1
 8001862:	441a      	add	r2, r3
 8001864:	460b      	mov	r3, r1
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	1a5b      	subs	r3, r3, r1
 800186a:	4413      	add	r3, r2
 800186c:	4403      	add	r3, r0
 800186e:	3302      	adds	r3, #2
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 375 &&updateCount[side] < 475 && !_animUpdate_2[side]){
 8001874:	4a2b      	ldr	r2, [pc, #172]	; (8001924 <D_Slider_LightingUpdate+0x668>)
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 8001880:	dd58      	ble.n	8001934 <D_Slider_LightingUpdate+0x678>
 8001882:	4a28      	ldr	r2, [pc, #160]	; (8001924 <D_Slider_LightingUpdate+0x668>)
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 800188e:	dc51      	bgt.n	8001934 <D_Slider_LightingUpdate+0x678>
 8001890:	4a26      	ldr	r2, [pc, #152]	; (800192c <D_Slider_LightingUpdate+0x670>)
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	f083 0301 	eor.w	r3, r3, #1
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d048      	beq.n	8001934 <D_Slider_LightingUpdate+0x678>
				_animUpdate_1[side] = false;
 80018a2:	4a21      	ldr	r2, [pc, #132]	; (8001928 <D_Slider_LightingUpdate+0x66c>)
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	4413      	add	r3, r2
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 80018ac:	4a1f      	ldr	r2, [pc, #124]	; (800192c <D_Slider_LightingUpdate+0x670>)
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	4413      	add	r3, r2
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 80018b6:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <D_Slider_LightingUpdate+0x674>)
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	4413      	add	r3, r2
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4817      	ldr	r0, [pc, #92]	; (800191c <D_Slider_LightingUpdate+0x660>)
 80018c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018c2:	461a      	mov	r2, r3
 80018c4:	0052      	lsls	r2, r2, #1
 80018c6:	441a      	add	r2, r3
 80018c8:	460b      	mov	r3, r1
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	1a5b      	subs	r3, r3, r1
 80018ce:	4413      	add	r3, r2
 80018d0:	4403      	add	r3, r0
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = false;
 80018d6:	4a16      	ldr	r2, [pc, #88]	; (8001930 <D_Slider_LightingUpdate+0x674>)
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	4413      	add	r3, r2
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	480f      	ldr	r0, [pc, #60]	; (800191c <D_Slider_LightingUpdate+0x660>)
 80018e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018e2:	461a      	mov	r2, r3
 80018e4:	0052      	lsls	r2, r2, #1
 80018e6:	441a      	add	r2, r3
 80018e8:	460b      	mov	r3, r1
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	1a5b      	subs	r3, r3, r1
 80018ee:	4413      	add	r3, r2
 80018f0:	4403      	add	r3, r0
 80018f2:	3301      	adds	r3, #1
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = false;
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <D_Slider_LightingUpdate+0x674>)
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4806      	ldr	r0, [pc, #24]	; (800191c <D_Slider_LightingUpdate+0x660>)
 8001902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001904:	461a      	mov	r2, r3
 8001906:	0052      	lsls	r2, r2, #1
 8001908:	441a      	add	r2, r3
 800190a:	460b      	mov	r3, r1
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	1a5b      	subs	r3, r3, r1
 8001910:	4413      	add	r3, r2
 8001912:	4403      	add	r3, r0
 8001914:	3302      	adds	r3, #2
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
 800191a:	e00b      	b.n	8001934 <D_Slider_LightingUpdate+0x678>
 800191c:	20000314 	.word	0x20000314
 8001920:	20000308 	.word	0x20000308
 8001924:	200002f4 	.word	0x200002f4
 8001928:	2000030c 	.word	0x2000030c
 800192c:	20000310 	.word	0x20000310
 8001930:	200002e0 	.word	0x200002e0
			}
			if(updateCount[side] >= 475 &&updateCount[side] < 650 && !_animUpdate_1[side]){
 8001934:	4a35      	ldr	r2, [pc, #212]	; (8001a0c <D_Slider_LightingUpdate+0x750>)
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193c:	f5b3 7fed 	cmp.w	r3, #474	; 0x1da
 8001940:	dd4c      	ble.n	80019dc <D_Slider_LightingUpdate+0x720>
 8001942:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <D_Slider_LightingUpdate+0x750>)
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194a:	f240 2289 	movw	r2, #649	; 0x289
 800194e:	4293      	cmp	r3, r2
 8001950:	dc44      	bgt.n	80019dc <D_Slider_LightingUpdate+0x720>
 8001952:	4a2f      	ldr	r2, [pc, #188]	; (8001a10 <D_Slider_LightingUpdate+0x754>)
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	f083 0301 	eor.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d03b      	beq.n	80019dc <D_Slider_LightingUpdate+0x720>
				_animUpdate_1[side] = true;
 8001964:	4a2a      	ldr	r2, [pc, #168]	; (8001a10 <D_Slider_LightingUpdate+0x754>)
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	4413      	add	r3, r2
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 800196e:	4a29      	ldr	r2, [pc, #164]	; (8001a14 <D_Slider_LightingUpdate+0x758>)
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	4413      	add	r3, r2
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8001978:	4a27      	ldr	r2, [pc, #156]	; (8001a18 <D_Slider_LightingUpdate+0x75c>)
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	4413      	add	r3, r2
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4826      	ldr	r0, [pc, #152]	; (8001a1c <D_Slider_LightingUpdate+0x760>)
 8001982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001984:	461a      	mov	r2, r3
 8001986:	0052      	lsls	r2, r2, #1
 8001988:	441a      	add	r2, r3
 800198a:	460b      	mov	r3, r1
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	1a5b      	subs	r3, r3, r1
 8001990:	4413      	add	r3, r2
 8001992:	4403      	add	r3, r0
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001998:	4a1f      	ldr	r2, [pc, #124]	; (8001a18 <D_Slider_LightingUpdate+0x75c>)
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	4413      	add	r3, r2
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	481e      	ldr	r0, [pc, #120]	; (8001a1c <D_Slider_LightingUpdate+0x760>)
 80019a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019a4:	461a      	mov	r2, r3
 80019a6:	0052      	lsls	r2, r2, #1
 80019a8:	441a      	add	r2, r3
 80019aa:	460b      	mov	r3, r1
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	1a5b      	subs	r3, r3, r1
 80019b0:	4413      	add	r3, r2
 80019b2:	4403      	add	r3, r0
 80019b4:	3301      	adds	r3, #1
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 80019ba:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <D_Slider_LightingUpdate+0x75c>)
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	4816      	ldr	r0, [pc, #88]	; (8001a1c <D_Slider_LightingUpdate+0x760>)
 80019c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019c6:	461a      	mov	r2, r3
 80019c8:	0052      	lsls	r2, r2, #1
 80019ca:	441a      	add	r2, r3
 80019cc:	460b      	mov	r3, r1
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	1a5b      	subs	r3, r3, r1
 80019d2:	4413      	add	r3, r2
 80019d4:	4403      	add	r3, r0
 80019d6:	3302      	adds	r3, #2
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
			}

			if(updateCount[side] > 650) LightingMode[side] = SL_NORMAL_FLASH;
 80019dc:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <D_Slider_LightingUpdate+0x750>)
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	f240 228a 	movw	r2, #650	; 0x28a
 80019e8:	4293      	cmp	r3, r2
 80019ea:	f340 83d8 	ble.w	800219e <D_Slider_LightingUpdate+0xee2>
 80019ee:	4a0c      	ldr	r2, [pc, #48]	; (8001a20 <D_Slider_LightingUpdate+0x764>)
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	4413      	add	r3, r2
 80019f4:	2202      	movs	r2, #2
 80019f6:	701a      	strb	r2, [r3, #0]

			break;
 80019f8:	e3d1      	b.n	800219e <D_Slider_LightingUpdate+0xee2>

		case SL_POCKET_IN_DIA:
			if(_changeMode[side]){
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <D_Slider_LightingUpdate+0x768>)
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	4413      	add	r3, r2
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d044      	beq.n	8001a90 <D_Slider_LightingUpdate+0x7d4>
				for(int i=0; i<5; i++){
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e039      	b.n	8001a80 <D_Slider_LightingUpdate+0x7c4>
 8001a0c:	200002f4 	.word	0x200002f4
 8001a10:	2000030c 	.word	0x2000030c
 8001a14:	20000310 	.word	0x20000310
 8001a18:	200002e0 	.word	0x200002e0
 8001a1c:	20000314 	.word	0x20000314
 8001a20:	200002dc 	.word	0x200002dc
 8001a24:	20000308 	.word	0x20000308
					slideColor[side][i][0] = false;
 8001a28:	48ba      	ldr	r0, [pc, #744]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a2e:	461a      	mov	r2, r3
 8001a30:	0052      	lsls	r2, r2, #1
 8001a32:	441a      	add	r2, r3
 8001a34:	460b      	mov	r3, r1
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	1a5b      	subs	r3, r3, r1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4403      	add	r3, r0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 8001a42:	48b4      	ldr	r0, [pc, #720]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a48:	461a      	mov	r2, r3
 8001a4a:	0052      	lsls	r2, r2, #1
 8001a4c:	441a      	add	r2, r3
 8001a4e:	460b      	mov	r3, r1
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	1a5b      	subs	r3, r3, r1
 8001a54:	4413      	add	r3, r2
 8001a56:	4403      	add	r3, r0
 8001a58:	3301      	adds	r3, #1
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 8001a5e:	48ad      	ldr	r0, [pc, #692]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a64:	461a      	mov	r2, r3
 8001a66:	0052      	lsls	r2, r2, #1
 8001a68:	441a      	add	r2, r3
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	1a5b      	subs	r3, r3, r1
 8001a70:	4413      	add	r3, r2
 8001a72:	4403      	add	r3, r0
 8001a74:	3302      	adds	r3, #2
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	ddd0      	ble.n	8001a28 <D_Slider_LightingUpdate+0x76c>
				}
				_changeMode[side] = false;
 8001a86:	4aa4      	ldr	r2, [pc, #656]	; (8001d18 <D_Slider_LightingUpdate+0xa5c>)
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	4413      	add	r3, r2
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] < 100 && !_animUpdate_1[side]){
 8001a90:	4aa2      	ldr	r2, [pc, #648]	; (8001d1c <D_Slider_LightingUpdate+0xa60>)
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a98:	2b63      	cmp	r3, #99	; 0x63
 8001a9a:	dc44      	bgt.n	8001b26 <D_Slider_LightingUpdate+0x86a>
 8001a9c:	4aa0      	ldr	r2, [pc, #640]	; (8001d20 <D_Slider_LightingUpdate+0xa64>)
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	f083 0301 	eor.w	r3, r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d03b      	beq.n	8001b26 <D_Slider_LightingUpdate+0x86a>
				_animUpdate_1[side] = true;
 8001aae:	4a9c      	ldr	r2, [pc, #624]	; (8001d20 <D_Slider_LightingUpdate+0xa64>)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	4413      	add	r3, r2
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8001ab8:	4a9a      	ldr	r2, [pc, #616]	; (8001d24 <D_Slider_LightingUpdate+0xa68>)
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	4413      	add	r3, r2
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8001ac2:	4a99      	ldr	r2, [pc, #612]	; (8001d28 <D_Slider_LightingUpdate+0xa6c>)
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	4413      	add	r3, r2
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	4892      	ldr	r0, [pc, #584]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ace:	461a      	mov	r2, r3
 8001ad0:	0052      	lsls	r2, r2, #1
 8001ad2:	441a      	add	r2, r3
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	1a5b      	subs	r3, r3, r1
 8001ada:	4413      	add	r3, r2
 8001adc:	4403      	add	r3, r0
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001ae2:	4a91      	ldr	r2, [pc, #580]	; (8001d28 <D_Slider_LightingUpdate+0xa6c>)
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	488a      	ldr	r0, [pc, #552]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aee:	461a      	mov	r2, r3
 8001af0:	0052      	lsls	r2, r2, #1
 8001af2:	441a      	add	r2, r3
 8001af4:	460b      	mov	r3, r1
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	1a5b      	subs	r3, r3, r1
 8001afa:	4413      	add	r3, r2
 8001afc:	4403      	add	r3, r0
 8001afe:	3301      	adds	r3, #1
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001b04:	4a88      	ldr	r2, [pc, #544]	; (8001d28 <D_Slider_LightingUpdate+0xa6c>)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	4413      	add	r3, r2
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4881      	ldr	r0, [pc, #516]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b10:	461a      	mov	r2, r3
 8001b12:	0052      	lsls	r2, r2, #1
 8001b14:	441a      	add	r2, r3
 8001b16:	460b      	mov	r3, r1
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	1a5b      	subs	r3, r3, r1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4403      	add	r3, r0
 8001b20:	3302      	adds	r3, #2
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 100 && updateCount[side] < 180 && !_animUpdate_2[side]){
 8001b26:	4a7d      	ldr	r2, [pc, #500]	; (8001d1c <D_Slider_LightingUpdate+0xa60>)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	2b63      	cmp	r3, #99	; 0x63
 8001b30:	dd4a      	ble.n	8001bc8 <D_Slider_LightingUpdate+0x90c>
 8001b32:	4a7a      	ldr	r2, [pc, #488]	; (8001d1c <D_Slider_LightingUpdate+0xa60>)
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	2bb3      	cmp	r3, #179	; 0xb3
 8001b3c:	dc44      	bgt.n	8001bc8 <D_Slider_LightingUpdate+0x90c>
 8001b3e:	4a79      	ldr	r2, [pc, #484]	; (8001d24 <D_Slider_LightingUpdate+0xa68>)
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	f083 0301 	eor.w	r3, r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d03b      	beq.n	8001bc8 <D_Slider_LightingUpdate+0x90c>
				_animUpdate_1[side] = false;
 8001b50:	4a73      	ldr	r2, [pc, #460]	; (8001d20 <D_Slider_LightingUpdate+0xa64>)
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	4413      	add	r3, r2
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8001b5a:	4a72      	ldr	r2, [pc, #456]	; (8001d24 <D_Slider_LightingUpdate+0xa68>)
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	4413      	add	r3, r2
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8001b64:	4a70      	ldr	r2, [pc, #448]	; (8001d28 <D_Slider_LightingUpdate+0xa6c>)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	4413      	add	r3, r2
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4869      	ldr	r0, [pc, #420]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b70:	461a      	mov	r2, r3
 8001b72:	0052      	lsls	r2, r2, #1
 8001b74:	441a      	add	r2, r3
 8001b76:	460b      	mov	r3, r1
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	1a5b      	subs	r3, r3, r1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4403      	add	r3, r0
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001b84:	4a68      	ldr	r2, [pc, #416]	; (8001d28 <D_Slider_LightingUpdate+0xa6c>)
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	4413      	add	r3, r2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4861      	ldr	r0, [pc, #388]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b90:	461a      	mov	r2, r3
 8001b92:	0052      	lsls	r2, r2, #1
 8001b94:	441a      	add	r2, r3
 8001b96:	460b      	mov	r3, r1
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	1a5b      	subs	r3, r3, r1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4403      	add	r3, r0
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001ba6:	4a60      	ldr	r2, [pc, #384]	; (8001d28 <D_Slider_LightingUpdate+0xa6c>)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	4413      	add	r3, r2
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	4859      	ldr	r0, [pc, #356]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001bb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	0052      	lsls	r2, r2, #1
 8001bb6:	441a      	add	r2, r3
 8001bb8:	460b      	mov	r3, r1
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a5b      	subs	r3, r3, r1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4403      	add	r3, r0
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 180 && updateCount[side] < 300 && !_animUpdate_1[side]){
 8001bc8:	4a54      	ldr	r2, [pc, #336]	; (8001d1c <D_Slider_LightingUpdate+0xa60>)
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	2bb3      	cmp	r3, #179	; 0xb3
 8001bd2:	dd4b      	ble.n	8001c6c <D_Slider_LightingUpdate+0x9b0>
 8001bd4:	4a51      	ldr	r2, [pc, #324]	; (8001d1c <D_Slider_LightingUpdate+0xa60>)
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001be0:	da44      	bge.n	8001c6c <D_Slider_LightingUpdate+0x9b0>
 8001be2:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <D_Slider_LightingUpdate+0xa64>)
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	f083 0301 	eor.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d03b      	beq.n	8001c6c <D_Slider_LightingUpdate+0x9b0>
				_animUpdate_1[side] = true;
 8001bf4:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <D_Slider_LightingUpdate+0xa64>)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	4413      	add	r3, r2
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8001bfe:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <D_Slider_LightingUpdate+0xa68>)
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	4413      	add	r3, r2
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8001c08:	4a47      	ldr	r2, [pc, #284]	; (8001d28 <D_Slider_LightingUpdate+0xa6c>)
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	4413      	add	r3, r2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4840      	ldr	r0, [pc, #256]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c14:	461a      	mov	r2, r3
 8001c16:	0052      	lsls	r2, r2, #1
 8001c18:	441a      	add	r2, r3
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	1a5b      	subs	r3, r3, r1
 8001c20:	4413      	add	r3, r2
 8001c22:	4403      	add	r3, r0
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001c28:	4a3f      	ldr	r2, [pc, #252]	; (8001d28 <D_Slider_LightingUpdate+0xa6c>)
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4838      	ldr	r0, [pc, #224]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001c32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c34:	461a      	mov	r2, r3
 8001c36:	0052      	lsls	r2, r2, #1
 8001c38:	441a      	add	r2, r3
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	1a5b      	subs	r3, r3, r1
 8001c40:	4413      	add	r3, r2
 8001c42:	4403      	add	r3, r0
 8001c44:	3301      	adds	r3, #1
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001c4a:	4a37      	ldr	r2, [pc, #220]	; (8001d28 <D_Slider_LightingUpdate+0xa6c>)
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	4413      	add	r3, r2
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	4830      	ldr	r0, [pc, #192]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c56:	461a      	mov	r2, r3
 8001c58:	0052      	lsls	r2, r2, #1
 8001c5a:	441a      	add	r2, r3
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	1a5b      	subs	r3, r3, r1
 8001c62:	4413      	add	r3, r2
 8001c64:	4403      	add	r3, r0
 8001c66:	3302      	adds	r3, #2
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 300 &&updateCount[side] < 380 && !_animUpdate_2[side]){
 8001c6c:	4a2b      	ldr	r2, [pc, #172]	; (8001d1c <D_Slider_LightingUpdate+0xa60>)
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c74:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c78:	db58      	blt.n	8001d2c <D_Slider_LightingUpdate+0xa70>
 8001c7a:	4a28      	ldr	r2, [pc, #160]	; (8001d1c <D_Slider_LightingUpdate+0xa60>)
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8001c86:	da51      	bge.n	8001d2c <D_Slider_LightingUpdate+0xa70>
 8001c88:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <D_Slider_LightingUpdate+0xa68>)
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	4413      	add	r3, r2
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	f083 0301 	eor.w	r3, r3, #1
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d048      	beq.n	8001d2c <D_Slider_LightingUpdate+0xa70>
				_animUpdate_1[side] = false;
 8001c9a:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <D_Slider_LightingUpdate+0xa64>)
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	4413      	add	r3, r2
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8001ca4:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <D_Slider_LightingUpdate+0xa68>)
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	4413      	add	r3, r2
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8001cae:	4a1e      	ldr	r2, [pc, #120]	; (8001d28 <D_Slider_LightingUpdate+0xa6c>)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	4413      	add	r3, r2
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	4817      	ldr	r0, [pc, #92]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cba:	461a      	mov	r2, r3
 8001cbc:	0052      	lsls	r2, r2, #1
 8001cbe:	441a      	add	r2, r3
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	1a5b      	subs	r3, r3, r1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4403      	add	r3, r0
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001cce:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <D_Slider_LightingUpdate+0xa6c>)
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	480f      	ldr	r0, [pc, #60]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cda:	461a      	mov	r2, r3
 8001cdc:	0052      	lsls	r2, r2, #1
 8001cde:	441a      	add	r2, r3
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	1a5b      	subs	r3, r3, r1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4403      	add	r3, r0
 8001cea:	3301      	adds	r3, #1
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <D_Slider_LightingUpdate+0xa6c>)
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4806      	ldr	r0, [pc, #24]	; (8001d14 <D_Slider_LightingUpdate+0xa58>)
 8001cfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	0052      	lsls	r2, r2, #1
 8001d00:	441a      	add	r2, r3
 8001d02:	460b      	mov	r3, r1
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	1a5b      	subs	r3, r3, r1
 8001d08:	4413      	add	r3, r2
 8001d0a:	4403      	add	r3, r0
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e00b      	b.n	8001d2c <D_Slider_LightingUpdate+0xa70>
 8001d14:	20000314 	.word	0x20000314
 8001d18:	20000308 	.word	0x20000308
 8001d1c:	200002f4 	.word	0x200002f4
 8001d20:	2000030c 	.word	0x2000030c
 8001d24:	20000310 	.word	0x20000310
 8001d28:	200002e0 	.word	0x200002e0
			}
			if(updateCount[side] >= 380 &&updateCount[side] < 500 && !_animUpdate_1[side]){
 8001d2c:	4a87      	ldr	r2, [pc, #540]	; (8001f4c <D_Slider_LightingUpdate+0xc90>)
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
 8001d38:	db4b      	blt.n	8001dd2 <D_Slider_LightingUpdate+0xb16>
 8001d3a:	4a84      	ldr	r2, [pc, #528]	; (8001f4c <D_Slider_LightingUpdate+0xc90>)
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d46:	da44      	bge.n	8001dd2 <D_Slider_LightingUpdate+0xb16>
 8001d48:	4a81      	ldr	r2, [pc, #516]	; (8001f50 <D_Slider_LightingUpdate+0xc94>)
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	4413      	add	r3, r2
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	f083 0301 	eor.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d03b      	beq.n	8001dd2 <D_Slider_LightingUpdate+0xb16>
				_animUpdate_1[side] = true;
 8001d5a:	4a7d      	ldr	r2, [pc, #500]	; (8001f50 <D_Slider_LightingUpdate+0xc94>)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	4413      	add	r3, r2
 8001d60:	2201      	movs	r2, #1
 8001d62:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8001d64:	4a7b      	ldr	r2, [pc, #492]	; (8001f54 <D_Slider_LightingUpdate+0xc98>)
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	4413      	add	r3, r2
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8001d6e:	4a7a      	ldr	r2, [pc, #488]	; (8001f58 <D_Slider_LightingUpdate+0xc9c>)
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	4413      	add	r3, r2
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	4879      	ldr	r0, [pc, #484]	; (8001f5c <D_Slider_LightingUpdate+0xca0>)
 8001d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	0052      	lsls	r2, r2, #1
 8001d7e:	441a      	add	r2, r3
 8001d80:	460b      	mov	r3, r1
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	1a5b      	subs	r3, r3, r1
 8001d86:	4413      	add	r3, r2
 8001d88:	4403      	add	r3, r0
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001d8e:	4a72      	ldr	r2, [pc, #456]	; (8001f58 <D_Slider_LightingUpdate+0xc9c>)
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	4413      	add	r3, r2
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	4871      	ldr	r0, [pc, #452]	; (8001f5c <D_Slider_LightingUpdate+0xca0>)
 8001d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	0052      	lsls	r2, r2, #1
 8001d9e:	441a      	add	r2, r3
 8001da0:	460b      	mov	r3, r1
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	1a5b      	subs	r3, r3, r1
 8001da6:	4413      	add	r3, r2
 8001da8:	4403      	add	r3, r0
 8001daa:	3301      	adds	r3, #1
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001db0:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <D_Slider_LightingUpdate+0xc9c>)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4868      	ldr	r0, [pc, #416]	; (8001f5c <D_Slider_LightingUpdate+0xca0>)
 8001dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	0052      	lsls	r2, r2, #1
 8001dc0:	441a      	add	r2, r3
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a5b      	subs	r3, r3, r1
 8001dc8:	4413      	add	r3, r2
 8001dca:	4403      	add	r3, r0
 8001dcc:	3302      	adds	r3, #2
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 500 &&updateCount[side] < 580 && !_animUpdate_2[side]){
 8001dd2:	4a5e      	ldr	r2, [pc, #376]	; (8001f4c <D_Slider_LightingUpdate+0xc90>)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dde:	db4b      	blt.n	8001e78 <D_Slider_LightingUpdate+0xbbc>
 8001de0:	4a5a      	ldr	r2, [pc, #360]	; (8001f4c <D_Slider_LightingUpdate+0xc90>)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de8:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8001dec:	da44      	bge.n	8001e78 <D_Slider_LightingUpdate+0xbbc>
 8001dee:	4a59      	ldr	r2, [pc, #356]	; (8001f54 <D_Slider_LightingUpdate+0xc98>)
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	4413      	add	r3, r2
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	f083 0301 	eor.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d03b      	beq.n	8001e78 <D_Slider_LightingUpdate+0xbbc>
				_animUpdate_1[side] = false;
 8001e00:	4a53      	ldr	r2, [pc, #332]	; (8001f50 <D_Slider_LightingUpdate+0xc94>)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	4413      	add	r3, r2
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 8001e0a:	4a52      	ldr	r2, [pc, #328]	; (8001f54 <D_Slider_LightingUpdate+0xc98>)
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	4413      	add	r3, r2
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8001e14:	4a50      	ldr	r2, [pc, #320]	; (8001f58 <D_Slider_LightingUpdate+0xc9c>)
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	4413      	add	r3, r2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	484f      	ldr	r0, [pc, #316]	; (8001f5c <D_Slider_LightingUpdate+0xca0>)
 8001e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e20:	461a      	mov	r2, r3
 8001e22:	0052      	lsls	r2, r2, #1
 8001e24:	441a      	add	r2, r3
 8001e26:	460b      	mov	r3, r1
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	1a5b      	subs	r3, r3, r1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4403      	add	r3, r0
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001e34:	4a48      	ldr	r2, [pc, #288]	; (8001f58 <D_Slider_LightingUpdate+0xc9c>)
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	4413      	add	r3, r2
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4847      	ldr	r0, [pc, #284]	; (8001f5c <D_Slider_LightingUpdate+0xca0>)
 8001e3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e40:	461a      	mov	r2, r3
 8001e42:	0052      	lsls	r2, r2, #1
 8001e44:	441a      	add	r2, r3
 8001e46:	460b      	mov	r3, r1
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	1a5b      	subs	r3, r3, r1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4403      	add	r3, r0
 8001e50:	3301      	adds	r3, #1
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001e56:	4a40      	ldr	r2, [pc, #256]	; (8001f58 <D_Slider_LightingUpdate+0xc9c>)
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	4413      	add	r3, r2
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	483f      	ldr	r0, [pc, #252]	; (8001f5c <D_Slider_LightingUpdate+0xca0>)
 8001e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e62:	461a      	mov	r2, r3
 8001e64:	0052      	lsls	r2, r2, #1
 8001e66:	441a      	add	r2, r3
 8001e68:	460b      	mov	r3, r1
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	1a5b      	subs	r3, r3, r1
 8001e6e:	4413      	add	r3, r2
 8001e70:	4403      	add	r3, r0
 8001e72:	3302      	adds	r3, #2
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 580 &&updateCount[side] < 700 && !_animUpdate_1[side]){
 8001e78:	4a34      	ldr	r2, [pc, #208]	; (8001f4c <D_Slider_LightingUpdate+0xc90>)
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e80:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8001e84:	db4b      	blt.n	8001f1e <D_Slider_LightingUpdate+0xc62>
 8001e86:	4a31      	ldr	r2, [pc, #196]	; (8001f4c <D_Slider_LightingUpdate+0xc90>)
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001e92:	da44      	bge.n	8001f1e <D_Slider_LightingUpdate+0xc62>
 8001e94:	4a2e      	ldr	r2, [pc, #184]	; (8001f50 <D_Slider_LightingUpdate+0xc94>)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	f083 0301 	eor.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d03b      	beq.n	8001f1e <D_Slider_LightingUpdate+0xc62>
				_animUpdate_1[side] = true;
 8001ea6:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <D_Slider_LightingUpdate+0xc94>)
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	4413      	add	r3, r2
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8001eb0:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <D_Slider_LightingUpdate+0xc98>)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	4413      	add	r3, r2
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = true;
 8001eba:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <D_Slider_LightingUpdate+0xc9c>)
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	4413      	add	r3, r2
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	4826      	ldr	r0, [pc, #152]	; (8001f5c <D_Slider_LightingUpdate+0xca0>)
 8001ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	0052      	lsls	r2, r2, #1
 8001eca:	441a      	add	r2, r3
 8001ecc:	460b      	mov	r3, r1
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	1a5b      	subs	r3, r3, r1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	4403      	add	r3, r0
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 8001eda:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <D_Slider_LightingUpdate+0xc9c>)
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	481e      	ldr	r0, [pc, #120]	; (8001f5c <D_Slider_LightingUpdate+0xca0>)
 8001ee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	0052      	lsls	r2, r2, #1
 8001eea:	441a      	add	r2, r3
 8001eec:	460b      	mov	r3, r1
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a5b      	subs	r3, r3, r1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4403      	add	r3, r0
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 8001efc:	4a16      	ldr	r2, [pc, #88]	; (8001f58 <D_Slider_LightingUpdate+0xc9c>)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4815      	ldr	r0, [pc, #84]	; (8001f5c <D_Slider_LightingUpdate+0xca0>)
 8001f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f08:	461a      	mov	r2, r3
 8001f0a:	0052      	lsls	r2, r2, #1
 8001f0c:	441a      	add	r2, r3
 8001f0e:	460b      	mov	r3, r1
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	1a5b      	subs	r3, r3, r1
 8001f14:	4413      	add	r3, r2
 8001f16:	4403      	add	r3, r0
 8001f18:	3302      	adds	r3, #2
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
			}

			if(updateCount[side] > 700) LightingMode[side] = SL_NORMAL_FLASH;
 8001f1e:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <D_Slider_LightingUpdate+0xc90>)
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f26:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001f2a:	f340 813a 	ble.w	80021a2 <D_Slider_LightingUpdate+0xee6>
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <D_Slider_LightingUpdate+0xca4>)
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	4413      	add	r3, r2
 8001f34:	2202      	movs	r2, #2
 8001f36:	701a      	strb	r2, [r3, #0]

			break;
 8001f38:	e133      	b.n	80021a2 <D_Slider_LightingUpdate+0xee6>

		case SL_POCKET_IN_UP:
			if(_changeMode[side]){
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <D_Slider_LightingUpdate+0xca8>)
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d049      	beq.n	8001fda <D_Slider_LightingUpdate+0xd1e>
				for(int i=0; i<5; i++){
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	e039      	b.n	8001fc0 <D_Slider_LightingUpdate+0xd04>
 8001f4c:	200002f4 	.word	0x200002f4
 8001f50:	2000030c 	.word	0x2000030c
 8001f54:	20000310 	.word	0x20000310
 8001f58:	200002e0 	.word	0x200002e0
 8001f5c:	20000314 	.word	0x20000314
 8001f60:	200002dc 	.word	0x200002dc
 8001f64:	20000308 	.word	0x20000308
					slideColor[side][i][0] = false;
 8001f68:	4899      	ldr	r0, [pc, #612]	; (80021d0 <D_Slider_LightingUpdate+0xf14>)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f6e:	461a      	mov	r2, r3
 8001f70:	0052      	lsls	r2, r2, #1
 8001f72:	441a      	add	r2, r3
 8001f74:	460b      	mov	r3, r1
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	1a5b      	subs	r3, r3, r1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4403      	add	r3, r0
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][1] = false;
 8001f82:	4893      	ldr	r0, [pc, #588]	; (80021d0 <D_Slider_LightingUpdate+0xf14>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f88:	461a      	mov	r2, r3
 8001f8a:	0052      	lsls	r2, r2, #1
 8001f8c:	441a      	add	r2, r3
 8001f8e:	460b      	mov	r3, r1
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	1a5b      	subs	r3, r3, r1
 8001f94:	4413      	add	r3, r2
 8001f96:	4403      	add	r3, r0
 8001f98:	3301      	adds	r3, #1
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
					slideColor[side][i][2] = false;
 8001f9e:	488c      	ldr	r0, [pc, #560]	; (80021d0 <D_Slider_LightingUpdate+0xf14>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	0052      	lsls	r2, r2, #1
 8001fa8:	441a      	add	r2, r3
 8001faa:	460b      	mov	r3, r1
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	1a5b      	subs	r3, r3, r1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4403      	add	r3, r0
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++){
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	ddd0      	ble.n	8001f68 <D_Slider_LightingUpdate+0xcac>
				}
				_changeMode[side] = false;
 8001fc6:	4a83      	ldr	r2, [pc, #524]	; (80021d4 <D_Slider_LightingUpdate+0xf18>)
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	4413      	add	r3, r2
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
				counter1[side] = 0;
 8001fd0:	4a81      	ldr	r2, [pc, #516]	; (80021d8 <D_Slider_LightingUpdate+0xf1c>)
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			if(updateCount[side] >= 100 + counter1[side]*200 && updateCount[side] < 180 + counter1[side]*200 && !_animUpdate_1[side]){
 8001fda:	4a7f      	ldr	r2, [pc, #508]	; (80021d8 <D_Slider_LightingUpdate+0xf1c>)
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	22c8      	movs	r2, #200	; 0xc8
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8001fec:	497b      	ldr	r1, [pc, #492]	; (80021dc <D_Slider_LightingUpdate+0xf20>)
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	da53      	bge.n	80020a0 <D_Slider_LightingUpdate+0xde4>
 8001ff8:	4a77      	ldr	r2, [pc, #476]	; (80021d8 <D_Slider_LightingUpdate+0xf1c>)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002000:	22c8      	movs	r2, #200	; 0xc8
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 800200a:	4974      	ldr	r1, [pc, #464]	; (80021dc <D_Slider_LightingUpdate+0xf20>)
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002012:	429a      	cmp	r2, r3
 8002014:	db44      	blt.n	80020a0 <D_Slider_LightingUpdate+0xde4>
 8002016:	4a72      	ldr	r2, [pc, #456]	; (80021e0 <D_Slider_LightingUpdate+0xf24>)
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	4413      	add	r3, r2
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	f083 0301 	eor.w	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d03b      	beq.n	80020a0 <D_Slider_LightingUpdate+0xde4>
				_animUpdate_1[side] = true;
 8002028:	4a6d      	ldr	r2, [pc, #436]	; (80021e0 <D_Slider_LightingUpdate+0xf24>)
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	4413      	add	r3, r2
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = false;
 8002032:	4a6c      	ldr	r2, [pc, #432]	; (80021e4 <D_Slider_LightingUpdate+0xf28>)
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	4413      	add	r3, r2
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 800203c:	4a6a      	ldr	r2, [pc, #424]	; (80021e8 <D_Slider_LightingUpdate+0xf2c>)
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	4413      	add	r3, r2
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4862      	ldr	r0, [pc, #392]	; (80021d0 <D_Slider_LightingUpdate+0xf14>)
 8002046:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002048:	461a      	mov	r2, r3
 800204a:	0052      	lsls	r2, r2, #1
 800204c:	441a      	add	r2, r3
 800204e:	460b      	mov	r3, r1
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	1a5b      	subs	r3, r3, r1
 8002054:	4413      	add	r3, r2
 8002056:	4403      	add	r3, r0
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = true;
 800205c:	4a62      	ldr	r2, [pc, #392]	; (80021e8 <D_Slider_LightingUpdate+0xf2c>)
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	485a      	ldr	r0, [pc, #360]	; (80021d0 <D_Slider_LightingUpdate+0xf14>)
 8002066:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002068:	461a      	mov	r2, r3
 800206a:	0052      	lsls	r2, r2, #1
 800206c:	441a      	add	r2, r3
 800206e:	460b      	mov	r3, r1
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	1a5b      	subs	r3, r3, r1
 8002074:	4413      	add	r3, r2
 8002076:	4403      	add	r3, r0
 8002078:	3301      	adds	r3, #1
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = true;
 800207e:	4a5a      	ldr	r2, [pc, #360]	; (80021e8 <D_Slider_LightingUpdate+0xf2c>)
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	4413      	add	r3, r2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	4852      	ldr	r0, [pc, #328]	; (80021d0 <D_Slider_LightingUpdate+0xf14>)
 8002088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800208a:	461a      	mov	r2, r3
 800208c:	0052      	lsls	r2, r2, #1
 800208e:	441a      	add	r2, r3
 8002090:	460b      	mov	r3, r1
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a5b      	subs	r3, r3, r1
 8002096:	4413      	add	r3, r2
 8002098:	4403      	add	r3, r0
 800209a:	3302      	adds	r3, #2
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
			}
			if(updateCount[side] >= 180 + counter1[side]*200 && updateCount[side] < 300 + counter1[side]*200 && !_animUpdate_2[side]){
 80020a0:	4a4d      	ldr	r2, [pc, #308]	; (80021d8 <D_Slider_LightingUpdate+0xf1c>)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	22c8      	movs	r2, #200	; 0xc8
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 80020b2:	494a      	ldr	r1, [pc, #296]	; (80021dc <D_Slider_LightingUpdate+0xf20>)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	da5c      	bge.n	8002178 <D_Slider_LightingUpdate+0xebc>
 80020be:	4a46      	ldr	r2, [pc, #280]	; (80021d8 <D_Slider_LightingUpdate+0xf1c>)
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	22c8      	movs	r2, #200	; 0xc8
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
 80020cc:	f203 122b 	addw	r2, r3, #299	; 0x12b
 80020d0:	4942      	ldr	r1, [pc, #264]	; (80021dc <D_Slider_LightingUpdate+0xf20>)
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020d8:	429a      	cmp	r2, r3
 80020da:	db4d      	blt.n	8002178 <D_Slider_LightingUpdate+0xebc>
 80020dc:	4a41      	ldr	r2, [pc, #260]	; (80021e4 <D_Slider_LightingUpdate+0xf28>)
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	4413      	add	r3, r2
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f083 0301 	eor.w	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d044      	beq.n	8002178 <D_Slider_LightingUpdate+0xebc>
				_animUpdate_1[side] = false;
 80020ee:	4a3c      	ldr	r2, [pc, #240]	; (80021e0 <D_Slider_LightingUpdate+0xf24>)
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	4413      	add	r3, r2
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
				_animUpdate_2[side] = true;
 80020f8:	4a3a      	ldr	r2, [pc, #232]	; (80021e4 <D_Slider_LightingUpdate+0xf28>)
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	4413      	add	r3, r2
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][0] = false;
 8002102:	4a39      	ldr	r2, [pc, #228]	; (80021e8 <D_Slider_LightingUpdate+0xf2c>)
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	4413      	add	r3, r2
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	4831      	ldr	r0, [pc, #196]	; (80021d0 <D_Slider_LightingUpdate+0xf14>)
 800210c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800210e:	461a      	mov	r2, r3
 8002110:	0052      	lsls	r2, r2, #1
 8002112:	441a      	add	r2, r3
 8002114:	460b      	mov	r3, r1
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	1a5b      	subs	r3, r3, r1
 800211a:	4413      	add	r3, r2
 800211c:	4403      	add	r3, r0
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][1] = false;
 8002122:	4a31      	ldr	r2, [pc, #196]	; (80021e8 <D_Slider_LightingUpdate+0xf2c>)
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4829      	ldr	r0, [pc, #164]	; (80021d0 <D_Slider_LightingUpdate+0xf14>)
 800212c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800212e:	461a      	mov	r2, r3
 8002130:	0052      	lsls	r2, r2, #1
 8002132:	441a      	add	r2, r3
 8002134:	460b      	mov	r3, r1
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	1a5b      	subs	r3, r3, r1
 800213a:	4413      	add	r3, r2
 800213c:	4403      	add	r3, r0
 800213e:	3301      	adds	r3, #1
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
				slideColor[side][inPocket[side]][2] = false;
 8002144:	4a28      	ldr	r2, [pc, #160]	; (80021e8 <D_Slider_LightingUpdate+0xf2c>)
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	4413      	add	r3, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4820      	ldr	r0, [pc, #128]	; (80021d0 <D_Slider_LightingUpdate+0xf14>)
 800214e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002150:	461a      	mov	r2, r3
 8002152:	0052      	lsls	r2, r2, #1
 8002154:	441a      	add	r2, r3
 8002156:	460b      	mov	r3, r1
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	1a5b      	subs	r3, r3, r1
 800215c:	4413      	add	r3, r2
 800215e:	4403      	add	r3, r0
 8002160:	3302      	adds	r3, #2
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
				counter1[side]++;
 8002166:	4a1c      	ldr	r2, [pc, #112]	; (80021d8 <D_Slider_LightingUpdate+0xf1c>)
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	4919      	ldr	r1, [pc, #100]	; (80021d8 <D_Slider_LightingUpdate+0xf1c>)
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}

			if(updateCount[side] > 2000) LightingMode[side] = SL_NORMAL_FLASH;
 8002178:	4a18      	ldr	r2, [pc, #96]	; (80021dc <D_Slider_LightingUpdate+0xf20>)
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002180:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002184:	dd0f      	ble.n	80021a6 <D_Slider_LightingUpdate+0xeea>
 8002186:	4a19      	ldr	r2, [pc, #100]	; (80021ec <D_Slider_LightingUpdate+0xf30>)
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	4413      	add	r3, r2
 800218c:	2202      	movs	r2, #2
 800218e:	701a      	strb	r2, [r3, #0]

			break;
 8002190:	e009      	b.n	80021a6 <D_Slider_LightingUpdate+0xeea>
			break;
 8002192:	bf00      	nop
 8002194:	e008      	b.n	80021a8 <D_Slider_LightingUpdate+0xeec>
			break;
 8002196:	bf00      	nop
 8002198:	e006      	b.n	80021a8 <D_Slider_LightingUpdate+0xeec>
			break;
 800219a:	bf00      	nop
 800219c:	e004      	b.n	80021a8 <D_Slider_LightingUpdate+0xeec>
			break;
 800219e:	bf00      	nop
 80021a0:	e002      	b.n	80021a8 <D_Slider_LightingUpdate+0xeec>
			break;
 80021a2:	bf00      	nop
 80021a4:	e000      	b.n	80021a8 <D_Slider_LightingUpdate+0xeec>
			break;
 80021a6:	bf00      	nop
	for(int side = 0; side < 2; side++){
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	3301      	adds	r3, #1
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	f77f a88d 	ble.w	80012d0 <D_Slider_LightingUpdate+0x14>
		}
	}

	recentUpdateCount = G_System_counter;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <D_Slider_LightingUpdate+0xf34>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <D_Slider_LightingUpdate+0xf38>)
 80021be:	601a      	str	r2, [r3, #0]
	D_Slider_SetColorData(slideColor[0], slideColor[1]);
 80021c0:	490d      	ldr	r1, [pc, #52]	; (80021f8 <D_Slider_LightingUpdate+0xf3c>)
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <D_Slider_LightingUpdate+0xf14>)
 80021c4:	f000 f964 	bl	8002490 <D_Slider_SetColorData>
}
 80021c8:	bf00      	nop
 80021ca:	3728      	adds	r7, #40	; 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000314 	.word	0x20000314
 80021d4:	20000308 	.word	0x20000308
 80021d8:	20000334 	.word	0x20000334
 80021dc:	200002f4 	.word	0x200002f4
 80021e0:	2000030c 	.word	0x2000030c
 80021e4:	20000310 	.word	0x20000310
 80021e8:	200002e0 	.word	0x200002e0
 80021ec:	200002dc 	.word	0x200002dc
 80021f0:	20000248 	.word	0x20000248
 80021f4:	200002fc 	.word	0x200002fc
 80021f8:	20000323 	.word	0x20000323

080021fc <D_Slider_GetPocketR>:

int D_Slider_GetPocketR(bool _reset){
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
	static int recentSensorCount[5] = {{0}};
	static int returnPocket = -1;
	if (_reset) {
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d006      	beq.n	800221a <D_Slider_GetPocketR+0x1e>
		returnPocket = -1;
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <D_Slider_GetPocketR+0x6c>)
 800220e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002212:	601a      	str	r2, [r3, #0]
		return returnPocket;
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <D_Slider_GetPocketR+0x6c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	e01f      	b.n	800225a <D_Slider_GetPocketR+0x5e>
	}
	for(int i=0; i<5; i++){
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	e017      	b.n	8002250 <D_Slider_GetPocketR+0x54>
		if(SensorCount[0][i] != recentSensorCount[i]){
 8002220:	4a12      	ldr	r2, [pc, #72]	; (800226c <D_Slider_GetPocketR+0x70>)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002228:	4911      	ldr	r1, [pc, #68]	; (8002270 <D_Slider_GetPocketR+0x74>)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002230:	429a      	cmp	r2, r3
 8002232:	d002      	beq.n	800223a <D_Slider_GetPocketR+0x3e>
			returnPocket = i;
 8002234:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <D_Slider_GetPocketR+0x6c>)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6013      	str	r3, [r2, #0]
		}
		recentSensorCount[i] = SensorCount[0][i];
 800223a:	4a0c      	ldr	r2, [pc, #48]	; (800226c <D_Slider_GetPocketR+0x70>)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002242:	490b      	ldr	r1, [pc, #44]	; (8002270 <D_Slider_GetPocketR+0x74>)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3301      	adds	r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b04      	cmp	r3, #4
 8002254:	dde4      	ble.n	8002220 <D_Slider_GetPocketR+0x24>
	}
	return returnPocket;
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <D_Slider_GetPocketR+0x6c>)
 8002258:	681b      	ldr	r3, [r3, #0]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000010 	.word	0x20000010
 800226c:	200002b0 	.word	0x200002b0
 8002270:	2000033c 	.word	0x2000033c

08002274 <D_Slider_GetPocketL>:

int D_Slider_GetPocketL(bool _reset){
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
	static int recentSensorCount[5] = {{0}};
	static int returnPocket = -1;
	if (_reset) {
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <D_Slider_GetPocketL+0x1e>
		returnPocket = -1;
 8002284:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <D_Slider_GetPocketL+0x70>)
 8002286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800228a:	601a      	str	r2, [r3, #0]
		return returnPocket;
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <D_Slider_GetPocketL+0x70>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	e021      	b.n	80022d6 <D_Slider_GetPocketL+0x62>
	}
	for(int i=0; i<5; i++){
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	e019      	b.n	80022cc <D_Slider_GetPocketL+0x58>
		if(SensorCount[1][i] != recentSensorCount[i]){
 8002298:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <D_Slider_GetPocketL+0x74>)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3305      	adds	r3, #5
 800229e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022a2:	4912      	ldr	r1, [pc, #72]	; (80022ec <D_Slider_GetPocketL+0x78>)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d002      	beq.n	80022b4 <D_Slider_GetPocketL+0x40>
			returnPocket = i;
 80022ae:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <D_Slider_GetPocketL+0x70>)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6013      	str	r3, [r2, #0]
		}
		recentSensorCount[i] = SensorCount[1][i];
 80022b4:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <D_Slider_GetPocketL+0x74>)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3305      	adds	r3, #5
 80022ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022be:	490b      	ldr	r1, [pc, #44]	; (80022ec <D_Slider_GetPocketL+0x78>)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	dde2      	ble.n	8002298 <D_Slider_GetPocketL+0x24>
	}
	return returnPocket;
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <D_Slider_GetPocketL+0x70>)
 80022d4:	681b      	ldr	r3, [r3, #0]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000014 	.word	0x20000014
 80022e8:	200002b0 	.word	0x200002b0
 80022ec:	20000350 	.word	0x20000350

080022f0 <D_Slider_Send>:

int D_Slider_Send(uint8_t* data, int length){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
	if(!had_completed_tx){
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <D_Slider_Send+0x44>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f083 0301 	eor.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <D_Slider_Send+0x20>
		return -1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800230e:	e00d      	b.n	800232c <D_Slider_Send+0x3c>
	}
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)data, length);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4807      	ldr	r0, [pc, #28]	; (8002338 <D_Slider_Send+0x48>)
 800231a:	f003 f9c3 	bl	80056a4 <HAL_UART_Transmit_DMA>
	_send = true;
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <D_Slider_Send+0x4c>)
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
	had_completed_tx = false;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <D_Slider_Send+0x44>)
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
	return 0;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2000000c 	.word	0x2000000c
 8002338:	200008fc 	.word	0x200008fc
 800233c:	200002d8 	.word	0x200002d8

08002340 <D_Slider_Receive>:

int D_Slider_Receive(uint8_t* data, int length){
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
	if(!had_completed_rx){
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <D_Slider_Receive+0x40>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f083 0301 	eor.w	r3, r3, #1
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <D_Slider_Receive+0x20>
		return -1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800235e:	e00a      	b.n	8002376 <D_Slider_Receive+0x36>
	}
	HAL_UART_Receive_DMA(&huart1, (uint8_t*)data, length);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4806      	ldr	r0, [pc, #24]	; (8002384 <D_Slider_Receive+0x44>)
 800236a:	f003 fa19 	bl	80057a0 <HAL_UART_Receive_DMA>
	had_completed_rx = false;
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <D_Slider_Receive+0x40>)
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
	return 0;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000000d 	.word	0x2000000d
 8002384:	200008fc 	.word	0x200008fc

08002388 <D_Slider_GetSensorData>:

int D_Slider_GetSensorData(int side, int num){
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	if(side == 0){
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d104      	bne.n	80023a2 <D_Slider_GetSensorData+0x1a>
		return SensorCount[0][num];
 8002398:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <D_Slider_GetSensorData+0x30>)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	e004      	b.n	80023ac <D_Slider_GetSensorData+0x24>
	}else{
		return SensorCount[1][num];
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <D_Slider_GetSensorData+0x30>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	3305      	adds	r3, #5
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	}
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	200002b0 	.word	0x200002b0

080023bc <D_Slider_CheckData>:

void D_Slider_CheckData(uint8_t* data, int length){
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2be0      	cmp	r3, #224	; 0xe0
 80023cc:	d155      	bne.n	800247a <D_Slider_CheckData+0xbe>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3301      	adds	r3, #1
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d150      	bne.n	800247a <D_Slider_CheckData+0xbe>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3302      	adds	r3, #2
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d14b      	bne.n	800247a <D_Slider_CheckData+0xbe>
	uint8_t sum = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 80023e6:	2301      	movs	r3, #1
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	e009      	b.n	8002400 <D_Slider_CheckData+0x44>
		sum += data[i];
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	4413      	add	r3, r2
 80023f8:	75fb      	strb	r3, [r7, #23]
	for(int i=1; i<SENSORGET_RECEIVE_LENGTH-1; i++){
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	3301      	adds	r3, #1
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2b08      	cmp	r3, #8
 8002404:	ddf2      	ble.n	80023ec <D_Slider_CheckData+0x30>
	}
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3309      	adds	r3, #9
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	7dfa      	ldrb	r2, [r7, #23]
 800240e:	429a      	cmp	r2, r3
 8002410:	d135      	bne.n	800247e <D_Slider_CheckData+0xc2>
	for(int i=0; i<5; i++){
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	e02c      	b.n	8002472 <D_Slider_CheckData+0xb6>
		if(((data[7]>>i) & 1) == 1) SensorCount[1][i]++;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3307      	adds	r3, #7
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	fa42 f303 	asr.w	r3, r2, r3
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <D_Slider_CheckData+0x88>
 800242e:	4a17      	ldr	r2, [pc, #92]	; (800248c <D_Slider_CheckData+0xd0>)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3305      	adds	r3, #5
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	4914      	ldr	r1, [pc, #80]	; (800248c <D_Slider_CheckData+0xd0>)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3305      	adds	r3, #5
 8002440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(((data[8]>>i) & 1) == 1) SensorCount[0][i]++;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3308      	adds	r3, #8
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	fa42 f303 	asr.w	r3, r2, r3
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <D_Slider_CheckData+0xb0>
 800245a:	4a0c      	ldr	r2, [pc, #48]	; (800248c <D_Slider_CheckData+0xd0>)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	4909      	ldr	r1, [pc, #36]	; (800248c <D_Slider_CheckData+0xd0>)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<5; i++){
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3301      	adds	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b04      	cmp	r3, #4
 8002476:	ddcf      	ble.n	8002418 <D_Slider_CheckData+0x5c>
 8002478:	e002      	b.n	8002480 <D_Slider_CheckData+0xc4>
	if(data[0] != FIRSTBYTE || data[1] != SENSORGET_SEQNUM || data[2] != ADDRESS) return;
 800247a:	bf00      	nop
 800247c:	e000      	b.n	8002480 <D_Slider_CheckData+0xc4>
	if(sum != data[SENSORGET_RECEIVE_LENGTH-1]) return;
 800247e:	bf00      	nop
	}
}
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	200002b0 	.word	0x200002b0

08002490 <D_Slider_SetColorData>:

void D_Slider_SetColorData(bool setColorR[][3], bool setColorL[][3]){
 8002490:	b4b0      	push	{r4, r5, r7}
 8002492:	b08b      	sub	sp, #44	; 0x2c
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
	if (!_send) return;
 800249a:	4b8d      	ldr	r3, [pc, #564]	; (80026d0 <D_Slider_SetColorData+0x240>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	f083 0301 	eor.w	r3, r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 810e 	bne.w	80026c6 <D_Slider_SetColorData+0x236>
	_send = false;
 80024aa:	4b89      	ldr	r3, [pc, #548]	; (80026d0 <D_Slider_SetColorData+0x240>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
	SendData[0] = FIRSTBYTE;
 80024b0:	4b88      	ldr	r3, [pc, #544]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80024b2:	22e0      	movs	r2, #224	; 0xe0
 80024b4:	701a      	strb	r2, [r3, #0]
	SendData[1] = ADDRESS;
 80024b6:	4b87      	ldr	r3, [pc, #540]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	705a      	strb	r2, [r3, #1]
	SendData[2] = COLORSEND_SEQNUM;
 80024bc:	4b85      	ldr	r3, [pc, #532]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80024be:	2205      	movs	r2, #5
 80024c0:	709a      	strb	r2, [r3, #2]
	SendData[3] = COLORSEND_DATANUM;
 80024c2:	4b84      	ldr	r3, [pc, #528]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80024c4:	2205      	movs	r2, #5
 80024c6:	70da      	strb	r2, [r3, #3]
	SendData[4] = COLORSEND_CMD;
 80024c8:	4b82      	ldr	r3, [pc, #520]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80024ca:	2232      	movs	r2, #50	; 0x32
 80024cc:	711a      	strb	r2, [r3, #4]
	SendData[5] = 0;
 80024ce:	4b81      	ldr	r3, [pc, #516]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	715a      	strb	r2, [r3, #5]
	SendData[6] = 0;
 80024d4:	4b7f      	ldr	r3, [pc, #508]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	719a      	strb	r2, [r3, #6]
	SendData[7] = 0;
 80024da:	4b7e      	ldr	r3, [pc, #504]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80024dc:	2200      	movs	r2, #0
 80024de:	71da      	strb	r2, [r3, #7]
	SendData[8] = 0;
 80024e0:	4b7c      	ldr	r3, [pc, #496]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	721a      	strb	r2, [r3, #8]
	SendData[9] = 0;
 80024e6:	4b7b      	ldr	r3, [pc, #492]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	725a      	strb	r2, [r3, #9]
	SendData[10] = 0;
 80024ec:	4b79      	ldr	r3, [pc, #484]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	729a      	strb	r2, [r3, #10]
	SendData[11] = 0;
 80024f2:	4b78      	ldr	r3, [pc, #480]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	72da      	strb	r2, [r3, #11]
	SendData[12] = 0;
 80024f8:	4b76      	ldr	r3, [pc, #472]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	731a      	strb	r2, [r3, #12]
	SendData[13] = 0;
 80024fe:	4b75      	ldr	r3, [pc, #468]	; (80026d4 <D_Slider_SetColorData+0x244>)
 8002500:	2200      	movs	r2, #0
 8002502:	735a      	strb	r2, [r3, #13]
	SendData[14] = 0;
 8002504:	4b73      	ldr	r3, [pc, #460]	; (80026d4 <D_Slider_SetColorData+0x244>)
 8002506:	2200      	movs	r2, #0
 8002508:	739a      	strb	r2, [r3, #14]
	for(int i=1; i<16; i++){
 800250a:	2301      	movs	r3, #1
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
 800250e:	e038      	b.n	8002582 <D_Slider_SetColorData+0xf2>
		SendData[5 + (i/8)] |= (setColorR[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	da00      	bge.n	8002518 <D_Slider_SetColorData+0x88>
 8002516:	3307      	adds	r3, #7
 8002518:	10db      	asrs	r3, r3, #3
 800251a:	4618      	mov	r0, r3
 800251c:	1d43      	adds	r3, r0, #5
 800251e:	4a6d      	ldr	r2, [pc, #436]	; (80026d4 <D_Slider_SetColorData+0x244>)
 8002520:	5cd3      	ldrb	r3, [r2, r3]
 8002522:	b25c      	sxtb	r4, r3
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	3b01      	subs	r3, #1
 8002528:	4a6b      	ldr	r2, [pc, #428]	; (80026d8 <D_Slider_SetColorData+0x248>)
 800252a:	fb82 1203 	smull	r1, r2, r2, r3
 800252e:	17db      	asrs	r3, r3, #31
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	3304      	adds	r3, #4
 8002534:	461a      	mov	r2, r3
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	18d5      	adds	r5, r2, r3
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	1e59      	subs	r1, r3, #1
 8002544:	4b64      	ldr	r3, [pc, #400]	; (80026d8 <D_Slider_SetColorData+0x248>)
 8002546:	fb83 3201 	smull	r3, r2, r3, r1
 800254a:	17cb      	asrs	r3, r1, #31
 800254c:	1ad2      	subs	r2, r2, r3
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	1aca      	subs	r2, r1, r3
 8002556:	5cab      	ldrb	r3, [r5, r2]
 8002558:	4619      	mov	r1, r3
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	425a      	negs	r2, r3
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	f002 0207 	and.w	r2, r2, #7
 8002566:	bf58      	it	pl
 8002568:	4253      	negpl	r3, r2
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	b25b      	sxtb	r3, r3
 8002570:	4323      	orrs	r3, r4
 8002572:	b25a      	sxtb	r2, r3
 8002574:	1d43      	adds	r3, r0, #5
 8002576:	b2d1      	uxtb	r1, r2
 8002578:	4a56      	ldr	r2, [pc, #344]	; (80026d4 <D_Slider_SetColorData+0x244>)
 800257a:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	3301      	adds	r3, #1
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	2b0f      	cmp	r3, #15
 8002586:	ddc3      	ble.n	8002510 <D_Slider_SetColorData+0x80>
	}
	for(int i=1; i<16; i++){
 8002588:	2301      	movs	r3, #1
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	e038      	b.n	8002600 <D_Slider_SetColorData+0x170>
		SendData[7 + (i/8)] |= (setColorL[4 - (i-1)/3][(i-1)%3] ? 1 : 0) << (i%8);
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	2b00      	cmp	r3, #0
 8002592:	da00      	bge.n	8002596 <D_Slider_SetColorData+0x106>
 8002594:	3307      	adds	r3, #7
 8002596:	10db      	asrs	r3, r3, #3
 8002598:	4618      	mov	r0, r3
 800259a:	1dc3      	adds	r3, r0, #7
 800259c:	4a4d      	ldr	r2, [pc, #308]	; (80026d4 <D_Slider_SetColorData+0x244>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	b25c      	sxtb	r4, r3
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	4a4c      	ldr	r2, [pc, #304]	; (80026d8 <D_Slider_SetColorData+0x248>)
 80025a8:	fb82 1203 	smull	r1, r2, r2, r3
 80025ac:	17db      	asrs	r3, r3, #31
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	3304      	adds	r3, #4
 80025b2:	461a      	mov	r2, r3
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	18d5      	adds	r5, r2, r3
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	1e59      	subs	r1, r3, #1
 80025c2:	4b45      	ldr	r3, [pc, #276]	; (80026d8 <D_Slider_SetColorData+0x248>)
 80025c4:	fb83 3201 	smull	r3, r2, r3, r1
 80025c8:	17cb      	asrs	r3, r1, #31
 80025ca:	1ad2      	subs	r2, r2, r3
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	1aca      	subs	r2, r1, r3
 80025d4:	5cab      	ldrb	r3, [r5, r2]
 80025d6:	4619      	mov	r1, r3
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	425a      	negs	r2, r3
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	f002 0207 	and.w	r2, r2, #7
 80025e4:	bf58      	it	pl
 80025e6:	4253      	negpl	r3, r2
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	4323      	orrs	r3, r4
 80025f0:	b25a      	sxtb	r2, r3
 80025f2:	1dc3      	adds	r3, r0, #7
 80025f4:	b2d1      	uxtb	r1, r2
 80025f6:	4a37      	ldr	r2, [pc, #220]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80025f8:	54d1      	strb	r1, [r2, r3]
	for(int i=1; i<16; i++){
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	3301      	adds	r3, #1
 80025fe:	623b      	str	r3, [r7, #32]
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	2b0f      	cmp	r3, #15
 8002604:	ddc3      	ble.n	800258e <D_Slider_SetColorData+0xfe>
	}

	uint8_t dataSum = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	77fb      	strb	r3, [r7, #31]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 800260a:	2301      	movs	r3, #1
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	e009      	b.n	8002624 <D_Slider_SetColorData+0x194>
		dataSum += SendData[i];
 8002610:	4a30      	ldr	r2, [pc, #192]	; (80026d4 <D_Slider_SetColorData+0x244>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4413      	add	r3, r2
 8002616:	781a      	ldrb	r2, [r3, #0]
 8002618:	7ffb      	ldrb	r3, [r7, #31]
 800261a:	4413      	add	r3, r2
 800261c:	77fb      	strb	r3, [r7, #31]
	for(int i=1; i<COLORSEND_LENGTH-1; i++){
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	3301      	adds	r3, #1
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b08      	cmp	r3, #8
 8002628:	ddf2      	ble.n	8002610 <D_Slider_SetColorData+0x180>
	}

	AdditionalPacket = 0;
 800262a:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <D_Slider_SetColorData+0x24c>)
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
		//SendData[10] = SendData[9];
		//SendData[8] = SendData[7];
		SendData[10] = tempData;
	}
	*/
	for(int i=5; i<9+AdditionalPacket; i++){
 8002630:	2305      	movs	r3, #5
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	e03a      	b.n	80026ac <D_Slider_SetColorData+0x21c>
		if(SendData[i] == ESCAPE_PACKET || SendData[i] == FIRSTBYTE) {
 8002636:	4a27      	ldr	r2, [pc, #156]	; (80026d4 <D_Slider_SetColorData+0x244>)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2bd0      	cmp	r3, #208	; 0xd0
 8002640:	d005      	beq.n	800264e <D_Slider_SetColorData+0x1be>
 8002642:	4a24      	ldr	r2, [pc, #144]	; (80026d4 <D_Slider_SetColorData+0x244>)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	4413      	add	r3, r2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2be0      	cmp	r3, #224	; 0xe0
 800264c:	d12b      	bne.n	80026a6 <D_Slider_SetColorData+0x216>
			AdditionalPacket++;
 800264e:	4b23      	ldr	r3, [pc, #140]	; (80026dc <D_Slider_SetColorData+0x24c>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <D_Slider_SetColorData+0x24c>)
 8002658:	701a      	strb	r2, [r3, #0]
			uint8_t tempData = SendData[i] - 1;
 800265a:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <D_Slider_SetColorData+0x244>)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	4413      	add	r3, r2
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	3b01      	subs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
			SendData[i] = ESCAPE_PACKET;
 8002666:	4a1b      	ldr	r2, [pc, #108]	; (80026d4 <D_Slider_SetColorData+0x244>)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	4413      	add	r3, r2
 800266c:	22d0      	movs	r2, #208	; 0xd0
 800266e:	701a      	strb	r2, [r3, #0]
			for(int j=i+3; j>i; j--){
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3303      	adds	r3, #3
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	e00a      	b.n	800268e <D_Slider_SetColorData+0x1fe>
				SendData[j+1] = SendData[j];
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	3301      	adds	r3, #1
 800267c:	4915      	ldr	r1, [pc, #84]	; (80026d4 <D_Slider_SetColorData+0x244>)
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	440a      	add	r2, r1
 8002682:	7811      	ldrb	r1, [r2, #0]
 8002684:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <D_Slider_SetColorData+0x244>)
 8002686:	54d1      	strb	r1, [r2, r3]
			for(int j=i+3; j>i; j--){
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	3b01      	subs	r3, #1
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	429a      	cmp	r2, r3
 8002694:	dcf0      	bgt.n	8002678 <D_Slider_SetColorData+0x1e8>
			}
			SendData[i+1] = tempData;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3301      	adds	r3, #1
 800269a:	490e      	ldr	r1, [pc, #56]	; (80026d4 <D_Slider_SetColorData+0x244>)
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	54ca      	strb	r2, [r1, r3]
			i++;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3301      	adds	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
	for(int i=5; i<9+AdditionalPacket; i++){
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3301      	adds	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <D_Slider_SetColorData+0x24c>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	3308      	adds	r3, #8
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	ddbe      	ble.n	8002636 <D_Slider_SetColorData+0x1a6>
		}
	}

	SendData[COLORSEND_LENGTH-1 + AdditionalPacket] = (uint8_t)dataSum;
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <D_Slider_SetColorData+0x24c>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3309      	adds	r3, #9
 80026be:	4905      	ldr	r1, [pc, #20]	; (80026d4 <D_Slider_SetColorData+0x244>)
 80026c0:	7ffa      	ldrb	r2, [r7, #31]
 80026c2:	54ca      	strb	r2, [r1, r3]
 80026c4:	e000      	b.n	80026c8 <D_Slider_SetColorData+0x238>
	if (!_send) return;
 80026c6:	bf00      	nop
}
 80026c8:	372c      	adds	r7, #44	; 0x2c
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bcb0      	pop	{r4, r5, r7}
 80026ce:	4770      	bx	lr
 80026d0:	200002d8 	.word	0x200002d8
 80026d4:	2000024c 	.word	0x2000024c
 80026d8:	55555556 	.word	0x55555556
 80026dc:	2000028c 	.word	0x2000028c

080026e0 <D_Slider_TransitionCompletedCallBack>:


void D_Slider_TransitionCompletedCallBack(){
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
	had_completed_tx = true;
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <D_Slider_TransitionCompletedCallBack+0x14>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
	//SndErrTime = 0;
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	2000000c 	.word	0x2000000c

080026f8 <D_Slider_ReceptionCompletedCallBack>:

void D_Slider_ReceptionCompletedCallBack(){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	had_completed_rx = true;
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <D_Slider_ReceptionCompletedCallBack+0x18>)
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
	//RcvErrTime = 0;
	D_Slider_CheckData((uint8_t*)RecvData, 10);
 8002702:	210a      	movs	r1, #10
 8002704:	4803      	ldr	r0, [pc, #12]	; (8002714 <D_Slider_ReceptionCompletedCallBack+0x1c>)
 8002706:	f7ff fe59 	bl	80023bc <D_Slider_CheckData>
			TouchData[i] = RecvData[i+3];
		}
	}
	*/
	//D_USBHID_SetSendData_Touch(TouchData);
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2000000d 	.word	0x2000000d
 8002714:	20000290 	.word	0x20000290

08002718 <D_GPIO_Read>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
}

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 8002724:	887b      	ldrh	r3, [r7, #2]
 8002726:	4619      	mov	r1, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f001 f95d 	bl	80039e8 <HAL_GPIO_ReadPin>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <D_Mess_printf>:
volatile bool had_completed_tx = true;
static
volatile bool had_completed_rx = true;


void D_Mess_printf(const char* fmt, ...){
 8002744:	b40f      	push	{r0, r1, r2, r3}
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
  va_list arp;

  //MW_waitForMessageTransitionComplete(100);
  va_start(arp, fmt);
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	607b      	str	r3, [r7, #4]
  xvprintf(fmt, arp);
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	6938      	ldr	r0, [r7, #16]
 8002756:	f000 f89d 	bl	8002894 <xvprintf>
  va_end(arp);
  if( outptr - buff > MAX_STRING_LENGTH ){
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <D_Mess_printf+0x38>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a08      	ldr	r2, [pc, #32]	; (8002780 <D_Mess_printf+0x3c>)
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002766:	dd01      	ble.n	800276c <D_Mess_printf+0x28>
	  D_Mess_flush();
 8002768:	f000 f80c 	bl	8002784 <D_Mess_flush>
  }
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002776:	b004      	add	sp, #16
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	2000098c 	.word	0x2000098c
 8002780:	20000364 	.word	0x20000364

08002784 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed_tx){
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <D_Mess_flush+0x54>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f083 0301 	eor.w	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <D_Mess_flush+0x1c>
		outptr = buff;
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <D_Mess_flush+0x58>)
 800279a:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <D_Mess_flush+0x5c>)
 800279c:	601a      	str	r2, [r3, #0]
		return;
 800279e:	e01a      	b.n	80027d6 <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <D_Mess_flush+0x58>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <D_Mess_flush+0x58>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	490b      	ldr	r1, [pc, #44]	; (80027dc <D_Mess_flush+0x58>)
 80027b0:	600a      	str	r2, [r1, #0]
 80027b2:	220a      	movs	r2, #10
 80027b4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <D_Mess_flush+0x58>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <D_Mess_flush+0x5c>)
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	4907      	ldr	r1, [pc, #28]	; (80027e0 <D_Mess_flush+0x5c>)
 80027c4:	4807      	ldr	r0, [pc, #28]	; (80027e4 <D_Mess_flush+0x60>)
 80027c6:	f002 ff6d 	bl	80056a4 <HAL_UART_Transmit_DMA>
		had_completed_tx = false;
 80027ca:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <D_Mess_flush+0x54>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 80027d0:	4b02      	ldr	r3, [pc, #8]	; (80027dc <D_Mess_flush+0x58>)
 80027d2:	4a03      	ldr	r2, [pc, #12]	; (80027e0 <D_Mess_flush+0x5c>)
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000018 	.word	0x20000018
 80027dc:	2000098c 	.word	0x2000098c
 80027e0:	20000364 	.word	0x20000364
 80027e4:	20000940 	.word	0x20000940

080027e8 <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  had_completed_tx = true;
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <D_Mess_TransitionCompletedCallBack+0x14>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	20000018 	.word	0x20000018

08002800 <D_Mess_ReceptionCompletedCallBack>:
void D_Mess_ReceptionCompletedCallBack(void){
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  had_completed_rx = true;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <D_Mess_ReceptionCompletedCallBack+0x14>)
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	20000019 	.word	0x20000019

08002818 <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc(char c){
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
  if( _CR_CRLF && c == '\n' ){
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	2b0a      	cmp	r3, #10
 8002826:	d102      	bne.n	800282e <xputc+0x16>
    xputc('\r');                                        /* CR -> CRLF */
 8002828:	200d      	movs	r0, #13
 800282a:	f7ff fff5 	bl	8002818 <xputc>
  }
  if( outptr ){
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <xputc+0x48>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <xputc+0x2e>
    *outptr++ = (unsigned char)c;
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <xputc+0x48>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	4908      	ldr	r1, [pc, #32]	; (8002860 <xputc+0x48>)
 800283e:	600a      	str	r2, [r1, #0]
 8002840:	79fa      	ldrb	r2, [r7, #7]
 8002842:	701a      	strb	r2, [r3, #0]
    return;
 8002844:	e008      	b.n	8002858 <xputc+0x40>
  }

  if( xfunc_out ){
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <xputc+0x4c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d004      	beq.n	8002858 <xputc+0x40>
    xfunc_out((unsigned char)c);
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <xputc+0x4c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	79fa      	ldrb	r2, [r7, #7]
 8002854:	4610      	mov	r0, r2
 8002856:	4798      	blx	r3
  }
}
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	2000098c 	.word	0x2000098c
 8002864:	20000988 	.word	0x20000988

08002868 <xputs>:
/*----------------------------------------------*/

void xputs(                                     /* Put a string to the default
                                                 *device */
  const char* str                               /* Pointer to the string */
  ){
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  while( *str ){
 8002870:	e006      	b.n	8002880 <xputs+0x18>
    xputc(*str++);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ffcc 	bl	8002818 <xputc>
  while( *str ){
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f4      	bne.n	8002872 <xputs+0xa>
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <xvprintf>:
 */

void xvprintf(
  const char*     fmt,          /* Pointer to the format string */
  va_list arp                           /* Pointer to arguments */
  ){
 8002894:	b580      	push	{r7, lr}
 8002896:	b08e      	sub	sp, #56	; 0x38
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  unsigned long v;
  char s[16], c, d, *p;


  for(;; ){
    c = *fmt++;                                                 /* Get a char */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	77fb      	strb	r3, [r7, #31]
    if( !c ){
 80028a8:	7ffb      	ldrb	r3, [r7, #31]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8167 	beq.w	8002b7e <xvprintf+0x2ea>
      break;                                            /* End of format? */
    }
    if( c != '%' ){                                     /* Pass through it if
 80028b0:	7ffb      	ldrb	r3, [r7, #31]
 80028b2:	2b25      	cmp	r3, #37	; 0x25
 80028b4:	d004      	beq.n	80028c0 <xvprintf+0x2c>
                                                         *not a % sequense */
      xputc(c); continue;
 80028b6:	7ffb      	ldrb	r3, [r7, #31]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ffad 	bl	8002818 <xputc>
 80028be:	e15d      	b.n	8002b7c <xvprintf+0x2e8>
    }
    f = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
    c = *fmt++;                                                 /* Get first
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	77fb      	strb	r3, [r7, #31]
                                                                * *char of the
                                                                *sequense */
    if( c == '0' ){                                     /* Flag: '0' padded */
 80028ce:	7ffb      	ldrb	r3, [r7, #31]
 80028d0:	2b30      	cmp	r3, #48	; 0x30
 80028d2:	d107      	bne.n	80028e4 <xvprintf+0x50>
      f = 1; c = *fmt++;
 80028d4:	2301      	movs	r3, #1
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	77fb      	strb	r3, [r7, #31]
 80028e2:	e009      	b.n	80028f8 <xvprintf+0x64>
    } else {
      if( c == '-' ){                                   /* Flag: left justified
 80028e4:	7ffb      	ldrb	r3, [r7, #31]
 80028e6:	2b2d      	cmp	r3, #45	; 0x2d
 80028e8:	d106      	bne.n	80028f8 <xvprintf+0x64>
                                                        **/
        f = 2; c = *fmt++;
 80028ea:	2302      	movs	r3, #2
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	77fb      	strb	r3, [r7, #31]
      }
    }
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 80028f8:	2300      	movs	r3, #0
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80028fc:	e00e      	b.n	800291c <xvprintf+0x88>
                                                                **/
      w = w * 10 + c - '0';
 80028fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	461a      	mov	r2, r3
 800290a:	7ffb      	ldrb	r3, [r7, #31]
 800290c:	4413      	add	r3, r2
 800290e:	3b30      	subs	r3, #48	; 0x30
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	77fb      	strb	r3, [r7, #31]
 800291c:	7ffb      	ldrb	r3, [r7, #31]
 800291e:	2b2f      	cmp	r3, #47	; 0x2f
 8002920:	d902      	bls.n	8002928 <xvprintf+0x94>
 8002922:	7ffb      	ldrb	r3, [r7, #31]
 8002924:	2b39      	cmp	r3, #57	; 0x39
 8002926:	d9ea      	bls.n	80028fe <xvprintf+0x6a>
    }
    if( c == 'l' || c == 'L' ){                 /* Prefix: Size is long int */
 8002928:	7ffb      	ldrb	r3, [r7, #31]
 800292a:	2b6c      	cmp	r3, #108	; 0x6c
 800292c:	d002      	beq.n	8002934 <xvprintf+0xa0>
 800292e:	7ffb      	ldrb	r3, [r7, #31]
 8002930:	2b4c      	cmp	r3, #76	; 0x4c
 8002932:	d108      	bne.n	8002946 <xvprintf+0xb2>
      f |= 4; c = *fmt++;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	77fb      	strb	r3, [r7, #31]
    }
    if( !c ){
 8002946:	7ffb      	ldrb	r3, [r7, #31]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 811a 	beq.w	8002b82 <xvprintf+0x2ee>
      break;                                            /* End of format? */
    }
    d = c;
 800294e:	7ffb      	ldrb	r3, [r7, #31]
 8002950:	77bb      	strb	r3, [r7, #30]
    if( d >= 'a' ){
 8002952:	7fbb      	ldrb	r3, [r7, #30]
 8002954:	2b60      	cmp	r3, #96	; 0x60
 8002956:	d902      	bls.n	800295e <xvprintf+0xca>
      d -= 0x20;
 8002958:	7fbb      	ldrb	r3, [r7, #30]
 800295a:	3b20      	subs	r3, #32
 800295c:	77bb      	strb	r3, [r7, #30]
    }
    switch( d ){                                        /* Type is... */
 800295e:	7fbb      	ldrb	r3, [r7, #30]
 8002960:	3b42      	subs	r3, #66	; 0x42
 8002962:	2b16      	cmp	r3, #22
 8002964:	d873      	bhi.n	8002a4e <xvprintf+0x1ba>
 8002966:	a201      	add	r2, pc, #4	; (adr r2, 800296c <xvprintf+0xd8>)
 8002968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296c:	08002a37 	.word	0x08002a37
 8002970:	08002a25 	.word	0x08002a25
 8002974:	08002a43 	.word	0x08002a43
 8002978:	08002a4f 	.word	0x08002a4f
 800297c:	08002a4f 	.word	0x08002a4f
 8002980:	08002a4f 	.word	0x08002a4f
 8002984:	08002a4f 	.word	0x08002a4f
 8002988:	08002a4f 	.word	0x08002a4f
 800298c:	08002a4f 	.word	0x08002a4f
 8002990:	08002a4f 	.word	0x08002a4f
 8002994:	08002a4f 	.word	0x08002a4f
 8002998:	08002a4f 	.word	0x08002a4f
 800299c:	08002a4f 	.word	0x08002a4f
 80029a0:	08002a3d 	.word	0x08002a3d
 80029a4:	08002a4f 	.word	0x08002a4f
 80029a8:	08002a4f 	.word	0x08002a4f
 80029ac:	08002a4f 	.word	0x08002a4f
 80029b0:	080029c9 	.word	0x080029c9
 80029b4:	08002a4f 	.word	0x08002a4f
 80029b8:	08002a43 	.word	0x08002a43
 80029bc:	08002a4f 	.word	0x08002a4f
 80029c0:	08002a4f 	.word	0x08002a4f
 80029c4:	08002a49 	.word	0x08002a49
    case 'S':                                                   /* String */
      p = va_arg(arp, char*);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	1d1a      	adds	r2, r3, #4
 80029cc:	603a      	str	r2, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	61bb      	str	r3, [r7, #24]
      for( j = 0; p[j]; j++ ){
 80029d2:	2300      	movs	r3, #0
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d6:	e002      	b.n	80029de <xvprintf+0x14a>
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	3301      	adds	r3, #1
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f6      	bne.n	80029d8 <xvprintf+0x144>
      }
      while( !( f & 2 ) && j++ < w ){
 80029ea:	e002      	b.n	80029f2 <xvprintf+0x15e>
        xputc(' ');
 80029ec:	2020      	movs	r0, #32
 80029ee:	f7ff ff13 	bl	8002818 <xputc>
      while( !( f & 2 ) && j++ < w ){
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d105      	bne.n	8002a08 <xvprintf+0x174>
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d8f1      	bhi.n	80029ec <xvprintf+0x158>
      }
      xputs(p);
 8002a08:	69b8      	ldr	r0, [r7, #24]
 8002a0a:	f7ff ff2d 	bl	8002868 <xputs>
      while( j++ < w ){
 8002a0e:	e002      	b.n	8002a16 <xvprintf+0x182>
        xputc(' ');
 8002a10:	2020      	movs	r0, #32
 8002a12:	f7ff ff01 	bl	8002818 <xputc>
      while( j++ < w ){
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d8f6      	bhi.n	8002a10 <xvprintf+0x17c>
      }
      continue;
 8002a22:	e0ab      	b.n	8002b7c <xvprintf+0x2e8>
    case 'C':                                                   /* Character */
      xputc((char)va_arg(arp, int)); continue;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	1d1a      	adds	r2, r3, #4
 8002a28:	603a      	str	r2, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fef2 	bl	8002818 <xputc>
 8002a34:	e0a2      	b.n	8002b7c <xvprintf+0x2e8>
    case 'B':                                                   /* Binary */
      r = 2; break;
 8002a36:	2302      	movs	r3, #2
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
 8002a3a:	e00d      	b.n	8002a58 <xvprintf+0x1c4>
    case 'O':                                                   /* Octal */
      r = 8; break;
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a40:	e00a      	b.n	8002a58 <xvprintf+0x1c4>
    case 'D':                                                   /* Signed
                                                                 *decimal */
    case 'U':                                                   /* Unsigned
                                                                *decimal */
      r = 10; break;
 8002a42:	230a      	movs	r3, #10
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
 8002a46:	e007      	b.n	8002a58 <xvprintf+0x1c4>
    case 'X':                                                   /* Hexdecimal */
      r = 16; break;
 8002a48:	2310      	movs	r3, #16
 8002a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a4c:	e004      	b.n	8002a58 <xvprintf+0x1c4>
    default:                                                    /* Unknown type
                                                                 * *(passthrough)
                                                                 **/
      xputc(c); continue;
 8002a4e:	7ffb      	ldrb	r3, [r7, #31]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fee1 	bl	8002818 <xputc>
 8002a56:	e091      	b.n	8002b7c <xvprintf+0x2e8>
    }

    /* Get an argument and put it in numeral */
    v = ( f & 4 ) ? va_arg(arp, long) : (( d == 'D' ) ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <xvprintf+0x1d8>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	1d1a      	adds	r2, r3, #4
 8002a66:	603a      	str	r2, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	e00b      	b.n	8002a84 <xvprintf+0x1f0>
 8002a6c:	7fbb      	ldrb	r3, [r7, #30]
 8002a6e:	2b44      	cmp	r3, #68	; 0x44
 8002a70:	d104      	bne.n	8002a7c <xvprintf+0x1e8>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	1d1a      	adds	r2, r3, #4
 8002a76:	603a      	str	r2, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	e003      	b.n	8002a84 <xvprintf+0x1f0>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	1d1a      	adds	r2, r3, #4
 8002a80:	603a      	str	r2, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	623b      	str	r3, [r7, #32]
    if( d == 'D' && ( v & 0x80000000 )){
 8002a86:	7fbb      	ldrb	r3, [r7, #30]
 8002a88:	2b44      	cmp	r3, #68	; 0x44
 8002a8a:	d109      	bne.n	8002aa0 <xvprintf+0x20c>
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	da06      	bge.n	8002aa0 <xvprintf+0x20c>
      v = 0 - v;
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	425b      	negs	r3, r3
 8002a96:	623b      	str	r3, [r7, #32]
      f |= 8;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	f043 0308 	orr.w	r3, r3, #8
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    i = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30
    do {
      d = (char)( v % r ); v /= r;
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa8:	fbb3 f2f2 	udiv	r2, r3, r2
 8002aac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002aae:	fb01 f202 	mul.w	r2, r1, r2
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	77bb      	strb	r3, [r7, #30]
 8002ab6:	6a3a      	ldr	r2, [r7, #32]
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	623b      	str	r3, [r7, #32]
      if( d > 9 ){
 8002ac0:	7fbb      	ldrb	r3, [r7, #30]
 8002ac2:	2b09      	cmp	r3, #9
 8002ac4:	d908      	bls.n	8002ad8 <xvprintf+0x244>
        d += ( c == 'x' ) ? 0x27 : 0x07;
 8002ac6:	7ffb      	ldrb	r3, [r7, #31]
 8002ac8:	2b78      	cmp	r3, #120	; 0x78
 8002aca:	d101      	bne.n	8002ad0 <xvprintf+0x23c>
 8002acc:	2227      	movs	r2, #39	; 0x27
 8002ace:	e000      	b.n	8002ad2 <xvprintf+0x23e>
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	7fbb      	ldrb	r3, [r7, #30]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	77bb      	strb	r3, [r7, #30]
      }
      s[i++] = d + '0';
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	633a      	str	r2, [r7, #48]	; 0x30
 8002ade:	7fba      	ldrb	r2, [r7, #30]
 8002ae0:	3230      	adds	r2, #48	; 0x30
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002ae8:	440b      	add	r3, r1
 8002aea:	f803 2c30 	strb.w	r2, [r3, #-48]
    } while( v && i < sizeof( s ));
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <xvprintf+0x266>
 8002af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	d9d4      	bls.n	8002aa4 <xvprintf+0x210>
    if( f & 8 ){
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <xvprintf+0x282>
      s[i++] = '-';
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	633a      	str	r2, [r7, #48]	; 0x30
 8002b0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b0e:	4413      	add	r3, r2
 8002b10:	222d      	movs	r2, #45	; 0x2d
 8002b12:	f803 2c30 	strb.w	r2, [r3, #-48]
    }
    j = i; d = ( f & 1 ) ? '0' : ' ';
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <xvprintf+0x294>
 8002b24:	2330      	movs	r3, #48	; 0x30
 8002b26:	e000      	b.n	8002b2a <xvprintf+0x296>
 8002b28:	2320      	movs	r3, #32
 8002b2a:	77bb      	strb	r3, [r7, #30]
    while( !( f & 2 ) && j++ < w ){
 8002b2c:	e003      	b.n	8002b36 <xvprintf+0x2a2>
      xputc(d);
 8002b2e:	7fbb      	ldrb	r3, [r7, #30]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fe71 	bl	8002818 <xputc>
    while( !( f & 2 ) && j++ < w ){
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <xvprintf+0x2b8>
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d8f0      	bhi.n	8002b2e <xvprintf+0x29a>
    }
    do { xputc(s[--i]); } while( i );
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	633b      	str	r3, [r7, #48]	; 0x30
 8002b52:	f107 0208 	add.w	r2, r7, #8
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	4413      	add	r3, r2
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fe5b 	bl	8002818 <xputc>
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f1      	bne.n	8002b4c <xvprintf+0x2b8>
    while( j++ < w ){
 8002b68:	e002      	b.n	8002b70 <xvprintf+0x2dc>
      xputc(' ');
 8002b6a:	2020      	movs	r0, #32
 8002b6c:	f7ff fe54 	bl	8002818 <xputc>
    while( j++ < w ){
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d8f6      	bhi.n	8002b6a <xvprintf+0x2d6>
    c = *fmt++;                                                 /* Get a char */
 8002b7c:	e68f      	b.n	800289e <xvprintf+0xa>
      break;                                            /* End of format? */
 8002b7e:	bf00      	nop
 8002b80:	e000      	b.n	8002b84 <xvprintf+0x2f0>
      break;                                            /* End of format? */
 8002b82:	bf00      	nop
    }
  }
} /* xvprintf */
 8002b84:	bf00      	nop
 8002b86:	3738      	adds	r7, #56	; 0x38
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b90:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0d      	ldr	r2, [pc, #52]	; (8002bcc <HAL_Init+0x40>)
 8002b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_Init+0x40>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <HAL_Init+0x40>)
 8002ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <HAL_Init+0x40>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <HAL_Init+0x40>)
 8002bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb4:	2003      	movs	r0, #3
 8002bb6:	f000 f94f 	bl	8002e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f000 f808 	bl	8002bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bc0:	f7fe f82c 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023c00 	.word	0x40023c00

08002bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_InitTick+0x54>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <HAL_InitTick+0x58>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f967 	bl	8002ec2 <HAL_SYSTICK_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e00e      	b.n	8002c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b0f      	cmp	r3, #15
 8002c02:	d80a      	bhi.n	8002c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c04:	2200      	movs	r2, #0
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c0c:	f000 f92f 	bl	8002e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c10:	4a06      	ldr	r2, [pc, #24]	; (8002c2c <HAL_InitTick+0x5c>)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e000      	b.n	8002c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20000008 	.word	0x20000008
 8002c28:	20000020 	.word	0x20000020
 8002c2c:	2000001c 	.word	0x2000001c

08002c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_IncTick+0x20>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_IncTick+0x24>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4413      	add	r3, r2
 8002c40:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <HAL_IncTick+0x24>)
 8002c42:	6013      	str	r3, [r2, #0]
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000020 	.word	0x20000020
 8002c54:	20000990 	.word	0x20000990

08002c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <HAL_GetTick+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000990 	.word	0x20000990

08002c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c78:	f7ff ffee 	bl	8002c58 <HAL_GetTick>
 8002c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c88:	d005      	beq.n	8002c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <HAL_Delay+0x44>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4413      	add	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c96:	bf00      	nop
 8002c98:	f7ff ffde 	bl	8002c58 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d8f7      	bhi.n	8002c98 <HAL_Delay+0x28>
  {
  }
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000020 	.word	0x20000020

08002cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <__NVIC_SetPriorityGrouping+0x44>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cea:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <__NVIC_SetPriorityGrouping+0x44>)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	60d3      	str	r3, [r2, #12]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d04:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <__NVIC_GetPriorityGrouping+0x18>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	f003 0307 	and.w	r3, r3, #7
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	db0b      	blt.n	8002d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	f003 021f 	and.w	r2, r3, #31
 8002d34:	4907      	ldr	r1, [pc, #28]	; (8002d54 <__NVIC_EnableIRQ+0x38>)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000e100 	.word	0xe000e100

08002d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	6039      	str	r1, [r7, #0]
 8002d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	db0a      	blt.n	8002d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	490c      	ldr	r1, [pc, #48]	; (8002da4 <__NVIC_SetPriority+0x4c>)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	0112      	lsls	r2, r2, #4
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d80:	e00a      	b.n	8002d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4908      	ldr	r1, [pc, #32]	; (8002da8 <__NVIC_SetPriority+0x50>)
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	3b04      	subs	r3, #4
 8002d90:	0112      	lsls	r2, r2, #4
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	440b      	add	r3, r1
 8002d96:	761a      	strb	r2, [r3, #24]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000e100 	.word	0xe000e100
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f1c3 0307 	rsb	r3, r3, #7
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	bf28      	it	cs
 8002dca:	2304      	movcs	r3, #4
 8002dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2b06      	cmp	r3, #6
 8002dd4:	d902      	bls.n	8002ddc <NVIC_EncodePriority+0x30>
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3b03      	subs	r3, #3
 8002dda:	e000      	b.n	8002dde <NVIC_EncodePriority+0x32>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43da      	mvns	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	401a      	ands	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfe:	43d9      	mvns	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	4313      	orrs	r3, r2
         );
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3724      	adds	r7, #36	; 0x24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e24:	d301      	bcc.n	8002e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e26:	2301      	movs	r3, #1
 8002e28:	e00f      	b.n	8002e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <SysTick_Config+0x40>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e32:	210f      	movs	r1, #15
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e38:	f7ff ff8e 	bl	8002d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <SysTick_Config+0x40>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <SysTick_Config+0x40>)
 8002e44:	2207      	movs	r2, #7
 8002e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	e000e010 	.word	0xe000e010

08002e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ff29 	bl	8002cb8 <__NVIC_SetPriorityGrouping>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e80:	f7ff ff3e 	bl	8002d00 <__NVIC_GetPriorityGrouping>
 8002e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	6978      	ldr	r0, [r7, #20]
 8002e8c:	f7ff ff8e 	bl	8002dac <NVIC_EncodePriority>
 8002e90:	4602      	mov	r2, r0
 8002e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff5d 	bl	8002d58 <__NVIC_SetPriority>
}
 8002e9e:	bf00      	nop
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff31 	bl	8002d1c <__NVIC_EnableIRQ>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ffa2 	bl	8002e14 <SysTick_Config>
 8002ed0:	4603      	mov	r3, r0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7ff feb6 	bl	8002c58 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e099      	b.n	800302c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f18:	e00f      	b.n	8002f3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f1a:	f7ff fe9d 	bl	8002c58 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d908      	bls.n	8002f3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2203      	movs	r2, #3
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e078      	b.n	800302c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e8      	bne.n	8002f1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_DMA_Init+0x158>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d107      	bne.n	8002fa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f023 0307 	bic.w	r3, r3, #7
 8002fba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d117      	bne.n	8002ffe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00e      	beq.n	8002ffe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fb01 	bl	80035e8 <DMA_CheckFifoParam>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2240      	movs	r2, #64	; 0x40
 8002ff0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e016      	b.n	800302c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fab8 	bl	800357c <DMA_CalcBaseAndBitshift>
 800300c:	4603      	mov	r3, r0
 800300e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003014:	223f      	movs	r2, #63	; 0x3f
 8003016:	409a      	lsls	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	f010803f 	.word	0xf010803f

08003038 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_DMA_Start_IT+0x26>
 800305a:	2302      	movs	r3, #2
 800305c:	e040      	b.n	80030e0 <HAL_DMA_Start_IT+0xa8>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d12f      	bne.n	80030d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fa4a 	bl	8003520 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	223f      	movs	r2, #63	; 0x3f
 8003092:	409a      	lsls	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0216 	orr.w	r2, r2, #22
 80030a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d007      	beq.n	80030c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0208 	orr.w	r2, r2, #8
 80030be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e005      	b.n	80030de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030da:	2302      	movs	r3, #2
 80030dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030de:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030f6:	f7ff fdaf 	bl	8002c58 <HAL_GetTick>
 80030fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d008      	beq.n	800311a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2280      	movs	r2, #128	; 0x80
 800310c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e052      	b.n	80031c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0216 	bic.w	r2, r2, #22
 8003128:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003138:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d103      	bne.n	800314a <HAL_DMA_Abort+0x62>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0208 	bic.w	r2, r2, #8
 8003158:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0201 	bic.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800316a:	e013      	b.n	8003194 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800316c:	f7ff fd74 	bl	8002c58 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b05      	cmp	r3, #5
 8003178:	d90c      	bls.n	8003194 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2203      	movs	r2, #3
 8003184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e015      	b.n	80031c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e4      	bne.n	800316c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	223f      	movs	r2, #63	; 0x3f
 80031a8:	409a      	lsls	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d004      	beq.n	80031e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2280      	movs	r2, #128	; 0x80
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e00c      	b.n	8003200 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2205      	movs	r2, #5
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0201 	bic.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003218:	4b92      	ldr	r3, [pc, #584]	; (8003464 <HAL_DMA_IRQHandler+0x258>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a92      	ldr	r2, [pc, #584]	; (8003468 <HAL_DMA_IRQHandler+0x25c>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0a9b      	lsrs	r3, r3, #10
 8003224:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	2208      	movs	r2, #8
 8003238:	409a      	lsls	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01a      	beq.n	8003278 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0204 	bic.w	r2, r2, #4
 800325e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	2208      	movs	r2, #8
 8003266:	409a      	lsls	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329a:	2201      	movs	r2, #1
 800329c:	409a      	lsls	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f043 0202 	orr.w	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	2204      	movs	r2, #4
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d012      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	2204      	movs	r2, #4
 80032d2:	409a      	lsls	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	2210      	movs	r2, #16
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d043      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d03c      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	2210      	movs	r2, #16
 8003308:	409a      	lsls	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d018      	beq.n	800334e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d024      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
 800333a:	e01f      	b.n	800337c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01b      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
 800334c:	e016      	b.n	800337c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0208 	bic.w	r2, r2, #8
 800336a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	2220      	movs	r2, #32
 8003382:	409a      	lsls	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 808e 	beq.w	80034aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8086 	beq.w	80034aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	2220      	movs	r2, #32
 80033a4:	409a      	lsls	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d136      	bne.n	8003424 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0216 	bic.w	r2, r2, #22
 80033c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <HAL_DMA_IRQHandler+0x1da>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0208 	bic.w	r2, r2, #8
 80033f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	223f      	movs	r2, #63	; 0x3f
 80033fc:	409a      	lsls	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003416:	2b00      	cmp	r3, #0
 8003418:	d07d      	beq.n	8003516 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
        }
        return;
 8003422:	e078      	b.n	8003516 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01c      	beq.n	800346c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d108      	bne.n	8003452 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	2b00      	cmp	r3, #0
 8003446:	d030      	beq.n	80034aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
 8003450:	e02b      	b.n	80034aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d027      	beq.n	80034aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
 8003462:	e022      	b.n	80034aa <HAL_DMA_IRQHandler+0x29e>
 8003464:	20000008 	.word	0x20000008
 8003468:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0210 	bic.w	r2, r2, #16
 8003488:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d032      	beq.n	8003518 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d022      	beq.n	8003504 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2205      	movs	r2, #5
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3301      	adds	r3, #1
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d307      	bcc.n	80034f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f2      	bne.n	80034d6 <HAL_DMA_IRQHandler+0x2ca>
 80034f0:	e000      	b.n	80034f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034f2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
 8003514:	e000      	b.n	8003518 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003516:	bf00      	nop
    }
  }
}
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop

08003520 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800353c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d108      	bne.n	8003560 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800355e:	e007      	b.n	8003570 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3b10      	subs	r3, #16
 800358c:	4a14      	ldr	r2, [pc, #80]	; (80035e0 <DMA_CalcBaseAndBitshift+0x64>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003596:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d909      	bls.n	80035be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	659a      	str	r2, [r3, #88]	; 0x58
 80035bc:	e007      	b.n	80035ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035c6:	f023 0303 	bic.w	r3, r3, #3
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	aaaaaaab 	.word	0xaaaaaaab
 80035e4:	08009ed8 	.word	0x08009ed8

080035e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11f      	bne.n	8003642 <DMA_CheckFifoParam+0x5a>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d856      	bhi.n	80036b6 <DMA_CheckFifoParam+0xce>
 8003608:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <DMA_CheckFifoParam+0x28>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003621 	.word	0x08003621
 8003614:	08003633 	.word	0x08003633
 8003618:	08003621 	.word	0x08003621
 800361c:	080036b7 	.word	0x080036b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d046      	beq.n	80036ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e043      	b.n	80036ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800363a:	d140      	bne.n	80036be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003640:	e03d      	b.n	80036be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364a:	d121      	bne.n	8003690 <DMA_CheckFifoParam+0xa8>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b03      	cmp	r3, #3
 8003650:	d837      	bhi.n	80036c2 <DMA_CheckFifoParam+0xda>
 8003652:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <DMA_CheckFifoParam+0x70>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	08003669 	.word	0x08003669
 800365c:	0800366f 	.word	0x0800366f
 8003660:	08003669 	.word	0x08003669
 8003664:	08003681 	.word	0x08003681
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      break;
 800366c:	e030      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d025      	beq.n	80036c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367e:	e022      	b.n	80036c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003688:	d11f      	bne.n	80036ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800368e:	e01c      	b.n	80036ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d903      	bls.n	800369e <DMA_CheckFifoParam+0xb6>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d003      	beq.n	80036a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800369c:	e018      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
      break;
 80036a2:	e015      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      break;
 80036b4:	e00b      	b.n	80036ce <DMA_CheckFifoParam+0xe6>
      break;
 80036b6:	bf00      	nop
 80036b8:	e00a      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e008      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
 80036c0:	e006      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
 80036c4:	e004      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036c6:	bf00      	nop
 80036c8:	e002      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ce:	bf00      	nop
    }
  } 
  
  return status; 
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e159      	b.n	80039b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036fc:	2201      	movs	r2, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	f040 8148 	bne.w	80039aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d005      	beq.n	8003732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800372e:	2b02      	cmp	r3, #2
 8003730:	d130      	bne.n	8003794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2203      	movs	r2, #3
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003768:	2201      	movs	r2, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 0201 	and.w	r2, r3, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	2b03      	cmp	r3, #3
 800379e:	d017      	beq.n	80037d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	2203      	movs	r2, #3
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d123      	bne.n	8003824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	08da      	lsrs	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3208      	adds	r2, #8
 80037e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	220f      	movs	r2, #15
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	08da      	lsrs	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3208      	adds	r2, #8
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0203 	and.w	r2, r3, #3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80a2 	beq.w	80039aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	4b57      	ldr	r3, [pc, #348]	; (80039c8 <HAL_GPIO_Init+0x2e8>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4a56      	ldr	r2, [pc, #344]	; (80039c8 <HAL_GPIO_Init+0x2e8>)
 8003870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003874:	6453      	str	r3, [r2, #68]	; 0x44
 8003876:	4b54      	ldr	r3, [pc, #336]	; (80039c8 <HAL_GPIO_Init+0x2e8>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003882:	4a52      	ldr	r2, [pc, #328]	; (80039cc <HAL_GPIO_Init+0x2ec>)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	3302      	adds	r3, #2
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a49      	ldr	r2, [pc, #292]	; (80039d0 <HAL_GPIO_Init+0x2f0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d019      	beq.n	80038e2 <HAL_GPIO_Init+0x202>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a48      	ldr	r2, [pc, #288]	; (80039d4 <HAL_GPIO_Init+0x2f4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_GPIO_Init+0x1fe>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a47      	ldr	r2, [pc, #284]	; (80039d8 <HAL_GPIO_Init+0x2f8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00d      	beq.n	80038da <HAL_GPIO_Init+0x1fa>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a46      	ldr	r2, [pc, #280]	; (80039dc <HAL_GPIO_Init+0x2fc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <HAL_GPIO_Init+0x1f6>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a45      	ldr	r2, [pc, #276]	; (80039e0 <HAL_GPIO_Init+0x300>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_GPIO_Init+0x1f2>
 80038ce:	2304      	movs	r3, #4
 80038d0:	e008      	b.n	80038e4 <HAL_GPIO_Init+0x204>
 80038d2:	2307      	movs	r3, #7
 80038d4:	e006      	b.n	80038e4 <HAL_GPIO_Init+0x204>
 80038d6:	2303      	movs	r3, #3
 80038d8:	e004      	b.n	80038e4 <HAL_GPIO_Init+0x204>
 80038da:	2302      	movs	r3, #2
 80038dc:	e002      	b.n	80038e4 <HAL_GPIO_Init+0x204>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <HAL_GPIO_Init+0x204>
 80038e2:	2300      	movs	r3, #0
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	f002 0203 	and.w	r2, r2, #3
 80038ea:	0092      	lsls	r2, r2, #2
 80038ec:	4093      	lsls	r3, r2
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f4:	4935      	ldr	r1, [pc, #212]	; (80039cc <HAL_GPIO_Init+0x2ec>)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	089b      	lsrs	r3, r3, #2
 80038fa:	3302      	adds	r3, #2
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003902:	4b38      	ldr	r3, [pc, #224]	; (80039e4 <HAL_GPIO_Init+0x304>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003926:	4a2f      	ldr	r2, [pc, #188]	; (80039e4 <HAL_GPIO_Init+0x304>)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800392c:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <HAL_GPIO_Init+0x304>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003950:	4a24      	ldr	r2, [pc, #144]	; (80039e4 <HAL_GPIO_Init+0x304>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003956:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <HAL_GPIO_Init+0x304>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800397a:	4a1a      	ldr	r2, [pc, #104]	; (80039e4 <HAL_GPIO_Init+0x304>)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003980:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <HAL_GPIO_Init+0x304>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039a4:	4a0f      	ldr	r2, [pc, #60]	; (80039e4 <HAL_GPIO_Init+0x304>)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3301      	adds	r3, #1
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b0f      	cmp	r3, #15
 80039b4:	f67f aea2 	bls.w	80036fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	3724      	adds	r7, #36	; 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40013800 	.word	0x40013800
 80039d0:	40020000 	.word	0x40020000
 80039d4:	40020400 	.word	0x40020400
 80039d8:	40020800 	.word	0x40020800
 80039dc:	40020c00 	.word	0x40020c00
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40013c00 	.word	0x40013c00

080039e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	887b      	ldrh	r3, [r7, #2]
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e001      	b.n	8003a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	807b      	strh	r3, [r7, #2]
 8003a24:	4613      	mov	r3, r2
 8003a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a28:	787b      	ldrb	r3, [r7, #1]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a2e:	887a      	ldrh	r2, [r7, #2]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a34:	e003      	b.n	8003a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a36:	887b      	ldrh	r3, [r7, #2]
 8003a38:	041a      	lsls	r2, r3, #16
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	619a      	str	r2, [r3, #24]
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a4c:	b08f      	sub	sp, #60	; 0x3c
 8003a4e:	af0a      	add	r7, sp, #40	; 0x28
 8003a50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e10f      	b.n	8003c7c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f005 fe9c 	bl	80097b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2203      	movs	r2, #3
 8003a80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f002 fff5 	bl	8006a8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	687e      	ldr	r6, [r7, #4]
 8003aa8:	466d      	mov	r5, sp
 8003aaa:	f106 0410 	add.w	r4, r6, #16
 8003aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003aba:	e885 0003 	stmia.w	r5, {r0, r1}
 8003abe:	1d33      	adds	r3, r6, #4
 8003ac0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ac2:	6838      	ldr	r0, [r7, #0]
 8003ac4:	f002 fecc 	bl	8006860 <USB_CoreInit>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e0d0      	b.n	8003c7c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f002 ffe3 	bl	8006aac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	e04a      	b.n	8003b82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	333d      	adds	r3, #61	; 0x3d
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b00:	7bfa      	ldrb	r2, [r7, #15]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	333c      	adds	r3, #60	; 0x3c
 8003b10:	7bfa      	ldrb	r2, [r7, #15]
 8003b12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	b298      	uxth	r0, r3
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	3342      	adds	r3, #66	; 0x42
 8003b28:	4602      	mov	r2, r0
 8003b2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	333f      	adds	r3, #63	; 0x3f
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3344      	adds	r3, #68	; 0x44
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b54:	7bfa      	ldrb	r2, [r7, #15]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	3348      	adds	r3, #72	; 0x48
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	3350      	adds	r3, #80	; 0x50
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
 8003b82:	7bfa      	ldrb	r2, [r7, #15]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d3af      	bcc.n	8003aec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	73fb      	strb	r3, [r7, #15]
 8003b90:	e044      	b.n	8003c1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b92:	7bfa      	ldrb	r2, [r7, #15]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003bba:	7bfa      	ldrb	r2, [r7, #15]
 8003bbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bbe:	7bfa      	ldrb	r2, [r7, #15]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bd4:	7bfa      	ldrb	r2, [r7, #15]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c00:	7bfa      	ldrb	r2, [r7, #15]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
 8003c1c:	7bfa      	ldrb	r2, [r7, #15]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d3b5      	bcc.n	8003b92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	687e      	ldr	r6, [r7, #4]
 8003c2e:	466d      	mov	r5, sp
 8003c30:	f106 0410 	add.w	r4, r6, #16
 8003c34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c40:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c44:	1d33      	adds	r3, r6, #4
 8003c46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c48:	6838      	ldr	r0, [r7, #0]
 8003c4a:	f002 ff7b 	bl	8006b44 <USB_DevInit>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e00d      	b.n	8003c7c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f003 fff7 	bl	8007c68 <USB_DevDisconnect>

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_PCD_Start+0x1c>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e020      	b.n	8003ce2 <HAL_PCD_Start+0x5e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d109      	bne.n	8003cc4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d005      	beq.n	8003cc4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f002 fecd 	bl	8006a68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f003 ffa7 	bl	8007c26 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003cea:	b590      	push	{r4, r7, lr}
 8003cec:	b08d      	sub	sp, #52	; 0x34
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f004 f865 	bl	8007dd0 <USB_GetMode>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f040 839d 	bne.w	8004448 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f003 ffc9 	bl	8007caa <USB_ReadInterrupts>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 8393 	beq.w	8004446 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f003 ffc0 	bl	8007caa <USB_ReadInterrupts>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d107      	bne.n	8003d44 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f002 0202 	and.w	r2, r2, #2
 8003d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f003 ffae 	bl	8007caa <USB_ReadInterrupts>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d161      	bne.n	8003e1c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0210 	bic.w	r2, r2, #16
 8003d66:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	f003 020f 	and.w	r2, r3, #15
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	4413      	add	r3, r2
 8003d84:	3304      	adds	r3, #4
 8003d86:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	0c5b      	lsrs	r3, r3, #17
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d124      	bne.n	8003dde <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d035      	beq.n	8003e0c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	6a38      	ldr	r0, [r7, #32]
 8003db4:	f003 fde5 	bl	8007982 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dc4:	441a      	add	r2, r3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dd6:	441a      	add	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	619a      	str	r2, [r3, #24]
 8003ddc:	e016      	b.n	8003e0c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	0c5b      	lsrs	r3, r3, #17
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d110      	bne.n	8003e0c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003df0:	2208      	movs	r2, #8
 8003df2:	4619      	mov	r1, r3
 8003df4:	6a38      	ldr	r0, [r7, #32]
 8003df6:	f003 fdc4 	bl	8007982 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e06:	441a      	add	r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0210 	orr.w	r2, r2, #16
 8003e1a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f003 ff42 	bl	8007caa <USB_ReadInterrupts>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e30:	d16e      	bne.n	8003f10 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f003 ff48 	bl	8007cd0 <USB_ReadDevAllOutEpInterrupt>
 8003e40:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003e42:	e062      	b.n	8003f0a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d057      	beq.n	8003efe <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f003 ff6d 	bl	8007d38 <USB_ReadDevOutEPInterrupt>
 8003e5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00c      	beq.n	8003e84 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e76:	461a      	mov	r2, r3
 8003e78:	2301      	movs	r3, #1
 8003e7a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fd98 	bl	80049b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fe92 	bl	8004bcc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eda:	461a      	mov	r2, r3
 8003edc:	2320      	movs	r3, #32
 8003ede:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003efc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	3301      	adds	r3, #1
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d199      	bne.n	8003e44 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f003 fec8 	bl	8007caa <USB_ReadInterrupts>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f24:	f040 80c0 	bne.w	80040a8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 fee9 	bl	8007d04 <USB_ReadDevAllInEpInterrupt>
 8003f32:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f38:	e0b2      	b.n	80040a0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80a7 	beq.w	8004094 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f003 ff0f 	bl	8007d74 <USB_ReadDevInEPInterrupt>
 8003f56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d057      	beq.n	8004012 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	2201      	movs	r2, #1
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	69f9      	ldr	r1, [r7, #28]
 8003f7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f82:	4013      	ands	r3, r2
 8003f84:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f92:	461a      	mov	r2, r3
 8003f94:	2301      	movs	r3, #1
 8003f96:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d132      	bne.n	8004006 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	3348      	adds	r3, #72	; 0x48
 8003fb0:	6819      	ldr	r1, [r3, #0]
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4403      	add	r3, r0
 8003fc0:	3344      	adds	r3, #68	; 0x44
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4419      	add	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4403      	add	r3, r0
 8003fd4:	3348      	adds	r3, #72	; 0x48
 8003fd6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d113      	bne.n	8004006 <HAL_PCD_IRQHandler+0x31c>
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	3350      	adds	r3, #80	; 0x50
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d108      	bne.n	8004006 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ffe:	461a      	mov	r2, r3
 8004000:	2101      	movs	r1, #1
 8004002:	f003 ff17 	bl	8007e34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	b2db      	uxtb	r3, r3
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f005 fc64 	bl	80098da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004028:	461a      	mov	r2, r3
 800402a:	2308      	movs	r3, #8
 800402c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	461a      	mov	r2, r3
 8004046:	2310      	movs	r3, #16
 8004048:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004060:	461a      	mov	r2, r3
 8004062:	2340      	movs	r3, #64	; 0x40
 8004064:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407c:	461a      	mov	r2, r3
 800407e:	2302      	movs	r3, #2
 8004080:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800408c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fc03 	bl	800489a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	3301      	adds	r3, #1
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f47f af49 	bne.w	8003f3a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 fdfc 	bl	8007caa <USB_ReadInterrupts>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040bc:	d122      	bne.n	8004104 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d108      	bne.n	80040ee <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040e4:	2100      	movs	r1, #0
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fe0e 	bl	8004d08 <HAL_PCDEx_LPM_Callback>
 80040ec:	e002      	b.n	80040f4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f005 fc6a 	bl	80099c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004102:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f003 fdce 	bl	8007caa <USB_ReadInterrupts>
 800410e:	4603      	mov	r3, r0
 8004110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004118:	d112      	bne.n	8004140 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b01      	cmp	r3, #1
 8004128:	d102      	bne.n	8004130 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f005 fc26 	bl	800997c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800413e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f003 fdb0 	bl	8007caa <USB_ReadInterrupts>
 800414a:	4603      	mov	r3, r0
 800414c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004154:	f040 80c7 	bne.w	80042e6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2110      	movs	r1, #16
 8004172:	4618      	mov	r0, r3
 8004174:	f002 fe4a 	bl	8006e0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004178:	2300      	movs	r3, #0
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800417c:	e056      	b.n	800422c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418a:	461a      	mov	r2, r3
 800418c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004190:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4413      	add	r3, r2
 800419a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a2:	0151      	lsls	r1, r2, #5
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	440a      	add	r2, r1
 80041a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041b0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c2:	0151      	lsls	r1, r2, #5
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	440a      	add	r2, r1
 80041c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041de:	461a      	mov	r2, r3
 80041e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f6:	0151      	lsls	r1, r2, #5
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	440a      	add	r2, r1
 80041fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004200:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004204:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004220:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004224:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	3301      	adds	r3, #1
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004232:	429a      	cmp	r2, r3
 8004234:	d3a3      	bcc.n	800417e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004244:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004248:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004262:	f043 030b 	orr.w	r3, r3, #11
 8004266:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004278:	f043 030b 	orr.w	r3, r3, #11
 800427c:	6453      	str	r3, [r2, #68]	; 0x44
 800427e:	e015      	b.n	80042ac <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004292:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004296:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a6:	f043 030b 	orr.w	r3, r3, #11
 80042aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042d0:	461a      	mov	r2, r3
 80042d2:	f003 fdaf 	bl	8007e34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f003 fcdd 	bl	8007caa <USB_ReadInterrupts>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042fa:	d124      	bne.n	8004346 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f003 fd73 	bl	8007dec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f002 fddb 	bl	8006ec6 <USB_GetDevSpeed>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681c      	ldr	r4, [r3, #0]
 800431c:	f001 f940 	bl	80055a0 <HAL_RCC_GetHCLKFreq>
 8004320:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004326:	b2db      	uxtb	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	4620      	mov	r0, r4
 800432c:	f002 fafa 	bl	8006924 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f005 fafa 	bl	800992a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004344:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f003 fcad 	bl	8007caa <USB_ReadInterrupts>
 8004350:	4603      	mov	r3, r0
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b08      	cmp	r3, #8
 8004358:	d10a      	bne.n	8004370 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f005 fad7 	bl	800990e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f002 0208 	and.w	r2, r2, #8
 800436e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f003 fc98 	bl	8007caa <USB_ReadInterrupts>
 800437a:	4603      	mov	r3, r0
 800437c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004384:	d10f      	bne.n	80043a6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	b2db      	uxtb	r3, r3
 800438e:	4619      	mov	r1, r3
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f005 fb39 	bl	8009a08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80043a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f003 fc7d 	bl	8007caa <USB_ReadInterrupts>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ba:	d10f      	bne.n	80043dc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f005 fb0c 	bl	80099e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80043da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f003 fc62 	bl	8007caa <USB_ReadInterrupts>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f0:	d10a      	bne.n	8004408 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f005 fb1a 	bl	8009a2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004406:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f003 fc4c 	bl	8007caa <USB_ReadInterrupts>
 8004412:	4603      	mov	r3, r0
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b04      	cmp	r3, #4
 800441a:	d115      	bne.n	8004448 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f005 fb0a 	bl	8009a48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6859      	ldr	r1, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
 8004444:	e000      	b.n	8004448 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004446:	bf00      	nop
    }
  }
}
 8004448:	3734      	adds	r7, #52	; 0x34
 800444a:	46bd      	mov	sp, r7
 800444c:	bd90      	pop	{r4, r7, pc}

0800444e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	460b      	mov	r3, r1
 8004458:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_PCD_SetAddress+0x1a>
 8004464:	2302      	movs	r3, #2
 8004466:	e013      	b.n	8004490 <HAL_PCD_SetAddress+0x42>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	4611      	mov	r1, r2
 8004480:	4618      	mov	r0, r3
 8004482:	f003 fbaa 	bl	8007bda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	70fb      	strb	r3, [r7, #3]
 80044aa:	460b      	mov	r3, r1
 80044ac:	803b      	strh	r3, [r7, #0]
 80044ae:	4613      	mov	r3, r2
 80044b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	da0f      	bge.n	80044de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	f003 020f 	and.w	r2, r3, #15
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	3338      	adds	r3, #56	; 0x38
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	3304      	adds	r3, #4
 80044d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	705a      	strb	r2, [r3, #1]
 80044dc:	e00f      	b.n	80044fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	f003 020f 	and.w	r2, r3, #15
 80044e4:	4613      	mov	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	4413      	add	r3, r2
 80044f4:	3304      	adds	r3, #4
 80044f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800450a:	883a      	ldrh	r2, [r7, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	78ba      	ldrb	r2, [r7, #2]
 8004514:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	785b      	ldrb	r3, [r3, #1]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d004      	beq.n	8004528 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004528:	78bb      	ldrb	r3, [r7, #2]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d102      	bne.n	8004534 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_PCD_EP_Open+0xaa>
 800453e:	2302      	movs	r3, #2
 8004540:	e00e      	b.n	8004560 <HAL_PCD_EP_Open+0xc8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68f9      	ldr	r1, [r7, #12]
 8004550:	4618      	mov	r0, r3
 8004552:	f002 fcdd 	bl	8006f10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800455e:	7afb      	ldrb	r3, [r7, #11]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004574:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004578:	2b00      	cmp	r3, #0
 800457a:	da0f      	bge.n	800459c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	f003 020f 	and.w	r2, r3, #15
 8004582:	4613      	mov	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	3338      	adds	r3, #56	; 0x38
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	4413      	add	r3, r2
 8004590:	3304      	adds	r3, #4
 8004592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	705a      	strb	r2, [r3, #1]
 800459a:	e00f      	b.n	80045bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	f003 020f 	and.w	r2, r3, #15
 80045a2:	4613      	mov	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	3304      	adds	r3, #4
 80045b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_PCD_EP_Close+0x6e>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e00e      	b.n	80045f4 <HAL_PCD_EP_Close+0x8c>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68f9      	ldr	r1, [r7, #12]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f002 fd1b 	bl	8007020 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	460b      	mov	r3, r1
 800460a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800460c:	7afb      	ldrb	r3, [r7, #11]
 800460e:	f003 020f 	and.w	r2, r3, #15
 8004612:	4613      	mov	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4413      	add	r3, r2
 8004622:	3304      	adds	r3, #4
 8004624:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2200      	movs	r2, #0
 8004636:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2200      	movs	r2, #0
 800463c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800463e:	7afb      	ldrb	r3, [r7, #11]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	b2da      	uxtb	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d102      	bne.n	8004658 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004658:	7afb      	ldrb	r3, [r7, #11]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	6979      	ldr	r1, [r7, #20]
 8004670:	f002 fff6 	bl	8007660 <USB_EP0StartXfer>
 8004674:	e008      	b.n	8004688 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	6979      	ldr	r1, [r7, #20]
 8004684:	f002 fda8 	bl	80071d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b086      	sub	sp, #24
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	460b      	mov	r3, r1
 80046a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a2:	7afb      	ldrb	r3, [r7, #11]
 80046a4:	f003 020f 	and.w	r2, r3, #15
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	3338      	adds	r3, #56	; 0x38
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4413      	add	r3, r2
 80046b6:	3304      	adds	r3, #4
 80046b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2200      	movs	r2, #0
 80046ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2201      	movs	r2, #1
 80046d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046d2:	7afb      	ldrb	r3, [r7, #11]
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d102      	bne.n	80046ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046ec:	7afb      	ldrb	r3, [r7, #11]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	6979      	ldr	r1, [r7, #20]
 8004704:	f002 ffac 	bl	8007660 <USB_EP0StartXfer>
 8004708:	e008      	b.n	800471c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	6979      	ldr	r1, [r7, #20]
 8004718:	f002 fd5e 	bl	80071d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	460b      	mov	r3, r1
 8004730:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	f003 020f 	and.w	r2, r3, #15
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	429a      	cmp	r2, r3
 800473e:	d901      	bls.n	8004744 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e050      	b.n	80047e6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004744:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004748:	2b00      	cmp	r3, #0
 800474a:	da0f      	bge.n	800476c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	f003 020f 	and.w	r2, r3, #15
 8004752:	4613      	mov	r3, r2
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	3338      	adds	r3, #56	; 0x38
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	4413      	add	r3, r2
 8004760:	3304      	adds	r3, #4
 8004762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	705a      	strb	r2, [r3, #1]
 800476a:	e00d      	b.n	8004788 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	4613      	mov	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4413      	add	r3, r2
 800477e:	3304      	adds	r3, #4
 8004780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_PCD_EP_SetStall+0x82>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e01e      	b.n	80047e6 <HAL_PCD_EP_SetStall+0xc0>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68f9      	ldr	r1, [r7, #12]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f003 f93b 	bl	8007a32 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	b2d9      	uxtb	r1, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047d6:	461a      	mov	r2, r3
 80047d8:	f003 fb2c 	bl	8007e34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	460b      	mov	r3, r1
 80047f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	f003 020f 	and.w	r2, r3, #15
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	429a      	cmp	r2, r3
 8004806:	d901      	bls.n	800480c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e042      	b.n	8004892 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800480c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004810:	2b00      	cmp	r3, #0
 8004812:	da0f      	bge.n	8004834 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	f003 020f 	and.w	r2, r3, #15
 800481a:	4613      	mov	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	3338      	adds	r3, #56	; 0x38
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	4413      	add	r3, r2
 8004828:	3304      	adds	r3, #4
 800482a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	705a      	strb	r2, [r3, #1]
 8004832:	e00f      	b.n	8004854 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	f003 020f 	and.w	r2, r3, #15
 800483a:	4613      	mov	r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	4413      	add	r3, r2
 800484a:	3304      	adds	r3, #4
 800484c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_PCD_EP_ClrStall+0x86>
 8004870:	2302      	movs	r3, #2
 8004872:	e00e      	b.n	8004892 <HAL_PCD_EP_ClrStall+0xa4>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68f9      	ldr	r1, [r7, #12]
 8004882:	4618      	mov	r0, r3
 8004884:	f003 f943 	bl	8007b0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b08a      	sub	sp, #40	; 0x28
 800489e:	af02      	add	r7, sp, #8
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	1a9b      	subs	r3, r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	3338      	adds	r3, #56	; 0x38
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	3304      	adds	r3, #4
 80048c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d901      	bls.n	80048d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e06c      	b.n	80049ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d902      	bls.n	80048ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3303      	adds	r3, #3
 80048f2:	089b      	lsrs	r3, r3, #2
 80048f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048f6:	e02b      	b.n	8004950 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	429a      	cmp	r2, r3
 800490c:	d902      	bls.n	8004914 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	3303      	adds	r3, #3
 8004918:	089b      	lsrs	r3, r3, #2
 800491a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68d9      	ldr	r1, [r3, #12]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	b2da      	uxtb	r2, r3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800492c:	b2db      	uxtb	r3, r3
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	4603      	mov	r3, r0
 8004932:	6978      	ldr	r0, [r7, #20]
 8004934:	f002 ffe7 	bl	8007906 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	441a      	add	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	699a      	ldr	r2, [r3, #24]
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	441a      	add	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	b29b      	uxth	r3, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	429a      	cmp	r2, r3
 8004964:	d809      	bhi.n	800497a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800496e:	429a      	cmp	r2, r3
 8004970:	d203      	bcs.n	800497a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1be      	bne.n	80048f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	429a      	cmp	r2, r3
 8004984:	d811      	bhi.n	80049aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	2201      	movs	r2, #1
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	43db      	mvns	r3, r3
 80049a0:	6939      	ldr	r1, [r7, #16]
 80049a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a6:	4013      	ands	r3, r2
 80049a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	333c      	adds	r3, #60	; 0x3c
 80049cc:	3304      	adds	r3, #4
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	f040 80a0 	bne.w	8004b2c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d015      	beq.n	8004a22 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4a72      	ldr	r2, [pc, #456]	; (8004bc4 <PCD_EP_OutXfrComplete_int+0x210>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	f240 80dd 	bls.w	8004bba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80d7 	beq.w	8004bba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a1e:	6093      	str	r3, [r2, #8]
 8004a20:	e0cb      	b.n	8004bba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d009      	beq.n	8004a40 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a38:	461a      	mov	r2, r3
 8004a3a:	2320      	movs	r3, #32
 8004a3c:	6093      	str	r3, [r2, #8]
 8004a3e:	e0bc      	b.n	8004bba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f040 80b7 	bne.w	8004bba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4a5d      	ldr	r2, [pc, #372]	; (8004bc4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d90f      	bls.n	8004a74 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a70:	6093      	str	r3, [r2, #8]
 8004a72:	e0a2      	b.n	8004bba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004a86:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	0159      	lsls	r1, r3, #5
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	440b      	add	r3, r1
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004a9a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4403      	add	r3, r0
 8004aaa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004aae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4403      	add	r3, r0
 8004ad2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4419      	add	r1, r3
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4403      	add	r3, r0
 8004ae8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004aec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d114      	bne.n	8004b1e <PCD_EP_OutXfrComplete_int+0x16a>
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d108      	bne.n	8004b1e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b16:	461a      	mov	r2, r3
 8004b18:	2101      	movs	r1, #1
 8004b1a:	f003 f98b 	bl	8007e34 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	4619      	mov	r1, r3
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f004 febd 	bl	80098a4 <HAL_PCD_DataOutStageCallback>
 8004b2a:	e046      	b.n	8004bba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4a26      	ldr	r2, [pc, #152]	; (8004bc8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d124      	bne.n	8004b7e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00a      	beq.n	8004b54 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b50:	6093      	str	r3, [r2, #8]
 8004b52:	e032      	b.n	8004bba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f004 fe94 	bl	80098a4 <HAL_PCD_DataOutStageCallback>
 8004b7c:	e01d      	b.n	8004bba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d114      	bne.n	8004bae <PCD_EP_OutXfrComplete_int+0x1fa>
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d108      	bne.n	8004bae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	2100      	movs	r1, #0
 8004baa:	f003 f943 	bl	8007e34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f004 fe75 	bl	80098a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	4f54300a 	.word	0x4f54300a
 8004bc8:	4f54310a 	.word	0x4f54310a

08004bcc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	333c      	adds	r3, #60	; 0x3c
 8004be4:	3304      	adds	r3, #4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <PCD_EP_OutSetupPacket_int+0x88>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d90e      	bls.n	8004c20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d009      	beq.n	8004c20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f004 fe2d 	bl	8009880 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d90c      	bls.n	8004c48 <PCD_EP_OutSetupPacket_int+0x7c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d108      	bne.n	8004c48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c40:	461a      	mov	r2, r3
 8004c42:	2101      	movs	r1, #1
 8004c44:	f003 f8f6 	bl	8007e34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	4f54300a 	.word	0x4f54300a

08004c58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	70fb      	strb	r3, [r7, #3]
 8004c64:	4613      	mov	r3, r2
 8004c66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d107      	bne.n	8004c86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c76:	883b      	ldrh	r3, [r7, #0]
 8004c78:	0419      	lsls	r1, r3, #16
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	629a      	str	r2, [r3, #40]	; 0x28
 8004c84:	e028      	b.n	8004cd8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4413      	add	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c94:	2300      	movs	r3, #0
 8004c96:	73fb      	strb	r3, [r7, #15]
 8004c98:	e00d      	b.n	8004cb6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ca0:	3340      	adds	r3, #64	; 0x40
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4413      	add	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	73fb      	strb	r3, [r7, #15]
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d3ec      	bcc.n	8004c9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004cc0:	883b      	ldrh	r3, [r7, #0]
 8004cc2:	0418      	lsls	r0, r3, #16
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6819      	ldr	r1, [r3, #0]
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	4302      	orrs	r2, r0
 8004cd0:	3340      	adds	r3, #64	; 0x40
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	887a      	ldrh	r2, [r7, #2]
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e264      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d075      	beq.n	8004e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d3e:	4ba3      	ldr	r3, [pc, #652]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d00c      	beq.n	8004d64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d4a:	4ba0      	ldr	r3, [pc, #640]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d112      	bne.n	8004d7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d56:	4b9d      	ldr	r3, [pc, #628]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d62:	d10b      	bne.n	8004d7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d64:	4b99      	ldr	r3, [pc, #612]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d05b      	beq.n	8004e28 <HAL_RCC_OscConfig+0x108>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d157      	bne.n	8004e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e23f      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d84:	d106      	bne.n	8004d94 <HAL_RCC_OscConfig+0x74>
 8004d86:	4b91      	ldr	r3, [pc, #580]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a90      	ldr	r2, [pc, #576]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	e01d      	b.n	8004dd0 <HAL_RCC_OscConfig+0xb0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d9c:	d10c      	bne.n	8004db8 <HAL_RCC_OscConfig+0x98>
 8004d9e:	4b8b      	ldr	r3, [pc, #556]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a8a      	ldr	r2, [pc, #552]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	4b88      	ldr	r3, [pc, #544]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a87      	ldr	r2, [pc, #540]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	e00b      	b.n	8004dd0 <HAL_RCC_OscConfig+0xb0>
 8004db8:	4b84      	ldr	r3, [pc, #528]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a83      	ldr	r2, [pc, #524]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	4b81      	ldr	r3, [pc, #516]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a80      	ldr	r2, [pc, #512]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d013      	beq.n	8004e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd8:	f7fd ff3e 	bl	8002c58 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004de0:	f7fd ff3a 	bl	8002c58 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b64      	cmp	r3, #100	; 0x64
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e204      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df2:	4b76      	ldr	r3, [pc, #472]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCC_OscConfig+0xc0>
 8004dfe:	e014      	b.n	8004e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e00:	f7fd ff2a 	bl	8002c58 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e08:	f7fd ff26 	bl	8002c58 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	; 0x64
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e1f0      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e1a:	4b6c      	ldr	r3, [pc, #432]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0xe8>
 8004e26:	e000      	b.n	8004e2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d063      	beq.n	8004efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e36:	4b65      	ldr	r3, [pc, #404]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00b      	beq.n	8004e5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e42:	4b62      	ldr	r3, [pc, #392]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d11c      	bne.n	8004e88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e4e:	4b5f      	ldr	r3, [pc, #380]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d116      	bne.n	8004e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e5a:	4b5c      	ldr	r3, [pc, #368]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_RCC_OscConfig+0x152>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d001      	beq.n	8004e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e1c4      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e72:	4b56      	ldr	r3, [pc, #344]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4952      	ldr	r1, [pc, #328]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e86:	e03a      	b.n	8004efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d020      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e90:	4b4f      	ldr	r3, [pc, #316]	; (8004fd0 <HAL_RCC_OscConfig+0x2b0>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e96:	f7fd fedf 	bl	8002c58 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e9e:	f7fd fedb 	bl	8002c58 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e1a5      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb0:	4b46      	ldr	r3, [pc, #280]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0f0      	beq.n	8004e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebc:	4b43      	ldr	r3, [pc, #268]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4940      	ldr	r1, [pc, #256]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	600b      	str	r3, [r1, #0]
 8004ed0:	e015      	b.n	8004efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ed2:	4b3f      	ldr	r3, [pc, #252]	; (8004fd0 <HAL_RCC_OscConfig+0x2b0>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fd febe 	bl	8002c58 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ee0:	f7fd feba 	bl	8002c58 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e184      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ef2:	4b36      	ldr	r3, [pc, #216]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d030      	beq.n	8004f6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d016      	beq.n	8004f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f12:	4b30      	ldr	r3, [pc, #192]	; (8004fd4 <HAL_RCC_OscConfig+0x2b4>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f18:	f7fd fe9e 	bl	8002c58 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f20:	f7fd fe9a 	bl	8002c58 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e164      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f32:	4b26      	ldr	r3, [pc, #152]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x200>
 8004f3e:	e015      	b.n	8004f6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f40:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <HAL_RCC_OscConfig+0x2b4>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f46:	f7fd fe87 	bl	8002c58 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f4e:	f7fd fe83 	bl	8002c58 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e14d      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f60:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80a0 	beq.w	80050ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7e:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10f      	bne.n	8004faa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	4a0e      	ldr	r2, [pc, #56]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f98:	6413      	str	r3, [r2, #64]	; 0x40
 8004f9a:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <HAL_RCC_OscConfig+0x2ac>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <HAL_RCC_OscConfig+0x2b8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d121      	bne.n	8004ffa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb6:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <HAL_RCC_OscConfig+0x2b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a07      	ldr	r2, [pc, #28]	; (8004fd8 <HAL_RCC_OscConfig+0x2b8>)
 8004fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc2:	f7fd fe49 	bl	8002c58 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc8:	e011      	b.n	8004fee <HAL_RCC_OscConfig+0x2ce>
 8004fca:	bf00      	nop
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	42470000 	.word	0x42470000
 8004fd4:	42470e80 	.word	0x42470e80
 8004fd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fdc:	f7fd fe3c 	bl	8002c58 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e106      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fee:	4b85      	ldr	r3, [pc, #532]	; (8005204 <HAL_RCC_OscConfig+0x4e4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d106      	bne.n	8005010 <HAL_RCC_OscConfig+0x2f0>
 8005002:	4b81      	ldr	r3, [pc, #516]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	4a80      	ldr	r2, [pc, #512]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	6713      	str	r3, [r2, #112]	; 0x70
 800500e:	e01c      	b.n	800504a <HAL_RCC_OscConfig+0x32a>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b05      	cmp	r3, #5
 8005016:	d10c      	bne.n	8005032 <HAL_RCC_OscConfig+0x312>
 8005018:	4b7b      	ldr	r3, [pc, #492]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 800501a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501c:	4a7a      	ldr	r2, [pc, #488]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 800501e:	f043 0304 	orr.w	r3, r3, #4
 8005022:	6713      	str	r3, [r2, #112]	; 0x70
 8005024:	4b78      	ldr	r3, [pc, #480]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 8005026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005028:	4a77      	ldr	r2, [pc, #476]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	6713      	str	r3, [r2, #112]	; 0x70
 8005030:	e00b      	b.n	800504a <HAL_RCC_OscConfig+0x32a>
 8005032:	4b75      	ldr	r3, [pc, #468]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	4a74      	ldr	r2, [pc, #464]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	6713      	str	r3, [r2, #112]	; 0x70
 800503e:	4b72      	ldr	r3, [pc, #456]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005042:	4a71      	ldr	r2, [pc, #452]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 8005044:	f023 0304 	bic.w	r3, r3, #4
 8005048:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d015      	beq.n	800507e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005052:	f7fd fe01 	bl	8002c58 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005058:	e00a      	b.n	8005070 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800505a:	f7fd fdfd 	bl	8002c58 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f241 3288 	movw	r2, #5000	; 0x1388
 8005068:	4293      	cmp	r3, r2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e0c5      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005070:	4b65      	ldr	r3, [pc, #404]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0ee      	beq.n	800505a <HAL_RCC_OscConfig+0x33a>
 800507c:	e014      	b.n	80050a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800507e:	f7fd fdeb 	bl	8002c58 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005084:	e00a      	b.n	800509c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005086:	f7fd fde7 	bl	8002c58 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f241 3288 	movw	r2, #5000	; 0x1388
 8005094:	4293      	cmp	r3, r2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e0af      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800509c:	4b5a      	ldr	r3, [pc, #360]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1ee      	bne.n	8005086 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d105      	bne.n	80050ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ae:	4b56      	ldr	r3, [pc, #344]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	4a55      	ldr	r2, [pc, #340]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 80050b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 809b 	beq.w	80051fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050c4:	4b50      	ldr	r3, [pc, #320]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 030c 	and.w	r3, r3, #12
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d05c      	beq.n	800518a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d141      	bne.n	800515c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d8:	4b4c      	ldr	r3, [pc, #304]	; (800520c <HAL_RCC_OscConfig+0x4ec>)
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050de:	f7fd fdbb 	bl	8002c58 <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050e6:	f7fd fdb7 	bl	8002c58 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e081      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f8:	4b43      	ldr	r3, [pc, #268]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f0      	bne.n	80050e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69da      	ldr	r2, [r3, #28]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	019b      	lsls	r3, r3, #6
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	3b01      	subs	r3, #1
 800511e:	041b      	lsls	r3, r3, #16
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	061b      	lsls	r3, r3, #24
 8005128:	4937      	ldr	r1, [pc, #220]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 800512a:	4313      	orrs	r3, r2
 800512c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800512e:	4b37      	ldr	r3, [pc, #220]	; (800520c <HAL_RCC_OscConfig+0x4ec>)
 8005130:	2201      	movs	r2, #1
 8005132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fd fd90 	bl	8002c58 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800513c:	f7fd fd8c 	bl	8002c58 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e056      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514e:	4b2e      	ldr	r3, [pc, #184]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0f0      	beq.n	800513c <HAL_RCC_OscConfig+0x41c>
 800515a:	e04e      	b.n	80051fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515c:	4b2b      	ldr	r3, [pc, #172]	; (800520c <HAL_RCC_OscConfig+0x4ec>)
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005162:	f7fd fd79 	bl	8002c58 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005168:	e008      	b.n	800517c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800516a:	f7fd fd75 	bl	8002c58 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e03f      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517c:	4b22      	ldr	r3, [pc, #136]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1f0      	bne.n	800516a <HAL_RCC_OscConfig+0x44a>
 8005188:	e037      	b.n	80051fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e032      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005196:	4b1c      	ldr	r3, [pc, #112]	; (8005208 <HAL_RCC_OscConfig+0x4e8>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d028      	beq.n	80051f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d121      	bne.n	80051f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d11a      	bne.n	80051f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051c6:	4013      	ands	r3, r2
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d111      	bne.n	80051f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	3b01      	subs	r3, #1
 80051e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d107      	bne.n	80051f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d001      	beq.n	80051fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40007000 	.word	0x40007000
 8005208:	40023800 	.word	0x40023800
 800520c:	42470060 	.word	0x42470060

08005210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e0cc      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005224:	4b68      	ldr	r3, [pc, #416]	; (80053c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d90c      	bls.n	800524c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005232:	4b65      	ldr	r3, [pc, #404]	; (80053c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800523a:	4b63      	ldr	r3, [pc, #396]	; (80053c8 <HAL_RCC_ClockConfig+0x1b8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d001      	beq.n	800524c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0b8      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d020      	beq.n	800529a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005264:	4b59      	ldr	r3, [pc, #356]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	4a58      	ldr	r2, [pc, #352]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800526e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800527c:	4b53      	ldr	r3, [pc, #332]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4a52      	ldr	r2, [pc, #328]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005288:	4b50      	ldr	r3, [pc, #320]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	494d      	ldr	r1, [pc, #308]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	4313      	orrs	r3, r2
 8005298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d044      	beq.n	8005330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d107      	bne.n	80052be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ae:	4b47      	ldr	r3, [pc, #284]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d119      	bne.n	80052ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e07f      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d003      	beq.n	80052ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d107      	bne.n	80052de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ce:	4b3f      	ldr	r3, [pc, #252]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e06f      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052de:	4b3b      	ldr	r3, [pc, #236]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e067      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ee:	4b37      	ldr	r3, [pc, #220]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f023 0203 	bic.w	r2, r3, #3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	4934      	ldr	r1, [pc, #208]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005300:	f7fd fcaa 	bl	8002c58 <HAL_GetTick>
 8005304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005306:	e00a      	b.n	800531e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005308:	f7fd fca6 	bl	8002c58 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	f241 3288 	movw	r2, #5000	; 0x1388
 8005316:	4293      	cmp	r3, r2
 8005318:	d901      	bls.n	800531e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e04f      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531e:	4b2b      	ldr	r3, [pc, #172]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 020c 	and.w	r2, r3, #12
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	429a      	cmp	r2, r3
 800532e:	d1eb      	bne.n	8005308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005330:	4b25      	ldr	r3, [pc, #148]	; (80053c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d20c      	bcs.n	8005358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533e:	4b22      	ldr	r3, [pc, #136]	; (80053c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b20      	ldr	r3, [pc, #128]	; (80053c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e032      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005364:	4b19      	ldr	r3, [pc, #100]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4916      	ldr	r1, [pc, #88]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	4313      	orrs	r3, r2
 8005374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	490e      	ldr	r1, [pc, #56]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	4313      	orrs	r3, r2
 8005394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005396:	f000 f821 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 800539a:	4602      	mov	r2, r0
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	490a      	ldr	r1, [pc, #40]	; (80053d0 <HAL_RCC_ClockConfig+0x1c0>)
 80053a8:	5ccb      	ldrb	r3, [r1, r3]
 80053aa:	fa22 f303 	lsr.w	r3, r2, r3
 80053ae:	4a09      	ldr	r2, [pc, #36]	; (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 80053b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053b2:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <HAL_RCC_ClockConfig+0x1c8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fd fc0a 	bl	8002bd0 <HAL_InitTick>

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40023c00 	.word	0x40023c00
 80053cc:	40023800 	.word	0x40023800
 80053d0:	08009ec0 	.word	0x08009ec0
 80053d4:	20000008 	.word	0x20000008
 80053d8:	2000001c 	.word	0x2000001c

080053dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	607b      	str	r3, [r7, #4]
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	2300      	movs	r3, #0
 80053ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053f4:	4b67      	ldr	r3, [pc, #412]	; (8005594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 030c 	and.w	r3, r3, #12
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d00d      	beq.n	800541c <HAL_RCC_GetSysClockFreq+0x40>
 8005400:	2b08      	cmp	r3, #8
 8005402:	f200 80bd 	bhi.w	8005580 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_RCC_GetSysClockFreq+0x34>
 800540a:	2b04      	cmp	r3, #4
 800540c:	d003      	beq.n	8005416 <HAL_RCC_GetSysClockFreq+0x3a>
 800540e:	e0b7      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005410:	4b61      	ldr	r3, [pc, #388]	; (8005598 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005412:	60bb      	str	r3, [r7, #8]
       break;
 8005414:	e0b7      	b.n	8005586 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005416:	4b61      	ldr	r3, [pc, #388]	; (800559c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005418:	60bb      	str	r3, [r7, #8]
      break;
 800541a:	e0b4      	b.n	8005586 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800541c:	4b5d      	ldr	r3, [pc, #372]	; (8005594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005424:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005426:	4b5b      	ldr	r3, [pc, #364]	; (8005594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d04d      	beq.n	80054ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005432:	4b58      	ldr	r3, [pc, #352]	; (8005594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	099b      	lsrs	r3, r3, #6
 8005438:	461a      	mov	r2, r3
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005442:	f04f 0100 	mov.w	r1, #0
 8005446:	ea02 0800 	and.w	r8, r2, r0
 800544a:	ea03 0901 	and.w	r9, r3, r1
 800544e:	4640      	mov	r0, r8
 8005450:	4649      	mov	r1, r9
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	014b      	lsls	r3, r1, #5
 800545c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005460:	0142      	lsls	r2, r0, #5
 8005462:	4610      	mov	r0, r2
 8005464:	4619      	mov	r1, r3
 8005466:	ebb0 0008 	subs.w	r0, r0, r8
 800546a:	eb61 0109 	sbc.w	r1, r1, r9
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	018b      	lsls	r3, r1, #6
 8005478:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800547c:	0182      	lsls	r2, r0, #6
 800547e:	1a12      	subs	r2, r2, r0
 8005480:	eb63 0301 	sbc.w	r3, r3, r1
 8005484:	f04f 0000 	mov.w	r0, #0
 8005488:	f04f 0100 	mov.w	r1, #0
 800548c:	00d9      	lsls	r1, r3, #3
 800548e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005492:	00d0      	lsls	r0, r2, #3
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	eb12 0208 	adds.w	r2, r2, r8
 800549c:	eb43 0309 	adc.w	r3, r3, r9
 80054a0:	f04f 0000 	mov.w	r0, #0
 80054a4:	f04f 0100 	mov.w	r1, #0
 80054a8:	0259      	lsls	r1, r3, #9
 80054aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80054ae:	0250      	lsls	r0, r2, #9
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4610      	mov	r0, r2
 80054b6:	4619      	mov	r1, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	f7fa fe88 	bl	80001d4 <__aeabi_uldivmod>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4613      	mov	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	e04a      	b.n	8005564 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ce:	4b31      	ldr	r3, [pc, #196]	; (8005594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	099b      	lsrs	r3, r3, #6
 80054d4:	461a      	mov	r2, r3
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054de:	f04f 0100 	mov.w	r1, #0
 80054e2:	ea02 0400 	and.w	r4, r2, r0
 80054e6:	ea03 0501 	and.w	r5, r3, r1
 80054ea:	4620      	mov	r0, r4
 80054ec:	4629      	mov	r1, r5
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	014b      	lsls	r3, r1, #5
 80054f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054fc:	0142      	lsls	r2, r0, #5
 80054fe:	4610      	mov	r0, r2
 8005500:	4619      	mov	r1, r3
 8005502:	1b00      	subs	r0, r0, r4
 8005504:	eb61 0105 	sbc.w	r1, r1, r5
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	018b      	lsls	r3, r1, #6
 8005512:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005516:	0182      	lsls	r2, r0, #6
 8005518:	1a12      	subs	r2, r2, r0
 800551a:	eb63 0301 	sbc.w	r3, r3, r1
 800551e:	f04f 0000 	mov.w	r0, #0
 8005522:	f04f 0100 	mov.w	r1, #0
 8005526:	00d9      	lsls	r1, r3, #3
 8005528:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800552c:	00d0      	lsls	r0, r2, #3
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	1912      	adds	r2, r2, r4
 8005534:	eb45 0303 	adc.w	r3, r5, r3
 8005538:	f04f 0000 	mov.w	r0, #0
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	0299      	lsls	r1, r3, #10
 8005542:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005546:	0290      	lsls	r0, r2, #10
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4610      	mov	r0, r2
 800554e:	4619      	mov	r1, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	461a      	mov	r2, r3
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	f7fa fe3c 	bl	80001d4 <__aeabi_uldivmod>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4613      	mov	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	0c1b      	lsrs	r3, r3, #16
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	3301      	adds	r3, #1
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	60bb      	str	r3, [r7, #8]
      break;
 800557e:	e002      	b.n	8005586 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005582:	60bb      	str	r3, [r7, #8]
      break;
 8005584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005586:	68bb      	ldr	r3, [r7, #8]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005592:	bf00      	nop
 8005594:	40023800 	.word	0x40023800
 8005598:	00f42400 	.word	0x00f42400
 800559c:	007a1200 	.word	0x007a1200

080055a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055a4:	4b03      	ldr	r3, [pc, #12]	; (80055b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80055a6:	681b      	ldr	r3, [r3, #0]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000008 	.word	0x20000008

080055b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055bc:	f7ff fff0 	bl	80055a0 <HAL_RCC_GetHCLKFreq>
 80055c0:	4602      	mov	r2, r0
 80055c2:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	0a9b      	lsrs	r3, r3, #10
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	4903      	ldr	r1, [pc, #12]	; (80055dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ce:	5ccb      	ldrb	r3, [r1, r3]
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40023800 	.word	0x40023800
 80055dc:	08009ed0 	.word	0x08009ed0

080055e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055e4:	f7ff ffdc 	bl	80055a0 <HAL_RCC_GetHCLKFreq>
 80055e8:	4602      	mov	r2, r0
 80055ea:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	0b5b      	lsrs	r3, r3, #13
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	4903      	ldr	r1, [pc, #12]	; (8005604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055f6:	5ccb      	ldrb	r3, [r1, r3]
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40023800 	.word	0x40023800
 8005604:	08009ed0 	.word	0x08009ed0

08005608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e03f      	b.n	800569a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fb fb1c 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2224      	movs	r2, #36	; 0x24
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800564a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 ff3f 	bl	80064d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695a      	ldr	r2, [r3, #20]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08c      	sub	sp, #48	; 0x30
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d165      	bne.n	800578a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <HAL_UART_Transmit_DMA+0x26>
 80056c4:	88fb      	ldrh	r3, [r7, #6]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e05e      	b.n	800578c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_UART_Transmit_DMA+0x38>
 80056d8:	2302      	movs	r3, #2
 80056da:	e057      	b.n	800578c <HAL_UART_Transmit_DMA+0xe8>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	88fa      	ldrh	r2, [r7, #6]
 80056ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	88fa      	ldrh	r2, [r7, #6]
 80056f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2221      	movs	r2, #33	; 0x21
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	4a22      	ldr	r2, [pc, #136]	; (8005794 <HAL_UART_Transmit_DMA+0xf0>)
 800570a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005710:	4a21      	ldr	r2, [pc, #132]	; (8005798 <HAL_UART_Transmit_DMA+0xf4>)
 8005712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005718:	4a20      	ldr	r2, [pc, #128]	; (800579c <HAL_UART_Transmit_DMA+0xf8>)
 800571a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005720:	2200      	movs	r2, #0
 8005722:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005724:	f107 0308 	add.w	r3, r7, #8
 8005728:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	6819      	ldr	r1, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3304      	adds	r3, #4
 8005738:	461a      	mov	r2, r3
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	f7fd fc7c 	bl	8003038 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005748:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3314      	adds	r3, #20
 8005758:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	617b      	str	r3, [r7, #20]
   return(result);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005768:	62bb      	str	r3, [r7, #40]	; 0x28
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3314      	adds	r3, #20
 8005770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005772:	627a      	str	r2, [r7, #36]	; 0x24
 8005774:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6a39      	ldr	r1, [r7, #32]
 8005778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e5      	bne.n	8005752 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	e000      	b.n	800578c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800578a:	2302      	movs	r3, #2
  }
}
 800578c:	4618      	mov	r0, r3
 800578e:	3730      	adds	r7, #48	; 0x30
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	08005d71 	.word	0x08005d71
 8005798:	08005e0b 	.word	0x08005e0b
 800579c:	08005f83 	.word	0x08005f83

080057a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d11d      	bne.n	80057f6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_UART_Receive_DMA+0x26>
 80057c0:	88fb      	ldrh	r3, [r7, #6]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e016      	b.n	80057f8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_UART_Receive_DMA+0x38>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e00f      	b.n	80057f8 <HAL_UART_Receive_DMA+0x58>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	461a      	mov	r2, r3
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fc13 	bl	8006018 <UART_Start_Receive_DMA>
 80057f2:	4603      	mov	r3, r0
 80057f4:	e000      	b.n	80057f8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80057f6:	2302      	movs	r3, #2
  }
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b0ba      	sub	sp, #232	; 0xe8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005826:	2300      	movs	r3, #0
 8005828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800582c:	2300      	movs	r3, #0
 800582e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800583e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10f      	bne.n	8005866 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b00      	cmp	r3, #0
 8005850:	d009      	beq.n	8005866 <HAL_UART_IRQHandler+0x66>
 8005852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fd7b 	bl	800635a <UART_Receive_IT>
      return;
 8005864:	e256      	b.n	8005d14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 80de 	beq.w	8005a2c <HAL_UART_IRQHandler+0x22c>
 8005870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800587c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005880:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80d1 	beq.w	8005a2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800588a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00b      	beq.n	80058ae <HAL_UART_IRQHandler+0xae>
 8005896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d005      	beq.n	80058ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f043 0201 	orr.w	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00b      	beq.n	80058d2 <HAL_UART_IRQHandler+0xd2>
 80058ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f043 0202 	orr.w	r2, r3, #2
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <HAL_UART_IRQHandler+0xf6>
 80058de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f043 0204 	orr.w	r2, r3, #4
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d011      	beq.n	8005926 <HAL_UART_IRQHandler+0x126>
 8005902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d105      	bne.n	800591a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800590e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f043 0208 	orr.w	r2, r3, #8
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 81ed 	beq.w	8005d0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d008      	beq.n	800594e <HAL_UART_IRQHandler+0x14e>
 800593c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005940:	f003 0320 	and.w	r3, r3, #32
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fd06 	bl	800635a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	bf0c      	ite	eq
 800595c:	2301      	moveq	r3, #1
 800595e:	2300      	movne	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <HAL_UART_IRQHandler+0x17a>
 8005972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005976:	2b00      	cmp	r3, #0
 8005978:	d04f      	beq.n	8005a1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fc0e 	bl	800619c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d141      	bne.n	8005a12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3314      	adds	r3, #20
 8005994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3314      	adds	r3, #20
 80059b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1d9      	bne.n	800598e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d013      	beq.n	8005a0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	4a7d      	ldr	r2, [pc, #500]	; (8005bdc <HAL_UART_IRQHandler+0x3dc>)
 80059e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fd fbea 	bl	80031c8 <HAL_DMA_Abort_IT>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d016      	beq.n	8005a28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a04:	4610      	mov	r0, r2
 8005a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a08:	e00e      	b.n	8005a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f99a 	bl	8005d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a10:	e00a      	b.n	8005a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f996 	bl	8005d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a18:	e006      	b.n	8005a28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f992 	bl	8005d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a26:	e170      	b.n	8005d0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a28:	bf00      	nop
    return;
 8005a2a:	e16e      	b.n	8005d0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	f040 814a 	bne.w	8005cca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3a:	f003 0310 	and.w	r3, r3, #16
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8143 	beq.w	8005cca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 813c 	beq.w	8005cca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a52:	2300      	movs	r3, #0
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60bb      	str	r3, [r7, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	f040 80b4 	bne.w	8005be0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8140 	beq.w	8005d0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a96:	429a      	cmp	r2, r3
 8005a98:	f080 8139 	bcs.w	8005d0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aa2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aae:	f000 8088 	beq.w	8005bc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ade:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1d9      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3314      	adds	r3, #20
 8005b04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b10:	f023 0301 	bic.w	r3, r3, #1
 8005b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3314      	adds	r3, #20
 8005b1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e1      	bne.n	8005afe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3314      	adds	r3, #20
 8005b40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3314      	adds	r3, #20
 8005b5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e3      	bne.n	8005b3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b92:	f023 0310 	bic.w	r3, r3, #16
 8005b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ba4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ba6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005baa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e3      	bne.n	8005b80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fd fa93 	bl	80030e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f8c0 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bd8:	e099      	b.n	8005d0e <HAL_UART_IRQHandler+0x50e>
 8005bda:	bf00      	nop
 8005bdc:	08006263 	.word	0x08006263
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 808b 	beq.w	8005d12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005bfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8086 	beq.w	8005d12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	330c      	adds	r3, #12
 8005c26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c2a:	647a      	str	r2, [r7, #68]	; 0x44
 8005c2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e3      	bne.n	8005c06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3314      	adds	r3, #20
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3314      	adds	r3, #20
 8005c5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c62:	633a      	str	r2, [r7, #48]	; 0x30
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e3      	bne.n	8005c3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0310 	bic.w	r3, r3, #16
 8005c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	330c      	adds	r3, #12
 8005ca4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ca8:	61fa      	str	r2, [r7, #28]
 8005caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	69b9      	ldr	r1, [r7, #24]
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e3      	bne.n	8005c84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f848 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cc8:	e023      	b.n	8005d12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <HAL_UART_IRQHandler+0x4ea>
 8005cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fad1 	bl	800628a <UART_Transmit_IT>
    return;
 8005ce8:	e014      	b.n	8005d14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00e      	beq.n	8005d14 <HAL_UART_IRQHandler+0x514>
 8005cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d008      	beq.n	8005d14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fb11 	bl	800632a <UART_EndTransmit_IT>
    return;
 8005d08:	e004      	b.n	8005d14 <HAL_UART_IRQHandler+0x514>
    return;
 8005d0a:	bf00      	nop
 8005d0c:	e002      	b.n	8005d14 <HAL_UART_IRQHandler+0x514>
      return;
 8005d0e:	bf00      	nop
 8005d10:	e000      	b.n	8005d14 <HAL_UART_IRQHandler+0x514>
      return;
 8005d12:	bf00      	nop
  }
}
 8005d14:	37e8      	adds	r7, #232	; 0xe8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop

08005d1c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b090      	sub	sp, #64	; 0x40
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d137      	bne.n	8005dfc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d8e:	2200      	movs	r2, #0
 8005d90:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3314      	adds	r3, #20
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	623b      	str	r3, [r7, #32]
   return(result);
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3314      	adds	r3, #20
 8005db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005db2:	633a      	str	r2, [r7, #48]	; 0x30
 8005db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e5      	bne.n	8005d92 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	330c      	adds	r3, #12
 8005de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005de6:	61fa      	str	r2, [r7, #28]
 8005de8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	69b9      	ldr	r1, [r7, #24]
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	617b      	str	r3, [r7, #20]
   return(result);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e5      	bne.n	8005dc6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dfa:	e002      	b.n	8005e02 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005dfc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005dfe:	f7fa fecf 	bl	8000ba0 <HAL_UART_TxCpltCallback>
}
 8005e02:	bf00      	nop
 8005e04:	3740      	adds	r7, #64	; 0x40
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f7ff ff7f 	bl	8005d1c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b09c      	sub	sp, #112	; 0x70
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d172      	bne.n	8005f28 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e44:	2200      	movs	r2, #0
 8005e46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	330c      	adds	r3, #12
 8005e66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e68:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e6a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e5      	bne.n	8005e48 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3314      	adds	r3, #20
 8005e82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	667b      	str	r3, [r7, #100]	; 0x64
 8005e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3314      	adds	r3, #20
 8005e9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e9c:	647a      	str	r2, [r7, #68]	; 0x44
 8005e9e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e5      	bne.n	8005e7c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3314      	adds	r3, #20
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	623b      	str	r3, [r7, #32]
   return(result);
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3314      	adds	r3, #20
 8005ece:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ed0:	633a      	str	r2, [r7, #48]	; 0x30
 8005ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e5      	bne.n	8005eb0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d119      	bne.n	8005f28 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	330c      	adds	r3, #12
 8005efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0310 	bic.w	r3, r3, #16
 8005f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	330c      	adds	r3, #12
 8005f12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f14:	61fa      	str	r2, [r7, #28]
 8005f16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	69b9      	ldr	r1, [r7, #24]
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	617b      	str	r3, [r7, #20]
   return(result);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e5      	bne.n	8005ef4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d106      	bne.n	8005f3e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f34:	4619      	mov	r1, r3
 8005f36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f38:	f7ff ff0e 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f3c:	e002      	b.n	8005f44 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005f3e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f40:	f7fa fe4a 	bl	8000bd8 <HAL_UART_RxCpltCallback>
}
 8005f44:	bf00      	nop
 8005f46:	3770      	adds	r7, #112	; 0x70
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d108      	bne.n	8005f74 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f66:	085b      	lsrs	r3, r3, #1
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f7ff fef3 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f72:	e002      	b.n	8005f7a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7ff fedb 	bl	8005d30 <HAL_UART_RxHalfCpltCallback>
}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9e:	2b80      	cmp	r3, #128	; 0x80
 8005fa0:	bf0c      	ite	eq
 8005fa2:	2301      	moveq	r3, #1
 8005fa4:	2300      	movne	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b21      	cmp	r3, #33	; 0x21
 8005fb4:	d108      	bne.n	8005fc8 <UART_DMAError+0x46>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d005      	beq.n	8005fc8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005fc2:	68b8      	ldr	r0, [r7, #8]
 8005fc4:	f000 f8c2 	bl	800614c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	bf0c      	ite	eq
 8005fd6:	2301      	moveq	r3, #1
 8005fd8:	2300      	movne	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b22      	cmp	r3, #34	; 0x22
 8005fe8:	d108      	bne.n	8005ffc <UART_DMAError+0x7a>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ff6:	68b8      	ldr	r0, [r7, #8]
 8005ff8:	f000 f8d0 	bl	800619c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	f043 0210 	orr.w	r2, r3, #16
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006008:	68b8      	ldr	r0, [r7, #8]
 800600a:	f7ff fe9b 	bl	8005d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800600e:	bf00      	nop
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b098      	sub	sp, #96	; 0x60
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	4613      	mov	r3, r2
 8006024:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	88fa      	ldrh	r2, [r7, #6]
 8006030:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2222      	movs	r2, #34	; 0x22
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	4a3e      	ldr	r2, [pc, #248]	; (8006140 <UART_Start_Receive_DMA+0x128>)
 8006046:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	4a3d      	ldr	r2, [pc, #244]	; (8006144 <UART_Start_Receive_DMA+0x12c>)
 800604e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	4a3c      	ldr	r2, [pc, #240]	; (8006148 <UART_Start_Receive_DMA+0x130>)
 8006056:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	2200      	movs	r2, #0
 800605e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006060:	f107 0308 	add.w	r3, r7, #8
 8006064:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3304      	adds	r3, #4
 8006070:	4619      	mov	r1, r3
 8006072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	88fb      	ldrh	r3, [r7, #6]
 8006078:	f7fc ffde 	bl	8003038 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800607c:	2300      	movs	r3, #0
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	613b      	str	r3, [r7, #16]
 8006090:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	330c      	adds	r3, #12
 80060a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	330c      	adds	r3, #12
 80060b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80060bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80060c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80060c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e5      	bne.n	800609a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3314      	adds	r3, #20
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	657b      	str	r3, [r7, #84]	; 0x54
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3314      	adds	r3, #20
 80060ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80060f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e5      	bne.n	80060ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3314      	adds	r3, #20
 8006108:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	617b      	str	r3, [r7, #20]
   return(result);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006118:	653b      	str	r3, [r7, #80]	; 0x50
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3314      	adds	r3, #20
 8006120:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006122:	627a      	str	r2, [r7, #36]	; 0x24
 8006124:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	6a39      	ldr	r1, [r7, #32]
 8006128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e5      	bne.n	8006102 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3760      	adds	r7, #96	; 0x60
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	08005e27 	.word	0x08005e27
 8006144:	08005f4d 	.word	0x08005f4d
 8006148:	08005f83 	.word	0x08005f83

0800614c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800614c:	b480      	push	{r7}
 800614e:	b089      	sub	sp, #36	; 0x24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	330c      	adds	r3, #12
 800615a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	60bb      	str	r3, [r7, #8]
   return(result);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800616a:	61fb      	str	r3, [r7, #28]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	330c      	adds	r3, #12
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	61ba      	str	r2, [r7, #24]
 8006176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006178:	6979      	ldr	r1, [r7, #20]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	e841 2300 	strex	r3, r2, [r1]
 8006180:	613b      	str	r3, [r7, #16]
   return(result);
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e5      	bne.n	8006154 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006190:	bf00      	nop
 8006192:	3724      	adds	r7, #36	; 0x24
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b095      	sub	sp, #84	; 0x54
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	330c      	adds	r3, #12
 80061c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061c4:	643a      	str	r2, [r7, #64]	; 0x40
 80061c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e5      	bne.n	80061a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3314      	adds	r3, #20
 80061de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f023 0301 	bic.w	r3, r3, #1
 80061ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3314      	adds	r3, #20
 80061f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e5      	bne.n	80061d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	2b01      	cmp	r3, #1
 8006212:	d119      	bne.n	8006248 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	330c      	adds	r3, #12
 800621a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	60bb      	str	r3, [r7, #8]
   return(result);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f023 0310 	bic.w	r3, r3, #16
 800622a:	647b      	str	r3, [r7, #68]	; 0x44
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	330c      	adds	r3, #12
 8006232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006234:	61ba      	str	r2, [r7, #24]
 8006236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6979      	ldr	r1, [r7, #20]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	613b      	str	r3, [r7, #16]
   return(result);
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e5      	bne.n	8006214 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006256:	bf00      	nop
 8006258:	3754      	adds	r7, #84	; 0x54
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7ff fd61 	bl	8005d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800628a:	b480      	push	{r7}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b21      	cmp	r3, #33	; 0x21
 800629c:	d13e      	bne.n	800631c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a6:	d114      	bne.n	80062d2 <UART_Transmit_IT+0x48>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d110      	bne.n	80062d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	1c9a      	adds	r2, r3, #2
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	621a      	str	r2, [r3, #32]
 80062d0:	e008      	b.n	80062e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	1c59      	adds	r1, r3, #1
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6211      	str	r1, [r2, #32]
 80062dc:	781a      	ldrb	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4619      	mov	r1, r3
 80062f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10f      	bne.n	8006318 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006306:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006316:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006318:	2300      	movs	r3, #0
 800631a:	e000      	b.n	800631e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800631c:	2302      	movs	r3, #2
  }
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b082      	sub	sp, #8
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006340:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7fa fc28 	bl	8000ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b08c      	sub	sp, #48	; 0x30
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b22      	cmp	r3, #34	; 0x22
 800636c:	f040 80ab 	bne.w	80064c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006378:	d117      	bne.n	80063aa <UART_Receive_IT+0x50>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d113      	bne.n	80063aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006382:	2300      	movs	r3, #0
 8006384:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	b29b      	uxth	r3, r3
 8006394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006398:	b29a      	uxth	r2, r3
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a2:	1c9a      	adds	r2, r3, #2
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	629a      	str	r2, [r3, #40]	; 0x28
 80063a8:	e026      	b.n	80063f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063bc:	d007      	beq.n	80063ce <UART_Receive_IT+0x74>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <UART_Receive_IT+0x82>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	701a      	strb	r2, [r3, #0]
 80063da:	e008      	b.n	80063ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29b      	uxth	r3, r3
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	4619      	mov	r1, r3
 8006406:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006408:	2b00      	cmp	r3, #0
 800640a:	d15a      	bne.n	80064c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0220 	bic.w	r2, r2, #32
 800641a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800642a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695a      	ldr	r2, [r3, #20]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 0201 	bic.w	r2, r2, #1
 800643a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	2b01      	cmp	r3, #1
 800644a:	d135      	bne.n	80064b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	613b      	str	r3, [r7, #16]
   return(result);
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f023 0310 	bic.w	r3, r3, #16
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006472:	623a      	str	r2, [r7, #32]
 8006474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	69f9      	ldr	r1, [r7, #28]
 8006478:	6a3a      	ldr	r2, [r7, #32]
 800647a:	e841 2300 	strex	r3, r2, [r1]
 800647e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e5      	bne.n	8006452 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0310 	and.w	r3, r3, #16
 8006490:	2b10      	cmp	r3, #16
 8006492:	d10a      	bne.n	80064aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff fc51 	bl	8005d58 <HAL_UARTEx_RxEventCallback>
 80064b6:	e002      	b.n	80064be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7fa fb8d 	bl	8000bd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	e002      	b.n	80064c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e000      	b.n	80064c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80064c6:	2302      	movs	r3, #2
  }
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3730      	adds	r7, #48	; 0x30
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	b09f      	sub	sp, #124	; 0x7c
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e6:	68d9      	ldr	r1, [r3, #12]
 80064e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	ea40 0301 	orr.w	r3, r0, r1
 80064f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	431a      	orrs	r2, r3
 8006502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	4313      	orrs	r3, r2
 8006508:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800650a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006514:	f021 010c 	bic.w	r1, r1, #12
 8006518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800651e:	430b      	orrs	r3, r1
 8006520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800652c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652e:	6999      	ldr	r1, [r3, #24]
 8006530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	ea40 0301 	orr.w	r3, r0, r1
 8006538:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800653a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4bc5      	ldr	r3, [pc, #788]	; (8006854 <UART_SetConfig+0x384>)
 8006540:	429a      	cmp	r2, r3
 8006542:	d004      	beq.n	800654e <UART_SetConfig+0x7e>
 8006544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4bc3      	ldr	r3, [pc, #780]	; (8006858 <UART_SetConfig+0x388>)
 800654a:	429a      	cmp	r2, r3
 800654c:	d103      	bne.n	8006556 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800654e:	f7ff f847 	bl	80055e0 <HAL_RCC_GetPCLK2Freq>
 8006552:	6778      	str	r0, [r7, #116]	; 0x74
 8006554:	e002      	b.n	800655c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006556:	f7ff f82f 	bl	80055b8 <HAL_RCC_GetPCLK1Freq>
 800655a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800655c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006564:	f040 80b6 	bne.w	80066d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800656a:	461c      	mov	r4, r3
 800656c:	f04f 0500 	mov.w	r5, #0
 8006570:	4622      	mov	r2, r4
 8006572:	462b      	mov	r3, r5
 8006574:	1891      	adds	r1, r2, r2
 8006576:	6439      	str	r1, [r7, #64]	; 0x40
 8006578:	415b      	adcs	r3, r3
 800657a:	647b      	str	r3, [r7, #68]	; 0x44
 800657c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006580:	1912      	adds	r2, r2, r4
 8006582:	eb45 0303 	adc.w	r3, r5, r3
 8006586:	f04f 0000 	mov.w	r0, #0
 800658a:	f04f 0100 	mov.w	r1, #0
 800658e:	00d9      	lsls	r1, r3, #3
 8006590:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006594:	00d0      	lsls	r0, r2, #3
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	1911      	adds	r1, r2, r4
 800659c:	6639      	str	r1, [r7, #96]	; 0x60
 800659e:	416b      	adcs	r3, r5
 80065a0:	667b      	str	r3, [r7, #100]	; 0x64
 80065a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	1891      	adds	r1, r2, r2
 80065ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80065b0:	415b      	adcs	r3, r3
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80065bc:	f7f9 fe0a 	bl	80001d4 <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4ba5      	ldr	r3, [pc, #660]	; (800685c <UART_SetConfig+0x38c>)
 80065c6:	fba3 2302 	umull	r2, r3, r3, r2
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	011e      	lsls	r6, r3, #4
 80065ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d0:	461c      	mov	r4, r3
 80065d2:	f04f 0500 	mov.w	r5, #0
 80065d6:	4622      	mov	r2, r4
 80065d8:	462b      	mov	r3, r5
 80065da:	1891      	adds	r1, r2, r2
 80065dc:	6339      	str	r1, [r7, #48]	; 0x30
 80065de:	415b      	adcs	r3, r3
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
 80065e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80065e6:	1912      	adds	r2, r2, r4
 80065e8:	eb45 0303 	adc.w	r3, r5, r3
 80065ec:	f04f 0000 	mov.w	r0, #0
 80065f0:	f04f 0100 	mov.w	r1, #0
 80065f4:	00d9      	lsls	r1, r3, #3
 80065f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065fa:	00d0      	lsls	r0, r2, #3
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	1911      	adds	r1, r2, r4
 8006602:	65b9      	str	r1, [r7, #88]	; 0x58
 8006604:	416b      	adcs	r3, r5
 8006606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	461a      	mov	r2, r3
 800660e:	f04f 0300 	mov.w	r3, #0
 8006612:	1891      	adds	r1, r2, r2
 8006614:	62b9      	str	r1, [r7, #40]	; 0x28
 8006616:	415b      	adcs	r3, r3
 8006618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800661a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800661e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006622:	f7f9 fdd7 	bl	80001d4 <__aeabi_uldivmod>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4b8c      	ldr	r3, [pc, #560]	; (800685c <UART_SetConfig+0x38c>)
 800662c:	fba3 1302 	umull	r1, r3, r3, r2
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	2164      	movs	r1, #100	; 0x64
 8006634:	fb01 f303 	mul.w	r3, r1, r3
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	3332      	adds	r3, #50	; 0x32
 800663e:	4a87      	ldr	r2, [pc, #540]	; (800685c <UART_SetConfig+0x38c>)
 8006640:	fba2 2303 	umull	r2, r3, r2, r3
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800664c:	441e      	add	r6, r3
 800664e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006650:	4618      	mov	r0, r3
 8006652:	f04f 0100 	mov.w	r1, #0
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	1894      	adds	r4, r2, r2
 800665c:	623c      	str	r4, [r7, #32]
 800665e:	415b      	adcs	r3, r3
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
 8006662:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006666:	1812      	adds	r2, r2, r0
 8006668:	eb41 0303 	adc.w	r3, r1, r3
 800666c:	f04f 0400 	mov.w	r4, #0
 8006670:	f04f 0500 	mov.w	r5, #0
 8006674:	00dd      	lsls	r5, r3, #3
 8006676:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800667a:	00d4      	lsls	r4, r2, #3
 800667c:	4622      	mov	r2, r4
 800667e:	462b      	mov	r3, r5
 8006680:	1814      	adds	r4, r2, r0
 8006682:	653c      	str	r4, [r7, #80]	; 0x50
 8006684:	414b      	adcs	r3, r1
 8006686:	657b      	str	r3, [r7, #84]	; 0x54
 8006688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	461a      	mov	r2, r3
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	1891      	adds	r1, r2, r2
 8006694:	61b9      	str	r1, [r7, #24]
 8006696:	415b      	adcs	r3, r3
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800669e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80066a2:	f7f9 fd97 	bl	80001d4 <__aeabi_uldivmod>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4b6c      	ldr	r3, [pc, #432]	; (800685c <UART_SetConfig+0x38c>)
 80066ac:	fba3 1302 	umull	r1, r3, r3, r2
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	2164      	movs	r1, #100	; 0x64
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	3332      	adds	r3, #50	; 0x32
 80066be:	4a67      	ldr	r2, [pc, #412]	; (800685c <UART_SetConfig+0x38c>)
 80066c0:	fba2 2303 	umull	r2, r3, r2, r3
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f003 0207 	and.w	r2, r3, #7
 80066ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4432      	add	r2, r6
 80066d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066d2:	e0b9      	b.n	8006848 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066d6:	461c      	mov	r4, r3
 80066d8:	f04f 0500 	mov.w	r5, #0
 80066dc:	4622      	mov	r2, r4
 80066de:	462b      	mov	r3, r5
 80066e0:	1891      	adds	r1, r2, r2
 80066e2:	6139      	str	r1, [r7, #16]
 80066e4:	415b      	adcs	r3, r3
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80066ec:	1912      	adds	r2, r2, r4
 80066ee:	eb45 0303 	adc.w	r3, r5, r3
 80066f2:	f04f 0000 	mov.w	r0, #0
 80066f6:	f04f 0100 	mov.w	r1, #0
 80066fa:	00d9      	lsls	r1, r3, #3
 80066fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006700:	00d0      	lsls	r0, r2, #3
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	eb12 0804 	adds.w	r8, r2, r4
 800670a:	eb43 0905 	adc.w	r9, r3, r5
 800670e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	4618      	mov	r0, r3
 8006714:	f04f 0100 	mov.w	r1, #0
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	008b      	lsls	r3, r1, #2
 8006722:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006726:	0082      	lsls	r2, r0, #2
 8006728:	4640      	mov	r0, r8
 800672a:	4649      	mov	r1, r9
 800672c:	f7f9 fd52 	bl	80001d4 <__aeabi_uldivmod>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4b49      	ldr	r3, [pc, #292]	; (800685c <UART_SetConfig+0x38c>)
 8006736:	fba3 2302 	umull	r2, r3, r3, r2
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	011e      	lsls	r6, r3, #4
 800673e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006740:	4618      	mov	r0, r3
 8006742:	f04f 0100 	mov.w	r1, #0
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	1894      	adds	r4, r2, r2
 800674c:	60bc      	str	r4, [r7, #8]
 800674e:	415b      	adcs	r3, r3
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006756:	1812      	adds	r2, r2, r0
 8006758:	eb41 0303 	adc.w	r3, r1, r3
 800675c:	f04f 0400 	mov.w	r4, #0
 8006760:	f04f 0500 	mov.w	r5, #0
 8006764:	00dd      	lsls	r5, r3, #3
 8006766:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800676a:	00d4      	lsls	r4, r2, #3
 800676c:	4622      	mov	r2, r4
 800676e:	462b      	mov	r3, r5
 8006770:	1814      	adds	r4, r2, r0
 8006772:	64bc      	str	r4, [r7, #72]	; 0x48
 8006774:	414b      	adcs	r3, r1
 8006776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	4618      	mov	r0, r3
 800677e:	f04f 0100 	mov.w	r1, #0
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	008b      	lsls	r3, r1, #2
 800678c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006790:	0082      	lsls	r2, r0, #2
 8006792:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006796:	f7f9 fd1d 	bl	80001d4 <__aeabi_uldivmod>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4b2f      	ldr	r3, [pc, #188]	; (800685c <UART_SetConfig+0x38c>)
 80067a0:	fba3 1302 	umull	r1, r3, r3, r2
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	2164      	movs	r1, #100	; 0x64
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	3332      	adds	r3, #50	; 0x32
 80067b2:	4a2a      	ldr	r2, [pc, #168]	; (800685c <UART_SetConfig+0x38c>)
 80067b4:	fba2 2303 	umull	r2, r3, r2, r3
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067be:	441e      	add	r6, r3
 80067c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c2:	4618      	mov	r0, r3
 80067c4:	f04f 0100 	mov.w	r1, #0
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	1894      	adds	r4, r2, r2
 80067ce:	603c      	str	r4, [r7, #0]
 80067d0:	415b      	adcs	r3, r3
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d8:	1812      	adds	r2, r2, r0
 80067da:	eb41 0303 	adc.w	r3, r1, r3
 80067de:	f04f 0400 	mov.w	r4, #0
 80067e2:	f04f 0500 	mov.w	r5, #0
 80067e6:	00dd      	lsls	r5, r3, #3
 80067e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067ec:	00d4      	lsls	r4, r2, #3
 80067ee:	4622      	mov	r2, r4
 80067f0:	462b      	mov	r3, r5
 80067f2:	eb12 0a00 	adds.w	sl, r2, r0
 80067f6:	eb43 0b01 	adc.w	fp, r3, r1
 80067fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	4618      	mov	r0, r3
 8006800:	f04f 0100 	mov.w	r1, #0
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	f04f 0300 	mov.w	r3, #0
 800680c:	008b      	lsls	r3, r1, #2
 800680e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006812:	0082      	lsls	r2, r0, #2
 8006814:	4650      	mov	r0, sl
 8006816:	4659      	mov	r1, fp
 8006818:	f7f9 fcdc 	bl	80001d4 <__aeabi_uldivmod>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4b0e      	ldr	r3, [pc, #56]	; (800685c <UART_SetConfig+0x38c>)
 8006822:	fba3 1302 	umull	r1, r3, r3, r2
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	2164      	movs	r1, #100	; 0x64
 800682a:	fb01 f303 	mul.w	r3, r1, r3
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	3332      	adds	r3, #50	; 0x32
 8006834:	4a09      	ldr	r2, [pc, #36]	; (800685c <UART_SetConfig+0x38c>)
 8006836:	fba2 2303 	umull	r2, r3, r2, r3
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	f003 020f 	and.w	r2, r3, #15
 8006840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4432      	add	r2, r6
 8006846:	609a      	str	r2, [r3, #8]
}
 8006848:	bf00      	nop
 800684a:	377c      	adds	r7, #124	; 0x7c
 800684c:	46bd      	mov	sp, r7
 800684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006852:	bf00      	nop
 8006854:	40011000 	.word	0x40011000
 8006858:	40011400 	.word	0x40011400
 800685c:	51eb851f 	.word	0x51eb851f

08006860 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006860:	b084      	sub	sp, #16
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	f107 001c 	add.w	r0, r7, #28
 800686e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	2b01      	cmp	r3, #1
 8006876:	d122      	bne.n	80068be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800688c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d105      	bne.n	80068b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fb1c 	bl	8007ef0 <USB_CoreReset>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]
 80068bc:	e01a      	b.n	80068f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fb10 	bl	8007ef0 <USB_CoreReset>
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	639a      	str	r2, [r3, #56]	; 0x38
 80068e6:	e005      	b.n	80068f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d10b      	bne.n	8006912 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f043 0206 	orr.w	r2, r3, #6
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f043 0220 	orr.w	r2, r3, #32
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800691e:	b004      	add	sp, #16
 8006920:	4770      	bx	lr
	...

08006924 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	2b02      	cmp	r3, #2
 8006936:	d165      	bne.n	8006a04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4a41      	ldr	r2, [pc, #260]	; (8006a40 <USB_SetTurnaroundTime+0x11c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d906      	bls.n	800694e <USB_SetTurnaroundTime+0x2a>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4a40      	ldr	r2, [pc, #256]	; (8006a44 <USB_SetTurnaroundTime+0x120>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d202      	bcs.n	800694e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006948:	230f      	movs	r3, #15
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	e062      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4a3c      	ldr	r2, [pc, #240]	; (8006a44 <USB_SetTurnaroundTime+0x120>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d306      	bcc.n	8006964 <USB_SetTurnaroundTime+0x40>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4a3b      	ldr	r2, [pc, #236]	; (8006a48 <USB_SetTurnaroundTime+0x124>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d202      	bcs.n	8006964 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800695e:	230e      	movs	r3, #14
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	e057      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4a38      	ldr	r2, [pc, #224]	; (8006a48 <USB_SetTurnaroundTime+0x124>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d306      	bcc.n	800697a <USB_SetTurnaroundTime+0x56>
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4a37      	ldr	r2, [pc, #220]	; (8006a4c <USB_SetTurnaroundTime+0x128>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d202      	bcs.n	800697a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006974:	230d      	movs	r3, #13
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	e04c      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	4a33      	ldr	r2, [pc, #204]	; (8006a4c <USB_SetTurnaroundTime+0x128>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d306      	bcc.n	8006990 <USB_SetTurnaroundTime+0x6c>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	4a32      	ldr	r2, [pc, #200]	; (8006a50 <USB_SetTurnaroundTime+0x12c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d802      	bhi.n	8006990 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800698a:	230c      	movs	r3, #12
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	e041      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	4a2f      	ldr	r2, [pc, #188]	; (8006a50 <USB_SetTurnaroundTime+0x12c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d906      	bls.n	80069a6 <USB_SetTurnaroundTime+0x82>
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4a2e      	ldr	r2, [pc, #184]	; (8006a54 <USB_SetTurnaroundTime+0x130>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d802      	bhi.n	80069a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80069a0:	230b      	movs	r3, #11
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	e036      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	4a2a      	ldr	r2, [pc, #168]	; (8006a54 <USB_SetTurnaroundTime+0x130>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d906      	bls.n	80069bc <USB_SetTurnaroundTime+0x98>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4a29      	ldr	r2, [pc, #164]	; (8006a58 <USB_SetTurnaroundTime+0x134>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d802      	bhi.n	80069bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80069b6:	230a      	movs	r3, #10
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	e02b      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4a26      	ldr	r2, [pc, #152]	; (8006a58 <USB_SetTurnaroundTime+0x134>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d906      	bls.n	80069d2 <USB_SetTurnaroundTime+0xae>
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4a25      	ldr	r2, [pc, #148]	; (8006a5c <USB_SetTurnaroundTime+0x138>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d202      	bcs.n	80069d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80069cc:	2309      	movs	r3, #9
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	e020      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	4a21      	ldr	r2, [pc, #132]	; (8006a5c <USB_SetTurnaroundTime+0x138>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d306      	bcc.n	80069e8 <USB_SetTurnaroundTime+0xc4>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4a20      	ldr	r2, [pc, #128]	; (8006a60 <USB_SetTurnaroundTime+0x13c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d802      	bhi.n	80069e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80069e2:	2308      	movs	r3, #8
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	e015      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4a1d      	ldr	r2, [pc, #116]	; (8006a60 <USB_SetTurnaroundTime+0x13c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d906      	bls.n	80069fe <USB_SetTurnaroundTime+0xda>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4a1c      	ldr	r2, [pc, #112]	; (8006a64 <USB_SetTurnaroundTime+0x140>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d202      	bcs.n	80069fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80069f8:	2307      	movs	r3, #7
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e00a      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80069fe:	2306      	movs	r3, #6
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	e007      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d102      	bne.n	8006a10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a0a:	2309      	movs	r3, #9
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	e001      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a10:	2309      	movs	r3, #9
 8006a12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	029b      	lsls	r3, r3, #10
 8006a28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	371c      	adds	r7, #28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	00d8acbf 	.word	0x00d8acbf
 8006a44:	00e4e1c0 	.word	0x00e4e1c0
 8006a48:	00f42400 	.word	0x00f42400
 8006a4c:	01067380 	.word	0x01067380
 8006a50:	011a499f 	.word	0x011a499f
 8006a54:	01312cff 	.word	0x01312cff
 8006a58:	014ca43f 	.word	0x014ca43f
 8006a5c:	016e3600 	.word	0x016e3600
 8006a60:	01a6ab1f 	.word	0x01a6ab1f
 8006a64:	01e84800 	.word	0x01e84800

08006a68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f043 0201 	orr.w	r2, r3, #1
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f023 0201 	bic.w	r2, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d115      	bne.n	8006afa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ada:	2001      	movs	r0, #1
 8006adc:	f7fc f8c8 	bl	8002c70 <HAL_Delay>
      ms++;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 f972 	bl	8007dd0 <USB_GetMode>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d01e      	beq.n	8006b30 <USB_SetCurrentMode+0x84>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b31      	cmp	r3, #49	; 0x31
 8006af6:	d9f0      	bls.n	8006ada <USB_SetCurrentMode+0x2e>
 8006af8:	e01a      	b.n	8006b30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d115      	bne.n	8006b2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b0c:	2001      	movs	r0, #1
 8006b0e:	f7fc f8af 	bl	8002c70 <HAL_Delay>
      ms++;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3301      	adds	r3, #1
 8006b16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 f959 	bl	8007dd0 <USB_GetMode>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <USB_SetCurrentMode+0x84>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b31      	cmp	r3, #49	; 0x31
 8006b28:	d9f0      	bls.n	8006b0c <USB_SetCurrentMode+0x60>
 8006b2a:	e001      	b.n	8006b30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e005      	b.n	8006b3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b32      	cmp	r3, #50	; 0x32
 8006b34:	d101      	bne.n	8006b3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b44:	b084      	sub	sp, #16
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b086      	sub	sp, #24
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b5e:	2300      	movs	r3, #0
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	e009      	b.n	8006b78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	3340      	adds	r3, #64	; 0x40
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	2200      	movs	r2, #0
 8006b70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	3301      	adds	r3, #1
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	2b0e      	cmp	r3, #14
 8006b7c:	d9f2      	bls.n	8006b64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d11c      	bne.n	8006bbe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b92:	f043 0302 	orr.w	r3, r3, #2
 8006b96:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38
 8006bbc:	e00b      	b.n	8006bd6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bdc:	461a      	mov	r2, r3
 8006bde:	2300      	movs	r3, #0
 8006be0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be8:	4619      	mov	r1, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	680b      	ldr	r3, [r1, #0]
 8006bf4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d10c      	bne.n	8006c16 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d104      	bne.n	8006c0c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c02:	2100      	movs	r1, #0
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f945 	bl	8006e94 <USB_SetDevSpeed>
 8006c0a:	e008      	b.n	8006c1e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f940 	bl	8006e94 <USB_SetDevSpeed>
 8006c14:	e003      	b.n	8006c1e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c16:	2103      	movs	r1, #3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f93b 	bl	8006e94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c1e:	2110      	movs	r1, #16
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f8f3 	bl	8006e0c <USB_FlushTxFifo>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f90f 	bl	8006e54 <USB_FlushRxFifo>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c46:	461a      	mov	r2, r3
 8006c48:	2300      	movs	r3, #0
 8006c4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c52:	461a      	mov	r2, r3
 8006c54:	2300      	movs	r3, #0
 8006c56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5e:	461a      	mov	r2, r3
 8006c60:	2300      	movs	r3, #0
 8006c62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c64:	2300      	movs	r3, #0
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	e043      	b.n	8006cf2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c80:	d118      	bne.n	8006cb4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c94:	461a      	mov	r2, r3
 8006c96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c9a:	6013      	str	r3, [r2, #0]
 8006c9c:	e013      	b.n	8006cc6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006caa:	461a      	mov	r2, r3
 8006cac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cb0:	6013      	str	r3, [r2, #0]
 8006cb2:	e008      	b.n	8006cc6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d3b7      	bcc.n	8006c6a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	e043      	b.n	8006d88 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d16:	d118      	bne.n	8006d4a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10a      	bne.n	8006d34 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e013      	b.n	8006d5c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d40:	461a      	mov	r2, r3
 8006d42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	e008      	b.n	8006d5c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d56:	461a      	mov	r2, r3
 8006d58:	2300      	movs	r3, #0
 8006d5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	3301      	adds	r3, #1
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d3b7      	bcc.n	8006d00 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006da2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006db0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d105      	bne.n	8006dc4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	f043 0210 	orr.w	r2, r3, #16
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	699a      	ldr	r2, [r3, #24]
 8006dc8:	4b0f      	ldr	r3, [pc, #60]	; (8006e08 <USB_DevInit+0x2c4>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f043 0208 	orr.w	r2, r3, #8
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d107      	bne.n	8006df8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006df0:	f043 0304 	orr.w	r3, r3, #4
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e04:	b004      	add	sp, #16
 8006e06:	4770      	bx	lr
 8006e08:	803c3800 	.word	0x803c3800

08006e0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	019b      	lsls	r3, r3, #6
 8006e1e:	f043 0220 	orr.w	r2, r3, #32
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	4a08      	ldr	r2, [pc, #32]	; (8006e50 <USB_FlushTxFifo+0x44>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d901      	bls.n	8006e36 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e006      	b.n	8006e44 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	f003 0320 	and.w	r3, r3, #32
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d0f1      	beq.n	8006e26 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	00030d40 	.word	0x00030d40

08006e54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2210      	movs	r2, #16
 8006e64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	4a08      	ldr	r2, [pc, #32]	; (8006e90 <USB_FlushRxFifo+0x3c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d901      	bls.n	8006e76 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e006      	b.n	8006e84 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f003 0310 	and.w	r3, r3, #16
 8006e7e:	2b10      	cmp	r3, #16
 8006e80:	d0f1      	beq.n	8006e66 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	00030d40 	.word	0x00030d40

08006e94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	68f9      	ldr	r1, [r7, #12]
 8006eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b087      	sub	sp, #28
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 0306 	and.w	r3, r3, #6
 8006ede:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d102      	bne.n	8006eec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	75fb      	strb	r3, [r7, #23]
 8006eea:	e00a      	b.n	8006f02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d002      	beq.n	8006ef8 <USB_GetDevSpeed+0x32>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b06      	cmp	r3, #6
 8006ef6:	d102      	bne.n	8006efe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ef8:	2302      	movs	r3, #2
 8006efa:	75fb      	strb	r3, [r7, #23]
 8006efc:	e001      	b.n	8006f02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006efe:	230f      	movs	r3, #15
 8006f00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	785b      	ldrb	r3, [r3, #1]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d13a      	bne.n	8006fa2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f32:	69da      	ldr	r2, [r3, #28]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	f003 030f 	and.w	r3, r3, #15
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	68f9      	ldr	r1, [r7, #12]
 8006f46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d155      	bne.n	8007010 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	78db      	ldrb	r3, [r3, #3]
 8006f7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	059b      	lsls	r3, r3, #22
 8006f86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	0151      	lsls	r1, r2, #5
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	440a      	add	r2, r1
 8006f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	e036      	b.n	8007010 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa8:	69da      	ldr	r2, [r3, #28]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb8:	041b      	lsls	r3, r3, #16
 8006fba:	68f9      	ldr	r1, [r7, #12]
 8006fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d11a      	bne.n	8007010 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	78db      	ldrb	r3, [r3, #3]
 8006ff4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ff6:	430b      	orrs	r3, r1
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	0151      	lsls	r1, r2, #5
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	440a      	add	r2, r1
 8007002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800700a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800700e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
	...

08007020 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	785b      	ldrb	r3, [r3, #1]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d161      	bne.n	8007100 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800704e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007052:	d11f      	bne.n	8007094 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	0151      	lsls	r1, r2, #5
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	440a      	add	r2, r1
 800706a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007072:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	0151      	lsls	r1, r2, #5
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	440a      	add	r2, r1
 800708a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007092:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	f003 030f 	and.w	r3, r3, #15
 80070a4:	2101      	movs	r1, #1
 80070a6:	fa01 f303 	lsl.w	r3, r1, r3
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	43db      	mvns	r3, r3
 80070ae:	68f9      	ldr	r1, [r7, #12]
 80070b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070b4:	4013      	ands	r3, r2
 80070b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070be:	69da      	ldr	r2, [r3, #28]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	2101      	movs	r1, #1
 80070ca:	fa01 f303 	lsl.w	r3, r1, r3
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	43db      	mvns	r3, r3
 80070d2:	68f9      	ldr	r1, [r7, #12]
 80070d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070d8:	4013      	ands	r3, r2
 80070da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	0159      	lsls	r1, r3, #5
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	440b      	add	r3, r1
 80070f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f6:	4619      	mov	r1, r3
 80070f8:	4b35      	ldr	r3, [pc, #212]	; (80071d0 <USB_DeactivateEndpoint+0x1b0>)
 80070fa:	4013      	ands	r3, r2
 80070fc:	600b      	str	r3, [r1, #0]
 80070fe:	e060      	b.n	80071c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007116:	d11f      	bne.n	8007158 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007132:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007136:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007152:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007156:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800715e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	2101      	movs	r1, #1
 800716a:	fa01 f303 	lsl.w	r3, r1, r3
 800716e:	041b      	lsls	r3, r3, #16
 8007170:	43db      	mvns	r3, r3
 8007172:	68f9      	ldr	r1, [r7, #12]
 8007174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007178:	4013      	ands	r3, r2
 800717a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007182:	69da      	ldr	r2, [r3, #28]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	2101      	movs	r1, #1
 800718e:	fa01 f303 	lsl.w	r3, r1, r3
 8007192:	041b      	lsls	r3, r3, #16
 8007194:	43db      	mvns	r3, r3
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800719c:	4013      	ands	r3, r2
 800719e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	0159      	lsls	r1, r3, #5
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	440b      	add	r3, r1
 80071b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ba:	4619      	mov	r1, r3
 80071bc:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <USB_DeactivateEndpoint+0x1b4>)
 80071be:	4013      	ands	r3, r2
 80071c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	ec337800 	.word	0xec337800
 80071d4:	eff37800 	.word	0xeff37800

080071d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08a      	sub	sp, #40	; 0x28
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	4613      	mov	r3, r2
 80071e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	f040 815c 	bne.w	80074b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d132      	bne.n	8007268 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007220:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007224:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007240:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007244:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	0151      	lsls	r1, r2, #5
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	440a      	add	r2, r1
 800725c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007260:	0cdb      	lsrs	r3, r3, #19
 8007262:	04db      	lsls	r3, r3, #19
 8007264:	6113      	str	r3, [r2, #16]
 8007266:	e074      	b.n	8007352 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	0151      	lsls	r1, r2, #5
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	440a      	add	r2, r1
 800727e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007282:	0cdb      	lsrs	r3, r3, #19
 8007284:	04db      	lsls	r3, r3, #19
 8007286:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	0151      	lsls	r1, r2, #5
 800729a:	69fa      	ldr	r2, [r7, #28]
 800729c:	440a      	add	r2, r1
 800729e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	6959      	ldr	r1, [r3, #20]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	440b      	add	r3, r1
 80072c4:	1e59      	subs	r1, r3, #1
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80072ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80072d0:	4b9d      	ldr	r3, [pc, #628]	; (8007548 <USB_EPStartXfer+0x370>)
 80072d2:	400b      	ands	r3, r1
 80072d4:	69b9      	ldr	r1, [r7, #24]
 80072d6:	0148      	lsls	r0, r1, #5
 80072d8:	69f9      	ldr	r1, [r7, #28]
 80072da:	4401      	add	r1, r0
 80072dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072e0:	4313      	orrs	r3, r2
 80072e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f0:	691a      	ldr	r2, [r3, #16]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072fa:	69b9      	ldr	r1, [r7, #24]
 80072fc:	0148      	lsls	r0, r1, #5
 80072fe:	69f9      	ldr	r1, [r7, #28]
 8007300:	4401      	add	r1, r0
 8007302:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007306:	4313      	orrs	r3, r2
 8007308:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	78db      	ldrb	r3, [r3, #3]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d11f      	bne.n	8007352 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	0151      	lsls	r1, r2, #5
 8007324:	69fa      	ldr	r2, [r7, #28]
 8007326:	440a      	add	r2, r1
 8007328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007330:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	0151      	lsls	r1, r2, #5
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	440a      	add	r2, r1
 8007348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800734c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007350:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d14b      	bne.n	80073f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d009      	beq.n	8007374 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736c:	461a      	mov	r2, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	78db      	ldrb	r3, [r3, #3]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d128      	bne.n	80073ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007388:	2b00      	cmp	r3, #0
 800738a:	d110      	bne.n	80073ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	e00f      	b.n	80073ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	69fa      	ldr	r2, [r7, #28]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	69fa      	ldr	r2, [r7, #28]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	e12f      	b.n	8007650 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800740e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	78db      	ldrb	r3, [r3, #3]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d015      	beq.n	8007444 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8117 	beq.w	8007650 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	f003 030f 	and.w	r3, r3, #15
 8007432:	2101      	movs	r1, #1
 8007434:	fa01 f303 	lsl.w	r3, r1, r3
 8007438:	69f9      	ldr	r1, [r7, #28]
 800743a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800743e:	4313      	orrs	r3, r2
 8007440:	634b      	str	r3, [r1, #52]	; 0x34
 8007442:	e105      	b.n	8007650 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007450:	2b00      	cmp	r3, #0
 8007452:	d110      	bne.n	8007476 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	4413      	add	r3, r2
 800745c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	0151      	lsls	r1, r2, #5
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	440a      	add	r2, r1
 800746a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	e00f      	b.n	8007496 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	440a      	add	r2, r1
 800748c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007494:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	68d9      	ldr	r1, [r3, #12]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	781a      	ldrb	r2, [r3, #0]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	b298      	uxth	r0, r3
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	4603      	mov	r3, r0
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 fa2b 	bl	8007906 <USB_WritePacket>
 80074b0:	e0ce      	b.n	8007650 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	69ba      	ldr	r2, [r7, #24]
 80074c2:	0151      	lsls	r1, r2, #5
 80074c4:	69fa      	ldr	r2, [r7, #28]
 80074c6:	440a      	add	r2, r1
 80074c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074cc:	0cdb      	lsrs	r3, r3, #19
 80074ce:	04db      	lsls	r3, r3, #19
 80074d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	0151      	lsls	r1, r2, #5
 80074e4:	69fa      	ldr	r2, [r7, #28]
 80074e6:	440a      	add	r2, r1
 80074e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d126      	bne.n	800754c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750a:	691a      	ldr	r2, [r3, #16]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007514:	69b9      	ldr	r1, [r7, #24]
 8007516:	0148      	lsls	r0, r1, #5
 8007518:	69f9      	ldr	r1, [r7, #28]
 800751a:	4401      	add	r1, r0
 800751c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007520:	4313      	orrs	r3, r2
 8007522:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	440a      	add	r2, r1
 800753a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800753e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007542:	6113      	str	r3, [r2, #16]
 8007544:	e036      	b.n	80075b4 <USB_EPStartXfer+0x3dc>
 8007546:	bf00      	nop
 8007548:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	695a      	ldr	r2, [r3, #20]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	4413      	add	r3, r2
 8007556:	1e5a      	subs	r2, r3, #1
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007560:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756e:	691a      	ldr	r2, [r3, #16]
 8007570:	8afb      	ldrh	r3, [r7, #22]
 8007572:	04d9      	lsls	r1, r3, #19
 8007574:	4b39      	ldr	r3, [pc, #228]	; (800765c <USB_EPStartXfer+0x484>)
 8007576:	400b      	ands	r3, r1
 8007578:	69b9      	ldr	r1, [r7, #24]
 800757a:	0148      	lsls	r0, r1, #5
 800757c:	69f9      	ldr	r1, [r7, #28]
 800757e:	4401      	add	r1, r0
 8007580:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007584:	4313      	orrs	r3, r2
 8007586:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007594:	691a      	ldr	r2, [r3, #16]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	8af9      	ldrh	r1, [r7, #22]
 800759c:	fb01 f303 	mul.w	r3, r1, r3
 80075a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075a4:	69b9      	ldr	r1, [r7, #24]
 80075a6:	0148      	lsls	r0, r1, #5
 80075a8:	69f9      	ldr	r1, [r7, #28]
 80075aa:	4401      	add	r1, r0
 80075ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075b0:	4313      	orrs	r3, r2
 80075b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d10d      	bne.n	80075d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d009      	beq.n	80075d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	68d9      	ldr	r1, [r3, #12]
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d2:	460a      	mov	r2, r1
 80075d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	78db      	ldrb	r3, [r3, #3]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d128      	bne.n	8007630 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d110      	bne.n	8007610 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	0151      	lsls	r1, r2, #5
 8007600:	69fa      	ldr	r2, [r7, #28]
 8007602:	440a      	add	r2, r1
 8007604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007608:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	e00f      	b.n	8007630 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	0151      	lsls	r1, r2, #5
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	440a      	add	r2, r1
 8007626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800762a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800762e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	440a      	add	r2, r1
 8007646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800764a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800764e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3720      	adds	r7, #32
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	1ff80000 	.word	0x1ff80000

08007660 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	2b01      	cmp	r3, #1
 800767e:	f040 80cd 	bne.w	800781c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d132      	bne.n	80076f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	0151      	lsls	r1, r2, #5
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	440a      	add	r2, r1
 80076a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	0151      	lsls	r1, r2, #5
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	440a      	add	r2, r1
 80076c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	0151      	lsls	r1, r2, #5
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	440a      	add	r2, r1
 80076e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e8:	0cdb      	lsrs	r3, r3, #19
 80076ea:	04db      	lsls	r3, r3, #19
 80076ec:	6113      	str	r3, [r2, #16]
 80076ee:	e04e      	b.n	800778e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	0151      	lsls	r1, r2, #5
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	440a      	add	r2, r1
 8007706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800770a:	0cdb      	lsrs	r3, r3, #19
 800770c:	04db      	lsls	r3, r3, #19
 800770e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	0151      	lsls	r1, r2, #5
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	440a      	add	r2, r1
 8007726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800772a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800772e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007732:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	695a      	ldr	r2, [r3, #20]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	429a      	cmp	r2, r3
 800773e:	d903      	bls.n	8007748 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	0151      	lsls	r1, r2, #5
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	440a      	add	r2, r1
 800775e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800777e:	6939      	ldr	r1, [r7, #16]
 8007780:	0148      	lsls	r0, r1, #5
 8007782:	6979      	ldr	r1, [r7, #20]
 8007784:	4401      	add	r1, r0
 8007786:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800778a:	4313      	orrs	r3, r2
 800778c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d11e      	bne.n	80077d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d009      	beq.n	80077b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	461a      	mov	r2, r3
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	0151      	lsls	r1, r2, #5
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	440a      	add	r2, r1
 80077c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	e092      	b.n	80078f8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	0151      	lsls	r1, r2, #5
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	440a      	add	r2, r1
 80077e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d07e      	beq.n	80078f8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	f003 030f 	and.w	r3, r3, #15
 800780a:	2101      	movs	r1, #1
 800780c:	fa01 f303 	lsl.w	r3, r1, r3
 8007810:	6979      	ldr	r1, [r7, #20]
 8007812:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007816:	4313      	orrs	r3, r2
 8007818:	634b      	str	r3, [r1, #52]	; 0x34
 800781a:	e06d      	b.n	80078f8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	0151      	lsls	r1, r2, #5
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	440a      	add	r2, r1
 8007832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007836:	0cdb      	lsrs	r3, r3, #19
 8007838:	04db      	lsls	r3, r3, #19
 800783a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	0151      	lsls	r1, r2, #5
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	440a      	add	r2, r1
 8007852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007856:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800785a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800785e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	0151      	lsls	r1, r2, #5
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	440a      	add	r2, r1
 8007886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800788a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800788e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789c:	691a      	ldr	r2, [r3, #16]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078a6:	6939      	ldr	r1, [r7, #16]
 80078a8:	0148      	lsls	r0, r1, #5
 80078aa:	6979      	ldr	r1, [r7, #20]
 80078ac:	4401      	add	r1, r0
 80078ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078b2:	4313      	orrs	r3, r2
 80078b4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d10d      	bne.n	80078d8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d009      	beq.n	80078d8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	68d9      	ldr	r1, [r3, #12]
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d4:	460a      	mov	r2, r1
 80078d6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	371c      	adds	r7, #28
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007906:	b480      	push	{r7}
 8007908:	b089      	sub	sp, #36	; 0x24
 800790a:	af00      	add	r7, sp, #0
 800790c:	60f8      	str	r0, [r7, #12]
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	4611      	mov	r1, r2
 8007912:	461a      	mov	r2, r3
 8007914:	460b      	mov	r3, r1
 8007916:	71fb      	strb	r3, [r7, #7]
 8007918:	4613      	mov	r3, r2
 800791a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007924:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007928:	2b00      	cmp	r3, #0
 800792a:	d123      	bne.n	8007974 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800792c:	88bb      	ldrh	r3, [r7, #4]
 800792e:	3303      	adds	r3, #3
 8007930:	089b      	lsrs	r3, r3, #2
 8007932:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007934:	2300      	movs	r3, #0
 8007936:	61bb      	str	r3, [r7, #24]
 8007938:	e018      	b.n	800796c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800793a:	79fb      	ldrb	r3, [r7, #7]
 800793c:	031a      	lsls	r2, r3, #12
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	4413      	add	r3, r2
 8007942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007946:	461a      	mov	r2, r3
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	3301      	adds	r3, #1
 8007952:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	3301      	adds	r3, #1
 8007958:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	3301      	adds	r3, #1
 800795e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	3301      	adds	r3, #1
 8007964:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	3301      	adds	r3, #1
 800796a:	61bb      	str	r3, [r7, #24]
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	429a      	cmp	r2, r3
 8007972:	d3e2      	bcc.n	800793a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3724      	adds	r7, #36	; 0x24
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007982:	b480      	push	{r7}
 8007984:	b08b      	sub	sp, #44	; 0x2c
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	4613      	mov	r3, r2
 800798e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007998:	88fb      	ldrh	r3, [r7, #6]
 800799a:	089b      	lsrs	r3, r3, #2
 800799c:	b29b      	uxth	r3, r3
 800799e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80079a0:	88fb      	ldrh	r3, [r7, #6]
 80079a2:	f003 0303 	and.w	r3, r3, #3
 80079a6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80079a8:	2300      	movs	r3, #0
 80079aa:	623b      	str	r3, [r7, #32]
 80079ac:	e014      	b.n	80079d8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	601a      	str	r2, [r3, #0]
    pDest++;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	3301      	adds	r3, #1
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	3301      	adds	r3, #1
 80079c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	3301      	adds	r3, #1
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	3301      	adds	r3, #1
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	3301      	adds	r3, #1
 80079d6:	623b      	str	r3, [r7, #32]
 80079d8:	6a3a      	ldr	r2, [r7, #32]
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d3e6      	bcc.n	80079ae <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80079e0:	8bfb      	ldrh	r3, [r7, #30]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01e      	beq.n	8007a24 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079f0:	461a      	mov	r2, r3
 80079f2:	f107 0310 	add.w	r3, r7, #16
 80079f6:	6812      	ldr	r2, [r2, #0]
 80079f8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	fa22 f303 	lsr.w	r3, r2, r3
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	701a      	strb	r2, [r3, #0]
      i++;
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	3301      	adds	r3, #1
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007a18:	8bfb      	ldrh	r3, [r7, #30]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a1e:	8bfb      	ldrh	r3, [r7, #30]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1ea      	bne.n	80079fa <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	372c      	adds	r7, #44	; 0x2c
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	785b      	ldrb	r3, [r3, #1]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d12c      	bne.n	8007aa8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	db12      	blt.n	8007a86 <USB_EPSetStall+0x54>
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00f      	beq.n	8007a86 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	0151      	lsls	r1, r2, #5
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	440a      	add	r2, r1
 8007a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a84:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	0151      	lsls	r1, r2, #5
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	440a      	add	r2, r1
 8007a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	e02b      	b.n	8007b00 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	db12      	blt.n	8007ae0 <USB_EPSetStall+0xae>
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00f      	beq.n	8007ae0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	0151      	lsls	r1, r2, #5
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	440a      	add	r2, r1
 8007ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ada:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ade:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	0151      	lsls	r1, r2, #5
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	440a      	add	r2, r1
 8007af6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007afe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b085      	sub	sp, #20
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d128      	bne.n	8007b7c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	0151      	lsls	r1, r2, #5
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	440a      	add	r2, r1
 8007b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	78db      	ldrb	r3, [r3, #3]
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d003      	beq.n	8007b5a <USB_EPClearStall+0x4c>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	78db      	ldrb	r3, [r3, #3]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d138      	bne.n	8007bcc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	0151      	lsls	r1, r2, #5
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	440a      	add	r2, r1
 8007b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	e027      	b.n	8007bcc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	0151      	lsls	r1, r2, #5
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	440a      	add	r2, r1
 8007b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	78db      	ldrb	r3, [r3, #3]
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d003      	beq.n	8007bac <USB_EPClearStall+0x9e>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	78db      	ldrb	r3, [r3, #3]
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d10f      	bne.n	8007bcc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	0151      	lsls	r1, r2, #5
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	440a      	add	r2, r1
 8007bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bca:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bf8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007bfc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	78fb      	ldrb	r3, [r7, #3]
 8007c08:	011b      	lsls	r3, r3, #4
 8007c0a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007c0e:	68f9      	ldr	r1, [r7, #12]
 8007c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c14:	4313      	orrs	r3, r2
 8007c16:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b085      	sub	sp, #20
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c40:	f023 0303 	bic.w	r3, r3, #3
 8007c44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c54:	f023 0302 	bic.w	r3, r3, #2
 8007c58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c82:	f023 0303 	bic.w	r3, r3, #3
 8007c86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c96:	f043 0302 	orr.w	r3, r3, #2
 8007c9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	0c1b      	lsrs	r3, r3, #16
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	4013      	ands	r3, r2
 8007d26:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	b29b      	uxth	r3, r3
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5e:	695b      	ldr	r3, [r3, #20]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	4013      	ands	r3, r2
 8007d64:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d66:	68bb      	ldr	r3, [r7, #8]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d96:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	fa22 f303 	lsr.w	r3, r2, r3
 8007da4:	01db      	lsls	r3, r3, #7
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007dae:	78fb      	ldrb	r3, [r7, #3]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	371c      	adds	r7, #28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	f003 0301 	and.w	r3, r3, #1
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e06:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e0a:	f023 0307 	bic.w	r3, r3, #7
 8007e0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
	...

08007e34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	333c      	adds	r3, #60	; 0x3c
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	4a26      	ldr	r2, [pc, #152]	; (8007eec <USB_EP0_OutStart+0xb8>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d90a      	bls.n	8007e6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e68:	d101      	bne.n	8007e6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e037      	b.n	8007ede <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e74:	461a      	mov	r2, r3
 8007e76:	2300      	movs	r3, #0
 8007e78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e9c:	f043 0318 	orr.w	r3, r3, #24
 8007ea0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007eb4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007eb6:	7afb      	ldrb	r3, [r7, #11]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d10f      	bne.n	8007edc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ed6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007eda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	371c      	adds	r7, #28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	4f54300a 	.word	0x4f54300a

08007ef0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	4a13      	ldr	r2, [pc, #76]	; (8007f50 <USB_CoreReset+0x60>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d901      	bls.n	8007f0c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e01a      	b.n	8007f42 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	daf3      	bge.n	8007efc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	f043 0201 	orr.w	r2, r3, #1
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	3301      	adds	r3, #1
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	4a09      	ldr	r2, [pc, #36]	; (8007f50 <USB_CoreReset+0x60>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d901      	bls.n	8007f34 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e006      	b.n	8007f42 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d0f1      	beq.n	8007f24 <USB_CoreReset+0x34>

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	00030d40 	.word	0x00030d40

08007f54 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007f60:	2010      	movs	r0, #16
 8007f62:	f001 fef7 	bl	8009d54 <USBD_static_malloc>
 8007f66:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d105      	bne.n	8007f7a <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007f76:	2302      	movs	r3, #2
 8007f78:	e01b      	b.n	8007fb2 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	7c1b      	ldrb	r3, [r3, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d103      	bne.n	8007f92 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2207      	movs	r2, #7
 8007f8e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007f90:	e002      	b.n	8007f98 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	220a      	movs	r2, #10
 8007f96:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007f98:	2304      	movs	r3, #4
 8007f9a:	2203      	movs	r2, #3
 8007f9c:	2181      	movs	r1, #129	; 0x81
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fdc7 	bl	8009b32 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007fc6:	2181      	movs	r1, #129	; 0x81
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 fdd8 	bl	8009b7e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d009      	beq.n	8007ff8 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fea:	4618      	mov	r0, r3
 8007fec:	f001 fec0 	bl	8009d70 <USBD_static_free>
    pdev->pClassData = NULL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008014:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008024:	2303      	movs	r3, #3
 8008026:	e0e8      	b.n	80081fa <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008030:	2b00      	cmp	r3, #0
 8008032:	d046      	beq.n	80080c2 <USBD_HID_Setup+0xbe>
 8008034:	2b20      	cmp	r3, #32
 8008036:	f040 80d8 	bne.w	80081ea <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	785b      	ldrb	r3, [r3, #1]
 800803e:	3b02      	subs	r3, #2
 8008040:	2b09      	cmp	r3, #9
 8008042:	d836      	bhi.n	80080b2 <USBD_HID_Setup+0xae>
 8008044:	a201      	add	r2, pc, #4	; (adr r2, 800804c <USBD_HID_Setup+0x48>)
 8008046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804a:	bf00      	nop
 800804c:	080080a3 	.word	0x080080a3
 8008050:	08008083 	.word	0x08008083
 8008054:	080080b3 	.word	0x080080b3
 8008058:	080080b3 	.word	0x080080b3
 800805c:	080080b3 	.word	0x080080b3
 8008060:	080080b3 	.word	0x080080b3
 8008064:	080080b3 	.word	0x080080b3
 8008068:	080080b3 	.word	0x080080b3
 800806c:	08008091 	.word	0x08008091
 8008070:	08008075 	.word	0x08008075
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	885b      	ldrh	r3, [r3, #2]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	461a      	mov	r2, r3
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	601a      	str	r2, [r3, #0]
          break;
 8008080:	e01e      	b.n	80080c0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2201      	movs	r2, #1
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 f9fa 	bl	8009482 <USBD_CtlSendData>
          break;
 800808e:	e017      	b.n	80080c0 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	885b      	ldrh	r3, [r3, #2]
 8008094:	0a1b      	lsrs	r3, r3, #8
 8008096:	b29b      	uxth	r3, r3
 8008098:	b2db      	uxtb	r3, r3
 800809a:	461a      	mov	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	605a      	str	r2, [r3, #4]
          break;
 80080a0:	e00e      	b.n	80080c0 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3304      	adds	r3, #4
 80080a6:	2201      	movs	r2, #1
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 f9e9 	bl	8009482 <USBD_CtlSendData>
          break;
 80080b0:	e006      	b.n	80080c0 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 f973 	bl	80093a0 <USBD_CtlError>
          ret = USBD_FAIL;
 80080ba:	2303      	movs	r3, #3
 80080bc:	75fb      	strb	r3, [r7, #23]
          break;
 80080be:	bf00      	nop
      }
      break;
 80080c0:	e09a      	b.n	80081f8 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	2b0b      	cmp	r3, #11
 80080c8:	f200 8086 	bhi.w	80081d8 <USBD_HID_Setup+0x1d4>
 80080cc:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <USBD_HID_Setup+0xd0>)
 80080ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d2:	bf00      	nop
 80080d4:	08008105 	.word	0x08008105
 80080d8:	080081e7 	.word	0x080081e7
 80080dc:	080081d9 	.word	0x080081d9
 80080e0:	080081d9 	.word	0x080081d9
 80080e4:	080081d9 	.word	0x080081d9
 80080e8:	080081d9 	.word	0x080081d9
 80080ec:	0800812f 	.word	0x0800812f
 80080f0:	080081d9 	.word	0x080081d9
 80080f4:	080081d9 	.word	0x080081d9
 80080f8:	080081d9 	.word	0x080081d9
 80080fc:	08008187 	.word	0x08008187
 8008100:	080081b1 	.word	0x080081b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b03      	cmp	r3, #3
 800810e:	d107      	bne.n	8008120 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008110:	f107 030a 	add.w	r3, r7, #10
 8008114:	2202      	movs	r2, #2
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 f9b2 	bl	8009482 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800811e:	e063      	b.n	80081e8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 f93c 	bl	80093a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008128:	2303      	movs	r3, #3
 800812a:	75fb      	strb	r3, [r7, #23]
          break;
 800812c:	e05c      	b.n	80081e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	885b      	ldrh	r3, [r3, #2]
 8008132:	0a1b      	lsrs	r3, r3, #8
 8008134:	b29b      	uxth	r3, r3
 8008136:	2b22      	cmp	r3, #34	; 0x22
 8008138:	d108      	bne.n	800814c <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	88db      	ldrh	r3, [r3, #6]
 800813e:	2b4a      	cmp	r3, #74	; 0x4a
 8008140:	bf28      	it	cs
 8008142:	234a      	movcs	r3, #74	; 0x4a
 8008144:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008146:	4b2f      	ldr	r3, [pc, #188]	; (8008204 <USBD_HID_Setup+0x200>)
 8008148:	613b      	str	r3, [r7, #16]
 800814a:	e015      	b.n	8008178 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	885b      	ldrh	r3, [r3, #2]
 8008150:	0a1b      	lsrs	r3, r3, #8
 8008152:	b29b      	uxth	r3, r3
 8008154:	2b21      	cmp	r3, #33	; 0x21
 8008156:	d108      	bne.n	800816a <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8008158:	4b2b      	ldr	r3, [pc, #172]	; (8008208 <USBD_HID_Setup+0x204>)
 800815a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	88db      	ldrh	r3, [r3, #6]
 8008160:	2b09      	cmp	r3, #9
 8008162:	bf28      	it	cs
 8008164:	2309      	movcs	r3, #9
 8008166:	82bb      	strh	r3, [r7, #20]
 8008168:	e006      	b.n	8008178 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 f917 	bl	80093a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008172:	2303      	movs	r3, #3
 8008174:	75fb      	strb	r3, [r7, #23]
            break;
 8008176:	e037      	b.n	80081e8 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008178:	8abb      	ldrh	r3, [r7, #20]
 800817a:	461a      	mov	r2, r3
 800817c:	6939      	ldr	r1, [r7, #16]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 f97f 	bl	8009482 <USBD_CtlSendData>
          break;
 8008184:	e030      	b.n	80081e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b03      	cmp	r3, #3
 8008190:	d107      	bne.n	80081a2 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3308      	adds	r3, #8
 8008196:	2201      	movs	r2, #1
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f001 f971 	bl	8009482 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081a0:	e022      	b.n	80081e8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 f8fb 	bl	80093a0 <USBD_CtlError>
            ret = USBD_FAIL;
 80081aa:	2303      	movs	r3, #3
 80081ac:	75fb      	strb	r3, [r7, #23]
          break;
 80081ae:	e01b      	b.n	80081e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d106      	bne.n	80081ca <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	885b      	ldrh	r3, [r3, #2]
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	461a      	mov	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081c8:	e00e      	b.n	80081e8 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 f8e7 	bl	80093a0 <USBD_CtlError>
            ret = USBD_FAIL;
 80081d2:	2303      	movs	r3, #3
 80081d4:	75fb      	strb	r3, [r7, #23]
          break;
 80081d6:	e007      	b.n	80081e8 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 f8e0 	bl	80093a0 <USBD_CtlError>
          ret = USBD_FAIL;
 80081e0:	2303      	movs	r3, #3
 80081e2:	75fb      	strb	r3, [r7, #23]
          break;
 80081e4:	e000      	b.n	80081e8 <USBD_HID_Setup+0x1e4>
          break;
 80081e6:	bf00      	nop
      }
      break;
 80081e8:	e006      	b.n	80081f8 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 f8d7 	bl	80093a0 <USBD_CtlError>
      ret = USBD_FAIL;
 80081f2:	2303      	movs	r3, #3
 80081f4:	75fb      	strb	r3, [r7, #23]
      break;
 80081f6:	bf00      	nop
  }

  return (uint8_t)ret;
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	200000e0 	.word	0x200000e0
 8008208:	200000c8 	.word	0x200000c8

0800820c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2222      	movs	r2, #34	; 0x22
 8008218:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800821a:	4b03      	ldr	r3, [pc, #12]	; (8008228 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	2000005c 	.word	0x2000005c

0800822c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2222      	movs	r2, #34	; 0x22
 8008238:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800823a:	4b03      	ldr	r3, [pc, #12]	; (8008248 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800823c:	4618      	mov	r0, r3
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr
 8008248:	20000080 	.word	0x20000080

0800824c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2222      	movs	r2, #34	; 0x22
 8008258:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800825a:	4b03      	ldr	r3, [pc, #12]	; (8008268 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	200000a4 	.word	0x200000a4

0800826c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800827e:	2200      	movs	r2, #0
 8008280:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	220a      	movs	r2, #10
 800829c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800829e:	4b03      	ldr	r3, [pc, #12]	; (80082ac <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	200000d4 	.word	0x200000d4

080082b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	4613      	mov	r3, r2
 80082bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e01f      	b.n	8008308 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	79fa      	ldrb	r2, [r7, #7]
 80082fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f001 fbb1 	bl	8009a64 <USBD_LL_Init>
 8008302:	4603      	mov	r3, r0
 8008304:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008306:	7dfb      	ldrb	r3, [r7, #23]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008324:	2303      	movs	r3, #3
 8008326:	e016      	b.n	8008356 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	f107 020e 	add.w	r2, r7, #14
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	4602      	mov	r2, r0
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 fbc8 	bl	8009afc <USBD_LL_Start>
 800836c:	4603      	mov	r3, r0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008398:	2303      	movs	r3, #3
 800839a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d009      	beq.n	80083ba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	78fa      	ldrb	r2, [r7, #3]
 80083b0:	4611      	mov	r1, r2
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	4798      	blx	r3
 80083b6:	4603      	mov	r3, r0
 80083b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d007      	beq.n	80083ea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	78fa      	ldrb	r2, [r7, #3]
 80083e4:	4611      	mov	r1, r2
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
  }

  return USBD_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	4618      	mov	r0, r3
 8008408:	f000 ff90 	bl	800932c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800841a:	461a      	mov	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008428:	f003 031f 	and.w	r3, r3, #31
 800842c:	2b02      	cmp	r3, #2
 800842e:	d01a      	beq.n	8008466 <USBD_LL_SetupStage+0x72>
 8008430:	2b02      	cmp	r3, #2
 8008432:	d822      	bhi.n	800847a <USBD_LL_SetupStage+0x86>
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <USBD_LL_SetupStage+0x4a>
 8008438:	2b01      	cmp	r3, #1
 800843a:	d00a      	beq.n	8008452 <USBD_LL_SetupStage+0x5e>
 800843c:	e01d      	b.n	800847a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fa62 	bl	8008910 <USBD_StdDevReq>
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
      break;
 8008450:	e020      	b.n	8008494 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fac6 	bl	80089ec <USBD_StdItfReq>
 8008460:	4603      	mov	r3, r0
 8008462:	73fb      	strb	r3, [r7, #15]
      break;
 8008464:	e016      	b.n	8008494 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fb05 	bl	8008a7e <USBD_StdEPReq>
 8008474:	4603      	mov	r3, r0
 8008476:	73fb      	strb	r3, [r7, #15]
      break;
 8008478:	e00c      	b.n	8008494 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008480:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008484:	b2db      	uxtb	r3, r3
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f001 fb97 	bl	8009bbc <USBD_LL_StallEP>
 800848e:	4603      	mov	r3, r0
 8008490:	73fb      	strb	r3, [r7, #15]
      break;
 8008492:	bf00      	nop
  }

  return ret;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b086      	sub	sp, #24
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	460b      	mov	r3, r1
 80084a8:	607a      	str	r2, [r7, #4]
 80084aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80084ac:	7afb      	ldrb	r3, [r7, #11]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d138      	bne.n	8008524 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80084b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d14a      	bne.n	800855a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d913      	bls.n	80084f8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	1ad2      	subs	r2, r2, r3
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	4293      	cmp	r3, r2
 80084e8:	bf28      	it	cs
 80084ea:	4613      	movcs	r3, r2
 80084ec:	461a      	mov	r2, r3
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 fff2 	bl	80094da <USBD_CtlContinueRx>
 80084f6:	e030      	b.n	800855a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b03      	cmp	r3, #3
 8008502:	d10b      	bne.n	800851c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d005      	beq.n	800851c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 ffed 	bl	80094fc <USBD_CtlSendStatus>
 8008522:	e01a      	b.n	800855a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b03      	cmp	r3, #3
 800852e:	d114      	bne.n	800855a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00e      	beq.n	800855a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	7afa      	ldrb	r2, [r7, #11]
 8008546:	4611      	mov	r1, r2
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	4798      	blx	r3
 800854c:	4603      	mov	r3, r0
 800854e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008550:	7dfb      	ldrb	r3, [r7, #23]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	e000      	b.n	800855c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	460b      	mov	r3, r1
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008572:	7afb      	ldrb	r3, [r7, #11]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d16b      	bne.n	8008650 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3314      	adds	r3, #20
 800857c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008584:	2b02      	cmp	r3, #2
 8008586:	d156      	bne.n	8008636 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	689a      	ldr	r2, [r3, #8]
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	429a      	cmp	r2, r3
 8008592:	d914      	bls.n	80085be <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	1ad2      	subs	r2, r2, r3
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	461a      	mov	r2, r3
 80085a8:	6879      	ldr	r1, [r7, #4]
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 ff84 	bl	80094b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085b0:	2300      	movs	r3, #0
 80085b2:	2200      	movs	r2, #0
 80085b4:	2100      	movs	r1, #0
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f001 fbaa 	bl	8009d10 <USBD_LL_PrepareReceive>
 80085bc:	e03b      	b.n	8008636 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	68da      	ldr	r2, [r3, #12]
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d11c      	bne.n	8008604 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d316      	bcc.n	8008604 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d20f      	bcs.n	8008604 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085e4:	2200      	movs	r2, #0
 80085e6:	2100      	movs	r1, #0
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 ff65 	bl	80094b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085f6:	2300      	movs	r3, #0
 80085f8:	2200      	movs	r2, #0
 80085fa:	2100      	movs	r1, #0
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f001 fb87 	bl	8009d10 <USBD_LL_PrepareReceive>
 8008602:	e018      	b.n	8008636 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b03      	cmp	r3, #3
 800860e:	d10b      	bne.n	8008628 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d005      	beq.n	8008628 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008628:	2180      	movs	r1, #128	; 0x80
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f001 fac6 	bl	8009bbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 ff76 	bl	8009522 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800863c:	2b01      	cmp	r3, #1
 800863e:	d122      	bne.n	8008686 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f7ff fe98 	bl	8008376 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800864e:	e01a      	b.n	8008686 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b03      	cmp	r3, #3
 800865a:	d114      	bne.n	8008686 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00e      	beq.n	8008686 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	7afa      	ldrb	r2, [r7, #11]
 8008672:	4611      	mov	r1, r2
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	4798      	blx	r3
 8008678:	4603      	mov	r3, r0
 800867a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008682:	7dfb      	ldrb	r3, [r7, #23]
 8008684:	e000      	b.n	8008688 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e02f      	b.n	8008724 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00f      	beq.n	80086ee <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	6852      	ldr	r2, [r2, #4]
 80086e6:	b2d2      	uxtb	r2, r2
 80086e8:	4611      	mov	r1, r2
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086ee:	2340      	movs	r3, #64	; 0x40
 80086f0:	2200      	movs	r2, #0
 80086f2:	2100      	movs	r1, #0
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 fa1c 	bl	8009b32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2240      	movs	r2, #64	; 0x40
 8008706:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800870a:	2340      	movs	r3, #64	; 0x40
 800870c:	2200      	movs	r2, #0
 800870e:	2180      	movs	r1, #128	; 0x80
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 fa0e 	bl	8009b32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2240      	movs	r2, #64	; 0x40
 8008720:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800875a:	b2da      	uxtb	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2204      	movs	r2, #4
 8008766:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b04      	cmp	r3, #4
 800878a:	d106      	bne.n	800879a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008792:	b2da      	uxtb	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e012      	b.n	80087e4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d10b      	bne.n	80087e2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d005      	beq.n	80087e2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008802:	2303      	movs	r3, #3
 8008804:	e014      	b.n	8008830 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b03      	cmp	r3, #3
 8008810:	d10d      	bne.n	800882e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d007      	beq.n	800882e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	78fa      	ldrb	r2, [r7, #3]
 8008828:	4611      	mov	r1, r2
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800884e:	2303      	movs	r3, #3
 8008850:	e014      	b.n	800887c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b03      	cmp	r3, #3
 800885c:	d10d      	bne.n	800887a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008866:	2b00      	cmp	r3, #0
 8008868:	d007      	beq.n	800887a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	78fa      	ldrb	r2, [r7, #3]
 8008874:	4611      	mov	r1, r2
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d009      	beq.n	80088c8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	6852      	ldr	r2, [r2, #4]
 80088c0:	b2d2      	uxtb	r2, r2
 80088c2:	4611      	mov	r1, r2
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	4798      	blx	r3
  }

  return USBD_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b087      	sub	sp, #28
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	3301      	adds	r3, #1
 80088e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80088f0:	8a3b      	ldrh	r3, [r7, #16]
 80088f2:	021b      	lsls	r3, r3, #8
 80088f4:	b21a      	sxth	r2, r3
 80088f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	b21b      	sxth	r3, r3
 80088fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008900:	89fb      	ldrh	r3, [r7, #14]
}
 8008902:	4618      	mov	r0, r3
 8008904:	371c      	adds	r7, #28
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
	...

08008910 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008926:	2b40      	cmp	r3, #64	; 0x40
 8008928:	d005      	beq.n	8008936 <USBD_StdDevReq+0x26>
 800892a:	2b40      	cmp	r3, #64	; 0x40
 800892c:	d853      	bhi.n	80089d6 <USBD_StdDevReq+0xc6>
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00b      	beq.n	800894a <USBD_StdDevReq+0x3a>
 8008932:	2b20      	cmp	r3, #32
 8008934:	d14f      	bne.n	80089d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	4798      	blx	r3
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
      break;
 8008948:	e04a      	b.n	80089e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	785b      	ldrb	r3, [r3, #1]
 800894e:	2b09      	cmp	r3, #9
 8008950:	d83b      	bhi.n	80089ca <USBD_StdDevReq+0xba>
 8008952:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <USBD_StdDevReq+0x48>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	080089ad 	.word	0x080089ad
 800895c:	080089c1 	.word	0x080089c1
 8008960:	080089cb 	.word	0x080089cb
 8008964:	080089b7 	.word	0x080089b7
 8008968:	080089cb 	.word	0x080089cb
 800896c:	0800898b 	.word	0x0800898b
 8008970:	08008981 	.word	0x08008981
 8008974:	080089cb 	.word	0x080089cb
 8008978:	080089a3 	.word	0x080089a3
 800897c:	08008995 	.word	0x08008995
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f9de 	bl	8008d44 <USBD_GetDescriptor>
          break;
 8008988:	e024      	b.n	80089d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fb43 	bl	8009018 <USBD_SetAddress>
          break;
 8008992:	e01f      	b.n	80089d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fb82 	bl	80090a0 <USBD_SetConfig>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]
          break;
 80089a0:	e018      	b.n	80089d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fc21 	bl	80091ec <USBD_GetConfig>
          break;
 80089aa:	e013      	b.n	80089d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fc52 	bl	8009258 <USBD_GetStatus>
          break;
 80089b4:	e00e      	b.n	80089d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fc81 	bl	80092c0 <USBD_SetFeature>
          break;
 80089be:	e009      	b.n	80089d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fc90 	bl	80092e8 <USBD_ClrFeature>
          break;
 80089c8:	e004      	b.n	80089d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fce7 	bl	80093a0 <USBD_CtlError>
          break;
 80089d2:	bf00      	nop
      }
      break;
 80089d4:	e004      	b.n	80089e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fce1 	bl	80093a0 <USBD_CtlError>
      break;
 80089de:	bf00      	nop
  }

  return ret;
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop

080089ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a02:	2b40      	cmp	r3, #64	; 0x40
 8008a04:	d005      	beq.n	8008a12 <USBD_StdItfReq+0x26>
 8008a06:	2b40      	cmp	r3, #64	; 0x40
 8008a08:	d82f      	bhi.n	8008a6a <USBD_StdItfReq+0x7e>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <USBD_StdItfReq+0x26>
 8008a0e:	2b20      	cmp	r3, #32
 8008a10:	d12b      	bne.n	8008a6a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d81d      	bhi.n	8008a5c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	889b      	ldrh	r3, [r3, #4]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d813      	bhi.n	8008a52 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	4798      	blx	r3
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	88db      	ldrh	r3, [r3, #6]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d110      	bne.n	8008a66 <USBD_StdItfReq+0x7a>
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10d      	bne.n	8008a66 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fd56 	bl	80094fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a50:	e009      	b.n	8008a66 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fca3 	bl	80093a0 <USBD_CtlError>
          break;
 8008a5a:	e004      	b.n	8008a66 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fc9e 	bl	80093a0 <USBD_CtlError>
          break;
 8008a64:	e000      	b.n	8008a68 <USBD_StdItfReq+0x7c>
          break;
 8008a66:	bf00      	nop
      }
      break;
 8008a68:	e004      	b.n	8008a74 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fc97 	bl	80093a0 <USBD_CtlError>
      break;
 8008a72:	bf00      	nop
  }

  return ret;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	889b      	ldrh	r3, [r3, #4]
 8008a90:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a9a:	2b40      	cmp	r3, #64	; 0x40
 8008a9c:	d007      	beq.n	8008aae <USBD_StdEPReq+0x30>
 8008a9e:	2b40      	cmp	r3, #64	; 0x40
 8008aa0:	f200 8145 	bhi.w	8008d2e <USBD_StdEPReq+0x2b0>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00c      	beq.n	8008ac2 <USBD_StdEPReq+0x44>
 8008aa8:	2b20      	cmp	r3, #32
 8008aaa:	f040 8140 	bne.w	8008d2e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	4798      	blx	r3
 8008abc:	4603      	mov	r3, r0
 8008abe:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac0:	e13a      	b.n	8008d38 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	785b      	ldrb	r3, [r3, #1]
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d007      	beq.n	8008ada <USBD_StdEPReq+0x5c>
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	f300 8129 	bgt.w	8008d22 <USBD_StdEPReq+0x2a4>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d07f      	beq.n	8008bd4 <USBD_StdEPReq+0x156>
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d03c      	beq.n	8008b52 <USBD_StdEPReq+0xd4>
 8008ad8:	e123      	b.n	8008d22 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d002      	beq.n	8008aec <USBD_StdEPReq+0x6e>
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d016      	beq.n	8008b18 <USBD_StdEPReq+0x9a>
 8008aea:	e02c      	b.n	8008b46 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00d      	beq.n	8008b0e <USBD_StdEPReq+0x90>
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	2b80      	cmp	r3, #128	; 0x80
 8008af6:	d00a      	beq.n	8008b0e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008af8:	7bbb      	ldrb	r3, [r7, #14]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 f85d 	bl	8009bbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b02:	2180      	movs	r1, #128	; 0x80
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 f859 	bl	8009bbc <USBD_LL_StallEP>
 8008b0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b0c:	e020      	b.n	8008b50 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fc45 	bl	80093a0 <USBD_CtlError>
              break;
 8008b16:	e01b      	b.n	8008b50 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	885b      	ldrh	r3, [r3, #2]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10e      	bne.n	8008b3e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <USBD_StdEPReq+0xc0>
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	2b80      	cmp	r3, #128	; 0x80
 8008b2a:	d008      	beq.n	8008b3e <USBD_StdEPReq+0xc0>
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	88db      	ldrh	r3, [r3, #6]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d104      	bne.n	8008b3e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 f83f 	bl	8009bbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fcdc 	bl	80094fc <USBD_CtlSendStatus>

              break;
 8008b44:	e004      	b.n	8008b50 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fc29 	bl	80093a0 <USBD_CtlError>
              break;
 8008b4e:	bf00      	nop
          }
          break;
 8008b50:	e0ec      	b.n	8008d2c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d002      	beq.n	8008b64 <USBD_StdEPReq+0xe6>
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d016      	beq.n	8008b90 <USBD_StdEPReq+0x112>
 8008b62:	e030      	b.n	8008bc6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00d      	beq.n	8008b86 <USBD_StdEPReq+0x108>
 8008b6a:	7bbb      	ldrb	r3, [r7, #14]
 8008b6c:	2b80      	cmp	r3, #128	; 0x80
 8008b6e:	d00a      	beq.n	8008b86 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 f821 	bl	8009bbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b7a:	2180      	movs	r1, #128	; 0x80
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 f81d 	bl	8009bbc <USBD_LL_StallEP>
 8008b82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b84:	e025      	b.n	8008bd2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fc09 	bl	80093a0 <USBD_CtlError>
              break;
 8008b8e:	e020      	b.n	8008bd2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	885b      	ldrh	r3, [r3, #2]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d11b      	bne.n	8008bd0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b98:	7bbb      	ldrb	r3, [r7, #14]
 8008b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d004      	beq.n	8008bac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 f827 	bl	8009bfa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fca5 	bl	80094fc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	4798      	blx	r3
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008bc4:	e004      	b.n	8008bd0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fbe9 	bl	80093a0 <USBD_CtlError>
              break;
 8008bce:	e000      	b.n	8008bd2 <USBD_StdEPReq+0x154>
              break;
 8008bd0:	bf00      	nop
          }
          break;
 8008bd2:	e0ab      	b.n	8008d2c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d002      	beq.n	8008be6 <USBD_StdEPReq+0x168>
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d032      	beq.n	8008c4a <USBD_StdEPReq+0x1cc>
 8008be4:	e097      	b.n	8008d16 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d007      	beq.n	8008bfc <USBD_StdEPReq+0x17e>
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	2b80      	cmp	r3, #128	; 0x80
 8008bf0:	d004      	beq.n	8008bfc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fbd3 	bl	80093a0 <USBD_CtlError>
                break;
 8008bfa:	e091      	b.n	8008d20 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	da0b      	bge.n	8008c1c <USBD_StdEPReq+0x19e>
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	3310      	adds	r3, #16
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	4413      	add	r3, r2
 8008c18:	3304      	adds	r3, #4
 8008c1a:	e00b      	b.n	8008c34 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	4413      	add	r3, r2
 8008c32:	3304      	adds	r3, #4
 8008c34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fc1d 	bl	8009482 <USBD_CtlSendData>
              break;
 8008c48:	e06a      	b.n	8008d20 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	da11      	bge.n	8008c76 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
 8008c54:	f003 020f 	and.w	r2, r3, #15
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	440b      	add	r3, r1
 8008c64:	3324      	adds	r3, #36	; 0x24
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d117      	bne.n	8008c9c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fb96 	bl	80093a0 <USBD_CtlError>
                  break;
 8008c74:	e054      	b.n	8008d20 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
 8008c78:	f003 020f 	and.w	r2, r3, #15
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	440b      	add	r3, r1
 8008c88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d104      	bne.n	8008c9c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fb83 	bl	80093a0 <USBD_CtlError>
                  break;
 8008c9a:	e041      	b.n	8008d20 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	da0b      	bge.n	8008cbc <USBD_StdEPReq+0x23e>
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
 8008ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008caa:	4613      	mov	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	3310      	adds	r3, #16
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3304      	adds	r3, #4
 8008cba:	e00b      	b.n	8008cd4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cbc:	7bbb      	ldrb	r3, [r7, #14]
 8008cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cd6:	7bbb      	ldrb	r3, [r7, #14]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <USBD_StdEPReq+0x264>
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
 8008cde:	2b80      	cmp	r3, #128	; 0x80
 8008ce0:	d103      	bne.n	8008cea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	601a      	str	r2, [r3, #0]
 8008ce8:	e00e      	b.n	8008d08 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 ffa2 	bl	8009c38 <USBD_LL_IsStallEP>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	e002      	b.n	8008d08 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fbb7 	bl	8009482 <USBD_CtlSendData>
              break;
 8008d14:	e004      	b.n	8008d20 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fb41 	bl	80093a0 <USBD_CtlError>
              break;
 8008d1e:	bf00      	nop
          }
          break;
 8008d20:	e004      	b.n	8008d2c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fb3b 	bl	80093a0 <USBD_CtlError>
          break;
 8008d2a:	bf00      	nop
      }
      break;
 8008d2c:	e004      	b.n	8008d38 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fb35 	bl	80093a0 <USBD_CtlError>
      break;
 8008d36:	bf00      	nop
  }

  return ret;
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	885b      	ldrh	r3, [r3, #2]
 8008d5e:	0a1b      	lsrs	r3, r3, #8
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	3b01      	subs	r3, #1
 8008d64:	2b06      	cmp	r3, #6
 8008d66:	f200 8128 	bhi.w	8008fba <USBD_GetDescriptor+0x276>
 8008d6a:	a201      	add	r2, pc, #4	; (adr r2, 8008d70 <USBD_GetDescriptor+0x2c>)
 8008d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d70:	08008d8d 	.word	0x08008d8d
 8008d74:	08008da5 	.word	0x08008da5
 8008d78:	08008de5 	.word	0x08008de5
 8008d7c:	08008fbb 	.word	0x08008fbb
 8008d80:	08008fbb 	.word	0x08008fbb
 8008d84:	08008f5b 	.word	0x08008f5b
 8008d88:	08008f87 	.word	0x08008f87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	7c12      	ldrb	r2, [r2, #16]
 8008d98:	f107 0108 	add.w	r1, r7, #8
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4798      	blx	r3
 8008da0:	60f8      	str	r0, [r7, #12]
      break;
 8008da2:	e112      	b.n	8008fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	7c1b      	ldrb	r3, [r3, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10d      	bne.n	8008dc8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	f107 0208 	add.w	r2, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008dc6:	e100      	b.n	8008fca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd0:	f107 0208 	add.w	r2, r7, #8
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4798      	blx	r3
 8008dd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	2202      	movs	r2, #2
 8008de0:	701a      	strb	r2, [r3, #0]
      break;
 8008de2:	e0f2      	b.n	8008fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	885b      	ldrh	r3, [r3, #2]
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b05      	cmp	r3, #5
 8008dec:	f200 80ac 	bhi.w	8008f48 <USBD_GetDescriptor+0x204>
 8008df0:	a201      	add	r2, pc, #4	; (adr r2, 8008df8 <USBD_GetDescriptor+0xb4>)
 8008df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df6:	bf00      	nop
 8008df8:	08008e11 	.word	0x08008e11
 8008dfc:	08008e45 	.word	0x08008e45
 8008e00:	08008e79 	.word	0x08008e79
 8008e04:	08008ead 	.word	0x08008ead
 8008e08:	08008ee1 	.word	0x08008ee1
 8008e0c:	08008f15 	.word	0x08008f15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00b      	beq.n	8008e34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	7c12      	ldrb	r2, [r2, #16]
 8008e28:	f107 0108 	add.w	r1, r7, #8
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	4798      	blx	r3
 8008e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e32:	e091      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fab2 	bl	80093a0 <USBD_CtlError>
            err++;
 8008e3c:	7afb      	ldrb	r3, [r7, #11]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	72fb      	strb	r3, [r7, #11]
          break;
 8008e42:	e089      	b.n	8008f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00b      	beq.n	8008e68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	7c12      	ldrb	r2, [r2, #16]
 8008e5c:	f107 0108 	add.w	r1, r7, #8
 8008e60:	4610      	mov	r0, r2
 8008e62:	4798      	blx	r3
 8008e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e66:	e077      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fa98 	bl	80093a0 <USBD_CtlError>
            err++;
 8008e70:	7afb      	ldrb	r3, [r7, #11]
 8008e72:	3301      	adds	r3, #1
 8008e74:	72fb      	strb	r3, [r7, #11]
          break;
 8008e76:	e06f      	b.n	8008f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	7c12      	ldrb	r2, [r2, #16]
 8008e90:	f107 0108 	add.w	r1, r7, #8
 8008e94:	4610      	mov	r0, r2
 8008e96:	4798      	blx	r3
 8008e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e9a:	e05d      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa7e 	bl	80093a0 <USBD_CtlError>
            err++;
 8008ea4:	7afb      	ldrb	r3, [r7, #11]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eaa:	e055      	b.n	8008f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00b      	beq.n	8008ed0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	7c12      	ldrb	r2, [r2, #16]
 8008ec4:	f107 0108 	add.w	r1, r7, #8
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4798      	blx	r3
 8008ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ece:	e043      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa64 	bl	80093a0 <USBD_CtlError>
            err++;
 8008ed8:	7afb      	ldrb	r3, [r7, #11]
 8008eda:	3301      	adds	r3, #1
 8008edc:	72fb      	strb	r3, [r7, #11]
          break;
 8008ede:	e03b      	b.n	8008f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00b      	beq.n	8008f04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef2:	695b      	ldr	r3, [r3, #20]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	7c12      	ldrb	r2, [r2, #16]
 8008ef8:	f107 0108 	add.w	r1, r7, #8
 8008efc:	4610      	mov	r0, r2
 8008efe:	4798      	blx	r3
 8008f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f02:	e029      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fa4a 	bl	80093a0 <USBD_CtlError>
            err++;
 8008f0c:	7afb      	ldrb	r3, [r7, #11]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	72fb      	strb	r3, [r7, #11]
          break;
 8008f12:	e021      	b.n	8008f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00b      	beq.n	8008f38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	7c12      	ldrb	r2, [r2, #16]
 8008f2c:	f107 0108 	add.w	r1, r7, #8
 8008f30:	4610      	mov	r0, r2
 8008f32:	4798      	blx	r3
 8008f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f36:	e00f      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fa30 	bl	80093a0 <USBD_CtlError>
            err++;
 8008f40:	7afb      	ldrb	r3, [r7, #11]
 8008f42:	3301      	adds	r3, #1
 8008f44:	72fb      	strb	r3, [r7, #11]
          break;
 8008f46:	e007      	b.n	8008f58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa28 	bl	80093a0 <USBD_CtlError>
          err++;
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	3301      	adds	r3, #1
 8008f54:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008f56:	bf00      	nop
      }
      break;
 8008f58:	e037      	b.n	8008fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	7c1b      	ldrb	r3, [r3, #16]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d109      	bne.n	8008f76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6a:	f107 0208 	add.w	r2, r7, #8
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4798      	blx	r3
 8008f72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f74:	e029      	b.n	8008fca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fa11 	bl	80093a0 <USBD_CtlError>
        err++;
 8008f7e:	7afb      	ldrb	r3, [r7, #11]
 8008f80:	3301      	adds	r3, #1
 8008f82:	72fb      	strb	r3, [r7, #11]
      break;
 8008f84:	e021      	b.n	8008fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7c1b      	ldrb	r3, [r3, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10d      	bne.n	8008faa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f96:	f107 0208 	add.w	r2, r7, #8
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	4798      	blx	r3
 8008f9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	2207      	movs	r2, #7
 8008fa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fa8:	e00f      	b.n	8008fca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008faa:	6839      	ldr	r1, [r7, #0]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f9f7 	bl	80093a0 <USBD_CtlError>
        err++;
 8008fb2:	7afb      	ldrb	r3, [r7, #11]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	72fb      	strb	r3, [r7, #11]
      break;
 8008fb8:	e007      	b.n	8008fca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f9ef 	bl	80093a0 <USBD_CtlError>
      err++;
 8008fc2:	7afb      	ldrb	r3, [r7, #11]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	72fb      	strb	r3, [r7, #11]
      break;
 8008fc8:	bf00      	nop
  }

  if (err != 0U)
 8008fca:	7afb      	ldrb	r3, [r7, #11]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d11e      	bne.n	800900e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	88db      	ldrh	r3, [r3, #6]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d016      	beq.n	8009006 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008fd8:	893b      	ldrh	r3, [r7, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00e      	beq.n	8008ffc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	88da      	ldrh	r2, [r3, #6]
 8008fe2:	893b      	ldrh	r3, [r7, #8]
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	bf28      	it	cs
 8008fe8:	4613      	movcs	r3, r2
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fee:	893b      	ldrh	r3, [r7, #8]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	68f9      	ldr	r1, [r7, #12]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fa44 	bl	8009482 <USBD_CtlSendData>
 8008ffa:	e009      	b.n	8009010 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f9ce 	bl	80093a0 <USBD_CtlError>
 8009004:	e004      	b.n	8009010 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fa78 	bl	80094fc <USBD_CtlSendStatus>
 800900c:	e000      	b.n	8009010 <USBD_GetDescriptor+0x2cc>
    return;
 800900e:	bf00      	nop
  }
}
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop

08009018 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	889b      	ldrh	r3, [r3, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d131      	bne.n	800908e <USBD_SetAddress+0x76>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	88db      	ldrh	r3, [r3, #6]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d12d      	bne.n	800908e <USBD_SetAddress+0x76>
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	885b      	ldrh	r3, [r3, #2]
 8009036:	2b7f      	cmp	r3, #127	; 0x7f
 8009038:	d829      	bhi.n	800908e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	885b      	ldrh	r3, [r3, #2]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009044:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b03      	cmp	r3, #3
 8009050:	d104      	bne.n	800905c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f9a3 	bl	80093a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800905a:	e01d      	b.n	8009098 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	7bfa      	ldrb	r2, [r7, #15]
 8009060:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fe11 	bl	8009c90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fa44 	bl	80094fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d004      	beq.n	8009084 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2202      	movs	r2, #2
 800907e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009082:	e009      	b.n	8009098 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908c:	e004      	b.n	8009098 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f985 	bl	80093a0 <USBD_CtlError>
  }
}
 8009096:	bf00      	nop
 8009098:	bf00      	nop
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	885b      	ldrh	r3, [r3, #2]
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	4b4c      	ldr	r3, [pc, #304]	; (80091e8 <USBD_SetConfig+0x148>)
 80090b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090b8:	4b4b      	ldr	r3, [pc, #300]	; (80091e8 <USBD_SetConfig+0x148>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d905      	bls.n	80090cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f96c 	bl	80093a0 <USBD_CtlError>
    return USBD_FAIL;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e088      	b.n	80091de <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d002      	beq.n	80090de <USBD_SetConfig+0x3e>
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d025      	beq.n	8009128 <USBD_SetConfig+0x88>
 80090dc:	e071      	b.n	80091c2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80090de:	4b42      	ldr	r3, [pc, #264]	; (80091e8 <USBD_SetConfig+0x148>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d01c      	beq.n	8009120 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80090e6:	4b40      	ldr	r3, [pc, #256]	; (80091e8 <USBD_SetConfig+0x148>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80090f0:	4b3d      	ldr	r3, [pc, #244]	; (80091e8 <USBD_SetConfig+0x148>)
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff f948 	bl	800838c <USBD_SetClassConfig>
 80090fc:	4603      	mov	r3, r0
 80090fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d004      	beq.n	8009110 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f949 	bl	80093a0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800910e:	e065      	b.n	80091dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f9f3 	bl	80094fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2203      	movs	r2, #3
 800911a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800911e:	e05d      	b.n	80091dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f9eb 	bl	80094fc <USBD_CtlSendStatus>
      break;
 8009126:	e059      	b.n	80091dc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009128:	4b2f      	ldr	r3, [pc, #188]	; (80091e8 <USBD_SetConfig+0x148>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d112      	bne.n	8009156 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009138:	4b2b      	ldr	r3, [pc, #172]	; (80091e8 <USBD_SetConfig+0x148>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009142:	4b29      	ldr	r3, [pc, #164]	; (80091e8 <USBD_SetConfig+0x148>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff f93b 	bl	80083c4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f9d4 	bl	80094fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009154:	e042      	b.n	80091dc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009156:	4b24      	ldr	r3, [pc, #144]	; (80091e8 <USBD_SetConfig+0x148>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	429a      	cmp	r2, r3
 8009162:	d02a      	beq.n	80091ba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	b2db      	uxtb	r3, r3
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff f929 	bl	80083c4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009172:	4b1d      	ldr	r3, [pc, #116]	; (80091e8 <USBD_SetConfig+0x148>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800917c:	4b1a      	ldr	r3, [pc, #104]	; (80091e8 <USBD_SetConfig+0x148>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff f902 	bl	800838c <USBD_SetClassConfig>
 8009188:	4603      	mov	r3, r0
 800918a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00f      	beq.n	80091b2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f903 	bl	80093a0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	4619      	mov	r1, r3
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f7ff f90e 	bl	80083c4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091b0:	e014      	b.n	80091dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f9a2 	bl	80094fc <USBD_CtlSendStatus>
      break;
 80091b8:	e010      	b.n	80091dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f99e 	bl	80094fc <USBD_CtlSendStatus>
      break;
 80091c0:	e00c      	b.n	80091dc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f8eb 	bl	80093a0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091ca:	4b07      	ldr	r3, [pc, #28]	; (80091e8 <USBD_SetConfig+0x148>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7ff f8f7 	bl	80083c4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80091d6:	2303      	movs	r3, #3
 80091d8:	73fb      	strb	r3, [r7, #15]
      break;
 80091da:	bf00      	nop
  }

  return ret;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20000764 	.word	0x20000764

080091ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	88db      	ldrh	r3, [r3, #6]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d004      	beq.n	8009208 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f8cd 	bl	80093a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009206:	e023      	b.n	8009250 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b02      	cmp	r3, #2
 8009212:	dc02      	bgt.n	800921a <USBD_GetConfig+0x2e>
 8009214:	2b00      	cmp	r3, #0
 8009216:	dc03      	bgt.n	8009220 <USBD_GetConfig+0x34>
 8009218:	e015      	b.n	8009246 <USBD_GetConfig+0x5a>
 800921a:	2b03      	cmp	r3, #3
 800921c:	d00b      	beq.n	8009236 <USBD_GetConfig+0x4a>
 800921e:	e012      	b.n	8009246 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3308      	adds	r3, #8
 800922a:	2201      	movs	r2, #1
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f927 	bl	8009482 <USBD_CtlSendData>
        break;
 8009234:	e00c      	b.n	8009250 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	3304      	adds	r3, #4
 800923a:	2201      	movs	r2, #1
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f91f 	bl	8009482 <USBD_CtlSendData>
        break;
 8009244:	e004      	b.n	8009250 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f8a9 	bl	80093a0 <USBD_CtlError>
        break;
 800924e:	bf00      	nop
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009268:	b2db      	uxtb	r3, r3
 800926a:	3b01      	subs	r3, #1
 800926c:	2b02      	cmp	r3, #2
 800926e:	d81e      	bhi.n	80092ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	88db      	ldrh	r3, [r3, #6]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d004      	beq.n	8009282 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f890 	bl	80093a0 <USBD_CtlError>
        break;
 8009280:	e01a      	b.n	80092b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f043 0202 	orr.w	r2, r3, #2
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	330c      	adds	r3, #12
 80092a2:	2202      	movs	r2, #2
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f8eb 	bl	8009482 <USBD_CtlSendData>
      break;
 80092ac:	e004      	b.n	80092b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f875 	bl	80093a0 <USBD_CtlError>
      break;
 80092b6:	bf00      	nop
  }
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	885b      	ldrh	r3, [r3, #2]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d106      	bne.n	80092e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f90e 	bl	80094fc <USBD_CtlSendStatus>
  }
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	3b01      	subs	r3, #1
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d80b      	bhi.n	8009318 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	885b      	ldrh	r3, [r3, #2]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d10c      	bne.n	8009322 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f8f3 	bl	80094fc <USBD_CtlSendStatus>
      }
      break;
 8009316:	e004      	b.n	8009322 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f840 	bl	80093a0 <USBD_CtlError>
      break;
 8009320:	e000      	b.n	8009324 <USBD_ClrFeature+0x3c>
      break;
 8009322:	bf00      	nop
  }
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	781a      	ldrb	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	781a      	ldrb	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3301      	adds	r3, #1
 8009354:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f7ff fabb 	bl	80088d2 <SWAPBYTE>
 800935c:	4603      	mov	r3, r0
 800935e:	461a      	mov	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3301      	adds	r3, #1
 8009368:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3301      	adds	r3, #1
 800936e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f7ff faae 	bl	80088d2 <SWAPBYTE>
 8009376:	4603      	mov	r3, r0
 8009378:	461a      	mov	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	3301      	adds	r3, #1
 8009382:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	3301      	adds	r3, #1
 8009388:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f7ff faa1 	bl	80088d2 <SWAPBYTE>
 8009390:	4603      	mov	r3, r0
 8009392:	461a      	mov	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	80da      	strh	r2, [r3, #6]
}
 8009398:	bf00      	nop
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80093aa:	2180      	movs	r1, #128	; 0x80
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fc05 	bl	8009bbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80093b2:	2100      	movs	r1, #0
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fc01 	bl	8009bbc <USBD_LL_StallEP>
}
 80093ba:	bf00      	nop
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b086      	sub	sp, #24
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	60f8      	str	r0, [r7, #12]
 80093ca:	60b9      	str	r1, [r7, #8]
 80093cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d036      	beq.n	8009446 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80093dc:	6938      	ldr	r0, [r7, #16]
 80093de:	f000 f836 	bl	800944e <USBD_GetLen>
 80093e2:	4603      	mov	r3, r0
 80093e4:	3301      	adds	r3, #1
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	4413      	add	r3, r2
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	7812      	ldrb	r2, [r2, #0]
 80093fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	3301      	adds	r3, #1
 8009400:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	4413      	add	r3, r2
 8009408:	2203      	movs	r2, #3
 800940a:	701a      	strb	r2, [r3, #0]
  idx++;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	3301      	adds	r3, #1
 8009410:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009412:	e013      	b.n	800943c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4413      	add	r3, r2
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	7812      	ldrb	r2, [r2, #0]
 800941e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	3301      	adds	r3, #1
 8009424:	613b      	str	r3, [r7, #16]
    idx++;
 8009426:	7dfb      	ldrb	r3, [r7, #23]
 8009428:	3301      	adds	r3, #1
 800942a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800942c:	7dfb      	ldrb	r3, [r7, #23]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	4413      	add	r3, r2
 8009432:	2200      	movs	r2, #0
 8009434:	701a      	strb	r2, [r3, #0]
    idx++;
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	3301      	adds	r3, #1
 800943a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1e7      	bne.n	8009414 <USBD_GetString+0x52>
 8009444:	e000      	b.n	8009448 <USBD_GetString+0x86>
    return;
 8009446:	bf00      	nop
  }
}
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800944e:	b480      	push	{r7}
 8009450:	b085      	sub	sp, #20
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800945e:	e005      	b.n	800946c <USBD_GetLen+0x1e>
  {
    len++;
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	3301      	adds	r3, #1
 8009464:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	3301      	adds	r3, #1
 800946a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1f5      	bne.n	8009460 <USBD_GetLen+0x12>
  }

  return len;
 8009474:	7bfb      	ldrb	r3, [r7, #15]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2202      	movs	r2, #2
 8009492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	2100      	movs	r1, #0
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f000 fc10 	bl	8009cce <USBD_LL_Transmit>

  return USBD_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	2100      	movs	r1, #0
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 fbff 	bl	8009cce <USBD_LL_Transmit>

  return USBD_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	60f8      	str	r0, [r7, #12]
 80094e2:	60b9      	str	r1, [r7, #8]
 80094e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	2100      	movs	r1, #0
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 fc0f 	bl	8009d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2204      	movs	r2, #4
 8009508:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800950c:	2300      	movs	r3, #0
 800950e:	2200      	movs	r2, #0
 8009510:	2100      	movs	r1, #0
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fbdb 	bl	8009cce <USBD_LL_Transmit>

  return USBD_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2205      	movs	r2, #5
 800952e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009532:	2300      	movs	r3, #0
 8009534:	2200      	movs	r2, #0
 8009536:	2100      	movs	r1, #0
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fbe9 	bl	8009d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800954c:	2200      	movs	r2, #0
 800954e:	490e      	ldr	r1, [pc, #56]	; (8009588 <MX_USB_DEVICE_Init+0x40>)
 8009550:	480e      	ldr	r0, [pc, #56]	; (800958c <MX_USB_DEVICE_Init+0x44>)
 8009552:	f7fe fead 	bl	80082b0 <USBD_Init>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800955c:	f7f7 fb58 	bl	8000c10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009560:	490b      	ldr	r1, [pc, #44]	; (8009590 <MX_USB_DEVICE_Init+0x48>)
 8009562:	480a      	ldr	r0, [pc, #40]	; (800958c <MX_USB_DEVICE_Init+0x44>)
 8009564:	f7fe fed4 	bl	8008310 <USBD_RegisterClass>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800956e:	f7f7 fb4f 	bl	8000c10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009572:	4806      	ldr	r0, [pc, #24]	; (800958c <MX_USB_DEVICE_Init+0x44>)
 8009574:	f7fe fef3 	bl	800835e <USBD_Start>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800957e:	f7f7 fb47 	bl	8000c10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009582:	bf00      	nop
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	2000012c 	.word	0x2000012c
 800958c:	20000994 	.word	0x20000994
 8009590:	20000024 	.word	0x20000024

08009594 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	6039      	str	r1, [r7, #0]
 800959e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2212      	movs	r2, #18
 80095a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095a6:	4b03      	ldr	r3, [pc, #12]	; (80095b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	20000148 	.word	0x20000148

080095b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	6039      	str	r1, [r7, #0]
 80095c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2204      	movs	r2, #4
 80095c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095ca:	4b03      	ldr	r3, [pc, #12]	; (80095d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	2000015c 	.word	0x2000015c

080095dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	6039      	str	r1, [r7, #0]
 80095e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095e8:	79fb      	ldrb	r3, [r7, #7]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d105      	bne.n	80095fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	4907      	ldr	r1, [pc, #28]	; (8009610 <USBD_FS_ProductStrDescriptor+0x34>)
 80095f2:	4808      	ldr	r0, [pc, #32]	; (8009614 <USBD_FS_ProductStrDescriptor+0x38>)
 80095f4:	f7ff fee5 	bl	80093c2 <USBD_GetString>
 80095f8:	e004      	b.n	8009604 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	4904      	ldr	r1, [pc, #16]	; (8009610 <USBD_FS_ProductStrDescriptor+0x34>)
 80095fe:	4805      	ldr	r0, [pc, #20]	; (8009614 <USBD_FS_ProductStrDescriptor+0x38>)
 8009600:	f7ff fedf 	bl	80093c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009604:	4b02      	ldr	r3, [pc, #8]	; (8009610 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	20000c64 	.word	0x20000c64
 8009614:	08009e78 	.word	0x08009e78

08009618 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	6039      	str	r1, [r7, #0]
 8009622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	4904      	ldr	r1, [pc, #16]	; (8009638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009628:	4804      	ldr	r0, [pc, #16]	; (800963c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800962a:	f7ff feca 	bl	80093c2 <USBD_GetString>
  return USBD_StrDesc;
 800962e:	4b02      	ldr	r3, [pc, #8]	; (8009638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20000c64 	.word	0x20000c64
 800963c:	08009e90 	.word	0x08009e90

08009640 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	6039      	str	r1, [r7, #0]
 800964a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	221a      	movs	r2, #26
 8009650:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009652:	f000 f843 	bl	80096dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009656:	4b02      	ldr	r3, [pc, #8]	; (8009660 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	20000160 	.word	0x20000160

08009664 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	4603      	mov	r3, r0
 800966c:	6039      	str	r1, [r7, #0]
 800966e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009670:	79fb      	ldrb	r3, [r7, #7]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d105      	bne.n	8009682 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	4907      	ldr	r1, [pc, #28]	; (8009698 <USBD_FS_ConfigStrDescriptor+0x34>)
 800967a:	4808      	ldr	r0, [pc, #32]	; (800969c <USBD_FS_ConfigStrDescriptor+0x38>)
 800967c:	f7ff fea1 	bl	80093c2 <USBD_GetString>
 8009680:	e004      	b.n	800968c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	4904      	ldr	r1, [pc, #16]	; (8009698 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009686:	4805      	ldr	r0, [pc, #20]	; (800969c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009688:	f7ff fe9b 	bl	80093c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800968c:	4b02      	ldr	r3, [pc, #8]	; (8009698 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	20000c64 	.word	0x20000c64
 800969c:	08009ea4 	.word	0x08009ea4

080096a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	4603      	mov	r3, r0
 80096a8:	6039      	str	r1, [r7, #0]
 80096aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d105      	bne.n	80096be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	4907      	ldr	r1, [pc, #28]	; (80096d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096b6:	4808      	ldr	r0, [pc, #32]	; (80096d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096b8:	f7ff fe83 	bl	80093c2 <USBD_GetString>
 80096bc:	e004      	b.n	80096c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	4904      	ldr	r1, [pc, #16]	; (80096d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096c2:	4805      	ldr	r0, [pc, #20]	; (80096d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096c4:	f7ff fe7d 	bl	80093c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096c8:	4b02      	ldr	r3, [pc, #8]	; (80096d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20000c64 	.word	0x20000c64
 80096d8:	08009eb0 	.word	0x08009eb0

080096dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096e2:	4b0f      	ldr	r3, [pc, #60]	; (8009720 <Get_SerialNum+0x44>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096e8:	4b0e      	ldr	r3, [pc, #56]	; (8009724 <Get_SerialNum+0x48>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096ee:	4b0e      	ldr	r3, [pc, #56]	; (8009728 <Get_SerialNum+0x4c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4413      	add	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d009      	beq.n	8009716 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009702:	2208      	movs	r2, #8
 8009704:	4909      	ldr	r1, [pc, #36]	; (800972c <Get_SerialNum+0x50>)
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f000 f814 	bl	8009734 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800970c:	2204      	movs	r2, #4
 800970e:	4908      	ldr	r1, [pc, #32]	; (8009730 <Get_SerialNum+0x54>)
 8009710:	68b8      	ldr	r0, [r7, #8]
 8009712:	f000 f80f 	bl	8009734 <IntToUnicode>
  }
}
 8009716:	bf00      	nop
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	1fff7a10 	.word	0x1fff7a10
 8009724:	1fff7a14 	.word	0x1fff7a14
 8009728:	1fff7a18 	.word	0x1fff7a18
 800972c:	20000162 	.word	0x20000162
 8009730:	20000172 	.word	0x20000172

08009734 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009734:	b480      	push	{r7}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	4613      	mov	r3, r2
 8009740:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009746:	2300      	movs	r3, #0
 8009748:	75fb      	strb	r3, [r7, #23]
 800974a:	e027      	b.n	800979c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	0f1b      	lsrs	r3, r3, #28
 8009750:	2b09      	cmp	r3, #9
 8009752:	d80b      	bhi.n	800976c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	0f1b      	lsrs	r3, r3, #28
 8009758:	b2da      	uxtb	r2, r3
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	005b      	lsls	r3, r3, #1
 800975e:	4619      	mov	r1, r3
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	440b      	add	r3, r1
 8009764:	3230      	adds	r2, #48	; 0x30
 8009766:	b2d2      	uxtb	r2, r2
 8009768:	701a      	strb	r2, [r3, #0]
 800976a:	e00a      	b.n	8009782 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	0f1b      	lsrs	r3, r3, #28
 8009770:	b2da      	uxtb	r2, r3
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	005b      	lsls	r3, r3, #1
 8009776:	4619      	mov	r1, r3
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	440b      	add	r3, r1
 800977c:	3237      	adds	r2, #55	; 0x37
 800977e:	b2d2      	uxtb	r2, r2
 8009780:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	011b      	lsls	r3, r3, #4
 8009786:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009788:	7dfb      	ldrb	r3, [r7, #23]
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	3301      	adds	r3, #1
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	4413      	add	r3, r2
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	3301      	adds	r3, #1
 800979a:	75fb      	strb	r3, [r7, #23]
 800979c:	7dfa      	ldrb	r2, [r7, #23]
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d3d3      	bcc.n	800974c <IntToUnicode+0x18>
  }
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop
 80097a8:	371c      	adds	r7, #28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
	...

080097b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08a      	sub	sp, #40	; 0x28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097bc:	f107 0314 	add.w	r3, r7, #20
 80097c0:	2200      	movs	r2, #0
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	605a      	str	r2, [r3, #4]
 80097c6:	609a      	str	r2, [r3, #8]
 80097c8:	60da      	str	r2, [r3, #12]
 80097ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097d4:	d14b      	bne.n	800986e <HAL_PCD_MspInit+0xba>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097d6:	2300      	movs	r3, #0
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	4b27      	ldr	r3, [pc, #156]	; (8009878 <HAL_PCD_MspInit+0xc4>)
 80097dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097de:	4a26      	ldr	r2, [pc, #152]	; (8009878 <HAL_PCD_MspInit+0xc4>)
 80097e0:	f043 0301 	orr.w	r3, r3, #1
 80097e4:	6313      	str	r3, [r2, #48]	; 0x30
 80097e6:	4b24      	ldr	r3, [pc, #144]	; (8009878 <HAL_PCD_MspInit+0xc4>)
 80097e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	613b      	str	r3, [r7, #16]
 80097f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80097f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097f8:	2302      	movs	r3, #2
 80097fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097fc:	2300      	movs	r3, #0
 80097fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009800:	2303      	movs	r3, #3
 8009802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009804:	230a      	movs	r3, #10
 8009806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009808:	f107 0314 	add.w	r3, r7, #20
 800980c:	4619      	mov	r1, r3
 800980e:	481b      	ldr	r0, [pc, #108]	; (800987c <HAL_PCD_MspInit+0xc8>)
 8009810:	f7f9 ff66 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800981a:	2302      	movs	r3, #2
 800981c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800981e:	2301      	movs	r3, #1
 8009820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009822:	2303      	movs	r3, #3
 8009824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009826:	230a      	movs	r3, #10
 8009828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800982a:	f107 0314 	add.w	r3, r7, #20
 800982e:	4619      	mov	r1, r3
 8009830:	4812      	ldr	r0, [pc, #72]	; (800987c <HAL_PCD_MspInit+0xc8>)
 8009832:	f7f9 ff55 	bl	80036e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009836:	4b10      	ldr	r3, [pc, #64]	; (8009878 <HAL_PCD_MspInit+0xc4>)
 8009838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800983a:	4a0f      	ldr	r2, [pc, #60]	; (8009878 <HAL_PCD_MspInit+0xc4>)
 800983c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009840:	6353      	str	r3, [r2, #52]	; 0x34
 8009842:	2300      	movs	r3, #0
 8009844:	60fb      	str	r3, [r7, #12]
 8009846:	4b0c      	ldr	r3, [pc, #48]	; (8009878 <HAL_PCD_MspInit+0xc4>)
 8009848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800984a:	4a0b      	ldr	r2, [pc, #44]	; (8009878 <HAL_PCD_MspInit+0xc4>)
 800984c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009850:	6453      	str	r3, [r2, #68]	; 0x44
 8009852:	4b09      	ldr	r3, [pc, #36]	; (8009878 <HAL_PCD_MspInit+0xc4>)
 8009854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800985e:	2200      	movs	r2, #0
 8009860:	2100      	movs	r1, #0
 8009862:	2043      	movs	r0, #67	; 0x43
 8009864:	f7f9 fb03 	bl	8002e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009868:	2043      	movs	r0, #67	; 0x43
 800986a:	f7f9 fb1c 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800986e:	bf00      	nop
 8009870:	3728      	adds	r7, #40	; 0x28
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	40023800 	.word	0x40023800
 800987c:	40020000 	.word	0x40020000

08009880 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009894:	4619      	mov	r1, r3
 8009896:	4610      	mov	r0, r2
 8009898:	f7fe fdac 	bl	80083f4 <USBD_LL_SetupStage>
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4613      	mov	r3, r2
 80098bc:	00db      	lsls	r3, r3, #3
 80098be:	1a9b      	subs	r3, r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	440b      	add	r3, r1
 80098c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	4619      	mov	r1, r3
 80098ce:	f7fe fde6 	bl	800849e <USBD_LL_DataOutStage>
}
 80098d2:	bf00      	nop
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80098ec:	78fa      	ldrb	r2, [r7, #3]
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	4613      	mov	r3, r2
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	1a9b      	subs	r3, r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	440b      	add	r3, r1
 80098fa:	3348      	adds	r3, #72	; 0x48
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	78fb      	ldrb	r3, [r7, #3]
 8009900:	4619      	mov	r1, r3
 8009902:	f7fe fe2f 	bl	8008564 <USBD_LL_DataInStage>
}
 8009906:	bf00      	nop
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800991c:	4618      	mov	r0, r3
 800991e:	f7fe ff43 	bl	80087a8 <USBD_LL_SOF>
}
 8009922:	bf00      	nop
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009932:	2301      	movs	r3, #1
 8009934:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d102      	bne.n	8009944 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800993e:	2300      	movs	r3, #0
 8009940:	73fb      	strb	r3, [r7, #15]
 8009942:	e008      	b.n	8009956 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	2b02      	cmp	r3, #2
 800994a:	d102      	bne.n	8009952 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800994c:	2301      	movs	r3, #1
 800994e:	73fb      	strb	r3, [r7, #15]
 8009950:	e001      	b.n	8009956 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009952:	f7f7 f95d 	bl	8000c10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800995c:	7bfa      	ldrb	r2, [r7, #15]
 800995e:	4611      	mov	r1, r2
 8009960:	4618      	mov	r0, r3
 8009962:	f7fe fee3 	bl	800872c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800996c:	4618      	mov	r0, r3
 800996e:	f7fe fe8f 	bl	8008690 <USBD_LL_Reset>
}
 8009972:	bf00      	nop
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
	...

0800997c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe fede 	bl	800874c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	6812      	ldr	r2, [r2, #0]
 800999e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099a2:	f043 0301 	orr.w	r3, r3, #1
 80099a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a1b      	ldr	r3, [r3, #32]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d005      	beq.n	80099bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099b0:	4b04      	ldr	r3, [pc, #16]	; (80099c4 <HAL_PCD_SuspendCallback+0x48>)
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	4a03      	ldr	r2, [pc, #12]	; (80099c4 <HAL_PCD_SuspendCallback+0x48>)
 80099b6:	f043 0306 	orr.w	r3, r3, #6
 80099ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099bc:	bf00      	nop
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	e000ed00 	.word	0xe000ed00

080099c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe fece 	bl	8008778 <USBD_LL_Resume>
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099f6:	78fa      	ldrb	r2, [r7, #3]
 80099f8:	4611      	mov	r1, r2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe ff1c 	bl	8008838 <USBD_LL_IsoOUTIncomplete>
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe fee4 	bl	80087ec <USBD_LL_IsoINIncomplete>
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fe ff22 	bl	8008884 <USBD_LL_DevConnected>
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fe ff1f 	bl	800889a <USBD_LL_DevDisconnected>
}
 8009a5c:	bf00      	nop
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d13c      	bne.n	8009aee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a74:	4a20      	ldr	r2, [pc, #128]	; (8009af8 <USBD_LL_Init+0x94>)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a1e      	ldr	r2, [pc, #120]	; (8009af8 <USBD_LL_Init+0x94>)
 8009a80:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a84:	4b1c      	ldr	r3, [pc, #112]	; (8009af8 <USBD_LL_Init+0x94>)
 8009a86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009a8c:	4b1a      	ldr	r3, [pc, #104]	; (8009af8 <USBD_LL_Init+0x94>)
 8009a8e:	2204      	movs	r2, #4
 8009a90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a92:	4b19      	ldr	r3, [pc, #100]	; (8009af8 <USBD_LL_Init+0x94>)
 8009a94:	2202      	movs	r2, #2
 8009a96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a98:	4b17      	ldr	r3, [pc, #92]	; (8009af8 <USBD_LL_Init+0x94>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a9e:	4b16      	ldr	r3, [pc, #88]	; (8009af8 <USBD_LL_Init+0x94>)
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009aa4:	4b14      	ldr	r3, [pc, #80]	; (8009af8 <USBD_LL_Init+0x94>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009aaa:	4b13      	ldr	r3, [pc, #76]	; (8009af8 <USBD_LL_Init+0x94>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ab0:	4b11      	ldr	r3, [pc, #68]	; (8009af8 <USBD_LL_Init+0x94>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009ab6:	4b10      	ldr	r3, [pc, #64]	; (8009af8 <USBD_LL_Init+0x94>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009abc:	4b0e      	ldr	r3, [pc, #56]	; (8009af8 <USBD_LL_Init+0x94>)
 8009abe:	2200      	movs	r2, #0
 8009ac0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009ac2:	480d      	ldr	r0, [pc, #52]	; (8009af8 <USBD_LL_Init+0x94>)
 8009ac4:	f7f9 ffc1 	bl	8003a4a <HAL_PCD_Init>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ace:	f7f7 f89f 	bl	8000c10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009ad2:	2180      	movs	r1, #128	; 0x80
 8009ad4:	4808      	ldr	r0, [pc, #32]	; (8009af8 <USBD_LL_Init+0x94>)
 8009ad6:	f7fb f906 	bl	8004ce6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009ada:	2240      	movs	r2, #64	; 0x40
 8009adc:	2100      	movs	r1, #0
 8009ade:	4806      	ldr	r0, [pc, #24]	; (8009af8 <USBD_LL_Init+0x94>)
 8009ae0:	f7fb f8ba 	bl	8004c58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ae4:	2280      	movs	r2, #128	; 0x80
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	4803      	ldr	r0, [pc, #12]	; (8009af8 <USBD_LL_Init+0x94>)
 8009aea:	f7fb f8b5 	bl	8004c58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	20000e64 	.word	0x20000e64

08009afc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fa f8b6 	bl	8003c84 <HAL_PCD_Start>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 f930 	bl	8009d84 <USBD_Get_USB_Status>
 8009b24:	4603      	mov	r3, r0
 8009b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b084      	sub	sp, #16
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	4608      	mov	r0, r1
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	461a      	mov	r2, r3
 8009b40:	4603      	mov	r3, r0
 8009b42:	70fb      	strb	r3, [r7, #3]
 8009b44:	460b      	mov	r3, r1
 8009b46:	70bb      	strb	r3, [r7, #2]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009b5a:	78bb      	ldrb	r3, [r7, #2]
 8009b5c:	883a      	ldrh	r2, [r7, #0]
 8009b5e:	78f9      	ldrb	r1, [r7, #3]
 8009b60:	f7fa fc9a 	bl	8004498 <HAL_PCD_EP_Open>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 f90a 	bl	8009d84 <USBD_Get_USB_Status>
 8009b70:	4603      	mov	r3, r0
 8009b72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b084      	sub	sp, #16
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	460b      	mov	r3, r1
 8009b88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b98:	78fa      	ldrb	r2, [r7, #3]
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fa fce3 	bl	8004568 <HAL_PCD_EP_Close>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 f8eb 	bl	8009d84 <USBD_Get_USB_Status>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bd6:	78fa      	ldrb	r2, [r7, #3]
 8009bd8:	4611      	mov	r1, r2
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fa fda3 	bl	8004726 <HAL_PCD_EP_SetStall>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f000 f8cc 	bl	8009d84 <USBD_Get_USB_Status>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	460b      	mov	r3, r1
 8009c04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c14:	78fa      	ldrb	r2, [r7, #3]
 8009c16:	4611      	mov	r1, r2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fa fde8 	bl	80047ee <HAL_PCD_EP_ClrStall>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 f8ad 	bl	8009d84 <USBD_Get_USB_Status>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	460b      	mov	r3, r1
 8009c42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	da0b      	bge.n	8009c6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c5a:	68f9      	ldr	r1, [r7, #12]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	00db      	lsls	r3, r3, #3
 8009c60:	1a9b      	subs	r3, r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	440b      	add	r3, r1
 8009c66:	333e      	adds	r3, #62	; 0x3e
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	e00b      	b.n	8009c84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c6c:	78fb      	ldrb	r3, [r7, #3]
 8009c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c72:	68f9      	ldr	r1, [r7, #12]
 8009c74:	4613      	mov	r3, r2
 8009c76:	00db      	lsls	r3, r3, #3
 8009c78:	1a9b      	subs	r3, r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	440b      	add	r3, r1
 8009c7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009caa:	78fa      	ldrb	r2, [r7, #3]
 8009cac:	4611      	mov	r1, r2
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fa fbcd 	bl	800444e <HAL_PCD_SetAddress>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 f862 	bl	8009d84 <USBD_Get_USB_Status>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b086      	sub	sp, #24
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	603b      	str	r3, [r7, #0]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cec:	7af9      	ldrb	r1, [r7, #11]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	f7fa fcce 	bl	8004692 <HAL_PCD_EP_Transmit>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 f841 	bl	8009d84 <USBD_Get_USB_Status>
 8009d02:	4603      	mov	r3, r0
 8009d04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d06:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3718      	adds	r7, #24
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	607a      	str	r2, [r7, #4]
 8009d1a:	603b      	str	r3, [r7, #0]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d20:	2300      	movs	r3, #0
 8009d22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d2e:	7af9      	ldrb	r1, [r7, #11]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	f7fa fc62 	bl	80045fc <HAL_PCD_EP_Receive>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 f820 	bl	8009d84 <USBD_Get_USB_Status>
 8009d44:	4603      	mov	r3, r0
 8009d46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d48:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3718      	adds	r7, #24
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d5c:	4b03      	ldr	r3, [pc, #12]	; (8009d6c <USBD_static_malloc+0x18>)
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	20000768 	.word	0x20000768

08009d70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]

}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	d817      	bhi.n	8009dc8 <USBD_Get_USB_Status+0x44>
 8009d98:	a201      	add	r2, pc, #4	; (adr r2, 8009da0 <USBD_Get_USB_Status+0x1c>)
 8009d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9e:	bf00      	nop
 8009da0:	08009db1 	.word	0x08009db1
 8009da4:	08009db7 	.word	0x08009db7
 8009da8:	08009dbd 	.word	0x08009dbd
 8009dac:	08009dc3 	.word	0x08009dc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	73fb      	strb	r3, [r7, #15]
    break;
 8009db4:	e00b      	b.n	8009dce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009db6:	2303      	movs	r3, #3
 8009db8:	73fb      	strb	r3, [r7, #15]
    break;
 8009dba:	e008      	b.n	8009dce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc0:	e005      	b.n	8009dce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc6:	e002      	b.n	8009dce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	73fb      	strb	r3, [r7, #15]
    break;
 8009dcc:	bf00      	nop
  }
  return usb_status;
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <__libc_init_array>:
 8009ddc:	b570      	push	{r4, r5, r6, lr}
 8009dde:	4d0d      	ldr	r5, [pc, #52]	; (8009e14 <__libc_init_array+0x38>)
 8009de0:	4c0d      	ldr	r4, [pc, #52]	; (8009e18 <__libc_init_array+0x3c>)
 8009de2:	1b64      	subs	r4, r4, r5
 8009de4:	10a4      	asrs	r4, r4, #2
 8009de6:	2600      	movs	r6, #0
 8009de8:	42a6      	cmp	r6, r4
 8009dea:	d109      	bne.n	8009e00 <__libc_init_array+0x24>
 8009dec:	4d0b      	ldr	r5, [pc, #44]	; (8009e1c <__libc_init_array+0x40>)
 8009dee:	4c0c      	ldr	r4, [pc, #48]	; (8009e20 <__libc_init_array+0x44>)
 8009df0:	f000 f820 	bl	8009e34 <_init>
 8009df4:	1b64      	subs	r4, r4, r5
 8009df6:	10a4      	asrs	r4, r4, #2
 8009df8:	2600      	movs	r6, #0
 8009dfa:	42a6      	cmp	r6, r4
 8009dfc:	d105      	bne.n	8009e0a <__libc_init_array+0x2e>
 8009dfe:	bd70      	pop	{r4, r5, r6, pc}
 8009e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e04:	4798      	blx	r3
 8009e06:	3601      	adds	r6, #1
 8009e08:	e7ee      	b.n	8009de8 <__libc_init_array+0xc>
 8009e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e0e:	4798      	blx	r3
 8009e10:	3601      	adds	r6, #1
 8009e12:	e7f2      	b.n	8009dfa <__libc_init_array+0x1e>
 8009e14:	08009ee8 	.word	0x08009ee8
 8009e18:	08009ee8 	.word	0x08009ee8
 8009e1c:	08009ee8 	.word	0x08009ee8
 8009e20:	08009eec 	.word	0x08009eec

08009e24 <memset>:
 8009e24:	4402      	add	r2, r0
 8009e26:	4603      	mov	r3, r0
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d100      	bne.n	8009e2e <memset+0xa>
 8009e2c:	4770      	bx	lr
 8009e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e32:	e7f9      	b.n	8009e28 <memset+0x4>

08009e34 <_init>:
 8009e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e36:	bf00      	nop
 8009e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e3a:	bc08      	pop	{r3}
 8009e3c:	469e      	mov	lr, r3
 8009e3e:	4770      	bx	lr

08009e40 <_fini>:
 8009e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e42:	bf00      	nop
 8009e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e46:	bc08      	pop	{r3}
 8009e48:	469e      	mov	lr, r3
 8009e4a:	4770      	bx	lr
