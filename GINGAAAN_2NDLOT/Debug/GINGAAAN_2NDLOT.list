
GINGAAAN_2NDLOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080057b8  080057b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057d8  080057d8  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057e0  080057e0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057e0  080057e0  000157e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080057e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a4  20000020  08005808  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  08005808  000207c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bfc  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f78  00000000  00000000  00038c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  0003bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  0003cb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b9a  00000000  00000000  0003da40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014600  00000000  00000000  000615da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d42da  00000000  00000000  00075bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149eb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b8  00000000  00000000  00149f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080057a0 	.word	0x080057a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	080057a0 	.word	0x080057a0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <appInit>:
#include <stdbool.h>
#include <math.h>
#include "app.h"

//初期化
int appInit(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	//D_CAN_SetReceiveAddress(8,9,10,11);
	D_CAN_SetReceiveAddressAll();
 8000502:	f001 f807 	bl	8001514 <D_CAN_SetReceiveAddressAll>
	for(int i=0; i<8; i++){
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	e01b      	b.n	8000544 <appInit+0x48>
		for(int j=0; j<4; j++){
 800050c:	2300      	movs	r3, #0
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	e012      	b.n	8000538 <appInit+0x3c>
			rcvData[j][i] = 0;
 8000512:	4a10      	ldr	r2, [pc, #64]	; (8000554 <appInit+0x58>)
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	00db      	lsls	r3, r3, #3
 8000518:	441a      	add	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4413      	add	r3, r2
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
			sndData[j][i] = 0;
 8000522:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <appInit+0x5c>)
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	441a      	add	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<4; j++){
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	2b03      	cmp	r3, #3
 800053c:	dde9      	ble.n	8000512 <appInit+0x16>
	for(int i=0; i<8; i++){
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3301      	adds	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b07      	cmp	r3, #7
 8000548:	dde0      	ble.n	800050c <appInit+0x10>
		}
	}
	return 0;
 800054a:	2300      	movs	r3, #0
}
 800054c:	4618      	mov	r0, r3
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	2000005c 	.word	0x2000005c
 8000558:	2000003c 	.word	0x2000003c

0800055c <appTask>:

int appTask(void){
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
		sndData[i][sendLength-1] = (uint8_t)checkSum;
	}
	*/

	//SMsndTime += G_System_MicroCounter - recent_System_counter;
	sndTime += G_System_counter - recent_System_counter;
 8000562:	4b9b      	ldr	r3, [pc, #620]	; (80007d0 <appTask+0x274>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	4b9b      	ldr	r3, [pc, #620]	; (80007d4 <appTask+0x278>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	1ad2      	subs	r2, r2, r3
 800056c:	4b9a      	ldr	r3, [pc, #616]	; (80007d8 <appTask+0x27c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4413      	add	r3, r2
 8000572:	4a99      	ldr	r2, [pc, #612]	; (80007d8 <appTask+0x27c>)
 8000574:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_counter;
 8000576:	4b96      	ldr	r3, [pc, #600]	; (80007d0 <appTask+0x274>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a96      	ldr	r2, [pc, #600]	; (80007d4 <appTask+0x278>)
 800057c:	6013      	str	r3, [r2, #0]
	//CAN送信タイミングの場合送信
	if(sndTime >= CAN_SEND_INTERVAL){
 800057e:	4b96      	ldr	r3, [pc, #600]	; (80007d8 <appTask+0x27c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000586:	f0c0 8088 	bcc.w	800069a <appTask+0x13e>
		sndTime = 0;
 800058a:	4b93      	ldr	r3, [pc, #588]	; (80007d8 <appTask+0x27c>)
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
		static int sendLength = 8;
		sndData[0][0] = testSendData;
 8000590:	4b92      	ldr	r3, [pc, #584]	; (80007dc <appTask+0x280>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b92      	ldr	r3, [pc, #584]	; (80007e0 <appTask+0x284>)
 8000598:	701a      	strb	r2, [r3, #0]
		sndData[0][1] = testSendData2;
 800059a:	4b92      	ldr	r3, [pc, #584]	; (80007e4 <appTask+0x288>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b8f      	ldr	r3, [pc, #572]	; (80007e0 <appTask+0x284>)
 80005a2:	705a      	strb	r2, [r3, #1]
		sndData[0][2] = testSendData2;
 80005a4:	4b8f      	ldr	r3, [pc, #572]	; (80007e4 <appTask+0x288>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b8d      	ldr	r3, [pc, #564]	; (80007e0 <appTask+0x284>)
 80005ac:	709a      	strb	r2, [r3, #2]
		sndData[0][3] = testSendData2;
 80005ae:	4b8d      	ldr	r3, [pc, #564]	; (80007e4 <appTask+0x288>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b8a      	ldr	r3, [pc, #552]	; (80007e0 <appTask+0x284>)
 80005b6:	70da      	strb	r2, [r3, #3]
		sndData[0][4] = testSendData2;
 80005b8:	4b8a      	ldr	r3, [pc, #552]	; (80007e4 <appTask+0x288>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b88      	ldr	r3, [pc, #544]	; (80007e0 <appTask+0x284>)
 80005c0:	711a      	strb	r2, [r3, #4]
		sndData[0][5] = testSendData2;
 80005c2:	4b88      	ldr	r3, [pc, #544]	; (80007e4 <appTask+0x288>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b85      	ldr	r3, [pc, #532]	; (80007e0 <appTask+0x284>)
 80005ca:	715a      	strb	r2, [r3, #5]
		sndData[0][6] = testSendData2;
 80005cc:	4b85      	ldr	r3, [pc, #532]	; (80007e4 <appTask+0x288>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b83      	ldr	r3, [pc, #524]	; (80007e0 <appTask+0x284>)
 80005d4:	719a      	strb	r2, [r3, #6]
		sndData[0][7] = testSendData2;
 80005d6:	4b83      	ldr	r3, [pc, #524]	; (80007e4 <appTask+0x288>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b80      	ldr	r3, [pc, #512]	; (80007e0 <appTask+0x284>)
 80005de:	71da      	strb	r2, [r3, #7]
		uint8_t dataSum = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	73fb      	strb	r3, [r7, #15]
		for(int j=0; j<sendLength-1; j++){
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	e009      	b.n	80005fe <appTask+0xa2>
			dataSum += sndData[0][j];
 80005ea:	4a7d      	ldr	r2, [pc, #500]	; (80007e0 <appTask+0x284>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4413      	add	r3, r2
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	4413      	add	r3, r2
 80005f6:	73fb      	strb	r3, [r7, #15]
		for(int j=0; j<sendLength-1; j++){
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	3301      	adds	r3, #1
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b7a      	ldr	r3, [pc, #488]	; (80007e8 <appTask+0x28c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3b01      	subs	r3, #1
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	429a      	cmp	r2, r3
 8000608:	dbef      	blt.n	80005ea <appTask+0x8e>
		}
		//int checkSum = 256 - (int)dataSum;
		sndData[0][sendLength-1] = (uint8_t)dataSum;
 800060a:	4b77      	ldr	r3, [pc, #476]	; (80007e8 <appTask+0x28c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3b01      	subs	r3, #1
 8000610:	4973      	ldr	r1, [pc, #460]	; (80007e0 <appTask+0x284>)
 8000612:	7bfa      	ldrb	r2, [r7, #15]
 8000614:	54ca      	strb	r2, [r1, r3]


		errorHandle = D_CAN_Transmit(0x7ff/*testSendData*/,sndData[0],sendLength);
 8000616:	4b74      	ldr	r3, [pc, #464]	; (80007e8 <appTask+0x28c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	b29b      	uxth	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	4970      	ldr	r1, [pc, #448]	; (80007e0 <appTask+0x284>)
 8000620:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000624:	f000 ff1e 	bl	8001464 <D_CAN_Transmit>
 8000628:	4603      	mov	r3, r0
 800062a:	4a70      	ldr	r2, [pc, #448]	; (80007ec <appTask+0x290>)
 800062c:	6013      	str	r3, [r2, #0]
		sndTime = 0;
 800062e:	4b6a      	ldr	r3, [pc, #424]	; (80007d8 <appTask+0x27c>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
		count1++;
 8000634:	4b6e      	ldr	r3, [pc, #440]	; (80007f0 <appTask+0x294>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a6d      	ldr	r2, [pc, #436]	; (80007f0 <appTask+0x294>)
 800063c:	6013      	str	r3, [r2, #0]
		if(count1 >= 1 ){//&& errorHandle == 0){
 800063e:	4b6c      	ldr	r3, [pc, #432]	; (80007f0 <appTask+0x294>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	dd07      	ble.n	8000656 <appTask+0xfa>
			count1 = 0;
 8000646:	4b6a      	ldr	r3, [pc, #424]	; (80007f0 <appTask+0x294>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
			testSendData++;
 800064c:	4b63      	ldr	r3, [pc, #396]	; (80007dc <appTask+0x280>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	4a62      	ldr	r2, [pc, #392]	; (80007dc <appTask+0x280>)
 8000654:	6013      	str	r3, [r2, #0]
		}
		if(testSendData >= 1000){ //&& errorHandle == 0){
 8000656:	4b61      	ldr	r3, [pc, #388]	; (80007dc <appTask+0x280>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800065e:	db0c      	blt.n	800067a <appTask+0x11e>
			testSendData = 0;
 8000660:	4b5e      	ldr	r3, [pc, #376]	; (80007dc <appTask+0x280>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
			testSendData2++;
 8000666:	4b5f      	ldr	r3, [pc, #380]	; (80007e4 <appTask+0x288>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	4a5d      	ldr	r2, [pc, #372]	; (80007e4 <appTask+0x288>)
 800066e:	6013      	str	r3, [r2, #0]
			ownIdCount++;
 8000670:	4b60      	ldr	r3, [pc, #384]	; (80007f4 <appTask+0x298>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a5f      	ldr	r2, [pc, #380]	; (80007f4 <appTask+0x298>)
 8000678:	6013      	str	r3, [r2, #0]
		}
		if(testSendData2 >= 256 && errorHandle == 0){
 800067a:	4b5a      	ldr	r3, [pc, #360]	; (80007e4 <appTask+0x288>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2bff      	cmp	r3, #255	; 0xff
 8000680:	dd0b      	ble.n	800069a <appTask+0x13e>
 8000682:	4b5a      	ldr	r3, [pc, #360]	; (80007ec <appTask+0x290>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d107      	bne.n	800069a <appTask+0x13e>
			testSendData2 = 1;
 800068a:	4b56      	ldr	r3, [pc, #344]	; (80007e4 <appTask+0x288>)
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]
			testSendData3++;
 8000690:	4b59      	ldr	r3, [pc, #356]	; (80007f8 <appTask+0x29c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	4a58      	ldr	r2, [pc, #352]	; (80007f8 <appTask+0x29c>)
 8000698:	6013      	str	r3, [r2, #0]
			ownIdCount++;
		}
		*/
	}
	//CAN受信処理
	D_CAN_Receive(0,rcvData[0],receiveLength);
 800069a:	4b58      	ldr	r3, [pc, #352]	; (80007fc <appTask+0x2a0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	4957      	ldr	r1, [pc, #348]	; (8000800 <appTask+0x2a4>)
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 ff67 	bl	8001578 <D_CAN_Receive>
	D_CAN_Receive(1,rcvData[1],receiveLength);
 80006aa:	4b54      	ldr	r3, [pc, #336]	; (80007fc <appTask+0x2a0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	4954      	ldr	r1, [pc, #336]	; (8000804 <appTask+0x2a8>)
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 ff5f 	bl	8001578 <D_CAN_Receive>

	//D_Mess_printf("%d\n", G_System_counter);
	//D_PWM_Set(1,100);
	//D_PWM_Set(2,100);
	//IO_SET_BLDC2_DIR();
	if(IO_READ_USERBUTTON()){
 80006ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006be:	4852      	ldr	r0, [pc, #328]	; (8000808 <appTask+0x2ac>)
 80006c0:	f001 f83c 	bl	800173c <D_GPIO_Read>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f083 0301 	eor.w	r3, r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d033      	beq.n	8000738 <appTask+0x1dc>
		IO_SET_USERLED();
 80006d0:	2120      	movs	r1, #32
 80006d2:	484e      	ldr	r0, [pc, #312]	; (800080c <appTask+0x2b0>)
 80006d4:	f001 f812 	bl	80016fc <D_GPIO_Set>
		if(_userButton){
 80006d8:	4b4d      	ldr	r3, [pc, #308]	; (8000810 <appTask+0x2b4>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d007      	beq.n	80006f0 <appTask+0x194>
			_userButton = false;
 80006e0:	4b4b      	ldr	r3, [pc, #300]	; (8000810 <appTask+0x2b4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
			testSendData += 1;
 80006e6:	4b3d      	ldr	r3, [pc, #244]	; (80007dc <appTask+0x280>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	4a3b      	ldr	r2, [pc, #236]	; (80007dc <appTask+0x280>)
 80006ee:	6013      	str	r3, [r2, #0]
		}
		IO_SET_GOLED_1();
 80006f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f4:	4844      	ldr	r0, [pc, #272]	; (8000808 <appTask+0x2ac>)
 80006f6:	f001 f801 	bl	80016fc <D_GPIO_Set>
		IO_SET_HOLDLED_1();
 80006fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006fe:	4842      	ldr	r0, [pc, #264]	; (8000808 <appTask+0x2ac>)
 8000700:	f000 fffc 	bl	80016fc <D_GPIO_Set>
		IO_SET_GOLED_2();
 8000704:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000708:	483f      	ldr	r0, [pc, #252]	; (8000808 <appTask+0x2ac>)
 800070a:	f000 fff7 	bl	80016fc <D_GPIO_Set>
		IO_SET_HOLDLED_2();
 800070e:	2104      	movs	r1, #4
 8000710:	4840      	ldr	r0, [pc, #256]	; (8000814 <appTask+0x2b8>)
 8000712:	f000 fff3 	bl	80016fc <D_GPIO_Set>
		IO_SET_GOLED_3();
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	483f      	ldr	r0, [pc, #252]	; (8000818 <appTask+0x2bc>)
 800071a:	f000 ffef 	bl	80016fc <D_GPIO_Set>
		IO_SET_HOLDLED_3();
 800071e:	2101      	movs	r1, #1
 8000720:	483a      	ldr	r0, [pc, #232]	; (800080c <appTask+0x2b0>)
 8000722:	f000 ffeb 	bl	80016fc <D_GPIO_Set>
		IO_SET_GOLED_4();
 8000726:	2110      	movs	r1, #16
 8000728:	4838      	ldr	r0, [pc, #224]	; (800080c <appTask+0x2b0>)
 800072a:	f000 ffe7 	bl	80016fc <D_GPIO_Set>
		IO_SET_HOLDLED_4();
 800072e:	2104      	movs	r1, #4
 8000730:	4835      	ldr	r0, [pc, #212]	; (8000808 <appTask+0x2ac>)
 8000732:	f000 ffe3 	bl	80016fc <D_GPIO_Set>
 8000736:	e029      	b.n	800078c <appTask+0x230>
		//Lottery_JP_SetSpeed(JPC_MAX_SPEED,0);

		//IO_SET_ROOMLIGHT();
		//JP_Lift_Down();
	}else{
		_userButton = true;
 8000738:	4b35      	ldr	r3, [pc, #212]	; (8000810 <appTask+0x2b4>)
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
		IO_RESET_USERLED();
 800073e:	2120      	movs	r1, #32
 8000740:	4832      	ldr	r0, [pc, #200]	; (800080c <appTask+0x2b0>)
 8000742:	f000 ffeb 	bl	800171c <D_GPIO_Reset>

		IO_RESET_GOLED_1();
 8000746:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074a:	482f      	ldr	r0, [pc, #188]	; (8000808 <appTask+0x2ac>)
 800074c:	f000 ffe6 	bl	800171c <D_GPIO_Reset>
		IO_RESET_HOLDLED_1();
 8000750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000754:	482c      	ldr	r0, [pc, #176]	; (8000808 <appTask+0x2ac>)
 8000756:	f000 ffe1 	bl	800171c <D_GPIO_Reset>
		IO_RESET_GOLED_2();
 800075a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075e:	482a      	ldr	r0, [pc, #168]	; (8000808 <appTask+0x2ac>)
 8000760:	f000 ffdc 	bl	800171c <D_GPIO_Reset>
		IO_RESET_HOLDLED_2();
 8000764:	2104      	movs	r1, #4
 8000766:	482b      	ldr	r0, [pc, #172]	; (8000814 <appTask+0x2b8>)
 8000768:	f000 ffd8 	bl	800171c <D_GPIO_Reset>
		IO_RESET_GOLED_3();
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	482a      	ldr	r0, [pc, #168]	; (8000818 <appTask+0x2bc>)
 8000770:	f000 ffd4 	bl	800171c <D_GPIO_Reset>
		IO_RESET_HOLDLED_3();
 8000774:	2101      	movs	r1, #1
 8000776:	4825      	ldr	r0, [pc, #148]	; (800080c <appTask+0x2b0>)
 8000778:	f000 ffd0 	bl	800171c <D_GPIO_Reset>
		IO_RESET_GOLED_4();
 800077c:	2110      	movs	r1, #16
 800077e:	4823      	ldr	r0, [pc, #140]	; (800080c <appTask+0x2b0>)
 8000780:	f000 ffcc 	bl	800171c <D_GPIO_Reset>
		IO_RESET_HOLDLED_4();
 8000784:	2104      	movs	r1, #4
 8000786:	4820      	ldr	r0, [pc, #128]	; (8000808 <appTask+0x2ac>)
 8000788:	f000 ffc8 	bl	800171c <D_GPIO_Reset>
		//D_PWM_Set(BLDC2,3000);
		//D_PWM_Set(BLDC3,3500);
		//JP_Lift_Up();
	}

	for(int i=0; i<8; i++){
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	e011      	b.n	80007b6 <appTask+0x25a>
		if(rcvData[0][i] != 0) rcvDataJudge[i] = rcvData[0][i];
 8000792:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <appTask+0x2a4>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d008      	beq.n	80007b0 <appTask+0x254>
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <appTask+0x2a4>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4413      	add	r3, r2
 80007a4:	7819      	ldrb	r1, [r3, #0]
 80007a6:	4a1d      	ldr	r2, [pc, #116]	; (800081c <appTask+0x2c0>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4413      	add	r3, r2
 80007ac:	460a      	mov	r2, r1
 80007ae:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<8; i++){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3301      	adds	r3, #1
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b07      	cmp	r3, #7
 80007ba:	ddea      	ble.n	8000792 <appTask+0x236>
	}
	//デバッグ用
	int16_t debug_bits = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	807b      	strh	r3, [r7, #2]
	debug_bits &= 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	807b      	strh	r3, [r7, #2]
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", sndData[0][0],sndData[0][1],sndData[0][2],sndData[0][3],sndData[0][4],sndData[0][5],sndData[0][6],sndData[0][7]);
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", rcvData[0][0],rcvData[0][1],rcvData[0][2],rcvData[0][3],rcvData[0][4],rcvData[0][5],rcvData[0][6],rcvData[0][7]);
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", rcvDataJudge[0],rcvDataJudge[1],rcvDataJudge[2],rcvDataJudge[3],rcvDataJudge[4],rcvDataJudge[5],rcvDataJudge[6],rcvDataJudge[7]);
	D_Mess_printf("id : %3d, err : %3d\n", rcvData[1][0],rcvData[1][1]);
	*/
	return 0;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000a0 	.word	0x200000a0
 80007d4:	20000084 	.word	0x20000084
 80007d8:	20000088 	.word	0x20000088
 80007dc:	2000008c 	.word	0x2000008c
 80007e0:	2000003c 	.word	0x2000003c
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000004 	.word	0x20000004
 80007ec:	20000090 	.word	0x20000090
 80007f0:	20000094 	.word	0x20000094
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000098 	.word	0x20000098
 80007fc:	2000000c 	.word	0x2000000c
 8000800:	2000005c 	.word	0x2000005c
 8000804:	20000064 	.word	0x20000064
 8000808:	40020800 	.word	0x40020800
 800080c:	40020000 	.word	0x40020000
 8000810:	2000009c 	.word	0x2000009c
 8000814:	40020c00 	.word	0x40020c00
 8000818:	40020400 	.word	0x40020400
 800081c:	2000007c 	.word	0x2000007c

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f000 ffe6 	bl	80017f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f81c 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082c:	f000 f9a2 	bl	8000b74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000830:	f000 f95a 	bl	8000ae8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000834:	f000 f904 	bl	8000a40 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000838:	f000 f92c 	bl	8000a94 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800083c:	f000 f87e 	bl	800093c <MX_CAN1_Init>
  MX_TIM2_Init();
 8000840:	f000 f8b2 	bl	80009a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  D_PWM_Init();
 8000844:	f000 ffce 	bl	80017e4 <D_PWM_Init>
  D_CAN_Init();
 8000848:	f000 fdd0 	bl	80013ec <D_CAN_Init>

  HAL_TIM_Base_Start_IT(&htim2);
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <main+0x40>)
 800084e:	f003 fb95 	bl	8003f7c <HAL_TIM_Base_Start_IT>

  appInit();
 8000852:	f7ff fe53 	bl	80004fc <appInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //メインタスクの処理
	  appTask();
 8000856:	f7ff fe81 	bl	800055c <appTask>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
//		  D_Mess_printf("tes2");
//		  D_Mess_flush();
	  }*/
	  D_Mess_flush();
 800085a:	f000 ff85 	bl	8001768 <D_Mess_flush>
	  appTask();
 800085e:	e7fa      	b.n	8000856 <main+0x36>
 8000860:	20000700 	.word	0x20000700

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2234      	movs	r2, #52	; 0x34
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f004 ff8c 	bl	8005790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <SystemClock_Config+0xd0>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a28      	ldr	r2, [pc, #160]	; (8000934 <SystemClock_Config+0xd0>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <SystemClock_Config+0xd0>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <SystemClock_Config+0xd4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <SystemClock_Config+0xd4>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <SystemClock_Config+0xd4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008d8:	2308      	movs	r3, #8
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80008dc:	2350      	movs	r3, #80	; 0x50
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 f855 	bl	80039a0 <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008fc:	f000 fa86 	bl	8000e0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	230f      	movs	r3, #15
 8000902:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000904:	2302      	movs	r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	2102      	movs	r1, #2
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fd73 	bl	8003408 <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000928:	f000 fa70 	bl	8000e0c <Error_Handler>
  }
}
 800092c:	bf00      	nop
 800092e:	3750      	adds	r7, #80	; 0x50
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_CAN1_Init+0x64>)
 8000942:	4a18      	ldr	r2, [pc, #96]	; (80009a4 <MX_CAN1_Init+0x68>)
 8000944:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_CAN1_Init+0x64>)
 8000948:	2204      	movs	r2, #4
 800094a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_CAN1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_CAN1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_CAN1_Init+0x64>)
 800095a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800095e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_CAN1_Init+0x64>)
 8000962:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000966:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <MX_CAN1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_CAN1_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_CAN1_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_CAN1_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_CAN1_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_CAN1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_CAN1_Init+0x64>)
 800098e:	f000 ffa3 	bl	80018d8 <HAL_CAN_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000998:	f000 fa38 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000078c 	.word	0x2000078c
 80009a4:	40006400 	.word	0x40006400

080009a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_TIM2_Init+0x94>)
 80009c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_TIM2_Init+0x94>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_TIM2_Init+0x94>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_TIM2_Init+0x94>)
 80009da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_TIM2_Init+0x94>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_TIM2_Init+0x94>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ec:	4813      	ldr	r0, [pc, #76]	; (8000a3c <MX_TIM2_Init+0x94>)
 80009ee:	f003 fa75 	bl	8003edc <HAL_TIM_Base_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009f8:	f000 fa08 	bl	8000e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4619      	mov	r1, r3
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_TIM2_Init+0x94>)
 8000a0a:	f003 fc2f 	bl	800426c <HAL_TIM_ConfigClockSource>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a14:	f000 f9fa 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_TIM2_Init+0x94>)
 8000a26:	f003 fe4b 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a30:	f000 f9ec 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000700 	.word	0x20000700

08000a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <MX_USART1_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a78:	f003 feb2 	bl	80047e0 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a82:	f000 f9c3 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200006bc 	.word	0x200006bc
 8000a90:	40011000 	.word	0x40011000

08000a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_USART2_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000acc:	f003 fe88 	bl	80047e0 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f000 f999 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000748 	.word	0x20000748
 8000ae4:	40004400 	.word	0x40004400

08000ae8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_DMA_Init+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <MX_DMA_Init+0x88>)
 8000af8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_DMA_Init+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_DMA_Init+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <MX_DMA_Init+0x88>)
 8000b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_DMA_Init+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2010      	movs	r0, #16
 8000b2c:	f001 fe6d 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b30:	2010      	movs	r0, #16
 8000b32:	f001 fe86 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2011      	movs	r0, #17
 8000b3c:	f001 fe65 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b40:	2011      	movs	r0, #17
 8000b42:	f001 fe7e 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	203a      	movs	r0, #58	; 0x3a
 8000b4c:	f001 fe5d 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b50:	203a      	movs	r0, #58	; 0x3a
 8000b52:	f001 fe76 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2046      	movs	r0, #70	; 0x46
 8000b5c:	f001 fe55 	bl	800280a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000b60:	2046      	movs	r0, #70	; 0x46
 8000b62:	f001 fe6e 	bl	8002842 <HAL_NVIC_EnableIRQ>

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b74      	ldr	r3, [pc, #464]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a73      	ldr	r2, [pc, #460]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b71      	ldr	r3, [pc, #452]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b6d      	ldr	r3, [pc, #436]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a6c      	ldr	r2, [pc, #432]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b6a      	ldr	r3, [pc, #424]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b66      	ldr	r3, [pc, #408]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a65      	ldr	r2, [pc, #404]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b63      	ldr	r3, [pc, #396]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b5f      	ldr	r3, [pc, #380]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a5e      	ldr	r2, [pc, #376]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b5c      	ldr	r3, [pc, #368]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b58      	ldr	r3, [pc, #352]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a57      	ldr	r2, [pc, #348]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b55      	ldr	r3, [pc, #340]	; (8000d60 <MX_GPIO_Init+0x1ec>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c16:	2200      	movs	r2, #0
 8000c18:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8000c1c:	4851      	ldr	r0, [pc, #324]	; (8000d64 <MX_GPIO_Init+0x1f0>)
 8000c1e:	f002 fbd9 	bl	80033d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8000c22:	2200      	movs	r2, #0
 8000c24:	f248 01f3 	movw	r1, #33011	; 0x80f3
 8000c28:	484f      	ldr	r0, [pc, #316]	; (8000d68 <MX_GPIO_Init+0x1f4>)
 8000c2a:	f002 fbd3 	bl	80033d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2183      	movs	r1, #131	; 0x83
 8000c32:	484e      	ldr	r0, [pc, #312]	; (8000d6c <MX_GPIO_Init+0x1f8>)
 8000c34:	f002 fbce 	bl	80033d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	484c      	ldr	r0, [pc, #304]	; (8000d70 <MX_GPIO_Init+0x1fc>)
 8000c3e:	f002 fbc9 	bl	80033d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c48:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4842      	ldr	r0, [pc, #264]	; (8000d64 <MX_GPIO_Init+0x1f0>)
 8000c5a:	f002 fa0f 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10
 8000c5e:	f641 430d 	movw	r3, #7181	; 0x1c0d
 8000c62:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	483b      	ldr	r0, [pc, #236]	; (8000d64 <MX_GPIO_Init+0x1f0>)
 8000c78:	f002 fa00 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	4834      	ldr	r0, [pc, #208]	; (8000d64 <MX_GPIO_Init+0x1f0>)
 8000c94:	f002 f9f2 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin
                           PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8000c98:	f248 03b3 	movw	r3, #32947	; 0x80b3
 8000c9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	482d      	ldr	r0, [pc, #180]	; (8000d68 <MX_GPIO_Init+0x1f4>)
 8000cb2:	f002 f9e3 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb6:	2340      	movs	r3, #64	; 0x40
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4826      	ldr	r0, [pc, #152]	; (8000d68 <MX_GPIO_Init+0x1f4>)
 8000cce:	f002 f9d5 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8000cd2:	2390      	movs	r3, #144	; 0x90
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	481f      	ldr	r0, [pc, #124]	; (8000d64 <MX_GPIO_Init+0x1f0>)
 8000ce6:	f002 f9c9 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 8000cea:	2383      	movs	r3, #131	; 0x83
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481a      	ldr	r0, [pc, #104]	; (8000d6c <MX_GPIO_Init+0x1f8>)
 8000d02:	f002 f9bb 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB13
                           PB14 PB15 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 8000d06:	f24f 4374 	movw	r3, #62580	; 0xf474
 8000d0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4814      	ldr	r0, [pc, #80]	; (8000d6c <MX_GPIO_Init+0x1f8>)
 8000d1c:	f002 f9ae 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d20:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_GPIO_Init+0x1f4>)
 8000d36:	f002 f9a1 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_GPIO_Init+0x1fc>)
 8000d52:	f002 f993 	bl	800307c <HAL_GPIO_Init>

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020800 	.word	0x40020800
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40020400 	.word	0x40020400
 8000d70:	40020c00 	.word	0x40020c00

08000d74 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_UART_TxCpltCallback+0x20>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d101      	bne.n	8000d8a <HAL_UART_TxCpltCallback+0x16>
	  D_Mess_TransitionCompletedCallBack();
 8000d86:	f000 fd21 	bl	80017cc <D_Mess_TransitionCompletedCallBack>
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40004400 	.word	0x40004400

08000d98 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  D_CAN_ReceiveCallBack(hcan);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f000 fc3b 	bl	800161c <D_CAN_ReceiveCallBack>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_CAN_TxMailboxCompleteCallback>:
void HAL_CAN_TxMailboxCompleteCallback(){
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailboxComplete\n");
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailbox0Complete\n");
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailbox1Complete\n");
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  //D_Mess_printf("TxMailbox2Complete\n");
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){

    }
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <Error_Handler+0x8>
	...

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e56:	2007      	movs	r0, #7
 8000e58:	f001 fccc 	bl	80027f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800

08000e68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a29      	ldr	r2, [pc, #164]	; (8000f2c <HAL_CAN_MspInit+0xc4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d14c      	bne.n	8000f24 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <HAL_CAN_MspInit+0xc8>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <HAL_CAN_MspInit+0xc8>)
 8000e94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <HAL_CAN_MspInit+0xc8>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <HAL_CAN_MspInit+0xc8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <HAL_CAN_MspInit+0xc8>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_CAN_MspInit+0xc8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ed4:	2309      	movs	r3, #9
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4815      	ldr	r0, [pc, #84]	; (8000f34 <HAL_CAN_MspInit+0xcc>)
 8000ee0:	f002 f8cc 	bl	800307c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2013      	movs	r0, #19
 8000eea:	f001 fc8e 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000eee:	2013      	movs	r0, #19
 8000ef0:	f001 fca7 	bl	8002842 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2014      	movs	r0, #20
 8000efa:	f001 fc86 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000efe:	2014      	movs	r0, #20
 8000f00:	f001 fc9f 	bl	8002842 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	2015      	movs	r0, #21
 8000f0a:	f001 fc7e 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f0e:	2015      	movs	r0, #21
 8000f10:	f001 fc97 	bl	8002842 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	2016      	movs	r0, #22
 8000f1a:	f001 fc76 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000f1e:	2016      	movs	r0, #22
 8000f20:	f001 fc8f 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	; 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40006400 	.word	0x40006400
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020400 	.word	0x40020400

08000f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f48:	d115      	bne.n	8000f76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_TIM_Base_MspInit+0x48>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <HAL_TIM_Base_MspInit+0x48>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_TIM_Base_MspInit+0x48>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	201c      	movs	r0, #28
 8000f6c:	f001 fc4d 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f70:	201c      	movs	r0, #28
 8000f72:	f001 fc66 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800

08000f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a97      	ldr	r2, [pc, #604]	; (8001200 <HAL_UART_MspInit+0x27c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	f040 8092 	bne.w	80010cc <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
 8000fac:	4b95      	ldr	r3, [pc, #596]	; (8001204 <HAL_UART_MspInit+0x280>)
 8000fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb0:	4a94      	ldr	r2, [pc, #592]	; (8001204 <HAL_UART_MspInit+0x280>)
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb8:	4b92      	ldr	r3, [pc, #584]	; (8001204 <HAL_UART_MspInit+0x280>)
 8000fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbc:	f003 0310 	and.w	r3, r3, #16
 8000fc0:	61bb      	str	r3, [r7, #24]
 8000fc2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	4b8e      	ldr	r3, [pc, #568]	; (8001204 <HAL_UART_MspInit+0x280>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	4a8d      	ldr	r2, [pc, #564]	; (8001204 <HAL_UART_MspInit+0x280>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd4:	4b8b      	ldr	r3, [pc, #556]	; (8001204 <HAL_UART_MspInit+0x280>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fe0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4882      	ldr	r0, [pc, #520]	; (8001208 <HAL_UART_MspInit+0x284>)
 8000ffe:	f002 f83d 	bl	800307c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001002:	4b82      	ldr	r3, [pc, #520]	; (800120c <HAL_UART_MspInit+0x288>)
 8001004:	4a82      	ldr	r2, [pc, #520]	; (8001210 <HAL_UART_MspInit+0x28c>)
 8001006:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001008:	4b80      	ldr	r3, [pc, #512]	; (800120c <HAL_UART_MspInit+0x288>)
 800100a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001010:	4b7e      	ldr	r3, [pc, #504]	; (800120c <HAL_UART_MspInit+0x288>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001016:	4b7d      	ldr	r3, [pc, #500]	; (800120c <HAL_UART_MspInit+0x288>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800101c:	4b7b      	ldr	r3, [pc, #492]	; (800120c <HAL_UART_MspInit+0x288>)
 800101e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001022:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001024:	4b79      	ldr	r3, [pc, #484]	; (800120c <HAL_UART_MspInit+0x288>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800102a:	4b78      	ldr	r3, [pc, #480]	; (800120c <HAL_UART_MspInit+0x288>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001030:	4b76      	ldr	r3, [pc, #472]	; (800120c <HAL_UART_MspInit+0x288>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001036:	4b75      	ldr	r3, [pc, #468]	; (800120c <HAL_UART_MspInit+0x288>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800103c:	4b73      	ldr	r3, [pc, #460]	; (800120c <HAL_UART_MspInit+0x288>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001042:	4872      	ldr	r0, [pc, #456]	; (800120c <HAL_UART_MspInit+0x288>)
 8001044:	f001 fc18 	bl	8002878 <HAL_DMA_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800104e:	f7ff fedd 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a6d      	ldr	r2, [pc, #436]	; (800120c <HAL_UART_MspInit+0x288>)
 8001056:	639a      	str	r2, [r3, #56]	; 0x38
 8001058:	4a6c      	ldr	r2, [pc, #432]	; (800120c <HAL_UART_MspInit+0x288>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800105e:	4b6d      	ldr	r3, [pc, #436]	; (8001214 <HAL_UART_MspInit+0x290>)
 8001060:	4a6d      	ldr	r2, [pc, #436]	; (8001218 <HAL_UART_MspInit+0x294>)
 8001062:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001064:	4b6b      	ldr	r3, [pc, #428]	; (8001214 <HAL_UART_MspInit+0x290>)
 8001066:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800106a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800106c:	4b69      	ldr	r3, [pc, #420]	; (8001214 <HAL_UART_MspInit+0x290>)
 800106e:	2240      	movs	r2, #64	; 0x40
 8001070:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001072:	4b68      	ldr	r3, [pc, #416]	; (8001214 <HAL_UART_MspInit+0x290>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001078:	4b66      	ldr	r3, [pc, #408]	; (8001214 <HAL_UART_MspInit+0x290>)
 800107a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001080:	4b64      	ldr	r3, [pc, #400]	; (8001214 <HAL_UART_MspInit+0x290>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001086:	4b63      	ldr	r3, [pc, #396]	; (8001214 <HAL_UART_MspInit+0x290>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800108c:	4b61      	ldr	r3, [pc, #388]	; (8001214 <HAL_UART_MspInit+0x290>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001092:	4b60      	ldr	r3, [pc, #384]	; (8001214 <HAL_UART_MspInit+0x290>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001098:	4b5e      	ldr	r3, [pc, #376]	; (8001214 <HAL_UART_MspInit+0x290>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800109e:	485d      	ldr	r0, [pc, #372]	; (8001214 <HAL_UART_MspInit+0x290>)
 80010a0:	f001 fbea 	bl	8002878 <HAL_DMA_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80010aa:	f7ff feaf 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a58      	ldr	r2, [pc, #352]	; (8001214 <HAL_UART_MspInit+0x290>)
 80010b2:	635a      	str	r2, [r3, #52]	; 0x34
 80010b4:	4a57      	ldr	r2, [pc, #348]	; (8001214 <HAL_UART_MspInit+0x290>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2025      	movs	r0, #37	; 0x25
 80010c0:	f001 fba3 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010c4:	2025      	movs	r0, #37	; 0x25
 80010c6:	f001 fbbc 	bl	8002842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ca:	e095      	b.n	80011f8 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a52      	ldr	r2, [pc, #328]	; (800121c <HAL_UART_MspInit+0x298>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	f040 8090 	bne.w	80011f8 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	4b49      	ldr	r3, [pc, #292]	; (8001204 <HAL_UART_MspInit+0x280>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	4a48      	ldr	r2, [pc, #288]	; (8001204 <HAL_UART_MspInit+0x280>)
 80010e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e6:	6413      	str	r3, [r2, #64]	; 0x40
 80010e8:	4b46      	ldr	r3, [pc, #280]	; (8001204 <HAL_UART_MspInit+0x280>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	4b42      	ldr	r3, [pc, #264]	; (8001204 <HAL_UART_MspInit+0x280>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	4a41      	ldr	r2, [pc, #260]	; (8001204 <HAL_UART_MspInit+0x280>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6313      	str	r3, [r2, #48]	; 0x30
 8001104:	4b3f      	ldr	r3, [pc, #252]	; (8001204 <HAL_UART_MspInit+0x280>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001110:	230c      	movs	r3, #12
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001120:	2307      	movs	r3, #7
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	4837      	ldr	r0, [pc, #220]	; (8001208 <HAL_UART_MspInit+0x284>)
 800112c:	f001 ffa6 	bl	800307c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001130:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <HAL_UART_MspInit+0x29c>)
 8001132:	4a3c      	ldr	r2, [pc, #240]	; (8001224 <HAL_UART_MspInit+0x2a0>)
 8001134:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <HAL_UART_MspInit+0x29c>)
 8001138:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800113c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113e:	4b38      	ldr	r3, [pc, #224]	; (8001220 <HAL_UART_MspInit+0x29c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001144:	4b36      	ldr	r3, [pc, #216]	; (8001220 <HAL_UART_MspInit+0x29c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800114a:	4b35      	ldr	r3, [pc, #212]	; (8001220 <HAL_UART_MspInit+0x29c>)
 800114c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001150:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001152:	4b33      	ldr	r3, [pc, #204]	; (8001220 <HAL_UART_MspInit+0x29c>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001158:	4b31      	ldr	r3, [pc, #196]	; (8001220 <HAL_UART_MspInit+0x29c>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800115e:	4b30      	ldr	r3, [pc, #192]	; (8001220 <HAL_UART_MspInit+0x29c>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001164:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <HAL_UART_MspInit+0x29c>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_UART_MspInit+0x29c>)
 800116c:	2200      	movs	r2, #0
 800116e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001170:	482b      	ldr	r0, [pc, #172]	; (8001220 <HAL_UART_MspInit+0x29c>)
 8001172:	f001 fb81 	bl	8002878 <HAL_DMA_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 800117c:	f7ff fe46 	bl	8000e0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a27      	ldr	r2, [pc, #156]	; (8001220 <HAL_UART_MspInit+0x29c>)
 8001184:	639a      	str	r2, [r3, #56]	; 0x38
 8001186:	4a26      	ldr	r2, [pc, #152]	; (8001220 <HAL_UART_MspInit+0x29c>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <HAL_UART_MspInit+0x2a4>)
 800118e:	4a27      	ldr	r2, [pc, #156]	; (800122c <HAL_UART_MspInit+0x2a8>)
 8001190:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <HAL_UART_MspInit+0x2a4>)
 8001194:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001198:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800119a:	4b23      	ldr	r3, [pc, #140]	; (8001228 <HAL_UART_MspInit+0x2a4>)
 800119c:	2240      	movs	r2, #64	; 0x40
 800119e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <HAL_UART_MspInit+0x2a4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <HAL_UART_MspInit+0x2a4>)
 80011a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ae:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <HAL_UART_MspInit+0x2a4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_UART_MspInit+0x2a4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_UART_MspInit+0x2a4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_UART_MspInit+0x2a4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_UART_MspInit+0x2a4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80011cc:	4816      	ldr	r0, [pc, #88]	; (8001228 <HAL_UART_MspInit+0x2a4>)
 80011ce:	f001 fb53 	bl	8002878 <HAL_DMA_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_UART_MspInit+0x258>
      Error_Handler();
 80011d8:	f7ff fe18 	bl	8000e0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <HAL_UART_MspInit+0x2a4>)
 80011e0:	635a      	str	r2, [r3, #52]	; 0x34
 80011e2:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_UART_MspInit+0x2a4>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2026      	movs	r0, #38	; 0x26
 80011ee:	f001 fb0c 	bl	800280a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011f2:	2026      	movs	r0, #38	; 0x26
 80011f4:	f001 fb25 	bl	8002842 <HAL_NVIC_EnableIRQ>
}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	; 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40011000 	.word	0x40011000
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	200005fc 	.word	0x200005fc
 8001210:	40026440 	.word	0x40026440
 8001214:	2000059c 	.word	0x2000059c
 8001218:	400264b8 	.word	0x400264b8
 800121c:	40004400 	.word	0x40004400
 8001220:	2000053c 	.word	0x2000053c
 8001224:	40026088 	.word	0x40026088
 8001228:	2000065c 	.word	0x2000065c
 800122c:	400260a0 	.word	0x400260a0

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127c:	f000 fb0c 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <SysTick_Handler+0x18>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	4a02      	ldr	r2, [pc, #8]	; (8001290 <SysTick_Handler+0x18>)
 8001288:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000a0 	.word	0x200000a0

08001294 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <DMA1_Stream5_IRQHandler+0x10>)
 800129a:	f001 fc85 	bl	8002ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000053c 	.word	0x2000053c

080012a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <DMA1_Stream6_IRQHandler+0x10>)
 80012ae:	f001 fc7b 	bl	8002ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000065c 	.word	0x2000065c

080012bc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
  HAL_CAN_TxMailboxCompleteCallback();
 80012c0:	f7ff fd75 	bl	8000dae <HAL_CAN_TxMailboxCompleteCallback>
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <CAN1_TX_IRQHandler+0x14>)
 80012c6:	f000 ffb4 	bl	8002232 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000078c 	.word	0x2000078c

080012d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <CAN1_RX0_IRQHandler+0x10>)
 80012da:	f000 ffaa 	bl	8002232 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000078c 	.word	0x2000078c

080012e8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <CAN1_RX1_IRQHandler+0x10>)
 80012ee:	f000 ffa0 	bl	8002232 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000078c 	.word	0x2000078c

080012fc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <CAN1_SCE_IRQHandler+0x10>)
 8001302:	f000 ff96 	bl	8002232 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000078c 	.word	0x2000078c

08001310 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <TIM2_IRQHandler+0x10>)
 8001316:	f002 fea1 	bl	800405c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000700 	.word	0x20000700

08001324 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <USART1_IRQHandler+0x10>)
 800132a:	f003 fb25 	bl	8004978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200006bc 	.word	0x200006bc

08001338 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <USART2_IRQHandler+0x10>)
 800133e:	f003 fb1b 	bl	8004978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000748 	.word	0x20000748

0800134c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <DMA2_Stream2_IRQHandler+0x10>)
 8001352:	f001 fc29 	bl	8002ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200005fc 	.word	0x200005fc

08001360 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <DMA2_Stream7_IRQHandler+0x10>)
 8001366:	f001 fc1f 	bl	8002ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000059c 	.word	0x2000059c

08001374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <SystemInit+0x20>)
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <SystemInit+0x20>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800139c:	480d      	ldr	r0, [pc, #52]	; (80013d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800139e:	490e      	ldr	r1, [pc, #56]	; (80013d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013b4:	4c0b      	ldr	r4, [pc, #44]	; (80013e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013c2:	f7ff ffd7 	bl	8001374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013c6:	f004 f9bf 	bl	8005748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ca:	f7ff fa29 	bl	8000820 <main>
  bx  lr    
 80013ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80013dc:	080057e8 	.word	0x080057e8
  ldr r2, =_sbss
 80013e0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80013e4:	200007c4 	.word	0x200007c4

080013e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC_IRQHandler>
	...

080013ec <D_CAN_Init>:

#include "../Inc/CAN.h"
#include <stdlib.h>
#include "stm32f4xx_hal.h"

void D_CAN_Init(void){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
	HAL_CAN_Start(&hcan1);
 80013f2:	4818      	ldr	r0, [pc, #96]	; (8001454 <D_CAN_Init+0x68>)
 80013f4:	f000 fc4c 	bl	8001c90 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80013f8:	2102      	movs	r1, #2
 80013fa:	4816      	ldr	r0, [pc, #88]	; (8001454 <D_CAN_Init+0x68>)
 80013fc:	f000 fef3 	bl	80021e6 <HAL_CAN_ActivateNotification>
	for(int i=0; i<8; i++){
 8001400:	2300      	movs	r3, #0
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	e01d      	b.n	8001442 <D_CAN_Init+0x56>
		TxData[i] = 0;
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <D_CAN_Init+0x6c>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
		RxData[i] = 0;
 8001410:	4a12      	ldr	r2, [pc, #72]	; (800145c <D_CAN_Init+0x70>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<5; j++){
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	e00a      	b.n	8001436 <D_CAN_Init+0x4a>
			AllData[j][i] = 0;
 8001420:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <D_CAN_Init+0x74>)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	441a      	add	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<5; j++){
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b04      	cmp	r3, #4
 800143a:	ddf1      	ble.n	8001420 <D_CAN_Init+0x34>
	for(int i=0; i<8; i++){
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3301      	adds	r3, #1
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b07      	cmp	r3, #7
 8001446:	ddde      	ble.n	8001406 <D_CAN_Init+0x1a>
		}
	}
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000078c 	.word	0x2000078c
 8001458:	200004f4 	.word	0x200004f4
 800145c:	20000500 	.word	0x20000500
 8001460:	200004cc 	.word	0x200004cc

08001464 <D_CAN_Transmit>:

int D_CAN_Transmit(uint16_t ownAddress, const uint8_t *data, uint16_t size){
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	80fb      	strh	r3, [r7, #6]
 8001470:	4613      	mov	r3, r2
 8001472:	80bb      	strh	r3, [r7, #4]
	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0){
 8001474:	4823      	ldr	r0, [pc, #140]	; (8001504 <D_CAN_Transmit+0xa0>)
 8001476:	f000 fd6f 	bl	8001f58 <HAL_CAN_GetTxMailboxesFreeLevel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d02d      	beq.n	80014dc <D_CAN_Transmit+0x78>
		TxHeader.StdId = ownAddress;
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	4a21      	ldr	r2, [pc, #132]	; (8001508 <D_CAN_Transmit+0xa4>)
 8001484:	6013      	str	r3, [r2, #0]
		TxHeader.RTR = CAN_RTR_DATA;
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <D_CAN_Transmit+0xa4>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
		TxHeader.IDE = CAN_ID_STD;
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <D_CAN_Transmit+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
		TxHeader.DLC = size;
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <D_CAN_Transmit+0xa4>)
 8001496:	6113      	str	r3, [r2, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <D_CAN_Transmit+0xa4>)
 800149a:	2200      	movs	r2, #0
 800149c:	751a      	strb	r2, [r3, #20]
		for(int i=0; i<size; i++){
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	e00b      	b.n	80014bc <D_CAN_Transmit+0x58>
			TxData[i] = data[i];
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	4413      	add	r3, r2
 80014aa:	7819      	ldrb	r1, [r3, #0]
 80014ac:	4a17      	ldr	r2, [pc, #92]	; (800150c <D_CAN_Transmit+0xa8>)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4413      	add	r3, r2
 80014b2:	460a      	mov	r2, r1
 80014b4:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<size; i++){
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3301      	adds	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	88bb      	ldrh	r3, [r7, #4]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dbef      	blt.n	80014a4 <D_CAN_Transmit+0x40>
		}
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <D_CAN_Transmit+0xac>)
 80014c6:	4a11      	ldr	r2, [pc, #68]	; (800150c <D_CAN_Transmit+0xa8>)
 80014c8:	490f      	ldr	r1, [pc, #60]	; (8001508 <D_CAN_Transmit+0xa4>)
 80014ca:	480e      	ldr	r0, [pc, #56]	; (8001504 <D_CAN_Transmit+0xa0>)
 80014cc:	f000 fc24 	bl	8001d18 <HAL_CAN_AddTxMessage>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d011      	beq.n	80014fa <D_CAN_Transmit+0x96>
			return -2;
 80014d6:	f06f 0301 	mvn.w	r3, #1
 80014da:	e00f      	b.n	80014fc <D_CAN_Transmit+0x98>
		}
	}else{
		HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX0);
 80014dc:	2101      	movs	r1, #1
 80014de:	4809      	ldr	r0, [pc, #36]	; (8001504 <D_CAN_Transmit+0xa0>)
 80014e0:	f000 fcf5 	bl	8001ece <HAL_CAN_AbortTxRequest>
		HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX1);
 80014e4:	2102      	movs	r1, #2
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <D_CAN_Transmit+0xa0>)
 80014e8:	f000 fcf1 	bl	8001ece <HAL_CAN_AbortTxRequest>
		HAL_CAN_AbortTxRequest(&hcan1, CAN_TX_MAILBOX2);
 80014ec:	2104      	movs	r1, #4
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <D_CAN_Transmit+0xa0>)
 80014f0:	f000 fced 	bl	8001ece <HAL_CAN_AbortTxRequest>
		return -1;
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f8:	e000      	b.n	80014fc <D_CAN_Transmit+0x98>
	}
	return 0;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000078c 	.word	0x2000078c
 8001508:	20000508 	.word	0x20000508
 800150c:	200004f4 	.word	0x200004f4
 8001510:	200004fc 	.word	0x200004fc

08001514 <D_CAN_SetReceiveAddressAll>:
	}

	return 0;
}

int D_CAN_SetReceiveAddressAll(void){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	sFilterConfig.FilterBank = 0;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <D_CAN_SetReceiveAddressAll+0x5c>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <D_CAN_SetReceiveAddressAll+0x5c>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <D_CAN_SetReceiveAddressAll+0x5c>)
 8001526:	2201      	movs	r2, #1
 8001528:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <D_CAN_SetReceiveAddressAll+0x5c>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <D_CAN_SetReceiveAddressAll+0x5c>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <D_CAN_SetReceiveAddressAll+0x5c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <D_CAN_SetReceiveAddressAll+0x5c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <D_CAN_SetReceiveAddressAll+0x5c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <D_CAN_SetReceiveAddressAll+0x5c>)
 800154a:	2201      	movs	r2, #1
 800154c:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <D_CAN_SetReceiveAddressAll+0x5c>)
 8001550:	220e      	movs	r2, #14
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8001554:	4906      	ldr	r1, [pc, #24]	; (8001570 <D_CAN_SetReceiveAddressAll+0x5c>)
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <D_CAN_SetReceiveAddressAll+0x60>)
 8001558:	f000 faba 	bl	8001ad0 <HAL_CAN_ConfigFilter>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d002      	beq.n	8001568 <D_CAN_SetReceiveAddressAll+0x54>
		return -1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001566:	e000      	b.n	800156a <D_CAN_SetReceiveAddressAll+0x56>
	}

	return 0;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200004a4 	.word	0x200004a4
 8001574:	2000078c 	.word	0x2000078c

08001578 <D_CAN_Receive>:

int D_CAN_Receive(uint16_t SenderAddress, uint8_t *data, uint16_t size){
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	80fb      	strh	r3, [r7, #6]
 8001584:	4613      	mov	r3, r2
 8001586:	80bb      	strh	r3, [r7, #4]
	int setIdx = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
	switch(SenderAddress){
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001592:	d01b      	beq.n	80015cc <D_CAN_Receive+0x54>
 8001594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001598:	dc1e      	bgt.n	80015d8 <D_CAN_Receive+0x60>
 800159a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800159e:	d012      	beq.n	80015c6 <D_CAN_Receive+0x4e>
 80015a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015a4:	dc18      	bgt.n	80015d8 <D_CAN_Receive+0x60>
 80015a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015aa:	d009      	beq.n	80015c0 <D_CAN_Receive+0x48>
 80015ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b0:	dc12      	bgt.n	80015d8 <D_CAN_Receive+0x60>
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00d      	beq.n	80015d2 <D_CAN_Receive+0x5a>
 80015b6:	2b09      	cmp	r3, #9
 80015b8:	d10e      	bne.n	80015d8 <D_CAN_Receive+0x60>
	case CAN_MECH1_ADDRESS:
		setIdx = CAN_MECH1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
		break;
 80015be:	e00e      	b.n	80015de <D_CAN_Receive+0x66>
	case CAN_ST2_ADDRESS:
		setIdx = CAN_ST2;
 80015c0:	2301      	movs	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
		break;
 80015c4:	e00b      	b.n	80015de <D_CAN_Receive+0x66>
	case CAN_ST3_ADDRESS:
		setIdx = CAN_ST3;
 80015c6:	2302      	movs	r3, #2
 80015c8:	60bb      	str	r3, [r7, #8]
		break;
 80015ca:	e008      	b.n	80015de <D_CAN_Receive+0x66>
	case CAN_ST4_ADDRESS:
		setIdx = CAN_ST4;
 80015cc:	2303      	movs	r3, #3
 80015ce:	60bb      	str	r3, [r7, #8]
		break;
 80015d0:	e005      	b.n	80015de <D_CAN_Receive+0x66>
	case CAN_MAIN_ADDRESS:
		setIdx = CAN_MAIN;
 80015d2:	2304      	movs	r3, #4
 80015d4:	60bb      	str	r3, [r7, #8]
		break;
 80015d6:	e002      	b.n	80015de <D_CAN_Receive+0x66>
	default:
		setIdx = CAN_MAIN;
 80015d8:	2304      	movs	r3, #4
 80015da:	60bb      	str	r3, [r7, #8]
		break;
 80015dc:	bf00      	nop
	}
	//test
	for(int i=0; i<size; i++){
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	e00d      	b.n	8001600 <D_CAN_Receive+0x88>
		data[i] = AllData[SenderAddress][i];
 80015e4:	88fa      	ldrh	r2, [r7, #6]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6839      	ldr	r1, [r7, #0]
 80015ea:	440b      	add	r3, r1
 80015ec:	490a      	ldr	r1, [pc, #40]	; (8001618 <D_CAN_Receive+0xa0>)
 80015ee:	00d2      	lsls	r2, r2, #3
 80015f0:	4411      	add	r1, r2
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	440a      	add	r2, r1
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++){
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	88bb      	ldrh	r3, [r7, #4]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	429a      	cmp	r2, r3
 8001606:	dbed      	blt.n	80015e4 <D_CAN_Receive+0x6c>
		data[i] = AllData[setIdx][i];
	}
	*/


	return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	200004cc 	.word	0x200004cc

0800161c <D_CAN_ReceiveCallBack>:

void D_CAN_ReceiveCallBack(CAN_HandleTypeDef *hcan){
 800161c:	b580      	push	{r7, lr}
 800161e:	b08e      	sub	sp, #56	; 0x38
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8001624:	f107 020c 	add.w	r2, r7, #12
 8001628:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <D_CAN_ReceiveCallBack+0xd8>)
 800162a:	2100      	movs	r1, #0
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fcc8 	bl	8001fc2 <HAL_CAN_GetRxMessage>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d155      	bne.n	80016e4 <D_CAN_ReceiveCallBack+0xc8>
		uint32_t id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <D_CAN_ReceiveCallBack+0x26>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	e000      	b.n	8001644 <D_CAN_ReceiveCallBack+0x28>
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t size = RxHeader.DLC;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
		int setIdx = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
		switch(id){
 800164e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001654:	d022      	beq.n	800169c <D_CAN_ReceiveCallBack+0x80>
 8001656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165c:	d824      	bhi.n	80016a8 <D_CAN_ReceiveCallBack+0x8c>
 800165e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001660:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001664:	d017      	beq.n	8001696 <D_CAN_ReceiveCallBack+0x7a>
 8001666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800166c:	d81c      	bhi.n	80016a8 <D_CAN_ReceiveCallBack+0x8c>
 800166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001674:	d00c      	beq.n	8001690 <D_CAN_ReceiveCallBack+0x74>
 8001676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800167c:	d814      	bhi.n	80016a8 <D_CAN_ReceiveCallBack+0x8c>
 800167e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00e      	beq.n	80016a2 <D_CAN_ReceiveCallBack+0x86>
 8001684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001686:	2b09      	cmp	r3, #9
 8001688:	d10e      	bne.n	80016a8 <D_CAN_ReceiveCallBack+0x8c>
		case CAN_MECH1_ADDRESS:
			setIdx = CAN_MECH1;
 800168a:	2300      	movs	r3, #0
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 800168e:	e00e      	b.n	80016ae <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST2_ADDRESS:
			setIdx = CAN_ST2;
 8001690:	2301      	movs	r3, #1
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8001694:	e00b      	b.n	80016ae <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST3_ADDRESS:
			setIdx = CAN_ST3;
 8001696:	2302      	movs	r3, #2
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 800169a:	e008      	b.n	80016ae <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST4_ADDRESS:
			setIdx = CAN_ST4;
 800169c:	2303      	movs	r3, #3
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80016a0:	e005      	b.n	80016ae <D_CAN_ReceiveCallBack+0x92>
		case CAN_MAIN_ADDRESS:
			setIdx = CAN_MAIN;
 80016a2:	2304      	movs	r3, #4
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80016a6:	e002      	b.n	80016ae <D_CAN_ReceiveCallBack+0x92>
		default:
			setIdx = CAN_MAIN;
 80016a8:	2304      	movs	r3, #4
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80016ac:	bf00      	nop
		}
		//test
		for(int i=0; i<size; i++){
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
 80016b2:	e00b      	b.n	80016cc <D_CAN_ReceiveCallBack+0xb0>
			AllData[0][i] = RxData[i];
 80016b4:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <D_CAN_ReceiveCallBack+0xd8>)
 80016b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b8:	4413      	add	r3, r2
 80016ba:	7819      	ldrb	r1, [r3, #0]
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <D_CAN_ReceiveCallBack+0xdc>)
 80016be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c0:	4413      	add	r3, r2
 80016c2:	460a      	mov	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<size; i++){
 80016c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c8:	3301      	adds	r3, #1
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
 80016cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8ef      	bhi.n	80016b4 <D_CAN_ReceiveCallBack+0x98>
		}
		AllData[1][0] = id;
 80016d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <D_CAN_ReceiveCallBack+0xdc>)
 80016da:	721a      	strb	r2, [r3, #8]
		AllData[1][1] = 254;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <D_CAN_ReceiveCallBack+0xdc>)
 80016de:	22fe      	movs	r2, #254	; 0xfe
 80016e0:	725a      	strb	r2, [r3, #9]
		}
		*/
	}else{
		AllData[1][1] = 255;
	}
}
 80016e2:	e002      	b.n	80016ea <D_CAN_ReceiveCallBack+0xce>
		AllData[1][1] = 255;
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <D_CAN_ReceiveCallBack+0xdc>)
 80016e6:	22ff      	movs	r2, #255	; 0xff
 80016e8:	725a      	strb	r2, [r3, #9]
}
 80016ea:	bf00      	nop
 80016ec:	3738      	adds	r7, #56	; 0x38
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000500 	.word	0x20000500
 80016f8:	200004cc 	.word	0x200004cc

080016fc <D_GPIO_Set>:
#include "../Inc/GPIO.h"
#include <stdlib.h>
#include <stdbool.h>
#include "stm32f4xx_hal.h"

void D_GPIO_Set(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_SET);
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	2201      	movs	r2, #1
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f001 fe60 	bl	80033d4 <HAL_GPIO_WritePin>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <D_GPIO_Reset>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	2200      	movs	r2, #0
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f001 fe50 	bl	80033d4 <HAL_GPIO_WritePin>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <D_GPIO_Read>:

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 8001748:	887b      	ldrh	r3, [r7, #2]
 800174a:	4619      	mov	r1, r3
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f001 fe29 	bl	80033a4 <HAL_GPIO_ReadPin>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed){
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <D_Mess_flush+0x54>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f083 0301 	eor.w	r3, r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <D_Mess_flush+0x1c>
		outptr = buff;
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <D_Mess_flush+0x58>)
 800177e:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <D_Mess_flush+0x5c>)
 8001780:	601a      	str	r2, [r3, #0]
		return;
 8001782:	e01a      	b.n	80017ba <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <D_Mess_flush+0x58>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <D_Mess_flush+0x58>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	490b      	ldr	r1, [pc, #44]	; (80017c0 <D_Mess_flush+0x58>)
 8001794:	600a      	str	r2, [r1, #0]
 8001796:	220a      	movs	r2, #10
 8001798:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <D_Mess_flush+0x58>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <D_Mess_flush+0x5c>)
 80017a0:	1a9b      	subs	r3, r3, r2
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	4907      	ldr	r1, [pc, #28]	; (80017c4 <D_Mess_flush+0x5c>)
 80017a8:	4807      	ldr	r0, [pc, #28]	; (80017c8 <D_Mess_flush+0x60>)
 80017aa:	f003 f867 	bl	800487c <HAL_UART_Transmit_DMA>
		had_completed = false;
 80017ae:	4b03      	ldr	r3, [pc, #12]	; (80017bc <D_Mess_flush+0x54>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <D_Mess_flush+0x58>)
 80017b6:	4a03      	ldr	r2, [pc, #12]	; (80017c4 <D_Mess_flush+0x5c>)
 80017b8:	601a      	str	r2, [r3, #0]
}
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000014 	.word	0x20000014
 80017c0:	200007bc 	.word	0x200007bc
 80017c4:	200000a4 	.word	0x200000a4
 80017c8:	20000748 	.word	0x20000748

080017cc <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  had_completed = true;
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <D_Mess_TransitionCompletedCallBack+0x14>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	20000014 	.word	0x20000014

080017e4 <D_PWM_Init>:
#include <stdlib.h>
#include "stm32f4xx_hal.h"

//extern TIM_HandleTypeDef htim3;

void D_PWM_Init(void){
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
#endif
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <HAL_Init+0x40>)
 80017fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_Init+0x40>)
 800180a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_Init+0x40>)
 8001816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 ffe9 	bl	80027f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f808 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001828:	f7ff faf6 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023c00 	.word	0x40023c00

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x54>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x58>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f001 f801 	bl	800285e <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001874:	f000 ffc9 	bl	800280a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	; (8001894 <HAL_InitTick+0x5c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000010 	.word	0x20000010
 8001890:	2000001c 	.word	0x2000001c
 8001894:	20000018 	.word	0x20000018

08001898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_IncTick+0x20>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x24>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_IncTick+0x24>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2000001c 	.word	0x2000001c
 80018bc:	200007c0 	.word	0x200007c0

080018c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_GetTick+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	200007c0 	.word	0x200007c0

080018d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0ed      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fab6 	bl	8000e68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190c:	f7ff ffd8 	bl	80018c0 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001912:	e012      	b.n	800193a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001914:	f7ff ffd4 	bl	80018c0 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b0a      	cmp	r3, #10
 8001920:	d90b      	bls.n	800193a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2205      	movs	r2, #5
 8001932:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0c5      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0e5      	beq.n	8001914 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0202 	bic.w	r2, r2, #2
 8001956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001958:	f7ff ffb2 	bl	80018c0 <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800195e:	e012      	b.n	8001986 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001960:	f7ff ffae 	bl	80018c0 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b0a      	cmp	r3, #10
 800196c:	d90b      	bls.n	8001986 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2205      	movs	r2, #5
 800197e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e09f      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e5      	bne.n	8001960 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e1b      	ldrb	r3, [r3, #24]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d108      	bne.n	80019ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e007      	b.n	80019be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7e5b      	ldrb	r3, [r3, #25]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d108      	bne.n	80019d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e007      	b.n	80019e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e9b      	ldrb	r3, [r3, #26]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0220 	orr.w	r2, r2, #32
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e007      	b.n	8001a12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0220 	bic.w	r2, r2, #32
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7edb      	ldrb	r3, [r3, #27]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d108      	bne.n	8001a2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0210 	bic.w	r2, r2, #16
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e007      	b.n	8001a3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0210 	orr.w	r2, r2, #16
 8001a3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7f1b      	ldrb	r3, [r3, #28]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0208 	orr.w	r2, r2, #8
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e007      	b.n	8001a66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0208 	bic.w	r2, r2, #8
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7f5b      	ldrb	r3, [r3, #29]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0204 	orr.w	r2, r2, #4
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e007      	b.n	8001a90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0204 	bic.w	r2, r2, #4
 8001a8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	ea42 0103 	orr.w	r1, r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	1e5a      	subs	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ae8:	7cfb      	ldrb	r3, [r7, #19]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d003      	beq.n	8001af6 <HAL_CAN_ConfigFilter+0x26>
 8001aee:	7cfb      	ldrb	r3, [r7, #19]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	f040 80be 	bne.w	8001c72 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001af6:	4b65      	ldr	r3, [pc, #404]	; (8001c8c <HAL_CAN_ConfigFilter+0x1bc>)
 8001af8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b10:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	431a      	orrs	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2201      	movs	r2, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	401a      	ands	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d123      	bne.n	8001ba0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b7a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3248      	adds	r2, #72	; 0x48
 8001b80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b94:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b96:	6979      	ldr	r1, [r7, #20]
 8001b98:	3348      	adds	r3, #72	; 0x48
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d122      	bne.n	8001bee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bc8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3248      	adds	r2, #72	; 0x48
 8001bce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001be2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001be4:	6979      	ldr	r1, [r7, #20]
 8001be6:	3348      	adds	r3, #72	; 0x48
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	401a      	ands	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c08:	e007      	b.n	8001c1a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c34:	e007      	b.n	8001c46 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d107      	bne.n	8001c5e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c64:	f023 0201 	bic.w	r2, r3, #1
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e006      	b.n	8001c80 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
  }
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40006400 	.word	0x40006400

08001c90 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d12e      	bne.n	8001d02 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cbc:	f7ff fe00 	bl	80018c0 <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cc2:	e012      	b.n	8001cea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cc4:	f7ff fdfc 	bl	80018c0 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b0a      	cmp	r3, #10
 8001cd0:	d90b      	bls.n	8001cea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2205      	movs	r2, #5
 8001ce2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e012      	b.n	8001d10 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e5      	bne.n	8001cc4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e006      	b.n	8001d10 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
  }
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d36:	7ffb      	ldrb	r3, [r7, #31]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d003      	beq.n	8001d44 <HAL_CAN_AddTxMessage+0x2c>
 8001d3c:	7ffb      	ldrb	r3, [r7, #31]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	f040 80b8 	bne.w	8001eb4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10a      	bne.n	8001d64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80a0 	beq.w	8001ea4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	0e1b      	lsrs	r3, r3, #24
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d907      	bls.n	8001d84 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e09e      	b.n	8001ec2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d84:	2201      	movs	r2, #1
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10d      	bne.n	8001db2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	6809      	ldr	r1, [r1, #0]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3318      	adds	r3, #24
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	440b      	add	r3, r1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e00f      	b.n	8001dd2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dbc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dc2:	68f9      	ldr	r1, [r7, #12]
 8001dc4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001dc6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	3318      	adds	r3, #24
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	440b      	add	r3, r1
 8001dd0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6819      	ldr	r1, [r3, #0]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3318      	adds	r3, #24
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	440b      	add	r3, r1
 8001de2:	3304      	adds	r3, #4
 8001de4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	7d1b      	ldrb	r3, [r3, #20]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d111      	bne.n	8001e12 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3318      	adds	r3, #24
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	4413      	add	r3, r2
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	6811      	ldr	r1, [r2, #0]
 8001e02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3318      	adds	r3, #24
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3304      	adds	r3, #4
 8001e10:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3307      	adds	r3, #7
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	061a      	lsls	r2, r3, #24
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3306      	adds	r3, #6
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	041b      	lsls	r3, r3, #16
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3305      	adds	r3, #5
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	3204      	adds	r2, #4
 8001e32:	7812      	ldrb	r2, [r2, #0]
 8001e34:	4610      	mov	r0, r2
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	6811      	ldr	r1, [r2, #0]
 8001e3a:	ea43 0200 	orr.w	r2, r3, r0
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	440b      	add	r3, r1
 8001e44:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e48:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3303      	adds	r3, #3
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	061a      	lsls	r2, r3, #24
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3302      	adds	r3, #2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	041b      	lsls	r3, r3, #16
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	4313      	orrs	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	6811      	ldr	r1, [r2, #0]
 8001e70:	ea43 0200 	orr.w	r2, r3, r0
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	440b      	add	r3, r1
 8001e7a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e7e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	3318      	adds	r3, #24
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	4413      	add	r3, r2
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	6811      	ldr	r1, [r2, #0]
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3318      	adds	r3, #24
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	440b      	add	r3, r1
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e00e      	b.n	8001ec2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e006      	b.n	8001ec2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
  }
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3724      	adds	r7, #36	; 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b085      	sub	sp, #20
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ede:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d002      	beq.n	8001eec <HAL_CAN_AbortTxRequest+0x1e>
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d128      	bne.n	8001f3e <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f04:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f1e:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f38:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e006      	b.n	8001f4c <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
  }
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f6a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f6c:	7afb      	ldrb	r3, [r7, #11]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d002      	beq.n	8001f78 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001f72:	7afb      	ldrb	r3, [r7, #11]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d11d      	bne.n	8001fb4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b087      	sub	sp, #28
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d003      	beq.n	8001fe6 <HAL_CAN_GetRxMessage+0x24>
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	f040 80f3 	bne.w	80021cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10e      	bne.n	800200a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0e7      	b.n	80021da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0d8      	b.n	80021da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	331b      	adds	r3, #27
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4413      	add	r3, r2
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0204 	and.w	r2, r3, #4
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	331b      	adds	r3, #27
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	4413      	add	r3, r2
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0d5b      	lsrs	r3, r3, #21
 8002056:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e00b      	b.n	8002078 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	331b      	adds	r3, #27
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	08db      	lsrs	r3, r3, #3
 8002070:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	331b      	adds	r3, #27
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4413      	add	r3, r2
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0202 	and.w	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	331b      	adds	r3, #27
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	3304      	adds	r3, #4
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 020f 	and.w	r2, r3, #15
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	331b      	adds	r3, #27
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	4413      	add	r3, r2
 80020b2:	3304      	adds	r3, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	331b      	adds	r3, #27
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	4413      	add	r3, r2
 80020ca:	3304      	adds	r3, #4
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4413      	add	r3, r2
 80020e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0a1a      	lsrs	r2, r3, #8
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	4413      	add	r3, r2
 8002110:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0c1a      	lsrs	r2, r3, #16
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	3302      	adds	r3, #2
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4413      	add	r3, r2
 800212a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0e1a      	lsrs	r2, r3, #24
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	3303      	adds	r3, #3
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	4413      	add	r3, r2
 8002144:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	3304      	adds	r3, #4
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	4413      	add	r3, r2
 800215c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0a1a      	lsrs	r2, r3, #8
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	3305      	adds	r3, #5
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	4413      	add	r3, r2
 8002176:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0c1a      	lsrs	r2, r3, #16
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	3306      	adds	r3, #6
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	4413      	add	r3, r2
 8002190:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0e1a      	lsrs	r2, r3, #24
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	3307      	adds	r3, #7
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d108      	bne.n	80021b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0220 	orr.w	r2, r2, #32
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	e007      	b.n	80021c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0220 	orr.w	r2, r2, #32
 80021c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e006      	b.n	80021da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d002      	beq.n	8002204 <HAL_CAN_ActivateNotification+0x1e>
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d109      	bne.n	8002218 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6959      	ldr	r1, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e006      	b.n	8002226 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
  }
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b08a      	sub	sp, #40	; 0x28
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d07c      	beq.n	8002372 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d023      	beq.n	80022ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2201      	movs	r2, #1
 8002288:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7fe fd91 	bl	8000dbc <HAL_CAN_TxMailbox0CompleteCallback>
 800229a:	e016      	b.n	80022ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	e00c      	b.n	80022ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	e002      	b.n	80022ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f96b 	bl	80025a0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d024      	beq.n	800231e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7fe fd71 	bl	8000dd0 <HAL_CAN_TxMailbox1CompleteCallback>
 80022ee:	e016      	b.n	800231e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d004      	beq.n	8002304 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	e00c      	b.n	800231e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800230a:	2b00      	cmp	r3, #0
 800230c:	d004      	beq.n	8002318 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	e002      	b.n	800231e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f94b 	bl	80025b4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d024      	beq.n	8002372 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002330:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7fe fd51 	bl	8000de4 <HAL_CAN_TxMailbox2CompleteCallback>
 8002342:	e016      	b.n	8002372 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
 8002356:	e00c      	b.n	8002372 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	e002      	b.n	8002372 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f92b 	bl	80025c8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00c      	beq.n	8002396 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	d007      	beq.n	8002396 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2210      	movs	r2, #16
 8002394:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00b      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2208      	movs	r2, #8
 80023b0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f912 	bl	80025dc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7fe fce1 	bl	8000d98 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00c      	beq.n	80023fa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2210      	movs	r2, #16
 80023f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00b      	beq.n	800241c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2208      	movs	r2, #8
 8002414:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f8f4 	bl	8002604 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f8db 	bl	80025f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00b      	beq.n	800245c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2210      	movs	r2, #16
 8002454:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f8de 	bl	8002618 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d006      	beq.n	800247e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2208      	movs	r2, #8
 8002476:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f8d7 	bl	800262c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d07b      	beq.n	8002580 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d072      	beq.n	8002578 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d043      	beq.n	8002578 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d03e      	beq.n	8002578 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002500:	2b60      	cmp	r3, #96	; 0x60
 8002502:	d02b      	beq.n	800255c <HAL_CAN_IRQHandler+0x32a>
 8002504:	2b60      	cmp	r3, #96	; 0x60
 8002506:	d82e      	bhi.n	8002566 <HAL_CAN_IRQHandler+0x334>
 8002508:	2b50      	cmp	r3, #80	; 0x50
 800250a:	d022      	beq.n	8002552 <HAL_CAN_IRQHandler+0x320>
 800250c:	2b50      	cmp	r3, #80	; 0x50
 800250e:	d82a      	bhi.n	8002566 <HAL_CAN_IRQHandler+0x334>
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d019      	beq.n	8002548 <HAL_CAN_IRQHandler+0x316>
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d826      	bhi.n	8002566 <HAL_CAN_IRQHandler+0x334>
 8002518:	2b30      	cmp	r3, #48	; 0x30
 800251a:	d010      	beq.n	800253e <HAL_CAN_IRQHandler+0x30c>
 800251c:	2b30      	cmp	r3, #48	; 0x30
 800251e:	d822      	bhi.n	8002566 <HAL_CAN_IRQHandler+0x334>
 8002520:	2b10      	cmp	r3, #16
 8002522:	d002      	beq.n	800252a <HAL_CAN_IRQHandler+0x2f8>
 8002524:	2b20      	cmp	r3, #32
 8002526:	d005      	beq.n	8002534 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002528:	e01d      	b.n	8002566 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	f043 0308 	orr.w	r3, r3, #8
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002532:	e019      	b.n	8002568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	f043 0310 	orr.w	r3, r3, #16
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800253c:	e014      	b.n	8002568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	f043 0320 	orr.w	r3, r3, #32
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002546:	e00f      	b.n	8002568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002550:	e00a      	b.n	8002568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800255a:	e005      	b.n	8002568 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002564:	e000      	b.n	8002568 <HAL_CAN_IRQHandler+0x336>
            break;
 8002566:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002576:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2204      	movs	r2, #4
 800257e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d008      	beq.n	8002598 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f854 	bl	8002640 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002598:	bf00      	nop
 800259a:	3728      	adds	r7, #40	; 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	db0b      	blt.n	80026e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4907      	ldr	r1, [pc, #28]	; (80026f0 <__NVIC_EnableIRQ+0x38>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2001      	movs	r0, #1
 80026da:	fa00 f202 	lsl.w	r2, r0, r2
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	db0a      	blt.n	800271e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	490c      	ldr	r1, [pc, #48]	; (8002740 <__NVIC_SetPriority+0x4c>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	440b      	add	r3, r1
 8002718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800271c:	e00a      	b.n	8002734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4908      	ldr	r1, [pc, #32]	; (8002744 <__NVIC_SetPriority+0x50>)
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3b04      	subs	r3, #4
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	440b      	add	r3, r1
 8002732:	761a      	strb	r2, [r3, #24]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000e100 	.word	0xe000e100
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f1c3 0307 	rsb	r3, r3, #7
 8002762:	2b04      	cmp	r3, #4
 8002764:	bf28      	it	cs
 8002766:	2304      	movcs	r3, #4
 8002768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3304      	adds	r3, #4
 800276e:	2b06      	cmp	r3, #6
 8002770:	d902      	bls.n	8002778 <NVIC_EncodePriority+0x30>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3b03      	subs	r3, #3
 8002776:	e000      	b.n	800277a <NVIC_EncodePriority+0x32>
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	401a      	ands	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002790:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	43d9      	mvns	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	4313      	orrs	r3, r2
         );
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c0:	d301      	bcc.n	80027c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00f      	b.n	80027e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <SysTick_Config+0x40>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ce:	210f      	movs	r1, #15
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d4:	f7ff ff8e 	bl	80026f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <SysTick_Config+0x40>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <SysTick_Config+0x40>)
 80027e0:	2207      	movs	r2, #7
 80027e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	e000e010 	.word	0xe000e010

080027f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ff29 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800280a:	b580      	push	{r7, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800281c:	f7ff ff3e 	bl	800269c <__NVIC_GetPriorityGrouping>
 8002820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	6978      	ldr	r0, [r7, #20]
 8002828:	f7ff ff8e 	bl	8002748 <NVIC_EncodePriority>
 800282c:	4602      	mov	r2, r0
 800282e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff5d 	bl	80026f4 <__NVIC_SetPriority>
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff31 	bl	80026b8 <__NVIC_EnableIRQ>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ffa2 	bl	80027b0 <SysTick_Config>
 800286c:	4603      	mov	r3, r0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002884:	f7ff f81c 	bl	80018c0 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e099      	b.n	80029c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b4:	e00f      	b.n	80028d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028b6:	f7ff f803 	bl	80018c0 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d908      	bls.n	80028d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2203      	movs	r2, #3
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e078      	b.n	80029c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1e8      	bne.n	80028b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <HAL_DMA_Init+0x158>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002902:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	2b04      	cmp	r3, #4
 800292e:	d107      	bne.n	8002940 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	4313      	orrs	r3, r2
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f023 0307 	bic.w	r3, r3, #7
 8002956:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b04      	cmp	r3, #4
 8002968:	d117      	bne.n	800299a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00e      	beq.n	800299a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fb01 	bl	8002f84 <DMA_CheckFifoParam>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002996:	2301      	movs	r3, #1
 8002998:	e016      	b.n	80029c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fab8 	bl	8002f18 <DMA_CalcBaseAndBitshift>
 80029a8:	4603      	mov	r3, r0
 80029aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	223f      	movs	r2, #63	; 0x3f
 80029b2:	409a      	lsls	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	f010803f 	.word	0xf010803f

080029d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_DMA_Start_IT+0x26>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e040      	b.n	8002a7c <HAL_DMA_Start_IT+0xa8>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d12f      	bne.n	8002a6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2202      	movs	r2, #2
 8002a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fa4a 	bl	8002ebc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2c:	223f      	movs	r2, #63	; 0x3f
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0216 	orr.w	r2, r2, #22
 8002a42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0208 	orr.w	r2, r2, #8
 8002a5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e005      	b.n	8002a7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
 8002a78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a92:	f7fe ff15 	bl	80018c0 <HAL_GetTick>
 8002a96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d008      	beq.n	8002ab6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e052      	b.n	8002b5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0216 	bic.w	r2, r2, #22
 8002ac4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ad4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d103      	bne.n	8002ae6 <HAL_DMA_Abort+0x62>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d007      	beq.n	8002af6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0208 	bic.w	r2, r2, #8
 8002af4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0201 	bic.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b06:	e013      	b.n	8002b30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b08:	f7fe feda 	bl	80018c0 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d90c      	bls.n	8002b30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e015      	b.n	8002b5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1e4      	bne.n	8002b08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	223f      	movs	r2, #63	; 0x3f
 8002b44:	409a      	lsls	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d004      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2280      	movs	r2, #128	; 0x80
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00c      	b.n	8002b9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2205      	movs	r2, #5
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bb4:	4b92      	ldr	r3, [pc, #584]	; (8002e00 <HAL_DMA_IRQHandler+0x258>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a92      	ldr	r2, [pc, #584]	; (8002e04 <HAL_DMA_IRQHandler+0x25c>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0a9b      	lsrs	r3, r3, #10
 8002bc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01a      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0204 	bic.w	r2, r2, #4
 8002bfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	2208      	movs	r2, #8
 8002c02:	409a      	lsls	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	2201      	movs	r2, #1
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	2201      	movs	r2, #1
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	f043 0202 	orr.w	r2, r3, #2
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4e:	2204      	movs	r2, #4
 8002c50:	409a      	lsls	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d012      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c78:	f043 0204 	orr.w	r2, r3, #4
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	2210      	movs	r2, #16
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d043      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d03c      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d018      	beq.n	8002cea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d024      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
 8002cd6:	e01f      	b.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01b      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
 8002ce8:	e016      	b.n	8002d18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0208 	bic.w	r2, r2, #8
 8002d06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 808e 	beq.w	8002e46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8086 	beq.w	8002e46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3e:	2220      	movs	r2, #32
 8002d40:	409a      	lsls	r2, r3
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d136      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0216 	bic.w	r2, r2, #22
 8002d60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <HAL_DMA_IRQHandler+0x1da>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0208 	bic.w	r2, r2, #8
 8002d90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	223f      	movs	r2, #63	; 0x3f
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d07d      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
        }
        return;
 8002dbe:	e078      	b.n	8002eb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01c      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d108      	bne.n	8002dee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d030      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
 8002dec:	e02b      	b.n	8002e46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d027      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	4798      	blx	r3
 8002dfe:	e022      	b.n	8002e46 <HAL_DMA_IRQHandler+0x29e>
 8002e00:	20000010 	.word	0x20000010
 8002e04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10f      	bne.n	8002e36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0210 	bic.w	r2, r2, #16
 8002e24:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d032      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d022      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2205      	movs	r2, #5
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	3301      	adds	r3, #1
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d307      	bcc.n	8002e8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f2      	bne.n	8002e72 <HAL_DMA_IRQHandler+0x2ca>
 8002e8c:	e000      	b.n	8002e90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e8e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	4798      	blx	r3
 8002eb0:	e000      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002eb2:	bf00      	nop
    }
  }
}
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop

08002ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d108      	bne.n	8002efc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002efa:	e007      	b.n	8002f0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	3b10      	subs	r3, #16
 8002f28:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <DMA_CalcBaseAndBitshift+0x64>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f32:	4a13      	ldr	r2, [pc, #76]	; (8002f80 <DMA_CalcBaseAndBitshift+0x68>)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d909      	bls.n	8002f5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	1d1a      	adds	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	659a      	str	r2, [r3, #88]	; 0x58
 8002f58:	e007      	b.n	8002f6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	aaaaaaab 	.word	0xaaaaaaab
 8002f80:	080057d0 	.word	0x080057d0

08002f84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d11f      	bne.n	8002fde <DMA_CheckFifoParam+0x5a>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d856      	bhi.n	8003052 <DMA_CheckFifoParam+0xce>
 8002fa4:	a201      	add	r2, pc, #4	; (adr r2, 8002fac <DMA_CheckFifoParam+0x28>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08002fbd 	.word	0x08002fbd
 8002fb0:	08002fcf 	.word	0x08002fcf
 8002fb4:	08002fbd 	.word	0x08002fbd
 8002fb8:	08003053 	.word	0x08003053
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d046      	beq.n	8003056 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fcc:	e043      	b.n	8003056 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fd6:	d140      	bne.n	800305a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fdc:	e03d      	b.n	800305a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe6:	d121      	bne.n	800302c <DMA_CheckFifoParam+0xa8>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d837      	bhi.n	800305e <DMA_CheckFifoParam+0xda>
 8002fee:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <DMA_CheckFifoParam+0x70>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	0800300b 	.word	0x0800300b
 8002ffc:	08003005 	.word	0x08003005
 8003000:	0800301d 	.word	0x0800301d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      break;
 8003008:	e030      	b.n	800306c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d025      	beq.n	8003062 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301a:	e022      	b.n	8003062 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003024:	d11f      	bne.n	8003066 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800302a:	e01c      	b.n	8003066 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d903      	bls.n	800303a <DMA_CheckFifoParam+0xb6>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d003      	beq.n	8003040 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003038:	e018      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
      break;
 800303e:	e015      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00e      	beq.n	800306a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      break;
 8003050:	e00b      	b.n	800306a <DMA_CheckFifoParam+0xe6>
      break;
 8003052:	bf00      	nop
 8003054:	e00a      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 8003056:	bf00      	nop
 8003058:	e008      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 800305a:	bf00      	nop
 800305c:	e006      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 800305e:	bf00      	nop
 8003060:	e004      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 8003062:	bf00      	nop
 8003064:	e002      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;   
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <DMA_CheckFifoParam+0xe8>
      break;
 800306a:	bf00      	nop
    }
  } 
  
  return status; 
 800306c:	7bfb      	ldrb	r3, [r7, #15]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop

0800307c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	e165      	b.n	8003364 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003098:	2201      	movs	r2, #1
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f040 8154 	bne.w	800335e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d005      	beq.n	80030ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d130      	bne.n	8003130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	2203      	movs	r2, #3
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f003 0201 	and.w	r2, r3, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b03      	cmp	r3, #3
 800313a:	d017      	beq.n	800316c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d123      	bne.n	80031c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	08da      	lsrs	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3208      	adds	r2, #8
 8003180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	220f      	movs	r2, #15
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	08da      	lsrs	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3208      	adds	r2, #8
 80031ba:	69b9      	ldr	r1, [r7, #24]
 80031bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	2203      	movs	r2, #3
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0203 	and.w	r2, r3, #3
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80ae 	beq.w	800335e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	4b5d      	ldr	r3, [pc, #372]	; (800337c <HAL_GPIO_Init+0x300>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	4a5c      	ldr	r2, [pc, #368]	; (800337c <HAL_GPIO_Init+0x300>)
 800320c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003210:	6453      	str	r3, [r2, #68]	; 0x44
 8003212:	4b5a      	ldr	r3, [pc, #360]	; (800337c <HAL_GPIO_Init+0x300>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800321e:	4a58      	ldr	r2, [pc, #352]	; (8003380 <HAL_GPIO_Init+0x304>)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	089b      	lsrs	r3, r3, #2
 8003224:	3302      	adds	r3, #2
 8003226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	220f      	movs	r2, #15
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a4f      	ldr	r2, [pc, #316]	; (8003384 <HAL_GPIO_Init+0x308>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d025      	beq.n	8003296 <HAL_GPIO_Init+0x21a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a4e      	ldr	r2, [pc, #312]	; (8003388 <HAL_GPIO_Init+0x30c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01f      	beq.n	8003292 <HAL_GPIO_Init+0x216>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4d      	ldr	r2, [pc, #308]	; (800338c <HAL_GPIO_Init+0x310>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d019      	beq.n	800328e <HAL_GPIO_Init+0x212>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4c      	ldr	r2, [pc, #304]	; (8003390 <HAL_GPIO_Init+0x314>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_GPIO_Init+0x20e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4b      	ldr	r2, [pc, #300]	; (8003394 <HAL_GPIO_Init+0x318>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00d      	beq.n	8003286 <HAL_GPIO_Init+0x20a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4a      	ldr	r2, [pc, #296]	; (8003398 <HAL_GPIO_Init+0x31c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <HAL_GPIO_Init+0x206>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a49      	ldr	r2, [pc, #292]	; (800339c <HAL_GPIO_Init+0x320>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_GPIO_Init+0x202>
 800327a:	2306      	movs	r3, #6
 800327c:	e00c      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 800327e:	2307      	movs	r3, #7
 8003280:	e00a      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 8003282:	2305      	movs	r3, #5
 8003284:	e008      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 8003286:	2304      	movs	r3, #4
 8003288:	e006      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 800328a:	2303      	movs	r3, #3
 800328c:	e004      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 800328e:	2302      	movs	r3, #2
 8003290:	e002      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_GPIO_Init+0x21c>
 8003296:	2300      	movs	r3, #0
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	f002 0203 	and.w	r2, r2, #3
 800329e:	0092      	lsls	r2, r2, #2
 80032a0:	4093      	lsls	r3, r2
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032a8:	4935      	ldr	r1, [pc, #212]	; (8003380 <HAL_GPIO_Init+0x304>)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	089b      	lsrs	r3, r3, #2
 80032ae:	3302      	adds	r3, #2
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b6:	4b3a      	ldr	r3, [pc, #232]	; (80033a0 <HAL_GPIO_Init+0x324>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032da:	4a31      	ldr	r2, [pc, #196]	; (80033a0 <HAL_GPIO_Init+0x324>)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032e0:	4b2f      	ldr	r3, [pc, #188]	; (80033a0 <HAL_GPIO_Init+0x324>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003304:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <HAL_GPIO_Init+0x324>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800330a:	4b25      	ldr	r3, [pc, #148]	; (80033a0 <HAL_GPIO_Init+0x324>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800332e:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <HAL_GPIO_Init+0x324>)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003334:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <HAL_GPIO_Init+0x324>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003358:	4a11      	ldr	r2, [pc, #68]	; (80033a0 <HAL_GPIO_Init+0x324>)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3301      	adds	r3, #1
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b0f      	cmp	r3, #15
 8003368:	f67f ae96 	bls.w	8003098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	3724      	adds	r7, #36	; 0x24
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	40013800 	.word	0x40013800
 8003384:	40020000 	.word	0x40020000
 8003388:	40020400 	.word	0x40020400
 800338c:	40020800 	.word	0x40020800
 8003390:	40020c00 	.word	0x40020c00
 8003394:	40021000 	.word	0x40021000
 8003398:	40021400 	.word	0x40021400
 800339c:	40021800 	.word	0x40021800
 80033a0:	40013c00 	.word	0x40013c00

080033a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
 80033c0:	e001      	b.n	80033c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
 80033e0:	4613      	mov	r3, r2
 80033e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e4:	787b      	ldrb	r3, [r7, #1]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ea:	887a      	ldrh	r2, [r7, #2]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f0:	e003      	b.n	80033fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033f2:	887b      	ldrh	r3, [r7, #2]
 80033f4:	041a      	lsls	r2, r3, #16
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	619a      	str	r2, [r3, #24]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0cc      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d90c      	bls.n	8003444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b65      	ldr	r3, [pc, #404]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b63      	ldr	r3, [pc, #396]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0b8      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800345c:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a58      	ldr	r2, [pc, #352]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003474:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a52      	ldr	r2, [pc, #328]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800347e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b50      	ldr	r3, [pc, #320]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	494d      	ldr	r1, [pc, #308]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d044      	beq.n	8003528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d119      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e07f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d003      	beq.n	80034c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b3f      	ldr	r3, [pc, #252]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e06f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d6:	4b3b      	ldr	r3, [pc, #236]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e067      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e6:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4934      	ldr	r1, [pc, #208]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f8:	f7fe f9e2 	bl	80018c0 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fe f9de 	bl	80018c0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e04f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	429a      	cmp	r2, r3
 8003526:	d1eb      	bne.n	8003500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d20c      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e032      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4916      	ldr	r1, [pc, #88]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	490e      	ldr	r1, [pc, #56]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800358e:	f000 f855 	bl	800363c <HAL_RCC_GetSysClockFreq>
 8003592:	4602      	mov	r2, r0
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	490a      	ldr	r1, [pc, #40]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 80035a0:	5ccb      	ldrb	r3, [r1, r3]
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	4a09      	ldr	r2, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe f942 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40023c00 	.word	0x40023c00
 80035c4:	40023800 	.word	0x40023800
 80035c8:	080057b8 	.word	0x080057b8
 80035cc:	20000010 	.word	0x20000010
 80035d0:	20000018 	.word	0x20000018

080035d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d8:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20000010 	.word	0x20000010

080035ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035f0:	f7ff fff0 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 80035f4:	4602      	mov	r2, r0
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	0a9b      	lsrs	r3, r3, #10
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	4903      	ldr	r1, [pc, #12]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003602:	5ccb      	ldrb	r3, [r1, r3]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800
 8003610:	080057c8 	.word	0x080057c8

08003614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003618:	f7ff ffdc 	bl	80035d4 <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	0b5b      	lsrs	r3, r3, #13
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4903      	ldr	r1, [pc, #12]	; (8003638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40023800 	.word	0x40023800
 8003638:	080057c8 	.word	0x080057c8

0800363c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800363c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003640:	b088      	sub	sp, #32
 8003642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003658:	4bce      	ldr	r3, [pc, #824]	; (8003994 <HAL_RCC_GetSysClockFreq+0x358>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b0c      	cmp	r3, #12
 8003662:	f200 818d 	bhi.w	8003980 <HAL_RCC_GetSysClockFreq+0x344>
 8003666:	a201      	add	r2, pc, #4	; (adr r2, 800366c <HAL_RCC_GetSysClockFreq+0x30>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	080036a1 	.word	0x080036a1
 8003670:	08003981 	.word	0x08003981
 8003674:	08003981 	.word	0x08003981
 8003678:	08003981 	.word	0x08003981
 800367c:	080036a7 	.word	0x080036a7
 8003680:	08003981 	.word	0x08003981
 8003684:	08003981 	.word	0x08003981
 8003688:	08003981 	.word	0x08003981
 800368c:	080036ad 	.word	0x080036ad
 8003690:	08003981 	.word	0x08003981
 8003694:	08003981 	.word	0x08003981
 8003698:	08003981 	.word	0x08003981
 800369c:	08003821 	.word	0x08003821
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036a0:	4bbd      	ldr	r3, [pc, #756]	; (8003998 <HAL_RCC_GetSysClockFreq+0x35c>)
 80036a2:	61bb      	str	r3, [r7, #24]
       break;
 80036a4:	e16f      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036a6:	4bbd      	ldr	r3, [pc, #756]	; (800399c <HAL_RCC_GetSysClockFreq+0x360>)
 80036a8:	61bb      	str	r3, [r7, #24]
      break;
 80036aa:	e16c      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ac:	4bb9      	ldr	r3, [pc, #740]	; (8003994 <HAL_RCC_GetSysClockFreq+0x358>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b6:	4bb7      	ldr	r3, [pc, #732]	; (8003994 <HAL_RCC_GetSysClockFreq+0x358>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d053      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c2:	4bb4      	ldr	r3, [pc, #720]	; (8003994 <HAL_RCC_GetSysClockFreq+0x358>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	099b      	lsrs	r3, r3, #6
 80036c8:	461a      	mov	r2, r3
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036d2:	f04f 0100 	mov.w	r1, #0
 80036d6:	ea02 0400 	and.w	r4, r2, r0
 80036da:	603c      	str	r4, [r7, #0]
 80036dc:	400b      	ands	r3, r1
 80036de:	607b      	str	r3, [r7, #4]
 80036e0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036e4:	4620      	mov	r0, r4
 80036e6:	4629      	mov	r1, r5
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	014b      	lsls	r3, r1, #5
 80036f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036f6:	0142      	lsls	r2, r0, #5
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	4623      	mov	r3, r4
 80036fe:	1ac0      	subs	r0, r0, r3
 8003700:	462b      	mov	r3, r5
 8003702:	eb61 0103 	sbc.w	r1, r1, r3
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	018b      	lsls	r3, r1, #6
 8003710:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003714:	0182      	lsls	r2, r0, #6
 8003716:	1a12      	subs	r2, r2, r0
 8003718:	eb63 0301 	sbc.w	r3, r3, r1
 800371c:	f04f 0000 	mov.w	r0, #0
 8003720:	f04f 0100 	mov.w	r1, #0
 8003724:	00d9      	lsls	r1, r3, #3
 8003726:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800372a:	00d0      	lsls	r0, r2, #3
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4621      	mov	r1, r4
 8003732:	1852      	adds	r2, r2, r1
 8003734:	4629      	mov	r1, r5
 8003736:	eb43 0101 	adc.w	r1, r3, r1
 800373a:	460b      	mov	r3, r1
 800373c:	f04f 0000 	mov.w	r0, #0
 8003740:	f04f 0100 	mov.w	r1, #0
 8003744:	0259      	lsls	r1, r3, #9
 8003746:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800374a:	0250      	lsls	r0, r2, #9
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	461a      	mov	r2, r3
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	f7fc fd52 	bl	8000204 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4613      	mov	r3, r2
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	e04c      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376a:	4b8a      	ldr	r3, [pc, #552]	; (8003994 <HAL_RCC_GetSysClockFreq+0x358>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	099b      	lsrs	r3, r3, #6
 8003770:	461a      	mov	r2, r3
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	f240 10ff 	movw	r0, #511	; 0x1ff
 800377a:	f04f 0100 	mov.w	r1, #0
 800377e:	ea02 0a00 	and.w	sl, r2, r0
 8003782:	ea03 0b01 	and.w	fp, r3, r1
 8003786:	4650      	mov	r0, sl
 8003788:	4659      	mov	r1, fp
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	014b      	lsls	r3, r1, #5
 8003794:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003798:	0142      	lsls	r2, r0, #5
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	ebb0 000a 	subs.w	r0, r0, sl
 80037a2:	eb61 010b 	sbc.w	r1, r1, fp
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	018b      	lsls	r3, r1, #6
 80037b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037b4:	0182      	lsls	r2, r0, #6
 80037b6:	1a12      	subs	r2, r2, r0
 80037b8:	eb63 0301 	sbc.w	r3, r3, r1
 80037bc:	f04f 0000 	mov.w	r0, #0
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	00d9      	lsls	r1, r3, #3
 80037c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ca:	00d0      	lsls	r0, r2, #3
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	eb12 020a 	adds.w	r2, r2, sl
 80037d4:	eb43 030b 	adc.w	r3, r3, fp
 80037d8:	f04f 0000 	mov.w	r0, #0
 80037dc:	f04f 0100 	mov.w	r1, #0
 80037e0:	0299      	lsls	r1, r3, #10
 80037e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037e6:	0290      	lsls	r0, r2, #10
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4610      	mov	r0, r2
 80037ee:	4619      	mov	r1, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	461a      	mov	r2, r3
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	f7fc fd04 	bl	8000204 <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4613      	mov	r3, r2
 8003802:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003804:	4b63      	ldr	r3, [pc, #396]	; (8003994 <HAL_RCC_GetSysClockFreq+0x358>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	3301      	adds	r3, #1
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	61bb      	str	r3, [r7, #24]
      break;
 800381e:	e0b2      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003820:	4b5c      	ldr	r3, [pc, #368]	; (8003994 <HAL_RCC_GetSysClockFreq+0x358>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003828:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800382a:	4b5a      	ldr	r3, [pc, #360]	; (8003994 <HAL_RCC_GetSysClockFreq+0x358>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d04d      	beq.n	80038d2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003836:	4b57      	ldr	r3, [pc, #348]	; (8003994 <HAL_RCC_GetSysClockFreq+0x358>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	099b      	lsrs	r3, r3, #6
 800383c:	461a      	mov	r2, r3
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	ea02 0800 	and.w	r8, r2, r0
 800384e:	ea03 0901 	and.w	r9, r3, r1
 8003852:	4640      	mov	r0, r8
 8003854:	4649      	mov	r1, r9
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	014b      	lsls	r3, r1, #5
 8003860:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003864:	0142      	lsls	r2, r0, #5
 8003866:	4610      	mov	r0, r2
 8003868:	4619      	mov	r1, r3
 800386a:	ebb0 0008 	subs.w	r0, r0, r8
 800386e:	eb61 0109 	sbc.w	r1, r1, r9
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	018b      	lsls	r3, r1, #6
 800387c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003880:	0182      	lsls	r2, r0, #6
 8003882:	1a12      	subs	r2, r2, r0
 8003884:	eb63 0301 	sbc.w	r3, r3, r1
 8003888:	f04f 0000 	mov.w	r0, #0
 800388c:	f04f 0100 	mov.w	r1, #0
 8003890:	00d9      	lsls	r1, r3, #3
 8003892:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003896:	00d0      	lsls	r0, r2, #3
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	eb12 0208 	adds.w	r2, r2, r8
 80038a0:	eb43 0309 	adc.w	r3, r3, r9
 80038a4:	f04f 0000 	mov.w	r0, #0
 80038a8:	f04f 0100 	mov.w	r1, #0
 80038ac:	0259      	lsls	r1, r3, #9
 80038ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80038b2:	0250      	lsls	r0, r2, #9
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	461a      	mov	r2, r3
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	f7fc fc9e 	bl	8000204 <__aeabi_uldivmod>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4613      	mov	r3, r2
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	e04a      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d2:	4b30      	ldr	r3, [pc, #192]	; (8003994 <HAL_RCC_GetSysClockFreq+0x358>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	099b      	lsrs	r3, r3, #6
 80038d8:	461a      	mov	r2, r3
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038e2:	f04f 0100 	mov.w	r1, #0
 80038e6:	ea02 0400 	and.w	r4, r2, r0
 80038ea:	ea03 0501 	and.w	r5, r3, r1
 80038ee:	4620      	mov	r0, r4
 80038f0:	4629      	mov	r1, r5
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	014b      	lsls	r3, r1, #5
 80038fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003900:	0142      	lsls	r2, r0, #5
 8003902:	4610      	mov	r0, r2
 8003904:	4619      	mov	r1, r3
 8003906:	1b00      	subs	r0, r0, r4
 8003908:	eb61 0105 	sbc.w	r1, r1, r5
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	018b      	lsls	r3, r1, #6
 8003916:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800391a:	0182      	lsls	r2, r0, #6
 800391c:	1a12      	subs	r2, r2, r0
 800391e:	eb63 0301 	sbc.w	r3, r3, r1
 8003922:	f04f 0000 	mov.w	r0, #0
 8003926:	f04f 0100 	mov.w	r1, #0
 800392a:	00d9      	lsls	r1, r3, #3
 800392c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003930:	00d0      	lsls	r0, r2, #3
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	1912      	adds	r2, r2, r4
 8003938:	eb45 0303 	adc.w	r3, r5, r3
 800393c:	f04f 0000 	mov.w	r0, #0
 8003940:	f04f 0100 	mov.w	r1, #0
 8003944:	0299      	lsls	r1, r3, #10
 8003946:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800394a:	0290      	lsls	r0, r2, #10
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	461a      	mov	r2, r3
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	f7fc fc52 	bl	8000204 <__aeabi_uldivmod>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4613      	mov	r3, r2
 8003966:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <HAL_RCC_GetSysClockFreq+0x358>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	0f1b      	lsrs	r3, r3, #28
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	61bb      	str	r3, [r7, #24]
      break;
 800397e:	e002      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003982:	61bb      	str	r3, [r7, #24]
      break;
 8003984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003986:	69bb      	ldr	r3, [r7, #24]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	00f42400 	.word	0x00f42400
 800399c:	007a1200 	.word	0x007a1200

080039a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e28d      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8083 	beq.w	8003ac6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039c0:	4b94      	ldr	r3, [pc, #592]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d019      	beq.n	8003a00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039cc:	4b91      	ldr	r3, [pc, #580]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039d8:	4b8e      	ldr	r3, [pc, #568]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e4:	d00c      	beq.n	8003a00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e6:	4b8b      	ldr	r3, [pc, #556]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	d112      	bne.n	8003a18 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f2:	4b88      	ldr	r3, [pc, #544]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039fe:	d10b      	bne.n	8003a18 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a00:	4b84      	ldr	r3, [pc, #528]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d05b      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x124>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d157      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e25a      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a20:	d106      	bne.n	8003a30 <HAL_RCC_OscConfig+0x90>
 8003a22:	4b7c      	ldr	r3, [pc, #496]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a7b      	ldr	r2, [pc, #492]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e01d      	b.n	8003a6c <HAL_RCC_OscConfig+0xcc>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0xb4>
 8003a3a:	4b76      	ldr	r3, [pc, #472]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a75      	ldr	r2, [pc, #468]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b73      	ldr	r3, [pc, #460]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a72      	ldr	r2, [pc, #456]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e00b      	b.n	8003a6c <HAL_RCC_OscConfig+0xcc>
 8003a54:	4b6f      	ldr	r3, [pc, #444]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a6e      	ldr	r2, [pc, #440]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	4b6c      	ldr	r3, [pc, #432]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a6b      	ldr	r2, [pc, #428]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d013      	beq.n	8003a9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fd ff24 	bl	80018c0 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fd ff20 	bl	80018c0 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e21f      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8e:	4b61      	ldr	r3, [pc, #388]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0xdc>
 8003a9a:	e014      	b.n	8003ac6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fd ff10 	bl	80018c0 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fd ff0c 	bl	80018c0 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e20b      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab6:	4b57      	ldr	r3, [pc, #348]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x104>
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d06f      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ad2:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d017      	beq.n	8003b0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ade:	4b4d      	ldr	r3, [pc, #308]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d105      	bne.n	8003af6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003aea:	4b4a      	ldr	r3, [pc, #296]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003afe:	2b0c      	cmp	r3, #12
 8003b00:	d11c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b02:	4b44      	ldr	r3, [pc, #272]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d116      	bne.n	8003b3c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0e:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_RCC_OscConfig+0x186>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d001      	beq.n	8003b26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e1d3      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b26:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4937      	ldr	r1, [pc, #220]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3a:	e03a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b44:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_OscConfig+0x278>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fd feb9 	bl	80018c0 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b52:	f7fd feb5 	bl	80018c0 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e1b4      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b70:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4925      	ldr	r1, [pc, #148]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	600b      	str	r3, [r1, #0]
 8003b84:	e015      	b.n	8003bb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b86:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <HAL_RCC_OscConfig+0x278>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fe98 	bl	80018c0 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b94:	f7fd fe94 	bl	80018c0 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e193      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba6:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d036      	beq.n	8003c2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <HAL_RCC_OscConfig+0x27c>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fd fe78 	bl	80018c0 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fd fe74 	bl	80018c0 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e173      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x234>
 8003bf2:	e01b      	b.n	8003c2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <HAL_RCC_OscConfig+0x27c>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfa:	f7fd fe61 	bl	80018c0 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	e00e      	b.n	8003c20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c02:	f7fd fe5d 	bl	80018c0 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d907      	bls.n	8003c20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e15c      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
 8003c14:	40023800 	.word	0x40023800
 8003c18:	42470000 	.word	0x42470000
 8003c1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c20:	4b8a      	ldr	r3, [pc, #552]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ea      	bne.n	8003c02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 8097 	beq.w	8003d68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c3e:	4b83      	ldr	r3, [pc, #524]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	4b7f      	ldr	r3, [pc, #508]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	4a7e      	ldr	r2, [pc, #504]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c58:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5a:	4b7c      	ldr	r3, [pc, #496]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c62:	60bb      	str	r3, [r7, #8]
 8003c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6a:	4b79      	ldr	r3, [pc, #484]	; (8003e50 <HAL_RCC_OscConfig+0x4b0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d118      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c76:	4b76      	ldr	r3, [pc, #472]	; (8003e50 <HAL_RCC_OscConfig+0x4b0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a75      	ldr	r2, [pc, #468]	; (8003e50 <HAL_RCC_OscConfig+0x4b0>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c82:	f7fd fe1d 	bl	80018c0 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8a:	f7fd fe19 	bl	80018c0 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e118      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9c:	4b6c      	ldr	r3, [pc, #432]	; (8003e50 <HAL_RCC_OscConfig+0x4b0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d106      	bne.n	8003cbe <HAL_RCC_OscConfig+0x31e>
 8003cb0:	4b66      	ldr	r3, [pc, #408]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb4:	4a65      	ldr	r2, [pc, #404]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	6713      	str	r3, [r2, #112]	; 0x70
 8003cbc:	e01c      	b.n	8003cf8 <HAL_RCC_OscConfig+0x358>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x340>
 8003cc6:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a60      	ldr	r2, [pc, #384]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd2:	4b5e      	ldr	r3, [pc, #376]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a5d      	ldr	r2, [pc, #372]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0x358>
 8003ce0:	4b5a      	ldr	r3, [pc, #360]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	4a59      	ldr	r2, [pc, #356]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	6713      	str	r3, [r2, #112]	; 0x70
 8003cec:	4b57      	ldr	r3, [pc, #348]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a56      	ldr	r2, [pc, #344]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003cf2:	f023 0304 	bic.w	r3, r3, #4
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d015      	beq.n	8003d2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7fd fdde 	bl	80018c0 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fd fdda 	bl	80018c0 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0d7      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	4b4b      	ldr	r3, [pc, #300]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0ee      	beq.n	8003d08 <HAL_RCC_OscConfig+0x368>
 8003d2a:	e014      	b.n	8003d56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fd fdc8 	bl	80018c0 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fd fdc4 	bl	80018c0 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e0c1      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4a:	4b40      	ldr	r3, [pc, #256]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ee      	bne.n	8003d34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5c:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	4a3a      	ldr	r2, [pc, #232]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80ad 	beq.w	8003ecc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d72:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d060      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d145      	bne.n	8003e12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d86:	4b33      	ldr	r3, [pc, #204]	; (8003e54 <HAL_RCC_OscConfig+0x4b4>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fd fd98 	bl	80018c0 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fd fd94 	bl	80018c0 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e093      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da6:	4b29      	ldr	r3, [pc, #164]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69da      	ldr	r2, [r3, #28]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	019b      	lsls	r3, r3, #6
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	041b      	lsls	r3, r3, #16
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	071b      	lsls	r3, r3, #28
 8003dde:	491b      	ldr	r1, [pc, #108]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de4:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <HAL_RCC_OscConfig+0x4b4>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fd fd69 	bl	80018c0 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df2:	f7fd fd65 	bl	80018c0 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e064      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e04:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x452>
 8003e10:	e05c      	b.n	8003ecc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <HAL_RCC_OscConfig+0x4b4>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e18:	f7fd fd52 	bl	80018c0 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e20:	f7fd fd4e 	bl	80018c0 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e04d      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_RCC_OscConfig+0x4ac>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0x480>
 8003e3e:	e045      	b.n	8003ecc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e040      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40007000 	.word	0x40007000
 8003e54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e58:	4b1f      	ldr	r3, [pc, #124]	; (8003ed8 <HAL_RCC_OscConfig+0x538>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d030      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d129      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d122      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e88:	4013      	ands	r3, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d119      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	085b      	lsrs	r3, r3, #1
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d10f      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800

08003edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e041      	b.n	8003f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd f818 	bl	8000f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f000 fa96 	bl	800444c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d001      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e04e      	b.n	8004032 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a23      	ldr	r2, [pc, #140]	; (8004040 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d022      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbe:	d01d      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1f      	ldr	r2, [pc, #124]	; (8004044 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d018      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1e      	ldr	r2, [pc, #120]	; (8004048 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d013      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	; (800404c <HAL_TIM_Base_Start_IT+0xd0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00e      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	; (8004050 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d009      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a19      	ldr	r2, [pc, #100]	; (8004054 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a18      	ldr	r2, [pc, #96]	; (8004058 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d111      	bne.n	8004020 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b06      	cmp	r3, #6
 800400c:	d010      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401e:	e007      	b.n	8004030 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40010400 	.word	0x40010400
 8004054:	40014000 	.word	0x40014000
 8004058:	40001800 	.word	0x40001800

0800405c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b02      	cmp	r3, #2
 8004070:	d122      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b02      	cmp	r3, #2
 800407e:	d11b      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0202 	mvn.w	r2, #2
 8004088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f9b5 	bl	800440e <HAL_TIM_IC_CaptureCallback>
 80040a4:	e005      	b.n	80040b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f9a7 	bl	80043fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f9b8 	bl	8004422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d122      	bne.n	800410c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d11b      	bne.n	800410c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0204 	mvn.w	r2, #4
 80040dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f98b 	bl	800440e <HAL_TIM_IC_CaptureCallback>
 80040f8:	e005      	b.n	8004106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f97d 	bl	80043fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f98e 	bl	8004422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b08      	cmp	r3, #8
 8004118:	d122      	bne.n	8004160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b08      	cmp	r3, #8
 8004126:	d11b      	bne.n	8004160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0208 	mvn.w	r2, #8
 8004130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2204      	movs	r2, #4
 8004136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f961 	bl	800440e <HAL_TIM_IC_CaptureCallback>
 800414c:	e005      	b.n	800415a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f953 	bl	80043fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f964 	bl	8004422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b10      	cmp	r3, #16
 800416c:	d122      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b10      	cmp	r3, #16
 800417a:	d11b      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0210 	mvn.w	r2, #16
 8004184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2208      	movs	r2, #8
 800418a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f937 	bl	800440e <HAL_TIM_IC_CaptureCallback>
 80041a0:	e005      	b.n	80041ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f929 	bl	80043fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f93a 	bl	8004422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d10e      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d107      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0201 	mvn.w	r2, #1
 80041d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fc fe0c 	bl	8000df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b80      	cmp	r3, #128	; 0x80
 80041ec:	d10e      	bne.n	800420c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f8:	2b80      	cmp	r3, #128	; 0x80
 80041fa:	d107      	bne.n	800420c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fae0 	bl	80047cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004216:	2b40      	cmp	r3, #64	; 0x40
 8004218:	d10e      	bne.n	8004238 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	d107      	bne.n	8004238 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f8ff 	bl	8004436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b20      	cmp	r3, #32
 8004244:	d10e      	bne.n	8004264 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b20      	cmp	r3, #32
 8004252:	d107      	bne.n	8004264 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0220 	mvn.w	r2, #32
 800425c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 faaa 	bl	80047b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_TIM_ConfigClockSource+0x1c>
 8004284:	2302      	movs	r3, #2
 8004286:	e0b4      	b.n	80043f2 <HAL_TIM_ConfigClockSource+0x186>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c0:	d03e      	beq.n	8004340 <HAL_TIM_ConfigClockSource+0xd4>
 80042c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c6:	f200 8087 	bhi.w	80043d8 <HAL_TIM_ConfigClockSource+0x16c>
 80042ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ce:	f000 8086 	beq.w	80043de <HAL_TIM_ConfigClockSource+0x172>
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d6:	d87f      	bhi.n	80043d8 <HAL_TIM_ConfigClockSource+0x16c>
 80042d8:	2b70      	cmp	r3, #112	; 0x70
 80042da:	d01a      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0xa6>
 80042dc:	2b70      	cmp	r3, #112	; 0x70
 80042de:	d87b      	bhi.n	80043d8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e0:	2b60      	cmp	r3, #96	; 0x60
 80042e2:	d050      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x11a>
 80042e4:	2b60      	cmp	r3, #96	; 0x60
 80042e6:	d877      	bhi.n	80043d8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e8:	2b50      	cmp	r3, #80	; 0x50
 80042ea:	d03c      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0xfa>
 80042ec:	2b50      	cmp	r3, #80	; 0x50
 80042ee:	d873      	bhi.n	80043d8 <HAL_TIM_ConfigClockSource+0x16c>
 80042f0:	2b40      	cmp	r3, #64	; 0x40
 80042f2:	d058      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x13a>
 80042f4:	2b40      	cmp	r3, #64	; 0x40
 80042f6:	d86f      	bhi.n	80043d8 <HAL_TIM_ConfigClockSource+0x16c>
 80042f8:	2b30      	cmp	r3, #48	; 0x30
 80042fa:	d064      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x15a>
 80042fc:	2b30      	cmp	r3, #48	; 0x30
 80042fe:	d86b      	bhi.n	80043d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004300:	2b20      	cmp	r3, #32
 8004302:	d060      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004304:	2b20      	cmp	r3, #32
 8004306:	d867      	bhi.n	80043d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d05c      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x15a>
 800430c:	2b10      	cmp	r3, #16
 800430e:	d05a      	beq.n	80043c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004310:	e062      	b.n	80043d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6899      	ldr	r1, [r3, #8]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f000 f9ad 	bl	8004680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	609a      	str	r2, [r3, #8]
      break;
 800433e:	e04f      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	6899      	ldr	r1, [r3, #8]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f000 f996 	bl	8004680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004362:	609a      	str	r2, [r3, #8]
      break;
 8004364:	e03c      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	461a      	mov	r2, r3
 8004374:	f000 f90a 	bl	800458c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2150      	movs	r1, #80	; 0x50
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f963 	bl	800464a <TIM_ITRx_SetConfig>
      break;
 8004384:	e02c      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6859      	ldr	r1, [r3, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	461a      	mov	r2, r3
 8004394:	f000 f929 	bl	80045ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2160      	movs	r1, #96	; 0x60
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f953 	bl	800464a <TIM_ITRx_SetConfig>
      break;
 80043a4:	e01c      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f000 f8ea 	bl	800458c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2140      	movs	r1, #64	; 0x40
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f943 	bl	800464a <TIM_ITRx_SetConfig>
      break;
 80043c4:	e00c      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4619      	mov	r1, r3
 80043d0:	4610      	mov	r0, r2
 80043d2:	f000 f93a 	bl	800464a <TIM_ITRx_SetConfig>
      break;
 80043d6:	e003      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      break;
 80043dc:	e000      	b.n	80043e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a40      	ldr	r2, [pc, #256]	; (8004560 <TIM_Base_SetConfig+0x114>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d013      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446a:	d00f      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a3d      	ldr	r2, [pc, #244]	; (8004564 <TIM_Base_SetConfig+0x118>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00b      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a3c      	ldr	r2, [pc, #240]	; (8004568 <TIM_Base_SetConfig+0x11c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d007      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a3b      	ldr	r2, [pc, #236]	; (800456c <TIM_Base_SetConfig+0x120>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d003      	beq.n	800448c <TIM_Base_SetConfig+0x40>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a3a      	ldr	r2, [pc, #232]	; (8004570 <TIM_Base_SetConfig+0x124>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d108      	bne.n	800449e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2f      	ldr	r2, [pc, #188]	; (8004560 <TIM_Base_SetConfig+0x114>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d02b      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d027      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2c      	ldr	r2, [pc, #176]	; (8004564 <TIM_Base_SetConfig+0x118>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d023      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2b      	ldr	r2, [pc, #172]	; (8004568 <TIM_Base_SetConfig+0x11c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01f      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2a      	ldr	r2, [pc, #168]	; (800456c <TIM_Base_SetConfig+0x120>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d01b      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a29      	ldr	r2, [pc, #164]	; (8004570 <TIM_Base_SetConfig+0x124>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d017      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a28      	ldr	r2, [pc, #160]	; (8004574 <TIM_Base_SetConfig+0x128>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a27      	ldr	r2, [pc, #156]	; (8004578 <TIM_Base_SetConfig+0x12c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00f      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a26      	ldr	r2, [pc, #152]	; (800457c <TIM_Base_SetConfig+0x130>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00b      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a25      	ldr	r2, [pc, #148]	; (8004580 <TIM_Base_SetConfig+0x134>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a24      	ldr	r2, [pc, #144]	; (8004584 <TIM_Base_SetConfig+0x138>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a23      	ldr	r2, [pc, #140]	; (8004588 <TIM_Base_SetConfig+0x13c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d108      	bne.n	8004510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <TIM_Base_SetConfig+0x114>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <TIM_Base_SetConfig+0xf8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a0c      	ldr	r2, [pc, #48]	; (8004570 <TIM_Base_SetConfig+0x124>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d103      	bne.n	800454c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	615a      	str	r2, [r3, #20]
}
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40010000 	.word	0x40010000
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800
 800456c:	40000c00 	.word	0x40000c00
 8004570:	40010400 	.word	0x40010400
 8004574:	40014000 	.word	0x40014000
 8004578:	40014400 	.word	0x40014400
 800457c:	40014800 	.word	0x40014800
 8004580:	40001800 	.word	0x40001800
 8004584:	40001c00 	.word	0x40001c00
 8004588:	40002000 	.word	0x40002000

0800458c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f023 0201 	bic.w	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 030a 	bic.w	r3, r3, #10
 80045c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b087      	sub	sp, #28
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f023 0210 	bic.w	r2, r3, #16
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	031b      	lsls	r3, r3, #12
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004626:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800464a:	b480      	push	{r7}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	f043 0307 	orr.w	r3, r3, #7
 800466c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	609a      	str	r2, [r3, #8]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004680:	b480      	push	{r7}
 8004682:	b087      	sub	sp, #28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800469a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	021a      	lsls	r2, r3, #8
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	609a      	str	r2, [r3, #8]
}
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e05a      	b.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a21      	ldr	r2, [pc, #132]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d022      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004724:	d01d      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1d      	ldr	r2, [pc, #116]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d018      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1b      	ldr	r2, [pc, #108]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1a      	ldr	r2, [pc, #104]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a18      	ldr	r2, [pc, #96]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a15      	ldr	r2, [pc, #84]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d10c      	bne.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	4313      	orrs	r3, r2
 8004772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40010000 	.word	0x40010000
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40000800 	.word	0x40000800
 80047a8:	40000c00 	.word	0x40000c00
 80047ac:	40010400 	.word	0x40010400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40001800 	.word	0x40001800

080047b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e03f      	b.n	8004872 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fc fbbc 	bl	8000f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2224      	movs	r2, #36	; 0x24
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004822:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fdc7 	bl	80053b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004838:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695a      	ldr	r2, [r3, #20]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004848:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004858:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08c      	sub	sp, #48	; 0x30
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	4613      	mov	r3, r2
 8004888:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b20      	cmp	r3, #32
 8004894:	d165      	bne.n	8004962 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <HAL_UART_Transmit_DMA+0x26>
 800489c:	88fb      	ldrh	r3, [r7, #6]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e05e      	b.n	8004964 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_UART_Transmit_DMA+0x38>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e057      	b.n	8004964 <HAL_UART_Transmit_DMA+0xe8>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	88fa      	ldrh	r2, [r7, #6]
 80048c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	88fa      	ldrh	r2, [r7, #6]
 80048cc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2221      	movs	r2, #33	; 0x21
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e0:	4a22      	ldr	r2, [pc, #136]	; (800496c <HAL_UART_Transmit_DMA+0xf0>)
 80048e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e8:	4a21      	ldr	r2, [pc, #132]	; (8004970 <HAL_UART_Transmit_DMA+0xf4>)
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f0:	4a20      	ldr	r2, [pc, #128]	; (8004974 <HAL_UART_Transmit_DMA+0xf8>)
 80048f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f8:	2200      	movs	r2, #0
 80048fa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80048fc:	f107 0308 	add.w	r3, r7, #8
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	6819      	ldr	r1, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3304      	adds	r3, #4
 8004910:	461a      	mov	r2, r3
 8004912:	88fb      	ldrh	r3, [r7, #6]
 8004914:	f7fe f85e 	bl	80029d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004920:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3314      	adds	r3, #20
 8004930:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	617b      	str	r3, [r7, #20]
   return(result);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3314      	adds	r3, #20
 8004948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800494a:	627a      	str	r2, [r7, #36]	; 0x24
 800494c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6a39      	ldr	r1, [r7, #32]
 8004950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	61fb      	str	r3, [r7, #28]
   return(result);
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e5      	bne.n	800492a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	e000      	b.n	8004964 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004962:	2302      	movs	r3, #2
  }
}
 8004964:	4618      	mov	r0, r3
 8004966:	3730      	adds	r7, #48	; 0x30
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	08004ee9 	.word	0x08004ee9
 8004970:	08004f83 	.word	0x08004f83
 8004974:	08004f9f 	.word	0x08004f9f

08004978 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b0ba      	sub	sp, #232	; 0xe8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800499e:	2300      	movs	r3, #0
 80049a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_UART_IRQHandler+0x66>
 80049ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fc32 	bl	8005240 <UART_Receive_IT>
      return;
 80049dc:	e256      	b.n	8004e8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80de 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x22c>
 80049e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 80d1 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <HAL_UART_IRQHandler+0xae>
 8004a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f043 0201 	orr.w	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_UART_IRQHandler+0xd2>
 8004a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0202 	orr.w	r2, r3, #2
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00b      	beq.n	8004a6e <HAL_UART_IRQHandler+0xf6>
 8004a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0204 	orr.w	r2, r3, #4
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d011      	beq.n	8004a9e <HAL_UART_IRQHandler+0x126>
 8004a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d105      	bne.n	8004a92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f043 0208 	orr.w	r2, r3, #8
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 81ed 	beq.w	8004e82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x14e>
 8004ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fbbd 	bl	8005240 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d103      	bne.n	8004af2 <HAL_UART_IRQHandler+0x17a>
 8004aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d04f      	beq.n	8004b92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fac5 	bl	8005082 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d141      	bne.n	8004b8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3314      	adds	r3, #20
 8004b0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3314      	adds	r3, #20
 8004b2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1d9      	bne.n	8004b06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d013      	beq.n	8004b82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	4a7d      	ldr	r2, [pc, #500]	; (8004d54 <HAL_UART_IRQHandler+0x3dc>)
 8004b60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fd fffc 	bl	8002b64 <HAL_DMA_Abort_IT>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d016      	beq.n	8004ba0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	e00e      	b.n	8004ba0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f99a 	bl	8004ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	e00a      	b.n	8004ba0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f996 	bl	8004ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b90:	e006      	b.n	8004ba0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f992 	bl	8004ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b9e:	e170      	b.n	8004e82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	bf00      	nop
    return;
 8004ba2:	e16e      	b.n	8004e82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	f040 814a 	bne.w	8004e42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8143 	beq.w	8004e42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 813c 	beq.w	8004e42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	f040 80b4 	bne.w	8004d58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8140 	beq.w	8004e86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	f080 8139 	bcs.w	8004e86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c26:	f000 8088 	beq.w	8004d3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1d9      	bne.n	8004c2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3314      	adds	r3, #20
 8004c7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3314      	adds	r3, #20
 8004c96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ca2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e1      	bne.n	8004c76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3314      	adds	r3, #20
 8004cb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e3      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d0a:	f023 0310 	bic.w	r3, r3, #16
 8004d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e3      	bne.n	8004cf8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fd fea5 	bl	8002a84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f8c0 	bl	8004ed0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d50:	e099      	b.n	8004e86 <HAL_UART_IRQHandler+0x50e>
 8004d52:	bf00      	nop
 8004d54:	08005149 	.word	0x08005149
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 808b 	beq.w	8004e8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8086 	beq.w	8004e8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	330c      	adds	r3, #12
 8004d84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004da2:	647a      	str	r2, [r7, #68]	; 0x44
 8004da4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004da8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e3      	bne.n	8004d7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3314      	adds	r3, #20
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3314      	adds	r3, #20
 8004dd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dda:	633a      	str	r2, [r7, #48]	; 0x30
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e3      	bne.n	8004db6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	330c      	adds	r3, #12
 8004e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0310 	bic.w	r3, r3, #16
 8004e12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e20:	61fa      	str	r2, [r7, #28]
 8004e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	69b9      	ldr	r1, [r7, #24]
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e3      	bne.n	8004dfc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f848 	bl	8004ed0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e40:	e023      	b.n	8004e8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <HAL_UART_IRQHandler+0x4ea>
 8004e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f988 	bl	8005170 <UART_Transmit_IT>
    return;
 8004e60:	e014      	b.n	8004e8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00e      	beq.n	8004e8c <HAL_UART_IRQHandler+0x514>
 8004e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f9c8 	bl	8005210 <UART_EndTransmit_IT>
    return;
 8004e80:	e004      	b.n	8004e8c <HAL_UART_IRQHandler+0x514>
    return;
 8004e82:	bf00      	nop
 8004e84:	e002      	b.n	8004e8c <HAL_UART_IRQHandler+0x514>
      return;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <HAL_UART_IRQHandler+0x514>
      return;
 8004e8a:	bf00      	nop
  }
}
 8004e8c:	37e8      	adds	r7, #232	; 0xe8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop

08004e94 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b090      	sub	sp, #64	; 0x40
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d137      	bne.n	8004f74 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f06:	2200      	movs	r2, #0
 8004f08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3314      	adds	r3, #20
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	623b      	str	r3, [r7, #32]
   return(result);
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3314      	adds	r3, #20
 8004f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f2a:	633a      	str	r2, [r7, #48]	; 0x30
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e5      	bne.n	8004f0a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34
 8004f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	330c      	adds	r3, #12
 8004f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f5e:	61fa      	str	r2, [r7, #28]
 8004f60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	69b9      	ldr	r1, [r7, #24]
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	617b      	str	r3, [r7, #20]
   return(result);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e5      	bne.n	8004f3e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f72:	e002      	b.n	8004f7a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004f74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004f76:	f7fb fefd 	bl	8000d74 <HAL_UART_TxCpltCallback>
}
 8004f7a:	bf00      	nop
 8004f7c:	3740      	adds	r7, #64	; 0x40
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff ff7f 	bl	8004e94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	2b80      	cmp	r3, #128	; 0x80
 8004fbc:	bf0c      	ite	eq
 8004fbe:	2301      	moveq	r3, #1
 8004fc0:	2300      	movne	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b21      	cmp	r3, #33	; 0x21
 8004fd0:	d108      	bne.n	8004fe4 <UART_DMAError+0x46>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004fde:	68b8      	ldr	r0, [r7, #8]
 8004fe0:	f000 f827 	bl	8005032 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	bf0c      	ite	eq
 8004ff2:	2301      	moveq	r3, #1
 8004ff4:	2300      	movne	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b22      	cmp	r3, #34	; 0x22
 8005004:	d108      	bne.n	8005018 <UART_DMAError+0x7a>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2200      	movs	r2, #0
 8005010:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005012:	68b8      	ldr	r0, [r7, #8]
 8005014:	f000 f835 	bl	8005082 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	f043 0210 	orr.w	r2, r3, #16
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005024:	68b8      	ldr	r0, [r7, #8]
 8005026:	f7ff ff49 	bl	8004ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800502a:	bf00      	nop
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005032:	b480      	push	{r7}
 8005034:	b089      	sub	sp, #36	; 0x24
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	330c      	adds	r3, #12
 8005040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	60bb      	str	r3, [r7, #8]
   return(result);
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	330c      	adds	r3, #12
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	61ba      	str	r2, [r7, #24]
 800505c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6979      	ldr	r1, [r7, #20]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	613b      	str	r3, [r7, #16]
   return(result);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e5      	bne.n	800503a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005076:	bf00      	nop
 8005078:	3724      	adds	r7, #36	; 0x24
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005082:	b480      	push	{r7}
 8005084:	b095      	sub	sp, #84	; 0x54
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050aa:	643a      	str	r2, [r7, #64]	; 0x40
 80050ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e5      	bne.n	800508a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3314      	adds	r3, #20
 80050c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3314      	adds	r3, #20
 80050dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e5      	bne.n	80050be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d119      	bne.n	800512e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	60bb      	str	r3, [r7, #8]
   return(result);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f023 0310 	bic.w	r3, r3, #16
 8005110:	647b      	str	r3, [r7, #68]	; 0x44
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	330c      	adds	r3, #12
 8005118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800511a:	61ba      	str	r2, [r7, #24]
 800511c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6979      	ldr	r1, [r7, #20]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	613b      	str	r3, [r7, #16]
   return(result);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e5      	bne.n	80050fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800513c:	bf00      	nop
 800513e:	3754      	adds	r7, #84	; 0x54
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7ff feaa 	bl	8004ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005168:	bf00      	nop
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b21      	cmp	r3, #33	; 0x21
 8005182:	d13e      	bne.n	8005202 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518c:	d114      	bne.n	80051b8 <UART_Transmit_IT+0x48>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d110      	bne.n	80051b8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	1c9a      	adds	r2, r3, #2
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	621a      	str	r2, [r3, #32]
 80051b6:	e008      	b.n	80051ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	1c59      	adds	r1, r3, #1
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6211      	str	r1, [r2, #32]
 80051c2:	781a      	ldrb	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	4619      	mov	r1, r3
 80051d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10f      	bne.n	80051fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	e000      	b.n	8005204 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005202:	2302      	movs	r3, #2
  }
}
 8005204:	4618      	mov	r0, r3
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005226:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7fb fd9f 	bl	8000d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08c      	sub	sp, #48	; 0x30
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b22      	cmp	r3, #34	; 0x22
 8005252:	f040 80ab 	bne.w	80053ac <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525e:	d117      	bne.n	8005290 <UART_Receive_IT+0x50>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d113      	bne.n	8005290 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	b29b      	uxth	r3, r3
 800527a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527e:	b29a      	uxth	r2, r3
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005288:	1c9a      	adds	r2, r3, #2
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	629a      	str	r2, [r3, #40]	; 0x28
 800528e:	e026      	b.n	80052de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a2:	d007      	beq.n	80052b4 <UART_Receive_IT+0x74>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <UART_Receive_IT+0x82>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d106      	bne.n	80052c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	e008      	b.n	80052d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	4619      	mov	r1, r3
 80052ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d15a      	bne.n	80053a8 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0220 	bic.w	r2, r2, #32
 8005300:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005310:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695a      	ldr	r2, [r3, #20]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	2b01      	cmp	r3, #1
 8005330:	d135      	bne.n	800539e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	330c      	adds	r3, #12
 800533e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	e853 3f00 	ldrex	r3, [r3]
 8005346:	613b      	str	r3, [r7, #16]
   return(result);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f023 0310 	bic.w	r3, r3, #16
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	330c      	adds	r3, #12
 8005356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005358:	623a      	str	r2, [r7, #32]
 800535a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	69f9      	ldr	r1, [r7, #28]
 800535e:	6a3a      	ldr	r2, [r7, #32]
 8005360:	e841 2300 	strex	r3, r2, [r1]
 8005364:	61bb      	str	r3, [r7, #24]
   return(result);
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e5      	bne.n	8005338 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b10      	cmp	r3, #16
 8005378:	d10a      	bne.n	8005390 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff fd9a 	bl	8004ed0 <HAL_UARTEx_RxEventCallback>
 800539c:	e002      	b.n	80053a4 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff fd82 	bl	8004ea8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e002      	b.n	80053ae <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e000      	b.n	80053ae <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80053ac:	2302      	movs	r3, #2
  }
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3730      	adds	r7, #48	; 0x30
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	b09f      	sub	sp, #124	; 0x7c
 80053be:	af00      	add	r7, sp, #0
 80053c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ce:	68d9      	ldr	r1, [r3, #12]
 80053d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	ea40 0301 	orr.w	r3, r0, r1
 80053d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80053f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053fc:	f021 010c 	bic.w	r1, r1, #12
 8005400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005406:	430b      	orrs	r3, r1
 8005408:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800540a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005416:	6999      	ldr	r1, [r3, #24]
 8005418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	ea40 0301 	orr.w	r3, r0, r1
 8005420:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4bc5      	ldr	r3, [pc, #788]	; (800573c <UART_SetConfig+0x384>)
 8005428:	429a      	cmp	r2, r3
 800542a:	d004      	beq.n	8005436 <UART_SetConfig+0x7e>
 800542c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4bc3      	ldr	r3, [pc, #780]	; (8005740 <UART_SetConfig+0x388>)
 8005432:	429a      	cmp	r2, r3
 8005434:	d103      	bne.n	800543e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005436:	f7fe f8ed 	bl	8003614 <HAL_RCC_GetPCLK2Freq>
 800543a:	6778      	str	r0, [r7, #116]	; 0x74
 800543c:	e002      	b.n	8005444 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800543e:	f7fe f8d5 	bl	80035ec <HAL_RCC_GetPCLK1Freq>
 8005442:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544c:	f040 80b6 	bne.w	80055bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005452:	461c      	mov	r4, r3
 8005454:	f04f 0500 	mov.w	r5, #0
 8005458:	4622      	mov	r2, r4
 800545a:	462b      	mov	r3, r5
 800545c:	1891      	adds	r1, r2, r2
 800545e:	6439      	str	r1, [r7, #64]	; 0x40
 8005460:	415b      	adcs	r3, r3
 8005462:	647b      	str	r3, [r7, #68]	; 0x44
 8005464:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005468:	1912      	adds	r2, r2, r4
 800546a:	eb45 0303 	adc.w	r3, r5, r3
 800546e:	f04f 0000 	mov.w	r0, #0
 8005472:	f04f 0100 	mov.w	r1, #0
 8005476:	00d9      	lsls	r1, r3, #3
 8005478:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800547c:	00d0      	lsls	r0, r2, #3
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	1911      	adds	r1, r2, r4
 8005484:	6639      	str	r1, [r7, #96]	; 0x60
 8005486:	416b      	adcs	r3, r5
 8005488:	667b      	str	r3, [r7, #100]	; 0x64
 800548a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	461a      	mov	r2, r3
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	1891      	adds	r1, r2, r2
 8005496:	63b9      	str	r1, [r7, #56]	; 0x38
 8005498:	415b      	adcs	r3, r3
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800549c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80054a4:	f7fa feae 	bl	8000204 <__aeabi_uldivmod>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4ba5      	ldr	r3, [pc, #660]	; (8005744 <UART_SetConfig+0x38c>)
 80054ae:	fba3 2302 	umull	r2, r3, r3, r2
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	011e      	lsls	r6, r3, #4
 80054b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b8:	461c      	mov	r4, r3
 80054ba:	f04f 0500 	mov.w	r5, #0
 80054be:	4622      	mov	r2, r4
 80054c0:	462b      	mov	r3, r5
 80054c2:	1891      	adds	r1, r2, r2
 80054c4:	6339      	str	r1, [r7, #48]	; 0x30
 80054c6:	415b      	adcs	r3, r3
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054ce:	1912      	adds	r2, r2, r4
 80054d0:	eb45 0303 	adc.w	r3, r5, r3
 80054d4:	f04f 0000 	mov.w	r0, #0
 80054d8:	f04f 0100 	mov.w	r1, #0
 80054dc:	00d9      	lsls	r1, r3, #3
 80054de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054e2:	00d0      	lsls	r0, r2, #3
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	1911      	adds	r1, r2, r4
 80054ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80054ec:	416b      	adcs	r3, r5
 80054ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	461a      	mov	r2, r3
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	1891      	adds	r1, r2, r2
 80054fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80054fe:	415b      	adcs	r3, r3
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005506:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800550a:	f7fa fe7b 	bl	8000204 <__aeabi_uldivmod>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4b8c      	ldr	r3, [pc, #560]	; (8005744 <UART_SetConfig+0x38c>)
 8005514:	fba3 1302 	umull	r1, r3, r3, r2
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	2164      	movs	r1, #100	; 0x64
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	3332      	adds	r3, #50	; 0x32
 8005526:	4a87      	ldr	r2, [pc, #540]	; (8005744 <UART_SetConfig+0x38c>)
 8005528:	fba2 2303 	umull	r2, r3, r2, r3
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005534:	441e      	add	r6, r3
 8005536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005538:	4618      	mov	r0, r3
 800553a:	f04f 0100 	mov.w	r1, #0
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	1894      	adds	r4, r2, r2
 8005544:	623c      	str	r4, [r7, #32]
 8005546:	415b      	adcs	r3, r3
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
 800554a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800554e:	1812      	adds	r2, r2, r0
 8005550:	eb41 0303 	adc.w	r3, r1, r3
 8005554:	f04f 0400 	mov.w	r4, #0
 8005558:	f04f 0500 	mov.w	r5, #0
 800555c:	00dd      	lsls	r5, r3, #3
 800555e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005562:	00d4      	lsls	r4, r2, #3
 8005564:	4622      	mov	r2, r4
 8005566:	462b      	mov	r3, r5
 8005568:	1814      	adds	r4, r2, r0
 800556a:	653c      	str	r4, [r7, #80]	; 0x50
 800556c:	414b      	adcs	r3, r1
 800556e:	657b      	str	r3, [r7, #84]	; 0x54
 8005570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	461a      	mov	r2, r3
 8005576:	f04f 0300 	mov.w	r3, #0
 800557a:	1891      	adds	r1, r2, r2
 800557c:	61b9      	str	r1, [r7, #24]
 800557e:	415b      	adcs	r3, r3
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005586:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800558a:	f7fa fe3b 	bl	8000204 <__aeabi_uldivmod>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4b6c      	ldr	r3, [pc, #432]	; (8005744 <UART_SetConfig+0x38c>)
 8005594:	fba3 1302 	umull	r1, r3, r3, r2
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	2164      	movs	r1, #100	; 0x64
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	3332      	adds	r3, #50	; 0x32
 80055a6:	4a67      	ldr	r2, [pc, #412]	; (8005744 <UART_SetConfig+0x38c>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	095b      	lsrs	r3, r3, #5
 80055ae:	f003 0207 	and.w	r2, r3, #7
 80055b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4432      	add	r2, r6
 80055b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055ba:	e0b9      	b.n	8005730 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055be:	461c      	mov	r4, r3
 80055c0:	f04f 0500 	mov.w	r5, #0
 80055c4:	4622      	mov	r2, r4
 80055c6:	462b      	mov	r3, r5
 80055c8:	1891      	adds	r1, r2, r2
 80055ca:	6139      	str	r1, [r7, #16]
 80055cc:	415b      	adcs	r3, r3
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055d4:	1912      	adds	r2, r2, r4
 80055d6:	eb45 0303 	adc.w	r3, r5, r3
 80055da:	f04f 0000 	mov.w	r0, #0
 80055de:	f04f 0100 	mov.w	r1, #0
 80055e2:	00d9      	lsls	r1, r3, #3
 80055e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055e8:	00d0      	lsls	r0, r2, #3
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	eb12 0804 	adds.w	r8, r2, r4
 80055f2:	eb43 0905 	adc.w	r9, r3, r5
 80055f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f04f 0100 	mov.w	r1, #0
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	008b      	lsls	r3, r1, #2
 800560a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800560e:	0082      	lsls	r2, r0, #2
 8005610:	4640      	mov	r0, r8
 8005612:	4649      	mov	r1, r9
 8005614:	f7fa fdf6 	bl	8000204 <__aeabi_uldivmod>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4b49      	ldr	r3, [pc, #292]	; (8005744 <UART_SetConfig+0x38c>)
 800561e:	fba3 2302 	umull	r2, r3, r3, r2
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	011e      	lsls	r6, r3, #4
 8005626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005628:	4618      	mov	r0, r3
 800562a:	f04f 0100 	mov.w	r1, #0
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	1894      	adds	r4, r2, r2
 8005634:	60bc      	str	r4, [r7, #8]
 8005636:	415b      	adcs	r3, r3
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800563e:	1812      	adds	r2, r2, r0
 8005640:	eb41 0303 	adc.w	r3, r1, r3
 8005644:	f04f 0400 	mov.w	r4, #0
 8005648:	f04f 0500 	mov.w	r5, #0
 800564c:	00dd      	lsls	r5, r3, #3
 800564e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005652:	00d4      	lsls	r4, r2, #3
 8005654:	4622      	mov	r2, r4
 8005656:	462b      	mov	r3, r5
 8005658:	1814      	adds	r4, r2, r0
 800565a:	64bc      	str	r4, [r7, #72]	; 0x48
 800565c:	414b      	adcs	r3, r1
 800565e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4618      	mov	r0, r3
 8005666:	f04f 0100 	mov.w	r1, #0
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	008b      	lsls	r3, r1, #2
 8005674:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005678:	0082      	lsls	r2, r0, #2
 800567a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800567e:	f7fa fdc1 	bl	8000204 <__aeabi_uldivmod>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4b2f      	ldr	r3, [pc, #188]	; (8005744 <UART_SetConfig+0x38c>)
 8005688:	fba3 1302 	umull	r1, r3, r3, r2
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	2164      	movs	r1, #100	; 0x64
 8005690:	fb01 f303 	mul.w	r3, r1, r3
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	3332      	adds	r3, #50	; 0x32
 800569a:	4a2a      	ldr	r2, [pc, #168]	; (8005744 <UART_SetConfig+0x38c>)
 800569c:	fba2 2303 	umull	r2, r3, r2, r3
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056a6:	441e      	add	r6, r3
 80056a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056aa:	4618      	mov	r0, r3
 80056ac:	f04f 0100 	mov.w	r1, #0
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	1894      	adds	r4, r2, r2
 80056b6:	603c      	str	r4, [r7, #0]
 80056b8:	415b      	adcs	r3, r3
 80056ba:	607b      	str	r3, [r7, #4]
 80056bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056c0:	1812      	adds	r2, r2, r0
 80056c2:	eb41 0303 	adc.w	r3, r1, r3
 80056c6:	f04f 0400 	mov.w	r4, #0
 80056ca:	f04f 0500 	mov.w	r5, #0
 80056ce:	00dd      	lsls	r5, r3, #3
 80056d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056d4:	00d4      	lsls	r4, r2, #3
 80056d6:	4622      	mov	r2, r4
 80056d8:	462b      	mov	r3, r5
 80056da:	eb12 0a00 	adds.w	sl, r2, r0
 80056de:	eb43 0b01 	adc.w	fp, r3, r1
 80056e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f04f 0100 	mov.w	r1, #0
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	008b      	lsls	r3, r1, #2
 80056f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056fa:	0082      	lsls	r2, r0, #2
 80056fc:	4650      	mov	r0, sl
 80056fe:	4659      	mov	r1, fp
 8005700:	f7fa fd80 	bl	8000204 <__aeabi_uldivmod>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <UART_SetConfig+0x38c>)
 800570a:	fba3 1302 	umull	r1, r3, r3, r2
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	2164      	movs	r1, #100	; 0x64
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	3332      	adds	r3, #50	; 0x32
 800571c:	4a09      	ldr	r2, [pc, #36]	; (8005744 <UART_SetConfig+0x38c>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	f003 020f 	and.w	r2, r3, #15
 8005728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4432      	add	r2, r6
 800572e:	609a      	str	r2, [r3, #8]
}
 8005730:	bf00      	nop
 8005732:	377c      	adds	r7, #124	; 0x7c
 8005734:	46bd      	mov	sp, r7
 8005736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573a:	bf00      	nop
 800573c:	40011000 	.word	0x40011000
 8005740:	40011400 	.word	0x40011400
 8005744:	51eb851f 	.word	0x51eb851f

08005748 <__libc_init_array>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	4d0d      	ldr	r5, [pc, #52]	; (8005780 <__libc_init_array+0x38>)
 800574c:	4c0d      	ldr	r4, [pc, #52]	; (8005784 <__libc_init_array+0x3c>)
 800574e:	1b64      	subs	r4, r4, r5
 8005750:	10a4      	asrs	r4, r4, #2
 8005752:	2600      	movs	r6, #0
 8005754:	42a6      	cmp	r6, r4
 8005756:	d109      	bne.n	800576c <__libc_init_array+0x24>
 8005758:	4d0b      	ldr	r5, [pc, #44]	; (8005788 <__libc_init_array+0x40>)
 800575a:	4c0c      	ldr	r4, [pc, #48]	; (800578c <__libc_init_array+0x44>)
 800575c:	f000 f820 	bl	80057a0 <_init>
 8005760:	1b64      	subs	r4, r4, r5
 8005762:	10a4      	asrs	r4, r4, #2
 8005764:	2600      	movs	r6, #0
 8005766:	42a6      	cmp	r6, r4
 8005768:	d105      	bne.n	8005776 <__libc_init_array+0x2e>
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005770:	4798      	blx	r3
 8005772:	3601      	adds	r6, #1
 8005774:	e7ee      	b.n	8005754 <__libc_init_array+0xc>
 8005776:	f855 3b04 	ldr.w	r3, [r5], #4
 800577a:	4798      	blx	r3
 800577c:	3601      	adds	r6, #1
 800577e:	e7f2      	b.n	8005766 <__libc_init_array+0x1e>
 8005780:	080057e0 	.word	0x080057e0
 8005784:	080057e0 	.word	0x080057e0
 8005788:	080057e0 	.word	0x080057e0
 800578c:	080057e4 	.word	0x080057e4

08005790 <memset>:
 8005790:	4402      	add	r2, r0
 8005792:	4603      	mov	r3, r0
 8005794:	4293      	cmp	r3, r2
 8005796:	d100      	bne.n	800579a <memset+0xa>
 8005798:	4770      	bx	lr
 800579a:	f803 1b01 	strb.w	r1, [r3], #1
 800579e:	e7f9      	b.n	8005794 <memset+0x4>

080057a0 <_init>:
 80057a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a2:	bf00      	nop
 80057a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a6:	bc08      	pop	{r3}
 80057a8:	469e      	mov	lr, r3
 80057aa:	4770      	bx	lr

080057ac <_fini>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	bf00      	nop
 80057b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b2:	bc08      	pop	{r3}
 80057b4:	469e      	mov	lr, r3
 80057b6:	4770      	bx	lr
