/*
 * app.c
 *
 *  Created on: Mar 11, 2023
 *      Author: UnknownSP
 */

#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include "app.h"

//static bool CheckSum(uint8_t* data, int length);
//static void CheckTouch(uint8_t* recvData, bool* setData);
//static void SetColorData(uint8_t* setArray, uint8_t setColorTouch[][3], uint8_t setColorBar[][3]);
static bool IO_Read(uint8_t sensor);

//初期化
int appInit(void){
	for(int i=0; i<32; i++){
		TouchThreshold[i] = 40;
	}
	for(int i=0; i<16; i++){
		SliderBarLEDData[i][0] = 128;
		SliderBarLEDData[i][1] = 00;
		SliderBarLEDData[i][2] = 128;
	}
	D_Slider_SetThreshold(TouchThreshold);
	return 0;
}

int appTask(void){

	static bool _firstSend = false;

	static bool _userButton = false;
	static uint32_t successCount = 0;

	static uint32_t recent_System_counter = 0;
	static uint32_t sndTime = 0;
	static uint32_t rcvTime = 0;

	static int retSnd = 0;
	static int retRcv = 0;

	sndTime += G_System_counter - recent_System_counter;
	rcvTime += G_System_counter - recent_System_counter;
	recent_System_counter = G_System_counter;

	//CAN送信タイミングなら送信
	if(sndTime >= CAN_SEND_INTERVAL){

		sndTime = 0;
	}

	if(rcvTime >= UART_RECEIVE_INTERVAL){
		sndData_UART[0] = 1;
		sndData_UART[1] = 2;
		sndData_UART[2] = 3;
		sndData_UART[3] = 4;
		sndData_UART[4] = 5;
		sndData_UART[5] = 6;
		sndData_UART[6] = 7;

		retSnd = D_Slider_Send(sndData_UART,8);
		retRcv = D_Slider_Receive(rcvData_UART,8);
		rcvTime = 0;
	}

	/*
	if(!_firstSend){
		_firstSend = true;
		controllerSendData[0] = 0xff;
		controllerSendData[1] = 0x03;
		controllerSendData[2] = 0x00;
		controllerSendData[3] = 0xfe;
		HAL_UART_Transmit(&huart1, (uint8_t*)controllerSendData, 4, 10);
	}
	*/

	//マイコンについてるボタンかスタートボタンが押されたらボール発射
	if(IO_READ_USERBUTTON() && _userButton){
		_userButton = false;
		//IO_SET_USERLED();
		//IO_SET_SHUTTER_SOL();
		//LED_SetBrightness(PWM_LED_1ST,1000);
		//LED_SetBrightness(PWM_LED_2ND,1000);
		//LED_SetBrightness(PWM_LED_3RD,1000);
		/*
		controllerSendData[0] = 0xff;
		controllerSendData[1] = 0x03;
		controllerSendData[2] = 0x00;
		controllerSendData[3] = 0xfe;
		HAL_UART_Transmit(&huart1, (uint8_t*)controllerSendData, 4, 10);

		controllerSendData[0] = 0xff;
		controllerSendData[1] = 0x02;
		controllerSendData[2] = 0x61;
		controllerSendData[3] = 0x3f;
		for(int i=0; i<31; i++){
			controllerSendData[i*3+4] = 0xee;
			controllerSendData[i*3+5] = 0x00;
			controllerSendData[i*3+6] = 0x00;
		}
		controllerSendData[97] = 0x00;
		controllerSendData[98] = 0x00;
		controllerSendData[99] = 0x00;
		uint8_t dataSum = 0;
		for(int i=0; i<100; i++){
			dataSum += controllerSendData[i];
		}
		int checkSum = 256 - (int)dataSum;
		controllerSendData[100] = (uint8_t)checkSum;
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)controllerSendData, 101);
		*/
	}
	if(!IO_READ_USERBUTTON()){
		_userButton = true;
	}

	//D_Slider_GetTouch((bool*)TouchSegment);
	for(int i=0; i<16; i++){
		SliderLEDData[i][0] = 0;
		SliderLEDData[i][1] = 0;
		SliderLEDData[i][2] = 0;
		if(TouchSegment[i*2] && TouchSegment[i*2 + 1]){
			SliderLEDData[i][0] = 0;
			SliderLEDData[i][1] = 254;
			SliderLEDData[i][2] = 0;
		}else if(TouchSegment[i*2]){
			SliderLEDData[i][0] = 254;
			SliderLEDData[i][1] = 0;
			SliderLEDData[i][2] = 0;
		}else if(TouchSegment[i*2 + 1]){
			SliderLEDData[i][0] = 0;
			SliderLEDData[i][1] = 0;
			SliderLEDData[i][2] = 254;
		}
	}
	//D_Slider_SetColorData(SliderLEDData, SliderBarLEDData);

	//D_USBHID_SetSendData((bool*)TouchSegment, (bool*)SideSegment);
	/*
	HAL_UART_Receive(&huart1, (uint8_t*)controllerRecvData, 36, 10);
	if(CheckSum((uint8_t*)controllerRecvData, 36) && controllerRecvData[0] != 0){
		successCount++;
		CheckTouch((uint8_t*)controllerRecvData, (bool*)TouchSegment);
		for(int i=0; i<16; i++){
			SliderLEDData[i][0] = 0;
			SliderLEDData[i][1] = 0;
			SliderLEDData[i][2] = 0;
			if(TouchSegment[i*2] && TouchSegment[i*2 + 1]){
				SliderLEDData[i][0] = 0;
				SliderLEDData[i][1] = 254;
				SliderLEDData[i][2] = 0;
			}else if(TouchSegment[i*2]){
				SliderLEDData[i][0] = 254;
				SliderLEDData[i][1] = 0;
				SliderLEDData[i][2] = 0;
			}else if(TouchSegment[i*2 + 1]){
				SliderLEDData[i][0] = 0;
				SliderLEDData[i][1] = 0;
				SliderLEDData[i][2] = 254;
			}
		}
		SetColorData((uint8_t*)controllerSendData, SliderLEDData, SliderBarLEDData);
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)controllerSendData, 101);
		D_USBHID_Send((bool*)TouchSegment, (bool*)SideSegment);
	}
	for(int i=0; i<100; i++){
		controllerRecvData[i] = 0;
	}
	*/
	/*
	bool _recv = false;
	for(int i=0; i<10; i++){
		if(controllerRecvData[i] != 0){
			_recv = true;
		}
		controllerRecvData[i] = 0;
	}
	if(_recv){
		IO_SET_USERLED();
	}else{
		IO_RESET_USERLED();
	}
	*/
	//testMode---------------------------------------------------

	//デバッグ用
	int16_t debug_bits = 0;
	debug_bits &= 0;
	/*
	debug_bits |= ((int)IO_READ_1ST_IN() << 0);
	debug_bits |= ((int)IO_READ_1ST_COLLECT() << 1);
	debug_bits |= ((int)IO_READ_1ST_SLOPE() << 2);
	debug_bits |= ((int)IO_READ_2ND_IN() << 3);
	debug_bits |= ((int)IO_READ_2ND_COLLECT() << 4);
	debug_bits |= ((int)IO_READ_2ND_SLOPE() << 5);
	debug_bits |= ((int)IO_READ_3RD_IN() << 6);
	debug_bits |= ((int)IO_READ_3RD_COLLECT() << 7);
	debug_bits |= ((int)IO_READ_3RD_SHUTTER() << 8);
	debug_bits |= ((int)IO_READ_L_MECHA() << 9);
	debug_bits |= ((int)IO_READ_L_BALLWAIT() << 10);
	debug_bits |= ((int)IO_READ_L_START() << 11);
	debug_bits |= ((int)IO_READ_L_BALLSUPPLY() << 12);
	*/
	D_Mess_printf("\033[1;1H");
	D_Mess_printf("%016b\n", debug_bits);
	D_Mess_printf("%10d\n", G_System_counter);
	D_Mess_printf("retSnd : %2d\n", retSnd);
	D_Mess_printf("retRcv : %2d\n", retRcv);
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", sndData_UART[0],sndData_UART[1],sndData_UART[2],sndData_UART[3],sndData_UART[4],sndData_UART[5],sndData_UART[6],sndData_UART[7]);
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", rcvData_UART[0],rcvData_UART[1],rcvData_UART[2],rcvData_UART[3],rcvData_UART[4],rcvData_UART[5],rcvData_UART[6],rcvData_UART[7]);

	//D_Mess_printf("%3d\n", successCount);
	/*
	for(int i=0; i<16; i++){
		D_Mess_printf("%1d ", (int)TouchSegment[i*2]);
	}
	D_Mess_printf("\n");
	for(int i=0; i<16; i++){
		D_Mess_printf("%1d ", (int)TouchSegment[i*2 + 1]);
	}
	D_Mess_printf("\n");
	*/
	//D_Mess_printf("%02d\n", errorHandle);
	//D_Mess_printf("%3d,%3d,%3d,%3d\n", sndData[0],sndData[1],sndData[2],sndData[3]);
	//D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d\n", rcvData[0],rcvData[1],rcvData[2],rcvData[3],rcvData[4],rcvData[5]);
	//D_Mess_printf("%02d\n", inPocket_1st);
	//D_Mess_printf("%02d\n", inPocket_2nd);
	//D_Mess_printf("%02d\n", inPocket_3rd);
	//D_Mess_printf("%08b\n", ownHold_Pocket);
	//D_Mess_printf("%08b\n", allHold_Pocket);
	//D_Mess_printf("processState: ,%2d\n", processState);
	//D_Mess_printf("PC: ,%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n",rcvData_UART[0],rcvData_UART[1],rcvData_UART[2],rcvData_UART[3],rcvData_UART[4],rcvData_UART[5],rcvData_UART[6],rcvData_UART[7]);

	return 0;
}

/*
static bool CheckSum(uint8_t* data, int length){
	uint8_t sum = 0;
	for(int i=0; i<length; i++){
		sum += data[i];
	}
	if(sum == 0){
		return true;
	}else{
		return false;
	}
}

static void CheckTouch(uint8_t* recvData, bool* setData){
	for(int i=0; i<32; i++){
		if(recvData[i+3] >= TouchThreshold[i]){
			setData[i] = true;
		}else{
			setData[i] = false;
		}
	}
}

static void SetColorData(uint8_t* setArray, uint8_t setColorTouch[][3], uint8_t setColorBar[][3]){
	setArray[0] = 0xff;
	setArray[1] = 0x02;
	setArray[2] = 0x61;
	setArray[3] = 0x3f;
	for(int i=0; i<16; i++){
		setArray[i*6 + 4] = (setColorTouch[i][2] != 255) ? setColorTouch[i][2] : 254;
		setArray[i*6 + 5] = (setColorTouch[i][0] != 255) ? setColorTouch[i][0] : 254;
		setArray[i*6 + 6] = (setColorTouch[i][1] != 255) ? setColorTouch[i][1] : 254;
		setArray[i*6 + 7] = (setColorBar[i][2] != 255) ? setColorBar[i][2] : 254;
		setArray[i*6 + 8] = (setColorBar[i][0] != 255) ? setColorBar[i][0] : 254;
		setArray[i*6 + 9] = (setColorBar[i][1] != 255) ? setColorBar[i][1] : 254;
	}
	setArray[97] = 0x00;
	setArray[98] = 0x00;
	setArray[99] = 0x00;
	uint8_t dataSum = 0;
	for(int i=0; i<100; i++){
		dataSum += setArray[i];
	}
	int checkSum = 256 - (int)dataSum;
	setArray[100] = (uint8_t)checkSum;
}
*/

static bool IO_Read(uint8_t sensor){
	static bool _io_State[14] = {false};
	static bool _io_returnState[14] = {false};
	static bool _io_recentState[14] = {false};
	static uint8_t io_Count[14] = {0};

	_io_State[IO_1ST_IN]		= IO_READ_1ST_IN();
	_io_State[IO_1ST_COLLECT]	= IO_READ_1ST_COLLECT();
	_io_State[IO_1ST_SLOPE]		= IO_READ_1ST_SLOPE();
	_io_State[IO_2ND_IN]		= IO_READ_2ND_IN();
	_io_State[IO_2ND_COLLECT]	= IO_READ_2ND_COLLECT();
	_io_State[IO_2ND_SLOPE]		= IO_READ_2ND_SLOPE();
	_io_State[IO_3RD_IN]		= IO_READ_3RD_IN();
	_io_State[IO_3RD_COLLECT]	= IO_READ_3RD_COLLECT();
	_io_State[IO_3RD_SHUTTER]	= IO_READ_3RD_SHUTTER();
	_io_State[IO_L_MECHA]		= IO_READ_L_MECHA();
	_io_State[IO_L_BALLWAIT]	= IO_READ_L_BALLWAIT(); 	
	_io_State[IO_L_START]		= IO_READ_L_START();
	_io_State[IO_L_BALLSUPPLY]	= IO_READ_L_BALLSUPPLY(); 
	_io_State[IO_SIG_1]			= IO_READ_SIG_1();

	for(int i=0; i<14; i++){
		if(_io_State[i] != _io_recentState[i]){
			io_Count[i]++;
		}else{
			io_Count[i] = 0;
		}
		if(io_Count[i] >= 5){
			_io_recentState[i] = _io_State[i];
			io_Count[i] = 0;
			_io_returnState[i] = _io_State[i];
		}
	}

	return _io_returnState[sensor];
}

