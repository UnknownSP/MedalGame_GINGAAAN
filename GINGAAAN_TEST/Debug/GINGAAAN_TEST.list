
GINGAAAN_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d90  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc8  08006fc8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fd0  08006fd0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fd4  08006fd4  00016fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000024  08006ffc  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000838  08006ffc  00020838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a045  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003031  00000000  00000000  0003a099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0003d0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  0003e0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bc4  00000000  00000000  0003ef98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001494d  00000000  00000000  00062b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d42fb  00000000  00000000  000774a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b7a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004448  00000000  00000000  0014b7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000024 	.word	0x20000024
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006f40 	.word	0x08006f40

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000028 	.word	0x20000028
 8000204:	08006f40 	.word	0x08006f40

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b18:	f000 b96e 	b.w	8000df8 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8083 	bne.w	8000c4a <__udivmoddi4+0x116>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d947      	bls.n	8000bda <__udivmoddi4+0xa6>
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b142      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	f1c2 0020 	rsb	r0, r2, #32
 8000b54:	fa24 f000 	lsr.w	r0, r4, r0
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	4097      	lsls	r7, r2
 8000b5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbbc f6f8 	udiv	r6, ip, r8
 8000b6c:	fa1f fe87 	uxth.w	lr, r7
 8000b70:	fb08 c116 	mls	r1, r8, r6, ip
 8000b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b78:	fb06 f10e 	mul.w	r1, r6, lr
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b86:	f080 8119 	bcs.w	8000dbc <__udivmoddi4+0x288>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8116 	bls.w	8000dbc <__udivmoddi4+0x288>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	443b      	add	r3, r7
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bb2:	f080 8105 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8102 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	2600      	movs	r6, #0
 8000bca:	b11d      	cbz	r5, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	b902      	cbnz	r2, 8000bde <__udivmoddi4+0xaa>
 8000bdc:	deff      	udf	#255	; 0xff
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d150      	bne.n	8000c88 <__udivmoddi4+0x154>
 8000be6:	1bcb      	subs	r3, r1, r7
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f f887 	uxth.w	r8, r7
 8000bf0:	2601      	movs	r6, #1
 8000bf2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf6:	0c21      	lsrs	r1, r4, #16
 8000bf8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c00:	fb08 f30c 	mul.w	r3, r8, ip
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000c08:	1879      	adds	r1, r7, r1
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0xe2>
 8000c10:	428b      	cmp	r3, r1
 8000c12:	f200 80e9 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x10c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x10a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80d9 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e7bf      	b.n	8000bca <__udivmoddi4+0x96>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x12e>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 80b1 	beq.w	8000db6 <__udivmoddi4+0x282>
 8000c54:	2600      	movs	r6, #0
 8000c56:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f683 	clz	r6, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d14a      	bne.n	8000d00 <__udivmoddi4+0x1cc>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0x140>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80b8 	bhi.w	8000de4 <__udivmoddi4+0x2b0>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0103 	sbc.w	r1, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0a8      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c90:	4097      	lsls	r7, r2
 8000c92:	fa01 f002 	lsl.w	r0, r1, r2
 8000c96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9a:	40d9      	lsrs	r1, r3
 8000c9c:	4330      	orrs	r0, r6
 8000c9e:	0c03      	lsrs	r3, r0, #16
 8000ca0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb06 f108 	mul.w	r1, r6, r8
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x19c>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cc2:	f080 808d 	bcs.w	8000de0 <__udivmoddi4+0x2ac>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 808a 	bls.w	8000de0 <__udivmoddi4+0x2ac>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	443b      	add	r3, r7
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b281      	uxth	r1, r0
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce0:	fb00 f308 	mul.w	r3, r0, r8
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ce8:	1879      	adds	r1, r7, r1
 8000cea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cee:	d273      	bcs.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d971      	bls.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4439      	add	r1, r7
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfe:	e778      	b.n	8000bf2 <__udivmoddi4+0xbe>
 8000d00:	f1c6 0c20 	rsb	ip, r6, #32
 8000d04:	fa03 f406 	lsl.w	r4, r3, r6
 8000d08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d12:	fa01 f306 	lsl.w	r3, r1, r6
 8000d16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fa1f f884 	uxth.w	r8, r4
 8000d2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d32:	fb09 fa08 	mul.w	sl, r9, r8
 8000d36:	458a      	cmp	sl, r1
 8000d38:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x220>
 8000d42:	1861      	adds	r1, r4, r1
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d48:	d248      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4a:	458a      	cmp	sl, r1
 8000d4c:	d946      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4421      	add	r1, r4
 8000d54:	eba1 010a 	sub.w	r1, r1, sl
 8000d58:	b2bf      	uxth	r7, r7
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d66:	fb00 f808 	mul.w	r8, r0, r8
 8000d6a:	45b8      	cmp	r8, r7
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x24a>
 8000d6e:	19e7      	adds	r7, r4, r7
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d22e      	bcs.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d76:	45b8      	cmp	r8, r7
 8000d78:	d92c      	bls.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4427      	add	r7, r4
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	eba7 0708 	sub.w	r7, r7, r8
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	454f      	cmp	r7, r9
 8000d8c:	46c6      	mov	lr, r8
 8000d8e:	4649      	mov	r1, r9
 8000d90:	d31a      	bcc.n	8000dc8 <__udivmoddi4+0x294>
 8000d92:	d017      	beq.n	8000dc4 <__udivmoddi4+0x290>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x27a>
 8000d96:	ebb3 020e 	subs.w	r2, r3, lr
 8000d9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000da2:	40f2      	lsrs	r2, r6
 8000da4:	ea4c 0202 	orr.w	r2, ip, r2
 8000da8:	40f7      	lsrs	r7, r6
 8000daa:	e9c5 2700 	strd	r2, r7, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	462e      	mov	r6, r5
 8000db8:	4628      	mov	r0, r5
 8000dba:	e70b      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fd      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc4:	4543      	cmp	r3, r8
 8000dc6:	d2e5      	bcs.n	8000d94 <__udivmoddi4+0x260>
 8000dc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	e7df      	b.n	8000d94 <__udivmoddi4+0x260>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e7d2      	b.n	8000d7e <__udivmoddi4+0x24a>
 8000dd8:	4660      	mov	r0, ip
 8000dda:	e78d      	b.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ddc:	4681      	mov	r9, r0
 8000dde:	e7b9      	b.n	8000d54 <__udivmoddi4+0x220>
 8000de0:	4666      	mov	r6, ip
 8000de2:	e775      	b.n	8000cd0 <__udivmoddi4+0x19c>
 8000de4:	4630      	mov	r0, r6
 8000de6:	e74a      	b.n	8000c7e <__udivmoddi4+0x14a>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	4439      	add	r1, r7
 8000dee:	e713      	b.n	8000c18 <__udivmoddi4+0xe4>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443c      	add	r4, r7
 8000df4:	e724      	b.n	8000c40 <__udivmoddi4+0x10c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <appInit>:

static int SM_CalSpeed(int targetSpeed);
static int SM_CalSpeedFunc(int nowPos, int minSpeed, int maxSpeed);
static int SM1st_SetSpeed(int speed, int dir);
//初期化
int appInit(void){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
	//D_CAN_SetReceiveAddress(8,9,10,11);
	D_CAN_SetReceiveAddressAll();
 8000e02:	f001 fb09 	bl	8002418 <D_CAN_SetReceiveAddressAll>
	for(int i=0; i<8; i++){
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	e01b      	b.n	8000e44 <appInit+0x48>
		for(int j=0; j<4; j++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	e012      	b.n	8000e38 <appInit+0x3c>
			rcvData[j][i] = 0;
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <appInit+0x58>)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	441a      	add	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
			sndData[j][i] = 0;
 8000e22:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <appInit+0x5c>)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	441a      	add	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<4; j++){
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	dde9      	ble.n	8000e12 <appInit+0x16>
	for(int i=0; i<8; i++){
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3301      	adds	r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b07      	cmp	r3, #7
 8000e48:	dde0      	ble.n	8000e0c <appInit+0x10>
		}
	}
	return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000060 	.word	0x20000060
 8000e58:	20000040 	.word	0x20000040

08000e5c <appTask>:

int appTask(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
	static uint8_t StepSpeed[19] = {
		//66,73,79,80,83,85,88,91,94, 96, 95,94,93,91,88,84,79,73,66
		66,73,79,80,83,85,88,91,94, 96, 94,91,88,85,83,80,79,73,66
	};

	for(int i=0; i<4; i++){
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e070      	b.n	8000f4a <appTask+0xee>
		sndData[i][0] = testSendData;
 8000e68:	4b9f      	ldr	r3, [pc, #636]	; (80010e8 <appTask+0x28c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	b2d9      	uxtb	r1, r3
 8000e6e:	4a9f      	ldr	r2, [pc, #636]	; (80010ec <appTask+0x290>)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		sndData[i][1] = testSendData;
 8000e76:	4b9c      	ldr	r3, [pc, #624]	; (80010e8 <appTask+0x28c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	b2d9      	uxtb	r1, r3
 8000e7c:	4a9b      	ldr	r2, [pc, #620]	; (80010ec <appTask+0x290>)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4413      	add	r3, r2
 8000e84:	460a      	mov	r2, r1
 8000e86:	705a      	strb	r2, [r3, #1]
		sndData[i][2] = testSendData;
 8000e88:	4b97      	ldr	r3, [pc, #604]	; (80010e8 <appTask+0x28c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	b2d9      	uxtb	r1, r3
 8000e8e:	4a97      	ldr	r2, [pc, #604]	; (80010ec <appTask+0x290>)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	4413      	add	r3, r2
 8000e96:	460a      	mov	r2, r1
 8000e98:	709a      	strb	r2, [r3, #2]
		sndData[i][3] = testSendData;
 8000e9a:	4b93      	ldr	r3, [pc, #588]	; (80010e8 <appTask+0x28c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	b2d9      	uxtb	r1, r3
 8000ea0:	4a92      	ldr	r2, [pc, #584]	; (80010ec <appTask+0x290>)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	70da      	strb	r2, [r3, #3]
		sndData[i][4] = testSendData;
 8000eac:	4b8e      	ldr	r3, [pc, #568]	; (80010e8 <appTask+0x28c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	b2d9      	uxtb	r1, r3
 8000eb2:	4a8e      	ldr	r2, [pc, #568]	; (80010ec <appTask+0x290>)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4413      	add	r3, r2
 8000eba:	460a      	mov	r2, r1
 8000ebc:	711a      	strb	r2, [r3, #4]
		sndData[i][5] = testSendData;
 8000ebe:	4b8a      	ldr	r3, [pc, #552]	; (80010e8 <appTask+0x28c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	b2d9      	uxtb	r1, r3
 8000ec4:	4a89      	ldr	r2, [pc, #548]	; (80010ec <appTask+0x290>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	4413      	add	r3, r2
 8000ecc:	460a      	mov	r2, r1
 8000ece:	715a      	strb	r2, [r3, #5]
		sndData[i][6] = testSendData;
 8000ed0:	4b85      	ldr	r3, [pc, #532]	; (80010e8 <appTask+0x28c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	b2d9      	uxtb	r1, r3
 8000ed6:	4a85      	ldr	r2, [pc, #532]	; (80010ec <appTask+0x290>)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4413      	add	r3, r2
 8000ede:	460a      	mov	r2, r1
 8000ee0:	719a      	strb	r2, [r3, #6]
		sndData[i][7] = testSendData;
 8000ee2:	4b81      	ldr	r3, [pc, #516]	; (80010e8 <appTask+0x28c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	b2d9      	uxtb	r1, r3
 8000ee8:	4a80      	ldr	r2, [pc, #512]	; (80010ec <appTask+0x290>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	4413      	add	r3, r2
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71da      	strb	r2, [r3, #7]
		uint8_t dataSum = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	74fb      	strb	r3, [r7, #19]
		for(int j=0; j<sendLength-1; j++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e00c      	b.n	8000f18 <appTask+0xbc>
			dataSum += sndData[i][j];
 8000efe:	4a7b      	ldr	r2, [pc, #492]	; (80010ec <appTask+0x290>)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	441a      	add	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	7cfb      	ldrb	r3, [r7, #19]
 8000f0e:	4413      	add	r3, r2
 8000f10:	74fb      	strb	r3, [r7, #19]
		for(int j=0; j<sendLength-1; j++){
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	4b75      	ldr	r3, [pc, #468]	; (80010f0 <appTask+0x294>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbec      	blt.n	8000efe <appTask+0xa2>
		}
		int checkSum = 256 - (int)dataSum;
 8000f24:	7cfb      	ldrb	r3, [r7, #19]
 8000f26:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000f2a:	603b      	str	r3, [r7, #0]
		sndData[i][sendLength-1] = (uint8_t)checkSum;
 8000f2c:	4b70      	ldr	r3, [pc, #448]	; (80010f0 <appTask+0x294>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	b2d0      	uxtb	r0, r2
 8000f36:	496d      	ldr	r1, [pc, #436]	; (80010ec <appTask+0x290>)
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	00d2      	lsls	r2, r2, #3
 8000f3c:	440a      	add	r2, r1
 8000f3e:	4413      	add	r3, r2
 8000f40:	4602      	mov	r2, r0
 8000f42:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4; i++){
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3301      	adds	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	dd8b      	ble.n	8000e68 <appTask+0xc>
	}

	//SMsndTime += G_System_MicroCounter - recent_System_counter;
	sndTime += G_System_MicroCounter - recent_System_counter;
 8000f50:	4b68      	ldr	r3, [pc, #416]	; (80010f4 <appTask+0x298>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <appTask+0x29c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	1ad2      	subs	r2, r2, r3
 8000f5a:	4b68      	ldr	r3, [pc, #416]	; (80010fc <appTask+0x2a0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a66      	ldr	r2, [pc, #408]	; (80010fc <appTask+0x2a0>)
 8000f62:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_MicroCounter;
 8000f64:	4b63      	ldr	r3, [pc, #396]	; (80010f4 <appTask+0x298>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a63      	ldr	r2, [pc, #396]	; (80010f8 <appTask+0x29c>)
 8000f6a:	6013      	str	r3, [r2, #0]
	//CAN送信タイミングの場合送信
	if(sndTime >= CAN_SEND_INTERVAL){
 8000f6c:	4b63      	ldr	r3, [pc, #396]	; (80010fc <appTask+0x2a0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2bc7      	cmp	r3, #199	; 0xc7
 8000f72:	d927      	bls.n	8000fc4 <appTask+0x168>
		//errorHandle = D_CAN_Transmit(ownIdCount,sndData[0],sendLength);
		sndTime = 0;
 8000f74:	4b61      	ldr	r3, [pc, #388]	; (80010fc <appTask+0x2a0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
		count1++;
 8000f7a:	4b61      	ldr	r3, [pc, #388]	; (8001100 <appTask+0x2a4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a5f      	ldr	r2, [pc, #380]	; (8001100 <appTask+0x2a4>)
 8000f82:	6013      	str	r3, [r2, #0]
		if(count1 >= 1 && errorHandle == 0){
 8000f84:	4b5e      	ldr	r3, [pc, #376]	; (8001100 <appTask+0x2a4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	dd0b      	ble.n	8000fa4 <appTask+0x148>
 8000f8c:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <appTask+0x2a8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d107      	bne.n	8000fa4 <appTask+0x148>
			count1 = 0;
 8000f94:	4b5a      	ldr	r3, [pc, #360]	; (8001100 <appTask+0x2a4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
			testSendData++;
 8000f9a:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <appTask+0x28c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a51      	ldr	r2, [pc, #324]	; (80010e8 <appTask+0x28c>)
 8000fa2:	6013      	str	r3, [r2, #0]
		}
		if(testSendData >= 256 && errorHandle == 0){
 8000fa4:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <appTask+0x28c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2bff      	cmp	r3, #255	; 0xff
 8000faa:	dd0b      	ble.n	8000fc4 <appTask+0x168>
 8000fac:	4b55      	ldr	r3, [pc, #340]	; (8001104 <appTask+0x2a8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d107      	bne.n	8000fc4 <appTask+0x168>
			testSendData = 0;
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <appTask+0x28c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
			ownIdCount++;
 8000fba:	4b53      	ldr	r3, [pc, #332]	; (8001108 <appTask+0x2ac>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	4a51      	ldr	r2, [pc, #324]	; (8001108 <appTask+0x2ac>)
 8000fc2:	6013      	str	r3, [r2, #0]
			ownIdCount++;
		}
		*/
	}
	//CAN受信処理
	D_CAN_Receive(0,rcvData[0],receiveLength);
 8000fc4:	4b51      	ldr	r3, [pc, #324]	; (800110c <appTask+0x2b0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4950      	ldr	r1, [pc, #320]	; (8001110 <appTask+0x2b4>)
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f001 fa54 	bl	800247c <D_CAN_Receive>
	D_CAN_Receive(1,rcvData[1],receiveLength);
 8000fd4:	4b4d      	ldr	r3, [pc, #308]	; (800110c <appTask+0x2b0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	494d      	ldr	r1, [pc, #308]	; (8001114 <appTask+0x2b8>)
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f001 fa4c 	bl	800247c <D_CAN_Receive>

	static int upCount = 0;
	static int speed = 70;
	static int speedCoeff = 1;
	static bool _ChangeSpeedCoeff = false;
	upCount++;
 8000fe4:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <appTask+0x2bc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	4a4b      	ldr	r2, [pc, #300]	; (8001118 <appTask+0x2bc>)
 8000fec:	6013      	str	r3, [r2, #0]
	if(upCount >= 200){
 8000fee:	4b4a      	ldr	r3, [pc, #296]	; (8001118 <appTask+0x2bc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2bc7      	cmp	r3, #199	; 0xc7
 8000ff4:	dd09      	ble.n	800100a <appTask+0x1ae>
		upCount = 0;
 8000ff6:	4b48      	ldr	r3, [pc, #288]	; (8001118 <appTask+0x2bc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
		speed += speedCoeff;
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <appTask+0x2c0>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b47      	ldr	r3, [pc, #284]	; (8001120 <appTask+0x2c4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4413      	add	r3, r2
 8001006:	4a45      	ldr	r2, [pc, #276]	; (800111c <appTask+0x2c0>)
 8001008:	6013      	str	r3, [r2, #0]
	}
	if(IO_READ_SM_R() || IO_READ_SM_L()){
 800100a:	2101      	movs	r1, #1
 800100c:	4845      	ldr	r0, [pc, #276]	; (8001124 <appTask+0x2c8>)
 800100e:	f001 fb17 	bl	8002640 <D_GPIO_Read>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d106      	bne.n	8001026 <appTask+0x1ca>
 8001018:	2102      	movs	r1, #2
 800101a:	4842      	ldr	r0, [pc, #264]	; (8001124 <appTask+0x2c8>)
 800101c:	f001 fb10 	bl	8002640 <D_GPIO_Read>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d005      	beq.n	8001032 <appTask+0x1d6>
		_ChangeSpeedCoeff = true;
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <appTask+0x2cc>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
		speedCoeff = 1;
 800102c:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <appTask+0x2c4>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
	}
	if(IO_READ_SM_C() && _ChangeSpeedCoeff){
 8001032:	2104      	movs	r1, #4
 8001034:	483b      	ldr	r0, [pc, #236]	; (8001124 <appTask+0x2c8>)
 8001036:	f001 fb03 	bl	8002640 <D_GPIO_Read>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00a      	beq.n	8001056 <appTask+0x1fa>
 8001040:	4b39      	ldr	r3, [pc, #228]	; (8001128 <appTask+0x2cc>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <appTask+0x1fa>
		_ChangeSpeedCoeff = false;
 8001048:	4b37      	ldr	r3, [pc, #220]	; (8001128 <appTask+0x2cc>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
		speedCoeff = -1;
 800104e:	4b34      	ldr	r3, [pc, #208]	; (8001120 <appTask+0x2c4>)
 8001050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001054:	601a      	str	r2, [r3, #0]
	}
	if(speed >= 90) speed = 90;
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <appTask+0x2c0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b59      	cmp	r3, #89	; 0x59
 800105c:	dd02      	ble.n	8001064 <appTask+0x208>
 800105e:	4b2f      	ldr	r3, [pc, #188]	; (800111c <appTask+0x2c0>)
 8001060:	225a      	movs	r2, #90	; 0x5a
 8001062:	601a      	str	r2, [r3, #0]
	if(speed < 70) speed = 70;
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <appTask+0x2c0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b45      	cmp	r3, #69	; 0x45
 800106a:	dc02      	bgt.n	8001072 <appTask+0x216>
 800106c:	4b2b      	ldr	r3, [pc, #172]	; (800111c <appTask+0x2c0>)
 800106e:	2246      	movs	r2, #70	; 0x46
 8001070:	601a      	str	r2, [r3, #0]

	static int step = 0;
	//speed = SM_CalSpeed(StepSpeed[(int)(step / 100)]);
	speed = SM_CalSpeedFunc(step,40,90);
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <appTask+0x2d0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	225a      	movs	r2, #90	; 0x5a
 8001078:	2128      	movs	r1, #40	; 0x28
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f8bc 	bl	80011f8 <SM_CalSpeedFunc>
 8001080:	4603      	mov	r3, r0
 8001082:	4a26      	ldr	r2, [pc, #152]	; (800111c <appTask+0x2c0>)
 8001084:	6013      	str	r3, [r2, #0]
	step = SM1st_SetSpeed(speed,1);
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <appTask+0x2c0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2101      	movs	r1, #1
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f9f1 	bl	8001474 <SM1st_SetSpeed>
 8001092:	4603      	mov	r3, r0
 8001094:	4a25      	ldr	r2, [pc, #148]	; (800112c <appTask+0x2d0>)
 8001096:	6013      	str	r3, [r2, #0]

	//D_Mess_printf("%d\n", G_System_counter);
	//D_PWM_Set(1,100);
	//D_PWM_Set(2,100);
	//IO_SET_BLDC2_DIR();
	if(IO_READ_USERBUTTON()){
 8001098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109c:	4821      	ldr	r0, [pc, #132]	; (8001124 <appTask+0x2c8>)
 800109e:	f001 facf 	bl	8002640 <D_GPIO_Read>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f083 0301 	eor.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d051      	beq.n	8001152 <appTask+0x2f6>
		IO_SET_USERLED();
 80010ae:	2120      	movs	r1, #32
 80010b0:	481f      	ldr	r0, [pc, #124]	; (8001130 <appTask+0x2d4>)
 80010b2:	f001 faa5 	bl	8002600 <D_GPIO_Set>
		if(_userButton){
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <appTask+0x2d8>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d050      	beq.n	8001160 <appTask+0x304>
			_userButton = false;
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <appTask+0x2d8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
			testSendData += 1;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <appTask+0x28c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <appTask+0x28c>)
 80010cc:	6013      	str	r3, [r2, #0]
			if(_StepEna){
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <appTask+0x2dc>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d034      	beq.n	8001140 <appTask+0x2e4>
				IO_SET_ENA();
 80010d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010da:	4818      	ldr	r0, [pc, #96]	; (800113c <appTask+0x2e0>)
 80010dc:	f001 fa90 	bl	8002600 <D_GPIO_Set>
				_StepEna = false;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <appTask+0x2dc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e03b      	b.n	8001160 <appTask+0x304>
 80010e8:	20000088 	.word	0x20000088
 80010ec:	20000040 	.word	0x20000040
 80010f0:	20000000 	.word	0x20000000
 80010f4:	200000cc 	.word	0x200000cc
 80010f8:	2000008c 	.word	0x2000008c
 80010fc:	20000090 	.word	0x20000090
 8001100:	20000094 	.word	0x20000094
 8001104:	20000098 	.word	0x20000098
 8001108:	2000009c 	.word	0x2000009c
 800110c:	20000004 	.word	0x20000004
 8001110:	20000060 	.word	0x20000060
 8001114:	20000068 	.word	0x20000068
 8001118:	200000a0 	.word	0x200000a0
 800111c:	20000008 	.word	0x20000008
 8001120:	2000000c 	.word	0x2000000c
 8001124:	40020800 	.word	0x40020800
 8001128:	200000a4 	.word	0x200000a4
 800112c:	200000a8 	.word	0x200000a8
 8001130:	40020000 	.word	0x40020000
 8001134:	200000ac 	.word	0x200000ac
 8001138:	200000ad 	.word	0x200000ad
 800113c:	40020400 	.word	0x40020400
			}else{
				IO_RESET_ENA();
 8001140:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001144:	4825      	ldr	r0, [pc, #148]	; (80011dc <appTask+0x380>)
 8001146:	f001 fa6b 	bl	8002620 <D_GPIO_Reset>
				_StepEna = true;
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <appTask+0x384>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e006      	b.n	8001160 <appTask+0x304>
		//Lottery_JP_SetSpeed(JPC_MAX_SPEED,0);

		//IO_SET_ROOMLIGHT();
		//JP_Lift_Down();
	}else{
		_userButton = true;
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <appTask+0x388>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
		IO_RESET_USERLED();
 8001158:	2120      	movs	r1, #32
 800115a:	4823      	ldr	r0, [pc, #140]	; (80011e8 <appTask+0x38c>)
 800115c:	f001 fa60 	bl	8002620 <D_GPIO_Reset>
		//D_PWM_Set(BLDC2,3000);
		//D_PWM_Set(BLDC3,3500);
		//JP_Lift_Up();
	}

	for(int i=0; i<8; i++){
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	e011      	b.n	800118a <appTask+0x32e>
		if(rcvData[0][i] != 0) rcvDataJudge[i] = rcvData[0][i];
 8001166:	4a21      	ldr	r2, [pc, #132]	; (80011ec <appTask+0x390>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d008      	beq.n	8001184 <appTask+0x328>
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <appTask+0x390>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4413      	add	r3, r2
 8001178:	7819      	ldrb	r1, [r3, #0]
 800117a:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <appTask+0x394>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4413      	add	r3, r2
 8001180:	460a      	mov	r2, r1
 8001182:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<8; i++){
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	3301      	adds	r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b07      	cmp	r3, #7
 800118e:	ddea      	ble.n	8001166 <appTask+0x30a>
	}
	//デバッグ用
	int16_t debug_bits = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	80fb      	strh	r3, [r7, #6]
	debug_bits &= 0;
 8001194:	2300      	movs	r3, #0
 8001196:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_SM_R() << 2);
 8001198:	2101      	movs	r1, #1
 800119a:	4816      	ldr	r0, [pc, #88]	; (80011f4 <appTask+0x398>)
 800119c:	f001 fa50 	bl	8002640 <D_GPIO_Read>
 80011a0:	4603      	mov	r3, r0
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_SM_C() << 1);
 80011ac:	2104      	movs	r1, #4
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <appTask+0x398>)
 80011b0:	f001 fa46 	bl	8002640 <D_GPIO_Read>
 80011b4:	4603      	mov	r3, r0
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	4313      	orrs	r3, r2
 80011be:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_SM_L() << 0);
 80011c0:	2102      	movs	r1, #2
 80011c2:	480c      	ldr	r0, [pc, #48]	; (80011f4 <appTask+0x398>)
 80011c4:	f001 fa3c 	bl	8002640 <D_GPIO_Read>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	80fb      	strh	r3, [r7, #6]
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", rcvData[0][0],rcvData[0][1],rcvData[0][2],rcvData[0][3],rcvData[0][4],rcvData[0][5],rcvData[0][6],rcvData[0][7]);
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", rcvDataJudge[0],rcvDataJudge[1],rcvDataJudge[2],rcvDataJudge[3],rcvDataJudge[4],rcvDataJudge[5],rcvDataJudge[6],rcvDataJudge[7]);
	D_Mess_printf("id : %3d, err : %3d\n", rcvData[1][0],rcvData[1][1]);
	*/

	return 0;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40020400 	.word	0x40020400
 80011e0:	200000ad 	.word	0x200000ad
 80011e4:	200000ac 	.word	0x200000ac
 80011e8:	40020000 	.word	0x40020000
 80011ec:	20000060 	.word	0x20000060
 80011f0:	20000080 	.word	0x20000080
 80011f4:	40020800 	.word	0x40020800

080011f8 <SM_CalSpeedFunc>:
	}
	recentTargetSpeed = targetSpeed;
	return nowSpeed;
}

static int SM_CalSpeedFunc(int nowPos, int minSpeed, int maxSpeed){
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	61f8      	str	r0, [r7, #28]
 8001200:	61b9      	str	r1, [r7, #24]
 8001202:	617a      	str	r2, [r7, #20]
	double stepHalf = SM_STEPCOUNT / 2.0;
 8001204:	a399      	add	r3, pc, #612	; (adr r3, 800146c <SM_CalSpeedFunc+0x274>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double x = ((double)nowPos-stepHalf) / stepHalf;
 800120e:	69f8      	ldr	r0, [r7, #28]
 8001210:	f7ff f94c 	bl	80004ac <__aeabi_i2d>
 8001214:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001218:	f7fe fffa 	bl	8000210 <__aeabi_dsub>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001228:	f7ff fad4 	bl	80007d4 <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if (x > 1.0) x = 1.0;
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b83      	ldr	r3, [pc, #524]	; (8001448 <SM_CalSpeedFunc+0x250>)
 800123a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800123e:	f7ff fc2f 	bl	8000aa0 <__aeabi_dcmpgt>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d004      	beq.n	8001252 <SM_CalSpeedFunc+0x5a>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b7e      	ldr	r3, [pc, #504]	; (8001448 <SM_CalSpeedFunc+0x250>)
 800124e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if (x < -1.0) x = -1.0;
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b7d      	ldr	r3, [pc, #500]	; (800144c <SM_CalSpeedFunc+0x254>)
 8001258:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800125c:	f7ff fc02 	bl	8000a64 <__aeabi_dcmplt>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d004      	beq.n	8001270 <SM_CalSpeedFunc+0x78>
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	4b78      	ldr	r3, [pc, #480]	; (800144c <SM_CalSpeedFunc+0x254>)
 800126c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double y = -x*x + 1.0;
 8001270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001276:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001280:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001284:	f7ff f97c 	bl	8000580 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	4b6c      	ldr	r3, [pc, #432]	; (8001448 <SM_CalSpeedFunc+0x250>)
 8001296:	f7fe ffbd 	bl	8000214 <__adddf3>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double edgeVal = 0.93;
 80012a2:	a365      	add	r3, pc, #404	; (adr r3, 8001438 <SM_CalSpeedFunc+0x240>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double offsetSpeed = 15;
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b67      	ldr	r3, [pc, #412]	; (8001450 <SM_CalSpeedFunc+0x258>)
 80012b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double stopTime = 1500;
 80012b6:	a362      	add	r3, pc, #392	; (adr r3, 8001440 <SM_CalSpeedFunc+0x248>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	static bool _stop = false;
	static bool _stopEna = true;
	static int stopCount = 0;
	if (_stopEna && (IO_READ_SM_R() || IO_READ_SM_L())){
 80012c0:	4b64      	ldr	r3, [pc, #400]	; (8001454 <SM_CalSpeedFunc+0x25c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <SM_CalSpeedFunc+0xf8>
 80012c8:	2101      	movs	r1, #1
 80012ca:	4863      	ldr	r0, [pc, #396]	; (8001458 <SM_CalSpeedFunc+0x260>)
 80012cc:	f001 f9b8 	bl	8002640 <D_GPIO_Read>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d106      	bne.n	80012e4 <SM_CalSpeedFunc+0xec>
 80012d6:	2102      	movs	r1, #2
 80012d8:	485f      	ldr	r0, [pc, #380]	; (8001458 <SM_CalSpeedFunc+0x260>)
 80012da:	f001 f9b1 	bl	8002640 <D_GPIO_Read>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <SM_CalSpeedFunc+0xf8>
		_stopEna = false;
 80012e4:	4b5b      	ldr	r3, [pc, #364]	; (8001454 <SM_CalSpeedFunc+0x25c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
		_stop = true;
 80012ea:	4b5c      	ldr	r3, [pc, #368]	; (800145c <SM_CalSpeedFunc+0x264>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
	}
	if(_stop){
 80012f0:	4b5a      	ldr	r3, [pc, #360]	; (800145c <SM_CalSpeedFunc+0x264>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01b      	beq.n	8001330 <SM_CalSpeedFunc+0x138>
		stopCount++;
 80012f8:	4b59      	ldr	r3, [pc, #356]	; (8001460 <SM_CalSpeedFunc+0x268>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a58      	ldr	r2, [pc, #352]	; (8001460 <SM_CalSpeedFunc+0x268>)
 8001300:	6013      	str	r3, [r2, #0]
		if(stopCount >= stopTime){
 8001302:	4b57      	ldr	r3, [pc, #348]	; (8001460 <SM_CalSpeedFunc+0x268>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f8d0 	bl	80004ac <__aeabi_i2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001314:	f7ff fbb0 	bl	8000a78 <__aeabi_dcmple>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <SM_CalSpeedFunc+0x134>
			_stop = false;
 800131e:	4b4f      	ldr	r3, [pc, #316]	; (800145c <SM_CalSpeedFunc+0x264>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
			stopCount = 0;
 8001324:	4b4e      	ldr	r3, [pc, #312]	; (8001460 <SM_CalSpeedFunc+0x268>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e001      	b.n	8001330 <SM_CalSpeedFunc+0x138>
		}else{
			return 0;
 800132c:	2300      	movs	r3, #0
 800132e:	e07e      	b.n	800142e <SM_CalSpeedFunc+0x236>
		}
	}
	if (x >= -0.5 && x <= 0.5) _stopEna = true;
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b4b      	ldr	r3, [pc, #300]	; (8001464 <SM_CalSpeedFunc+0x26c>)
 8001336:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800133a:	f7ff fba7 	bl	8000a8c <__aeabi_dcmpge>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00c      	beq.n	800135e <SM_CalSpeedFunc+0x166>
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b47      	ldr	r3, [pc, #284]	; (8001468 <SM_CalSpeedFunc+0x270>)
 800134a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800134e:	f7ff fb93 	bl	8000a78 <__aeabi_dcmple>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <SM_CalSpeedFunc+0x166>
 8001358:	4b3e      	ldr	r3, [pc, #248]	; (8001454 <SM_CalSpeedFunc+0x25c>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
	if (x <= -edgeVal || x >= edgeVal){
 800135e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001364:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800136e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001372:	f7ff fb81 	bl	8000a78 <__aeabi_dcmple>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d108      	bne.n	800138e <SM_CalSpeedFunc+0x196>
 800137c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001380:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001384:	f7ff fb82 	bl	8000a8c <__aeabi_dcmpge>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d03c      	beq.n	8001408 <SM_CalSpeedFunc+0x210>
		return ((1.0 - fabs(x)) / (1.0 - edgeVal)) * (minSpeed - offsetSpeed) + offsetSpeed;
 800138e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001392:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001396:	4622      	mov	r2, r4
 8001398:	462b      	mov	r3, r5
 800139a:	f04f 0000 	mov.w	r0, #0
 800139e:	492a      	ldr	r1, [pc, #168]	; (8001448 <SM_CalSpeedFunc+0x250>)
 80013a0:	f7fe ff36 	bl	8000210 <__aeabi_dsub>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	461d      	mov	r5, r3
 80013ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013b0:	f04f 0000 	mov.w	r0, #0
 80013b4:	4924      	ldr	r1, [pc, #144]	; (8001448 <SM_CalSpeedFunc+0x250>)
 80013b6:	f7fe ff2b 	bl	8000210 <__aeabi_dsub>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4620      	mov	r0, r4
 80013c0:	4629      	mov	r1, r5
 80013c2:	f7ff fa07 	bl	80007d4 <__aeabi_ddiv>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4614      	mov	r4, r2
 80013cc:	461d      	mov	r5, r3
 80013ce:	69b8      	ldr	r0, [r7, #24]
 80013d0:	f7ff f86c 	bl	80004ac <__aeabi_i2d>
 80013d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013d8:	f7fe ff1a 	bl	8000210 <__aeabi_dsub>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4620      	mov	r0, r4
 80013e2:	4629      	mov	r1, r5
 80013e4:	f7ff f8cc 	bl	8000580 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013f4:	f7fe ff0e 	bl	8000214 <__adddf3>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fb58 	bl	8000ab4 <__aeabi_d2iz>
 8001404:	4603      	mov	r3, r0
 8001406:	e012      	b.n	800142e <SM_CalSpeedFunc+0x236>
	}
	return minSpeed + (int)((double)(maxSpeed-minSpeed) * y);
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f84c 	bl	80004ac <__aeabi_i2d>
 8001414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001418:	f7ff f8b2 	bl	8000580 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fb46 	bl	8000ab4 <__aeabi_d2iz>
 8001428:	4602      	mov	r2, r0
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4413      	add	r3, r2
}
 800142e:	4618      	mov	r0, r3
 8001430:	3750      	adds	r7, #80	; 0x50
 8001432:	46bd      	mov	sp, r7
 8001434:	bdb0      	pop	{r4, r5, r7, pc}
 8001436:	bf00      	nop
 8001438:	5c28f5c3 	.word	0x5c28f5c3
 800143c:	3fedc28f 	.word	0x3fedc28f
 8001440:	00000000 	.word	0x00000000
 8001444:	40977000 	.word	0x40977000
 8001448:	3ff00000 	.word	0x3ff00000
 800144c:	bff00000 	.word	0xbff00000
 8001450:	402e0000 	.word	0x402e0000
 8001454:	20000010 	.word	0x20000010
 8001458:	40020800 	.word	0x40020800
 800145c:	200000ae 	.word	0x200000ae
 8001460:	200000b0 	.word	0x200000b0
 8001464:	bfe00000 	.word	0xbfe00000
 8001468:	3fe00000 	.word	0x3fe00000
 800146c:	00000000 	.word	0x00000000
 8001470:	407db000 	.word	0x407db000

08001474 <SM1st_SetSpeed>:

static int SM1st_SetSpeed(int speed, int dir){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	static uint32_t recent_System_counter = 0;
	static uint32_t SMsendTime = 0;
	static bool _StepM = false;
	static bool _StepDir = false;
	static uint32_t stepCount = 0;
	if(speed >= 100) speed = 100;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b63      	cmp	r3, #99	; 0x63
 8001482:	dd01      	ble.n	8001488 <SM1st_SetSpeed+0x14>
 8001484:	2364      	movs	r3, #100	; 0x64
 8001486:	607b      	str	r3, [r7, #4]
	if(speed < 0) speed = 0;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	da01      	bge.n	8001492 <SM1st_SetSpeed+0x1e>
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
	SMsendTime += G_System_MicroCounter - recent_System_counter;
 8001492:	4b3e      	ldr	r3, [pc, #248]	; (800158c <SM1st_SetSpeed+0x118>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <SM1st_SetSpeed+0x11c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1ad2      	subs	r2, r2, r3
 800149c:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <SM1st_SetSpeed+0x120>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a3c      	ldr	r2, [pc, #240]	; (8001594 <SM1st_SetSpeed+0x120>)
 80014a4:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_MicroCounter;
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <SM1st_SetSpeed+0x118>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a39      	ldr	r2, [pc, #228]	; (8001590 <SM1st_SetSpeed+0x11c>)
 80014ac:	6013      	str	r3, [r2, #0]
	if(!_StepM){
 80014ae:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <SM1st_SetSpeed+0x124>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	f083 0301 	eor.w	r3, r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00a      	beq.n	80014d2 <SM1st_SetSpeed+0x5e>
		_StepM = true;
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <SM1st_SetSpeed+0x124>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
		IO_RESET_STEP();
 80014c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c6:	4835      	ldr	r0, [pc, #212]	; (800159c <SM1st_SetSpeed+0x128>)
 80014c8:	f001 f8aa 	bl	8002620 <D_GPIO_Reset>
		return stepCount;
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <SM1st_SetSpeed+0x12c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	e058      	b.n	8001584 <SM1st_SetSpeed+0x110>
	}
	if (speed == 0) return stepCount;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <SM1st_SetSpeed+0x6a>
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <SM1st_SetSpeed+0x12c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	e052      	b.n	8001584 <SM1st_SetSpeed+0x110>
	if(SMsendTime >= SM_SEND_INTERVAL + (100 - speed)){
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f1c3 036c 	rsb	r3, r3, #108	; 0x6c
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <SM1st_SetSpeed+0x120>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d848      	bhi.n	8001580 <SM1st_SetSpeed+0x10c>
		SMsendTime = 0;
 80014ee:	4b29      	ldr	r3, [pc, #164]	; (8001594 <SM1st_SetSpeed+0x120>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
		stepCount++;
 80014f4:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <SM1st_SetSpeed+0x12c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <SM1st_SetSpeed+0x12c>)
 80014fc:	6013      	str	r3, [r2, #0]
		if(_StepM){
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <SM1st_SetSpeed+0x124>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <SM1st_SetSpeed+0xa2>
			_StepM = false;
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <SM1st_SetSpeed+0x124>)
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
			IO_SET_STEP();
 800150c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001510:	4822      	ldr	r0, [pc, #136]	; (800159c <SM1st_SetSpeed+0x128>)
 8001512:	f001 f875 	bl	8002600 <D_GPIO_Set>
		}
		/*else{
			_StepM = true;
			IO_RESET_STEP();
		}*/
		if(_StepDir){
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <SM1st_SetSpeed+0x130>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d018      	beq.n	8001550 <SM1st_SetSpeed+0xdc>
			if(IO_READ_SM_L()){
 800151e:	2102      	movs	r1, #2
 8001520:	4821      	ldr	r0, [pc, #132]	; (80015a8 <SM1st_SetSpeed+0x134>)
 8001522:	f001 f88d 	bl	8002640 <D_GPIO_Read>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00b      	beq.n	8001544 <SM1st_SetSpeed+0xd0>
				IO_RESET_DIR();
 800152c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001530:	481a      	ldr	r0, [pc, #104]	; (800159c <SM1st_SetSpeed+0x128>)
 8001532:	f001 f875 	bl	8002620 <D_GPIO_Reset>
				_StepDir = false;
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <SM1st_SetSpeed+0x130>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
				stepCount = 0;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <SM1st_SetSpeed+0x12c>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e01d      	b.n	8001580 <SM1st_SetSpeed+0x10c>
			}else{
				IO_SET_DIR();
 8001544:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001548:	4814      	ldr	r0, [pc, #80]	; (800159c <SM1st_SetSpeed+0x128>)
 800154a:	f001 f859 	bl	8002600 <D_GPIO_Set>
 800154e:	e017      	b.n	8001580 <SM1st_SetSpeed+0x10c>
			}
		}else{
			if(IO_READ_SM_R()){
 8001550:	2101      	movs	r1, #1
 8001552:	4815      	ldr	r0, [pc, #84]	; (80015a8 <SM1st_SetSpeed+0x134>)
 8001554:	f001 f874 	bl	8002640 <D_GPIO_Read>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <SM1st_SetSpeed+0x102>
				IO_SET_DIR();
 800155e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <SM1st_SetSpeed+0x128>)
 8001564:	f001 f84c 	bl	8002600 <D_GPIO_Set>
				_StepDir = true;
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <SM1st_SetSpeed+0x130>)
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
				stepCount = 0;
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <SM1st_SetSpeed+0x12c>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	e004      	b.n	8001580 <SM1st_SetSpeed+0x10c>
			}else{
				IO_RESET_DIR();
 8001576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800157a:	4808      	ldr	r0, [pc, #32]	; (800159c <SM1st_SetSpeed+0x128>)
 800157c:	f001 f850 	bl	8002620 <D_GPIO_Reset>
			}
		}
	}
	return stepCount;
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <SM1st_SetSpeed+0x12c>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200000cc 	.word	0x200000cc
 8001590:	200000b4 	.word	0x200000b4
 8001594:	200000b8 	.word	0x200000b8
 8001598:	200000bc 	.word	0x200000bc
 800159c:	40020000 	.word	0x40020000
 80015a0:	200000c0 	.word	0x200000c0
 80015a4:	200000c4 	.word	0x200000c4
 80015a8:	40020800 	.word	0x40020800

080015ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b0:	f001 fa8a 	bl	8002ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b4:	f000 f81e 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b8:	f000 fa3c 	bl	8001a34 <MX_GPIO_Init>
  MX_DMA_Init();
 80015bc:	f000 f9f4 	bl	80019a8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80015c0:	f000 f99e 	bl	8001900 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80015c4:	f000 f9c6 	bl	8001954 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80015c8:	f000 f902 	bl	80017d0 <MX_TIM3_Init>
  MX_CAN1_Init();
 80015cc:	f000 f87e 	bl	80016cc <MX_CAN1_Init>
  MX_TIM2_Init();
 80015d0:	f000 f8b2 	bl	8001738 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  D_PWM_Init();
 80015d4:	f001 fa62 	bl	8002a9c <D_PWM_Init>
  D_CAN_Init();
 80015d8:	f000 fee2 	bl	80023a0 <D_CAN_Init>

  HAL_TIM_Base_Start_IT(&htim2);
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <main+0x44>)
 80015de:	f003 fce3 	bl	8004fa8 <HAL_TIM_Base_Start_IT>

  appInit();
 80015e2:	f7ff fc0b 	bl	8000dfc <appInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //メインタスクの処理
	  appTask();
 80015e6:	f7ff fc39 	bl	8000e5c <appTask>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
//		  D_Mess_printf("tes2");
//		  D_Mess_flush();
	  }*/
	  D_Mess_flush();
 80015ea:	f001 f85f 	bl	80026ac <D_Mess_flush>
	  appTask();
 80015ee:	e7fa      	b.n	80015e6 <main+0x3a>
 80015f0:	20000774 	.word	0x20000774

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b094      	sub	sp, #80	; 0x50
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	2234      	movs	r2, #52	; 0x34
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f005 fc94 	bl	8006f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <SystemClock_Config+0xd0>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	4a28      	ldr	r2, [pc, #160]	; (80016c4 <SystemClock_Config+0xd0>)
 8001622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001626:	6413      	str	r3, [r2, #64]	; 0x40
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <SystemClock_Config+0xd0>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <SystemClock_Config+0xd4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001640:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <SystemClock_Config+0xd4>)
 8001642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <SystemClock_Config+0xd4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001654:	2302      	movs	r3, #2
 8001656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001658:	2301      	movs	r3, #1
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800165c:	2310      	movs	r3, #16
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001660:	2302      	movs	r3, #2
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001664:	2300      	movs	r3, #0
 8001666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001668:	2308      	movs	r3, #8
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 800166c:	2350      	movs	r3, #80	; 0x50
 800166e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001670:	2302      	movs	r3, #2
 8001672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001674:	2302      	movs	r3, #2
 8001676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001678:	2302      	movs	r3, #2
 800167a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4618      	mov	r0, r3
 8001682:	f003 f9a3 	bl	80049cc <HAL_RCC_OscConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800168c:	f000 fb28 	bl	8001ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001690:	230f      	movs	r3, #15
 8001692:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001694:	2302      	movs	r3, #2
 8001696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	2102      	movs	r1, #2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 fec1 	bl	8004434 <HAL_RCC_ClockConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80016b8:	f000 fb12 	bl	8001ce0 <Error_Handler>
  }
}
 80016bc:	bf00      	nop
 80016be:	3750      	adds	r7, #80	; 0x50
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000

080016cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80016d0:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_CAN1_Init+0x64>)
 80016d2:	4a18      	ldr	r2, [pc, #96]	; (8001734 <MX_CAN1_Init+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_CAN1_Init+0x64>)
 80016d8:	2208      	movs	r2, #8
 80016da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_CAN1_Init+0x64>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_CAN1_Init+0x64>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_CAN1_Init+0x64>)
 80016ea:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80016ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_CAN1_Init+0x64>)
 80016f2:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80016f6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <MX_CAN1_Init+0x64>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_CAN1_Init+0x64>)
 8001700:	2200      	movs	r2, #0
 8001702:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <MX_CAN1_Init+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_CAN1_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_CAN1_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_CAN1_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_CAN1_Init+0x64>)
 800171e:	f001 fa45 	bl	8002bac <HAL_CAN_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001728:	f000 fada 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000800 	.word	0x20000800
 8001734:	40006400 	.word	0x40006400

08001738 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0308 	add.w	r3, r7, #8
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	463b      	mov	r3, r7
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <MX_TIM2_Init+0x94>)
 8001756:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800175a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <MX_TIM2_Init+0x94>)
 800175e:	2208      	movs	r2, #8
 8001760:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MX_TIM2_Init+0x94>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <MX_TIM2_Init+0x94>)
 800176a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800176e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <MX_TIM2_Init+0x94>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <MX_TIM2_Init+0x94>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800177c:	4813      	ldr	r0, [pc, #76]	; (80017cc <MX_TIM2_Init+0x94>)
 800177e:	f003 fbc3 	bl	8004f08 <HAL_TIM_Base_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001788:	f000 faaa 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001790:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	4619      	mov	r1, r3
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <MX_TIM2_Init+0x94>)
 800179a:	f003 ff61 	bl	8005660 <HAL_TIM_ConfigClockSource>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017a4:	f000 fa9c 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017b0:	463b      	mov	r3, r7
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_TIM2_Init+0x94>)
 80017b6:	f004 fb53 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017c0:	f000 fa8e 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000774 	.word	0x20000774

080017d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08e      	sub	sp, #56	; 0x38
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]
 80017fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001800:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <MX_TIM3_Init+0x128>)
 8001802:	4a3e      	ldr	r2, [pc, #248]	; (80018fc <MX_TIM3_Init+0x12c>)
 8001804:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001806:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <MX_TIM3_Init+0x128>)
 8001808:	224f      	movs	r2, #79	; 0x4f
 800180a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180c:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <MX_TIM3_Init+0x128>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <MX_TIM3_Init+0x128>)
 8001814:	f241 3287 	movw	r2, #4999	; 0x1387
 8001818:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <MX_TIM3_Init+0x128>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001820:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <MX_TIM3_Init+0x128>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001826:	4834      	ldr	r0, [pc, #208]	; (80018f8 <MX_TIM3_Init+0x128>)
 8001828:	f003 fb6e 	bl	8004f08 <HAL_TIM_Base_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001832:	f000 fa55 	bl	8001ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800183c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001840:	4619      	mov	r1, r3
 8001842:	482d      	ldr	r0, [pc, #180]	; (80018f8 <MX_TIM3_Init+0x128>)
 8001844:	f003 ff0c 	bl	8005660 <HAL_TIM_ConfigClockSource>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800184e:	f000 fa47 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001852:	4829      	ldr	r0, [pc, #164]	; (80018f8 <MX_TIM3_Init+0x128>)
 8001854:	f003 fc18 	bl	8005088 <HAL_TIM_PWM_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800185e:	f000 fa3f 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	4619      	mov	r1, r3
 8001870:	4821      	ldr	r0, [pc, #132]	; (80018f8 <MX_TIM3_Init+0x128>)
 8001872:	f004 faf5 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800187c:	f000 fa30 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001880:	2360      	movs	r3, #96	; 0x60
 8001882:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2200      	movs	r2, #0
 8001894:	4619      	mov	r1, r3
 8001896:	4818      	ldr	r0, [pc, #96]	; (80018f8 <MX_TIM3_Init+0x128>)
 8001898:	f003 fe20 	bl	80054dc <HAL_TIM_PWM_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80018a2:	f000 fa1d 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2204      	movs	r2, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4812      	ldr	r0, [pc, #72]	; (80018f8 <MX_TIM3_Init+0x128>)
 80018ae:	f003 fe15 	bl	80054dc <HAL_TIM_PWM_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80018b8:	f000 fa12 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2208      	movs	r2, #8
 80018c0:	4619      	mov	r1, r3
 80018c2:	480d      	ldr	r0, [pc, #52]	; (80018f8 <MX_TIM3_Init+0x128>)
 80018c4:	f003 fe0a 	bl	80054dc <HAL_TIM_PWM_ConfigChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80018ce:	f000 fa07 	bl	8001ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	220c      	movs	r2, #12
 80018d6:	4619      	mov	r1, r3
 80018d8:	4807      	ldr	r0, [pc, #28]	; (80018f8 <MX_TIM3_Init+0x128>)
 80018da:	f003 fdff 	bl	80054dc <HAL_TIM_PWM_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80018e4:	f000 f9fc 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018e8:	4803      	ldr	r0, [pc, #12]	; (80018f8 <MX_TIM3_Init+0x128>)
 80018ea:	f000 facb 	bl	8001e84 <HAL_TIM_MspPostInit>

}
 80018ee:	bf00      	nop
 80018f0:	3738      	adds	r7, #56	; 0x38
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200005c8 	.word	0x200005c8
 80018fc:	40000400 	.word	0x40000400

08001900 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_USART1_UART_Init+0x50>)
 8001908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <MX_USART1_UART_Init+0x4c>)
 800190c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_USART1_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <MX_USART1_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_USART1_UART_Init+0x4c>)
 8001938:	f004 fb22 	bl	8005f80 <HAL_UART_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001942:	f000 f9cd 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000730 	.word	0x20000730
 8001950:	40011000 	.word	0x40011000

08001954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <MX_USART2_UART_Init+0x50>)
 800195c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800197a:	220c      	movs	r2, #12
 800197c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_USART2_UART_Init+0x4c>)
 800198c:	f004 faf8 	bl	8005f80 <HAL_UART_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001996:	f000 f9a3 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200007bc 	.word	0x200007bc
 80019a4:	40004400 	.word	0x40004400

080019a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <MX_DMA_Init+0x88>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <MX_DMA_Init+0x88>)
 80019b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <MX_DMA_Init+0x88>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <MX_DMA_Init+0x88>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <MX_DMA_Init+0x88>)
 80019d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <MX_DMA_Init+0x88>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	2010      	movs	r0, #16
 80019ec:	f001 ff23 	bl	8003836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019f0:	2010      	movs	r0, #16
 80019f2:	f001 ff3c 	bl	800386e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	2011      	movs	r0, #17
 80019fc:	f001 ff1b 	bl	8003836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a00:	2011      	movs	r0, #17
 8001a02:	f001 ff34 	bl	800386e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	203a      	movs	r0, #58	; 0x3a
 8001a0c:	f001 ff13 	bl	8003836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a10:	203a      	movs	r0, #58	; 0x3a
 8001a12:	f001 ff2c 	bl	800386e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2046      	movs	r0, #70	; 0x46
 8001a1c:	f001 ff0b 	bl	8003836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001a20:	2046      	movs	r0, #70	; 0x46
 8001a22:	f001 ff24 	bl	800386e <HAL_NVIC_EnableIRQ>

}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800

08001a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a69      	ldr	r2, [pc, #420]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b67      	ldr	r3, [pc, #412]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b63      	ldr	r3, [pc, #396]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a62      	ldr	r2, [pc, #392]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b60      	ldr	r3, [pc, #384]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a5b      	ldr	r2, [pc, #364]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a54      	ldr	r2, [pc, #336]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b52      	ldr	r3, [pc, #328]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b4e      	ldr	r3, [pc, #312]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a4d      	ldr	r2, [pc, #308]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <MX_GPIO_Init+0x1c4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f641 0121 	movw	r1, #6177	; 0x1821
 8001adc:	4847      	ldr	r0, [pc, #284]	; (8001bfc <MX_GPIO_Init+0x1c8>)
 8001ade:	f002 fc8f 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001ae8:	4845      	ldr	r0, [pc, #276]	; (8001c00 <MX_GPIO_Init+0x1cc>)
 8001aea:	f002 fc89 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f24d 0104 	movw	r1, #53252	; 0xd004
 8001af4:	4843      	ldr	r0, [pc, #268]	; (8001c04 <MX_GPIO_Init+0x1d0>)
 8001af6:	f002 fc83 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b00:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	483b      	ldr	r0, [pc, #236]	; (8001c00 <MX_GPIO_Init+0x1cc>)
 8001b12:	f002 fac9 	bl	80040a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b16:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001b1a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4835      	ldr	r0, [pc, #212]	; (8001c00 <MX_GPIO_Init+0x1cc>)
 8001b2c:	f002 fabc 	bl	80040a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b30:	2301      	movs	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b34:	2311      	movs	r3, #17
 8001b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	482d      	ldr	r0, [pc, #180]	; (8001bfc <MX_GPIO_Init+0x1c8>)
 8001b48:	f002 faae 	bl	80040a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 8001b4c:	f248 0312 	movw	r3, #32786	; 0x8012
 8001b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4826      	ldr	r0, [pc, #152]	; (8001bfc <MX_GPIO_Init+0x1c8>)
 8001b62:	f002 faa1 	bl	80040a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8001b66:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	481f      	ldr	r0, [pc, #124]	; (8001bfc <MX_GPIO_Init+0x1c8>)
 8001b80:	f002 fa92 	bl	80040a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8001b84:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8001b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4818      	ldr	r0, [pc, #96]	; (8001c00 <MX_GPIO_Init+0x1cc>)
 8001b9e:	f002 fa83 	bl	80040a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8001ba2:	f24d 0304 	movw	r3, #53252	; 0xd004
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4812      	ldr	r0, [pc, #72]	; (8001c04 <MX_GPIO_Init+0x1d0>)
 8001bbc:	f002 fa74 	bl	80040a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480d      	ldr	r0, [pc, #52]	; (8001c08 <MX_GPIO_Init+0x1d4>)
 8001bd4:	f002 fa68 	bl	80040a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <MX_GPIO_Init+0x1d0>)
 8001bec:	f002 fa5c 	bl	80040a8 <HAL_GPIO_Init>

}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020c00 	.word	0x40020c00

08001c0c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_UART_TxCpltCallback+0x20>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_UART_TxCpltCallback+0x16>
	  D_Mess_TransitionCompletedCallBack();
 8001c1e:	f000 fd77 	bl	8002710 <D_Mess_TransitionCompletedCallBack>
  }
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40004400 	.word	0x40004400

08001c30 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  D_CAN_ReceiveCallBack(hcan);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fc71 	bl	8002520 <D_CAN_ReceiveCallBack>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_CAN_TxMailboxCompleteCallback>:
void HAL_CAN_TxMailboxCompleteCallback(){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  //D_CAN_ReceiveCallBack(hcan);
  D_Mess_printf("TxMailboxComplete\n");
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <HAL_CAN_TxMailboxCompleteCallback+0x10>)
 8001c4e:	f000 fd0d 	bl	800266c <D_Mess_printf>
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	08006f58 	.word	0x08006f58

08001c5c <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  D_Mess_printf("TxMailbox0Complete\n");
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8001c66:	f000 fd01 	bl	800266c <D_Mess_printf>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	08006f6c 	.word	0x08006f6c

08001c78 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  D_Mess_printf("TxMailbox1Complete\n");
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 8001c82:	f000 fcf3 	bl	800266c <D_Mess_printf>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	08006f80 	.word	0x08006f80

08001c94 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  D_Mess_printf("TxMailbox2Complete\n");
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 8001c9e:	f000 fce5 	bl	800266c <D_Mess_printf>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	08006f94 	.word	0x08006f94

08001cb0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d104      	bne.n	8001cca <HAL_TIM_PeriodElapsedCallback+0x1a>
    	G_System_MicroCounter++;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001cc8:	6013      	str	r3, [r2, #0]
    }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000774 	.word	0x20000774
 8001cdc:	200000cc 	.word	0x200000cc

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
}
 8001ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <Error_Handler+0x8>
	...

08001cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d2a:	2007      	movs	r0, #7
 8001d2c:	f001 fd78 	bl	8003820 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a29      	ldr	r2, [pc, #164]	; (8001e00 <HAL_CAN_MspInit+0xc4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d14c      	bne.n	8001df8 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <HAL_CAN_MspInit+0xc8>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a27      	ldr	r2, [pc, #156]	; (8001e04 <HAL_CAN_MspInit+0xc8>)
 8001d68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <HAL_CAN_MspInit+0xc8>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_CAN_MspInit+0xc8>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a20      	ldr	r2, [pc, #128]	; (8001e04 <HAL_CAN_MspInit+0xc8>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <HAL_CAN_MspInit+0xc8>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da4:	2303      	movs	r3, #3
 8001da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001da8:	2309      	movs	r3, #9
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	4815      	ldr	r0, [pc, #84]	; (8001e08 <HAL_CAN_MspInit+0xcc>)
 8001db4:	f002 f978 	bl	80040a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2100      	movs	r1, #0
 8001dbc:	2013      	movs	r0, #19
 8001dbe:	f001 fd3a 	bl	8003836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001dc2:	2013      	movs	r0, #19
 8001dc4:	f001 fd53 	bl	800386e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2014      	movs	r0, #20
 8001dce:	f001 fd32 	bl	8003836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001dd2:	2014      	movs	r0, #20
 8001dd4:	f001 fd4b 	bl	800386e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2015      	movs	r0, #21
 8001dde:	f001 fd2a 	bl	8003836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001de2:	2015      	movs	r0, #21
 8001de4:	f001 fd43 	bl	800386e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2100      	movs	r1, #0
 8001dec:	2016      	movs	r0, #22
 8001dee:	f001 fd22 	bl	8003836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001df2:	2016      	movs	r0, #22
 8001df4:	f001 fd3b 	bl	800386e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001df8:	bf00      	nop
 8001dfa:	3728      	adds	r7, #40	; 0x28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40006400 	.word	0x40006400
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020400 	.word	0x40020400

08001e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e1c:	d116      	bne.n	8001e4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_TIM_Base_MspInit+0x70>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <HAL_TIM_Base_MspInit+0x70>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_TIM_Base_MspInit+0x70>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	201c      	movs	r0, #28
 8001e40:	f001 fcf9 	bl	8003836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e44:	201c      	movs	r0, #28
 8001e46:	f001 fd12 	bl	800386e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e4a:	e012      	b.n	8001e72 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <HAL_TIM_Base_MspInit+0x74>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10d      	bne.n	8001e72 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_TIM_Base_MspInit+0x70>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_TIM_Base_MspInit+0x70>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_TIM_Base_MspInit+0x70>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40000400 	.word	0x40000400

08001e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a21      	ldr	r2, [pc, #132]	; (8001f28 <HAL_TIM_MspPostInit+0xa4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d13b      	bne.n	8001f1e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_TIM_MspPostInit+0xa8>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <HAL_TIM_MspPostInit+0xa8>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_TIM_MspPostInit+0xa8>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_TIM_MspPostInit+0xa8>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <HAL_TIM_MspPostInit+0xa8>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <HAL_TIM_MspPostInit+0xa8>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ede:	23c0      	movs	r3, #192	; 0xc0
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <HAL_TIM_MspPostInit+0xac>)
 8001efa:	f002 f8d5 	bl	80040a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001efe:	2303      	movs	r3, #3
 8001f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	4806      	ldr	r0, [pc, #24]	; (8001f34 <HAL_TIM_MspPostInit+0xb0>)
 8001f1a:	f002 f8c5 	bl	80040a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	; 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020400 	.word	0x40020400

08001f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08c      	sub	sp, #48	; 0x30
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a97      	ldr	r2, [pc, #604]	; (80021b4 <HAL_UART_MspInit+0x27c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	f040 8092 	bne.w	8002080 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	4b95      	ldr	r3, [pc, #596]	; (80021b8 <HAL_UART_MspInit+0x280>)
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	4a94      	ldr	r2, [pc, #592]	; (80021b8 <HAL_UART_MspInit+0x280>)
 8001f66:	f043 0310 	orr.w	r3, r3, #16
 8001f6a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6c:	4b92      	ldr	r3, [pc, #584]	; (80021b8 <HAL_UART_MspInit+0x280>)
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	4b8e      	ldr	r3, [pc, #568]	; (80021b8 <HAL_UART_MspInit+0x280>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	4a8d      	ldr	r2, [pc, #564]	; (80021b8 <HAL_UART_MspInit+0x280>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	6313      	str	r3, [r2, #48]	; 0x30
 8001f88:	4b8b      	ldr	r3, [pc, #556]	; (80021b8 <HAL_UART_MspInit+0x280>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f94:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4882      	ldr	r0, [pc, #520]	; (80021bc <HAL_UART_MspInit+0x284>)
 8001fb2:	f002 f879 	bl	80040a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001fb6:	4b82      	ldr	r3, [pc, #520]	; (80021c0 <HAL_UART_MspInit+0x288>)
 8001fb8:	4a82      	ldr	r2, [pc, #520]	; (80021c4 <HAL_UART_MspInit+0x28c>)
 8001fba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001fbc:	4b80      	ldr	r3, [pc, #512]	; (80021c0 <HAL_UART_MspInit+0x288>)
 8001fbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fc2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fc4:	4b7e      	ldr	r3, [pc, #504]	; (80021c0 <HAL_UART_MspInit+0x288>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fca:	4b7d      	ldr	r3, [pc, #500]	; (80021c0 <HAL_UART_MspInit+0x288>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd0:	4b7b      	ldr	r3, [pc, #492]	; (80021c0 <HAL_UART_MspInit+0x288>)
 8001fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fd8:	4b79      	ldr	r3, [pc, #484]	; (80021c0 <HAL_UART_MspInit+0x288>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fde:	4b78      	ldr	r3, [pc, #480]	; (80021c0 <HAL_UART_MspInit+0x288>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001fe4:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <HAL_UART_MspInit+0x288>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fea:	4b75      	ldr	r3, [pc, #468]	; (80021c0 <HAL_UART_MspInit+0x288>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff0:	4b73      	ldr	r3, [pc, #460]	; (80021c0 <HAL_UART_MspInit+0x288>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ff6:	4872      	ldr	r0, [pc, #456]	; (80021c0 <HAL_UART_MspInit+0x288>)
 8001ff8:	f001 fc54 	bl	80038a4 <HAL_DMA_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002002:	f7ff fe6d 	bl	8001ce0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a6d      	ldr	r2, [pc, #436]	; (80021c0 <HAL_UART_MspInit+0x288>)
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
 800200c:	4a6c      	ldr	r2, [pc, #432]	; (80021c0 <HAL_UART_MspInit+0x288>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002012:	4b6d      	ldr	r3, [pc, #436]	; (80021c8 <HAL_UART_MspInit+0x290>)
 8002014:	4a6d      	ldr	r2, [pc, #436]	; (80021cc <HAL_UART_MspInit+0x294>)
 8002016:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002018:	4b6b      	ldr	r3, [pc, #428]	; (80021c8 <HAL_UART_MspInit+0x290>)
 800201a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800201e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002020:	4b69      	ldr	r3, [pc, #420]	; (80021c8 <HAL_UART_MspInit+0x290>)
 8002022:	2240      	movs	r2, #64	; 0x40
 8002024:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002026:	4b68      	ldr	r3, [pc, #416]	; (80021c8 <HAL_UART_MspInit+0x290>)
 8002028:	2200      	movs	r2, #0
 800202a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800202c:	4b66      	ldr	r3, [pc, #408]	; (80021c8 <HAL_UART_MspInit+0x290>)
 800202e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002032:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002034:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_UART_MspInit+0x290>)
 8002036:	2200      	movs	r2, #0
 8002038:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800203a:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <HAL_UART_MspInit+0x290>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002040:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <HAL_UART_MspInit+0x290>)
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002046:	4b60      	ldr	r3, [pc, #384]	; (80021c8 <HAL_UART_MspInit+0x290>)
 8002048:	2200      	movs	r2, #0
 800204a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800204c:	4b5e      	ldr	r3, [pc, #376]	; (80021c8 <HAL_UART_MspInit+0x290>)
 800204e:	2200      	movs	r2, #0
 8002050:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002052:	485d      	ldr	r0, [pc, #372]	; (80021c8 <HAL_UART_MspInit+0x290>)
 8002054:	f001 fc26 	bl	80038a4 <HAL_DMA_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800205e:	f7ff fe3f 	bl	8001ce0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_UART_MspInit+0x290>)
 8002066:	635a      	str	r2, [r3, #52]	; 0x34
 8002068:	4a57      	ldr	r2, [pc, #348]	; (80021c8 <HAL_UART_MspInit+0x290>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2025      	movs	r0, #37	; 0x25
 8002074:	f001 fbdf 	bl	8003836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002078:	2025      	movs	r0, #37	; 0x25
 800207a:	f001 fbf8 	bl	800386e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800207e:	e095      	b.n	80021ac <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a52      	ldr	r2, [pc, #328]	; (80021d0 <HAL_UART_MspInit+0x298>)
 8002086:	4293      	cmp	r3, r2
 8002088:	f040 8090 	bne.w	80021ac <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	4b49      	ldr	r3, [pc, #292]	; (80021b8 <HAL_UART_MspInit+0x280>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	4a48      	ldr	r2, [pc, #288]	; (80021b8 <HAL_UART_MspInit+0x280>)
 8002096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209a:	6413      	str	r3, [r2, #64]	; 0x40
 800209c:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <HAL_UART_MspInit+0x280>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	4b42      	ldr	r3, [pc, #264]	; (80021b8 <HAL_UART_MspInit+0x280>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	4a41      	ldr	r2, [pc, #260]	; (80021b8 <HAL_UART_MspInit+0x280>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6313      	str	r3, [r2, #48]	; 0x30
 80020b8:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <HAL_UART_MspInit+0x280>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020c4:	230c      	movs	r3, #12
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d4:	2307      	movs	r3, #7
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4837      	ldr	r0, [pc, #220]	; (80021bc <HAL_UART_MspInit+0x284>)
 80020e0:	f001 ffe2 	bl	80040a8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80020e4:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_UART_MspInit+0x29c>)
 80020e6:	4a3c      	ldr	r2, [pc, #240]	; (80021d8 <HAL_UART_MspInit+0x2a0>)
 80020e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80020ea:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <HAL_UART_MspInit+0x29c>)
 80020ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020f2:	4b38      	ldr	r3, [pc, #224]	; (80021d4 <HAL_UART_MspInit+0x29c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <HAL_UART_MspInit+0x29c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020fe:	4b35      	ldr	r3, [pc, #212]	; (80021d4 <HAL_UART_MspInit+0x29c>)
 8002100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002104:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002106:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <HAL_UART_MspInit+0x29c>)
 8002108:	2200      	movs	r2, #0
 800210a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800210c:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <HAL_UART_MspInit+0x29c>)
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002112:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_UART_MspInit+0x29c>)
 8002114:	2200      	movs	r2, #0
 8002116:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <HAL_UART_MspInit+0x29c>)
 800211a:	2200      	movs	r2, #0
 800211c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800211e:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_UART_MspInit+0x29c>)
 8002120:	2200      	movs	r2, #0
 8002122:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002124:	482b      	ldr	r0, [pc, #172]	; (80021d4 <HAL_UART_MspInit+0x29c>)
 8002126:	f001 fbbd 	bl	80038a4 <HAL_DMA_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8002130:	f7ff fdd6 	bl	8001ce0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a27      	ldr	r2, [pc, #156]	; (80021d4 <HAL_UART_MspInit+0x29c>)
 8002138:	639a      	str	r2, [r3, #56]	; 0x38
 800213a:	4a26      	ldr	r2, [pc, #152]	; (80021d4 <HAL_UART_MspInit+0x29c>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002140:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_UART_MspInit+0x2a4>)
 8002142:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <HAL_UART_MspInit+0x2a8>)
 8002144:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_UART_MspInit+0x2a4>)
 8002148:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800214c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800214e:	4b23      	ldr	r3, [pc, #140]	; (80021dc <HAL_UART_MspInit+0x2a4>)
 8002150:	2240      	movs	r2, #64	; 0x40
 8002152:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_UART_MspInit+0x2a4>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_UART_MspInit+0x2a4>)
 800215c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002160:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_UART_MspInit+0x2a4>)
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002168:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <HAL_UART_MspInit+0x2a4>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_UART_MspInit+0x2a4>)
 8002170:	2200      	movs	r2, #0
 8002172:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_UART_MspInit+0x2a4>)
 8002176:	2200      	movs	r2, #0
 8002178:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_UART_MspInit+0x2a4>)
 800217c:	2200      	movs	r2, #0
 800217e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002180:	4816      	ldr	r0, [pc, #88]	; (80021dc <HAL_UART_MspInit+0x2a4>)
 8002182:	f001 fb8f 	bl	80038a4 <HAL_DMA_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_UART_MspInit+0x258>
      Error_Handler();
 800218c:	f7ff fda8 	bl	8001ce0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <HAL_UART_MspInit+0x2a4>)
 8002194:	635a      	str	r2, [r3, #52]	; 0x34
 8002196:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_UART_MspInit+0x2a4>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800219c:	2200      	movs	r2, #0
 800219e:	2100      	movs	r1, #0
 80021a0:	2026      	movs	r0, #38	; 0x26
 80021a2:	f001 fb48 	bl	8003836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021a6:	2026      	movs	r0, #38	; 0x26
 80021a8:	f001 fb61 	bl	800386e <HAL_NVIC_EnableIRQ>
}
 80021ac:	bf00      	nop
 80021ae:	3730      	adds	r7, #48	; 0x30
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40011000 	.word	0x40011000
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020000 	.word	0x40020000
 80021c0:	20000670 	.word	0x20000670
 80021c4:	40026440 	.word	0x40026440
 80021c8:	20000610 	.word	0x20000610
 80021cc:	400264b8 	.word	0x400264b8
 80021d0:	40004400 	.word	0x40004400
 80021d4:	20000568 	.word	0x20000568
 80021d8:	40026088 	.word	0x40026088
 80021dc:	200006d0 	.word	0x200006d0
 80021e0:	400260a0 	.word	0x400260a0

080021e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <NMI_Handler+0x4>

080021ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <HardFault_Handler+0x4>

080021f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <MemManage_Handler+0x4>

080021f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <BusFault_Handler+0x4>

080021fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <UsageFault_Handler+0x4>

08002202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002230:	f000 fc9c 	bl	8002b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <SysTick_Handler+0x18>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3301      	adds	r3, #1
 800223a:	4a02      	ldr	r2, [pc, #8]	; (8002244 <SysTick_Handler+0x18>)
 800223c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200000c8 	.word	0x200000c8

08002248 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <DMA1_Stream5_IRQHandler+0x10>)
 800224e:	f001 fcc1 	bl	8003bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000568 	.word	0x20000568

0800225c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <DMA1_Stream6_IRQHandler+0x10>)
 8002262:	f001 fcb7 	bl	8003bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200006d0 	.word	0x200006d0

08002270 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
  HAL_CAN_TxMailboxCompleteCallback();
 8002274:	f7ff fce8 	bl	8001c48 <HAL_CAN_TxMailboxCompleteCallback>
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <CAN1_TX_IRQHandler+0x14>)
 800227a:	f000 ffef 	bl	800325c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000800 	.word	0x20000800

08002288 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <CAN1_RX0_IRQHandler+0x10>)
 800228e:	f000 ffe5 	bl	800325c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000800 	.word	0x20000800

0800229c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <CAN1_RX1_IRQHandler+0x10>)
 80022a2:	f000 ffdb 	bl	800325c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000800 	.word	0x20000800

080022b0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <CAN1_SCE_IRQHandler+0x10>)
 80022b6:	f000 ffd1 	bl	800325c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000800 	.word	0x20000800

080022c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <TIM2_IRQHandler+0x10>)
 80022ca:	f002 ffff 	bl	80052cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000774 	.word	0x20000774

080022d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <USART1_IRQHandler+0x10>)
 80022de:	f003 ff1b 	bl	8006118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000730 	.word	0x20000730

080022ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <USART2_IRQHandler+0x10>)
 80022f2:	f003 ff11 	bl	8006118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200007bc 	.word	0x200007bc

08002300 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <DMA2_Stream2_IRQHandler+0x10>)
 8002306:	f001 fc65 	bl	8003bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000670 	.word	0x20000670

08002314 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <DMA2_Stream7_IRQHandler+0x10>)
 800231a:	f001 fc5b 	bl	8003bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000610 	.word	0x20000610

08002328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <SystemInit+0x20>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	4a05      	ldr	r2, [pc, #20]	; (8002348 <SystemInit+0x20>)
 8002334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800234c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002384 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002350:	480d      	ldr	r0, [pc, #52]	; (8002388 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002352:	490e      	ldr	r1, [pc, #56]	; (800238c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002354:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002368:	4c0b      	ldr	r4, [pc, #44]	; (8002398 <LoopFillZerobss+0x26>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002376:	f7ff ffd7 	bl	8002328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237a:	f004 fdb5 	bl	8006ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237e:	f7ff f915 	bl	80015ac <main>
  bx  lr    
 8002382:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800238c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002390:	08006fd8 	.word	0x08006fd8
  ldr r2, =_sbss
 8002394:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002398:	20000838 	.word	0x20000838

0800239c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800239c:	e7fe      	b.n	800239c <ADC_IRQHandler>
	...

080023a0 <D_CAN_Init>:

#include "../Inc/CAN.h"
#include <stdlib.h>
#include "stm32f4xx_hal.h"

void D_CAN_Init(void){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
	HAL_CAN_Start(&hcan1);
 80023a6:	4818      	ldr	r0, [pc, #96]	; (8002408 <D_CAN_Init+0x68>)
 80023a8:	f000 fddc 	bl	8002f64 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80023ac:	2102      	movs	r1, #2
 80023ae:	4816      	ldr	r0, [pc, #88]	; (8002408 <D_CAN_Init+0x68>)
 80023b0:	f000 ff2e 	bl	8003210 <HAL_CAN_ActivateNotification>
	for(int i=0; i<8; i++){
 80023b4:	2300      	movs	r3, #0
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	e01d      	b.n	80023f6 <D_CAN_Init+0x56>
		TxData[i] = 0;
 80023ba:	4a14      	ldr	r2, [pc, #80]	; (800240c <D_CAN_Init+0x6c>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
		RxData[i] = 0;
 80023c4:	4a12      	ldr	r2, [pc, #72]	; (8002410 <D_CAN_Init+0x70>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<5; j++){
 80023ce:	2300      	movs	r3, #0
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	e00a      	b.n	80023ea <D_CAN_Init+0x4a>
			AllData[j][i] = 0;
 80023d4:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <D_CAN_Init+0x74>)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	441a      	add	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<5; j++){
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	3301      	adds	r3, #1
 80023e8:	603b      	str	r3, [r7, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	ddf1      	ble.n	80023d4 <D_CAN_Init+0x34>
	for(int i=0; i<8; i++){
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3301      	adds	r3, #1
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b07      	cmp	r3, #7
 80023fa:	ddde      	ble.n	80023ba <D_CAN_Init+0x1a>
		}
	}
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000800 	.word	0x20000800
 800240c:	20000520 	.word	0x20000520
 8002410:	2000052c 	.word	0x2000052c
 8002414:	200004f8 	.word	0x200004f8

08002418 <D_CAN_SetReceiveAddressAll>:
	}

	return 0;
}

int D_CAN_SetReceiveAddressAll(void){
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
	sFilterConfig.FilterBank = 0;
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <D_CAN_SetReceiveAddressAll+0x5c>)
 800241e:	2200      	movs	r2, #0
 8002420:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <D_CAN_SetReceiveAddressAll+0x5c>)
 800242a:	2201      	movs	r2, #1
 800242c:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002436:	2200      	movs	r2, #0
 8002438:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <D_CAN_SetReceiveAddressAll+0x5c>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002442:	2200      	movs	r2, #0
 8002444:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <D_CAN_SetReceiveAddressAll+0x5c>)
 800244e:	2201      	movs	r2, #1
 8002450:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002454:	220e      	movs	r2, #14
 8002456:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 8002458:	4906      	ldr	r1, [pc, #24]	; (8002474 <D_CAN_SetReceiveAddressAll+0x5c>)
 800245a:	4807      	ldr	r0, [pc, #28]	; (8002478 <D_CAN_SetReceiveAddressAll+0x60>)
 800245c:	f000 fca2 	bl	8002da4 <HAL_CAN_ConfigFilter>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <D_CAN_SetReceiveAddressAll+0x54>
		return -1;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800246a:	e000      	b.n	800246e <D_CAN_SetReceiveAddressAll+0x56>
	}

	return 0;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200004d0 	.word	0x200004d0
 8002478:	20000800 	.word	0x20000800

0800247c <D_CAN_Receive>:

int D_CAN_Receive(uint16_t SenderAddress, uint8_t *data, uint16_t size){
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	80fb      	strh	r3, [r7, #6]
 8002488:	4613      	mov	r3, r2
 800248a:	80bb      	strh	r3, [r7, #4]
	int setIdx = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
	switch(SenderAddress){
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002496:	d01b      	beq.n	80024d0 <D_CAN_Receive+0x54>
 8002498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249c:	dc1e      	bgt.n	80024dc <D_CAN_Receive+0x60>
 800249e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024a2:	d012      	beq.n	80024ca <D_CAN_Receive+0x4e>
 80024a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024a8:	dc18      	bgt.n	80024dc <D_CAN_Receive+0x60>
 80024aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ae:	d009      	beq.n	80024c4 <D_CAN_Receive+0x48>
 80024b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b4:	dc12      	bgt.n	80024dc <D_CAN_Receive+0x60>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00d      	beq.n	80024d6 <D_CAN_Receive+0x5a>
 80024ba:	2b09      	cmp	r3, #9
 80024bc:	d10e      	bne.n	80024dc <D_CAN_Receive+0x60>
	case CAN_MECH1_ADDRESS:
		setIdx = CAN_MECH1;
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
		break;
 80024c2:	e00e      	b.n	80024e2 <D_CAN_Receive+0x66>
	case CAN_ST2_ADDRESS:
		setIdx = CAN_ST2;
 80024c4:	2301      	movs	r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
		break;
 80024c8:	e00b      	b.n	80024e2 <D_CAN_Receive+0x66>
	case CAN_ST3_ADDRESS:
		setIdx = CAN_ST3;
 80024ca:	2302      	movs	r3, #2
 80024cc:	60bb      	str	r3, [r7, #8]
		break;
 80024ce:	e008      	b.n	80024e2 <D_CAN_Receive+0x66>
	case CAN_ST4_ADDRESS:
		setIdx = CAN_ST4;
 80024d0:	2303      	movs	r3, #3
 80024d2:	60bb      	str	r3, [r7, #8]
		break;
 80024d4:	e005      	b.n	80024e2 <D_CAN_Receive+0x66>
	case CAN_MAIN_ADDRESS:
		setIdx = CAN_MAIN;
 80024d6:	2304      	movs	r3, #4
 80024d8:	60bb      	str	r3, [r7, #8]
		break;
 80024da:	e002      	b.n	80024e2 <D_CAN_Receive+0x66>
	default:
		setIdx = CAN_MAIN;
 80024dc:	2304      	movs	r3, #4
 80024de:	60bb      	str	r3, [r7, #8]
		break;
 80024e0:	bf00      	nop
	}
	//test
	for(int i=0; i<size; i++){
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	e00d      	b.n	8002504 <D_CAN_Receive+0x88>
		data[i] = AllData[SenderAddress][i];
 80024e8:	88fa      	ldrh	r2, [r7, #6]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6839      	ldr	r1, [r7, #0]
 80024ee:	440b      	add	r3, r1
 80024f0:	490a      	ldr	r1, [pc, #40]	; (800251c <D_CAN_Receive+0xa0>)
 80024f2:	00d2      	lsls	r2, r2, #3
 80024f4:	4411      	add	r1, r2
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	440a      	add	r2, r1
 80024fa:	7812      	ldrb	r2, [r2, #0]
 80024fc:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++){
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3301      	adds	r3, #1
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	88bb      	ldrh	r3, [r7, #4]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	429a      	cmp	r2, r3
 800250a:	dbed      	blt.n	80024e8 <D_CAN_Receive+0x6c>
		data[i] = AllData[setIdx][i];
	}
	*/


	return 0;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	200004f8 	.word	0x200004f8

08002520 <D_CAN_ReceiveCallBack>:

void D_CAN_ReceiveCallBack(CAN_HandleTypeDef *hcan){
 8002520:	b580      	push	{r7, lr}
 8002522:	b08e      	sub	sp, #56	; 0x38
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8002528:	f107 020c 	add.w	r2, r7, #12
 800252c:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <D_CAN_ReceiveCallBack+0xd8>)
 800252e:	2100      	movs	r1, #0
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fd5b 	bl	8002fec <HAL_CAN_GetRxMessage>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d155      	bne.n	80025e8 <D_CAN_ReceiveCallBack+0xc8>
		uint32_t id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <D_CAN_ReceiveCallBack+0x26>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	e000      	b.n	8002548 <D_CAN_ReceiveCallBack+0x28>
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t size = RxHeader.DLC;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
		int setIdx = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
		switch(id){
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002558:	d022      	beq.n	80025a0 <D_CAN_ReceiveCallBack+0x80>
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002560:	d824      	bhi.n	80025ac <D_CAN_ReceiveCallBack+0x8c>
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002568:	d017      	beq.n	800259a <D_CAN_ReceiveCallBack+0x7a>
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002570:	d81c      	bhi.n	80025ac <D_CAN_ReceiveCallBack+0x8c>
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002578:	d00c      	beq.n	8002594 <D_CAN_ReceiveCallBack+0x74>
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002580:	d814      	bhi.n	80025ac <D_CAN_ReceiveCallBack+0x8c>
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00e      	beq.n	80025a6 <D_CAN_ReceiveCallBack+0x86>
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	2b09      	cmp	r3, #9
 800258c:	d10e      	bne.n	80025ac <D_CAN_ReceiveCallBack+0x8c>
		case CAN_MECH1_ADDRESS:
			setIdx = CAN_MECH1;
 800258e:	2300      	movs	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8002592:	e00e      	b.n	80025b2 <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST2_ADDRESS:
			setIdx = CAN_ST2;
 8002594:	2301      	movs	r3, #1
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8002598:	e00b      	b.n	80025b2 <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST3_ADDRESS:
			setIdx = CAN_ST3;
 800259a:	2302      	movs	r3, #2
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 800259e:	e008      	b.n	80025b2 <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST4_ADDRESS:
			setIdx = CAN_ST4;
 80025a0:	2303      	movs	r3, #3
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80025a4:	e005      	b.n	80025b2 <D_CAN_ReceiveCallBack+0x92>
		case CAN_MAIN_ADDRESS:
			setIdx = CAN_MAIN;
 80025a6:	2304      	movs	r3, #4
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80025aa:	e002      	b.n	80025b2 <D_CAN_ReceiveCallBack+0x92>
		default:
			setIdx = CAN_MAIN;
 80025ac:	2304      	movs	r3, #4
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80025b0:	bf00      	nop
		}
		//test
		for(int i=0; i<size; i++){
 80025b2:	2300      	movs	r3, #0
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
 80025b6:	e00b      	b.n	80025d0 <D_CAN_ReceiveCallBack+0xb0>
			AllData[0][i] = RxData[i];
 80025b8:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <D_CAN_ReceiveCallBack+0xd8>)
 80025ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025bc:	4413      	add	r3, r2
 80025be:	7819      	ldrb	r1, [r3, #0]
 80025c0:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <D_CAN_ReceiveCallBack+0xdc>)
 80025c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c4:	4413      	add	r3, r2
 80025c6:	460a      	mov	r2, r1
 80025c8:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<size; i++){
 80025ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025cc:	3301      	adds	r3, #1
 80025ce:	637b      	str	r3, [r7, #52]	; 0x34
 80025d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d8ef      	bhi.n	80025b8 <D_CAN_ReceiveCallBack+0x98>
		}
		AllData[1][0] = id;
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	4b07      	ldr	r3, [pc, #28]	; (80025fc <D_CAN_ReceiveCallBack+0xdc>)
 80025de:	721a      	strb	r2, [r3, #8]
		AllData[1][1] = 254;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <D_CAN_ReceiveCallBack+0xdc>)
 80025e2:	22fe      	movs	r2, #254	; 0xfe
 80025e4:	725a      	strb	r2, [r3, #9]
		}
		*/
	}else{
		AllData[1][1] = 255;
	}
}
 80025e6:	e002      	b.n	80025ee <D_CAN_ReceiveCallBack+0xce>
		AllData[1][1] = 255;
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <D_CAN_ReceiveCallBack+0xdc>)
 80025ea:	22ff      	movs	r2, #255	; 0xff
 80025ec:	725a      	strb	r2, [r3, #9]
}
 80025ee:	bf00      	nop
 80025f0:	3738      	adds	r7, #56	; 0x38
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2000052c 	.word	0x2000052c
 80025fc:	200004f8 	.word	0x200004f8

08002600 <D_GPIO_Set>:
#include "../Inc/GPIO.h"
#include <stdlib.h>
#include <stdbool.h>
#include "stm32f4xx_hal.h"

void D_GPIO_Set(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_SET);
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	2201      	movs	r2, #1
 8002610:	4619      	mov	r1, r3
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f001 fef4 	bl	8004400 <HAL_GPIO_WritePin>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <D_GPIO_Reset>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
 800262c:	887b      	ldrh	r3, [r7, #2]
 800262e:	2200      	movs	r2, #0
 8002630:	4619      	mov	r1, r3
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f001 fee4 	bl	8004400 <HAL_GPIO_WritePin>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <D_GPIO_Read>:

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	4619      	mov	r1, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f001 febd 	bl	80043d0 <HAL_GPIO_ReadPin>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <D_Mess_printf>:

static
volatile bool had_completed = true;


void D_Mess_printf(const char* fmt, ...){
 800266c:	b40f      	push	{r0, r1, r2, r3}
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
  va_list arp;

  //MW_waitForMessageTransitionComplete(100);
  va_start(arp, fmt);
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	607b      	str	r3, [r7, #4]
  xvprintf(fmt, arp);
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	6938      	ldr	r0, [r7, #16]
 800267e:	f000 f891 	bl	80027a4 <xvprintf>
  va_end(arp);
  if( outptr - buff > MAX_STRING_LENGTH ){
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <D_Mess_printf+0x38>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <D_Mess_printf+0x3c>)
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800268e:	dd01      	ble.n	8002694 <D_Mess_printf+0x28>
	  D_Mess_flush();
 8002690:	f000 f80c 	bl	80026ac <D_Mess_flush>
  }
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800269e:	b004      	add	sp, #16
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000830 	.word	0x20000830
 80026a8:	200000d0 	.word	0x200000d0

080026ac <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed){
 80026b0:	4b13      	ldr	r3, [pc, #76]	; (8002700 <D_Mess_flush+0x54>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f083 0301 	eor.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <D_Mess_flush+0x1c>
		outptr = buff;
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <D_Mess_flush+0x58>)
 80026c2:	4a11      	ldr	r2, [pc, #68]	; (8002708 <D_Mess_flush+0x5c>)
 80026c4:	601a      	str	r2, [r3, #0]
		return;
 80026c6:	e01a      	b.n	80026fe <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <D_Mess_flush+0x58>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <D_Mess_flush+0x58>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	490b      	ldr	r1, [pc, #44]	; (8002704 <D_Mess_flush+0x58>)
 80026d8:	600a      	str	r2, [r1, #0]
 80026da:	220a      	movs	r2, #10
 80026dc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <D_Mess_flush+0x58>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a09      	ldr	r2, [pc, #36]	; (8002708 <D_Mess_flush+0x5c>)
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	4907      	ldr	r1, [pc, #28]	; (8002708 <D_Mess_flush+0x5c>)
 80026ec:	4807      	ldr	r0, [pc, #28]	; (800270c <D_Mess_flush+0x60>)
 80026ee:	f003 fc95 	bl	800601c <HAL_UART_Transmit_DMA>
		had_completed = false;
 80026f2:	4b03      	ldr	r3, [pc, #12]	; (8002700 <D_Mess_flush+0x54>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 80026f8:	4b02      	ldr	r3, [pc, #8]	; (8002704 <D_Mess_flush+0x58>)
 80026fa:	4a03      	ldr	r2, [pc, #12]	; (8002708 <D_Mess_flush+0x5c>)
 80026fc:	601a      	str	r2, [r3, #0]
}
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000018 	.word	0x20000018
 8002704:	20000830 	.word	0x20000830
 8002708:	200000d0 	.word	0x200000d0
 800270c:	200007bc 	.word	0x200007bc

08002710 <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  had_completed = true;
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <D_Mess_TransitionCompletedCallBack+0x14>)
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	20000018 	.word	0x20000018

08002728 <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc(char c){
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  if( _CR_CRLF && c == '\n' ){
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	2b0a      	cmp	r3, #10
 8002736:	d102      	bne.n	800273e <xputc+0x16>
    xputc('\r');                                        /* CR -> CRLF */
 8002738:	200d      	movs	r0, #13
 800273a:	f7ff fff5 	bl	8002728 <xputc>
  }
  if( outptr ){
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <xputc+0x48>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <xputc+0x2e>
    *outptr++ = (unsigned char)c;
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <xputc+0x48>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	4908      	ldr	r1, [pc, #32]	; (8002770 <xputc+0x48>)
 800274e:	600a      	str	r2, [r1, #0]
 8002750:	79fa      	ldrb	r2, [r7, #7]
 8002752:	701a      	strb	r2, [r3, #0]
    return;
 8002754:	e008      	b.n	8002768 <xputc+0x40>
  }

  if( xfunc_out ){
 8002756:	4b07      	ldr	r3, [pc, #28]	; (8002774 <xputc+0x4c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d004      	beq.n	8002768 <xputc+0x40>
    xfunc_out((unsigned char)c);
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <xputc+0x4c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	79fa      	ldrb	r2, [r7, #7]
 8002764:	4610      	mov	r0, r2
 8002766:	4798      	blx	r3
  }
}
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000830 	.word	0x20000830
 8002774:	2000082c 	.word	0x2000082c

08002778 <xputs>:
/*----------------------------------------------*/

void xputs(                                     /* Put a string to the default
                                                 *device */
  const char* str                               /* Pointer to the string */
  ){
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  while( *str ){
 8002780:	e006      	b.n	8002790 <xputs+0x18>
    xputc(*str++);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ffcc 	bl	8002728 <xputc>
  while( *str ){
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f4      	bne.n	8002782 <xputs+0xa>
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <xvprintf>:
 */

void xvprintf(
  const char*     fmt,          /* Pointer to the format string */
  va_list arp                           /* Pointer to arguments */
  ){
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08e      	sub	sp, #56	; 0x38
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  unsigned long v;
  char s[16], c, d, *p;


  for(;; ){
    c = *fmt++;                                                 /* Get a char */
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	77fb      	strb	r3, [r7, #31]
    if( !c ){
 80027b8:	7ffb      	ldrb	r3, [r7, #31]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8167 	beq.w	8002a8e <xvprintf+0x2ea>
      break;                                            /* End of format? */
    }
    if( c != '%' ){                                     /* Pass through it if
 80027c0:	7ffb      	ldrb	r3, [r7, #31]
 80027c2:	2b25      	cmp	r3, #37	; 0x25
 80027c4:	d004      	beq.n	80027d0 <xvprintf+0x2c>
                                                         *not a % sequense */
      xputc(c); continue;
 80027c6:	7ffb      	ldrb	r3, [r7, #31]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ffad 	bl	8002728 <xputc>
 80027ce:	e15d      	b.n	8002a8c <xvprintf+0x2e8>
    }
    f = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
    c = *fmt++;                                                 /* Get first
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	77fb      	strb	r3, [r7, #31]
                                                                * *char of the
                                                                *sequense */
    if( c == '0' ){                                     /* Flag: '0' padded */
 80027de:	7ffb      	ldrb	r3, [r7, #31]
 80027e0:	2b30      	cmp	r3, #48	; 0x30
 80027e2:	d107      	bne.n	80027f4 <xvprintf+0x50>
      f = 1; c = *fmt++;
 80027e4:	2301      	movs	r3, #1
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	77fb      	strb	r3, [r7, #31]
 80027f2:	e009      	b.n	8002808 <xvprintf+0x64>
    } else {
      if( c == '-' ){                                   /* Flag: left justified
 80027f4:	7ffb      	ldrb	r3, [r7, #31]
 80027f6:	2b2d      	cmp	r3, #45	; 0x2d
 80027f8:	d106      	bne.n	8002808 <xvprintf+0x64>
                                                        **/
        f = 2; c = *fmt++;
 80027fa:	2302      	movs	r3, #2
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	77fb      	strb	r3, [r7, #31]
      }
    }
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8002808:	2300      	movs	r3, #0
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
 800280c:	e00e      	b.n	800282c <xvprintf+0x88>
                                                                **/
      w = w * 10 + c - '0';
 800280e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	461a      	mov	r2, r3
 800281a:	7ffb      	ldrb	r3, [r7, #31]
 800281c:	4413      	add	r3, r2
 800281e:	3b30      	subs	r3, #48	; 0x30
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	77fb      	strb	r3, [r7, #31]
 800282c:	7ffb      	ldrb	r3, [r7, #31]
 800282e:	2b2f      	cmp	r3, #47	; 0x2f
 8002830:	d902      	bls.n	8002838 <xvprintf+0x94>
 8002832:	7ffb      	ldrb	r3, [r7, #31]
 8002834:	2b39      	cmp	r3, #57	; 0x39
 8002836:	d9ea      	bls.n	800280e <xvprintf+0x6a>
    }
    if( c == 'l' || c == 'L' ){                 /* Prefix: Size is long int */
 8002838:	7ffb      	ldrb	r3, [r7, #31]
 800283a:	2b6c      	cmp	r3, #108	; 0x6c
 800283c:	d002      	beq.n	8002844 <xvprintf+0xa0>
 800283e:	7ffb      	ldrb	r3, [r7, #31]
 8002840:	2b4c      	cmp	r3, #76	; 0x4c
 8002842:	d108      	bne.n	8002856 <xvprintf+0xb2>
      f |= 4; c = *fmt++;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	77fb      	strb	r3, [r7, #31]
    }
    if( !c ){
 8002856:	7ffb      	ldrb	r3, [r7, #31]
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 811a 	beq.w	8002a92 <xvprintf+0x2ee>
      break;                                            /* End of format? */
    }
    d = c;
 800285e:	7ffb      	ldrb	r3, [r7, #31]
 8002860:	77bb      	strb	r3, [r7, #30]
    if( d >= 'a' ){
 8002862:	7fbb      	ldrb	r3, [r7, #30]
 8002864:	2b60      	cmp	r3, #96	; 0x60
 8002866:	d902      	bls.n	800286e <xvprintf+0xca>
      d -= 0x20;
 8002868:	7fbb      	ldrb	r3, [r7, #30]
 800286a:	3b20      	subs	r3, #32
 800286c:	77bb      	strb	r3, [r7, #30]
    }
    switch( d ){                                        /* Type is... */
 800286e:	7fbb      	ldrb	r3, [r7, #30]
 8002870:	3b42      	subs	r3, #66	; 0x42
 8002872:	2b16      	cmp	r3, #22
 8002874:	d873      	bhi.n	800295e <xvprintf+0x1ba>
 8002876:	a201      	add	r2, pc, #4	; (adr r2, 800287c <xvprintf+0xd8>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	08002947 	.word	0x08002947
 8002880:	08002935 	.word	0x08002935
 8002884:	08002953 	.word	0x08002953
 8002888:	0800295f 	.word	0x0800295f
 800288c:	0800295f 	.word	0x0800295f
 8002890:	0800295f 	.word	0x0800295f
 8002894:	0800295f 	.word	0x0800295f
 8002898:	0800295f 	.word	0x0800295f
 800289c:	0800295f 	.word	0x0800295f
 80028a0:	0800295f 	.word	0x0800295f
 80028a4:	0800295f 	.word	0x0800295f
 80028a8:	0800295f 	.word	0x0800295f
 80028ac:	0800295f 	.word	0x0800295f
 80028b0:	0800294d 	.word	0x0800294d
 80028b4:	0800295f 	.word	0x0800295f
 80028b8:	0800295f 	.word	0x0800295f
 80028bc:	0800295f 	.word	0x0800295f
 80028c0:	080028d9 	.word	0x080028d9
 80028c4:	0800295f 	.word	0x0800295f
 80028c8:	08002953 	.word	0x08002953
 80028cc:	0800295f 	.word	0x0800295f
 80028d0:	0800295f 	.word	0x0800295f
 80028d4:	08002959 	.word	0x08002959
    case 'S':                                                   /* String */
      p = va_arg(arp, char*);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	1d1a      	adds	r2, r3, #4
 80028dc:	603a      	str	r2, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	61bb      	str	r3, [r7, #24]
      for( j = 0; p[j]; j++ ){
 80028e2:	2300      	movs	r3, #0
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e6:	e002      	b.n	80028ee <xvprintf+0x14a>
 80028e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ea:	3301      	adds	r3, #1
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f2:	4413      	add	r3, r2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f6      	bne.n	80028e8 <xvprintf+0x144>
      }
      while( !( f & 2 ) && j++ < w ){
 80028fa:	e002      	b.n	8002902 <xvprintf+0x15e>
        xputc(' ');
 80028fc:	2020      	movs	r0, #32
 80028fe:	f7ff ff13 	bl	8002728 <xputc>
      while( !( f & 2 ) && j++ < w ){
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d105      	bne.n	8002918 <xvprintf+0x174>
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002914:	429a      	cmp	r2, r3
 8002916:	d8f1      	bhi.n	80028fc <xvprintf+0x158>
      }
      xputs(p);
 8002918:	69b8      	ldr	r0, [r7, #24]
 800291a:	f7ff ff2d 	bl	8002778 <xputs>
      while( j++ < w ){
 800291e:	e002      	b.n	8002926 <xvprintf+0x182>
        xputc(' ');
 8002920:	2020      	movs	r0, #32
 8002922:	f7ff ff01 	bl	8002728 <xputc>
      while( j++ < w ){
 8002926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800292c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800292e:	429a      	cmp	r2, r3
 8002930:	d8f6      	bhi.n	8002920 <xvprintf+0x17c>
      }
      continue;
 8002932:	e0ab      	b.n	8002a8c <xvprintf+0x2e8>
    case 'C':                                                   /* Character */
      xputc((char)va_arg(arp, int)); continue;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	1d1a      	adds	r2, r3, #4
 8002938:	603a      	str	r2, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fef2 	bl	8002728 <xputc>
 8002944:	e0a2      	b.n	8002a8c <xvprintf+0x2e8>
    case 'B':                                                   /* Binary */
      r = 2; break;
 8002946:	2302      	movs	r3, #2
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
 800294a:	e00d      	b.n	8002968 <xvprintf+0x1c4>
    case 'O':                                                   /* Octal */
      r = 8; break;
 800294c:	2308      	movs	r3, #8
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
 8002950:	e00a      	b.n	8002968 <xvprintf+0x1c4>
    case 'D':                                                   /* Signed
                                                                 *decimal */
    case 'U':                                                   /* Unsigned
                                                                *decimal */
      r = 10; break;
 8002952:	230a      	movs	r3, #10
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
 8002956:	e007      	b.n	8002968 <xvprintf+0x1c4>
    case 'X':                                                   /* Hexdecimal */
      r = 16; break;
 8002958:	2310      	movs	r3, #16
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
 800295c:	e004      	b.n	8002968 <xvprintf+0x1c4>
    default:                                                    /* Unknown type
                                                                 * *(passthrough)
                                                                 **/
      xputc(c); continue;
 800295e:	7ffb      	ldrb	r3, [r7, #31]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fee1 	bl	8002728 <xputc>
 8002966:	e091      	b.n	8002a8c <xvprintf+0x2e8>
    }

    /* Get an argument and put it in numeral */
    v = ( f & 4 ) ? va_arg(arp, long) : (( d == 'D' ) ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d004      	beq.n	800297c <xvprintf+0x1d8>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	1d1a      	adds	r2, r3, #4
 8002976:	603a      	str	r2, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	e00b      	b.n	8002994 <xvprintf+0x1f0>
 800297c:	7fbb      	ldrb	r3, [r7, #30]
 800297e:	2b44      	cmp	r3, #68	; 0x44
 8002980:	d104      	bne.n	800298c <xvprintf+0x1e8>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	1d1a      	adds	r2, r3, #4
 8002986:	603a      	str	r2, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	e003      	b.n	8002994 <xvprintf+0x1f0>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	1d1a      	adds	r2, r3, #4
 8002990:	603a      	str	r2, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	623b      	str	r3, [r7, #32]
    if( d == 'D' && ( v & 0x80000000 )){
 8002996:	7fbb      	ldrb	r3, [r7, #30]
 8002998:	2b44      	cmp	r3, #68	; 0x44
 800299a:	d109      	bne.n	80029b0 <xvprintf+0x20c>
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	da06      	bge.n	80029b0 <xvprintf+0x20c>
      v = 0 - v;
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	425b      	negs	r3, r3
 80029a6:	623b      	str	r3, [r7, #32]
      f |= 8;
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	f043 0308 	orr.w	r3, r3, #8
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
    i = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	633b      	str	r3, [r7, #48]	; 0x30
    do {
      d = (char)( v % r ); v /= r;
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80029bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029be:	fb01 f202 	mul.w	r2, r1, r2
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	77bb      	strb	r3, [r7, #30]
 80029c6:	6a3a      	ldr	r2, [r7, #32]
 80029c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ce:	623b      	str	r3, [r7, #32]
      if( d > 9 ){
 80029d0:	7fbb      	ldrb	r3, [r7, #30]
 80029d2:	2b09      	cmp	r3, #9
 80029d4:	d908      	bls.n	80029e8 <xvprintf+0x244>
        d += ( c == 'x' ) ? 0x27 : 0x07;
 80029d6:	7ffb      	ldrb	r3, [r7, #31]
 80029d8:	2b78      	cmp	r3, #120	; 0x78
 80029da:	d101      	bne.n	80029e0 <xvprintf+0x23c>
 80029dc:	2227      	movs	r2, #39	; 0x27
 80029de:	e000      	b.n	80029e2 <xvprintf+0x23e>
 80029e0:	2207      	movs	r2, #7
 80029e2:	7fbb      	ldrb	r3, [r7, #30]
 80029e4:	4413      	add	r3, r2
 80029e6:	77bb      	strb	r3, [r7, #30]
      }
      s[i++] = d + '0';
 80029e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	633a      	str	r2, [r7, #48]	; 0x30
 80029ee:	7fba      	ldrb	r2, [r7, #30]
 80029f0:	3230      	adds	r2, #48	; 0x30
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80029f8:	440b      	add	r3, r1
 80029fa:	f803 2c30 	strb.w	r2, [r3, #-48]
    } while( v && i < sizeof( s ));
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <xvprintf+0x266>
 8002a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a06:	2b0f      	cmp	r3, #15
 8002a08:	d9d4      	bls.n	80029b4 <xvprintf+0x210>
    if( f & 8 ){
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <xvprintf+0x282>
      s[i++] = '-';
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	633a      	str	r2, [r7, #48]	; 0x30
 8002a1a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a1e:	4413      	add	r3, r2
 8002a20:	222d      	movs	r2, #45	; 0x2d
 8002a22:	f803 2c30 	strb.w	r2, [r3, #-48]
    }
    j = i; d = ( f & 1 ) ? '0' : ' ';
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <xvprintf+0x294>
 8002a34:	2330      	movs	r3, #48	; 0x30
 8002a36:	e000      	b.n	8002a3a <xvprintf+0x296>
 8002a38:	2320      	movs	r3, #32
 8002a3a:	77bb      	strb	r3, [r7, #30]
    while( !( f & 2 ) && j++ < w ){
 8002a3c:	e003      	b.n	8002a46 <xvprintf+0x2a2>
      xputc(d);
 8002a3e:	7fbb      	ldrb	r3, [r7, #30]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fe71 	bl	8002728 <xputc>
    while( !( f & 2 ) && j++ < w ){
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <xvprintf+0x2b8>
 8002a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d8f0      	bhi.n	8002a3e <xvprintf+0x29a>
    }
    do { xputc(s[--i]); } while( i );
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
 8002a62:	f107 0208 	add.w	r2, r7, #8
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	4413      	add	r3, r2
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fe5b 	bl	8002728 <xputc>
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f1      	bne.n	8002a5c <xvprintf+0x2b8>
    while( j++ < w ){
 8002a78:	e002      	b.n	8002a80 <xvprintf+0x2dc>
      xputc(' ');
 8002a7a:	2020      	movs	r0, #32
 8002a7c:	f7ff fe54 	bl	8002728 <xputc>
    while( j++ < w ){
 8002a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d8f6      	bhi.n	8002a7a <xvprintf+0x2d6>
    c = *fmt++;                                                 /* Get a char */
 8002a8c:	e68f      	b.n	80027ae <xvprintf+0xa>
      break;                                            /* End of format? */
 8002a8e:	bf00      	nop
 8002a90:	e000      	b.n	8002a94 <xvprintf+0x2f0>
      break;                                            /* End of format? */
 8002a92:	bf00      	nop
    }
  }
} /* xvprintf */
 8002a94:	bf00      	nop
 8002a96:	3738      	adds	r7, #56	; 0x38
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <D_PWM_Init>:
#include <stdlib.h>
#include "stm32f4xx_hal.h"

//extern TIM_HandleTypeDef htim3;

void D_PWM_Init(void){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4808      	ldr	r0, [pc, #32]	; (8002ac4 <D_PWM_Init+0x28>)
 8002aa4:	f002 fb4a 	bl	800513c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <D_PWM_Init+0x28>)
 8002aac:	f002 fb46 	bl	800513c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002ab0:	2108      	movs	r1, #8
 8002ab2:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <D_PWM_Init+0x28>)
 8002ab4:	f002 fb42 	bl	800513c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002ab8:	210c      	movs	r1, #12
 8002aba:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <D_PWM_Init+0x28>)
 8002abc:	f002 fb3e 	bl	800513c <HAL_TIM_PWM_Start>
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200005c8 	.word	0x200005c8

08002ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_Init+0x40>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <HAL_Init+0x40>)
 8002ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_Init+0x40>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_Init+0x40>)
 8002ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_Init+0x40>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <HAL_Init+0x40>)
 8002aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af0:	2003      	movs	r0, #3
 8002af2:	f000 fe95 	bl	8003820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f000 f808 	bl	8002b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002afc:	f7ff f8f6 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023c00 	.word	0x40023c00

08002b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_InitTick+0x54>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_InitTick+0x58>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fead 	bl	800388a <HAL_SYSTICK_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e00e      	b.n	8002b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b0f      	cmp	r3, #15
 8002b3e:	d80a      	bhi.n	8002b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b40:	2200      	movs	r2, #0
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b48:	f000 fe75 	bl	8003836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b4c:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <HAL_InitTick+0x5c>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000014 	.word	0x20000014
 8002b64:	20000020 	.word	0x20000020
 8002b68:	2000001c 	.word	0x2000001c

08002b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_IncTick+0x20>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_IncTick+0x24>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <HAL_IncTick+0x24>)
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000020 	.word	0x20000020
 8002b90:	20000834 	.word	0x20000834

08002b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return uwTick;
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_GetTick+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000834 	.word	0x20000834

08002bac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0ed      	b.n	8002d9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d102      	bne.n	8002bd0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff f8b6 	bl	8001d3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be0:	f7ff ffd8 	bl	8002b94 <HAL_GetTick>
 8002be4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002be6:	e012      	b.n	8002c0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002be8:	f7ff ffd4 	bl	8002b94 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b0a      	cmp	r3, #10
 8002bf4:	d90b      	bls.n	8002c0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2205      	movs	r2, #5
 8002c06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e0c5      	b.n	8002d9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0e5      	beq.n	8002be8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0202 	bic.w	r2, r2, #2
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c2c:	f7ff ffb2 	bl	8002b94 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c32:	e012      	b.n	8002c5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c34:	f7ff ffae 	bl	8002b94 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b0a      	cmp	r3, #10
 8002c40:	d90b      	bls.n	8002c5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2205      	movs	r2, #5
 8002c52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e09f      	b.n	8002d9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e5      	bne.n	8002c34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7e1b      	ldrb	r3, [r3, #24]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d108      	bne.n	8002c82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e007      	b.n	8002c92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7e5b      	ldrb	r3, [r3, #25]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d108      	bne.n	8002cac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e007      	b.n	8002cbc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7e9b      	ldrb	r3, [r3, #26]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d108      	bne.n	8002cd6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0220 	orr.w	r2, r2, #32
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e007      	b.n	8002ce6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0220 	bic.w	r2, r2, #32
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7edb      	ldrb	r3, [r3, #27]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d108      	bne.n	8002d00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0210 	bic.w	r2, r2, #16
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e007      	b.n	8002d10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0210 	orr.w	r2, r2, #16
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7f1b      	ldrb	r3, [r3, #28]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d108      	bne.n	8002d2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0208 	orr.w	r2, r2, #8
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e007      	b.n	8002d3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0208 	bic.w	r2, r2, #8
 8002d38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7f5b      	ldrb	r3, [r3, #29]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d108      	bne.n	8002d54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0204 	orr.w	r2, r2, #4
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e007      	b.n	8002d64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0204 	bic.w	r2, r2, #4
 8002d62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	ea42 0103 	orr.w	r1, r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	1e5a      	subs	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d003      	beq.n	8002dca <HAL_CAN_ConfigFilter+0x26>
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	f040 80be 	bne.w	8002f46 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002dca:	4b65      	ldr	r3, [pc, #404]	; (8002f60 <HAL_CAN_ConfigFilter+0x1bc>)
 8002dcc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dd4:	f043 0201 	orr.w	r2, r3, #1
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002de4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	401a      	ands	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d123      	bne.n	8002e74 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	401a      	ands	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	3248      	adds	r2, #72	; 0x48
 8002e54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e6a:	6979      	ldr	r1, [r7, #20]
 8002e6c:	3348      	adds	r3, #72	; 0x48
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d122      	bne.n	8002ec2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	431a      	orrs	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	3248      	adds	r2, #72	; 0x48
 8002ea2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002eb6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002eb8:	6979      	ldr	r1, [r7, #20]
 8002eba:	3348      	adds	r3, #72	; 0x48
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002edc:	e007      	b.n	8002eee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	401a      	ands	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002f08:	e007      	b.n	8002f1a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f38:	f023 0201 	bic.w	r2, r3, #1
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e006      	b.n	8002f54 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
  }
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40006400 	.word	0x40006400

08002f64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d12e      	bne.n	8002fd6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f90:	f7ff fe00 	bl	8002b94 <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f96:	e012      	b.n	8002fbe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f98:	f7ff fdfc 	bl	8002b94 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b0a      	cmp	r3, #10
 8002fa4:	d90b      	bls.n	8002fbe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2205      	movs	r2, #5
 8002fb6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e012      	b.n	8002fe4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e5      	bne.n	8002f98 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e006      	b.n	8002fe4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
  }
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003000:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d003      	beq.n	8003010 <HAL_CAN_GetRxMessage+0x24>
 8003008:	7dfb      	ldrb	r3, [r7, #23]
 800300a:	2b02      	cmp	r3, #2
 800300c:	f040 80f3 	bne.w	80031f6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10e      	bne.n	8003034 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d116      	bne.n	8003052 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0e7      	b.n	8003204 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d107      	bne.n	8003052 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0d8      	b.n	8003204 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	331b      	adds	r3, #27
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	4413      	add	r3, r2
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0204 	and.w	r2, r3, #4
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10c      	bne.n	800308a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	331b      	adds	r3, #27
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	4413      	add	r3, r2
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0d5b      	lsrs	r3, r3, #21
 8003080:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	e00b      	b.n	80030a2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	331b      	adds	r3, #27
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	4413      	add	r3, r2
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	08db      	lsrs	r3, r3, #3
 800309a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	331b      	adds	r3, #27
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	4413      	add	r3, r2
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0202 	and.w	r2, r3, #2
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	331b      	adds	r3, #27
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	4413      	add	r3, r2
 80030c4:	3304      	adds	r3, #4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	331b      	adds	r3, #27
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	331b      	adds	r3, #27
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	4413      	add	r3, r2
 80030f4:	3304      	adds	r3, #4
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	4413      	add	r3, r2
 800310a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	4413      	add	r3, r2
 8003120:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0a1a      	lsrs	r2, r3, #8
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	3301      	adds	r3, #1
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	4413      	add	r3, r2
 800313a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	0c1a      	lsrs	r2, r3, #16
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	3302      	adds	r3, #2
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	4413      	add	r3, r2
 8003154:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0e1a      	lsrs	r2, r3, #24
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	3303      	adds	r3, #3
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	4413      	add	r3, r2
 800316e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	3304      	adds	r3, #4
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	4413      	add	r3, r2
 8003186:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	0a1a      	lsrs	r2, r3, #8
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	3305      	adds	r3, #5
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	4413      	add	r3, r2
 80031a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	0c1a      	lsrs	r2, r3, #16
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	3306      	adds	r3, #6
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0e1a      	lsrs	r2, r3, #24
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	3307      	adds	r3, #7
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d108      	bne.n	80031e2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0220 	orr.w	r2, r2, #32
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	e007      	b.n	80031f2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0220 	orr.w	r2, r2, #32
 80031f0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e006      	b.n	8003204 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
  }
}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003220:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d002      	beq.n	800322e <HAL_CAN_ActivateNotification+0x1e>
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d109      	bne.n	8003242 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6959      	ldr	r1, [r3, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e006      	b.n	8003250 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003264:	2300      	movs	r3, #0
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d07c      	beq.n	800339c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d023      	beq.n	80032f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2201      	movs	r2, #1
 80032b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe fccc 	bl	8001c5c <HAL_CAN_TxMailbox0CompleteCallback>
 80032c4:	e016      	b.n	80032f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d004      	beq.n	80032da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
 80032d8:	e00c      	b.n	80032f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d004      	beq.n	80032ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
 80032ec:	e002      	b.n	80032f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f96b 	bl	80035ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d024      	beq.n	8003348 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003306:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fe fcb0 	bl	8001c78 <HAL_CAN_TxMailbox1CompleteCallback>
 8003318:	e016      	b.n	8003348 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
 800332c:	e00c      	b.n	8003348 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003334:	2b00      	cmp	r3, #0
 8003336:	d004      	beq.n	8003342 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
 8003340:	e002      	b.n	8003348 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f94b 	bl	80035de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d024      	beq.n	800339c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800335a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fe fc94 	bl	8001c94 <HAL_CAN_TxMailbox2CompleteCallback>
 800336c:	e016      	b.n	800339c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
 8003380:	e00c      	b.n	800339c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
 8003394:	e002      	b.n	800339c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f92b 	bl	80035f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2210      	movs	r2, #16
 80033be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d006      	beq.n	80033e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2208      	movs	r2, #8
 80033da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f912 	bl	8003606 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d009      	beq.n	8003400 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe fc18 	bl	8001c30 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00c      	beq.n	8003424 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800341a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2210      	movs	r2, #16
 8003422:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d006      	beq.n	8003446 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2208      	movs	r2, #8
 800343e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f8f4 	bl	800362e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f8db 	bl	800361a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b00      	cmp	r3, #0
 8003476:	d006      	beq.n	8003486 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2210      	movs	r2, #16
 800347e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f8de 	bl	8003642 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00b      	beq.n	80034a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2208      	movs	r2, #8
 80034a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8d7 	bl	8003656 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d07b      	beq.n	80035aa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d072      	beq.n	80035a2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	f043 0302 	orr.w	r3, r3, #2
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	f043 0304 	orr.w	r3, r3, #4
 800350e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003516:	2b00      	cmp	r3, #0
 8003518:	d043      	beq.n	80035a2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003520:	2b00      	cmp	r3, #0
 8003522:	d03e      	beq.n	80035a2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800352a:	2b60      	cmp	r3, #96	; 0x60
 800352c:	d02b      	beq.n	8003586 <HAL_CAN_IRQHandler+0x32a>
 800352e:	2b60      	cmp	r3, #96	; 0x60
 8003530:	d82e      	bhi.n	8003590 <HAL_CAN_IRQHandler+0x334>
 8003532:	2b50      	cmp	r3, #80	; 0x50
 8003534:	d022      	beq.n	800357c <HAL_CAN_IRQHandler+0x320>
 8003536:	2b50      	cmp	r3, #80	; 0x50
 8003538:	d82a      	bhi.n	8003590 <HAL_CAN_IRQHandler+0x334>
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d019      	beq.n	8003572 <HAL_CAN_IRQHandler+0x316>
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	d826      	bhi.n	8003590 <HAL_CAN_IRQHandler+0x334>
 8003542:	2b30      	cmp	r3, #48	; 0x30
 8003544:	d010      	beq.n	8003568 <HAL_CAN_IRQHandler+0x30c>
 8003546:	2b30      	cmp	r3, #48	; 0x30
 8003548:	d822      	bhi.n	8003590 <HAL_CAN_IRQHandler+0x334>
 800354a:	2b10      	cmp	r3, #16
 800354c:	d002      	beq.n	8003554 <HAL_CAN_IRQHandler+0x2f8>
 800354e:	2b20      	cmp	r3, #32
 8003550:	d005      	beq.n	800355e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003552:	e01d      	b.n	8003590 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	f043 0308 	orr.w	r3, r3, #8
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800355c:	e019      	b.n	8003592 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	f043 0310 	orr.w	r3, r3, #16
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003566:	e014      	b.n	8003592 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	f043 0320 	orr.w	r3, r3, #32
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003570:	e00f      	b.n	8003592 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800357a:	e00a      	b.n	8003592 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003584:	e005      	b.n	8003592 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800358e:	e000      	b.n	8003592 <HAL_CAN_IRQHandler+0x336>
            break;
 8003590:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035a0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2204      	movs	r2, #4
 80035a8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f854 	bl	800366a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80035c2:	bf00      	nop
 80035c4:	3728      	adds	r7, #40	; 0x28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800369c:	4013      	ands	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036b2:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <__NVIC_SetPriorityGrouping+0x44>)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	60d3      	str	r3, [r2, #12]
}
 80036b8:	bf00      	nop
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036cc:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <__NVIC_GetPriorityGrouping+0x18>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	0a1b      	lsrs	r3, r3, #8
 80036d2:	f003 0307 	and.w	r3, r3, #7
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	db0b      	blt.n	800370e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	f003 021f 	and.w	r2, r3, #31
 80036fc:	4907      	ldr	r1, [pc, #28]	; (800371c <__NVIC_EnableIRQ+0x38>)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2001      	movs	r0, #1
 8003706:	fa00 f202 	lsl.w	r2, r0, r2
 800370a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000e100 	.word	0xe000e100

08003720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	6039      	str	r1, [r7, #0]
 800372a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800372c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003730:	2b00      	cmp	r3, #0
 8003732:	db0a      	blt.n	800374a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	b2da      	uxtb	r2, r3
 8003738:	490c      	ldr	r1, [pc, #48]	; (800376c <__NVIC_SetPriority+0x4c>)
 800373a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373e:	0112      	lsls	r2, r2, #4
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	440b      	add	r3, r1
 8003744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003748:	e00a      	b.n	8003760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	b2da      	uxtb	r2, r3
 800374e:	4908      	ldr	r1, [pc, #32]	; (8003770 <__NVIC_SetPriority+0x50>)
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	3b04      	subs	r3, #4
 8003758:	0112      	lsls	r2, r2, #4
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	440b      	add	r3, r1
 800375e:	761a      	strb	r2, [r3, #24]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	e000e100 	.word	0xe000e100
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003774:	b480      	push	{r7}
 8003776:	b089      	sub	sp, #36	; 0x24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f1c3 0307 	rsb	r3, r3, #7
 800378e:	2b04      	cmp	r3, #4
 8003790:	bf28      	it	cs
 8003792:	2304      	movcs	r3, #4
 8003794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3304      	adds	r3, #4
 800379a:	2b06      	cmp	r3, #6
 800379c:	d902      	bls.n	80037a4 <NVIC_EncodePriority+0x30>
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3b03      	subs	r3, #3
 80037a2:	e000      	b.n	80037a6 <NVIC_EncodePriority+0x32>
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43da      	mvns	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	401a      	ands	r2, r3
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	fa01 f303 	lsl.w	r3, r1, r3
 80037c6:	43d9      	mvns	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037cc:	4313      	orrs	r3, r2
         );
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3724      	adds	r7, #36	; 0x24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ec:	d301      	bcc.n	80037f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ee:	2301      	movs	r3, #1
 80037f0:	e00f      	b.n	8003812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037f2:	4a0a      	ldr	r2, [pc, #40]	; (800381c <SysTick_Config+0x40>)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037fa:	210f      	movs	r1, #15
 80037fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003800:	f7ff ff8e 	bl	8003720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <SysTick_Config+0x40>)
 8003806:	2200      	movs	r2, #0
 8003808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800380a:	4b04      	ldr	r3, [pc, #16]	; (800381c <SysTick_Config+0x40>)
 800380c:	2207      	movs	r2, #7
 800380e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	e000e010 	.word	0xe000e010

08003820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ff29 	bl	8003680 <__NVIC_SetPriorityGrouping>
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	4603      	mov	r3, r0
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003848:	f7ff ff3e 	bl	80036c8 <__NVIC_GetPriorityGrouping>
 800384c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	6978      	ldr	r0, [r7, #20]
 8003854:	f7ff ff8e 	bl	8003774 <NVIC_EncodePriority>
 8003858:	4602      	mov	r2, r0
 800385a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ff5d 	bl	8003720 <__NVIC_SetPriority>
}
 8003866:	bf00      	nop
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	4603      	mov	r3, r0
 8003876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff ff31 	bl	80036e4 <__NVIC_EnableIRQ>
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ffa2 	bl	80037dc <SysTick_Config>
 8003898:	4603      	mov	r3, r0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038b0:	f7ff f970 	bl	8002b94 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e099      	b.n	80039f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e0:	e00f      	b.n	8003902 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038e2:	f7ff f957 	bl	8002b94 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d908      	bls.n	8003902 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2203      	movs	r2, #3
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e078      	b.n	80039f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e8      	bne.n	80038e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4b38      	ldr	r3, [pc, #224]	; (80039fc <HAL_DMA_Init+0x158>)
 800391c:	4013      	ands	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800392e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800393a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003946:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	2b04      	cmp	r3, #4
 800395a:	d107      	bne.n	800396c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	4313      	orrs	r3, r2
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f023 0307 	bic.w	r3, r3, #7
 8003982:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	2b04      	cmp	r3, #4
 8003994:	d117      	bne.n	80039c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00e      	beq.n	80039c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fb01 	bl	8003fb0 <DMA_CheckFifoParam>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2240      	movs	r2, #64	; 0x40
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039c2:	2301      	movs	r3, #1
 80039c4:	e016      	b.n	80039f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fab8 	bl	8003f44 <DMA_CalcBaseAndBitshift>
 80039d4:	4603      	mov	r3, r0
 80039d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	223f      	movs	r2, #63	; 0x3f
 80039de:	409a      	lsls	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	f010803f 	.word	0xf010803f

08003a00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <HAL_DMA_Start_IT+0x26>
 8003a22:	2302      	movs	r3, #2
 8003a24:	e040      	b.n	8003aa8 <HAL_DMA_Start_IT+0xa8>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d12f      	bne.n	8003a9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fa4a 	bl	8003ee8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	223f      	movs	r2, #63	; 0x3f
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0216 	orr.w	r2, r2, #22
 8003a6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0208 	orr.w	r2, r2, #8
 8003a86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e005      	b.n	8003aa6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003abe:	f7ff f869 	bl	8002b94 <HAL_GetTick>
 8003ac2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d008      	beq.n	8003ae2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2280      	movs	r2, #128	; 0x80
 8003ad4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e052      	b.n	8003b88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0216 	bic.w	r2, r2, #22
 8003af0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <HAL_DMA_Abort+0x62>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0208 	bic.w	r2, r2, #8
 8003b20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b32:	e013      	b.n	8003b5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b34:	f7ff f82e 	bl	8002b94 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b05      	cmp	r3, #5
 8003b40:	d90c      	bls.n	8003b5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e015      	b.n	8003b88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e4      	bne.n	8003b34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	223f      	movs	r2, #63	; 0x3f
 8003b70:	409a      	lsls	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d004      	beq.n	8003bae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2280      	movs	r2, #128	; 0x80
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e00c      	b.n	8003bc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2205      	movs	r2, #5
 8003bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003be0:	4b92      	ldr	r3, [pc, #584]	; (8003e2c <HAL_DMA_IRQHandler+0x258>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a92      	ldr	r2, [pc, #584]	; (8003e30 <HAL_DMA_IRQHandler+0x25c>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	0a9b      	lsrs	r3, r3, #10
 8003bec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfe:	2208      	movs	r2, #8
 8003c00:	409a      	lsls	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d01a      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0204 	bic.w	r2, r2, #4
 8003c26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	f043 0201 	orr.w	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c44:	2201      	movs	r2, #1
 8003c46:	409a      	lsls	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d012      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c62:	2201      	movs	r2, #1
 8003c64:	409a      	lsls	r2, r3
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6e:	f043 0202 	orr.w	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d012      	beq.n	8003cac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00b      	beq.n	8003cac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	2204      	movs	r2, #4
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	f043 0204 	orr.w	r2, r3, #4
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d043      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d03c      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cce:	2210      	movs	r2, #16
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d018      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d108      	bne.n	8003d04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d024      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	4798      	blx	r3
 8003d02:	e01f      	b.n	8003d44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01b      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4798      	blx	r3
 8003d14:	e016      	b.n	8003d44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d107      	bne.n	8003d34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0208 	bic.w	r2, r2, #8
 8003d32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	2220      	movs	r2, #32
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 808e 	beq.w	8003e72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8086 	beq.w	8003e72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d136      	bne.n	8003dec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0216 	bic.w	r2, r2, #22
 8003d8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <HAL_DMA_IRQHandler+0x1da>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d007      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0208 	bic.w	r2, r2, #8
 8003dbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc2:	223f      	movs	r2, #63	; 0x3f
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d07d      	beq.n	8003ede <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
        }
        return;
 8003dea:	e078      	b.n	8003ede <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01c      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d108      	bne.n	8003e1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d030      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
 8003e18:	e02b      	b.n	8003e72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d027      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
 8003e2a:	e022      	b.n	8003e72 <HAL_DMA_IRQHandler+0x29e>
 8003e2c:	20000014 	.word	0x20000014
 8003e30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10f      	bne.n	8003e62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0210 	bic.w	r2, r2, #16
 8003e50:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d032      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d022      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2205      	movs	r2, #5
 8003e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0201 	bic.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d307      	bcc.n	8003eba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f2      	bne.n	8003e9e <HAL_DMA_IRQHandler+0x2ca>
 8003eb8:	e000      	b.n	8003ebc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003eba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
 8003edc:	e000      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003ede:	bf00      	nop
    }
  }
}
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop

08003ee8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d108      	bne.n	8003f28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f26:	e007      	b.n	8003f38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	60da      	str	r2, [r3, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	3b10      	subs	r3, #16
 8003f54:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <DMA_CalcBaseAndBitshift+0x64>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f5e:	4a13      	ldr	r2, [pc, #76]	; (8003fac <DMA_CalcBaseAndBitshift+0x68>)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d909      	bls.n	8003f86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	1d1a      	adds	r2, r3, #4
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	659a      	str	r2, [r3, #88]	; 0x58
 8003f84:	e007      	b.n	8003f96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f8e:	f023 0303 	bic.w	r3, r3, #3
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	aaaaaaab 	.word	0xaaaaaaab
 8003fac:	08006fc0 	.word	0x08006fc0

08003fb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d11f      	bne.n	800400a <DMA_CheckFifoParam+0x5a>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d856      	bhi.n	800407e <DMA_CheckFifoParam+0xce>
 8003fd0:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <DMA_CheckFifoParam+0x28>)
 8003fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd6:	bf00      	nop
 8003fd8:	08003fe9 	.word	0x08003fe9
 8003fdc:	08003ffb 	.word	0x08003ffb
 8003fe0:	08003fe9 	.word	0x08003fe9
 8003fe4:	0800407f 	.word	0x0800407f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d046      	beq.n	8004082 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff8:	e043      	b.n	8004082 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004002:	d140      	bne.n	8004086 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004008:	e03d      	b.n	8004086 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004012:	d121      	bne.n	8004058 <DMA_CheckFifoParam+0xa8>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b03      	cmp	r3, #3
 8004018:	d837      	bhi.n	800408a <DMA_CheckFifoParam+0xda>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <DMA_CheckFifoParam+0x70>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004031 	.word	0x08004031
 8004024:	08004037 	.word	0x08004037
 8004028:	08004031 	.word	0x08004031
 800402c:	08004049 	.word	0x08004049
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
      break;
 8004034:	e030      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d025      	beq.n	800408e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004046:	e022      	b.n	800408e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004050:	d11f      	bne.n	8004092 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004056:	e01c      	b.n	8004092 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d903      	bls.n	8004066 <DMA_CheckFifoParam+0xb6>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d003      	beq.n	800406c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004064:	e018      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
      break;
 800406a:	e015      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00e      	beq.n	8004096 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	73fb      	strb	r3, [r7, #15]
      break;
 800407c:	e00b      	b.n	8004096 <DMA_CheckFifoParam+0xe6>
      break;
 800407e:	bf00      	nop
 8004080:	e00a      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
      break;
 8004082:	bf00      	nop
 8004084:	e008      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
      break;
 8004086:	bf00      	nop
 8004088:	e006      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
      break;
 800408a:	bf00      	nop
 800408c:	e004      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
      break;
 800408e:	bf00      	nop
 8004090:	e002      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
      break;   
 8004092:	bf00      	nop
 8004094:	e000      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
      break;
 8004096:	bf00      	nop
    }
  } 
  
  return status; 
 8004098:	7bfb      	ldrb	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop

080040a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b089      	sub	sp, #36	; 0x24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	e165      	b.n	8004390 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040c4:	2201      	movs	r2, #1
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4013      	ands	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	429a      	cmp	r2, r3
 80040de:	f040 8154 	bne.w	800438a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d005      	beq.n	80040fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d130      	bne.n	800415c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	2203      	movs	r2, #3
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4313      	orrs	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004130:	2201      	movs	r2, #1
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4013      	ands	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 0201 	and.w	r2, r3, #1
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4313      	orrs	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	2b03      	cmp	r3, #3
 8004166:	d017      	beq.n	8004198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	2203      	movs	r2, #3
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4313      	orrs	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d123      	bne.n	80041ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	08da      	lsrs	r2, r3, #3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3208      	adds	r2, #8
 80041ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	220f      	movs	r2, #15
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	43db      	mvns	r3, r3
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4013      	ands	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4313      	orrs	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	08da      	lsrs	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3208      	adds	r2, #8
 80041e6:	69b9      	ldr	r1, [r7, #24]
 80041e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	2203      	movs	r2, #3
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4013      	ands	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 0203 	and.w	r2, r3, #3
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4313      	orrs	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80ae 	beq.w	800438a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	4b5d      	ldr	r3, [pc, #372]	; (80043a8 <HAL_GPIO_Init+0x300>)
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	4a5c      	ldr	r2, [pc, #368]	; (80043a8 <HAL_GPIO_Init+0x300>)
 8004238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800423c:	6453      	str	r3, [r2, #68]	; 0x44
 800423e:	4b5a      	ldr	r3, [pc, #360]	; (80043a8 <HAL_GPIO_Init+0x300>)
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800424a:	4a58      	ldr	r2, [pc, #352]	; (80043ac <HAL_GPIO_Init+0x304>)
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	089b      	lsrs	r3, r3, #2
 8004250:	3302      	adds	r3, #2
 8004252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	220f      	movs	r2, #15
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4013      	ands	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a4f      	ldr	r2, [pc, #316]	; (80043b0 <HAL_GPIO_Init+0x308>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d025      	beq.n	80042c2 <HAL_GPIO_Init+0x21a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a4e      	ldr	r2, [pc, #312]	; (80043b4 <HAL_GPIO_Init+0x30c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01f      	beq.n	80042be <HAL_GPIO_Init+0x216>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a4d      	ldr	r2, [pc, #308]	; (80043b8 <HAL_GPIO_Init+0x310>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d019      	beq.n	80042ba <HAL_GPIO_Init+0x212>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a4c      	ldr	r2, [pc, #304]	; (80043bc <HAL_GPIO_Init+0x314>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <HAL_GPIO_Init+0x20e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a4b      	ldr	r2, [pc, #300]	; (80043c0 <HAL_GPIO_Init+0x318>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00d      	beq.n	80042b2 <HAL_GPIO_Init+0x20a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a4a      	ldr	r2, [pc, #296]	; (80043c4 <HAL_GPIO_Init+0x31c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d007      	beq.n	80042ae <HAL_GPIO_Init+0x206>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a49      	ldr	r2, [pc, #292]	; (80043c8 <HAL_GPIO_Init+0x320>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <HAL_GPIO_Init+0x202>
 80042a6:	2306      	movs	r3, #6
 80042a8:	e00c      	b.n	80042c4 <HAL_GPIO_Init+0x21c>
 80042aa:	2307      	movs	r3, #7
 80042ac:	e00a      	b.n	80042c4 <HAL_GPIO_Init+0x21c>
 80042ae:	2305      	movs	r3, #5
 80042b0:	e008      	b.n	80042c4 <HAL_GPIO_Init+0x21c>
 80042b2:	2304      	movs	r3, #4
 80042b4:	e006      	b.n	80042c4 <HAL_GPIO_Init+0x21c>
 80042b6:	2303      	movs	r3, #3
 80042b8:	e004      	b.n	80042c4 <HAL_GPIO_Init+0x21c>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e002      	b.n	80042c4 <HAL_GPIO_Init+0x21c>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <HAL_GPIO_Init+0x21c>
 80042c2:	2300      	movs	r3, #0
 80042c4:	69fa      	ldr	r2, [r7, #28]
 80042c6:	f002 0203 	and.w	r2, r2, #3
 80042ca:	0092      	lsls	r2, r2, #2
 80042cc:	4093      	lsls	r3, r2
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042d4:	4935      	ldr	r1, [pc, #212]	; (80043ac <HAL_GPIO_Init+0x304>)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	089b      	lsrs	r3, r3, #2
 80042da:	3302      	adds	r3, #2
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042e2:	4b3a      	ldr	r3, [pc, #232]	; (80043cc <HAL_GPIO_Init+0x324>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	43db      	mvns	r3, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4013      	ands	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004306:	4a31      	ldr	r2, [pc, #196]	; (80043cc <HAL_GPIO_Init+0x324>)
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800430c:	4b2f      	ldr	r3, [pc, #188]	; (80043cc <HAL_GPIO_Init+0x324>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	43db      	mvns	r3, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004330:	4a26      	ldr	r2, [pc, #152]	; (80043cc <HAL_GPIO_Init+0x324>)
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004336:	4b25      	ldr	r3, [pc, #148]	; (80043cc <HAL_GPIO_Init+0x324>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800435a:	4a1c      	ldr	r2, [pc, #112]	; (80043cc <HAL_GPIO_Init+0x324>)
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004360:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <HAL_GPIO_Init+0x324>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004384:	4a11      	ldr	r2, [pc, #68]	; (80043cc <HAL_GPIO_Init+0x324>)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3301      	adds	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	2b0f      	cmp	r3, #15
 8004394:	f67f ae96 	bls.w	80040c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	3724      	adds	r7, #36	; 0x24
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800
 80043ac:	40013800 	.word	0x40013800
 80043b0:	40020000 	.word	0x40020000
 80043b4:	40020400 	.word	0x40020400
 80043b8:	40020800 	.word	0x40020800
 80043bc:	40020c00 	.word	0x40020c00
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40021400 	.word	0x40021400
 80043c8:	40021800 	.word	0x40021800
 80043cc:	40013c00 	.word	0x40013c00

080043d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	887b      	ldrh	r3, [r7, #2]
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
 80043ec:	e001      	b.n	80043f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ee:	2300      	movs	r3, #0
 80043f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	807b      	strh	r3, [r7, #2]
 800440c:	4613      	mov	r3, r2
 800440e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004410:	787b      	ldrb	r3, [r7, #1]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800441c:	e003      	b.n	8004426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800441e:	887b      	ldrh	r3, [r7, #2]
 8004420:	041a      	lsls	r2, r3, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	619a      	str	r2, [r3, #24]
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0cc      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b68      	ldr	r3, [pc, #416]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d90c      	bls.n	8004470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b65      	ldr	r3, [pc, #404]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b63      	ldr	r3, [pc, #396]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0b8      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d020      	beq.n	80044be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004488:	4b59      	ldr	r3, [pc, #356]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a58      	ldr	r2, [pc, #352]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a0:	4b53      	ldr	r3, [pc, #332]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a52      	ldr	r2, [pc, #328]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ac:	4b50      	ldr	r3, [pc, #320]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	494d      	ldr	r1, [pc, #308]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d044      	beq.n	8004554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	4b47      	ldr	r3, [pc, #284]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d119      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e07f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d003      	beq.n	80044f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f2:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e06f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004502:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e067      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004512:	4b37      	ldr	r3, [pc, #220]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f023 0203 	bic.w	r2, r3, #3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4934      	ldr	r1, [pc, #208]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	4313      	orrs	r3, r2
 8004522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004524:	f7fe fb36 	bl	8002b94 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452a:	e00a      	b.n	8004542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452c:	f7fe fb32 	bl	8002b94 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e04f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 020c 	and.w	r2, r3, #12
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	429a      	cmp	r2, r3
 8004552:	d1eb      	bne.n	800452c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004554:	4b25      	ldr	r3, [pc, #148]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d20c      	bcs.n	800457c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b22      	ldr	r3, [pc, #136]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e032      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004588:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4916      	ldr	r1, [pc, #88]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	490e      	ldr	r1, [pc, #56]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ba:	f000 f855 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 80045be:	4602      	mov	r2, r0
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	490a      	ldr	r1, [pc, #40]	; (80045f4 <HAL_RCC_ClockConfig+0x1c0>)
 80045cc:	5ccb      	ldrb	r3, [r1, r3]
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	4a09      	ldr	r2, [pc, #36]	; (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_RCC_ClockConfig+0x1c8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe fa96 	bl	8002b0c <HAL_InitTick>

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023c00 	.word	0x40023c00
 80045f0:	40023800 	.word	0x40023800
 80045f4:	08006fa8 	.word	0x08006fa8
 80045f8:	20000014 	.word	0x20000014
 80045fc:	2000001c 	.word	0x2000001c

08004600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_RCC_GetHCLKFreq+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000014 	.word	0x20000014

08004618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800461c:	f7ff fff0 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004620:	4602      	mov	r2, r0
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	0a9b      	lsrs	r3, r3, #10
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	4903      	ldr	r1, [pc, #12]	; (800463c <HAL_RCC_GetPCLK1Freq+0x24>)
 800462e:	5ccb      	ldrb	r3, [r1, r3]
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40023800 	.word	0x40023800
 800463c:	08006fb8 	.word	0x08006fb8

08004640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004644:	f7ff ffdc 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0b5b      	lsrs	r3, r3, #13
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4903      	ldr	r1, [pc, #12]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	08006fb8 	.word	0x08006fb8

08004668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800466c:	b088      	sub	sp, #32
 800466e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004684:	4bce      	ldr	r3, [pc, #824]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 030c 	and.w	r3, r3, #12
 800468c:	2b0c      	cmp	r3, #12
 800468e:	f200 818d 	bhi.w	80049ac <HAL_RCC_GetSysClockFreq+0x344>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <HAL_RCC_GetSysClockFreq+0x30>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	080046cd 	.word	0x080046cd
 800469c:	080049ad 	.word	0x080049ad
 80046a0:	080049ad 	.word	0x080049ad
 80046a4:	080049ad 	.word	0x080049ad
 80046a8:	080046d3 	.word	0x080046d3
 80046ac:	080049ad 	.word	0x080049ad
 80046b0:	080049ad 	.word	0x080049ad
 80046b4:	080049ad 	.word	0x080049ad
 80046b8:	080046d9 	.word	0x080046d9
 80046bc:	080049ad 	.word	0x080049ad
 80046c0:	080049ad 	.word	0x080049ad
 80046c4:	080049ad 	.word	0x080049ad
 80046c8:	0800484d 	.word	0x0800484d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046cc:	4bbd      	ldr	r3, [pc, #756]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80046ce:	61bb      	str	r3, [r7, #24]
       break;
 80046d0:	e16f      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046d2:	4bbd      	ldr	r3, [pc, #756]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x360>)
 80046d4:	61bb      	str	r3, [r7, #24]
      break;
 80046d6:	e16c      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046d8:	4bb9      	ldr	r3, [pc, #740]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046e0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046e2:	4bb7      	ldr	r3, [pc, #732]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d053      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ee:	4bb4      	ldr	r3, [pc, #720]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	099b      	lsrs	r3, r3, #6
 80046f4:	461a      	mov	r2, r3
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046fe:	f04f 0100 	mov.w	r1, #0
 8004702:	ea02 0400 	and.w	r4, r2, r0
 8004706:	603c      	str	r4, [r7, #0]
 8004708:	400b      	ands	r3, r1
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004710:	4620      	mov	r0, r4
 8004712:	4629      	mov	r1, r5
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	014b      	lsls	r3, r1, #5
 800471e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004722:	0142      	lsls	r2, r0, #5
 8004724:	4610      	mov	r0, r2
 8004726:	4619      	mov	r1, r3
 8004728:	4623      	mov	r3, r4
 800472a:	1ac0      	subs	r0, r0, r3
 800472c:	462b      	mov	r3, r5
 800472e:	eb61 0103 	sbc.w	r1, r1, r3
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	018b      	lsls	r3, r1, #6
 800473c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004740:	0182      	lsls	r2, r0, #6
 8004742:	1a12      	subs	r2, r2, r0
 8004744:	eb63 0301 	sbc.w	r3, r3, r1
 8004748:	f04f 0000 	mov.w	r0, #0
 800474c:	f04f 0100 	mov.w	r1, #0
 8004750:	00d9      	lsls	r1, r3, #3
 8004752:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004756:	00d0      	lsls	r0, r2, #3
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4621      	mov	r1, r4
 800475e:	1852      	adds	r2, r2, r1
 8004760:	4629      	mov	r1, r5
 8004762:	eb43 0101 	adc.w	r1, r3, r1
 8004766:	460b      	mov	r3, r1
 8004768:	f04f 0000 	mov.w	r0, #0
 800476c:	f04f 0100 	mov.w	r1, #0
 8004770:	0259      	lsls	r1, r3, #9
 8004772:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004776:	0250      	lsls	r0, r2, #9
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4610      	mov	r0, r2
 800477e:	4619      	mov	r1, r3
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	461a      	mov	r2, r3
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	f7fc f9bc 	bl	8000b04 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4613      	mov	r3, r2
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	e04c      	b.n	8004830 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004796:	4b8a      	ldr	r3, [pc, #552]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	099b      	lsrs	r3, r3, #6
 800479c:	461a      	mov	r2, r3
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047a6:	f04f 0100 	mov.w	r1, #0
 80047aa:	ea02 0a00 	and.w	sl, r2, r0
 80047ae:	ea03 0b01 	and.w	fp, r3, r1
 80047b2:	4650      	mov	r0, sl
 80047b4:	4659      	mov	r1, fp
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	014b      	lsls	r3, r1, #5
 80047c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047c4:	0142      	lsls	r2, r0, #5
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	ebb0 000a 	subs.w	r0, r0, sl
 80047ce:	eb61 010b 	sbc.w	r1, r1, fp
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	018b      	lsls	r3, r1, #6
 80047dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047e0:	0182      	lsls	r2, r0, #6
 80047e2:	1a12      	subs	r2, r2, r0
 80047e4:	eb63 0301 	sbc.w	r3, r3, r1
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	00d9      	lsls	r1, r3, #3
 80047f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047f6:	00d0      	lsls	r0, r2, #3
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	eb12 020a 	adds.w	r2, r2, sl
 8004800:	eb43 030b 	adc.w	r3, r3, fp
 8004804:	f04f 0000 	mov.w	r0, #0
 8004808:	f04f 0100 	mov.w	r1, #0
 800480c:	0299      	lsls	r1, r3, #10
 800480e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004812:	0290      	lsls	r0, r2, #10
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4610      	mov	r0, r2
 800481a:	4619      	mov	r1, r3
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	461a      	mov	r2, r3
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	f7fc f96e 	bl	8000b04 <__aeabi_uldivmod>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4613      	mov	r3, r2
 800482e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004830:	4b63      	ldr	r3, [pc, #396]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	0c1b      	lsrs	r3, r3, #16
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	3301      	adds	r3, #1
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	61bb      	str	r3, [r7, #24]
      break;
 800484a:	e0b2      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800484c:	4b5c      	ldr	r3, [pc, #368]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x358>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004854:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004856:	4b5a      	ldr	r3, [pc, #360]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d04d      	beq.n	80048fe <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004862:	4b57      	ldr	r3, [pc, #348]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	099b      	lsrs	r3, r3, #6
 8004868:	461a      	mov	r2, r3
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	ea02 0800 	and.w	r8, r2, r0
 800487a:	ea03 0901 	and.w	r9, r3, r1
 800487e:	4640      	mov	r0, r8
 8004880:	4649      	mov	r1, r9
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	014b      	lsls	r3, r1, #5
 800488c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004890:	0142      	lsls	r2, r0, #5
 8004892:	4610      	mov	r0, r2
 8004894:	4619      	mov	r1, r3
 8004896:	ebb0 0008 	subs.w	r0, r0, r8
 800489a:	eb61 0109 	sbc.w	r1, r1, r9
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	018b      	lsls	r3, r1, #6
 80048a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048ac:	0182      	lsls	r2, r0, #6
 80048ae:	1a12      	subs	r2, r2, r0
 80048b0:	eb63 0301 	sbc.w	r3, r3, r1
 80048b4:	f04f 0000 	mov.w	r0, #0
 80048b8:	f04f 0100 	mov.w	r1, #0
 80048bc:	00d9      	lsls	r1, r3, #3
 80048be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048c2:	00d0      	lsls	r0, r2, #3
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	eb12 0208 	adds.w	r2, r2, r8
 80048cc:	eb43 0309 	adc.w	r3, r3, r9
 80048d0:	f04f 0000 	mov.w	r0, #0
 80048d4:	f04f 0100 	mov.w	r1, #0
 80048d8:	0259      	lsls	r1, r3, #9
 80048da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80048de:	0250      	lsls	r0, r2, #9
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4610      	mov	r0, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	f7fc f908 	bl	8000b04 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4613      	mov	r3, r2
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	e04a      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fe:	4b30      	ldr	r3, [pc, #192]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	099b      	lsrs	r3, r3, #6
 8004904:	461a      	mov	r2, r3
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800490e:	f04f 0100 	mov.w	r1, #0
 8004912:	ea02 0400 	and.w	r4, r2, r0
 8004916:	ea03 0501 	and.w	r5, r3, r1
 800491a:	4620      	mov	r0, r4
 800491c:	4629      	mov	r1, r5
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	014b      	lsls	r3, r1, #5
 8004928:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800492c:	0142      	lsls	r2, r0, #5
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	1b00      	subs	r0, r0, r4
 8004934:	eb61 0105 	sbc.w	r1, r1, r5
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	018b      	lsls	r3, r1, #6
 8004942:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004946:	0182      	lsls	r2, r0, #6
 8004948:	1a12      	subs	r2, r2, r0
 800494a:	eb63 0301 	sbc.w	r3, r3, r1
 800494e:	f04f 0000 	mov.w	r0, #0
 8004952:	f04f 0100 	mov.w	r1, #0
 8004956:	00d9      	lsls	r1, r3, #3
 8004958:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800495c:	00d0      	lsls	r0, r2, #3
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	1912      	adds	r2, r2, r4
 8004964:	eb45 0303 	adc.w	r3, r5, r3
 8004968:	f04f 0000 	mov.w	r0, #0
 800496c:	f04f 0100 	mov.w	r1, #0
 8004970:	0299      	lsls	r1, r3, #10
 8004972:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004976:	0290      	lsls	r0, r2, #10
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4610      	mov	r0, r2
 800497e:	4619      	mov	r1, r3
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	461a      	mov	r2, r3
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	f7fc f8bc 	bl	8000b04 <__aeabi_uldivmod>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4613      	mov	r3, r2
 8004992:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004994:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	0f1b      	lsrs	r3, r3, #28
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	61bb      	str	r3, [r7, #24]
      break;
 80049aa:	e002      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80049ae:	61bb      	str	r3, [r7, #24]
      break;
 80049b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049b2:	69bb      	ldr	r3, [r7, #24]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800
 80049c4:	00f42400 	.word	0x00f42400
 80049c8:	007a1200 	.word	0x007a1200

080049cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e28d      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 8083 	beq.w	8004af2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049ec:	4b94      	ldr	r3, [pc, #592]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 030c 	and.w	r3, r3, #12
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d019      	beq.n	8004a2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049f8:	4b91      	ldr	r3, [pc, #580]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d106      	bne.n	8004a12 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a04:	4b8e      	ldr	r3, [pc, #568]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a10:	d00c      	beq.n	8004a2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a12:	4b8b      	ldr	r3, [pc, #556]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d112      	bne.n	8004a44 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a1e:	4b88      	ldr	r3, [pc, #544]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a2a:	d10b      	bne.n	8004a44 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2c:	4b84      	ldr	r3, [pc, #528]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d05b      	beq.n	8004af0 <HAL_RCC_OscConfig+0x124>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d157      	bne.n	8004af0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e25a      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d106      	bne.n	8004a5c <HAL_RCC_OscConfig+0x90>
 8004a4e:	4b7c      	ldr	r3, [pc, #496]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a7b      	ldr	r2, [pc, #492]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e01d      	b.n	8004a98 <HAL_RCC_OscConfig+0xcc>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0xb4>
 8004a66:	4b76      	ldr	r3, [pc, #472]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a75      	ldr	r2, [pc, #468]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4b73      	ldr	r3, [pc, #460]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a72      	ldr	r2, [pc, #456]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e00b      	b.n	8004a98 <HAL_RCC_OscConfig+0xcc>
 8004a80:	4b6f      	ldr	r3, [pc, #444]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a6e      	ldr	r2, [pc, #440]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	4b6c      	ldr	r3, [pc, #432]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a6b      	ldr	r2, [pc, #428]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d013      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fe f878 	bl	8002b94 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa8:	f7fe f874 	bl	8002b94 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	; 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e21f      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	4b61      	ldr	r3, [pc, #388]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xdc>
 8004ac6:	e014      	b.n	8004af2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fe f864 	bl	8002b94 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7fe f860 	bl	8002b94 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	; 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e20b      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae2:	4b57      	ldr	r3, [pc, #348]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x104>
 8004aee:	e000      	b.n	8004af2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d06f      	beq.n	8004bde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004afe:	4b50      	ldr	r3, [pc, #320]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d017      	beq.n	8004b3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b0a:	4b4d      	ldr	r3, [pc, #308]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d105      	bne.n	8004b22 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b16:	4b4a      	ldr	r3, [pc, #296]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b22:	4b47      	ldr	r3, [pc, #284]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	d11c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b2e:	4b44      	ldr	r3, [pc, #272]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d116      	bne.n	8004b68 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3a:	4b41      	ldr	r3, [pc, #260]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_RCC_OscConfig+0x186>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d001      	beq.n	8004b52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e1d3      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b52:	4b3b      	ldr	r3, [pc, #236]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4937      	ldr	r1, [pc, #220]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b66:	e03a      	b.n	8004bde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d020      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b70:	4b34      	ldr	r3, [pc, #208]	; (8004c44 <HAL_RCC_OscConfig+0x278>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fe f80d 	bl	8002b94 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b7e:	f7fe f809 	bl	8002b94 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e1b4      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b90:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9c:	4b28      	ldr	r3, [pc, #160]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4925      	ldr	r1, [pc, #148]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]
 8004bb0:	e015      	b.n	8004bde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb2:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <HAL_RCC_OscConfig+0x278>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fd ffec 	bl	8002b94 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc0:	f7fd ffe8 	bl	8002b94 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e193      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d036      	beq.n	8004c58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d016      	beq.n	8004c20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf2:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <HAL_RCC_OscConfig+0x27c>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fd ffcc 	bl	8002b94 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c00:	f7fd ffc8 	bl	8002b94 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e173      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <HAL_RCC_OscConfig+0x274>)
 8004c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0x234>
 8004c1e:	e01b      	b.n	8004c58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCC_OscConfig+0x27c>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c26:	f7fd ffb5 	bl	8002b94 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c2c:	e00e      	b.n	8004c4c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c2e:	f7fd ffb1 	bl	8002b94 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d907      	bls.n	8004c4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e15c      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
 8004c40:	40023800 	.word	0x40023800
 8004c44:	42470000 	.word	0x42470000
 8004c48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c4c:	4b8a      	ldr	r3, [pc, #552]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1ea      	bne.n	8004c2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8097 	beq.w	8004d94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c66:	2300      	movs	r3, #0
 8004c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c6a:	4b83      	ldr	r3, [pc, #524]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10f      	bne.n	8004c96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	4b7f      	ldr	r3, [pc, #508]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	4a7e      	ldr	r2, [pc, #504]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c84:	6413      	str	r3, [r2, #64]	; 0x40
 8004c86:	4b7c      	ldr	r3, [pc, #496]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c92:	2301      	movs	r3, #1
 8004c94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c96:	4b79      	ldr	r3, [pc, #484]	; (8004e7c <HAL_RCC_OscConfig+0x4b0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d118      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ca2:	4b76      	ldr	r3, [pc, #472]	; (8004e7c <HAL_RCC_OscConfig+0x4b0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a75      	ldr	r2, [pc, #468]	; (8004e7c <HAL_RCC_OscConfig+0x4b0>)
 8004ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cae:	f7fd ff71 	bl	8002b94 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb6:	f7fd ff6d 	bl	8002b94 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e118      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc8:	4b6c      	ldr	r3, [pc, #432]	; (8004e7c <HAL_RCC_OscConfig+0x4b0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d106      	bne.n	8004cea <HAL_RCC_OscConfig+0x31e>
 8004cdc:	4b66      	ldr	r3, [pc, #408]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	4a65      	ldr	r2, [pc, #404]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce8:	e01c      	b.n	8004d24 <HAL_RCC_OscConfig+0x358>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b05      	cmp	r3, #5
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCC_OscConfig+0x340>
 8004cf2:	4b61      	ldr	r3, [pc, #388]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf6:	4a60      	ldr	r2, [pc, #384]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004cf8:	f043 0304 	orr.w	r3, r3, #4
 8004cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cfe:	4b5e      	ldr	r3, [pc, #376]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	4a5d      	ldr	r2, [pc, #372]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	6713      	str	r3, [r2, #112]	; 0x70
 8004d0a:	e00b      	b.n	8004d24 <HAL_RCC_OscConfig+0x358>
 8004d0c:	4b5a      	ldr	r3, [pc, #360]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d10:	4a59      	ldr	r2, [pc, #356]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	6713      	str	r3, [r2, #112]	; 0x70
 8004d18:	4b57      	ldr	r3, [pc, #348]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1c:	4a56      	ldr	r2, [pc, #344]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d1e:	f023 0304 	bic.w	r3, r3, #4
 8004d22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d015      	beq.n	8004d58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2c:	f7fd ff32 	bl	8002b94 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d32:	e00a      	b.n	8004d4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d34:	f7fd ff2e 	bl	8002b94 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e0d7      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4a:	4b4b      	ldr	r3, [pc, #300]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0ee      	beq.n	8004d34 <HAL_RCC_OscConfig+0x368>
 8004d56:	e014      	b.n	8004d82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d58:	f7fd ff1c 	bl	8002b94 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d60:	f7fd ff18 	bl	8002b94 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e0c1      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d76:	4b40      	ldr	r3, [pc, #256]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ee      	bne.n	8004d60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d105      	bne.n	8004d94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d88:	4b3b      	ldr	r3, [pc, #236]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	4a3a      	ldr	r2, [pc, #232]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80ad 	beq.w	8004ef8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d9e:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d060      	beq.n	8004e6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d145      	bne.n	8004e3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db2:	4b33      	ldr	r3, [pc, #204]	; (8004e80 <HAL_RCC_OscConfig+0x4b4>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fd feec 	bl	8002b94 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fd fee8 	bl	8002b94 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e093      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	4b29      	ldr	r3, [pc, #164]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	019b      	lsls	r3, r3, #6
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	085b      	lsrs	r3, r3, #1
 8004df6:	3b01      	subs	r3, #1
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	061b      	lsls	r3, r3, #24
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	071b      	lsls	r3, r3, #28
 8004e0a:	491b      	ldr	r1, [pc, #108]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <HAL_RCC_OscConfig+0x4b4>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e16:	f7fd febd 	bl	8002b94 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e1e:	f7fd feb9 	bl	8002b94 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e064      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e30:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <HAL_RCC_OscConfig+0x452>
 8004e3c:	e05c      	b.n	8004ef8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <HAL_RCC_OscConfig+0x4b4>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fd fea6 	bl	8002b94 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e4c:	f7fd fea2 	bl	8002b94 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e04d      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_RCC_OscConfig+0x4ac>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x480>
 8004e6a:	e045      	b.n	8004ef8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d107      	bne.n	8004e84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e040      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	40007000 	.word	0x40007000
 8004e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e84:	4b1f      	ldr	r3, [pc, #124]	; (8004f04 <HAL_RCC_OscConfig+0x538>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d030      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d129      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d122      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d119      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	085b      	lsrs	r3, r3, #1
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d10f      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d107      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d001      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40023800 	.word	0x40023800

08004f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e041      	b.n	8004f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fc ff6c 	bl	8001e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f000 fc7a 	bl	8005840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d001      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e04e      	b.n	800505e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a23      	ldr	r2, [pc, #140]	; (800506c <HAL_TIM_Base_Start_IT+0xc4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d022      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fea:	d01d      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d018      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1e      	ldr	r2, [pc, #120]	; (8005074 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d013      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1c      	ldr	r2, [pc, #112]	; (8005078 <HAL_TIM_Base_Start_IT+0xd0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00e      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1b      	ldr	r2, [pc, #108]	; (800507c <HAL_TIM_Base_Start_IT+0xd4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a19      	ldr	r2, [pc, #100]	; (8005080 <HAL_TIM_Base_Start_IT+0xd8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0x80>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a18      	ldr	r2, [pc, #96]	; (8005084 <HAL_TIM_Base_Start_IT+0xdc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d111      	bne.n	800504c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b06      	cmp	r3, #6
 8005038:	d010      	beq.n	800505c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0201 	orr.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	e007      	b.n	800505c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	40000400 	.word	0x40000400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40010400 	.word	0x40010400
 8005080:	40014000 	.word	0x40014000
 8005084:	40001800 	.word	0x40001800

08005088 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e041      	b.n	800511e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f839 	bl	8005126 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3304      	adds	r3, #4
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f000 fbba 	bl	8005840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d109      	bne.n	8005160 <HAL_TIM_PWM_Start+0x24>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e022      	b.n	80051a6 <HAL_TIM_PWM_Start+0x6a>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b04      	cmp	r3, #4
 8005164:	d109      	bne.n	800517a <HAL_TIM_PWM_Start+0x3e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	bf14      	ite	ne
 8005172:	2301      	movne	r3, #1
 8005174:	2300      	moveq	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	e015      	b.n	80051a6 <HAL_TIM_PWM_Start+0x6a>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d109      	bne.n	8005194 <HAL_TIM_PWM_Start+0x58>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e008      	b.n	80051a6 <HAL_TIM_PWM_Start+0x6a>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	bf14      	ite	ne
 80051a0:	2301      	movne	r3, #1
 80051a2:	2300      	moveq	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e07c      	b.n	80052a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <HAL_TIM_PWM_Start+0x82>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051bc:	e013      	b.n	80051e6 <HAL_TIM_PWM_Start+0xaa>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d104      	bne.n	80051ce <HAL_TIM_PWM_Start+0x92>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051cc:	e00b      	b.n	80051e6 <HAL_TIM_PWM_Start+0xaa>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d104      	bne.n	80051de <HAL_TIM_PWM_Start+0xa2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051dc:	e003      	b.n	80051e6 <HAL_TIM_PWM_Start+0xaa>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2201      	movs	r2, #1
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fe10 	bl	8005e14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2d      	ldr	r2, [pc, #180]	; (80052b0 <HAL_TIM_PWM_Start+0x174>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_TIM_PWM_Start+0xcc>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a2c      	ldr	r2, [pc, #176]	; (80052b4 <HAL_TIM_PWM_Start+0x178>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d101      	bne.n	800520c <HAL_TIM_PWM_Start+0xd0>
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <HAL_TIM_PWM_Start+0xd2>
 800520c:	2300      	movs	r3, #0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a22      	ldr	r2, [pc, #136]	; (80052b0 <HAL_TIM_PWM_Start+0x174>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d022      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005234:	d01d      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1f      	ldr	r2, [pc, #124]	; (80052b8 <HAL_TIM_PWM_Start+0x17c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d018      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1d      	ldr	r2, [pc, #116]	; (80052bc <HAL_TIM_PWM_Start+0x180>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1c      	ldr	r2, [pc, #112]	; (80052c0 <HAL_TIM_PWM_Start+0x184>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a16      	ldr	r2, [pc, #88]	; (80052b4 <HAL_TIM_PWM_Start+0x178>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d009      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <HAL_TIM_PWM_Start+0x188>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a16      	ldr	r2, [pc, #88]	; (80052c8 <HAL_TIM_PWM_Start+0x18c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d111      	bne.n	8005296 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b06      	cmp	r3, #6
 8005282:	d010      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005294:	e007      	b.n	80052a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40010400 	.word	0x40010400
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800
 80052c0:	40000c00 	.word	0x40000c00
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40001800 	.word	0x40001800

080052cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d122      	bne.n	8005328 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d11b      	bne.n	8005328 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0202 	mvn.w	r2, #2
 80052f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fa77 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 8005314:	e005      	b.n	8005322 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fa69 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fa7a 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b04      	cmp	r3, #4
 8005334:	d122      	bne.n	800537c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b04      	cmp	r3, #4
 8005342:	d11b      	bne.n	800537c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0204 	mvn.w	r2, #4
 800534c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fa4d 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 8005368:	e005      	b.n	8005376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa3f 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fa50 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b08      	cmp	r3, #8
 8005388:	d122      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b08      	cmp	r3, #8
 8005396:	d11b      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0208 	mvn.w	r2, #8
 80053a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2204      	movs	r2, #4
 80053a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa23 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 80053bc:	e005      	b.n	80053ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fa15 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fa26 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d122      	bne.n	8005424 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d11b      	bne.n	8005424 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0210 	mvn.w	r2, #16
 80053f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2208      	movs	r2, #8
 80053fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f9f9 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 8005410:	e005      	b.n	800541e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f9eb 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f9fc 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b01      	cmp	r3, #1
 8005430:	d10e      	bne.n	8005450 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b01      	cmp	r3, #1
 800543e:	d107      	bne.n	8005450 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0201 	mvn.w	r2, #1
 8005448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fc fc30 	bl	8001cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545a:	2b80      	cmp	r3, #128	; 0x80
 800545c:	d10e      	bne.n	800547c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005468:	2b80      	cmp	r3, #128	; 0x80
 800546a:	d107      	bne.n	800547c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fd78 	bl	8005f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005486:	2b40      	cmp	r3, #64	; 0x40
 8005488:	d10e      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b40      	cmp	r3, #64	; 0x40
 8005496:	d107      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f9c1 	bl	800582a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d10e      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d107      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0220 	mvn.w	r2, #32
 80054cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fd42 	bl	8005f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054d4:	bf00      	nop
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e0ae      	b.n	8005658 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b0c      	cmp	r3, #12
 8005506:	f200 809f 	bhi.w	8005648 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800550a:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005545 	.word	0x08005545
 8005514:	08005649 	.word	0x08005649
 8005518:	08005649 	.word	0x08005649
 800551c:	08005649 	.word	0x08005649
 8005520:	08005585 	.word	0x08005585
 8005524:	08005649 	.word	0x08005649
 8005528:	08005649 	.word	0x08005649
 800552c:	08005649 	.word	0x08005649
 8005530:	080055c7 	.word	0x080055c7
 8005534:	08005649 	.word	0x08005649
 8005538:	08005649 	.word	0x08005649
 800553c:	08005649 	.word	0x08005649
 8005540:	08005607 	.word	0x08005607
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fa18 	bl	8005980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0208 	orr.w	r2, r2, #8
 800555e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699a      	ldr	r2, [r3, #24]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0204 	bic.w	r2, r2, #4
 800556e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6999      	ldr	r1, [r3, #24]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	619a      	str	r2, [r3, #24]
      break;
 8005582:	e064      	b.n	800564e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fa68 	bl	8005a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800559e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6999      	ldr	r1, [r3, #24]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	021a      	lsls	r2, r3, #8
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	619a      	str	r2, [r3, #24]
      break;
 80055c4:	e043      	b.n	800564e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68b9      	ldr	r1, [r7, #8]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fabd 	bl	8005b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69da      	ldr	r2, [r3, #28]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0208 	orr.w	r2, r2, #8
 80055e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0204 	bic.w	r2, r2, #4
 80055f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69d9      	ldr	r1, [r3, #28]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	61da      	str	r2, [r3, #28]
      break;
 8005604:	e023      	b.n	800564e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fb11 	bl	8005c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69d9      	ldr	r1, [r3, #28]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	021a      	lsls	r2, r3, #8
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	61da      	str	r2, [r3, #28]
      break;
 8005646:	e002      	b.n	800564e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	75fb      	strb	r3, [r7, #23]
      break;
 800564c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_TIM_ConfigClockSource+0x1c>
 8005678:	2302      	movs	r3, #2
 800567a:	e0b4      	b.n	80057e6 <HAL_TIM_ConfigClockSource+0x186>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800569a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b4:	d03e      	beq.n	8005734 <HAL_TIM_ConfigClockSource+0xd4>
 80056b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ba:	f200 8087 	bhi.w	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c2:	f000 8086 	beq.w	80057d2 <HAL_TIM_ConfigClockSource+0x172>
 80056c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ca:	d87f      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056cc:	2b70      	cmp	r3, #112	; 0x70
 80056ce:	d01a      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0xa6>
 80056d0:	2b70      	cmp	r3, #112	; 0x70
 80056d2:	d87b      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056d4:	2b60      	cmp	r3, #96	; 0x60
 80056d6:	d050      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x11a>
 80056d8:	2b60      	cmp	r3, #96	; 0x60
 80056da:	d877      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056dc:	2b50      	cmp	r3, #80	; 0x50
 80056de:	d03c      	beq.n	800575a <HAL_TIM_ConfigClockSource+0xfa>
 80056e0:	2b50      	cmp	r3, #80	; 0x50
 80056e2:	d873      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056e4:	2b40      	cmp	r3, #64	; 0x40
 80056e6:	d058      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x13a>
 80056e8:	2b40      	cmp	r3, #64	; 0x40
 80056ea:	d86f      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056ec:	2b30      	cmp	r3, #48	; 0x30
 80056ee:	d064      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15a>
 80056f0:	2b30      	cmp	r3, #48	; 0x30
 80056f2:	d86b      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d060      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15a>
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d867      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d05c      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15a>
 8005700:	2b10      	cmp	r3, #16
 8005702:	d05a      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15a>
 8005704:	e062      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6899      	ldr	r1, [r3, #8]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f000 fb5d 	bl	8005dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005728:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	609a      	str	r2, [r3, #8]
      break;
 8005732:	e04f      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	6899      	ldr	r1, [r3, #8]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f000 fb46 	bl	8005dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005756:	609a      	str	r2, [r3, #8]
      break;
 8005758:	e03c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6859      	ldr	r1, [r3, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	461a      	mov	r2, r3
 8005768:	f000 faba 	bl	8005ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2150      	movs	r1, #80	; 0x50
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fb13 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 8005778:	e02c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6859      	ldr	r1, [r3, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	461a      	mov	r2, r3
 8005788:	f000 fad9 	bl	8005d3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2160      	movs	r1, #96	; 0x60
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fb03 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 8005798:	e01c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6859      	ldr	r1, [r3, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f000 fa9a 	bl	8005ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2140      	movs	r1, #64	; 0x40
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 faf3 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 80057b8:	e00c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f000 faea 	bl	8005d9e <TIM_ITRx_SetConfig>
      break;
 80057ca:	e003      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
      break;
 80057d0:	e000      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a40      	ldr	r2, [pc, #256]	; (8005954 <TIM_Base_SetConfig+0x114>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d013      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585e:	d00f      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a3d      	ldr	r2, [pc, #244]	; (8005958 <TIM_Base_SetConfig+0x118>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00b      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a3c      	ldr	r2, [pc, #240]	; (800595c <TIM_Base_SetConfig+0x11c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d007      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a3b      	ldr	r2, [pc, #236]	; (8005960 <TIM_Base_SetConfig+0x120>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3a      	ldr	r2, [pc, #232]	; (8005964 <TIM_Base_SetConfig+0x124>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d108      	bne.n	8005892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2f      	ldr	r2, [pc, #188]	; (8005954 <TIM_Base_SetConfig+0x114>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d02b      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a0:	d027      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2c      	ldr	r2, [pc, #176]	; (8005958 <TIM_Base_SetConfig+0x118>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d023      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2b      	ldr	r2, [pc, #172]	; (800595c <TIM_Base_SetConfig+0x11c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01f      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2a      	ldr	r2, [pc, #168]	; (8005960 <TIM_Base_SetConfig+0x120>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01b      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a29      	ldr	r2, [pc, #164]	; (8005964 <TIM_Base_SetConfig+0x124>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d017      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a28      	ldr	r2, [pc, #160]	; (8005968 <TIM_Base_SetConfig+0x128>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a27      	ldr	r2, [pc, #156]	; (800596c <TIM_Base_SetConfig+0x12c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00f      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a26      	ldr	r2, [pc, #152]	; (8005970 <TIM_Base_SetConfig+0x130>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a25      	ldr	r2, [pc, #148]	; (8005974 <TIM_Base_SetConfig+0x134>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a24      	ldr	r2, [pc, #144]	; (8005978 <TIM_Base_SetConfig+0x138>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a23      	ldr	r2, [pc, #140]	; (800597c <TIM_Base_SetConfig+0x13c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d108      	bne.n	8005904 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a0a      	ldr	r2, [pc, #40]	; (8005954 <TIM_Base_SetConfig+0x114>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <TIM_Base_SetConfig+0xf8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a0c      	ldr	r2, [pc, #48]	; (8005964 <TIM_Base_SetConfig+0x124>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d103      	bne.n	8005940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	615a      	str	r2, [r3, #20]
}
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40010000 	.word	0x40010000
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40010400 	.word	0x40010400
 8005968:	40014000 	.word	0x40014000
 800596c:	40014400 	.word	0x40014400
 8005970:	40014800 	.word	0x40014800
 8005974:	40001800 	.word	0x40001800
 8005978:	40001c00 	.word	0x40001c00
 800597c:	40002000 	.word	0x40002000

08005980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	f023 0201 	bic.w	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f023 0302 	bic.w	r3, r3, #2
 80059c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a20      	ldr	r2, [pc, #128]	; (8005a58 <TIM_OC1_SetConfig+0xd8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_OC1_SetConfig+0x64>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a1f      	ldr	r2, [pc, #124]	; (8005a5c <TIM_OC1_SetConfig+0xdc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d10c      	bne.n	80059fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f023 0308 	bic.w	r3, r3, #8
 80059ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f023 0304 	bic.w	r3, r3, #4
 80059fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a15      	ldr	r2, [pc, #84]	; (8005a58 <TIM_OC1_SetConfig+0xd8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_OC1_SetConfig+0x8e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a14      	ldr	r2, [pc, #80]	; (8005a5c <TIM_OC1_SetConfig+0xdc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d111      	bne.n	8005a32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	621a      	str	r2, [r3, #32]
}
 8005a4c:	bf00      	nop
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	40010400 	.word	0x40010400

08005a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0210 	bic.w	r2, r3, #16
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0320 	bic.w	r3, r3, #32
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a22      	ldr	r2, [pc, #136]	; (8005b44 <TIM_OC2_SetConfig+0xe4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d003      	beq.n	8005ac8 <TIM_OC2_SetConfig+0x68>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a21      	ldr	r2, [pc, #132]	; (8005b48 <TIM_OC2_SetConfig+0xe8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d10d      	bne.n	8005ae4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a17      	ldr	r2, [pc, #92]	; (8005b44 <TIM_OC2_SetConfig+0xe4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC2_SetConfig+0x94>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a16      	ldr	r2, [pc, #88]	; (8005b48 <TIM_OC2_SetConfig+0xe8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d113      	bne.n	8005b1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40010400 	.word	0x40010400

08005b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a21      	ldr	r2, [pc, #132]	; (8005c2c <TIM_OC3_SetConfig+0xe0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_OC3_SetConfig+0x66>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a20      	ldr	r2, [pc, #128]	; (8005c30 <TIM_OC3_SetConfig+0xe4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d10d      	bne.n	8005bce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <TIM_OC3_SetConfig+0xe0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d003      	beq.n	8005bde <TIM_OC3_SetConfig+0x92>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a15      	ldr	r2, [pc, #84]	; (8005c30 <TIM_OC3_SetConfig+0xe4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d113      	bne.n	8005c06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	621a      	str	r2, [r3, #32]
}
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40010400 	.word	0x40010400

08005c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a12      	ldr	r2, [pc, #72]	; (8005cd8 <TIM_OC4_SetConfig+0xa4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_OC4_SetConfig+0x68>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a11      	ldr	r2, [pc, #68]	; (8005cdc <TIM_OC4_SetConfig+0xa8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d109      	bne.n	8005cb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	019b      	lsls	r3, r3, #6
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40010400 	.word	0x40010400

08005ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f023 0201 	bic.w	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f023 030a 	bic.w	r3, r3, #10
 8005d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	621a      	str	r2, [r3, #32]
}
 8005d32:	bf00      	nop
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b087      	sub	sp, #28
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f023 0210 	bic.w	r2, r3, #16
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	031b      	lsls	r3, r3, #12
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f043 0307 	orr.w	r3, r3, #7
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	021a      	lsls	r2, r3, #8
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	609a      	str	r2, [r3, #8]
}
 8005e08:	bf00      	nop
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	2201      	movs	r2, #1
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a1a      	ldr	r2, [r3, #32]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	401a      	ands	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a1a      	ldr	r2, [r3, #32]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	bf00      	nop
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
	...

08005e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e05a      	b.n	8005f2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a21      	ldr	r2, [pc, #132]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d022      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec4:	d01d      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1d      	ldr	r2, [pc, #116]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d018      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d013      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1a      	ldr	r2, [pc, #104]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00e      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a18      	ldr	r2, [pc, #96]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d009      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a17      	ldr	r2, [pc, #92]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d004      	beq.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a15      	ldr	r2, [pc, #84]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d10c      	bne.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40010000 	.word	0x40010000
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800
 8005f48:	40000c00 	.word	0x40000c00
 8005f4c:	40010400 	.word	0x40010400
 8005f50:	40014000 	.word	0x40014000
 8005f54:	40001800 	.word	0x40001800

08005f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e03f      	b.n	8006012 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fb ffc6 	bl	8001f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2224      	movs	r2, #36	; 0x24
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fdc7 	bl	8006b58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695a      	ldr	r2, [r3, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08c      	sub	sp, #48	; 0x30
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b20      	cmp	r3, #32
 8006034:	d165      	bne.n	8006102 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <HAL_UART_Transmit_DMA+0x26>
 800603c:	88fb      	ldrh	r3, [r7, #6]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e05e      	b.n	8006104 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_UART_Transmit_DMA+0x38>
 8006050:	2302      	movs	r3, #2
 8006052:	e057      	b.n	8006104 <HAL_UART_Transmit_DMA+0xe8>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	88fa      	ldrh	r2, [r7, #6]
 8006066:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	88fa      	ldrh	r2, [r7, #6]
 800606c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2221      	movs	r2, #33	; 0x21
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006080:	4a22      	ldr	r2, [pc, #136]	; (800610c <HAL_UART_Transmit_DMA+0xf0>)
 8006082:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006088:	4a21      	ldr	r2, [pc, #132]	; (8006110 <HAL_UART_Transmit_DMA+0xf4>)
 800608a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006090:	4a20      	ldr	r2, [pc, #128]	; (8006114 <HAL_UART_Transmit_DMA+0xf8>)
 8006092:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006098:	2200      	movs	r2, #0
 800609a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800609c:	f107 0308 	add.w	r3, r7, #8
 80060a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	6819      	ldr	r1, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3304      	adds	r3, #4
 80060b0:	461a      	mov	r2, r3
 80060b2:	88fb      	ldrh	r3, [r7, #6]
 80060b4:	f7fd fca4 	bl	8003a00 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060c0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3314      	adds	r3, #20
 80060d0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	617b      	str	r3, [r7, #20]
   return(result);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3314      	adds	r3, #20
 80060e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ea:	627a      	str	r2, [r7, #36]	; 0x24
 80060ec:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6a39      	ldr	r1, [r7, #32]
 80060f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e5      	bne.n	80060ca <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	e000      	b.n	8006104 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006102:	2302      	movs	r3, #2
  }
}
 8006104:	4618      	mov	r0, r3
 8006106:	3730      	adds	r7, #48	; 0x30
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	08006689 	.word	0x08006689
 8006110:	08006723 	.word	0x08006723
 8006114:	0800673f 	.word	0x0800673f

08006118 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b0ba      	sub	sp, #232	; 0xe8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800613e:	2300      	movs	r3, #0
 8006140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006144:	2300      	movs	r3, #0
 8006146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800614a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10f      	bne.n	800617e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <HAL_UART_IRQHandler+0x66>
 800616a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fc32 	bl	80069e0 <UART_Receive_IT>
      return;
 800617c:	e256      	b.n	800662c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800617e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80de 	beq.w	8006344 <HAL_UART_IRQHandler+0x22c>
 8006188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d106      	bne.n	80061a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006198:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 80d1 	beq.w	8006344 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <HAL_UART_IRQHandler+0xae>
 80061ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f043 0201 	orr.w	r2, r3, #1
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00b      	beq.n	80061ea <HAL_UART_IRQHandler+0xd2>
 80061d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d005      	beq.n	80061ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f043 0202 	orr.w	r2, r3, #2
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00b      	beq.n	800620e <HAL_UART_IRQHandler+0xf6>
 80061f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d005      	beq.n	800620e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	f043 0204 	orr.w	r2, r3, #4
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800620e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d011      	beq.n	800623e <HAL_UART_IRQHandler+0x126>
 800621a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d105      	bne.n	8006232 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d005      	beq.n	800623e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	f043 0208 	orr.w	r2, r3, #8
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 81ed 	beq.w	8006622 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624c:	f003 0320 	and.w	r3, r3, #32
 8006250:	2b00      	cmp	r3, #0
 8006252:	d008      	beq.n	8006266 <HAL_UART_IRQHandler+0x14e>
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fbbd 	bl	80069e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	bf0c      	ite	eq
 8006274:	2301      	moveq	r3, #1
 8006276:	2300      	movne	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d103      	bne.n	8006292 <HAL_UART_IRQHandler+0x17a>
 800628a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d04f      	beq.n	8006332 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fac5 	bl	8006822 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a2:	2b40      	cmp	r3, #64	; 0x40
 80062a4:	d141      	bne.n	800632a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3314      	adds	r3, #20
 80062ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3314      	adds	r3, #20
 80062ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1d9      	bne.n	80062a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d013      	beq.n	8006322 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	4a7d      	ldr	r2, [pc, #500]	; (80064f4 <HAL_UART_IRQHandler+0x3dc>)
 8006300:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	4618      	mov	r0, r3
 8006308:	f7fd fc42 	bl	8003b90 <HAL_DMA_Abort_IT>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d016      	beq.n	8006340 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800631c:	4610      	mov	r0, r2
 800631e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	e00e      	b.n	8006340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f99a 	bl	800665c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006328:	e00a      	b.n	8006340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f996 	bl	800665c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	e006      	b.n	8006340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f992 	bl	800665c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800633e:	e170      	b.n	8006622 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006340:	bf00      	nop
    return;
 8006342:	e16e      	b.n	8006622 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	2b01      	cmp	r3, #1
 800634a:	f040 814a 	bne.w	80065e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800634e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 8143 	beq.w	80065e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800635c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 813c 	beq.w	80065e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800636a:	2300      	movs	r3, #0
 800636c:	60bb      	str	r3, [r7, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60bb      	str	r3, [r7, #8]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	f040 80b4 	bne.w	80064f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800639c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8140 	beq.w	8006626 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ae:	429a      	cmp	r2, r3
 80063b0:	f080 8139 	bcs.w	8006626 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c6:	f000 8088 	beq.w	80064da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	330c      	adds	r3, #12
 80063d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	330c      	adds	r3, #12
 80063f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006402:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800640e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1d9      	bne.n	80063ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3314      	adds	r3, #20
 800641c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006428:	f023 0301 	bic.w	r3, r3, #1
 800642c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3314      	adds	r3, #20
 8006436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800643a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800643e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006442:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006446:	e841 2300 	strex	r3, r2, [r1]
 800644a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800644c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e1      	bne.n	8006416 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3314      	adds	r3, #20
 8006458:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3314      	adds	r3, #20
 8006472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006476:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006478:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800647c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e3      	bne.n	8006452 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	330c      	adds	r3, #12
 800649e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064aa:	f023 0310 	bic.w	r3, r3, #16
 80064ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	330c      	adds	r3, #12
 80064b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80064be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e3      	bne.n	8006498 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fd faeb 	bl	8003ab0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f8c0 	bl	8006670 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064f0:	e099      	b.n	8006626 <HAL_UART_IRQHandler+0x50e>
 80064f2:	bf00      	nop
 80064f4:	080068e9 	.word	0x080068e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006500:	b29b      	uxth	r3, r3
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 808b 	beq.w	800662a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8086 	beq.w	800662a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	330c      	adds	r3, #12
 8006524:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800652e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006530:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006534:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006542:	647a      	str	r2, [r7, #68]	; 0x44
 8006544:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e3      	bne.n	800651e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3314      	adds	r3, #20
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	623b      	str	r3, [r7, #32]
   return(result);
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3314      	adds	r3, #20
 8006576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800657a:	633a      	str	r2, [r7, #48]	; 0x30
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e3      	bne.n	8006556 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0310 	bic.w	r3, r3, #16
 80065b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065c0:	61fa      	str	r2, [r7, #28]
 80065c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	69b9      	ldr	r1, [r7, #24]
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	617b      	str	r3, [r7, #20]
   return(result);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e3      	bne.n	800659c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f848 	bl	8006670 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065e0:	e023      	b.n	800662a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d009      	beq.n	8006602 <HAL_UART_IRQHandler+0x4ea>
 80065ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f988 	bl	8006910 <UART_Transmit_IT>
    return;
 8006600:	e014      	b.n	800662c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00e      	beq.n	800662c <HAL_UART_IRQHandler+0x514>
 800660e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	d008      	beq.n	800662c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f9c8 	bl	80069b0 <UART_EndTransmit_IT>
    return;
 8006620:	e004      	b.n	800662c <HAL_UART_IRQHandler+0x514>
    return;
 8006622:	bf00      	nop
 8006624:	e002      	b.n	800662c <HAL_UART_IRQHandler+0x514>
      return;
 8006626:	bf00      	nop
 8006628:	e000      	b.n	800662c <HAL_UART_IRQHandler+0x514>
      return;
 800662a:	bf00      	nop
  }
}
 800662c:	37e8      	adds	r7, #232	; 0xe8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop

08006634 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b090      	sub	sp, #64	; 0x40
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d137      	bne.n	8006714 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80066a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a6:	2200      	movs	r2, #0
 80066a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3314      	adds	r3, #20
 80066b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	623b      	str	r3, [r7, #32]
   return(result);
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80066c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3314      	adds	r3, #20
 80066c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ca:	633a      	str	r2, [r7, #48]	; 0x30
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e5      	bne.n	80066aa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	330c      	adds	r3, #12
 80066e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066f4:	637b      	str	r3, [r7, #52]	; 0x34
 80066f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	330c      	adds	r3, #12
 80066fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066fe:	61fa      	str	r2, [r7, #28]
 8006700:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006702:	69b9      	ldr	r1, [r7, #24]
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	617b      	str	r3, [r7, #20]
   return(result);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e5      	bne.n	80066de <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006712:	e002      	b.n	800671a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006714:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006716:	f7fb fa79 	bl	8001c0c <HAL_UART_TxCpltCallback>
}
 800671a:	bf00      	nop
 800671c:	3740      	adds	r7, #64	; 0x40
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff ff7f 	bl	8006634 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b084      	sub	sp, #16
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675a:	2b80      	cmp	r3, #128	; 0x80
 800675c:	bf0c      	ite	eq
 800675e:	2301      	moveq	r3, #1
 8006760:	2300      	movne	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b21      	cmp	r3, #33	; 0x21
 8006770:	d108      	bne.n	8006784 <UART_DMAError+0x46>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2200      	movs	r2, #0
 800677c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800677e:	68b8      	ldr	r0, [r7, #8]
 8006780:	f000 f827 	bl	80067d2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	bf0c      	ite	eq
 8006792:	2301      	moveq	r3, #1
 8006794:	2300      	movne	r3, #0
 8006796:	b2db      	uxtb	r3, r3
 8006798:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b22      	cmp	r3, #34	; 0x22
 80067a4:	d108      	bne.n	80067b8 <UART_DMAError+0x7a>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2200      	movs	r2, #0
 80067b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80067b2:	68b8      	ldr	r0, [r7, #8]
 80067b4:	f000 f835 	bl	8006822 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	f043 0210 	orr.w	r2, r3, #16
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067c4:	68b8      	ldr	r0, [r7, #8]
 80067c6:	f7ff ff49 	bl	800665c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b089      	sub	sp, #36	; 0x24
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	330c      	adds	r3, #12
 80067e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80067f0:	61fb      	str	r3, [r7, #28]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	330c      	adds	r3, #12
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	61ba      	str	r2, [r7, #24]
 80067fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	6979      	ldr	r1, [r7, #20]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	613b      	str	r3, [r7, #16]
   return(result);
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e5      	bne.n	80067da <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006816:	bf00      	nop
 8006818:	3724      	adds	r7, #36	; 0x24
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006822:	b480      	push	{r7}
 8006824:	b095      	sub	sp, #84	; 0x54
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	330c      	adds	r3, #12
 8006830:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006840:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	330c      	adds	r3, #12
 8006848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800684a:	643a      	str	r2, [r7, #64]	; 0x40
 800684c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e5      	bne.n	800682a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3314      	adds	r3, #20
 8006864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	61fb      	str	r3, [r7, #28]
   return(result);
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	f023 0301 	bic.w	r3, r3, #1
 8006874:	64bb      	str	r3, [r7, #72]	; 0x48
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3314      	adds	r3, #20
 800687c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800687e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006880:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e5      	bne.n	800685e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	2b01      	cmp	r3, #1
 8006898:	d119      	bne.n	80068ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	330c      	adds	r3, #12
 80068a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f023 0310 	bic.w	r3, r3, #16
 80068b0:	647b      	str	r3, [r7, #68]	; 0x44
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	330c      	adds	r3, #12
 80068b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068ba:	61ba      	str	r2, [r7, #24]
 80068bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	6979      	ldr	r1, [r7, #20]
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	613b      	str	r3, [r7, #16]
   return(result);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e5      	bne.n	800689a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068dc:	bf00      	nop
 80068de:	3754      	adds	r7, #84	; 0x54
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff feaa 	bl	800665c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006908:	bf00      	nop
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b21      	cmp	r3, #33	; 0x21
 8006922:	d13e      	bne.n	80069a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692c:	d114      	bne.n	8006958 <UART_Transmit_IT+0x48>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d110      	bne.n	8006958 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800694a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	1c9a      	adds	r2, r3, #2
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	621a      	str	r2, [r3, #32]
 8006956:	e008      	b.n	800696a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	1c59      	adds	r1, r3, #1
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6211      	str	r1, [r2, #32]
 8006962:	781a      	ldrb	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29b      	uxth	r3, r3
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	4619      	mov	r1, r3
 8006978:	84d1      	strh	r1, [r2, #38]	; 0x26
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10f      	bne.n	800699e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800698c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800699c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	e000      	b.n	80069a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069a2:	2302      	movs	r3, #2
  }
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7fb f91b 	bl	8001c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08c      	sub	sp, #48	; 0x30
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b22      	cmp	r3, #34	; 0x22
 80069f2:	f040 80ab 	bne.w	8006b4c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fe:	d117      	bne.n	8006a30 <UART_Receive_IT+0x50>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d113      	bne.n	8006a30 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	1c9a      	adds	r2, r3, #2
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	629a      	str	r2, [r3, #40]	; 0x28
 8006a2e:	e026      	b.n	8006a7e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a42:	d007      	beq.n	8006a54 <UART_Receive_IT+0x74>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10a      	bne.n	8006a62 <UART_Receive_IT+0x82>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d106      	bne.n	8006a62 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	e008      	b.n	8006a74 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a72:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d15a      	bne.n	8006b48 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0220 	bic.w	r2, r2, #32
 8006aa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ab0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	695a      	ldr	r2, [r3, #20]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0201 	bic.w	r2, r2, #1
 8006ac0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d135      	bne.n	8006b3e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	330c      	adds	r3, #12
 8006ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f023 0310 	bic.w	r3, r3, #16
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	330c      	adds	r3, #12
 8006af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af8:	623a      	str	r2, [r7, #32]
 8006afa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	69f9      	ldr	r1, [r7, #28]
 8006afe:	6a3a      	ldr	r2, [r7, #32]
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e5      	bne.n	8006ad8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0310 	and.w	r3, r3, #16
 8006b16:	2b10      	cmp	r3, #16
 8006b18:	d10a      	bne.n	8006b30 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff fd9a 	bl	8006670 <HAL_UARTEx_RxEventCallback>
 8006b3c:	e002      	b.n	8006b44 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff fd82 	bl	8006648 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	e002      	b.n	8006b4e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e000      	b.n	8006b4e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b4c:	2302      	movs	r3, #2
  }
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3730      	adds	r7, #48	; 0x30
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	b09f      	sub	sp, #124	; 0x7c
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6e:	68d9      	ldr	r1, [r3, #12]
 8006b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	ea40 0301 	orr.w	r3, r0, r1
 8006b78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b9c:	f021 010c 	bic.w	r1, r1, #12
 8006ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bb6:	6999      	ldr	r1, [r3, #24]
 8006bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	ea40 0301 	orr.w	r3, r0, r1
 8006bc0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4bc5      	ldr	r3, [pc, #788]	; (8006edc <UART_SetConfig+0x384>)
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d004      	beq.n	8006bd6 <UART_SetConfig+0x7e>
 8006bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	4bc3      	ldr	r3, [pc, #780]	; (8006ee0 <UART_SetConfig+0x388>)
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d103      	bne.n	8006bde <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bd6:	f7fd fd33 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 8006bda:	6778      	str	r0, [r7, #116]	; 0x74
 8006bdc:	e002      	b.n	8006be4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bde:	f7fd fd1b 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8006be2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bec:	f040 80b6 	bne.w	8006d5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bf2:	461c      	mov	r4, r3
 8006bf4:	f04f 0500 	mov.w	r5, #0
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	462b      	mov	r3, r5
 8006bfc:	1891      	adds	r1, r2, r2
 8006bfe:	6439      	str	r1, [r7, #64]	; 0x40
 8006c00:	415b      	adcs	r3, r3
 8006c02:	647b      	str	r3, [r7, #68]	; 0x44
 8006c04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c08:	1912      	adds	r2, r2, r4
 8006c0a:	eb45 0303 	adc.w	r3, r5, r3
 8006c0e:	f04f 0000 	mov.w	r0, #0
 8006c12:	f04f 0100 	mov.w	r1, #0
 8006c16:	00d9      	lsls	r1, r3, #3
 8006c18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c1c:	00d0      	lsls	r0, r2, #3
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	1911      	adds	r1, r2, r4
 8006c24:	6639      	str	r1, [r7, #96]	; 0x60
 8006c26:	416b      	adcs	r3, r5
 8006c28:	667b      	str	r3, [r7, #100]	; 0x64
 8006c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f04f 0300 	mov.w	r3, #0
 8006c34:	1891      	adds	r1, r2, r2
 8006c36:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c38:	415b      	adcs	r3, r3
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006c44:	f7f9 ff5e 	bl	8000b04 <__aeabi_uldivmod>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4ba5      	ldr	r3, [pc, #660]	; (8006ee4 <UART_SetConfig+0x38c>)
 8006c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c52:	095b      	lsrs	r3, r3, #5
 8006c54:	011e      	lsls	r6, r3, #4
 8006c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c58:	461c      	mov	r4, r3
 8006c5a:	f04f 0500 	mov.w	r5, #0
 8006c5e:	4622      	mov	r2, r4
 8006c60:	462b      	mov	r3, r5
 8006c62:	1891      	adds	r1, r2, r2
 8006c64:	6339      	str	r1, [r7, #48]	; 0x30
 8006c66:	415b      	adcs	r3, r3
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
 8006c6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006c6e:	1912      	adds	r2, r2, r4
 8006c70:	eb45 0303 	adc.w	r3, r5, r3
 8006c74:	f04f 0000 	mov.w	r0, #0
 8006c78:	f04f 0100 	mov.w	r1, #0
 8006c7c:	00d9      	lsls	r1, r3, #3
 8006c7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c82:	00d0      	lsls	r0, r2, #3
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	1911      	adds	r1, r2, r4
 8006c8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c8c:	416b      	adcs	r3, r5
 8006c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	461a      	mov	r2, r3
 8006c96:	f04f 0300 	mov.w	r3, #0
 8006c9a:	1891      	adds	r1, r2, r2
 8006c9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c9e:	415b      	adcs	r3, r3
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ca6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006caa:	f7f9 ff2b 	bl	8000b04 <__aeabi_uldivmod>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4b8c      	ldr	r3, [pc, #560]	; (8006ee4 <UART_SetConfig+0x38c>)
 8006cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb8:	095b      	lsrs	r3, r3, #5
 8006cba:	2164      	movs	r1, #100	; 0x64
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	3332      	adds	r3, #50	; 0x32
 8006cc6:	4a87      	ldr	r2, [pc, #540]	; (8006ee4 <UART_SetConfig+0x38c>)
 8006cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cd4:	441e      	add	r6, r3
 8006cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f04f 0100 	mov.w	r1, #0
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	1894      	adds	r4, r2, r2
 8006ce4:	623c      	str	r4, [r7, #32]
 8006ce6:	415b      	adcs	r3, r3
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cee:	1812      	adds	r2, r2, r0
 8006cf0:	eb41 0303 	adc.w	r3, r1, r3
 8006cf4:	f04f 0400 	mov.w	r4, #0
 8006cf8:	f04f 0500 	mov.w	r5, #0
 8006cfc:	00dd      	lsls	r5, r3, #3
 8006cfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d02:	00d4      	lsls	r4, r2, #3
 8006d04:	4622      	mov	r2, r4
 8006d06:	462b      	mov	r3, r5
 8006d08:	1814      	adds	r4, r2, r0
 8006d0a:	653c      	str	r4, [r7, #80]	; 0x50
 8006d0c:	414b      	adcs	r3, r1
 8006d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	461a      	mov	r2, r3
 8006d16:	f04f 0300 	mov.w	r3, #0
 8006d1a:	1891      	adds	r1, r2, r2
 8006d1c:	61b9      	str	r1, [r7, #24]
 8006d1e:	415b      	adcs	r3, r3
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006d2a:	f7f9 feeb 	bl	8000b04 <__aeabi_uldivmod>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4b6c      	ldr	r3, [pc, #432]	; (8006ee4 <UART_SetConfig+0x38c>)
 8006d34:	fba3 1302 	umull	r1, r3, r3, r2
 8006d38:	095b      	lsrs	r3, r3, #5
 8006d3a:	2164      	movs	r1, #100	; 0x64
 8006d3c:	fb01 f303 	mul.w	r3, r1, r3
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	3332      	adds	r3, #50	; 0x32
 8006d46:	4a67      	ldr	r2, [pc, #412]	; (8006ee4 <UART_SetConfig+0x38c>)
 8006d48:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	f003 0207 	and.w	r2, r3, #7
 8006d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4432      	add	r2, r6
 8006d58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d5a:	e0b9      	b.n	8006ed0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d5e:	461c      	mov	r4, r3
 8006d60:	f04f 0500 	mov.w	r5, #0
 8006d64:	4622      	mov	r2, r4
 8006d66:	462b      	mov	r3, r5
 8006d68:	1891      	adds	r1, r2, r2
 8006d6a:	6139      	str	r1, [r7, #16]
 8006d6c:	415b      	adcs	r3, r3
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d74:	1912      	adds	r2, r2, r4
 8006d76:	eb45 0303 	adc.w	r3, r5, r3
 8006d7a:	f04f 0000 	mov.w	r0, #0
 8006d7e:	f04f 0100 	mov.w	r1, #0
 8006d82:	00d9      	lsls	r1, r3, #3
 8006d84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d88:	00d0      	lsls	r0, r2, #3
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	eb12 0804 	adds.w	r8, r2, r4
 8006d92:	eb43 0905 	adc.w	r9, r3, r5
 8006d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f04f 0100 	mov.w	r1, #0
 8006da0:	f04f 0200 	mov.w	r2, #0
 8006da4:	f04f 0300 	mov.w	r3, #0
 8006da8:	008b      	lsls	r3, r1, #2
 8006daa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dae:	0082      	lsls	r2, r0, #2
 8006db0:	4640      	mov	r0, r8
 8006db2:	4649      	mov	r1, r9
 8006db4:	f7f9 fea6 	bl	8000b04 <__aeabi_uldivmod>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4b49      	ldr	r3, [pc, #292]	; (8006ee4 <UART_SetConfig+0x38c>)
 8006dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8006dc2:	095b      	lsrs	r3, r3, #5
 8006dc4:	011e      	lsls	r6, r3, #4
 8006dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f04f 0100 	mov.w	r1, #0
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	1894      	adds	r4, r2, r2
 8006dd4:	60bc      	str	r4, [r7, #8]
 8006dd6:	415b      	adcs	r3, r3
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dde:	1812      	adds	r2, r2, r0
 8006de0:	eb41 0303 	adc.w	r3, r1, r3
 8006de4:	f04f 0400 	mov.w	r4, #0
 8006de8:	f04f 0500 	mov.w	r5, #0
 8006dec:	00dd      	lsls	r5, r3, #3
 8006dee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006df2:	00d4      	lsls	r4, r2, #3
 8006df4:	4622      	mov	r2, r4
 8006df6:	462b      	mov	r3, r5
 8006df8:	1814      	adds	r4, r2, r0
 8006dfa:	64bc      	str	r4, [r7, #72]	; 0x48
 8006dfc:	414b      	adcs	r3, r1
 8006dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f04f 0100 	mov.w	r1, #0
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	008b      	lsls	r3, r1, #2
 8006e14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e18:	0082      	lsls	r2, r0, #2
 8006e1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006e1e:	f7f9 fe71 	bl	8000b04 <__aeabi_uldivmod>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4b2f      	ldr	r3, [pc, #188]	; (8006ee4 <UART_SetConfig+0x38c>)
 8006e28:	fba3 1302 	umull	r1, r3, r3, r2
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	2164      	movs	r1, #100	; 0x64
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	011b      	lsls	r3, r3, #4
 8006e38:	3332      	adds	r3, #50	; 0x32
 8006e3a:	4a2a      	ldr	r2, [pc, #168]	; (8006ee4 <UART_SetConfig+0x38c>)
 8006e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e46:	441e      	add	r6, r3
 8006e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f04f 0100 	mov.w	r1, #0
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	1894      	adds	r4, r2, r2
 8006e56:	603c      	str	r4, [r7, #0]
 8006e58:	415b      	adcs	r3, r3
 8006e5a:	607b      	str	r3, [r7, #4]
 8006e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e60:	1812      	adds	r2, r2, r0
 8006e62:	eb41 0303 	adc.w	r3, r1, r3
 8006e66:	f04f 0400 	mov.w	r4, #0
 8006e6a:	f04f 0500 	mov.w	r5, #0
 8006e6e:	00dd      	lsls	r5, r3, #3
 8006e70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e74:	00d4      	lsls	r4, r2, #3
 8006e76:	4622      	mov	r2, r4
 8006e78:	462b      	mov	r3, r5
 8006e7a:	eb12 0a00 	adds.w	sl, r2, r0
 8006e7e:	eb43 0b01 	adc.w	fp, r3, r1
 8006e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f04f 0100 	mov.w	r1, #0
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	008b      	lsls	r3, r1, #2
 8006e96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e9a:	0082      	lsls	r2, r0, #2
 8006e9c:	4650      	mov	r0, sl
 8006e9e:	4659      	mov	r1, fp
 8006ea0:	f7f9 fe30 	bl	8000b04 <__aeabi_uldivmod>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4b0e      	ldr	r3, [pc, #56]	; (8006ee4 <UART_SetConfig+0x38c>)
 8006eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8006eae:	095b      	lsrs	r3, r3, #5
 8006eb0:	2164      	movs	r1, #100	; 0x64
 8006eb2:	fb01 f303 	mul.w	r3, r1, r3
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	3332      	adds	r3, #50	; 0x32
 8006ebc:	4a09      	ldr	r2, [pc, #36]	; (8006ee4 <UART_SetConfig+0x38c>)
 8006ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec2:	095b      	lsrs	r3, r3, #5
 8006ec4:	f003 020f 	and.w	r2, r3, #15
 8006ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4432      	add	r2, r6
 8006ece:	609a      	str	r2, [r3, #8]
}
 8006ed0:	bf00      	nop
 8006ed2:	377c      	adds	r7, #124	; 0x7c
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eda:	bf00      	nop
 8006edc:	40011000 	.word	0x40011000
 8006ee0:	40011400 	.word	0x40011400
 8006ee4:	51eb851f 	.word	0x51eb851f

08006ee8 <__libc_init_array>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4d0d      	ldr	r5, [pc, #52]	; (8006f20 <__libc_init_array+0x38>)
 8006eec:	4c0d      	ldr	r4, [pc, #52]	; (8006f24 <__libc_init_array+0x3c>)
 8006eee:	1b64      	subs	r4, r4, r5
 8006ef0:	10a4      	asrs	r4, r4, #2
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	42a6      	cmp	r6, r4
 8006ef6:	d109      	bne.n	8006f0c <__libc_init_array+0x24>
 8006ef8:	4d0b      	ldr	r5, [pc, #44]	; (8006f28 <__libc_init_array+0x40>)
 8006efa:	4c0c      	ldr	r4, [pc, #48]	; (8006f2c <__libc_init_array+0x44>)
 8006efc:	f000 f820 	bl	8006f40 <_init>
 8006f00:	1b64      	subs	r4, r4, r5
 8006f02:	10a4      	asrs	r4, r4, #2
 8006f04:	2600      	movs	r6, #0
 8006f06:	42a6      	cmp	r6, r4
 8006f08:	d105      	bne.n	8006f16 <__libc_init_array+0x2e>
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f10:	4798      	blx	r3
 8006f12:	3601      	adds	r6, #1
 8006f14:	e7ee      	b.n	8006ef4 <__libc_init_array+0xc>
 8006f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1a:	4798      	blx	r3
 8006f1c:	3601      	adds	r6, #1
 8006f1e:	e7f2      	b.n	8006f06 <__libc_init_array+0x1e>
 8006f20:	08006fd0 	.word	0x08006fd0
 8006f24:	08006fd0 	.word	0x08006fd0
 8006f28:	08006fd0 	.word	0x08006fd0
 8006f2c:	08006fd4 	.word	0x08006fd4

08006f30 <memset>:
 8006f30:	4402      	add	r2, r0
 8006f32:	4603      	mov	r3, r0
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d100      	bne.n	8006f3a <memset+0xa>
 8006f38:	4770      	bx	lr
 8006f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3e:	e7f9      	b.n	8006f34 <memset+0x4>

08006f40 <_init>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	bf00      	nop
 8006f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f46:	bc08      	pop	{r3}
 8006f48:	469e      	mov	lr, r3
 8006f4a:	4770      	bx	lr

08006f4c <_fini>:
 8006f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4e:	bf00      	nop
 8006f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f52:	bc08      	pop	{r3}
 8006f54:	469e      	mov	lr, r3
 8006f56:	4770      	bx	lr
