
GINGAAAN_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008214  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  080083e0  080083e0  000183e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008658  08008658  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008658  08008658  00018658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008660  08008660  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  2000008c  080086f4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  080086f4  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a210  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003080  00000000  00000000  0003a2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0003d350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  0003e350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bc4  00000000  00000000  0003f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014aeb  00000000  00000000  00062dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d431e  00000000  00000000  000778e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014bc05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004764  00000000  00000000  0014bc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000008c 	.word	0x2000008c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080083c4 	.word	0x080083c4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000090 	.word	0x20000090
 8000204:	080083c4 	.word	0x080083c4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b18:	f000 b96e 	b.w	8000df8 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8083 	bne.w	8000c4a <__udivmoddi4+0x116>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d947      	bls.n	8000bda <__udivmoddi4+0xa6>
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b142      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	f1c2 0020 	rsb	r0, r2, #32
 8000b54:	fa24 f000 	lsr.w	r0, r4, r0
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	4097      	lsls	r7, r2
 8000b5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbbc f6f8 	udiv	r6, ip, r8
 8000b6c:	fa1f fe87 	uxth.w	lr, r7
 8000b70:	fb08 c116 	mls	r1, r8, r6, ip
 8000b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b78:	fb06 f10e 	mul.w	r1, r6, lr
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b86:	f080 8119 	bcs.w	8000dbc <__udivmoddi4+0x288>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8116 	bls.w	8000dbc <__udivmoddi4+0x288>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	443b      	add	r3, r7
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bb2:	f080 8105 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8102 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	2600      	movs	r6, #0
 8000bca:	b11d      	cbz	r5, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	b902      	cbnz	r2, 8000bde <__udivmoddi4+0xaa>
 8000bdc:	deff      	udf	#255	; 0xff
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d150      	bne.n	8000c88 <__udivmoddi4+0x154>
 8000be6:	1bcb      	subs	r3, r1, r7
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f f887 	uxth.w	r8, r7
 8000bf0:	2601      	movs	r6, #1
 8000bf2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf6:	0c21      	lsrs	r1, r4, #16
 8000bf8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c00:	fb08 f30c 	mul.w	r3, r8, ip
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000c08:	1879      	adds	r1, r7, r1
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0xe2>
 8000c10:	428b      	cmp	r3, r1
 8000c12:	f200 80e9 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x10c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x10a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80d9 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e7bf      	b.n	8000bca <__udivmoddi4+0x96>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x12e>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 80b1 	beq.w	8000db6 <__udivmoddi4+0x282>
 8000c54:	2600      	movs	r6, #0
 8000c56:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f683 	clz	r6, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d14a      	bne.n	8000d00 <__udivmoddi4+0x1cc>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0x140>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80b8 	bhi.w	8000de4 <__udivmoddi4+0x2b0>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0103 	sbc.w	r1, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0a8      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c90:	4097      	lsls	r7, r2
 8000c92:	fa01 f002 	lsl.w	r0, r1, r2
 8000c96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9a:	40d9      	lsrs	r1, r3
 8000c9c:	4330      	orrs	r0, r6
 8000c9e:	0c03      	lsrs	r3, r0, #16
 8000ca0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb06 f108 	mul.w	r1, r6, r8
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x19c>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cc2:	f080 808d 	bcs.w	8000de0 <__udivmoddi4+0x2ac>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 808a 	bls.w	8000de0 <__udivmoddi4+0x2ac>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	443b      	add	r3, r7
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b281      	uxth	r1, r0
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce0:	fb00 f308 	mul.w	r3, r0, r8
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ce8:	1879      	adds	r1, r7, r1
 8000cea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cee:	d273      	bcs.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d971      	bls.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4439      	add	r1, r7
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfe:	e778      	b.n	8000bf2 <__udivmoddi4+0xbe>
 8000d00:	f1c6 0c20 	rsb	ip, r6, #32
 8000d04:	fa03 f406 	lsl.w	r4, r3, r6
 8000d08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d12:	fa01 f306 	lsl.w	r3, r1, r6
 8000d16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fa1f f884 	uxth.w	r8, r4
 8000d2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d32:	fb09 fa08 	mul.w	sl, r9, r8
 8000d36:	458a      	cmp	sl, r1
 8000d38:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x220>
 8000d42:	1861      	adds	r1, r4, r1
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d48:	d248      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4a:	458a      	cmp	sl, r1
 8000d4c:	d946      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4421      	add	r1, r4
 8000d54:	eba1 010a 	sub.w	r1, r1, sl
 8000d58:	b2bf      	uxth	r7, r7
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d66:	fb00 f808 	mul.w	r8, r0, r8
 8000d6a:	45b8      	cmp	r8, r7
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x24a>
 8000d6e:	19e7      	adds	r7, r4, r7
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d74:	d22e      	bcs.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d76:	45b8      	cmp	r8, r7
 8000d78:	d92c      	bls.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4427      	add	r7, r4
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	eba7 0708 	sub.w	r7, r7, r8
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	454f      	cmp	r7, r9
 8000d8c:	46c6      	mov	lr, r8
 8000d8e:	4649      	mov	r1, r9
 8000d90:	d31a      	bcc.n	8000dc8 <__udivmoddi4+0x294>
 8000d92:	d017      	beq.n	8000dc4 <__udivmoddi4+0x290>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x27a>
 8000d96:	ebb3 020e 	subs.w	r2, r3, lr
 8000d9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000da2:	40f2      	lsrs	r2, r6
 8000da4:	ea4c 0202 	orr.w	r2, ip, r2
 8000da8:	40f7      	lsrs	r7, r6
 8000daa:	e9c5 2700 	strd	r2, r7, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	462e      	mov	r6, r5
 8000db8:	4628      	mov	r0, r5
 8000dba:	e70b      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fd      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc4:	4543      	cmp	r3, r8
 8000dc6:	d2e5      	bcs.n	8000d94 <__udivmoddi4+0x260>
 8000dc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	e7df      	b.n	8000d94 <__udivmoddi4+0x260>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e7d2      	b.n	8000d7e <__udivmoddi4+0x24a>
 8000dd8:	4660      	mov	r0, ip
 8000dda:	e78d      	b.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ddc:	4681      	mov	r9, r0
 8000dde:	e7b9      	b.n	8000d54 <__udivmoddi4+0x220>
 8000de0:	4666      	mov	r6, ip
 8000de2:	e775      	b.n	8000cd0 <__udivmoddi4+0x19c>
 8000de4:	4630      	mov	r0, r6
 8000de6:	e74a      	b.n	8000c7e <__udivmoddi4+0x14a>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	4439      	add	r1, r7
 8000dee:	e713      	b.n	8000c18 <__udivmoddi4+0xe4>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443c      	add	r4, r7
 8000df4:	e724      	b.n	8000c40 <__udivmoddi4+0x10c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <appInit>:
static int SM_CalSpeedFunc1(int nowPos, int minSpeed, int maxSpeed);
static int SM_CalSpeedFunc2(int nowPos, int minSpeed, int maxSpeed);
static int SM_CalSpeedFunc3(int nowPos, int minSpeed, int maxSpeed);
static int SM1st_SetSpeed(int speed, int dir);
//初期化
int appInit(void){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
	//D_CAN_SetReceiveAddress(8,9,10,11);
	D_CAN_SetReceiveAddressAll();
 8000e02:	f001 fb39 	bl	8002478 <D_CAN_SetReceiveAddressAll>
	for(int i=0; i<8; i++){
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	e01b      	b.n	8000e44 <appInit+0x48>
		for(int j=0; j<4; j++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	e012      	b.n	8000e38 <appInit+0x3c>
			rcvData[j][i] = 0;
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <appInit+0x58>)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	441a      	add	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
			sndData[j][i] = 0;
 8000e22:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <appInit+0x5c>)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	441a      	add	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<4; j++){
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	3301      	adds	r3, #1
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	dde9      	ble.n	8000e12 <appInit+0x16>
	for(int i=0; i<8; i++){
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3301      	adds	r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b07      	cmp	r3, #7
 8000e48:	dde0      	ble.n	8000e0c <appInit+0x10>
		}
	}
	return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200000c8 	.word	0x200000c8
 8000e58:	200000a8 	.word	0x200000a8

08000e5c <appTask>:

int appTask(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
	static uint8_t StepSpeed[19] = {
		//66,73,79,80,83,85,88,91,94, 96, 95,94,93,91,88,84,79,73,66
		66,73,79,80,83,85,88,91,94, 96, 94,91,88,85,83,80,79,73,66
	};

	for(int i=0; i<4; i++){
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e070      	b.n	8000f4a <appTask+0xee>
		sndData[i][0] = testSendData;
 8000e68:	4b9f      	ldr	r3, [pc, #636]	; (80010e8 <appTask+0x28c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	b2d9      	uxtb	r1, r3
 8000e6e:	4a9f      	ldr	r2, [pc, #636]	; (80010ec <appTask+0x290>)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		sndData[i][1] = testSendData;
 8000e76:	4b9c      	ldr	r3, [pc, #624]	; (80010e8 <appTask+0x28c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	b2d9      	uxtb	r1, r3
 8000e7c:	4a9b      	ldr	r2, [pc, #620]	; (80010ec <appTask+0x290>)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4413      	add	r3, r2
 8000e84:	460a      	mov	r2, r1
 8000e86:	705a      	strb	r2, [r3, #1]
		sndData[i][2] = testSendData;
 8000e88:	4b97      	ldr	r3, [pc, #604]	; (80010e8 <appTask+0x28c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	b2d9      	uxtb	r1, r3
 8000e8e:	4a97      	ldr	r2, [pc, #604]	; (80010ec <appTask+0x290>)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	4413      	add	r3, r2
 8000e96:	460a      	mov	r2, r1
 8000e98:	709a      	strb	r2, [r3, #2]
		sndData[i][3] = testSendData;
 8000e9a:	4b93      	ldr	r3, [pc, #588]	; (80010e8 <appTask+0x28c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	b2d9      	uxtb	r1, r3
 8000ea0:	4a92      	ldr	r2, [pc, #584]	; (80010ec <appTask+0x290>)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	70da      	strb	r2, [r3, #3]
		sndData[i][4] = testSendData;
 8000eac:	4b8e      	ldr	r3, [pc, #568]	; (80010e8 <appTask+0x28c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	b2d9      	uxtb	r1, r3
 8000eb2:	4a8e      	ldr	r2, [pc, #568]	; (80010ec <appTask+0x290>)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4413      	add	r3, r2
 8000eba:	460a      	mov	r2, r1
 8000ebc:	711a      	strb	r2, [r3, #4]
		sndData[i][5] = testSendData;
 8000ebe:	4b8a      	ldr	r3, [pc, #552]	; (80010e8 <appTask+0x28c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	b2d9      	uxtb	r1, r3
 8000ec4:	4a89      	ldr	r2, [pc, #548]	; (80010ec <appTask+0x290>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	4413      	add	r3, r2
 8000ecc:	460a      	mov	r2, r1
 8000ece:	715a      	strb	r2, [r3, #5]
		sndData[i][6] = testSendData;
 8000ed0:	4b85      	ldr	r3, [pc, #532]	; (80010e8 <appTask+0x28c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	b2d9      	uxtb	r1, r3
 8000ed6:	4a85      	ldr	r2, [pc, #532]	; (80010ec <appTask+0x290>)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4413      	add	r3, r2
 8000ede:	460a      	mov	r2, r1
 8000ee0:	719a      	strb	r2, [r3, #6]
		sndData[i][7] = testSendData;
 8000ee2:	4b81      	ldr	r3, [pc, #516]	; (80010e8 <appTask+0x28c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	b2d9      	uxtb	r1, r3
 8000ee8:	4a80      	ldr	r2, [pc, #512]	; (80010ec <appTask+0x290>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	4413      	add	r3, r2
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71da      	strb	r2, [r3, #7]
		uint8_t dataSum = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	74fb      	strb	r3, [r7, #19]
		for(int j=0; j<sendLength-1; j++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e00c      	b.n	8000f18 <appTask+0xbc>
			dataSum += sndData[i][j];
 8000efe:	4a7b      	ldr	r2, [pc, #492]	; (80010ec <appTask+0x290>)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	441a      	add	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	7cfb      	ldrb	r3, [r7, #19]
 8000f0e:	4413      	add	r3, r2
 8000f10:	74fb      	strb	r3, [r7, #19]
		for(int j=0; j<sendLength-1; j++){
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	4b75      	ldr	r3, [pc, #468]	; (80010f0 <appTask+0x294>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbec      	blt.n	8000efe <appTask+0xa2>
		}
		int checkSum = 256 - (int)dataSum;
 8000f24:	7cfb      	ldrb	r3, [r7, #19]
 8000f26:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000f2a:	603b      	str	r3, [r7, #0]
		sndData[i][sendLength-1] = (uint8_t)checkSum;
 8000f2c:	4b70      	ldr	r3, [pc, #448]	; (80010f0 <appTask+0x294>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	b2d0      	uxtb	r0, r2
 8000f36:	496d      	ldr	r1, [pc, #436]	; (80010ec <appTask+0x290>)
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	00d2      	lsls	r2, r2, #3
 8000f3c:	440a      	add	r2, r1
 8000f3e:	4413      	add	r3, r2
 8000f40:	4602      	mov	r2, r0
 8000f42:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4; i++){
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3301      	adds	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	dd8b      	ble.n	8000e68 <appTask+0xc>
	}

	//SMsndTime += G_System_MicroCounter - recent_System_counter;
	sndTime += G_System_MicroCounter - recent_System_counter;
 8000f50:	4b68      	ldr	r3, [pc, #416]	; (80010f4 <appTask+0x298>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <appTask+0x29c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	1ad2      	subs	r2, r2, r3
 8000f5a:	4b68      	ldr	r3, [pc, #416]	; (80010fc <appTask+0x2a0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a66      	ldr	r2, [pc, #408]	; (80010fc <appTask+0x2a0>)
 8000f62:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_MicroCounter;
 8000f64:	4b63      	ldr	r3, [pc, #396]	; (80010f4 <appTask+0x298>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a63      	ldr	r2, [pc, #396]	; (80010f8 <appTask+0x29c>)
 8000f6a:	6013      	str	r3, [r2, #0]
	//CAN送信タイミングの場合送信
	if(sndTime >= CAN_SEND_INTERVAL){
 8000f6c:	4b63      	ldr	r3, [pc, #396]	; (80010fc <appTask+0x2a0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2bc7      	cmp	r3, #199	; 0xc7
 8000f72:	d927      	bls.n	8000fc4 <appTask+0x168>
		//errorHandle = D_CAN_Transmit(ownIdCount,sndData[0],sendLength);
		sndTime = 0;
 8000f74:	4b61      	ldr	r3, [pc, #388]	; (80010fc <appTask+0x2a0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
		count1++;
 8000f7a:	4b61      	ldr	r3, [pc, #388]	; (8001100 <appTask+0x2a4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a5f      	ldr	r2, [pc, #380]	; (8001100 <appTask+0x2a4>)
 8000f82:	6013      	str	r3, [r2, #0]
		if(count1 >= 1 && errorHandle == 0){
 8000f84:	4b5e      	ldr	r3, [pc, #376]	; (8001100 <appTask+0x2a4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	dd0b      	ble.n	8000fa4 <appTask+0x148>
 8000f8c:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <appTask+0x2a8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d107      	bne.n	8000fa4 <appTask+0x148>
			count1 = 0;
 8000f94:	4b5a      	ldr	r3, [pc, #360]	; (8001100 <appTask+0x2a4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
			testSendData++;
 8000f9a:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <appTask+0x28c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a51      	ldr	r2, [pc, #324]	; (80010e8 <appTask+0x28c>)
 8000fa2:	6013      	str	r3, [r2, #0]
		}
		if(testSendData >= 256 && errorHandle == 0){
 8000fa4:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <appTask+0x28c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2bff      	cmp	r3, #255	; 0xff
 8000faa:	dd0b      	ble.n	8000fc4 <appTask+0x168>
 8000fac:	4b55      	ldr	r3, [pc, #340]	; (8001104 <appTask+0x2a8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d107      	bne.n	8000fc4 <appTask+0x168>
			testSendData = 0;
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <appTask+0x28c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
			ownIdCount++;
 8000fba:	4b53      	ldr	r3, [pc, #332]	; (8001108 <appTask+0x2ac>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	4a51      	ldr	r2, [pc, #324]	; (8001108 <appTask+0x2ac>)
 8000fc2:	6013      	str	r3, [r2, #0]
			ownIdCount++;
		}
		*/
	}
	//CAN受信処理
	D_CAN_Receive(0,rcvData[0],receiveLength);
 8000fc4:	4b51      	ldr	r3, [pc, #324]	; (800110c <appTask+0x2b0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4950      	ldr	r1, [pc, #320]	; (8001110 <appTask+0x2b4>)
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f001 fa84 	bl	80024dc <D_CAN_Receive>
	D_CAN_Receive(1,rcvData[1],receiveLength);
 8000fd4:	4b4d      	ldr	r3, [pc, #308]	; (800110c <appTask+0x2b0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	494d      	ldr	r1, [pc, #308]	; (8001114 <appTask+0x2b8>)
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f001 fa7c 	bl	80024dc <D_CAN_Receive>

	static int upCount = 0;
	static int speed = 70;
	static int speedCoeff = 1;
	static bool _ChangeSpeedCoeff = false;
	upCount++;
 8000fe4:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <appTask+0x2bc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	4a4b      	ldr	r2, [pc, #300]	; (8001118 <appTask+0x2bc>)
 8000fec:	6013      	str	r3, [r2, #0]
	if(upCount >= 200){
 8000fee:	4b4a      	ldr	r3, [pc, #296]	; (8001118 <appTask+0x2bc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2bc7      	cmp	r3, #199	; 0xc7
 8000ff4:	dd09      	ble.n	800100a <appTask+0x1ae>
		upCount = 0;
 8000ff6:	4b48      	ldr	r3, [pc, #288]	; (8001118 <appTask+0x2bc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
		speed += speedCoeff;
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <appTask+0x2c0>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b47      	ldr	r3, [pc, #284]	; (8001120 <appTask+0x2c4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4413      	add	r3, r2
 8001006:	4a45      	ldr	r2, [pc, #276]	; (800111c <appTask+0x2c0>)
 8001008:	6013      	str	r3, [r2, #0]
	}
	if(IO_READ_SM_R() || IO_READ_SM_L()){
 800100a:	2101      	movs	r1, #1
 800100c:	4845      	ldr	r0, [pc, #276]	; (8001124 <appTask+0x2c8>)
 800100e:	f001 fb47 	bl	80026a0 <D_GPIO_Read>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d106      	bne.n	8001026 <appTask+0x1ca>
 8001018:	2102      	movs	r1, #2
 800101a:	4842      	ldr	r0, [pc, #264]	; (8001124 <appTask+0x2c8>)
 800101c:	f001 fb40 	bl	80026a0 <D_GPIO_Read>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d005      	beq.n	8001032 <appTask+0x1d6>
		_ChangeSpeedCoeff = true;
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <appTask+0x2cc>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
		speedCoeff = 1;
 800102c:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <appTask+0x2c4>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
	}
	if(IO_READ_SM_C() && _ChangeSpeedCoeff){
 8001032:	2104      	movs	r1, #4
 8001034:	483b      	ldr	r0, [pc, #236]	; (8001124 <appTask+0x2c8>)
 8001036:	f001 fb33 	bl	80026a0 <D_GPIO_Read>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00a      	beq.n	8001056 <appTask+0x1fa>
 8001040:	4b39      	ldr	r3, [pc, #228]	; (8001128 <appTask+0x2cc>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <appTask+0x1fa>
		_ChangeSpeedCoeff = false;
 8001048:	4b37      	ldr	r3, [pc, #220]	; (8001128 <appTask+0x2cc>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
		speedCoeff = -1;
 800104e:	4b34      	ldr	r3, [pc, #208]	; (8001120 <appTask+0x2c4>)
 8001050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001054:	601a      	str	r2, [r3, #0]
	}
	if(speed >= 90) speed = 90;
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <appTask+0x2c0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b59      	cmp	r3, #89	; 0x59
 800105c:	dd02      	ble.n	8001064 <appTask+0x208>
 800105e:	4b2f      	ldr	r3, [pc, #188]	; (800111c <appTask+0x2c0>)
 8001060:	225a      	movs	r2, #90	; 0x5a
 8001062:	601a      	str	r2, [r3, #0]
	if(speed < 70) speed = 70;
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <appTask+0x2c0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b45      	cmp	r3, #69	; 0x45
 800106a:	dc02      	bgt.n	8001072 <appTask+0x216>
 800106c:	4b2b      	ldr	r3, [pc, #172]	; (800111c <appTask+0x2c0>)
 800106e:	2246      	movs	r2, #70	; 0x46
 8001070:	601a      	str	r2, [r3, #0]

	static int step = 0;
	//speed = SM_CalSpeed(StepSpeed[(int)(step / 100)]);
	speed = SM_CalSpeedFunc3(step,10,90);
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <appTask+0x2d0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	225a      	movs	r2, #90	; 0x5a
 8001078:	210a      	movs	r1, #10
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f8bc 	bl	80011f8 <SM_CalSpeedFunc3>
 8001080:	4603      	mov	r3, r0
 8001082:	4a26      	ldr	r2, [pc, #152]	; (800111c <appTask+0x2c0>)
 8001084:	6013      	str	r3, [r2, #0]
	step = SM1st_SetSpeed(speed,1);
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <appTask+0x2c0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2101      	movs	r1, #1
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fa21 	bl	80014d4 <SM1st_SetSpeed>
 8001092:	4603      	mov	r3, r0
 8001094:	4a25      	ldr	r2, [pc, #148]	; (800112c <appTask+0x2d0>)
 8001096:	6013      	str	r3, [r2, #0]

	//D_Mess_printf("%d\n", G_System_counter);
	//D_PWM_Set(1,100);
	//D_PWM_Set(2,100);
	//IO_SET_BLDC2_DIR();
	if(IO_READ_USERBUTTON()){
 8001098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109c:	4821      	ldr	r0, [pc, #132]	; (8001124 <appTask+0x2c8>)
 800109e:	f001 faff 	bl	80026a0 <D_GPIO_Read>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f083 0301 	eor.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d051      	beq.n	8001152 <appTask+0x2f6>
		IO_SET_USERLED();
 80010ae:	2120      	movs	r1, #32
 80010b0:	481f      	ldr	r0, [pc, #124]	; (8001130 <appTask+0x2d4>)
 80010b2:	f001 fad5 	bl	8002660 <D_GPIO_Set>
		if(_userButton){
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <appTask+0x2d8>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d050      	beq.n	8001160 <appTask+0x304>
			_userButton = false;
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <appTask+0x2d8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
			testSendData += 1;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <appTask+0x28c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <appTask+0x28c>)
 80010cc:	6013      	str	r3, [r2, #0]
			if(_StepEna){
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <appTask+0x2dc>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d034      	beq.n	8001140 <appTask+0x2e4>
				IO_SET_ENA();
 80010d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010da:	4818      	ldr	r0, [pc, #96]	; (800113c <appTask+0x2e0>)
 80010dc:	f001 fac0 	bl	8002660 <D_GPIO_Set>
				_StepEna = false;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <appTask+0x2dc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e03b      	b.n	8001160 <appTask+0x304>
 80010e8:	200000f0 	.word	0x200000f0
 80010ec:	200000a8 	.word	0x200000a8
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000134 	.word	0x20000134
 80010f8:	200000f4 	.word	0x200000f4
 80010fc:	200000f8 	.word	0x200000f8
 8001100:	200000fc 	.word	0x200000fc
 8001104:	20000100 	.word	0x20000100
 8001108:	20000104 	.word	0x20000104
 800110c:	20000004 	.word	0x20000004
 8001110:	200000c8 	.word	0x200000c8
 8001114:	200000d0 	.word	0x200000d0
 8001118:	20000108 	.word	0x20000108
 800111c:	20000008 	.word	0x20000008
 8001120:	2000000c 	.word	0x2000000c
 8001124:	40020800 	.word	0x40020800
 8001128:	2000010c 	.word	0x2000010c
 800112c:	20000110 	.word	0x20000110
 8001130:	40020000 	.word	0x40020000
 8001134:	20000114 	.word	0x20000114
 8001138:	20000115 	.word	0x20000115
 800113c:	40020400 	.word	0x40020400
			}else{
				IO_RESET_ENA();
 8001140:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001144:	4825      	ldr	r0, [pc, #148]	; (80011dc <appTask+0x380>)
 8001146:	f001 fa9b 	bl	8002680 <D_GPIO_Reset>
				_StepEna = true;
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <appTask+0x384>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e006      	b.n	8001160 <appTask+0x304>
		//Lottery_JP_SetSpeed(JPC_MAX_SPEED,0);

		//IO_SET_ROOMLIGHT();
		//JP_Lift_Down();
	}else{
		_userButton = true;
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <appTask+0x388>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
		IO_RESET_USERLED();
 8001158:	2120      	movs	r1, #32
 800115a:	4823      	ldr	r0, [pc, #140]	; (80011e8 <appTask+0x38c>)
 800115c:	f001 fa90 	bl	8002680 <D_GPIO_Reset>
		//D_PWM_Set(BLDC2,3000);
		//D_PWM_Set(BLDC3,3500);
		//JP_Lift_Up();
	}

	for(int i=0; i<8; i++){
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	e011      	b.n	800118a <appTask+0x32e>
		if(rcvData[0][i] != 0) rcvDataJudge[i] = rcvData[0][i];
 8001166:	4a21      	ldr	r2, [pc, #132]	; (80011ec <appTask+0x390>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d008      	beq.n	8001184 <appTask+0x328>
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <appTask+0x390>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4413      	add	r3, r2
 8001178:	7819      	ldrb	r1, [r3, #0]
 800117a:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <appTask+0x394>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4413      	add	r3, r2
 8001180:	460a      	mov	r2, r1
 8001182:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<8; i++){
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	3301      	adds	r3, #1
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b07      	cmp	r3, #7
 800118e:	ddea      	ble.n	8001166 <appTask+0x30a>
	}
	//デバッグ用
	int16_t debug_bits = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	80fb      	strh	r3, [r7, #6]
	debug_bits &= 0;
 8001194:	2300      	movs	r3, #0
 8001196:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_SM_R() << 2);
 8001198:	2101      	movs	r1, #1
 800119a:	4816      	ldr	r0, [pc, #88]	; (80011f4 <appTask+0x398>)
 800119c:	f001 fa80 	bl	80026a0 <D_GPIO_Read>
 80011a0:	4603      	mov	r3, r0
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_SM_C() << 1);
 80011ac:	2104      	movs	r1, #4
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <appTask+0x398>)
 80011b0:	f001 fa76 	bl	80026a0 <D_GPIO_Read>
 80011b4:	4603      	mov	r3, r0
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	4313      	orrs	r3, r2
 80011be:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_SM_L() << 0);
 80011c0:	2102      	movs	r1, #2
 80011c2:	480c      	ldr	r0, [pc, #48]	; (80011f4 <appTask+0x398>)
 80011c4:	f001 fa6c 	bl	80026a0 <D_GPIO_Read>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	80fb      	strh	r3, [r7, #6]
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", rcvData[0][0],rcvData[0][1],rcvData[0][2],rcvData[0][3],rcvData[0][4],rcvData[0][5],rcvData[0][6],rcvData[0][7]);
	D_Mess_printf("%3d,%3d,%3d,%3d,%3d,%3d,%3d,%3d\n", rcvDataJudge[0],rcvDataJudge[1],rcvDataJudge[2],rcvDataJudge[3],rcvDataJudge[4],rcvDataJudge[5],rcvDataJudge[6],rcvDataJudge[7]);
	D_Mess_printf("id : %3d, err : %3d\n", rcvData[1][0],rcvData[1][1]);
	*/

	return 0;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40020400 	.word	0x40020400
 80011e0:	20000115 	.word	0x20000115
 80011e4:	20000114 	.word	0x20000114
 80011e8:	40020000 	.word	0x40020000
 80011ec:	200000c8 	.word	0x200000c8
 80011f0:	200000e8 	.word	0x200000e8
 80011f4:	40020800 	.word	0x40020800

080011f8 <SM_CalSpeedFunc3>:
		return ((1.0 - fabs(x)) / (1.0 - edgeVal)) * (minSpeed - offsetSpeed) + offsetSpeed;
	}
	return minSpeed + (int)((double)(maxSpeed-minSpeed) * y);
}

static int SM_CalSpeedFunc3(int nowPos, int minSpeed, int maxSpeed){
 80011f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011fc:	b092      	sub	sp, #72	; 0x48
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6178      	str	r0, [r7, #20]
 8001202:	6139      	str	r1, [r7, #16]
 8001204:	60fa      	str	r2, [r7, #12]
	double stepHalf = SM_STEPCOUNT / 2.0;
 8001206:	a3b1      	add	r3, pc, #708	; (adr r3, 80014cc <SM_CalSpeedFunc3+0x2d4>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double x = ((double)nowPos-stepHalf) / stepHalf;
 8001210:	6978      	ldr	r0, [r7, #20]
 8001212:	f7ff f94b 	bl	80004ac <__aeabi_i2d>
 8001216:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800121a:	f7fe fff9 	bl	8000210 <__aeabi_dsub>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800122a:	f7ff fad3 	bl	80007d4 <__aeabi_ddiv>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	if (x > 1.0) x = 1.0;
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b9b      	ldr	r3, [pc, #620]	; (80014a8 <SM_CalSpeedFunc3+0x2b0>)
 800123c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001240:	f7ff fc2e 	bl	8000aa0 <__aeabi_dcmpgt>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <SM_CalSpeedFunc3+0x5c>
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b96      	ldr	r3, [pc, #600]	; (80014a8 <SM_CalSpeedFunc3+0x2b0>)
 8001250:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	if (x < -1.0) x = -1.0;
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b94      	ldr	r3, [pc, #592]	; (80014ac <SM_CalSpeedFunc3+0x2b4>)
 800125a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800125e:	f7ff fc01 	bl	8000a64 <__aeabi_dcmplt>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <SM_CalSpeedFunc3+0x7a>
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b8f      	ldr	r3, [pc, #572]	; (80014ac <SM_CalSpeedFunc3+0x2b4>)
 800126e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double y = -0.22 * cos(x/0.15)*exp(x*x) + 0.6;
 8001272:	a385      	add	r3, pc, #532	; (adr r3, 8001488 <SM_CalSpeedFunc3+0x290>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800127c:	f7ff faaa 	bl	80007d4 <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	ec43 2b17 	vmov	d7, r2, r3
 8001288:	eeb0 0a47 	vmov.f32	s0, s14
 800128c:	eef0 0a67 	vmov.f32	s1, s15
 8001290:	f005 fe8e 	bl	8006fb0 <cos>
 8001294:	ec51 0b10 	vmov	r0, r1, d0
 8001298:	a37d      	add	r3, pc, #500	; (adr r3, 8001490 <SM_CalSpeedFunc3+0x298>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff f96f 	bl	8000580 <__aeabi_dmul>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4690      	mov	r8, r2
 80012a8:	4699      	mov	r9, r3
 80012aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80012ae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80012b2:	f7ff f965 	bl	8000580 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	ec43 2b17 	vmov	d7, r2, r3
 80012be:	eeb0 0a47 	vmov.f32	s0, s14
 80012c2:	eef0 0a67 	vmov.f32	s1, s15
 80012c6:	f005 fec3 	bl	8007050 <exp>
 80012ca:	ec53 2b10 	vmov	r2, r3, d0
 80012ce:	4640      	mov	r0, r8
 80012d0:	4649      	mov	r1, r9
 80012d2:	f7ff f955 	bl	8000580 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	a36e      	add	r3, pc, #440	; (adr r3, 8001498 <SM_CalSpeedFunc3+0x2a0>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7fe ff96 	bl	8000214 <__adddf3>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double edgeVal = 0.98;
 80012f0:	a36b      	add	r3, pc, #428	; (adr r3, 80014a0 <SM_CalSpeedFunc3+0x2a8>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double offsetSpeed = 1;
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <SM_CalSpeedFunc3+0x2b0>)
 8001300:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double stopTime = 500;
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <SM_CalSpeedFunc3+0x2b8>)
 800130a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	static bool _stop = false;
	static bool _stopEna = true;
	static int stopCount = 0;
	if (_stopEna && (IO_READ_SM_R() || IO_READ_SM_L())){
 800130e:	4b69      	ldr	r3, [pc, #420]	; (80014b4 <SM_CalSpeedFunc3+0x2bc>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d013      	beq.n	800133e <SM_CalSpeedFunc3+0x146>
 8001316:	2101      	movs	r1, #1
 8001318:	4867      	ldr	r0, [pc, #412]	; (80014b8 <SM_CalSpeedFunc3+0x2c0>)
 800131a:	f001 f9c1 	bl	80026a0 <D_GPIO_Read>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d106      	bne.n	8001332 <SM_CalSpeedFunc3+0x13a>
 8001324:	2102      	movs	r1, #2
 8001326:	4864      	ldr	r0, [pc, #400]	; (80014b8 <SM_CalSpeedFunc3+0x2c0>)
 8001328:	f001 f9ba 	bl	80026a0 <D_GPIO_Read>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <SM_CalSpeedFunc3+0x146>
		_stopEna = false;
 8001332:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <SM_CalSpeedFunc3+0x2bc>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
		_stop = true;
 8001338:	4b60      	ldr	r3, [pc, #384]	; (80014bc <SM_CalSpeedFunc3+0x2c4>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
	}
	if(_stop){
 800133e:	4b5f      	ldr	r3, [pc, #380]	; (80014bc <SM_CalSpeedFunc3+0x2c4>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d01b      	beq.n	800137e <SM_CalSpeedFunc3+0x186>
		stopCount++;
 8001346:	4b5e      	ldr	r3, [pc, #376]	; (80014c0 <SM_CalSpeedFunc3+0x2c8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	4a5c      	ldr	r2, [pc, #368]	; (80014c0 <SM_CalSpeedFunc3+0x2c8>)
 800134e:	6013      	str	r3, [r2, #0]
		if(stopCount >= stopTime){
 8001350:	4b5b      	ldr	r3, [pc, #364]	; (80014c0 <SM_CalSpeedFunc3+0x2c8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f8a9 	bl	80004ac <__aeabi_i2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001362:	f7ff fb89 	bl	8000a78 <__aeabi_dcmple>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <SM_CalSpeedFunc3+0x182>
			_stop = false;
 800136c:	4b53      	ldr	r3, [pc, #332]	; (80014bc <SM_CalSpeedFunc3+0x2c4>)
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
			stopCount = 0;
 8001372:	4b53      	ldr	r3, [pc, #332]	; (80014c0 <SM_CalSpeedFunc3+0x2c8>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e001      	b.n	800137e <SM_CalSpeedFunc3+0x186>
		}else{
			return 0;
 800137a:	2300      	movs	r3, #0
 800137c:	e07e      	b.n	800147c <SM_CalSpeedFunc3+0x284>
		}
	}
	if (x >= -0.5 && x <= 0.5) _stopEna = true;
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b50      	ldr	r3, [pc, #320]	; (80014c4 <SM_CalSpeedFunc3+0x2cc>)
 8001384:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001388:	f7ff fb80 	bl	8000a8c <__aeabi_dcmpge>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00c      	beq.n	80013ac <SM_CalSpeedFunc3+0x1b4>
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <SM_CalSpeedFunc3+0x2d0>)
 8001398:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800139c:	f7ff fb6c 	bl	8000a78 <__aeabi_dcmple>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <SM_CalSpeedFunc3+0x1b4>
 80013a6:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <SM_CalSpeedFunc3+0x2bc>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
	if (x <= -edgeVal || x >= edgeVal){
 80013ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80013c0:	f7ff fb5a 	bl	8000a78 <__aeabi_dcmple>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d108      	bne.n	80013dc <SM_CalSpeedFunc3+0x1e4>
 80013ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013ce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80013d2:	f7ff fb5b 	bl	8000a8c <__aeabi_dcmpge>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d03c      	beq.n	8001456 <SM_CalSpeedFunc3+0x25e>
		return ((1.0 - fabs(x)) / (1.0 - edgeVal)) * (minSpeed - offsetSpeed) + offsetSpeed;
 80013dc:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80013de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80013e4:	4622      	mov	r2, r4
 80013e6:	462b      	mov	r3, r5
 80013e8:	f04f 0000 	mov.w	r0, #0
 80013ec:	492e      	ldr	r1, [pc, #184]	; (80014a8 <SM_CalSpeedFunc3+0x2b0>)
 80013ee:	f7fe ff0f 	bl	8000210 <__aeabi_dsub>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4614      	mov	r4, r2
 80013f8:	461d      	mov	r5, r3
 80013fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013fe:	f04f 0000 	mov.w	r0, #0
 8001402:	4929      	ldr	r1, [pc, #164]	; (80014a8 <SM_CalSpeedFunc3+0x2b0>)
 8001404:	f7fe ff04 	bl	8000210 <__aeabi_dsub>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4620      	mov	r0, r4
 800140e:	4629      	mov	r1, r5
 8001410:	f7ff f9e0 	bl	80007d4 <__aeabi_ddiv>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4614      	mov	r4, r2
 800141a:	461d      	mov	r5, r3
 800141c:	6938      	ldr	r0, [r7, #16]
 800141e:	f7ff f845 	bl	80004ac <__aeabi_i2d>
 8001422:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001426:	f7fe fef3 	bl	8000210 <__aeabi_dsub>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4620      	mov	r0, r4
 8001430:	4629      	mov	r1, r5
 8001432:	f7ff f8a5 	bl	8000580 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001442:	f7fe fee7 	bl	8000214 <__adddf3>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fb31 	bl	8000ab4 <__aeabi_d2iz>
 8001452:	4603      	mov	r3, r0
 8001454:	e012      	b.n	800147c <SM_CalSpeedFunc3+0x284>
	}
	return minSpeed + (int)((double)(maxSpeed-minSpeed) * y);
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f825 	bl	80004ac <__aeabi_i2d>
 8001462:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001466:	f7ff f88b 	bl	8000580 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff fb1f 	bl	8000ab4 <__aeabi_d2iz>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4413      	add	r3, r2
}
 800147c:	4618      	mov	r0, r3
 800147e:	3748      	adds	r7, #72	; 0x48
 8001480:	46bd      	mov	sp, r7
 8001482:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001486:	bf00      	nop
 8001488:	33333333 	.word	0x33333333
 800148c:	3fc33333 	.word	0x3fc33333
 8001490:	c28f5c29 	.word	0xc28f5c29
 8001494:	bfcc28f5 	.word	0xbfcc28f5
 8001498:	33333333 	.word	0x33333333
 800149c:	3fe33333 	.word	0x3fe33333
 80014a0:	f5c28f5c 	.word	0xf5c28f5c
 80014a4:	3fef5c28 	.word	0x3fef5c28
 80014a8:	3ff00000 	.word	0x3ff00000
 80014ac:	bff00000 	.word	0xbff00000
 80014b0:	407f4000 	.word	0x407f4000
 80014b4:	20000010 	.word	0x20000010
 80014b8:	40020800 	.word	0x40020800
 80014bc:	20000116 	.word	0x20000116
 80014c0:	20000118 	.word	0x20000118
 80014c4:	bfe00000 	.word	0xbfe00000
 80014c8:	3fe00000 	.word	0x3fe00000
 80014cc:	00000000 	.word	0x00000000
 80014d0:	407db000 	.word	0x407db000

080014d4 <SM1st_SetSpeed>:

static int SM1st_SetSpeed(int speed, int dir){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	static uint32_t recent_System_counter = 0;
	static uint32_t SMsendTime = 0;
	static bool _StepM = false;
	static bool _StepDir = false;
	static uint32_t stepCount = 0;
	if(speed >= 100) speed = 100;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b63      	cmp	r3, #99	; 0x63
 80014e2:	dd01      	ble.n	80014e8 <SM1st_SetSpeed+0x14>
 80014e4:	2364      	movs	r3, #100	; 0x64
 80014e6:	607b      	str	r3, [r7, #4]
	if(speed < 0) speed = 0;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	da01      	bge.n	80014f2 <SM1st_SetSpeed+0x1e>
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
	SMsendTime += G_System_MicroCounter - recent_System_counter;
 80014f2:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <SM1st_SetSpeed+0x118>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <SM1st_SetSpeed+0x11c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	1ad2      	subs	r2, r2, r3
 80014fc:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <SM1st_SetSpeed+0x120>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4413      	add	r3, r2
 8001502:	4a3c      	ldr	r2, [pc, #240]	; (80015f4 <SM1st_SetSpeed+0x120>)
 8001504:	6013      	str	r3, [r2, #0]
	recent_System_counter = G_System_MicroCounter;
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <SM1st_SetSpeed+0x118>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a39      	ldr	r2, [pc, #228]	; (80015f0 <SM1st_SetSpeed+0x11c>)
 800150c:	6013      	str	r3, [r2, #0]
	if(!_StepM){
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <SM1st_SetSpeed+0x124>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f083 0301 	eor.w	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00a      	beq.n	8001532 <SM1st_SetSpeed+0x5e>
		_StepM = true;
 800151c:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <SM1st_SetSpeed+0x124>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
		IO_RESET_STEP();
 8001522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001526:	4835      	ldr	r0, [pc, #212]	; (80015fc <SM1st_SetSpeed+0x128>)
 8001528:	f001 f8aa 	bl	8002680 <D_GPIO_Reset>
		return stepCount;
 800152c:	4b34      	ldr	r3, [pc, #208]	; (8001600 <SM1st_SetSpeed+0x12c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	e058      	b.n	80015e4 <SM1st_SetSpeed+0x110>
	}
	if (speed == 0) return stepCount;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <SM1st_SetSpeed+0x6a>
 8001538:	4b31      	ldr	r3, [pc, #196]	; (8001600 <SM1st_SetSpeed+0x12c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	e052      	b.n	80015e4 <SM1st_SetSpeed+0x110>
	if(SMsendTime >= SM_SEND_INTERVAL + (100 - speed)){
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f1c3 036c 	rsb	r3, r3, #108	; 0x6c
 8001544:	461a      	mov	r2, r3
 8001546:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <SM1st_SetSpeed+0x120>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d848      	bhi.n	80015e0 <SM1st_SetSpeed+0x10c>
		SMsendTime = 0;
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <SM1st_SetSpeed+0x120>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
		stepCount++;
 8001554:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <SM1st_SetSpeed+0x12c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	4a29      	ldr	r2, [pc, #164]	; (8001600 <SM1st_SetSpeed+0x12c>)
 800155c:	6013      	str	r3, [r2, #0]
		if(_StepM){
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <SM1st_SetSpeed+0x124>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <SM1st_SetSpeed+0xa2>
			_StepM = false;
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <SM1st_SetSpeed+0x124>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
			IO_SET_STEP();
 800156c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001570:	4822      	ldr	r0, [pc, #136]	; (80015fc <SM1st_SetSpeed+0x128>)
 8001572:	f001 f875 	bl	8002660 <D_GPIO_Set>
		}
		/*else{
			_StepM = true;
			IO_RESET_STEP();
		}*/
		if(_StepDir){
 8001576:	4b23      	ldr	r3, [pc, #140]	; (8001604 <SM1st_SetSpeed+0x130>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d018      	beq.n	80015b0 <SM1st_SetSpeed+0xdc>
			if(IO_READ_SM_L()){
 800157e:	2102      	movs	r1, #2
 8001580:	4821      	ldr	r0, [pc, #132]	; (8001608 <SM1st_SetSpeed+0x134>)
 8001582:	f001 f88d 	bl	80026a0 <D_GPIO_Read>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00b      	beq.n	80015a4 <SM1st_SetSpeed+0xd0>
				IO_RESET_DIR();
 800158c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001590:	481a      	ldr	r0, [pc, #104]	; (80015fc <SM1st_SetSpeed+0x128>)
 8001592:	f001 f875 	bl	8002680 <D_GPIO_Reset>
				_StepDir = false;
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <SM1st_SetSpeed+0x130>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
				stepCount = 0;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <SM1st_SetSpeed+0x12c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e01d      	b.n	80015e0 <SM1st_SetSpeed+0x10c>
			}else{
				IO_SET_DIR();
 80015a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a8:	4814      	ldr	r0, [pc, #80]	; (80015fc <SM1st_SetSpeed+0x128>)
 80015aa:	f001 f859 	bl	8002660 <D_GPIO_Set>
 80015ae:	e017      	b.n	80015e0 <SM1st_SetSpeed+0x10c>
			}
		}else{
			if(IO_READ_SM_R()){
 80015b0:	2101      	movs	r1, #1
 80015b2:	4815      	ldr	r0, [pc, #84]	; (8001608 <SM1st_SetSpeed+0x134>)
 80015b4:	f001 f874 	bl	80026a0 <D_GPIO_Read>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00b      	beq.n	80015d6 <SM1st_SetSpeed+0x102>
				IO_SET_DIR();
 80015be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c2:	480e      	ldr	r0, [pc, #56]	; (80015fc <SM1st_SetSpeed+0x128>)
 80015c4:	f001 f84c 	bl	8002660 <D_GPIO_Set>
				_StepDir = true;
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <SM1st_SetSpeed+0x130>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
				stepCount = 0;
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <SM1st_SetSpeed+0x12c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e004      	b.n	80015e0 <SM1st_SetSpeed+0x10c>
			}else{
				IO_RESET_DIR();
 80015d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015da:	4808      	ldr	r0, [pc, #32]	; (80015fc <SM1st_SetSpeed+0x128>)
 80015dc:	f001 f850 	bl	8002680 <D_GPIO_Reset>
			}
		}
	}
	return stepCount;
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <SM1st_SetSpeed+0x12c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000134 	.word	0x20000134
 80015f0:	2000011c 	.word	0x2000011c
 80015f4:	20000120 	.word	0x20000120
 80015f8:	20000124 	.word	0x20000124
 80015fc:	40020000 	.word	0x40020000
 8001600:	20000128 	.word	0x20000128
 8001604:	2000012c 	.word	0x2000012c
 8001608:	40020800 	.word	0x40020800

0800160c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001610:	f001 fa8a 	bl	8002b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001614:	f000 f81e 	bl	8001654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001618:	f000 fa3c 	bl	8001a94 <MX_GPIO_Init>
  MX_DMA_Init();
 800161c:	f000 f9f4 	bl	8001a08 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001620:	f000 f99e 	bl	8001960 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001624:	f000 f9c6 	bl	80019b4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001628:	f000 f902 	bl	8001830 <MX_TIM3_Init>
  MX_CAN1_Init();
 800162c:	f000 f87e 	bl	800172c <MX_CAN1_Init>
  MX_TIM2_Init();
 8001630:	f000 f8b2 	bl	8001798 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  D_PWM_Init();
 8001634:	f001 fa62 	bl	8002afc <D_PWM_Init>
  D_CAN_Init();
 8001638:	f000 fee2 	bl	8002400 <D_CAN_Init>

  HAL_TIM_Base_Start_IT(&htim2);
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <main+0x44>)
 800163e:	f003 fce3 	bl	8005008 <HAL_TIM_Base_Start_IT>

  appInit();
 8001642:	f7ff fbdb 	bl	8000dfc <appInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //メインタスクの処理
	  appTask();
 8001646:	f7ff fc09 	bl	8000e5c <appTask>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
//		  D_Mess_printf("tes2");
//		  D_Mess_flush();
	  }*/
	  D_Mess_flush();
 800164a:	f001 f85f 	bl	800270c <D_Mess_flush>
	  appTask();
 800164e:	e7fa      	b.n	8001646 <main+0x3a>
 8001650:	200007dc 	.word	0x200007dc

08001654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b094      	sub	sp, #80	; 0x50
 8001658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	2234      	movs	r2, #52	; 0x34
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f005 fc9a 	bl	8006f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <SystemClock_Config+0xd0>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	4a28      	ldr	r2, [pc, #160]	; (8001724 <SystemClock_Config+0xd0>)
 8001682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001686:	6413      	str	r3, [r2, #64]	; 0x40
 8001688:	4b26      	ldr	r3, [pc, #152]	; (8001724 <SystemClock_Config+0xd0>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001694:	2300      	movs	r3, #0
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	4b23      	ldr	r3, [pc, #140]	; (8001728 <SystemClock_Config+0xd4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016a0:	4a21      	ldr	r2, [pc, #132]	; (8001728 <SystemClock_Config+0xd4>)
 80016a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <SystemClock_Config+0xd4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b4:	2302      	movs	r3, #2
 80016b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b8:	2301      	movs	r3, #1
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016bc:	2310      	movs	r3, #16
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c0:	2302      	movs	r3, #2
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c4:	2300      	movs	r3, #0
 80016c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016c8:	2308      	movs	r3, #8
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80016cc:	2350      	movs	r3, #80	; 0x50
 80016ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016d8:	2302      	movs	r3, #2
 80016da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 f9a3 	bl	8004a2c <HAL_RCC_OscConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016ec:	f000 fb28 	bl	8001d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f0:	230f      	movs	r3, #15
 80016f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f4:	2302      	movs	r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	2102      	movs	r1, #2
 800170c:	4618      	mov	r0, r3
 800170e:	f002 fec1 	bl	8004494 <HAL_RCC_ClockConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001718:	f000 fb12 	bl	8001d40 <Error_Handler>
  }
}
 800171c:	bf00      	nop
 800171e:	3750      	adds	r7, #80	; 0x50
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	40007000 	.word	0x40007000

0800172c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <MX_CAN1_Init+0x64>)
 8001732:	4a18      	ldr	r2, [pc, #96]	; (8001794 <MX_CAN1_Init+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <MX_CAN1_Init+0x64>)
 8001738:	2208      	movs	r2, #8
 800173a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_CAN1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MX_CAN1_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_CAN1_Init+0x64>)
 800174a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800174e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_CAN1_Init+0x64>)
 8001752:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8001756:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <MX_CAN1_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_CAN1_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <MX_CAN1_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_CAN1_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <MX_CAN1_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_CAN1_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800177c:	4804      	ldr	r0, [pc, #16]	; (8001790 <MX_CAN1_Init+0x64>)
 800177e:	f001 fa45 	bl	8002c0c <HAL_CAN_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001788:	f000 fada 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000868 	.word	0x20000868
 8001794:	40006400 	.word	0x40006400

08001798 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	463b      	mov	r3, r7
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <MX_TIM2_Init+0x94>)
 80017b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <MX_TIM2_Init+0x94>)
 80017be:	2208      	movs	r2, #8
 80017c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_TIM2_Init+0x94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <MX_TIM2_Init+0x94>)
 80017ca:	f240 12f3 	movw	r2, #499	; 0x1f3
 80017ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_TIM2_Init+0x94>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_TIM2_Init+0x94>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017dc:	4813      	ldr	r0, [pc, #76]	; (800182c <MX_TIM2_Init+0x94>)
 80017de:	f003 fbc3 	bl	8004f68 <HAL_TIM_Base_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017e8:	f000 faaa 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4619      	mov	r1, r3
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <MX_TIM2_Init+0x94>)
 80017fa:	f003 ff61 	bl	80056c0 <HAL_TIM_ConfigClockSource>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001804:	f000 fa9c 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_TIM2_Init+0x94>)
 8001816:	f004 fb53 	bl	8005ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001820:	f000 fa8e 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200007dc 	.word	0x200007dc

08001830 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	; 0x38
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	615a      	str	r2, [r3, #20]
 800185e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001860:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <MX_TIM3_Init+0x128>)
 8001862:	4a3e      	ldr	r2, [pc, #248]	; (800195c <MX_TIM3_Init+0x12c>)
 8001864:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001866:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <MX_TIM3_Init+0x128>)
 8001868:	224f      	movs	r2, #79	; 0x4f
 800186a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <MX_TIM3_Init+0x128>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8001872:	4b39      	ldr	r3, [pc, #228]	; (8001958 <MX_TIM3_Init+0x128>)
 8001874:	f241 3287 	movw	r2, #4999	; 0x1387
 8001878:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187a:	4b37      	ldr	r3, [pc, #220]	; (8001958 <MX_TIM3_Init+0x128>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b35      	ldr	r3, [pc, #212]	; (8001958 <MX_TIM3_Init+0x128>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001886:	4834      	ldr	r0, [pc, #208]	; (8001958 <MX_TIM3_Init+0x128>)
 8001888:	f003 fb6e 	bl	8004f68 <HAL_TIM_Base_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001892:	f000 fa55 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800189c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a0:	4619      	mov	r1, r3
 80018a2:	482d      	ldr	r0, [pc, #180]	; (8001958 <MX_TIM3_Init+0x128>)
 80018a4:	f003 ff0c 	bl	80056c0 <HAL_TIM_ConfigClockSource>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018ae:	f000 fa47 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018b2:	4829      	ldr	r0, [pc, #164]	; (8001958 <MX_TIM3_Init+0x128>)
 80018b4:	f003 fc18 	bl	80050e8 <HAL_TIM_PWM_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018be:	f000 fa3f 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ca:	f107 0320 	add.w	r3, r7, #32
 80018ce:	4619      	mov	r1, r3
 80018d0:	4821      	ldr	r0, [pc, #132]	; (8001958 <MX_TIM3_Init+0x128>)
 80018d2:	f004 faf5 	bl	8005ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80018dc:	f000 fa30 	bl	8001d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e0:	2360      	movs	r3, #96	; 0x60
 80018e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	4619      	mov	r1, r3
 80018f6:	4818      	ldr	r0, [pc, #96]	; (8001958 <MX_TIM3_Init+0x128>)
 80018f8:	f003 fe20 	bl	800553c <HAL_TIM_PWM_ConfigChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001902:	f000 fa1d 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2204      	movs	r2, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4812      	ldr	r0, [pc, #72]	; (8001958 <MX_TIM3_Init+0x128>)
 800190e:	f003 fe15 	bl	800553c <HAL_TIM_PWM_ConfigChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001918:	f000 fa12 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2208      	movs	r2, #8
 8001920:	4619      	mov	r1, r3
 8001922:	480d      	ldr	r0, [pc, #52]	; (8001958 <MX_TIM3_Init+0x128>)
 8001924:	f003 fe0a 	bl	800553c <HAL_TIM_PWM_ConfigChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800192e:	f000 fa07 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	220c      	movs	r2, #12
 8001936:	4619      	mov	r1, r3
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <MX_TIM3_Init+0x128>)
 800193a:	f003 fdff 	bl	800553c <HAL_TIM_PWM_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001944:	f000 f9fc 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <MX_TIM3_Init+0x128>)
 800194a:	f000 facb 	bl	8001ee4 <HAL_TIM_MspPostInit>

}
 800194e:	bf00      	nop
 8001950:	3738      	adds	r7, #56	; 0x38
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000630 	.word	0x20000630
 800195c:	40000400 	.word	0x40000400

08001960 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_USART1_UART_Init+0x4c>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <MX_USART1_UART_Init+0x50>)
 8001968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <MX_USART1_UART_Init+0x4c>)
 800196c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_USART1_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_USART1_UART_Init+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <MX_USART1_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_USART1_UART_Init+0x4c>)
 8001986:	220c      	movs	r2, #12
 8001988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <MX_USART1_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_USART1_UART_Init+0x4c>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_USART1_UART_Init+0x4c>)
 8001998:	f004 fb22 	bl	8005fe0 <HAL_UART_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019a2:	f000 f9cd 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000798 	.word	0x20000798
 80019b0:	40011000 	.word	0x40011000

080019b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <MX_USART2_UART_Init+0x50>)
 80019bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019da:	220c      	movs	r2, #12
 80019dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_USART2_UART_Init+0x4c>)
 80019ec:	f004 faf8 	bl	8005fe0 <HAL_UART_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019f6:	f000 f9a3 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000824 	.word	0x20000824
 8001a04:	40004400 	.word	0x40004400

08001a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <MX_DMA_Init+0x88>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <MX_DMA_Init+0x88>)
 8001a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <MX_DMA_Init+0x88>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <MX_DMA_Init+0x88>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <MX_DMA_Init+0x88>)
 8001a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <MX_DMA_Init+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2010      	movs	r0, #16
 8001a4c:	f001 ff23 	bl	8003896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a50:	2010      	movs	r0, #16
 8001a52:	f001 ff3c 	bl	80038ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2011      	movs	r0, #17
 8001a5c:	f001 ff1b 	bl	8003896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a60:	2011      	movs	r0, #17
 8001a62:	f001 ff34 	bl	80038ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	203a      	movs	r0, #58	; 0x3a
 8001a6c:	f001 ff13 	bl	8003896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a70:	203a      	movs	r0, #58	; 0x3a
 8001a72:	f001 ff2c 	bl	80038ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2046      	movs	r0, #70	; 0x46
 8001a7c:	f001 ff0b 	bl	8003896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001a80:	2046      	movs	r0, #70	; 0x46
 8001a82:	f001 ff24 	bl	80038ce <HAL_NVIC_EnableIRQ>

}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800

08001a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a69      	ldr	r2, [pc, #420]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a62      	ldr	r2, [pc, #392]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b60      	ldr	r3, [pc, #384]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b5c      	ldr	r3, [pc, #368]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a5b      	ldr	r2, [pc, #364]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b55      	ldr	r3, [pc, #340]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a54      	ldr	r2, [pc, #336]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b52      	ldr	r3, [pc, #328]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4b4e      	ldr	r3, [pc, #312]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <MX_GPIO_Init+0x1c4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	f641 0121 	movw	r1, #6177	; 0x1821
 8001b3c:	4847      	ldr	r0, [pc, #284]	; (8001c5c <MX_GPIO_Init+0x1c8>)
 8001b3e:	f002 fc8f 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001b48:	4845      	ldr	r0, [pc, #276]	; (8001c60 <MX_GPIO_Init+0x1cc>)
 8001b4a:	f002 fc89 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f24d 0104 	movw	r1, #53252	; 0xd004
 8001b54:	4843      	ldr	r0, [pc, #268]	; (8001c64 <MX_GPIO_Init+0x1d0>)
 8001b56:	f002 fc83 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b60:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	483b      	ldr	r0, [pc, #236]	; (8001c60 <MX_GPIO_Init+0x1cc>)
 8001b72:	f002 fac9 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b76:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001b7a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4835      	ldr	r0, [pc, #212]	; (8001c60 <MX_GPIO_Init+0x1cc>)
 8001b8c:	f002 fabc 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b90:	2301      	movs	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b94:	2311      	movs	r3, #17
 8001b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	482d      	ldr	r0, [pc, #180]	; (8001c5c <MX_GPIO_Init+0x1c8>)
 8001ba8:	f002 faae 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 8001bac:	f248 0312 	movw	r3, #32786	; 0x8012
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4826      	ldr	r0, [pc, #152]	; (8001c5c <MX_GPIO_Init+0x1c8>)
 8001bc2:	f002 faa1 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8001bc6:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	481f      	ldr	r0, [pc, #124]	; (8001c5c <MX_GPIO_Init+0x1c8>)
 8001be0:	f002 fa92 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8001be4:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8001be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bea:	2301      	movs	r3, #1
 8001bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4818      	ldr	r0, [pc, #96]	; (8001c60 <MX_GPIO_Init+0x1cc>)
 8001bfe:	f002 fa83 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8001c02:	f24d 0304 	movw	r3, #53252	; 0xd004
 8001c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4812      	ldr	r0, [pc, #72]	; (8001c64 <MX_GPIO_Init+0x1d0>)
 8001c1c:	f002 fa74 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c20:	2304      	movs	r3, #4
 8001c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	480d      	ldr	r0, [pc, #52]	; (8001c68 <MX_GPIO_Init+0x1d4>)
 8001c34:	f002 fa68 	bl	8004108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <MX_GPIO_Init+0x1d0>)
 8001c4c:	f002 fa5c 	bl	8004108 <HAL_GPIO_Init>

}
 8001c50:	bf00      	nop
 8001c52:	3728      	adds	r7, #40	; 0x28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	40020800 	.word	0x40020800
 8001c64:	40020400 	.word	0x40020400
 8001c68:	40020c00 	.word	0x40020c00

08001c6c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_UART_TxCpltCallback+0x20>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_UART_TxCpltCallback+0x16>
	  D_Mess_TransitionCompletedCallBack();
 8001c7e:	f000 fd77 	bl	8002770 <D_Mess_TransitionCompletedCallBack>
  }
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40004400 	.word	0x40004400

08001c90 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  D_CAN_ReceiveCallBack(hcan);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 fc71 	bl	8002580 <D_CAN_ReceiveCallBack>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_CAN_TxMailboxCompleteCallback>:
void HAL_CAN_TxMailboxCompleteCallback(){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  //D_CAN_ReceiveCallBack(hcan);
  D_Mess_printf("TxMailboxComplete\n");
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <HAL_CAN_TxMailboxCompleteCallback+0x10>)
 8001cae:	f000 fd0d 	bl	80026cc <D_Mess_printf>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	080083e0 	.word	0x080083e0

08001cbc <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  D_Mess_printf("TxMailbox0Complete\n");
 8001cc4:	4803      	ldr	r0, [pc, #12]	; (8001cd4 <HAL_CAN_TxMailbox0CompleteCallback+0x18>)
 8001cc6:	f000 fd01 	bl	80026cc <D_Mess_printf>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	080083f4 	.word	0x080083f4

08001cd8 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  D_Mess_printf("TxMailbox1Complete\n");
 8001ce0:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <HAL_CAN_TxMailbox1CompleteCallback+0x18>)
 8001ce2:	f000 fcf3 	bl	80026cc <D_Mess_printf>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	08008408 	.word	0x08008408

08001cf4 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  //D_CAN_ReceiveCallBack(hcan);
  D_Mess_printf("TxMailbox2Complete\n");
 8001cfc:	4803      	ldr	r0, [pc, #12]	; (8001d0c <HAL_CAN_TxMailbox2CompleteCallback+0x18>)
 8001cfe:	f000 fce5 	bl	80026cc <D_Mess_printf>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	0800841c 	.word	0x0800841c

08001d10 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d104      	bne.n	8001d2a <HAL_TIM_PeriodElapsedCallback+0x1a>
    	G_System_MicroCounter++;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001d28:	6013      	str	r3, [r2, #0]
    }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200007dc 	.word	0x200007dc
 8001d3c:	20000134 	.word	0x20000134

08001d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <Error_Handler+0x8>
	...

08001d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_MspInit+0x4c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d8a:	2007      	movs	r0, #7
 8001d8c:	f001 fd78 	bl	8003880 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a29      	ldr	r2, [pc, #164]	; (8001e60 <HAL_CAN_MspInit+0xc4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d14c      	bne.n	8001e58 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <HAL_CAN_MspInit+0xc8>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <HAL_CAN_MspInit+0xc8>)
 8001dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_CAN_MspInit+0xc8>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_CAN_MspInit+0xc8>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a20      	ldr	r2, [pc, #128]	; (8001e64 <HAL_CAN_MspInit+0xc8>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_CAN_MspInit+0xc8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001df6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e08:	2309      	movs	r3, #9
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	4815      	ldr	r0, [pc, #84]	; (8001e68 <HAL_CAN_MspInit+0xcc>)
 8001e14:	f002 f978 	bl	8004108 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2013      	movs	r0, #19
 8001e1e:	f001 fd3a 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001e22:	2013      	movs	r0, #19
 8001e24:	f001 fd53 	bl	80038ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2014      	movs	r0, #20
 8001e2e:	f001 fd32 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001e32:	2014      	movs	r0, #20
 8001e34:	f001 fd4b 	bl	80038ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2015      	movs	r0, #21
 8001e3e:	f001 fd2a 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001e42:	2015      	movs	r0, #21
 8001e44:	f001 fd43 	bl	80038ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	2016      	movs	r0, #22
 8001e4e:	f001 fd22 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001e52:	2016      	movs	r0, #22
 8001e54:	f001 fd3b 	bl	80038ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	; 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40006400 	.word	0x40006400
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020400 	.word	0x40020400

08001e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7c:	d116      	bne.n	8001eac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_TIM_Base_MspInit+0x70>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a15      	ldr	r2, [pc, #84]	; (8001edc <HAL_TIM_Base_MspInit+0x70>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_TIM_Base_MspInit+0x70>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	201c      	movs	r0, #28
 8001ea0:	f001 fcf9 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ea4:	201c      	movs	r0, #28
 8001ea6:	f001 fd12 	bl	80038ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eaa:	e012      	b.n	8001ed2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <HAL_TIM_Base_MspInit+0x74>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_TIM_Base_MspInit+0x70>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_TIM_Base_MspInit+0x70>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_TIM_Base_MspInit+0x70>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
}
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40000400 	.word	0x40000400

08001ee4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <HAL_TIM_MspPostInit+0xa4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d13b      	bne.n	8001f7e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_TIM_MspPostInit+0xa8>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HAL_TIM_MspPostInit+0xa8>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_TIM_MspPostInit+0xa8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_TIM_MspPostInit+0xa8>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <HAL_TIM_MspPostInit+0xa8>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_TIM_MspPostInit+0xa8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f3e:	23c0      	movs	r3, #192	; 0xc0
 8001f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <HAL_TIM_MspPostInit+0xac>)
 8001f5a:	f002 f8d5 	bl	8004108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	4806      	ldr	r0, [pc, #24]	; (8001f94 <HAL_TIM_MspPostInit+0xb0>)
 8001f7a:	f002 f8c5 	bl	8004108 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	; 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400

08001f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a97      	ldr	r2, [pc, #604]	; (8002214 <HAL_UART_MspInit+0x27c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	f040 8092 	bne.w	80020e0 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	4b95      	ldr	r3, [pc, #596]	; (8002218 <HAL_UART_MspInit+0x280>)
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	4a94      	ldr	r2, [pc, #592]	; (8002218 <HAL_UART_MspInit+0x280>)
 8001fc6:	f043 0310 	orr.w	r3, r3, #16
 8001fca:	6453      	str	r3, [r2, #68]	; 0x44
 8001fcc:	4b92      	ldr	r3, [pc, #584]	; (8002218 <HAL_UART_MspInit+0x280>)
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	4b8e      	ldr	r3, [pc, #568]	; (8002218 <HAL_UART_MspInit+0x280>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	4a8d      	ldr	r2, [pc, #564]	; (8002218 <HAL_UART_MspInit+0x280>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe8:	4b8b      	ldr	r3, [pc, #556]	; (8002218 <HAL_UART_MspInit+0x280>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ff4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002006:	2307      	movs	r3, #7
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	4882      	ldr	r0, [pc, #520]	; (800221c <HAL_UART_MspInit+0x284>)
 8002012:	f002 f879 	bl	8004108 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002016:	4b82      	ldr	r3, [pc, #520]	; (8002220 <HAL_UART_MspInit+0x288>)
 8002018:	4a82      	ldr	r2, [pc, #520]	; (8002224 <HAL_UART_MspInit+0x28c>)
 800201a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800201c:	4b80      	ldr	r3, [pc, #512]	; (8002220 <HAL_UART_MspInit+0x288>)
 800201e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002022:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002024:	4b7e      	ldr	r3, [pc, #504]	; (8002220 <HAL_UART_MspInit+0x288>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800202a:	4b7d      	ldr	r3, [pc, #500]	; (8002220 <HAL_UART_MspInit+0x288>)
 800202c:	2200      	movs	r2, #0
 800202e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002030:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <HAL_UART_MspInit+0x288>)
 8002032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002036:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002038:	4b79      	ldr	r3, [pc, #484]	; (8002220 <HAL_UART_MspInit+0x288>)
 800203a:	2200      	movs	r2, #0
 800203c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800203e:	4b78      	ldr	r3, [pc, #480]	; (8002220 <HAL_UART_MspInit+0x288>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002044:	4b76      	ldr	r3, [pc, #472]	; (8002220 <HAL_UART_MspInit+0x288>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800204a:	4b75      	ldr	r3, [pc, #468]	; (8002220 <HAL_UART_MspInit+0x288>)
 800204c:	2200      	movs	r2, #0
 800204e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002050:	4b73      	ldr	r3, [pc, #460]	; (8002220 <HAL_UART_MspInit+0x288>)
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002056:	4872      	ldr	r0, [pc, #456]	; (8002220 <HAL_UART_MspInit+0x288>)
 8002058:	f001 fc54 	bl	8003904 <HAL_DMA_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002062:	f7ff fe6d 	bl	8001d40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a6d      	ldr	r2, [pc, #436]	; (8002220 <HAL_UART_MspInit+0x288>)
 800206a:	639a      	str	r2, [r3, #56]	; 0x38
 800206c:	4a6c      	ldr	r2, [pc, #432]	; (8002220 <HAL_UART_MspInit+0x288>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002072:	4b6d      	ldr	r3, [pc, #436]	; (8002228 <HAL_UART_MspInit+0x290>)
 8002074:	4a6d      	ldr	r2, [pc, #436]	; (800222c <HAL_UART_MspInit+0x294>)
 8002076:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002078:	4b6b      	ldr	r3, [pc, #428]	; (8002228 <HAL_UART_MspInit+0x290>)
 800207a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800207e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002080:	4b69      	ldr	r3, [pc, #420]	; (8002228 <HAL_UART_MspInit+0x290>)
 8002082:	2240      	movs	r2, #64	; 0x40
 8002084:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002086:	4b68      	ldr	r3, [pc, #416]	; (8002228 <HAL_UART_MspInit+0x290>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800208c:	4b66      	ldr	r3, [pc, #408]	; (8002228 <HAL_UART_MspInit+0x290>)
 800208e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002092:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002094:	4b64      	ldr	r3, [pc, #400]	; (8002228 <HAL_UART_MspInit+0x290>)
 8002096:	2200      	movs	r2, #0
 8002098:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_UART_MspInit+0x290>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80020a0:	4b61      	ldr	r3, [pc, #388]	; (8002228 <HAL_UART_MspInit+0x290>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020a6:	4b60      	ldr	r3, [pc, #384]	; (8002228 <HAL_UART_MspInit+0x290>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ac:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <HAL_UART_MspInit+0x290>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020b2:	485d      	ldr	r0, [pc, #372]	; (8002228 <HAL_UART_MspInit+0x290>)
 80020b4:	f001 fc26 	bl	8003904 <HAL_DMA_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80020be:	f7ff fe3f 	bl	8001d40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a58      	ldr	r2, [pc, #352]	; (8002228 <HAL_UART_MspInit+0x290>)
 80020c6:	635a      	str	r2, [r3, #52]	; 0x34
 80020c8:	4a57      	ldr	r2, [pc, #348]	; (8002228 <HAL_UART_MspInit+0x290>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2025      	movs	r0, #37	; 0x25
 80020d4:	f001 fbdf 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020d8:	2025      	movs	r0, #37	; 0x25
 80020da:	f001 fbf8 	bl	80038ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020de:	e095      	b.n	800220c <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a52      	ldr	r2, [pc, #328]	; (8002230 <HAL_UART_MspInit+0x298>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	f040 8090 	bne.w	800220c <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	4b49      	ldr	r3, [pc, #292]	; (8002218 <HAL_UART_MspInit+0x280>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	4a48      	ldr	r2, [pc, #288]	; (8002218 <HAL_UART_MspInit+0x280>)
 80020f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fa:	6413      	str	r3, [r2, #64]	; 0x40
 80020fc:	4b46      	ldr	r3, [pc, #280]	; (8002218 <HAL_UART_MspInit+0x280>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	4b42      	ldr	r3, [pc, #264]	; (8002218 <HAL_UART_MspInit+0x280>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	4a41      	ldr	r2, [pc, #260]	; (8002218 <HAL_UART_MspInit+0x280>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6313      	str	r3, [r2, #48]	; 0x30
 8002118:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <HAL_UART_MspInit+0x280>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002124:	230c      	movs	r3, #12
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002134:	2307      	movs	r3, #7
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	4619      	mov	r1, r3
 800213e:	4837      	ldr	r0, [pc, #220]	; (800221c <HAL_UART_MspInit+0x284>)
 8002140:	f001 ffe2 	bl	8004108 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002144:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <HAL_UART_MspInit+0x29c>)
 8002146:	4a3c      	ldr	r2, [pc, #240]	; (8002238 <HAL_UART_MspInit+0x2a0>)
 8002148:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800214a:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <HAL_UART_MspInit+0x29c>)
 800214c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002150:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <HAL_UART_MspInit+0x29c>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002158:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_UART_MspInit+0x29c>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800215e:	4b35      	ldr	r3, [pc, #212]	; (8002234 <HAL_UART_MspInit+0x29c>)
 8002160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002164:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002166:	4b33      	ldr	r3, [pc, #204]	; (8002234 <HAL_UART_MspInit+0x29c>)
 8002168:	2200      	movs	r2, #0
 800216a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <HAL_UART_MspInit+0x29c>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002172:	4b30      	ldr	r3, [pc, #192]	; (8002234 <HAL_UART_MspInit+0x29c>)
 8002174:	2200      	movs	r2, #0
 8002176:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <HAL_UART_MspInit+0x29c>)
 800217a:	2200      	movs	r2, #0
 800217c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800217e:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_UART_MspInit+0x29c>)
 8002180:	2200      	movs	r2, #0
 8002182:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002184:	482b      	ldr	r0, [pc, #172]	; (8002234 <HAL_UART_MspInit+0x29c>)
 8002186:	f001 fbbd 	bl	8003904 <HAL_DMA_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8002190:	f7ff fdd6 	bl	8001d40 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a27      	ldr	r2, [pc, #156]	; (8002234 <HAL_UART_MspInit+0x29c>)
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
 800219a:	4a26      	ldr	r2, [pc, #152]	; (8002234 <HAL_UART_MspInit+0x29c>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <HAL_UART_MspInit+0x2a4>)
 80021a2:	4a27      	ldr	r2, [pc, #156]	; (8002240 <HAL_UART_MspInit+0x2a8>)
 80021a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80021a6:	4b25      	ldr	r3, [pc, #148]	; (800223c <HAL_UART_MspInit+0x2a4>)
 80021a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ac:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ae:	4b23      	ldr	r3, [pc, #140]	; (800223c <HAL_UART_MspInit+0x2a4>)
 80021b0:	2240      	movs	r2, #64	; 0x40
 80021b2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_UART_MspInit+0x2a4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_UART_MspInit+0x2a4>)
 80021bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_UART_MspInit+0x2a4>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021c8:	4b1c      	ldr	r3, [pc, #112]	; (800223c <HAL_UART_MspInit+0x2a4>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_UART_MspInit+0x2a4>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_UART_MspInit+0x2a4>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_UART_MspInit+0x2a4>)
 80021dc:	2200      	movs	r2, #0
 80021de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021e0:	4816      	ldr	r0, [pc, #88]	; (800223c <HAL_UART_MspInit+0x2a4>)
 80021e2:	f001 fb8f 	bl	8003904 <HAL_DMA_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80021ec:	f7ff fda8 	bl	8001d40 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a12      	ldr	r2, [pc, #72]	; (800223c <HAL_UART_MspInit+0x2a4>)
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34
 80021f6:	4a11      	ldr	r2, [pc, #68]	; (800223c <HAL_UART_MspInit+0x2a4>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2100      	movs	r1, #0
 8002200:	2026      	movs	r0, #38	; 0x26
 8002202:	f001 fb48 	bl	8003896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002206:	2026      	movs	r0, #38	; 0x26
 8002208:	f001 fb61 	bl	80038ce <HAL_NVIC_EnableIRQ>
}
 800220c:	bf00      	nop
 800220e:	3730      	adds	r7, #48	; 0x30
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40011000 	.word	0x40011000
 8002218:	40023800 	.word	0x40023800
 800221c:	40020000 	.word	0x40020000
 8002220:	200006d8 	.word	0x200006d8
 8002224:	40026440 	.word	0x40026440
 8002228:	20000678 	.word	0x20000678
 800222c:	400264b8 	.word	0x400264b8
 8002230:	40004400 	.word	0x40004400
 8002234:	200005d0 	.word	0x200005d0
 8002238:	40026088 	.word	0x40026088
 800223c:	20000738 	.word	0x20000738
 8002240:	400260a0 	.word	0x400260a0

08002244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <NMI_Handler+0x4>

0800224a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224e:	e7fe      	b.n	800224e <HardFault_Handler+0x4>

08002250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <MemManage_Handler+0x4>

08002256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <BusFault_Handler+0x4>

0800225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <UsageFault_Handler+0x4>

08002262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002290:	f000 fc9c 	bl	8002bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <SysTick_Handler+0x18>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3301      	adds	r3, #1
 800229a:	4a02      	ldr	r2, [pc, #8]	; (80022a4 <SysTick_Handler+0x18>)
 800229c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000130 	.word	0x20000130

080022a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <DMA1_Stream5_IRQHandler+0x10>)
 80022ae:	f001 fcc1 	bl	8003c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200005d0 	.word	0x200005d0

080022bc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <DMA1_Stream6_IRQHandler+0x10>)
 80022c2:	f001 fcb7 	bl	8003c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000738 	.word	0x20000738

080022d0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
  HAL_CAN_TxMailboxCompleteCallback();
 80022d4:	f7ff fce8 	bl	8001ca8 <HAL_CAN_TxMailboxCompleteCallback>
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <CAN1_TX_IRQHandler+0x14>)
 80022da:	f000 ffef 	bl	80032bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000868 	.word	0x20000868

080022e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <CAN1_RX0_IRQHandler+0x10>)
 80022ee:	f000 ffe5 	bl	80032bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000868 	.word	0x20000868

080022fc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <CAN1_RX1_IRQHandler+0x10>)
 8002302:	f000 ffdb 	bl	80032bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000868 	.word	0x20000868

08002310 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <CAN1_SCE_IRQHandler+0x10>)
 8002316:	f000 ffd1 	bl	80032bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000868 	.word	0x20000868

08002324 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <TIM2_IRQHandler+0x10>)
 800232a:	f002 ffff 	bl	800532c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200007dc 	.word	0x200007dc

08002338 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <USART1_IRQHandler+0x10>)
 800233e:	f003 ff1b 	bl	8006178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000798 	.word	0x20000798

0800234c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <USART2_IRQHandler+0x10>)
 8002352:	f003 ff11 	bl	8006178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000824 	.word	0x20000824

08002360 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <DMA2_Stream2_IRQHandler+0x10>)
 8002366:	f001 fc65 	bl	8003c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200006d8 	.word	0x200006d8

08002374 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <DMA2_Stream7_IRQHandler+0x10>)
 800237a:	f001 fc5b 	bl	8003c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000678 	.word	0x20000678

08002388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <SystemInit+0x20>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <SystemInit+0x20>)
 8002394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023b0:	480d      	ldr	r0, [pc, #52]	; (80023e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023b2:	490e      	ldr	r1, [pc, #56]	; (80023ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023b4:	4a0e      	ldr	r2, [pc, #56]	; (80023f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023b8:	e002      	b.n	80023c0 <LoopCopyDataInit>

080023ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023be:	3304      	adds	r3, #4

080023c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c4:	d3f9      	bcc.n	80023ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023c6:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023c8:	4c0b      	ldr	r4, [pc, #44]	; (80023f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023cc:	e001      	b.n	80023d2 <LoopFillZerobss>

080023ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d0:	3204      	adds	r2, #4

080023d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d4:	d3fb      	bcc.n	80023ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023d6:	f7ff ffd7 	bl	8002388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023da:	f004 fdbb 	bl	8006f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023de:	f7ff f915 	bl	800160c <main>
  bx  lr    
 80023e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ec:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80023f0:	08008668 	.word	0x08008668
  ldr r2, =_sbss
 80023f4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80023f8:	200008a0 	.word	0x200008a0

080023fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023fc:	e7fe      	b.n	80023fc <ADC_IRQHandler>
	...

08002400 <D_CAN_Init>:

#include "../Inc/CAN.h"
#include <stdlib.h>
#include "stm32f4xx_hal.h"

void D_CAN_Init(void){
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	HAL_CAN_Start(&hcan1);
 8002406:	4818      	ldr	r0, [pc, #96]	; (8002468 <D_CAN_Init+0x68>)
 8002408:	f000 fddc 	bl	8002fc4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800240c:	2102      	movs	r1, #2
 800240e:	4816      	ldr	r0, [pc, #88]	; (8002468 <D_CAN_Init+0x68>)
 8002410:	f000 ff2e 	bl	8003270 <HAL_CAN_ActivateNotification>
	for(int i=0; i<8; i++){
 8002414:	2300      	movs	r3, #0
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	e01d      	b.n	8002456 <D_CAN_Init+0x56>
		TxData[i] = 0;
 800241a:	4a14      	ldr	r2, [pc, #80]	; (800246c <D_CAN_Init+0x6c>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
		RxData[i] = 0;
 8002424:	4a12      	ldr	r2, [pc, #72]	; (8002470 <D_CAN_Init+0x70>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<5; j++){
 800242e:	2300      	movs	r3, #0
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	e00a      	b.n	800244a <D_CAN_Init+0x4a>
			AllData[j][i] = 0;
 8002434:	4a0f      	ldr	r2, [pc, #60]	; (8002474 <D_CAN_Init+0x74>)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	441a      	add	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4413      	add	r3, r2
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<5; j++){
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b04      	cmp	r3, #4
 800244e:	ddf1      	ble.n	8002434 <D_CAN_Init+0x34>
	for(int i=0; i<8; i++){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3301      	adds	r3, #1
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b07      	cmp	r3, #7
 800245a:	ddde      	ble.n	800241a <D_CAN_Init+0x1a>
		}
	}
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000868 	.word	0x20000868
 800246c:	20000588 	.word	0x20000588
 8002470:	20000594 	.word	0x20000594
 8002474:	20000560 	.word	0x20000560

08002478 <D_CAN_SetReceiveAddressAll>:
	}

	return 0;
}

int D_CAN_SetReceiveAddressAll(void){
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
	sFilterConfig.FilterBank = 0;
 800247c:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <D_CAN_SetReceiveAddressAll+0x5c>)
 800247e:	2200      	movs	r2, #0
 8002480:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <D_CAN_SetReceiveAddressAll+0x5c>)
 800248a:	2201      	movs	r2, #1
 800248c:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0;
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <D_CAN_SetReceiveAddressAll+0x5c>)
 8002496:	2200      	movs	r2, #0
 8002498:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <D_CAN_SetReceiveAddressAll+0x5c>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <D_CAN_SetReceiveAddressAll+0x5c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <D_CAN_SetReceiveAddressAll+0x5c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <D_CAN_SetReceiveAddressAll+0x5c>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <D_CAN_SetReceiveAddressAll+0x5c>)
 80024b4:	220e      	movs	r2, #14
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK){
 80024b8:	4906      	ldr	r1, [pc, #24]	; (80024d4 <D_CAN_SetReceiveAddressAll+0x5c>)
 80024ba:	4807      	ldr	r0, [pc, #28]	; (80024d8 <D_CAN_SetReceiveAddressAll+0x60>)
 80024bc:	f000 fca2 	bl	8002e04 <HAL_CAN_ConfigFilter>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <D_CAN_SetReceiveAddressAll+0x54>
		return -1;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ca:	e000      	b.n	80024ce <D_CAN_SetReceiveAddressAll+0x56>
	}

	return 0;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000538 	.word	0x20000538
 80024d8:	20000868 	.word	0x20000868

080024dc <D_CAN_Receive>:

int D_CAN_Receive(uint16_t SenderAddress, uint8_t *data, uint16_t size){
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	80fb      	strh	r3, [r7, #6]
 80024e8:	4613      	mov	r3, r2
 80024ea:	80bb      	strh	r3, [r7, #4]
	int setIdx = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
	switch(SenderAddress){
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f6:	d01b      	beq.n	8002530 <D_CAN_Receive+0x54>
 80024f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fc:	dc1e      	bgt.n	800253c <D_CAN_Receive+0x60>
 80024fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002502:	d012      	beq.n	800252a <D_CAN_Receive+0x4e>
 8002504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002508:	dc18      	bgt.n	800253c <D_CAN_Receive+0x60>
 800250a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800250e:	d009      	beq.n	8002524 <D_CAN_Receive+0x48>
 8002510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002514:	dc12      	bgt.n	800253c <D_CAN_Receive+0x60>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <D_CAN_Receive+0x5a>
 800251a:	2b09      	cmp	r3, #9
 800251c:	d10e      	bne.n	800253c <D_CAN_Receive+0x60>
	case CAN_MECH1_ADDRESS:
		setIdx = CAN_MECH1;
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
		break;
 8002522:	e00e      	b.n	8002542 <D_CAN_Receive+0x66>
	case CAN_ST2_ADDRESS:
		setIdx = CAN_ST2;
 8002524:	2301      	movs	r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
		break;
 8002528:	e00b      	b.n	8002542 <D_CAN_Receive+0x66>
	case CAN_ST3_ADDRESS:
		setIdx = CAN_ST3;
 800252a:	2302      	movs	r3, #2
 800252c:	60bb      	str	r3, [r7, #8]
		break;
 800252e:	e008      	b.n	8002542 <D_CAN_Receive+0x66>
	case CAN_ST4_ADDRESS:
		setIdx = CAN_ST4;
 8002530:	2303      	movs	r3, #3
 8002532:	60bb      	str	r3, [r7, #8]
		break;
 8002534:	e005      	b.n	8002542 <D_CAN_Receive+0x66>
	case CAN_MAIN_ADDRESS:
		setIdx = CAN_MAIN;
 8002536:	2304      	movs	r3, #4
 8002538:	60bb      	str	r3, [r7, #8]
		break;
 800253a:	e002      	b.n	8002542 <D_CAN_Receive+0x66>
	default:
		setIdx = CAN_MAIN;
 800253c:	2304      	movs	r3, #4
 800253e:	60bb      	str	r3, [r7, #8]
		break;
 8002540:	bf00      	nop
	}
	//test
	for(int i=0; i<size; i++){
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	e00d      	b.n	8002564 <D_CAN_Receive+0x88>
		data[i] = AllData[SenderAddress][i];
 8002548:	88fa      	ldrh	r2, [r7, #6]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6839      	ldr	r1, [r7, #0]
 800254e:	440b      	add	r3, r1
 8002550:	490a      	ldr	r1, [pc, #40]	; (800257c <D_CAN_Receive+0xa0>)
 8002552:	00d2      	lsls	r2, r2, #3
 8002554:	4411      	add	r1, r2
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	440a      	add	r2, r1
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++){
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3301      	adds	r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	88bb      	ldrh	r3, [r7, #4]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	429a      	cmp	r2, r3
 800256a:	dbed      	blt.n	8002548 <D_CAN_Receive+0x6c>
		data[i] = AllData[setIdx][i];
	}
	*/


	return 0;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000560 	.word	0x20000560

08002580 <D_CAN_ReceiveCallBack>:

void D_CAN_ReceiveCallBack(CAN_HandleTypeDef *hcan){
 8002580:	b580      	push	{r7, lr}
 8002582:	b08e      	sub	sp, #56	; 0x38
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8002588:	f107 020c 	add.w	r2, r7, #12
 800258c:	4b32      	ldr	r3, [pc, #200]	; (8002658 <D_CAN_ReceiveCallBack+0xd8>)
 800258e:	2100      	movs	r1, #0
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fd5b 	bl	800304c <HAL_CAN_GetRxMessage>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d155      	bne.n	8002648 <D_CAN_ReceiveCallBack+0xc8>
		uint32_t id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <D_CAN_ReceiveCallBack+0x26>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	e000      	b.n	80025a8 <D_CAN_ReceiveCallBack+0x28>
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t size = RxHeader.DLC;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		int setIdx = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
		switch(id){
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b8:	d022      	beq.n	8002600 <D_CAN_ReceiveCallBack+0x80>
 80025ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c0:	d824      	bhi.n	800260c <D_CAN_ReceiveCallBack+0x8c>
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025c8:	d017      	beq.n	80025fa <D_CAN_ReceiveCallBack+0x7a>
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025d0:	d81c      	bhi.n	800260c <D_CAN_ReceiveCallBack+0x8c>
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d8:	d00c      	beq.n	80025f4 <D_CAN_ReceiveCallBack+0x74>
 80025da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025e0:	d814      	bhi.n	800260c <D_CAN_ReceiveCallBack+0x8c>
 80025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00e      	beq.n	8002606 <D_CAN_ReceiveCallBack+0x86>
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	d10e      	bne.n	800260c <D_CAN_ReceiveCallBack+0x8c>
		case CAN_MECH1_ADDRESS:
			setIdx = CAN_MECH1;
 80025ee:	2300      	movs	r3, #0
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80025f2:	e00e      	b.n	8002612 <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST2_ADDRESS:
			setIdx = CAN_ST2;
 80025f4:	2301      	movs	r3, #1
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80025f8:	e00b      	b.n	8002612 <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST3_ADDRESS:
			setIdx = CAN_ST3;
 80025fa:	2302      	movs	r3, #2
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80025fe:	e008      	b.n	8002612 <D_CAN_ReceiveCallBack+0x92>
		case CAN_ST4_ADDRESS:
			setIdx = CAN_ST4;
 8002600:	2303      	movs	r3, #3
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8002604:	e005      	b.n	8002612 <D_CAN_ReceiveCallBack+0x92>
		case CAN_MAIN_ADDRESS:
			setIdx = CAN_MAIN;
 8002606:	2304      	movs	r3, #4
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 800260a:	e002      	b.n	8002612 <D_CAN_ReceiveCallBack+0x92>
		default:
			setIdx = CAN_MAIN;
 800260c:	2304      	movs	r3, #4
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8002610:	bf00      	nop
		}
		//test
		for(int i=0; i<size; i++){
 8002612:	2300      	movs	r3, #0
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
 8002616:	e00b      	b.n	8002630 <D_CAN_ReceiveCallBack+0xb0>
			AllData[0][i] = RxData[i];
 8002618:	4a0f      	ldr	r2, [pc, #60]	; (8002658 <D_CAN_ReceiveCallBack+0xd8>)
 800261a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261c:	4413      	add	r3, r2
 800261e:	7819      	ldrb	r1, [r3, #0]
 8002620:	4a0e      	ldr	r2, [pc, #56]	; (800265c <D_CAN_ReceiveCallBack+0xdc>)
 8002622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002624:	4413      	add	r3, r2
 8002626:	460a      	mov	r2, r1
 8002628:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<size; i++){
 800262a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262c:	3301      	adds	r3, #1
 800262e:	637b      	str	r3, [r7, #52]	; 0x34
 8002630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002634:	429a      	cmp	r2, r3
 8002636:	d8ef      	bhi.n	8002618 <D_CAN_ReceiveCallBack+0x98>
		}
		AllData[1][0] = id;
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b07      	ldr	r3, [pc, #28]	; (800265c <D_CAN_ReceiveCallBack+0xdc>)
 800263e:	721a      	strb	r2, [r3, #8]
		AllData[1][1] = 254;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <D_CAN_ReceiveCallBack+0xdc>)
 8002642:	22fe      	movs	r2, #254	; 0xfe
 8002644:	725a      	strb	r2, [r3, #9]
		}
		*/
	}else{
		AllData[1][1] = 255;
	}
}
 8002646:	e002      	b.n	800264e <D_CAN_ReceiveCallBack+0xce>
		AllData[1][1] = 255;
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <D_CAN_ReceiveCallBack+0xdc>)
 800264a:	22ff      	movs	r2, #255	; 0xff
 800264c:	725a      	strb	r2, [r3, #9]
}
 800264e:	bf00      	nop
 8002650:	3738      	adds	r7, #56	; 0x38
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000594 	.word	0x20000594
 800265c:	20000560 	.word	0x20000560

08002660 <D_GPIO_Set>:
#include "../Inc/GPIO.h"
#include <stdlib.h>
#include <stdbool.h>
#include "stm32f4xx_hal.h"

void D_GPIO_Set(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_SET);
 800266c:	887b      	ldrh	r3, [r7, #2]
 800266e:	2201      	movs	r2, #1
 8002670:	4619      	mov	r1, r3
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f001 fef4 	bl	8004460 <HAL_GPIO_WritePin>
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <D_GPIO_Reset>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
 800268c:	887b      	ldrh	r3, [r7, #2]
 800268e:	2200      	movs	r2, #0
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f001 fee4 	bl	8004460 <HAL_GPIO_WritePin>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <D_GPIO_Read>:

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 80026ac:	887b      	ldrh	r3, [r7, #2]
 80026ae:	4619      	mov	r1, r3
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f001 febd 	bl	8004430 <HAL_GPIO_ReadPin>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf14      	ite	ne
 80026bc:	2301      	movne	r3, #1
 80026be:	2300      	moveq	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <D_Mess_printf>:

static
volatile bool had_completed = true;


void D_Mess_printf(const char* fmt, ...){
 80026cc:	b40f      	push	{r0, r1, r2, r3}
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
  va_list arp;

  //MW_waitForMessageTransitionComplete(100);
  va_start(arp, fmt);
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	607b      	str	r3, [r7, #4]
  xvprintf(fmt, arp);
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	6938      	ldr	r0, [r7, #16]
 80026de:	f000 f891 	bl	8002804 <xvprintf>
  va_end(arp);
  if( outptr - buff > MAX_STRING_LENGTH ){
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <D_Mess_printf+0x38>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a08      	ldr	r2, [pc, #32]	; (8002708 <D_Mess_printf+0x3c>)
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80026ee:	dd01      	ble.n	80026f4 <D_Mess_printf+0x28>
	  D_Mess_flush();
 80026f0:	f000 f80c 	bl	800270c <D_Mess_flush>
  }
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026fe:	b004      	add	sp, #16
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000898 	.word	0x20000898
 8002708:	20000138 	.word	0x20000138

0800270c <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed){
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <D_Mess_flush+0x54>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f083 0301 	eor.w	r3, r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <D_Mess_flush+0x1c>
		outptr = buff;
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <D_Mess_flush+0x58>)
 8002722:	4a11      	ldr	r2, [pc, #68]	; (8002768 <D_Mess_flush+0x5c>)
 8002724:	601a      	str	r2, [r3, #0]
		return;
 8002726:	e01a      	b.n	800275e <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <D_Mess_flush+0x58>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <D_Mess_flush+0x58>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	490b      	ldr	r1, [pc, #44]	; (8002764 <D_Mess_flush+0x58>)
 8002738:	600a      	str	r2, [r1, #0]
 800273a:	220a      	movs	r2, #10
 800273c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <D_Mess_flush+0x58>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a09      	ldr	r2, [pc, #36]	; (8002768 <D_Mess_flush+0x5c>)
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	4907      	ldr	r1, [pc, #28]	; (8002768 <D_Mess_flush+0x5c>)
 800274c:	4807      	ldr	r0, [pc, #28]	; (800276c <D_Mess_flush+0x60>)
 800274e:	f003 fc95 	bl	800607c <HAL_UART_Transmit_DMA>
		had_completed = false;
 8002752:	4b03      	ldr	r3, [pc, #12]	; (8002760 <D_Mess_flush+0x54>)
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 8002758:	4b02      	ldr	r3, [pc, #8]	; (8002764 <D_Mess_flush+0x58>)
 800275a:	4a03      	ldr	r2, [pc, #12]	; (8002768 <D_Mess_flush+0x5c>)
 800275c:	601a      	str	r2, [r3, #0]
}
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000018 	.word	0x20000018
 8002764:	20000898 	.word	0x20000898
 8002768:	20000138 	.word	0x20000138
 800276c:	20000824 	.word	0x20000824

08002770 <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  had_completed = true;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <D_Mess_TransitionCompletedCallBack+0x14>)
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	20000018 	.word	0x20000018

08002788 <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc(char c){
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  if( _CR_CRLF && c == '\n' ){
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2b0a      	cmp	r3, #10
 8002796:	d102      	bne.n	800279e <xputc+0x16>
    xputc('\r');                                        /* CR -> CRLF */
 8002798:	200d      	movs	r0, #13
 800279a:	f7ff fff5 	bl	8002788 <xputc>
  }
  if( outptr ){
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <xputc+0x48>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <xputc+0x2e>
    *outptr++ = (unsigned char)c;
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <xputc+0x48>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	4908      	ldr	r1, [pc, #32]	; (80027d0 <xputc+0x48>)
 80027ae:	600a      	str	r2, [r1, #0]
 80027b0:	79fa      	ldrb	r2, [r7, #7]
 80027b2:	701a      	strb	r2, [r3, #0]
    return;
 80027b4:	e008      	b.n	80027c8 <xputc+0x40>
  }

  if( xfunc_out ){
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <xputc+0x4c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <xputc+0x40>
    xfunc_out((unsigned char)c);
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <xputc+0x4c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	79fa      	ldrb	r2, [r7, #7]
 80027c4:	4610      	mov	r0, r2
 80027c6:	4798      	blx	r3
  }
}
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000898 	.word	0x20000898
 80027d4:	20000894 	.word	0x20000894

080027d8 <xputs>:
/*----------------------------------------------*/

void xputs(                                     /* Put a string to the default
                                                 *device */
  const char* str                               /* Pointer to the string */
  ){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  while( *str ){
 80027e0:	e006      	b.n	80027f0 <xputs+0x18>
    xputc(*str++);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff ffcc 	bl	8002788 <xputc>
  while( *str ){
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f4      	bne.n	80027e2 <xputs+0xa>
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <xvprintf>:
 */

void xvprintf(
  const char*     fmt,          /* Pointer to the format string */
  va_list arp                           /* Pointer to arguments */
  ){
 8002804:	b580      	push	{r7, lr}
 8002806:	b08e      	sub	sp, #56	; 0x38
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  unsigned long v;
  char s[16], c, d, *p;


  for(;; ){
    c = *fmt++;                                                 /* Get a char */
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	77fb      	strb	r3, [r7, #31]
    if( !c ){
 8002818:	7ffb      	ldrb	r3, [r7, #31]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8167 	beq.w	8002aee <xvprintf+0x2ea>
      break;                                            /* End of format? */
    }
    if( c != '%' ){                                     /* Pass through it if
 8002820:	7ffb      	ldrb	r3, [r7, #31]
 8002822:	2b25      	cmp	r3, #37	; 0x25
 8002824:	d004      	beq.n	8002830 <xvprintf+0x2c>
                                                         *not a % sequense */
      xputc(c); continue;
 8002826:	7ffb      	ldrb	r3, [r7, #31]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ffad 	bl	8002788 <xputc>
 800282e:	e15d      	b.n	8002aec <xvprintf+0x2e8>
    }
    f = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    c = *fmt++;                                                 /* Get first
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	77fb      	strb	r3, [r7, #31]
                                                                * *char of the
                                                                *sequense */
    if( c == '0' ){                                     /* Flag: '0' padded */
 800283e:	7ffb      	ldrb	r3, [r7, #31]
 8002840:	2b30      	cmp	r3, #48	; 0x30
 8002842:	d107      	bne.n	8002854 <xvprintf+0x50>
      f = 1; c = *fmt++;
 8002844:	2301      	movs	r3, #1
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	77fb      	strb	r3, [r7, #31]
 8002852:	e009      	b.n	8002868 <xvprintf+0x64>
    } else {
      if( c == '-' ){                                   /* Flag: left justified
 8002854:	7ffb      	ldrb	r3, [r7, #31]
 8002856:	2b2d      	cmp	r3, #45	; 0x2d
 8002858:	d106      	bne.n	8002868 <xvprintf+0x64>
                                                        **/
        f = 2; c = *fmt++;
 800285a:	2302      	movs	r3, #2
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	77fb      	strb	r3, [r7, #31]
      }
    }
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8002868:	2300      	movs	r3, #0
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
 800286c:	e00e      	b.n	800288c <xvprintf+0x88>
                                                                **/
      w = w * 10 + c - '0';
 800286e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	461a      	mov	r2, r3
 800287a:	7ffb      	ldrb	r3, [r7, #31]
 800287c:	4413      	add	r3, r2
 800287e:	3b30      	subs	r3, #48	; 0x30
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	77fb      	strb	r3, [r7, #31]
 800288c:	7ffb      	ldrb	r3, [r7, #31]
 800288e:	2b2f      	cmp	r3, #47	; 0x2f
 8002890:	d902      	bls.n	8002898 <xvprintf+0x94>
 8002892:	7ffb      	ldrb	r3, [r7, #31]
 8002894:	2b39      	cmp	r3, #57	; 0x39
 8002896:	d9ea      	bls.n	800286e <xvprintf+0x6a>
    }
    if( c == 'l' || c == 'L' ){                 /* Prefix: Size is long int */
 8002898:	7ffb      	ldrb	r3, [r7, #31]
 800289a:	2b6c      	cmp	r3, #108	; 0x6c
 800289c:	d002      	beq.n	80028a4 <xvprintf+0xa0>
 800289e:	7ffb      	ldrb	r3, [r7, #31]
 80028a0:	2b4c      	cmp	r3, #76	; 0x4c
 80028a2:	d108      	bne.n	80028b6 <xvprintf+0xb2>
      f |= 4; c = *fmt++;
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	f043 0304 	orr.w	r3, r3, #4
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	77fb      	strb	r3, [r7, #31]
    }
    if( !c ){
 80028b6:	7ffb      	ldrb	r3, [r7, #31]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 811a 	beq.w	8002af2 <xvprintf+0x2ee>
      break;                                            /* End of format? */
    }
    d = c;
 80028be:	7ffb      	ldrb	r3, [r7, #31]
 80028c0:	77bb      	strb	r3, [r7, #30]
    if( d >= 'a' ){
 80028c2:	7fbb      	ldrb	r3, [r7, #30]
 80028c4:	2b60      	cmp	r3, #96	; 0x60
 80028c6:	d902      	bls.n	80028ce <xvprintf+0xca>
      d -= 0x20;
 80028c8:	7fbb      	ldrb	r3, [r7, #30]
 80028ca:	3b20      	subs	r3, #32
 80028cc:	77bb      	strb	r3, [r7, #30]
    }
    switch( d ){                                        /* Type is... */
 80028ce:	7fbb      	ldrb	r3, [r7, #30]
 80028d0:	3b42      	subs	r3, #66	; 0x42
 80028d2:	2b16      	cmp	r3, #22
 80028d4:	d873      	bhi.n	80029be <xvprintf+0x1ba>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <xvprintf+0xd8>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	080029a7 	.word	0x080029a7
 80028e0:	08002995 	.word	0x08002995
 80028e4:	080029b3 	.word	0x080029b3
 80028e8:	080029bf 	.word	0x080029bf
 80028ec:	080029bf 	.word	0x080029bf
 80028f0:	080029bf 	.word	0x080029bf
 80028f4:	080029bf 	.word	0x080029bf
 80028f8:	080029bf 	.word	0x080029bf
 80028fc:	080029bf 	.word	0x080029bf
 8002900:	080029bf 	.word	0x080029bf
 8002904:	080029bf 	.word	0x080029bf
 8002908:	080029bf 	.word	0x080029bf
 800290c:	080029bf 	.word	0x080029bf
 8002910:	080029ad 	.word	0x080029ad
 8002914:	080029bf 	.word	0x080029bf
 8002918:	080029bf 	.word	0x080029bf
 800291c:	080029bf 	.word	0x080029bf
 8002920:	08002939 	.word	0x08002939
 8002924:	080029bf 	.word	0x080029bf
 8002928:	080029b3 	.word	0x080029b3
 800292c:	080029bf 	.word	0x080029bf
 8002930:	080029bf 	.word	0x080029bf
 8002934:	080029b9 	.word	0x080029b9
    case 'S':                                                   /* String */
      p = va_arg(arp, char*);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	1d1a      	adds	r2, r3, #4
 800293c:	603a      	str	r2, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	61bb      	str	r3, [r7, #24]
      for( j = 0; p[j]; j++ ){
 8002942:	2300      	movs	r3, #0
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002946:	e002      	b.n	800294e <xvprintf+0x14a>
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294a:	3301      	adds	r3, #1
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f6      	bne.n	8002948 <xvprintf+0x144>
      }
      while( !( f & 2 ) && j++ < w ){
 800295a:	e002      	b.n	8002962 <xvprintf+0x15e>
        xputc(' ');
 800295c:	2020      	movs	r0, #32
 800295e:	f7ff ff13 	bl	8002788 <xputc>
      while( !( f & 2 ) && j++ < w ){
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d105      	bne.n	8002978 <xvprintf+0x174>
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002974:	429a      	cmp	r2, r3
 8002976:	d8f1      	bhi.n	800295c <xvprintf+0x158>
      }
      xputs(p);
 8002978:	69b8      	ldr	r0, [r7, #24]
 800297a:	f7ff ff2d 	bl	80027d8 <xputs>
      while( j++ < w ){
 800297e:	e002      	b.n	8002986 <xvprintf+0x182>
        xputc(' ');
 8002980:	2020      	movs	r0, #32
 8002982:	f7ff ff01 	bl	8002788 <xputc>
      while( j++ < w ){
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800298c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800298e:	429a      	cmp	r2, r3
 8002990:	d8f6      	bhi.n	8002980 <xvprintf+0x17c>
      }
      continue;
 8002992:	e0ab      	b.n	8002aec <xvprintf+0x2e8>
    case 'C':                                                   /* Character */
      xputc((char)va_arg(arp, int)); continue;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	1d1a      	adds	r2, r3, #4
 8002998:	603a      	str	r2, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fef2 	bl	8002788 <xputc>
 80029a4:	e0a2      	b.n	8002aec <xvprintf+0x2e8>
    case 'B':                                                   /* Binary */
      r = 2; break;
 80029a6:	2302      	movs	r3, #2
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
 80029aa:	e00d      	b.n	80029c8 <xvprintf+0x1c4>
    case 'O':                                                   /* Octal */
      r = 8; break;
 80029ac:	2308      	movs	r3, #8
 80029ae:	637b      	str	r3, [r7, #52]	; 0x34
 80029b0:	e00a      	b.n	80029c8 <xvprintf+0x1c4>
    case 'D':                                                   /* Signed
                                                                 *decimal */
    case 'U':                                                   /* Unsigned
                                                                *decimal */
      r = 10; break;
 80029b2:	230a      	movs	r3, #10
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
 80029b6:	e007      	b.n	80029c8 <xvprintf+0x1c4>
    case 'X':                                                   /* Hexdecimal */
      r = 16; break;
 80029b8:	2310      	movs	r3, #16
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
 80029bc:	e004      	b.n	80029c8 <xvprintf+0x1c4>
    default:                                                    /* Unknown type
                                                                 * *(passthrough)
                                                                 **/
      xputc(c); continue;
 80029be:	7ffb      	ldrb	r3, [r7, #31]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fee1 	bl	8002788 <xputc>
 80029c6:	e091      	b.n	8002aec <xvprintf+0x2e8>
    }

    /* Get an argument and put it in numeral */
    v = ( f & 4 ) ? va_arg(arp, long) : (( d == 'D' ) ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d004      	beq.n	80029dc <xvprintf+0x1d8>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	1d1a      	adds	r2, r3, #4
 80029d6:	603a      	str	r2, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	e00b      	b.n	80029f4 <xvprintf+0x1f0>
 80029dc:	7fbb      	ldrb	r3, [r7, #30]
 80029de:	2b44      	cmp	r3, #68	; 0x44
 80029e0:	d104      	bne.n	80029ec <xvprintf+0x1e8>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	1d1a      	adds	r2, r3, #4
 80029e6:	603a      	str	r2, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	e003      	b.n	80029f4 <xvprintf+0x1f0>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	1d1a      	adds	r2, r3, #4
 80029f0:	603a      	str	r2, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	623b      	str	r3, [r7, #32]
    if( d == 'D' && ( v & 0x80000000 )){
 80029f6:	7fbb      	ldrb	r3, [r7, #30]
 80029f8:	2b44      	cmp	r3, #68	; 0x44
 80029fa:	d109      	bne.n	8002a10 <xvprintf+0x20c>
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	da06      	bge.n	8002a10 <xvprintf+0x20c>
      v = 0 - v;
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	425b      	negs	r3, r3
 8002a06:	623b      	str	r3, [r7, #32]
      f |= 8;
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	f043 0308 	orr.w	r3, r3, #8
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    i = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
    do {
      d = (char)( v % r ); v /= r;
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a18:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a1e:	fb01 f202 	mul.w	r2, r1, r2
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	77bb      	strb	r3, [r7, #30]
 8002a26:	6a3a      	ldr	r2, [r7, #32]
 8002a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2e:	623b      	str	r3, [r7, #32]
      if( d > 9 ){
 8002a30:	7fbb      	ldrb	r3, [r7, #30]
 8002a32:	2b09      	cmp	r3, #9
 8002a34:	d908      	bls.n	8002a48 <xvprintf+0x244>
        d += ( c == 'x' ) ? 0x27 : 0x07;
 8002a36:	7ffb      	ldrb	r3, [r7, #31]
 8002a38:	2b78      	cmp	r3, #120	; 0x78
 8002a3a:	d101      	bne.n	8002a40 <xvprintf+0x23c>
 8002a3c:	2227      	movs	r2, #39	; 0x27
 8002a3e:	e000      	b.n	8002a42 <xvprintf+0x23e>
 8002a40:	2207      	movs	r2, #7
 8002a42:	7fbb      	ldrb	r3, [r7, #30]
 8002a44:	4413      	add	r3, r2
 8002a46:	77bb      	strb	r3, [r7, #30]
      }
      s[i++] = d + '0';
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	633a      	str	r2, [r7, #48]	; 0x30
 8002a4e:	7fba      	ldrb	r2, [r7, #30]
 8002a50:	3230      	adds	r2, #48	; 0x30
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002a58:	440b      	add	r3, r1
 8002a5a:	f803 2c30 	strb.w	r2, [r3, #-48]
    } while( v && i < sizeof( s ));
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <xvprintf+0x266>
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	2b0f      	cmp	r3, #15
 8002a68:	d9d4      	bls.n	8002a14 <xvprintf+0x210>
    if( f & 8 ){
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <xvprintf+0x282>
      s[i++] = '-';
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	633a      	str	r2, [r7, #48]	; 0x30
 8002a7a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a7e:	4413      	add	r3, r2
 8002a80:	222d      	movs	r2, #45	; 0x2d
 8002a82:	f803 2c30 	strb.w	r2, [r3, #-48]
    }
    j = i; d = ( f & 1 ) ? '0' : ' ';
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <xvprintf+0x294>
 8002a94:	2330      	movs	r3, #48	; 0x30
 8002a96:	e000      	b.n	8002a9a <xvprintf+0x296>
 8002a98:	2320      	movs	r3, #32
 8002a9a:	77bb      	strb	r3, [r7, #30]
    while( !( f & 2 ) && j++ < w ){
 8002a9c:	e003      	b.n	8002aa6 <xvprintf+0x2a2>
      xputc(d);
 8002a9e:	7fbb      	ldrb	r3, [r7, #30]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fe71 	bl	8002788 <xputc>
    while( !( f & 2 ) && j++ < w ){
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d105      	bne.n	8002abc <xvprintf+0x2b8>
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d8f0      	bhi.n	8002a9e <xvprintf+0x29a>
    }
    do { xputc(s[--i]); } while( i );
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac2:	f107 0208 	add.w	r2, r7, #8
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	4413      	add	r3, r2
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fe5b 	bl	8002788 <xputc>
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f1      	bne.n	8002abc <xvprintf+0x2b8>
    while( j++ < w ){
 8002ad8:	e002      	b.n	8002ae0 <xvprintf+0x2dc>
      xputc(' ');
 8002ada:	2020      	movs	r0, #32
 8002adc:	f7ff fe54 	bl	8002788 <xputc>
    while( j++ < w ){
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f6      	bhi.n	8002ada <xvprintf+0x2d6>
    c = *fmt++;                                                 /* Get a char */
 8002aec:	e68f      	b.n	800280e <xvprintf+0xa>
      break;                                            /* End of format? */
 8002aee:	bf00      	nop
 8002af0:	e000      	b.n	8002af4 <xvprintf+0x2f0>
      break;                                            /* End of format? */
 8002af2:	bf00      	nop
    }
  }
} /* xvprintf */
 8002af4:	bf00      	nop
 8002af6:	3738      	adds	r7, #56	; 0x38
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <D_PWM_Init>:
#include <stdlib.h>
#include "stm32f4xx_hal.h"

//extern TIM_HandleTypeDef htim3;

void D_PWM_Init(void){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002b00:	2100      	movs	r1, #0
 8002b02:	4808      	ldr	r0, [pc, #32]	; (8002b24 <D_PWM_Init+0x28>)
 8002b04:	f002 fb4a 	bl	800519c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002b08:	2104      	movs	r1, #4
 8002b0a:	4806      	ldr	r0, [pc, #24]	; (8002b24 <D_PWM_Init+0x28>)
 8002b0c:	f002 fb46 	bl	800519c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002b10:	2108      	movs	r1, #8
 8002b12:	4804      	ldr	r0, [pc, #16]	; (8002b24 <D_PWM_Init+0x28>)
 8002b14:	f002 fb42 	bl	800519c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002b18:	210c      	movs	r1, #12
 8002b1a:	4802      	ldr	r0, [pc, #8]	; (8002b24 <D_PWM_Init+0x28>)
 8002b1c:	f002 fb3e 	bl	800519c <HAL_TIM_PWM_Start>
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000630 	.word	0x20000630

08002b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_Init+0x40>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0d      	ldr	r2, [pc, #52]	; (8002b68 <HAL_Init+0x40>)
 8002b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <HAL_Init+0x40>)
 8002b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a07      	ldr	r2, [pc, #28]	; (8002b68 <HAL_Init+0x40>)
 8002b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b50:	2003      	movs	r0, #3
 8002b52:	f000 fe95 	bl	8003880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f000 f808 	bl	8002b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b5c:	f7ff f8f6 	bl	8001d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023c00 	.word	0x40023c00

08002b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_InitTick+0x54>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_InitTick+0x58>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fead 	bl	80038ea <HAL_SYSTICK_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00e      	b.n	8002bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	d80a      	bhi.n	8002bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ba8:	f000 fe75 	bl	8003896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bac:	4a06      	ldr	r2, [pc, #24]	; (8002bc8 <HAL_InitTick+0x5c>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e000      	b.n	8002bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000014 	.word	0x20000014
 8002bc4:	20000020 	.word	0x20000020
 8002bc8:	2000001c 	.word	0x2000001c

08002bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_IncTick+0x20>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_IncTick+0x24>)
 8002bde:	6013      	str	r3, [r2, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000020 	.word	0x20000020
 8002bf0:	2000089c 	.word	0x2000089c

08002bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <HAL_GetTick+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	2000089c 	.word	0x2000089c

08002c0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0ed      	b.n	8002dfa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff f8b6 	bl	8001d9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c40:	f7ff ffd8 	bl	8002bf4 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c46:	e012      	b.n	8002c6e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c48:	f7ff ffd4 	bl	8002bf4 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b0a      	cmp	r3, #10
 8002c54:	d90b      	bls.n	8002c6e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2205      	movs	r2, #5
 8002c66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e0c5      	b.n	8002dfa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0e5      	beq.n	8002c48 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0202 	bic.w	r2, r2, #2
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c8c:	f7ff ffb2 	bl	8002bf4 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c92:	e012      	b.n	8002cba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c94:	f7ff ffae 	bl	8002bf4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b0a      	cmp	r3, #10
 8002ca0:	d90b      	bls.n	8002cba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2205      	movs	r2, #5
 8002cb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e09f      	b.n	8002dfa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e5      	bne.n	8002c94 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7e1b      	ldrb	r3, [r3, #24]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d108      	bne.n	8002ce2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e007      	b.n	8002cf2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7e5b      	ldrb	r3, [r3, #25]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d108      	bne.n	8002d0c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e007      	b.n	8002d1c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7e9b      	ldrb	r3, [r3, #26]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d108      	bne.n	8002d36 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0220 	orr.w	r2, r2, #32
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	e007      	b.n	8002d46 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0220 	bic.w	r2, r2, #32
 8002d44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	7edb      	ldrb	r3, [r3, #27]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d108      	bne.n	8002d60 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0210 	bic.w	r2, r2, #16
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e007      	b.n	8002d70 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0210 	orr.w	r2, r2, #16
 8002d6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7f1b      	ldrb	r3, [r3, #28]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d108      	bne.n	8002d8a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0208 	orr.w	r2, r2, #8
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e007      	b.n	8002d9a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0208 	bic.w	r2, r2, #8
 8002d98:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	7f5b      	ldrb	r3, [r3, #29]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d108      	bne.n	8002db4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0204 	orr.w	r2, r2, #4
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e007      	b.n	8002dc4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0204 	bic.w	r2, r2, #4
 8002dc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	ea42 0103 	orr.w	r1, r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	1e5a      	subs	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e1a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d003      	beq.n	8002e2a <HAL_CAN_ConfigFilter+0x26>
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	f040 80be 	bne.w	8002fa6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002e2a:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <HAL_CAN_ConfigFilter+0x1bc>)
 8002e2c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e34:	f043 0201 	orr.w	r2, r3, #1
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d123      	bne.n	8002ed4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	401a      	ands	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002eae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3248      	adds	r2, #72	; 0x48
 8002eb4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ec8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002eca:	6979      	ldr	r1, [r7, #20]
 8002ecc:	3348      	adds	r3, #72	; 0x48
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	440b      	add	r3, r1
 8002ed2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d122      	bne.n	8002f22 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002efc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	3248      	adds	r2, #72	; 0x48
 8002f02:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f16:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f18:	6979      	ldr	r1, [r7, #20]
 8002f1a:	3348      	adds	r3, #72	; 0x48
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	440b      	add	r3, r1
 8002f20:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	401a      	ands	r2, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002f3c:	e007      	b.n	8002f4e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	401a      	ands	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002f68:	e007      	b.n	8002f7a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d107      	bne.n	8002f92 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f98:	f023 0201 	bic.w	r2, r3, #1
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e006      	b.n	8002fb4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
  }
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	371c      	adds	r7, #28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	40006400 	.word	0x40006400

08002fc4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d12e      	bne.n	8003036 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ff0:	f7ff fe00 	bl	8002bf4 <HAL_GetTick>
 8002ff4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ff6:	e012      	b.n	800301e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ff8:	f7ff fdfc 	bl	8002bf4 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b0a      	cmp	r3, #10
 8003004:	d90b      	bls.n	800301e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2205      	movs	r2, #5
 8003016:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e012      	b.n	8003044 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e5      	bne.n	8002ff8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	e006      	b.n	8003044 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
  }
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003060:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d003      	beq.n	8003070 <HAL_CAN_GetRxMessage+0x24>
 8003068:	7dfb      	ldrb	r3, [r7, #23]
 800306a:	2b02      	cmp	r3, #2
 800306c:	f040 80f3 	bne.w	8003256 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10e      	bne.n	8003094 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d116      	bne.n	80030b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0e7      	b.n	8003264 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d107      	bne.n	80030b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0d8      	b.n	8003264 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	331b      	adds	r3, #27
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	4413      	add	r3, r2
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0204 	and.w	r2, r3, #4
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10c      	bne.n	80030ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	331b      	adds	r3, #27
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	4413      	add	r3, r2
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	0d5b      	lsrs	r3, r3, #21
 80030e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	e00b      	b.n	8003102 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	331b      	adds	r3, #27
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	4413      	add	r3, r2
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	08db      	lsrs	r3, r3, #3
 80030fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	331b      	adds	r3, #27
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	4413      	add	r3, r2
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0202 	and.w	r2, r3, #2
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	331b      	adds	r3, #27
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	4413      	add	r3, r2
 8003124:	3304      	adds	r3, #4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 020f 	and.w	r2, r3, #15
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	331b      	adds	r3, #27
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	4413      	add	r3, r2
 800313c:	3304      	adds	r3, #4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	b2da      	uxtb	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	331b      	adds	r3, #27
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0c1b      	lsrs	r3, r3, #16
 800315a:	b29a      	uxth	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	4413      	add	r3, r2
 800316a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	4413      	add	r3, r2
 8003180:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	0a1a      	lsrs	r2, r3, #8
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	4413      	add	r3, r2
 800319a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	0c1a      	lsrs	r2, r3, #16
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	3302      	adds	r3, #2
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0e1a      	lsrs	r2, r3, #24
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	3303      	adds	r3, #3
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	3304      	adds	r3, #4
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	0a1a      	lsrs	r2, r3, #8
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	3305      	adds	r3, #5
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	4413      	add	r3, r2
 8003200:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	0c1a      	lsrs	r2, r3, #16
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	3306      	adds	r3, #6
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	4413      	add	r3, r2
 800321a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e1a      	lsrs	r2, r3, #24
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	3307      	adds	r3, #7
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d108      	bne.n	8003242 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0220 	orr.w	r2, r2, #32
 800323e:	60da      	str	r2, [r3, #12]
 8003240:	e007      	b.n	8003252 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0220 	orr.w	r2, r2, #32
 8003250:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e006      	b.n	8003264 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
  }
}
 8003264:	4618      	mov	r0, r3
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003280:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d002      	beq.n	800328e <HAL_CAN_ActivateNotification+0x1e>
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d109      	bne.n	80032a2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6959      	ldr	r1, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e006      	b.n	80032b0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
  }
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	; 0x28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d07c      	beq.n	80033fc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d023      	beq.n	8003354 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2201      	movs	r2, #1
 8003312:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe fccc 	bl	8001cbc <HAL_CAN_TxMailbox0CompleteCallback>
 8003324:	e016      	b.n	8003354 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d004      	beq.n	800333a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
 8003338:	e00c      	b.n	8003354 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d004      	beq.n	800334e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
 800334c:	e002      	b.n	8003354 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f96b 	bl	800362a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d024      	beq.n	80033a8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003366:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe fcb0 	bl	8001cd8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003378:	e016      	b.n	80033a8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
 800338c:	e00c      	b.n	80033a8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	e002      	b.n	80033a8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f94b 	bl	800363e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d024      	beq.n	80033fc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fe fc94 	bl	8001cf4 <HAL_CAN_TxMailbox2CompleteCallback>
 80033cc:	e016      	b.n	80033fc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d004      	beq.n	80033e2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
 80033e0:	e00c      	b.n	80033fc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
 80033f4:	e002      	b.n	80033fc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f92b 	bl	8003652 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00c      	beq.n	8003420 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003416:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2210      	movs	r2, #16
 800341e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d006      	beq.n	8003442 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2208      	movs	r2, #8
 800343a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f912 	bl	8003666 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d009      	beq.n	8003460 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fe fc18 	bl	8001c90 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00c      	beq.n	8003484 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800347a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2210      	movs	r2, #16
 8003482:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d006      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2208      	movs	r2, #8
 800349e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f8f4 	bl	800368e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d009      	beq.n	80034c4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f8db 	bl	800367a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d006      	beq.n	80034e6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2210      	movs	r2, #16
 80034de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f8de 	bl	80036a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00b      	beq.n	8003508 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d006      	beq.n	8003508 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2208      	movs	r2, #8
 8003500:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8d7 	bl	80036b6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d07b      	beq.n	800360a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d072      	beq.n	8003602 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800353e:	2b00      	cmp	r3, #0
 8003540:	d008      	beq.n	8003554 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f043 0302 	orr.w	r3, r3, #2
 8003552:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	f043 0304 	orr.w	r3, r3, #4
 800356e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003576:	2b00      	cmp	r3, #0
 8003578:	d043      	beq.n	8003602 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003580:	2b00      	cmp	r3, #0
 8003582:	d03e      	beq.n	8003602 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800358a:	2b60      	cmp	r3, #96	; 0x60
 800358c:	d02b      	beq.n	80035e6 <HAL_CAN_IRQHandler+0x32a>
 800358e:	2b60      	cmp	r3, #96	; 0x60
 8003590:	d82e      	bhi.n	80035f0 <HAL_CAN_IRQHandler+0x334>
 8003592:	2b50      	cmp	r3, #80	; 0x50
 8003594:	d022      	beq.n	80035dc <HAL_CAN_IRQHandler+0x320>
 8003596:	2b50      	cmp	r3, #80	; 0x50
 8003598:	d82a      	bhi.n	80035f0 <HAL_CAN_IRQHandler+0x334>
 800359a:	2b40      	cmp	r3, #64	; 0x40
 800359c:	d019      	beq.n	80035d2 <HAL_CAN_IRQHandler+0x316>
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d826      	bhi.n	80035f0 <HAL_CAN_IRQHandler+0x334>
 80035a2:	2b30      	cmp	r3, #48	; 0x30
 80035a4:	d010      	beq.n	80035c8 <HAL_CAN_IRQHandler+0x30c>
 80035a6:	2b30      	cmp	r3, #48	; 0x30
 80035a8:	d822      	bhi.n	80035f0 <HAL_CAN_IRQHandler+0x334>
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d002      	beq.n	80035b4 <HAL_CAN_IRQHandler+0x2f8>
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d005      	beq.n	80035be <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80035b2:	e01d      	b.n	80035f0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	f043 0308 	orr.w	r3, r3, #8
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035bc:	e019      	b.n	80035f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	f043 0310 	orr.w	r3, r3, #16
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035c6:	e014      	b.n	80035f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	f043 0320 	orr.w	r3, r3, #32
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035d0:	e00f      	b.n	80035f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035da:	e00a      	b.n	80035f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035e4:	e005      	b.n	80035f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ee:	e000      	b.n	80035f2 <HAL_CAN_IRQHandler+0x336>
            break;
 80035f0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003600:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2204      	movs	r2, #4
 8003608:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f854 	bl	80036ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003622:	bf00      	nop
 8003624:	3728      	adds	r7, #40	; 0x28
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036fc:	4013      	ands	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800370c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003712:	4a04      	ldr	r2, [pc, #16]	; (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	60d3      	str	r3, [r2, #12]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <__NVIC_GetPriorityGrouping+0x18>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	0a1b      	lsrs	r3, r3, #8
 8003732:	f003 0307 	and.w	r3, r3, #7
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	2b00      	cmp	r3, #0
 8003754:	db0b      	blt.n	800376e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	f003 021f 	and.w	r2, r3, #31
 800375c:	4907      	ldr	r1, [pc, #28]	; (800377c <__NVIC_EnableIRQ+0x38>)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2001      	movs	r0, #1
 8003766:	fa00 f202 	lsl.w	r2, r0, r2
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000e100 	.word	0xe000e100

08003780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	6039      	str	r1, [r7, #0]
 800378a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003790:	2b00      	cmp	r3, #0
 8003792:	db0a      	blt.n	80037aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	b2da      	uxtb	r2, r3
 8003798:	490c      	ldr	r1, [pc, #48]	; (80037cc <__NVIC_SetPriority+0x4c>)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	0112      	lsls	r2, r2, #4
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	440b      	add	r3, r1
 80037a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a8:	e00a      	b.n	80037c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	4908      	ldr	r1, [pc, #32]	; (80037d0 <__NVIC_SetPriority+0x50>)
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	3b04      	subs	r3, #4
 80037b8:	0112      	lsls	r2, r2, #4
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	440b      	add	r3, r1
 80037be:	761a      	strb	r2, [r3, #24]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000e100 	.word	0xe000e100
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	; 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f1c3 0307 	rsb	r3, r3, #7
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	bf28      	it	cs
 80037f2:	2304      	movcs	r3, #4
 80037f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3304      	adds	r3, #4
 80037fa:	2b06      	cmp	r3, #6
 80037fc:	d902      	bls.n	8003804 <NVIC_EncodePriority+0x30>
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3b03      	subs	r3, #3
 8003802:	e000      	b.n	8003806 <NVIC_EncodePriority+0x32>
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	401a      	ands	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800381c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	43d9      	mvns	r1, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800382c:	4313      	orrs	r3, r2
         );
}
 800382e:	4618      	mov	r0, r3
 8003830:	3724      	adds	r7, #36	; 0x24
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
	...

0800383c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3b01      	subs	r3, #1
 8003848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800384c:	d301      	bcc.n	8003852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800384e:	2301      	movs	r3, #1
 8003850:	e00f      	b.n	8003872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003852:	4a0a      	ldr	r2, [pc, #40]	; (800387c <SysTick_Config+0x40>)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800385a:	210f      	movs	r1, #15
 800385c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003860:	f7ff ff8e 	bl	8003780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <SysTick_Config+0x40>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800386a:	4b04      	ldr	r3, [pc, #16]	; (800387c <SysTick_Config+0x40>)
 800386c:	2207      	movs	r2, #7
 800386e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	e000e010 	.word	0xe000e010

08003880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ff29 	bl	80036e0 <__NVIC_SetPriorityGrouping>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003896:	b580      	push	{r7, lr}
 8003898:	b086      	sub	sp, #24
 800389a:	af00      	add	r7, sp, #0
 800389c:	4603      	mov	r3, r0
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038a8:	f7ff ff3e 	bl	8003728 <__NVIC_GetPriorityGrouping>
 80038ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	6978      	ldr	r0, [r7, #20]
 80038b4:	f7ff ff8e 	bl	80037d4 <NVIC_EncodePriority>
 80038b8:	4602      	mov	r2, r0
 80038ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ff5d 	bl	8003780 <__NVIC_SetPriority>
}
 80038c6:	bf00      	nop
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	4603      	mov	r3, r0
 80038d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ff31 	bl	8003744 <__NVIC_EnableIRQ>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff ffa2 	bl	800383c <SysTick_Config>
 80038f8:	4603      	mov	r3, r0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003910:	f7ff f970 	bl	8002bf4 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e099      	b.n	8003a54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003940:	e00f      	b.n	8003962 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003942:	f7ff f957 	bl	8002bf4 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b05      	cmp	r3, #5
 800394e:	d908      	bls.n	8003962 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2203      	movs	r2, #3
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e078      	b.n	8003a54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e8      	bne.n	8003942 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4b38      	ldr	r3, [pc, #224]	; (8003a5c <HAL_DMA_Init+0x158>)
 800397c:	4013      	ands	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800398e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d107      	bne.n	80039cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	4313      	orrs	r3, r2
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 0307 	bic.w	r3, r3, #7
 80039e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d117      	bne.n	8003a26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00e      	beq.n	8003a26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fb01 	bl	8004010 <DMA_CheckFifoParam>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2240      	movs	r2, #64	; 0x40
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a22:	2301      	movs	r3, #1
 8003a24:	e016      	b.n	8003a54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fab8 	bl	8003fa4 <DMA_CalcBaseAndBitshift>
 8003a34:	4603      	mov	r3, r0
 8003a36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	223f      	movs	r2, #63	; 0x3f
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	f010803f 	.word	0xf010803f

08003a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_DMA_Start_IT+0x26>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e040      	b.n	8003b08 <HAL_DMA_Start_IT+0xa8>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d12f      	bne.n	8003afa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fa4a 	bl	8003f48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	223f      	movs	r2, #63	; 0x3f
 8003aba:	409a      	lsls	r2, r3
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0216 	orr.w	r2, r2, #22
 8003ace:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0208 	orr.w	r2, r2, #8
 8003ae6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	e005      	b.n	8003b06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b02:	2302      	movs	r3, #2
 8003b04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b1e:	f7ff f869 	bl	8002bf4 <HAL_GetTick>
 8003b22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d008      	beq.n	8003b42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e052      	b.n	8003be8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0216 	bic.w	r2, r2, #22
 8003b50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695a      	ldr	r2, [r3, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <HAL_DMA_Abort+0x62>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0208 	bic.w	r2, r2, #8
 8003b80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b92:	e013      	b.n	8003bbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b94:	f7ff f82e 	bl	8002bf4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b05      	cmp	r3, #5
 8003ba0:	d90c      	bls.n	8003bbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2203      	movs	r2, #3
 8003bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e015      	b.n	8003be8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e4      	bne.n	8003b94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bce:	223f      	movs	r2, #63	; 0x3f
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d004      	beq.n	8003c0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e00c      	b.n	8003c28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2205      	movs	r2, #5
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c40:	4b92      	ldr	r3, [pc, #584]	; (8003e8c <HAL_DMA_IRQHandler+0x258>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a92      	ldr	r2, [pc, #584]	; (8003e90 <HAL_DMA_IRQHandler+0x25c>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0a9b      	lsrs	r3, r3, #10
 8003c4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	2208      	movs	r2, #8
 8003c60:	409a      	lsls	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01a      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d013      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0204 	bic.w	r2, r2, #4
 8003c86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	f043 0201 	orr.w	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d012      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	f043 0202 	orr.w	r2, r3, #2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	2204      	movs	r2, #4
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d012      	beq.n	8003d0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	f043 0204 	orr.w	r2, r3, #4
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d10:	2210      	movs	r2, #16
 8003d12:	409a      	lsls	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d043      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d03c      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2e:	2210      	movs	r2, #16
 8003d30:	409a      	lsls	r2, r3
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d018      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d108      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d024      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
 8003d62:	e01f      	b.n	8003da4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01b      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
 8003d74:	e016      	b.n	8003da4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d107      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0208 	bic.w	r2, r2, #8
 8003d92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	2220      	movs	r2, #32
 8003daa:	409a      	lsls	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 808e 	beq.w	8003ed2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8086 	beq.w	8003ed2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	2220      	movs	r2, #32
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d136      	bne.n	8003e4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0216 	bic.w	r2, r2, #22
 8003dec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d103      	bne.n	8003e0e <HAL_DMA_IRQHandler+0x1da>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0208 	bic.w	r2, r2, #8
 8003e1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	223f      	movs	r2, #63	; 0x3f
 8003e24:	409a      	lsls	r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d07d      	beq.n	8003f3e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4798      	blx	r3
        }
        return;
 8003e4a:	e078      	b.n	8003f3e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01c      	beq.n	8003e94 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d108      	bne.n	8003e7a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d030      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4798      	blx	r3
 8003e78:	e02b      	b.n	8003ed2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d027      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	4798      	blx	r3
 8003e8a:	e022      	b.n	8003ed2 <HAL_DMA_IRQHandler+0x29e>
 8003e8c:	20000014 	.word	0x20000014
 8003e90:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0210 	bic.w	r2, r2, #16
 8003eb0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d032      	beq.n	8003f40 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d022      	beq.n	8003f2c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2205      	movs	r2, #5
 8003eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	3301      	adds	r3, #1
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d307      	bcc.n	8003f1a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f2      	bne.n	8003efe <HAL_DMA_IRQHandler+0x2ca>
 8003f18:	e000      	b.n	8003f1c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003f1a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
 8003f3c:	e000      	b.n	8003f40 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003f3e:	bf00      	nop
    }
  }
}
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop

08003f48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	d108      	bne.n	8003f88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f86:	e007      	b.n	8003f98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	60da      	str	r2, [r3, #12]
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	3b10      	subs	r3, #16
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <DMA_CalcBaseAndBitshift+0x64>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fbe:	4a13      	ldr	r2, [pc, #76]	; (800400c <DMA_CalcBaseAndBitshift+0x68>)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d909      	bls.n	8003fe6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	1d1a      	adds	r2, r3, #4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	659a      	str	r2, [r3, #88]	; 0x58
 8003fe4:	e007      	b.n	8003ff6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	aaaaaaab 	.word	0xaaaaaaab
 800400c:	08008448 	.word	0x08008448

08004010 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d11f      	bne.n	800406a <DMA_CheckFifoParam+0x5a>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d856      	bhi.n	80040de <DMA_CheckFifoParam+0xce>
 8004030:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <DMA_CheckFifoParam+0x28>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	08004049 	.word	0x08004049
 800403c:	0800405b 	.word	0x0800405b
 8004040:	08004049 	.word	0x08004049
 8004044:	080040df 	.word	0x080040df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d046      	beq.n	80040e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004058:	e043      	b.n	80040e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004062:	d140      	bne.n	80040e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004068:	e03d      	b.n	80040e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004072:	d121      	bne.n	80040b8 <DMA_CheckFifoParam+0xa8>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b03      	cmp	r3, #3
 8004078:	d837      	bhi.n	80040ea <DMA_CheckFifoParam+0xda>
 800407a:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <DMA_CheckFifoParam+0x70>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	08004091 	.word	0x08004091
 8004084:	08004097 	.word	0x08004097
 8004088:	08004091 	.word	0x08004091
 800408c:	080040a9 	.word	0x080040a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
      break;
 8004094:	e030      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d025      	beq.n	80040ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a6:	e022      	b.n	80040ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040b0:	d11f      	bne.n	80040f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040b6:	e01c      	b.n	80040f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d903      	bls.n	80040c6 <DMA_CheckFifoParam+0xb6>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d003      	beq.n	80040cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040c4:	e018      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
      break;
 80040ca:	e015      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00e      	beq.n	80040f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      break;
 80040dc:	e00b      	b.n	80040f6 <DMA_CheckFifoParam+0xe6>
      break;
 80040de:	bf00      	nop
 80040e0:	e00a      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040e2:	bf00      	nop
 80040e4:	e008      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040e6:	bf00      	nop
 80040e8:	e006      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ea:	bf00      	nop
 80040ec:	e004      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ee:	bf00      	nop
 80040f0:	e002      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80040f2:	bf00      	nop
 80040f4:	e000      	b.n	80040f8 <DMA_CheckFifoParam+0xe8>
      break;
 80040f6:	bf00      	nop
    }
  } 
  
  return status; 
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop

08004108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	e165      	b.n	80043f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004124:	2201      	movs	r2, #1
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4013      	ands	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	429a      	cmp	r2, r3
 800413e:	f040 8154 	bne.w	80043ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b01      	cmp	r3, #1
 800414c:	d005      	beq.n	800415a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004156:	2b02      	cmp	r3, #2
 8004158:	d130      	bne.n	80041bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	2203      	movs	r2, #3
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43db      	mvns	r3, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4013      	ands	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004190:	2201      	movs	r2, #1
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 0201 	and.w	r2, r3, #1
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d017      	beq.n	80041f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	2203      	movs	r2, #3
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d123      	bne.n	800424c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	08da      	lsrs	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3208      	adds	r2, #8
 800420c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	220f      	movs	r2, #15
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4013      	ands	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	08da      	lsrs	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3208      	adds	r2, #8
 8004246:	69b9      	ldr	r1, [r7, #24]
 8004248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	2203      	movs	r2, #3
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f003 0203 	and.w	r2, r3, #3
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80ae 	beq.w	80043ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	4b5d      	ldr	r3, [pc, #372]	; (8004408 <HAL_GPIO_Init+0x300>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	4a5c      	ldr	r2, [pc, #368]	; (8004408 <HAL_GPIO_Init+0x300>)
 8004298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800429c:	6453      	str	r3, [r2, #68]	; 0x44
 800429e:	4b5a      	ldr	r3, [pc, #360]	; (8004408 <HAL_GPIO_Init+0x300>)
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042aa:	4a58      	ldr	r2, [pc, #352]	; (800440c <HAL_GPIO_Init+0x304>)
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	3302      	adds	r3, #2
 80042b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	220f      	movs	r2, #15
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a4f      	ldr	r2, [pc, #316]	; (8004410 <HAL_GPIO_Init+0x308>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d025      	beq.n	8004322 <HAL_GPIO_Init+0x21a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a4e      	ldr	r2, [pc, #312]	; (8004414 <HAL_GPIO_Init+0x30c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01f      	beq.n	800431e <HAL_GPIO_Init+0x216>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a4d      	ldr	r2, [pc, #308]	; (8004418 <HAL_GPIO_Init+0x310>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d019      	beq.n	800431a <HAL_GPIO_Init+0x212>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a4c      	ldr	r2, [pc, #304]	; (800441c <HAL_GPIO_Init+0x314>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <HAL_GPIO_Init+0x20e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a4b      	ldr	r2, [pc, #300]	; (8004420 <HAL_GPIO_Init+0x318>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00d      	beq.n	8004312 <HAL_GPIO_Init+0x20a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a4a      	ldr	r2, [pc, #296]	; (8004424 <HAL_GPIO_Init+0x31c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d007      	beq.n	800430e <HAL_GPIO_Init+0x206>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a49      	ldr	r2, [pc, #292]	; (8004428 <HAL_GPIO_Init+0x320>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <HAL_GPIO_Init+0x202>
 8004306:	2306      	movs	r3, #6
 8004308:	e00c      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 800430a:	2307      	movs	r3, #7
 800430c:	e00a      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 800430e:	2305      	movs	r3, #5
 8004310:	e008      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 8004312:	2304      	movs	r3, #4
 8004314:	e006      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 8004316:	2303      	movs	r3, #3
 8004318:	e004      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 800431a:	2302      	movs	r3, #2
 800431c:	e002      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <HAL_GPIO_Init+0x21c>
 8004322:	2300      	movs	r3, #0
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	f002 0203 	and.w	r2, r2, #3
 800432a:	0092      	lsls	r2, r2, #2
 800432c:	4093      	lsls	r3, r2
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004334:	4935      	ldr	r1, [pc, #212]	; (800440c <HAL_GPIO_Init+0x304>)
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	089b      	lsrs	r3, r3, #2
 800433a:	3302      	adds	r3, #2
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004342:	4b3a      	ldr	r3, [pc, #232]	; (800442c <HAL_GPIO_Init+0x324>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	43db      	mvns	r3, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4013      	ands	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004366:	4a31      	ldr	r2, [pc, #196]	; (800442c <HAL_GPIO_Init+0x324>)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800436c:	4b2f      	ldr	r3, [pc, #188]	; (800442c <HAL_GPIO_Init+0x324>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004390:	4a26      	ldr	r2, [pc, #152]	; (800442c <HAL_GPIO_Init+0x324>)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004396:	4b25      	ldr	r3, [pc, #148]	; (800442c <HAL_GPIO_Init+0x324>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ba:	4a1c      	ldr	r2, [pc, #112]	; (800442c <HAL_GPIO_Init+0x324>)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043c0:	4b1a      	ldr	r3, [pc, #104]	; (800442c <HAL_GPIO_Init+0x324>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043e4:	4a11      	ldr	r2, [pc, #68]	; (800442c <HAL_GPIO_Init+0x324>)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3301      	adds	r3, #1
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b0f      	cmp	r3, #15
 80043f4:	f67f ae96 	bls.w	8004124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	3724      	adds	r7, #36	; 0x24
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800
 800440c:	40013800 	.word	0x40013800
 8004410:	40020000 	.word	0x40020000
 8004414:	40020400 	.word	0x40020400
 8004418:	40020800 	.word	0x40020800
 800441c:	40020c00 	.word	0x40020c00
 8004420:	40021000 	.word	0x40021000
 8004424:	40021400 	.word	0x40021400
 8004428:	40021800 	.word	0x40021800
 800442c:	40013c00 	.word	0x40013c00

08004430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	887b      	ldrh	r3, [r7, #2]
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	e001      	b.n	8004452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800444e:	2300      	movs	r3, #0
 8004450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	807b      	strh	r3, [r7, #2]
 800446c:	4613      	mov	r3, r2
 800446e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004470:	787b      	ldrb	r3, [r7, #1]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004476:	887a      	ldrh	r2, [r7, #2]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800447c:	e003      	b.n	8004486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800447e:	887b      	ldrh	r3, [r7, #2]
 8004480:	041a      	lsls	r2, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	619a      	str	r2, [r3, #24]
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
	...

08004494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0cc      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044a8:	4b68      	ldr	r3, [pc, #416]	; (800464c <HAL_RCC_ClockConfig+0x1b8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d90c      	bls.n	80044d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b65      	ldr	r3, [pc, #404]	; (800464c <HAL_RCC_ClockConfig+0x1b8>)
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044be:	4b63      	ldr	r3, [pc, #396]	; (800464c <HAL_RCC_ClockConfig+0x1b8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d001      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0b8      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d020      	beq.n	800451e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e8:	4b59      	ldr	r3, [pc, #356]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	4a58      	ldr	r2, [pc, #352]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004500:	4b53      	ldr	r3, [pc, #332]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a52      	ldr	r2, [pc, #328]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800450a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800450c:	4b50      	ldr	r3, [pc, #320]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	494d      	ldr	r1, [pc, #308]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	4313      	orrs	r3, r2
 800451c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d044      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d107      	bne.n	8004542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004532:	4b47      	ldr	r3, [pc, #284]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d119      	bne.n	8004572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e07f      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d003      	beq.n	8004552 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800454e:	2b03      	cmp	r3, #3
 8004550:	d107      	bne.n	8004562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004552:	4b3f      	ldr	r3, [pc, #252]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e06f      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004562:	4b3b      	ldr	r3, [pc, #236]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e067      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004572:	4b37      	ldr	r3, [pc, #220]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f023 0203 	bic.w	r2, r3, #3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4934      	ldr	r1, [pc, #208]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	4313      	orrs	r3, r2
 8004582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004584:	f7fe fb36 	bl	8002bf4 <HAL_GetTick>
 8004588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458a:	e00a      	b.n	80045a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800458c:	f7fe fb32 	bl	8002bf4 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	; 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e04f      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a2:	4b2b      	ldr	r3, [pc, #172]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 020c 	and.w	r2, r3, #12
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d1eb      	bne.n	800458c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <HAL_RCC_ClockConfig+0x1b8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d20c      	bcs.n	80045dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b22      	ldr	r3, [pc, #136]	; (800464c <HAL_RCC_ClockConfig+0x1b8>)
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	4b20      	ldr	r3, [pc, #128]	; (800464c <HAL_RCC_ClockConfig+0x1b8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e032      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e8:	4b19      	ldr	r3, [pc, #100]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4916      	ldr	r1, [pc, #88]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004606:	4b12      	ldr	r3, [pc, #72]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	490e      	ldr	r1, [pc, #56]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800461a:	f000 f855 	bl	80046c8 <HAL_RCC_GetSysClockFreq>
 800461e:	4602      	mov	r2, r0
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	490a      	ldr	r1, [pc, #40]	; (8004654 <HAL_RCC_ClockConfig+0x1c0>)
 800462c:	5ccb      	ldrb	r3, [r1, r3]
 800462e:	fa22 f303 	lsr.w	r3, r2, r3
 8004632:	4a09      	ldr	r2, [pc, #36]	; (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 8004634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004636:	4b09      	ldr	r3, [pc, #36]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fa96 	bl	8002b6c <HAL_InitTick>

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40023c00 	.word	0x40023c00
 8004650:	40023800 	.word	0x40023800
 8004654:	08008430 	.word	0x08008430
 8004658:	20000014 	.word	0x20000014
 800465c:	2000001c 	.word	0x2000001c

08004660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004664:	4b03      	ldr	r3, [pc, #12]	; (8004674 <HAL_RCC_GetHCLKFreq+0x14>)
 8004666:	681b      	ldr	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000014 	.word	0x20000014

08004678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800467c:	f7ff fff0 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	0a9b      	lsrs	r3, r3, #10
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4903      	ldr	r1, [pc, #12]	; (800469c <HAL_RCC_GetPCLK1Freq+0x24>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40023800 	.word	0x40023800
 800469c:	08008440 	.word	0x08008440

080046a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046a4:	f7ff ffdc 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0b5b      	lsrs	r3, r3, #13
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	; (80046c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40023800 	.word	0x40023800
 80046c4:	08008440 	.word	0x08008440

080046c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046cc:	b088      	sub	sp, #32
 80046ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046e4:	4bce      	ldr	r3, [pc, #824]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x358>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b0c      	cmp	r3, #12
 80046ee:	f200 818d 	bhi.w	8004a0c <HAL_RCC_GetSysClockFreq+0x344>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <HAL_RCC_GetSysClockFreq+0x30>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	0800472d 	.word	0x0800472d
 80046fc:	08004a0d 	.word	0x08004a0d
 8004700:	08004a0d 	.word	0x08004a0d
 8004704:	08004a0d 	.word	0x08004a0d
 8004708:	08004733 	.word	0x08004733
 800470c:	08004a0d 	.word	0x08004a0d
 8004710:	08004a0d 	.word	0x08004a0d
 8004714:	08004a0d 	.word	0x08004a0d
 8004718:	08004739 	.word	0x08004739
 800471c:	08004a0d 	.word	0x08004a0d
 8004720:	08004a0d 	.word	0x08004a0d
 8004724:	08004a0d 	.word	0x08004a0d
 8004728:	080048ad 	.word	0x080048ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800472c:	4bbd      	ldr	r3, [pc, #756]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x35c>)
 800472e:	61bb      	str	r3, [r7, #24]
       break;
 8004730:	e16f      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004732:	4bbd      	ldr	r3, [pc, #756]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x360>)
 8004734:	61bb      	str	r3, [r7, #24]
      break;
 8004736:	e16c      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004738:	4bb9      	ldr	r3, [pc, #740]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x358>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004740:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004742:	4bb7      	ldr	r3, [pc, #732]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x358>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d053      	beq.n	80047f6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474e:	4bb4      	ldr	r3, [pc, #720]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x358>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	099b      	lsrs	r3, r3, #6
 8004754:	461a      	mov	r2, r3
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800475e:	f04f 0100 	mov.w	r1, #0
 8004762:	ea02 0400 	and.w	r4, r2, r0
 8004766:	603c      	str	r4, [r7, #0]
 8004768:	400b      	ands	r3, r1
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004770:	4620      	mov	r0, r4
 8004772:	4629      	mov	r1, r5
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	014b      	lsls	r3, r1, #5
 800477e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004782:	0142      	lsls	r2, r0, #5
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	4623      	mov	r3, r4
 800478a:	1ac0      	subs	r0, r0, r3
 800478c:	462b      	mov	r3, r5
 800478e:	eb61 0103 	sbc.w	r1, r1, r3
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	018b      	lsls	r3, r1, #6
 800479c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047a0:	0182      	lsls	r2, r0, #6
 80047a2:	1a12      	subs	r2, r2, r0
 80047a4:	eb63 0301 	sbc.w	r3, r3, r1
 80047a8:	f04f 0000 	mov.w	r0, #0
 80047ac:	f04f 0100 	mov.w	r1, #0
 80047b0:	00d9      	lsls	r1, r3, #3
 80047b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047b6:	00d0      	lsls	r0, r2, #3
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4621      	mov	r1, r4
 80047be:	1852      	adds	r2, r2, r1
 80047c0:	4629      	mov	r1, r5
 80047c2:	eb43 0101 	adc.w	r1, r3, r1
 80047c6:	460b      	mov	r3, r1
 80047c8:	f04f 0000 	mov.w	r0, #0
 80047cc:	f04f 0100 	mov.w	r1, #0
 80047d0:	0259      	lsls	r1, r3, #9
 80047d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80047d6:	0250      	lsls	r0, r2, #9
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	f7fc f98c 	bl	8000b04 <__aeabi_uldivmod>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4613      	mov	r3, r2
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	e04c      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f6:	4b8a      	ldr	r3, [pc, #552]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x358>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	099b      	lsrs	r3, r3, #6
 80047fc:	461a      	mov	r2, r3
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	ea02 0a00 	and.w	sl, r2, r0
 800480e:	ea03 0b01 	and.w	fp, r3, r1
 8004812:	4650      	mov	r0, sl
 8004814:	4659      	mov	r1, fp
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	014b      	lsls	r3, r1, #5
 8004820:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004824:	0142      	lsls	r2, r0, #5
 8004826:	4610      	mov	r0, r2
 8004828:	4619      	mov	r1, r3
 800482a:	ebb0 000a 	subs.w	r0, r0, sl
 800482e:	eb61 010b 	sbc.w	r1, r1, fp
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	018b      	lsls	r3, r1, #6
 800483c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004840:	0182      	lsls	r2, r0, #6
 8004842:	1a12      	subs	r2, r2, r0
 8004844:	eb63 0301 	sbc.w	r3, r3, r1
 8004848:	f04f 0000 	mov.w	r0, #0
 800484c:	f04f 0100 	mov.w	r1, #0
 8004850:	00d9      	lsls	r1, r3, #3
 8004852:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004856:	00d0      	lsls	r0, r2, #3
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	eb12 020a 	adds.w	r2, r2, sl
 8004860:	eb43 030b 	adc.w	r3, r3, fp
 8004864:	f04f 0000 	mov.w	r0, #0
 8004868:	f04f 0100 	mov.w	r1, #0
 800486c:	0299      	lsls	r1, r3, #10
 800486e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004872:	0290      	lsls	r0, r2, #10
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4610      	mov	r0, r2
 800487a:	4619      	mov	r1, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	461a      	mov	r2, r3
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	f7fc f93e 	bl	8000b04 <__aeabi_uldivmod>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4613      	mov	r3, r2
 800488e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004890:	4b63      	ldr	r3, [pc, #396]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x358>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	3301      	adds	r3, #1
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a8:	61bb      	str	r3, [r7, #24]
      break;
 80048aa:	e0b2      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048ac:	4b5c      	ldr	r3, [pc, #368]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x358>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048b6:	4b5a      	ldr	r3, [pc, #360]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x358>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d04d      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c2:	4b57      	ldr	r3, [pc, #348]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x358>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	461a      	mov	r2, r3
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048d2:	f04f 0100 	mov.w	r1, #0
 80048d6:	ea02 0800 	and.w	r8, r2, r0
 80048da:	ea03 0901 	and.w	r9, r3, r1
 80048de:	4640      	mov	r0, r8
 80048e0:	4649      	mov	r1, r9
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	014b      	lsls	r3, r1, #5
 80048ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048f0:	0142      	lsls	r2, r0, #5
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	ebb0 0008 	subs.w	r0, r0, r8
 80048fa:	eb61 0109 	sbc.w	r1, r1, r9
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	018b      	lsls	r3, r1, #6
 8004908:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800490c:	0182      	lsls	r2, r0, #6
 800490e:	1a12      	subs	r2, r2, r0
 8004910:	eb63 0301 	sbc.w	r3, r3, r1
 8004914:	f04f 0000 	mov.w	r0, #0
 8004918:	f04f 0100 	mov.w	r1, #0
 800491c:	00d9      	lsls	r1, r3, #3
 800491e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004922:	00d0      	lsls	r0, r2, #3
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	eb12 0208 	adds.w	r2, r2, r8
 800492c:	eb43 0309 	adc.w	r3, r3, r9
 8004930:	f04f 0000 	mov.w	r0, #0
 8004934:	f04f 0100 	mov.w	r1, #0
 8004938:	0259      	lsls	r1, r3, #9
 800493a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800493e:	0250      	lsls	r0, r2, #9
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4610      	mov	r0, r2
 8004946:	4619      	mov	r1, r3
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	461a      	mov	r2, r3
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	f7fc f8d8 	bl	8000b04 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4613      	mov	r3, r2
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e04a      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495e:	4b30      	ldr	r3, [pc, #192]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x358>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	099b      	lsrs	r3, r3, #6
 8004964:	461a      	mov	r2, r3
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800496e:	f04f 0100 	mov.w	r1, #0
 8004972:	ea02 0400 	and.w	r4, r2, r0
 8004976:	ea03 0501 	and.w	r5, r3, r1
 800497a:	4620      	mov	r0, r4
 800497c:	4629      	mov	r1, r5
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	014b      	lsls	r3, r1, #5
 8004988:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800498c:	0142      	lsls	r2, r0, #5
 800498e:	4610      	mov	r0, r2
 8004990:	4619      	mov	r1, r3
 8004992:	1b00      	subs	r0, r0, r4
 8004994:	eb61 0105 	sbc.w	r1, r1, r5
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	018b      	lsls	r3, r1, #6
 80049a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049a6:	0182      	lsls	r2, r0, #6
 80049a8:	1a12      	subs	r2, r2, r0
 80049aa:	eb63 0301 	sbc.w	r3, r3, r1
 80049ae:	f04f 0000 	mov.w	r0, #0
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	00d9      	lsls	r1, r3, #3
 80049b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049bc:	00d0      	lsls	r0, r2, #3
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	1912      	adds	r2, r2, r4
 80049c4:	eb45 0303 	adc.w	r3, r5, r3
 80049c8:	f04f 0000 	mov.w	r0, #0
 80049cc:	f04f 0100 	mov.w	r1, #0
 80049d0:	0299      	lsls	r1, r3, #10
 80049d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049d6:	0290      	lsls	r0, r2, #10
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4610      	mov	r0, r2
 80049de:	4619      	mov	r1, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	f7fc f88c 	bl	8000b04 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4613      	mov	r3, r2
 80049f2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049f4:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x358>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	0f1b      	lsrs	r3, r3, #28
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	61bb      	str	r3, [r7, #24]
      break;
 8004a0a:	e002      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a0c:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a0e:	61bb      	str	r3, [r7, #24]
      break;
 8004a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a12:	69bb      	ldr	r3, [r7, #24]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	00f42400 	.word	0x00f42400
 8004a28:	007a1200 	.word	0x007a1200

08004a2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e28d      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 8083 	beq.w	8004b52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a4c:	4b94      	ldr	r3, [pc, #592]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 030c 	and.w	r3, r3, #12
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d019      	beq.n	8004a8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a58:	4b91      	ldr	r3, [pc, #580]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d106      	bne.n	8004a72 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a64:	4b8e      	ldr	r3, [pc, #568]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a70:	d00c      	beq.n	8004a8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a72:	4b8b      	ldr	r3, [pc, #556]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a7a:	2b0c      	cmp	r3, #12
 8004a7c:	d112      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7e:	4b88      	ldr	r3, [pc, #544]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a8a:	d10b      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8c:	4b84      	ldr	r3, [pc, #528]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d05b      	beq.n	8004b50 <HAL_RCC_OscConfig+0x124>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d157      	bne.n	8004b50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e25a      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aac:	d106      	bne.n	8004abc <HAL_RCC_OscConfig+0x90>
 8004aae:	4b7c      	ldr	r3, [pc, #496]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a7b      	ldr	r2, [pc, #492]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e01d      	b.n	8004af8 <HAL_RCC_OscConfig+0xcc>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCC_OscConfig+0xb4>
 8004ac6:	4b76      	ldr	r3, [pc, #472]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a75      	ldr	r2, [pc, #468]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	4b73      	ldr	r3, [pc, #460]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a72      	ldr	r2, [pc, #456]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e00b      	b.n	8004af8 <HAL_RCC_OscConfig+0xcc>
 8004ae0:	4b6f      	ldr	r3, [pc, #444]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a6e      	ldr	r2, [pc, #440]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b6c      	ldr	r3, [pc, #432]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a6b      	ldr	r2, [pc, #428]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d013      	beq.n	8004b28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fe f878 	bl	8002bf4 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b08:	f7fe f874 	bl	8002bf4 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e21f      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1a:	4b61      	ldr	r3, [pc, #388]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0xdc>
 8004b26:	e014      	b.n	8004b52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fe f864 	bl	8002bf4 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b30:	f7fe f860 	bl	8002bf4 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	; 0x64
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e20b      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b42:	4b57      	ldr	r3, [pc, #348]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x104>
 8004b4e:	e000      	b.n	8004b52 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d06f      	beq.n	8004c3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b5e:	4b50      	ldr	r3, [pc, #320]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 030c 	and.w	r3, r3, #12
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d017      	beq.n	8004b9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b6a:	4b4d      	ldr	r3, [pc, #308]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d105      	bne.n	8004b82 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b76:	4b4a      	ldr	r3, [pc, #296]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00b      	beq.n	8004b9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b82:	4b47      	ldr	r3, [pc, #284]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b8a:	2b0c      	cmp	r3, #12
 8004b8c:	d11c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b8e:	4b44      	ldr	r3, [pc, #272]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d116      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9a:	4b41      	ldr	r3, [pc, #260]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x186>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d001      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e1d3      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4937      	ldr	r1, [pc, #220]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bc6:	e03a      	b.n	8004c3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d020      	beq.n	8004c12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd0:	4b34      	ldr	r3, [pc, #208]	; (8004ca4 <HAL_RCC_OscConfig+0x278>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd6:	f7fe f80d 	bl	8002bf4 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bde:	f7fe f809 	bl	8002bf4 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e1b4      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf0:	4b2b      	ldr	r3, [pc, #172]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfc:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4925      	ldr	r1, [pc, #148]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]
 8004c10:	e015      	b.n	8004c3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <HAL_RCC_OscConfig+0x278>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fd ffec 	bl	8002bf4 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c20:	f7fd ffe8 	bl	8002bf4 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e193      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c32:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d036      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d016      	beq.n	8004c80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <HAL_RCC_OscConfig+0x27c>)
 8004c54:	2201      	movs	r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c58:	f7fd ffcc 	bl	8002bf4 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c60:	f7fd ffc8 	bl	8002bf4 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e173      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c72:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_RCC_OscConfig+0x274>)
 8004c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x234>
 8004c7e:	e01b      	b.n	8004cb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c80:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <HAL_RCC_OscConfig+0x27c>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c86:	f7fd ffb5 	bl	8002bf4 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c8c:	e00e      	b.n	8004cac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c8e:	f7fd ffb1 	bl	8002bf4 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d907      	bls.n	8004cac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e15c      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	42470000 	.word	0x42470000
 8004ca8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cac:	4b8a      	ldr	r3, [pc, #552]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1ea      	bne.n	8004c8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8097 	beq.w	8004df4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cca:	4b83      	ldr	r3, [pc, #524]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10f      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	4b7f      	ldr	r3, [pc, #508]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	4a7e      	ldr	r2, [pc, #504]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce6:	4b7c      	ldr	r3, [pc, #496]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf6:	4b79      	ldr	r3, [pc, #484]	; (8004edc <HAL_RCC_OscConfig+0x4b0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d118      	bne.n	8004d34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d02:	4b76      	ldr	r3, [pc, #472]	; (8004edc <HAL_RCC_OscConfig+0x4b0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a75      	ldr	r2, [pc, #468]	; (8004edc <HAL_RCC_OscConfig+0x4b0>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d0e:	f7fd ff71 	bl	8002bf4 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d16:	f7fd ff6d 	bl	8002bf4 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e118      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d28:	4b6c      	ldr	r3, [pc, #432]	; (8004edc <HAL_RCC_OscConfig+0x4b0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d106      	bne.n	8004d4a <HAL_RCC_OscConfig+0x31e>
 8004d3c:	4b66      	ldr	r3, [pc, #408]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d40:	4a65      	ldr	r2, [pc, #404]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	6713      	str	r3, [r2, #112]	; 0x70
 8004d48:	e01c      	b.n	8004d84 <HAL_RCC_OscConfig+0x358>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b05      	cmp	r3, #5
 8004d50:	d10c      	bne.n	8004d6c <HAL_RCC_OscConfig+0x340>
 8004d52:	4b61      	ldr	r3, [pc, #388]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	4a60      	ldr	r2, [pc, #384]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004d58:	f043 0304 	orr.w	r3, r3, #4
 8004d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5e:	4b5e      	ldr	r3, [pc, #376]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	4a5d      	ldr	r2, [pc, #372]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6a:	e00b      	b.n	8004d84 <HAL_RCC_OscConfig+0x358>
 8004d6c:	4b5a      	ldr	r3, [pc, #360]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	4a59      	ldr	r2, [pc, #356]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004d72:	f023 0301 	bic.w	r3, r3, #1
 8004d76:	6713      	str	r3, [r2, #112]	; 0x70
 8004d78:	4b57      	ldr	r3, [pc, #348]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	4a56      	ldr	r2, [pc, #344]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004d7e:	f023 0304 	bic.w	r3, r3, #4
 8004d82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d015      	beq.n	8004db8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fd ff32 	bl	8002bf4 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d92:	e00a      	b.n	8004daa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d94:	f7fd ff2e 	bl	8002bf4 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e0d7      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004daa:	4b4b      	ldr	r3, [pc, #300]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0ee      	beq.n	8004d94 <HAL_RCC_OscConfig+0x368>
 8004db6:	e014      	b.n	8004de2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db8:	f7fd ff1c 	bl	8002bf4 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbe:	e00a      	b.n	8004dd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc0:	f7fd ff18 	bl	8002bf4 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e0c1      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd6:	4b40      	ldr	r3, [pc, #256]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1ee      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004de2:	7dfb      	ldrb	r3, [r7, #23]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d105      	bne.n	8004df4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de8:	4b3b      	ldr	r3, [pc, #236]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	4a3a      	ldr	r2, [pc, #232]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80ad 	beq.w	8004f58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dfe:	4b36      	ldr	r3, [pc, #216]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d060      	beq.n	8004ecc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d145      	bne.n	8004e9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e12:	4b33      	ldr	r3, [pc, #204]	; (8004ee0 <HAL_RCC_OscConfig+0x4b4>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fd feec 	bl	8002bf4 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fd fee8 	bl	8002bf4 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e093      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e32:	4b29      	ldr	r3, [pc, #164]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69da      	ldr	r2, [r3, #28]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	019b      	lsls	r3, r3, #6
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	085b      	lsrs	r3, r3, #1
 8004e56:	3b01      	subs	r3, #1
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	061b      	lsls	r3, r3, #24
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	071b      	lsls	r3, r3, #28
 8004e6a:	491b      	ldr	r1, [pc, #108]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e70:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <HAL_RCC_OscConfig+0x4b4>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e76:	f7fd febd 	bl	8002bf4 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e7e:	f7fd feb9 	bl	8002bf4 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e064      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e90:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x452>
 8004e9c:	e05c      	b.n	8004f58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <HAL_RCC_OscConfig+0x4b4>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea4:	f7fd fea6 	bl	8002bf4 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fd fea2 	bl	8002bf4 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e04d      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ebe:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <HAL_RCC_OscConfig+0x4ac>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f0      	bne.n	8004eac <HAL_RCC_OscConfig+0x480>
 8004eca:	e045      	b.n	8004f58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d107      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e040      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	40007000 	.word	0x40007000
 8004ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ee4:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <HAL_RCC_OscConfig+0x538>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d030      	beq.n	8004f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d129      	bne.n	8004f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d122      	bne.n	8004f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f14:	4013      	ands	r3, r2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d119      	bne.n	8004f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d10f      	bne.n	8004f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d107      	bne.n	8004f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40023800 	.word	0x40023800

08004f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e041      	b.n	8004ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fc ff6c 	bl	8001e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	f000 fc7a 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d001      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e04e      	b.n	80050be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a23      	ldr	r2, [pc, #140]	; (80050cc <HAL_TIM_Base_Start_IT+0xc4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d022      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0x80>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504a:	d01d      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0x80>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1f      	ldr	r2, [pc, #124]	; (80050d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d018      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0x80>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d013      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0x80>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1c      	ldr	r2, [pc, #112]	; (80050d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00e      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0x80>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1b      	ldr	r2, [pc, #108]	; (80050dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d009      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0x80>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a19      	ldr	r2, [pc, #100]	; (80050e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d004      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0x80>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d111      	bne.n	80050ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b06      	cmp	r3, #6
 8005098:	d010      	beq.n	80050bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0201 	orr.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050aa:	e007      	b.n	80050bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0201 	orr.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800
 80050d8:	40000c00 	.word	0x40000c00
 80050dc:	40010400 	.word	0x40010400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40001800 	.word	0x40001800

080050e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e041      	b.n	800517e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f839 	bl	8005186 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f000 fbba 	bl	80058a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
	...

0800519c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d109      	bne.n	80051c0 <HAL_TIM_PWM_Start+0x24>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	e022      	b.n	8005206 <HAL_TIM_PWM_Start+0x6a>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d109      	bne.n	80051da <HAL_TIM_PWM_Start+0x3e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	bf14      	ite	ne
 80051d2:	2301      	movne	r3, #1
 80051d4:	2300      	moveq	r3, #0
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	e015      	b.n	8005206 <HAL_TIM_PWM_Start+0x6a>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d109      	bne.n	80051f4 <HAL_TIM_PWM_Start+0x58>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	bf14      	ite	ne
 80051ec:	2301      	movne	r3, #1
 80051ee:	2300      	moveq	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	e008      	b.n	8005206 <HAL_TIM_PWM_Start+0x6a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	bf14      	ite	ne
 8005200:	2301      	movne	r3, #1
 8005202:	2300      	moveq	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e07c      	b.n	8005308 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <HAL_TIM_PWM_Start+0x82>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800521c:	e013      	b.n	8005246 <HAL_TIM_PWM_Start+0xaa>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b04      	cmp	r3, #4
 8005222:	d104      	bne.n	800522e <HAL_TIM_PWM_Start+0x92>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800522c:	e00b      	b.n	8005246 <HAL_TIM_PWM_Start+0xaa>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b08      	cmp	r3, #8
 8005232:	d104      	bne.n	800523e <HAL_TIM_PWM_Start+0xa2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800523c:	e003      	b.n	8005246 <HAL_TIM_PWM_Start+0xaa>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2201      	movs	r2, #1
 800524c:	6839      	ldr	r1, [r7, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fe10 	bl	8005e74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a2d      	ldr	r2, [pc, #180]	; (8005310 <HAL_TIM_PWM_Start+0x174>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_TIM_PWM_Start+0xcc>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a2c      	ldr	r2, [pc, #176]	; (8005314 <HAL_TIM_PWM_Start+0x178>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d101      	bne.n	800526c <HAL_TIM_PWM_Start+0xd0>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <HAL_TIM_PWM_Start+0xd2>
 800526c:	2300      	movs	r3, #0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005280:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a22      	ldr	r2, [pc, #136]	; (8005310 <HAL_TIM_PWM_Start+0x174>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d022      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x136>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005294:	d01d      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x136>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1f      	ldr	r2, [pc, #124]	; (8005318 <HAL_TIM_PWM_Start+0x17c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d018      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x136>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1d      	ldr	r2, [pc, #116]	; (800531c <HAL_TIM_PWM_Start+0x180>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x136>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1c      	ldr	r2, [pc, #112]	; (8005320 <HAL_TIM_PWM_Start+0x184>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00e      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x136>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a16      	ldr	r2, [pc, #88]	; (8005314 <HAL_TIM_PWM_Start+0x178>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d009      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x136>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a18      	ldr	r2, [pc, #96]	; (8005324 <HAL_TIM_PWM_Start+0x188>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d004      	beq.n	80052d2 <HAL_TIM_PWM_Start+0x136>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a16      	ldr	r2, [pc, #88]	; (8005328 <HAL_TIM_PWM_Start+0x18c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d111      	bne.n	80052f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b06      	cmp	r3, #6
 80052e2:	d010      	beq.n	8005306 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f4:	e007      	b.n	8005306 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40010000 	.word	0x40010000
 8005314:	40010400 	.word	0x40010400
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	40000c00 	.word	0x40000c00
 8005324:	40014000 	.word	0x40014000
 8005328:	40001800 	.word	0x40001800

0800532c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b02      	cmp	r3, #2
 8005340:	d122      	bne.n	8005388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b02      	cmp	r3, #2
 800534e:	d11b      	bne.n	8005388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0202 	mvn.w	r2, #2
 8005358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa77 	bl	8005862 <HAL_TIM_IC_CaptureCallback>
 8005374:	e005      	b.n	8005382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fa69 	bl	800584e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fa7a 	bl	8005876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b04      	cmp	r3, #4
 8005394:	d122      	bne.n	80053dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d11b      	bne.n	80053dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0204 	mvn.w	r2, #4
 80053ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fa4d 	bl	8005862 <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fa3f 	bl	800584e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fa50 	bl	8005876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d122      	bne.n	8005430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d11b      	bne.n	8005430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0208 	mvn.w	r2, #8
 8005400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2204      	movs	r2, #4
 8005406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa23 	bl	8005862 <HAL_TIM_IC_CaptureCallback>
 800541c:	e005      	b.n	800542a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fa15 	bl	800584e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fa26 	bl	8005876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b10      	cmp	r3, #16
 800543c:	d122      	bne.n	8005484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b10      	cmp	r3, #16
 800544a:	d11b      	bne.n	8005484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0210 	mvn.w	r2, #16
 8005454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2208      	movs	r2, #8
 800545a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f9f9 	bl	8005862 <HAL_TIM_IC_CaptureCallback>
 8005470:	e005      	b.n	800547e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f9eb 	bl	800584e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f9fc 	bl	8005876 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10e      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0201 	mvn.w	r2, #1
 80054a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fc fc30 	bl	8001d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b80      	cmp	r3, #128	; 0x80
 80054bc:	d10e      	bne.n	80054dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d107      	bne.n	80054dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fd78 	bl	8005fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b40      	cmp	r3, #64	; 0x40
 80054e8:	d10e      	bne.n	8005508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d107      	bne.n	8005508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f9c1 	bl	800588a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b20      	cmp	r3, #32
 8005514:	d10e      	bne.n	8005534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b20      	cmp	r3, #32
 8005522:	d107      	bne.n	8005534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0220 	mvn.w	r2, #32
 800552c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fd42 	bl	8005fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005556:	2302      	movs	r3, #2
 8005558:	e0ae      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b0c      	cmp	r3, #12
 8005566:	f200 809f 	bhi.w	80056a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	080055a5 	.word	0x080055a5
 8005574:	080056a9 	.word	0x080056a9
 8005578:	080056a9 	.word	0x080056a9
 800557c:	080056a9 	.word	0x080056a9
 8005580:	080055e5 	.word	0x080055e5
 8005584:	080056a9 	.word	0x080056a9
 8005588:	080056a9 	.word	0x080056a9
 800558c:	080056a9 	.word	0x080056a9
 8005590:	08005627 	.word	0x08005627
 8005594:	080056a9 	.word	0x080056a9
 8005598:	080056a9 	.word	0x080056a9
 800559c:	080056a9 	.word	0x080056a9
 80055a0:	08005667 	.word	0x08005667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fa18 	bl	80059e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0208 	orr.w	r2, r2, #8
 80055be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0204 	bic.w	r2, r2, #4
 80055ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6999      	ldr	r1, [r3, #24]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	619a      	str	r2, [r3, #24]
      break;
 80055e2:	e064      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fa68 	bl	8005ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800560e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6999      	ldr	r1, [r3, #24]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	021a      	lsls	r2, r3, #8
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	619a      	str	r2, [r3, #24]
      break;
 8005624:	e043      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fabd 	bl	8005bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0208 	orr.w	r2, r2, #8
 8005640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0204 	bic.w	r2, r2, #4
 8005650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69d9      	ldr	r1, [r3, #28]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	61da      	str	r2, [r3, #28]
      break;
 8005664:	e023      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fb11 	bl	8005c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69d9      	ldr	r1, [r3, #28]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	021a      	lsls	r2, r3, #8
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	61da      	str	r2, [r3, #28]
      break;
 80056a6:	e002      	b.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
      break;
 80056ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_TIM_ConfigClockSource+0x1c>
 80056d8:	2302      	movs	r3, #2
 80056da:	e0b4      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x186>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005714:	d03e      	beq.n	8005794 <HAL_TIM_ConfigClockSource+0xd4>
 8005716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571a:	f200 8087 	bhi.w	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800571e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005722:	f000 8086 	beq.w	8005832 <HAL_TIM_ConfigClockSource+0x172>
 8005726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572a:	d87f      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800572c:	2b70      	cmp	r3, #112	; 0x70
 800572e:	d01a      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0xa6>
 8005730:	2b70      	cmp	r3, #112	; 0x70
 8005732:	d87b      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 8005734:	2b60      	cmp	r3, #96	; 0x60
 8005736:	d050      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x11a>
 8005738:	2b60      	cmp	r3, #96	; 0x60
 800573a:	d877      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800573c:	2b50      	cmp	r3, #80	; 0x50
 800573e:	d03c      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0xfa>
 8005740:	2b50      	cmp	r3, #80	; 0x50
 8005742:	d873      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	d058      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0x13a>
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d86f      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800574c:	2b30      	cmp	r3, #48	; 0x30
 800574e:	d064      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005750:	2b30      	cmp	r3, #48	; 0x30
 8005752:	d86b      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b20      	cmp	r3, #32
 8005756:	d060      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005758:	2b20      	cmp	r3, #32
 800575a:	d867      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d05c      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005760:	2b10      	cmp	r3, #16
 8005762:	d05a      	beq.n	800581a <HAL_TIM_ConfigClockSource+0x15a>
 8005764:	e062      	b.n	800582c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6899      	ldr	r1, [r3, #8]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f000 fb5d 	bl	8005e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	609a      	str	r2, [r3, #8]
      break;
 8005792:	e04f      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	6899      	ldr	r1, [r3, #8]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f000 fb46 	bl	8005e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057b6:	609a      	str	r2, [r3, #8]
      break;
 80057b8:	e03c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6859      	ldr	r1, [r3, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	461a      	mov	r2, r3
 80057c8:	f000 faba 	bl	8005d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2150      	movs	r1, #80	; 0x50
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fb13 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 80057d8:	e02c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6859      	ldr	r1, [r3, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	461a      	mov	r2, r3
 80057e8:	f000 fad9 	bl	8005d9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2160      	movs	r1, #96	; 0x60
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fb03 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 80057f8:	e01c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6859      	ldr	r1, [r3, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	461a      	mov	r2, r3
 8005808:	f000 fa9a 	bl	8005d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2140      	movs	r1, #64	; 0x40
 8005812:	4618      	mov	r0, r3
 8005814:	f000 faf3 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 8005818:	e00c      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f000 faea 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 800582a:	e003      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
      break;
 8005830:	e000      	b.n	8005834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a40      	ldr	r2, [pc, #256]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058be:	d00f      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a3d      	ldr	r2, [pc, #244]	; (80059b8 <TIM_Base_SetConfig+0x118>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a3c      	ldr	r2, [pc, #240]	; (80059bc <TIM_Base_SetConfig+0x11c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a3b      	ldr	r2, [pc, #236]	; (80059c0 <TIM_Base_SetConfig+0x120>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a3a      	ldr	r2, [pc, #232]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d108      	bne.n	80058f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2f      	ldr	r2, [pc, #188]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d02b      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005900:	d027      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2c      	ldr	r2, [pc, #176]	; (80059b8 <TIM_Base_SetConfig+0x118>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d023      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2b      	ldr	r2, [pc, #172]	; (80059bc <TIM_Base_SetConfig+0x11c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d01f      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a2a      	ldr	r2, [pc, #168]	; (80059c0 <TIM_Base_SetConfig+0x120>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01b      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a29      	ldr	r2, [pc, #164]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d017      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a28      	ldr	r2, [pc, #160]	; (80059c8 <TIM_Base_SetConfig+0x128>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a27      	ldr	r2, [pc, #156]	; (80059cc <TIM_Base_SetConfig+0x12c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00f      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a26      	ldr	r2, [pc, #152]	; (80059d0 <TIM_Base_SetConfig+0x130>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00b      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a25      	ldr	r2, [pc, #148]	; (80059d4 <TIM_Base_SetConfig+0x134>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d007      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a24      	ldr	r2, [pc, #144]	; (80059d8 <TIM_Base_SetConfig+0x138>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a23      	ldr	r2, [pc, #140]	; (80059dc <TIM_Base_SetConfig+0x13c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d108      	bne.n	8005964 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <TIM_Base_SetConfig+0x114>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_Base_SetConfig+0xf8>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <TIM_Base_SetConfig+0x124>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d103      	bne.n	80059a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	615a      	str	r2, [r3, #20]
}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40010000 	.word	0x40010000
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800
 80059c0:	40000c00 	.word	0x40000c00
 80059c4:	40010400 	.word	0x40010400
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40014400 	.word	0x40014400
 80059d0:	40014800 	.word	0x40014800
 80059d4:	40001800 	.word	0x40001800
 80059d8:	40001c00 	.word	0x40001c00
 80059dc:	40002000 	.word	0x40002000

080059e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f023 0201 	bic.w	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0303 	bic.w	r3, r3, #3
 8005a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f023 0302 	bic.w	r3, r3, #2
 8005a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a20      	ldr	r2, [pc, #128]	; (8005ab8 <TIM_OC1_SetConfig+0xd8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_OC1_SetConfig+0x64>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <TIM_OC1_SetConfig+0xdc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d10c      	bne.n	8005a5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f023 0308 	bic.w	r3, r3, #8
 8005a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f023 0304 	bic.w	r3, r3, #4
 8005a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a15      	ldr	r2, [pc, #84]	; (8005ab8 <TIM_OC1_SetConfig+0xd8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <TIM_OC1_SetConfig+0x8e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a14      	ldr	r2, [pc, #80]	; (8005abc <TIM_OC1_SetConfig+0xdc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d111      	bne.n	8005a92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	621a      	str	r2, [r3, #32]
}
 8005aac:	bf00      	nop
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40010400 	.word	0x40010400

08005ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f023 0210 	bic.w	r2, r3, #16
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 0320 	bic.w	r3, r3, #32
 8005b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a22      	ldr	r2, [pc, #136]	; (8005ba4 <TIM_OC2_SetConfig+0xe4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_OC2_SetConfig+0x68>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a21      	ldr	r2, [pc, #132]	; (8005ba8 <TIM_OC2_SetConfig+0xe8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d10d      	bne.n	8005b44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <TIM_OC2_SetConfig+0xe4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_OC2_SetConfig+0x94>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <TIM_OC2_SetConfig+0xe8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d113      	bne.n	8005b7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40010400 	.word	0x40010400

08005bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a21      	ldr	r2, [pc, #132]	; (8005c8c <TIM_OC3_SetConfig+0xe0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_OC3_SetConfig+0x66>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a20      	ldr	r2, [pc, #128]	; (8005c90 <TIM_OC3_SetConfig+0xe4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d10d      	bne.n	8005c2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC3_SetConfig+0xe0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <TIM_OC3_SetConfig+0x92>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <TIM_OC3_SetConfig+0xe4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d113      	bne.n	8005c66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40010400 	.word	0x40010400

08005c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	031b      	lsls	r3, r3, #12
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <TIM_OC4_SetConfig+0xa4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d003      	beq.n	8005cfc <TIM_OC4_SetConfig+0x68>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a11      	ldr	r2, [pc, #68]	; (8005d3c <TIM_OC4_SetConfig+0xa8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d109      	bne.n	8005d10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	019b      	lsls	r3, r3, #6
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40010400 	.word	0x40010400

08005d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f023 0201 	bic.w	r2, r3, #1
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 030a 	bic.w	r3, r3, #10
 8005d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b087      	sub	sp, #28
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0210 	bic.w	r2, r3, #16
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	031b      	lsls	r3, r3, #12
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f043 0307 	orr.w	r3, r3, #7
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	609a      	str	r2, [r3, #8]
}
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	021a      	lsls	r2, r3, #8
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	609a      	str	r2, [r3, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	2201      	movs	r2, #1
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1a      	ldr	r2, [r3, #32]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	43db      	mvns	r3, r3
 8005e96:	401a      	ands	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1a      	ldr	r2, [r3, #32]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eac:	431a      	orrs	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	621a      	str	r2, [r3, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	371c      	adds	r7, #28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d101      	bne.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e05a      	b.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a21      	ldr	r2, [pc, #132]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d022      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f24:	d01d      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1d      	ldr	r2, [pc, #116]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d018      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1b      	ldr	r2, [pc, #108]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d013      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1a      	ldr	r2, [pc, #104]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00e      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a18      	ldr	r2, [pc, #96]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d009      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a17      	ldr	r2, [pc, #92]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d10c      	bne.n	8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40010000 	.word	0x40010000
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800
 8005fa8:	40000c00 	.word	0x40000c00
 8005fac:	40010400 	.word	0x40010400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40001800 	.word	0x40001800

08005fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e03f      	b.n	8006072 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fb ffc6 	bl	8001f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2224      	movs	r2, #36	; 0x24
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fdc7 	bl	8006bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
	...

0800607c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08c      	sub	sp, #48	; 0x30
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4613      	mov	r3, r2
 8006088:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b20      	cmp	r3, #32
 8006094:	d165      	bne.n	8006162 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <HAL_UART_Transmit_DMA+0x26>
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e05e      	b.n	8006164 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_UART_Transmit_DMA+0x38>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e057      	b.n	8006164 <HAL_UART_Transmit_DMA+0xe8>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	88fa      	ldrh	r2, [r7, #6]
 80060c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	88fa      	ldrh	r2, [r7, #6]
 80060cc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2221      	movs	r2, #33	; 0x21
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e0:	4a22      	ldr	r2, [pc, #136]	; (800616c <HAL_UART_Transmit_DMA+0xf0>)
 80060e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e8:	4a21      	ldr	r2, [pc, #132]	; (8006170 <HAL_UART_Transmit_DMA+0xf4>)
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f0:	4a20      	ldr	r2, [pc, #128]	; (8006174 <HAL_UART_Transmit_DMA+0xf8>)
 80060f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f8:	2200      	movs	r2, #0
 80060fa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80060fc:	f107 0308 	add.w	r3, r7, #8
 8006100:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3304      	adds	r3, #4
 8006110:	461a      	mov	r2, r3
 8006112:	88fb      	ldrh	r3, [r7, #6]
 8006114:	f7fd fca4 	bl	8003a60 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006120:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3314      	adds	r3, #20
 8006130:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	617b      	str	r3, [r7, #20]
   return(result);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3314      	adds	r3, #20
 8006148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800614a:	627a      	str	r2, [r7, #36]	; 0x24
 800614c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6a39      	ldr	r1, [r7, #32]
 8006150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	61fb      	str	r3, [r7, #28]
   return(result);
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e5      	bne.n	800612a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	e000      	b.n	8006164 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006162:	2302      	movs	r3, #2
  }
}
 8006164:	4618      	mov	r0, r3
 8006166:	3730      	adds	r7, #48	; 0x30
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	080066e9 	.word	0x080066e9
 8006170:	08006783 	.word	0x08006783
 8006174:	0800679f 	.word	0x0800679f

08006178 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b0ba      	sub	sp, #232	; 0xe8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800619e:	2300      	movs	r3, #0
 80061a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10f      	bne.n	80061de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d009      	beq.n	80061de <HAL_UART_IRQHandler+0x66>
 80061ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fc32 	bl	8006a40 <UART_Receive_IT>
      return;
 80061dc:	e256      	b.n	800668c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 80de 	beq.w	80063a4 <HAL_UART_IRQHandler+0x22c>
 80061e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d106      	bne.n	8006202 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 80d1 	beq.w	80063a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00b      	beq.n	8006226 <HAL_UART_IRQHandler+0xae>
 800620e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006216:	2b00      	cmp	r3, #0
 8006218:	d005      	beq.n	8006226 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f043 0201 	orr.w	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00b      	beq.n	800624a <HAL_UART_IRQHandler+0xd2>
 8006232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f043 0202 	orr.w	r2, r3, #2
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800624a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <HAL_UART_IRQHandler+0xf6>
 8006256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d005      	beq.n	800626e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	f043 0204 	orr.w	r2, r3, #4
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800626e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d011      	beq.n	800629e <HAL_UART_IRQHandler+0x126>
 800627a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d105      	bne.n	8006292 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f043 0208 	orr.w	r2, r3, #8
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 81ed 	beq.w	8006682 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_UART_IRQHandler+0x14e>
 80062b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fbbd 	bl	8006a40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d0:	2b40      	cmp	r3, #64	; 0x40
 80062d2:	bf0c      	ite	eq
 80062d4:	2301      	moveq	r3, #1
 80062d6:	2300      	movne	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	f003 0308 	and.w	r3, r3, #8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <HAL_UART_IRQHandler+0x17a>
 80062ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d04f      	beq.n	8006392 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fac5 	bl	8006882 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006302:	2b40      	cmp	r3, #64	; 0x40
 8006304:	d141      	bne.n	800638a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3314      	adds	r3, #20
 800630c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800631c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3314      	adds	r3, #20
 800632e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006332:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800633e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800634a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1d9      	bne.n	8006306 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	2b00      	cmp	r3, #0
 8006358:	d013      	beq.n	8006382 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635e:	4a7d      	ldr	r2, [pc, #500]	; (8006554 <HAL_UART_IRQHandler+0x3dc>)
 8006360:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006366:	4618      	mov	r0, r3
 8006368:	f7fd fc42 	bl	8003bf0 <HAL_DMA_Abort_IT>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d016      	beq.n	80063a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800637c:	4610      	mov	r0, r2
 800637e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	e00e      	b.n	80063a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f99a 	bl	80066bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006388:	e00a      	b.n	80063a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f996 	bl	80066bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	e006      	b.n	80063a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f992 	bl	80066bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800639e:	e170      	b.n	8006682 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a0:	bf00      	nop
    return;
 80063a2:	e16e      	b.n	8006682 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	f040 814a 	bne.w	8006642 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 8143 	beq.w	8006642 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 813c 	beq.w	8006642 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063ca:	2300      	movs	r3, #0
 80063cc:	60bb      	str	r3, [r7, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60bb      	str	r3, [r7, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	60bb      	str	r3, [r7, #8]
 80063de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b40      	cmp	r3, #64	; 0x40
 80063ec:	f040 80b4 	bne.w	8006558 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8140 	beq.w	8006686 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800640a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800640e:	429a      	cmp	r2, r3
 8006410:	f080 8139 	bcs.w	8006686 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800641a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006426:	f000 8088 	beq.w	800653a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	330c      	adds	r3, #12
 8006430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	330c      	adds	r3, #12
 8006452:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006456:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800645a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006462:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800646e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1d9      	bne.n	800642a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3314      	adds	r3, #20
 800647c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006488:	f023 0301 	bic.w	r3, r3, #1
 800648c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3314      	adds	r3, #20
 8006496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800649a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800649e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064a6:	e841 2300 	strex	r3, r2, [r1]
 80064aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1e1      	bne.n	8006476 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3314      	adds	r3, #20
 80064b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3314      	adds	r3, #20
 80064d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e3      	bne.n	80064b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800650a:	f023 0310 	bic.w	r3, r3, #16
 800650e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	330c      	adds	r3, #12
 8006518:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800651c:	65ba      	str	r2, [r7, #88]	; 0x58
 800651e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006522:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800652a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e3      	bne.n	80064f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	4618      	mov	r0, r3
 8006536:	f7fd faeb 	bl	8003b10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006542:	b29b      	uxth	r3, r3
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	b29b      	uxth	r3, r3
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f8c0 	bl	80066d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006550:	e099      	b.n	8006686 <HAL_UART_IRQHandler+0x50e>
 8006552:	bf00      	nop
 8006554:	08006949 	.word	0x08006949
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006560:	b29b      	uxth	r3, r3
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 808b 	beq.w	800668a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 8086 	beq.w	800668a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	330c      	adds	r3, #12
 8006584:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006594:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	330c      	adds	r3, #12
 800659e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065a2:	647a      	str	r2, [r7, #68]	; 0x44
 80065a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e3      	bne.n	800657e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3314      	adds	r3, #20
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	623b      	str	r3, [r7, #32]
   return(result);
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	f023 0301 	bic.w	r3, r3, #1
 80065cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3314      	adds	r3, #20
 80065d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065da:	633a      	str	r2, [r7, #48]	; 0x30
 80065dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e3      	bne.n	80065b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	330c      	adds	r3, #12
 8006602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	e853 3f00 	ldrex	r3, [r3]
 800660a:	60fb      	str	r3, [r7, #12]
   return(result);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0310 	bic.w	r3, r3, #16
 8006612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	330c      	adds	r3, #12
 800661c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006620:	61fa      	str	r2, [r7, #28]
 8006622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006624:	69b9      	ldr	r1, [r7, #24]
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	e841 2300 	strex	r3, r2, [r1]
 800662c:	617b      	str	r3, [r7, #20]
   return(result);
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1e3      	bne.n	80065fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f848 	bl	80066d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006640:	e023      	b.n	800668a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664a:	2b00      	cmp	r3, #0
 800664c:	d009      	beq.n	8006662 <HAL_UART_IRQHandler+0x4ea>
 800664e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f988 	bl	8006970 <UART_Transmit_IT>
    return;
 8006660:	e014      	b.n	800668c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00e      	beq.n	800668c <HAL_UART_IRQHandler+0x514>
 800666e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d008      	beq.n	800668c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f9c8 	bl	8006a10 <UART_EndTransmit_IT>
    return;
 8006680:	e004      	b.n	800668c <HAL_UART_IRQHandler+0x514>
    return;
 8006682:	bf00      	nop
 8006684:	e002      	b.n	800668c <HAL_UART_IRQHandler+0x514>
      return;
 8006686:	bf00      	nop
 8006688:	e000      	b.n	800668c <HAL_UART_IRQHandler+0x514>
      return;
 800668a:	bf00      	nop
  }
}
 800668c:	37e8      	adds	r7, #232	; 0xe8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop

08006694 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b090      	sub	sp, #64	; 0x40
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006700:	2b00      	cmp	r3, #0
 8006702:	d137      	bne.n	8006774 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006706:	2200      	movs	r2, #0
 8006708:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800670a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3314      	adds	r3, #20
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	623b      	str	r3, [r7, #32]
   return(result);
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006720:	63bb      	str	r3, [r7, #56]	; 0x38
 8006722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3314      	adds	r3, #20
 8006728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800672a:	633a      	str	r2, [r7, #48]	; 0x30
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e5      	bne.n	800670a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800673e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	330c      	adds	r3, #12
 8006744:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	60fb      	str	r3, [r7, #12]
   return(result);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006754:	637b      	str	r3, [r7, #52]	; 0x34
 8006756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	330c      	adds	r3, #12
 800675c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800675e:	61fa      	str	r2, [r7, #28]
 8006760:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	69b9      	ldr	r1, [r7, #24]
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	617b      	str	r3, [r7, #20]
   return(result);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1e5      	bne.n	800673e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006772:	e002      	b.n	800677a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006774:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006776:	f7fb fa79 	bl	8001c6c <HAL_UART_TxCpltCallback>
}
 800677a:	bf00      	nop
 800677c:	3740      	adds	r7, #64	; 0x40
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f7ff ff7f 	bl	8006694 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006796:	bf00      	nop
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ba:	2b80      	cmp	r3, #128	; 0x80
 80067bc:	bf0c      	ite	eq
 80067be:	2301      	moveq	r3, #1
 80067c0:	2300      	movne	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b21      	cmp	r3, #33	; 0x21
 80067d0:	d108      	bne.n	80067e4 <UART_DMAError+0x46>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d005      	beq.n	80067e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2200      	movs	r2, #0
 80067dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80067de:	68b8      	ldr	r0, [r7, #8]
 80067e0:	f000 f827 	bl	8006832 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ee:	2b40      	cmp	r3, #64	; 0x40
 80067f0:	bf0c      	ite	eq
 80067f2:	2301      	moveq	r3, #1
 80067f4:	2300      	movne	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b22      	cmp	r3, #34	; 0x22
 8006804:	d108      	bne.n	8006818 <UART_DMAError+0x7a>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d005      	beq.n	8006818 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2200      	movs	r2, #0
 8006810:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006812:	68b8      	ldr	r0, [r7, #8]
 8006814:	f000 f835 	bl	8006882 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	f043 0210 	orr.w	r2, r3, #16
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006824:	68b8      	ldr	r0, [r7, #8]
 8006826:	f7ff ff49 	bl	80066bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006832:	b480      	push	{r7}
 8006834:	b089      	sub	sp, #36	; 0x24
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	330c      	adds	r3, #12
 8006840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	60bb      	str	r3, [r7, #8]
   return(result);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006850:	61fb      	str	r3, [r7, #28]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	330c      	adds	r3, #12
 8006858:	69fa      	ldr	r2, [r7, #28]
 800685a:	61ba      	str	r2, [r7, #24]
 800685c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	6979      	ldr	r1, [r7, #20]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	613b      	str	r3, [r7, #16]
   return(result);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e5      	bne.n	800683a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006876:	bf00      	nop
 8006878:	3724      	adds	r7, #36	; 0x24
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006882:	b480      	push	{r7}
 8006884:	b095      	sub	sp, #84	; 0x54
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	330c      	adds	r3, #12
 8006890:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006894:	e853 3f00 	ldrex	r3, [r3]
 8006898:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	330c      	adds	r3, #12
 80068a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068aa:	643a      	str	r2, [r7, #64]	; 0x40
 80068ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068b2:	e841 2300 	strex	r3, r2, [r1]
 80068b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1e5      	bne.n	800688a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3314      	adds	r3, #20
 80068c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	e853 3f00 	ldrex	r3, [r3]
 80068cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3314      	adds	r3, #20
 80068dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068e6:	e841 2300 	strex	r3, r2, [r1]
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1e5      	bne.n	80068be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d119      	bne.n	800692e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	330c      	adds	r3, #12
 8006900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	60bb      	str	r3, [r7, #8]
   return(result);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f023 0310 	bic.w	r3, r3, #16
 8006910:	647b      	str	r3, [r7, #68]	; 0x44
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	330c      	adds	r3, #12
 8006918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800691a:	61ba      	str	r2, [r7, #24]
 800691c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	6979      	ldr	r1, [r7, #20]
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	613b      	str	r3, [r7, #16]
   return(result);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e5      	bne.n	80068fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800693c:	bf00      	nop
 800693e:	3754      	adds	r7, #84	; 0x54
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7ff feaa 	bl	80066bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b21      	cmp	r3, #33	; 0x21
 8006982:	d13e      	bne.n	8006a02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800698c:	d114      	bne.n	80069b8 <UART_Transmit_IT+0x48>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d110      	bne.n	80069b8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	1c9a      	adds	r2, r3, #2
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	621a      	str	r2, [r3, #32]
 80069b6:	e008      	b.n	80069ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	1c59      	adds	r1, r3, #1
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6211      	str	r1, [r2, #32]
 80069c2:	781a      	ldrb	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	4619      	mov	r1, r3
 80069d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10f      	bne.n	80069fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	e000      	b.n	8006a04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a02:	2302      	movs	r3, #2
  }
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7fb f91b 	bl	8001c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08c      	sub	sp, #48	; 0x30
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b22      	cmp	r3, #34	; 0x22
 8006a52:	f040 80ab 	bne.w	8006bac <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5e:	d117      	bne.n	8006a90 <UART_Receive_IT+0x50>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d113      	bne.n	8006a90 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	1c9a      	adds	r2, r3, #2
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	629a      	str	r2, [r3, #40]	; 0x28
 8006a8e:	e026      	b.n	8006ade <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa2:	d007      	beq.n	8006ab4 <UART_Receive_IT+0x74>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <UART_Receive_IT+0x82>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d106      	bne.n	8006ac2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	e008      	b.n	8006ad4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	4619      	mov	r1, r3
 8006aec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d15a      	bne.n	8006ba8 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0220 	bic.w	r2, r2, #32
 8006b00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	695a      	ldr	r2, [r3, #20]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0201 	bic.w	r2, r2, #1
 8006b20:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d135      	bne.n	8006b9e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	613b      	str	r3, [r7, #16]
   return(result);
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f023 0310 	bic.w	r3, r3, #16
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b58:	623a      	str	r2, [r7, #32]
 8006b5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	69f9      	ldr	r1, [r7, #28]
 8006b5e:	6a3a      	ldr	r2, [r7, #32]
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e5      	bne.n	8006b38 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0310 	and.w	r3, r3, #16
 8006b76:	2b10      	cmp	r3, #16
 8006b78:	d10a      	bne.n	8006b90 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff fd9a 	bl	80066d0 <HAL_UARTEx_RxEventCallback>
 8006b9c:	e002      	b.n	8006ba4 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7ff fd82 	bl	80066a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e002      	b.n	8006bae <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e000      	b.n	8006bae <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006bac:	2302      	movs	r3, #2
  }
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3730      	adds	r7, #48	; 0x30
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	b09f      	sub	sp, #124	; 0x7c
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bce:	68d9      	ldr	r1, [r3, #12]
 8006bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	ea40 0301 	orr.w	r3, r0, r1
 8006bd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	431a      	orrs	r2, r3
 8006bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006bfc:	f021 010c 	bic.w	r1, r1, #12
 8006c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c06:	430b      	orrs	r3, r1
 8006c08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c16:	6999      	ldr	r1, [r3, #24]
 8006c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	ea40 0301 	orr.w	r3, r0, r1
 8006c20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4bc5      	ldr	r3, [pc, #788]	; (8006f3c <UART_SetConfig+0x384>)
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d004      	beq.n	8006c36 <UART_SetConfig+0x7e>
 8006c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	4bc3      	ldr	r3, [pc, #780]	; (8006f40 <UART_SetConfig+0x388>)
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d103      	bne.n	8006c3e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c36:	f7fd fd33 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 8006c3a:	6778      	str	r0, [r7, #116]	; 0x74
 8006c3c:	e002      	b.n	8006c44 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c3e:	f7fd fd1b 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 8006c42:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c4c:	f040 80b6 	bne.w	8006dbc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c52:	461c      	mov	r4, r3
 8006c54:	f04f 0500 	mov.w	r5, #0
 8006c58:	4622      	mov	r2, r4
 8006c5a:	462b      	mov	r3, r5
 8006c5c:	1891      	adds	r1, r2, r2
 8006c5e:	6439      	str	r1, [r7, #64]	; 0x40
 8006c60:	415b      	adcs	r3, r3
 8006c62:	647b      	str	r3, [r7, #68]	; 0x44
 8006c64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c68:	1912      	adds	r2, r2, r4
 8006c6a:	eb45 0303 	adc.w	r3, r5, r3
 8006c6e:	f04f 0000 	mov.w	r0, #0
 8006c72:	f04f 0100 	mov.w	r1, #0
 8006c76:	00d9      	lsls	r1, r3, #3
 8006c78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c7c:	00d0      	lsls	r0, r2, #3
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	1911      	adds	r1, r2, r4
 8006c84:	6639      	str	r1, [r7, #96]	; 0x60
 8006c86:	416b      	adcs	r3, r5
 8006c88:	667b      	str	r3, [r7, #100]	; 0x64
 8006c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	1891      	adds	r1, r2, r2
 8006c96:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c98:	415b      	adcs	r3, r3
 8006c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ca0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006ca4:	f7f9 ff2e 	bl	8000b04 <__aeabi_uldivmod>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4ba5      	ldr	r3, [pc, #660]	; (8006f44 <UART_SetConfig+0x38c>)
 8006cae:	fba3 2302 	umull	r2, r3, r3, r2
 8006cb2:	095b      	lsrs	r3, r3, #5
 8006cb4:	011e      	lsls	r6, r3, #4
 8006cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb8:	461c      	mov	r4, r3
 8006cba:	f04f 0500 	mov.w	r5, #0
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	1891      	adds	r1, r2, r2
 8006cc4:	6339      	str	r1, [r7, #48]	; 0x30
 8006cc6:	415b      	adcs	r3, r3
 8006cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8006cca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006cce:	1912      	adds	r2, r2, r4
 8006cd0:	eb45 0303 	adc.w	r3, r5, r3
 8006cd4:	f04f 0000 	mov.w	r0, #0
 8006cd8:	f04f 0100 	mov.w	r1, #0
 8006cdc:	00d9      	lsls	r1, r3, #3
 8006cde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ce2:	00d0      	lsls	r0, r2, #3
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	1911      	adds	r1, r2, r4
 8006cea:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cec:	416b      	adcs	r3, r5
 8006cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	1891      	adds	r1, r2, r2
 8006cfc:	62b9      	str	r1, [r7, #40]	; 0x28
 8006cfe:	415b      	adcs	r3, r3
 8006d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d0a:	f7f9 fefb 	bl	8000b04 <__aeabi_uldivmod>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4b8c      	ldr	r3, [pc, #560]	; (8006f44 <UART_SetConfig+0x38c>)
 8006d14:	fba3 1302 	umull	r1, r3, r3, r2
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	2164      	movs	r1, #100	; 0x64
 8006d1c:	fb01 f303 	mul.w	r3, r1, r3
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	3332      	adds	r3, #50	; 0x32
 8006d26:	4a87      	ldr	r2, [pc, #540]	; (8006f44 <UART_SetConfig+0x38c>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d34:	441e      	add	r6, r3
 8006d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f04f 0100 	mov.w	r1, #0
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	1894      	adds	r4, r2, r2
 8006d44:	623c      	str	r4, [r7, #32]
 8006d46:	415b      	adcs	r3, r3
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
 8006d4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d4e:	1812      	adds	r2, r2, r0
 8006d50:	eb41 0303 	adc.w	r3, r1, r3
 8006d54:	f04f 0400 	mov.w	r4, #0
 8006d58:	f04f 0500 	mov.w	r5, #0
 8006d5c:	00dd      	lsls	r5, r3, #3
 8006d5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d62:	00d4      	lsls	r4, r2, #3
 8006d64:	4622      	mov	r2, r4
 8006d66:	462b      	mov	r3, r5
 8006d68:	1814      	adds	r4, r2, r0
 8006d6a:	653c      	str	r4, [r7, #80]	; 0x50
 8006d6c:	414b      	adcs	r3, r1
 8006d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	461a      	mov	r2, r3
 8006d76:	f04f 0300 	mov.w	r3, #0
 8006d7a:	1891      	adds	r1, r2, r2
 8006d7c:	61b9      	str	r1, [r7, #24]
 8006d7e:	415b      	adcs	r3, r3
 8006d80:	61fb      	str	r3, [r7, #28]
 8006d82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006d8a:	f7f9 febb 	bl	8000b04 <__aeabi_uldivmod>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	4b6c      	ldr	r3, [pc, #432]	; (8006f44 <UART_SetConfig+0x38c>)
 8006d94:	fba3 1302 	umull	r1, r3, r3, r2
 8006d98:	095b      	lsrs	r3, r3, #5
 8006d9a:	2164      	movs	r1, #100	; 0x64
 8006d9c:	fb01 f303 	mul.w	r3, r1, r3
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	3332      	adds	r3, #50	; 0x32
 8006da6:	4a67      	ldr	r2, [pc, #412]	; (8006f44 <UART_SetConfig+0x38c>)
 8006da8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dac:	095b      	lsrs	r3, r3, #5
 8006dae:	f003 0207 	and.w	r2, r3, #7
 8006db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4432      	add	r2, r6
 8006db8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dba:	e0b9      	b.n	8006f30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dbe:	461c      	mov	r4, r3
 8006dc0:	f04f 0500 	mov.w	r5, #0
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	462b      	mov	r3, r5
 8006dc8:	1891      	adds	r1, r2, r2
 8006dca:	6139      	str	r1, [r7, #16]
 8006dcc:	415b      	adcs	r3, r3
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006dd4:	1912      	adds	r2, r2, r4
 8006dd6:	eb45 0303 	adc.w	r3, r5, r3
 8006dda:	f04f 0000 	mov.w	r0, #0
 8006dde:	f04f 0100 	mov.w	r1, #0
 8006de2:	00d9      	lsls	r1, r3, #3
 8006de4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006de8:	00d0      	lsls	r0, r2, #3
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	eb12 0804 	adds.w	r8, r2, r4
 8006df2:	eb43 0905 	adc.w	r9, r3, r5
 8006df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f04f 0100 	mov.w	r1, #0
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	f04f 0300 	mov.w	r3, #0
 8006e08:	008b      	lsls	r3, r1, #2
 8006e0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e0e:	0082      	lsls	r2, r0, #2
 8006e10:	4640      	mov	r0, r8
 8006e12:	4649      	mov	r1, r9
 8006e14:	f7f9 fe76 	bl	8000b04 <__aeabi_uldivmod>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4b49      	ldr	r3, [pc, #292]	; (8006f44 <UART_SetConfig+0x38c>)
 8006e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	011e      	lsls	r6, r3, #4
 8006e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f04f 0100 	mov.w	r1, #0
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	1894      	adds	r4, r2, r2
 8006e34:	60bc      	str	r4, [r7, #8]
 8006e36:	415b      	adcs	r3, r3
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e3e:	1812      	adds	r2, r2, r0
 8006e40:	eb41 0303 	adc.w	r3, r1, r3
 8006e44:	f04f 0400 	mov.w	r4, #0
 8006e48:	f04f 0500 	mov.w	r5, #0
 8006e4c:	00dd      	lsls	r5, r3, #3
 8006e4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e52:	00d4      	lsls	r4, r2, #3
 8006e54:	4622      	mov	r2, r4
 8006e56:	462b      	mov	r3, r5
 8006e58:	1814      	adds	r4, r2, r0
 8006e5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006e5c:	414b      	adcs	r3, r1
 8006e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f04f 0100 	mov.w	r1, #0
 8006e6a:	f04f 0200 	mov.w	r2, #0
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	008b      	lsls	r3, r1, #2
 8006e74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e78:	0082      	lsls	r2, r0, #2
 8006e7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006e7e:	f7f9 fe41 	bl	8000b04 <__aeabi_uldivmod>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4b2f      	ldr	r3, [pc, #188]	; (8006f44 <UART_SetConfig+0x38c>)
 8006e88:	fba3 1302 	umull	r1, r3, r3, r2
 8006e8c:	095b      	lsrs	r3, r3, #5
 8006e8e:	2164      	movs	r1, #100	; 0x64
 8006e90:	fb01 f303 	mul.w	r3, r1, r3
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	3332      	adds	r3, #50	; 0x32
 8006e9a:	4a2a      	ldr	r2, [pc, #168]	; (8006f44 <UART_SetConfig+0x38c>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ea6:	441e      	add	r6, r3
 8006ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f04f 0100 	mov.w	r1, #0
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	1894      	adds	r4, r2, r2
 8006eb6:	603c      	str	r4, [r7, #0]
 8006eb8:	415b      	adcs	r3, r3
 8006eba:	607b      	str	r3, [r7, #4]
 8006ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ec0:	1812      	adds	r2, r2, r0
 8006ec2:	eb41 0303 	adc.w	r3, r1, r3
 8006ec6:	f04f 0400 	mov.w	r4, #0
 8006eca:	f04f 0500 	mov.w	r5, #0
 8006ece:	00dd      	lsls	r5, r3, #3
 8006ed0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ed4:	00d4      	lsls	r4, r2, #3
 8006ed6:	4622      	mov	r2, r4
 8006ed8:	462b      	mov	r3, r5
 8006eda:	eb12 0a00 	adds.w	sl, r2, r0
 8006ede:	eb43 0b01 	adc.w	fp, r3, r1
 8006ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f04f 0100 	mov.w	r1, #0
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	008b      	lsls	r3, r1, #2
 8006ef6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006efa:	0082      	lsls	r2, r0, #2
 8006efc:	4650      	mov	r0, sl
 8006efe:	4659      	mov	r1, fp
 8006f00:	f7f9 fe00 	bl	8000b04 <__aeabi_uldivmod>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4b0e      	ldr	r3, [pc, #56]	; (8006f44 <UART_SetConfig+0x38c>)
 8006f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f0e:	095b      	lsrs	r3, r3, #5
 8006f10:	2164      	movs	r1, #100	; 0x64
 8006f12:	fb01 f303 	mul.w	r3, r1, r3
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	011b      	lsls	r3, r3, #4
 8006f1a:	3332      	adds	r3, #50	; 0x32
 8006f1c:	4a09      	ldr	r2, [pc, #36]	; (8006f44 <UART_SetConfig+0x38c>)
 8006f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	f003 020f 	and.w	r2, r3, #15
 8006f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4432      	add	r2, r6
 8006f2e:	609a      	str	r2, [r3, #8]
}
 8006f30:	bf00      	nop
 8006f32:	377c      	adds	r7, #124	; 0x7c
 8006f34:	46bd      	mov	sp, r7
 8006f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3a:	bf00      	nop
 8006f3c:	40011000 	.word	0x40011000
 8006f40:	40011400 	.word	0x40011400
 8006f44:	51eb851f 	.word	0x51eb851f

08006f48 <__errno>:
 8006f48:	4b01      	ldr	r3, [pc, #4]	; (8006f50 <__errno+0x8>)
 8006f4a:	6818      	ldr	r0, [r3, #0]
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	20000024 	.word	0x20000024

08006f54 <__libc_init_array>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	4d0d      	ldr	r5, [pc, #52]	; (8006f8c <__libc_init_array+0x38>)
 8006f58:	4c0d      	ldr	r4, [pc, #52]	; (8006f90 <__libc_init_array+0x3c>)
 8006f5a:	1b64      	subs	r4, r4, r5
 8006f5c:	10a4      	asrs	r4, r4, #2
 8006f5e:	2600      	movs	r6, #0
 8006f60:	42a6      	cmp	r6, r4
 8006f62:	d109      	bne.n	8006f78 <__libc_init_array+0x24>
 8006f64:	4d0b      	ldr	r5, [pc, #44]	; (8006f94 <__libc_init_array+0x40>)
 8006f66:	4c0c      	ldr	r4, [pc, #48]	; (8006f98 <__libc_init_array+0x44>)
 8006f68:	f001 fa2c 	bl	80083c4 <_init>
 8006f6c:	1b64      	subs	r4, r4, r5
 8006f6e:	10a4      	asrs	r4, r4, #2
 8006f70:	2600      	movs	r6, #0
 8006f72:	42a6      	cmp	r6, r4
 8006f74:	d105      	bne.n	8006f82 <__libc_init_array+0x2e>
 8006f76:	bd70      	pop	{r4, r5, r6, pc}
 8006f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7c:	4798      	blx	r3
 8006f7e:	3601      	adds	r6, #1
 8006f80:	e7ee      	b.n	8006f60 <__libc_init_array+0xc>
 8006f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f86:	4798      	blx	r3
 8006f88:	3601      	adds	r6, #1
 8006f8a:	e7f2      	b.n	8006f72 <__libc_init_array+0x1e>
 8006f8c:	08008660 	.word	0x08008660
 8006f90:	08008660 	.word	0x08008660
 8006f94:	08008660 	.word	0x08008660
 8006f98:	08008664 	.word	0x08008664

08006f9c <memset>:
 8006f9c:	4402      	add	r2, r0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d100      	bne.n	8006fa6 <memset+0xa>
 8006fa4:	4770      	bx	lr
 8006fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8006faa:	e7f9      	b.n	8006fa0 <memset+0x4>
 8006fac:	0000      	movs	r0, r0
	...

08006fb0 <cos>:
 8006fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fb2:	ec53 2b10 	vmov	r2, r3, d0
 8006fb6:	4824      	ldr	r0, [pc, #144]	; (8007048 <cos+0x98>)
 8006fb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006fbc:	4281      	cmp	r1, r0
 8006fbe:	dc06      	bgt.n	8006fce <cos+0x1e>
 8006fc0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007040 <cos+0x90>
 8006fc4:	f000 fc1c 	bl	8007800 <__kernel_cos>
 8006fc8:	ec51 0b10 	vmov	r0, r1, d0
 8006fcc:	e007      	b.n	8006fde <cos+0x2e>
 8006fce:	481f      	ldr	r0, [pc, #124]	; (800704c <cos+0x9c>)
 8006fd0:	4281      	cmp	r1, r0
 8006fd2:	dd09      	ble.n	8006fe8 <cos+0x38>
 8006fd4:	ee10 0a10 	vmov	r0, s0
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f7f9 f919 	bl	8000210 <__aeabi_dsub>
 8006fde:	ec41 0b10 	vmov	d0, r0, r1
 8006fe2:	b005      	add	sp, #20
 8006fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fe8:	4668      	mov	r0, sp
 8006fea:	f000 f9fd 	bl	80073e8 <__ieee754_rem_pio2>
 8006fee:	f000 0003 	and.w	r0, r0, #3
 8006ff2:	2801      	cmp	r0, #1
 8006ff4:	d007      	beq.n	8007006 <cos+0x56>
 8006ff6:	2802      	cmp	r0, #2
 8006ff8:	d012      	beq.n	8007020 <cos+0x70>
 8006ffa:	b9c0      	cbnz	r0, 800702e <cos+0x7e>
 8006ffc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007000:	ed9d 0b00 	vldr	d0, [sp]
 8007004:	e7de      	b.n	8006fc4 <cos+0x14>
 8007006:	ed9d 1b02 	vldr	d1, [sp, #8]
 800700a:	ed9d 0b00 	vldr	d0, [sp]
 800700e:	f000 ffff 	bl	8008010 <__kernel_sin>
 8007012:	ec53 2b10 	vmov	r2, r3, d0
 8007016:	ee10 0a10 	vmov	r0, s0
 800701a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800701e:	e7de      	b.n	8006fde <cos+0x2e>
 8007020:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007024:	ed9d 0b00 	vldr	d0, [sp]
 8007028:	f000 fbea 	bl	8007800 <__kernel_cos>
 800702c:	e7f1      	b.n	8007012 <cos+0x62>
 800702e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007032:	ed9d 0b00 	vldr	d0, [sp]
 8007036:	2001      	movs	r0, #1
 8007038:	f000 ffea 	bl	8008010 <__kernel_sin>
 800703c:	e7c4      	b.n	8006fc8 <cos+0x18>
 800703e:	bf00      	nop
	...
 8007048:	3fe921fb 	.word	0x3fe921fb
 800704c:	7fefffff 	.word	0x7fefffff

08007050 <exp>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	ed2d 8b02 	vpush	{d8}
 8007056:	ec55 4b10 	vmov	r4, r5, d0
 800705a:	f000 f849 	bl	80070f0 <__ieee754_exp>
 800705e:	4b22      	ldr	r3, [pc, #136]	; (80070e8 <exp+0x98>)
 8007060:	eeb0 8a40 	vmov.f32	s16, s0
 8007064:	eef0 8a60 	vmov.f32	s17, s1
 8007068:	f993 3000 	ldrsb.w	r3, [r3]
 800706c:	3301      	adds	r3, #1
 800706e:	d012      	beq.n	8007096 <exp+0x46>
 8007070:	ec45 4b10 	vmov	d0, r4, r5
 8007074:	f001 f893 	bl	800819e <finite>
 8007078:	b168      	cbz	r0, 8007096 <exp+0x46>
 800707a:	a313      	add	r3, pc, #76	; (adr r3, 80070c8 <exp+0x78>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	4620      	mov	r0, r4
 8007082:	4629      	mov	r1, r5
 8007084:	f7f9 fd0c 	bl	8000aa0 <__aeabi_dcmpgt>
 8007088:	b160      	cbz	r0, 80070a4 <exp+0x54>
 800708a:	f7ff ff5d 	bl	8006f48 <__errno>
 800708e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 80070d0 <exp+0x80>
 8007092:	2322      	movs	r3, #34	; 0x22
 8007094:	6003      	str	r3, [r0, #0]
 8007096:	eeb0 0a48 	vmov.f32	s0, s16
 800709a:	eef0 0a68 	vmov.f32	s1, s17
 800709e:	ecbd 8b02 	vpop	{d8}
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	a30c      	add	r3, pc, #48	; (adr r3, 80070d8 <exp+0x88>)
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	4620      	mov	r0, r4
 80070ac:	4629      	mov	r1, r5
 80070ae:	f7f9 fcd9 	bl	8000a64 <__aeabi_dcmplt>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d0ef      	beq.n	8007096 <exp+0x46>
 80070b6:	f7ff ff47 	bl	8006f48 <__errno>
 80070ba:	2322      	movs	r3, #34	; 0x22
 80070bc:	ed9f 8b08 	vldr	d8, [pc, #32]	; 80070e0 <exp+0x90>
 80070c0:	6003      	str	r3, [r0, #0]
 80070c2:	e7e8      	b.n	8007096 <exp+0x46>
 80070c4:	f3af 8000 	nop.w
 80070c8:	fefa39ef 	.word	0xfefa39ef
 80070cc:	40862e42 	.word	0x40862e42
 80070d0:	00000000 	.word	0x00000000
 80070d4:	7ff00000 	.word	0x7ff00000
 80070d8:	d52d3051 	.word	0xd52d3051
 80070dc:	c0874910 	.word	0xc0874910
	...
 80070e8:	20000088 	.word	0x20000088
 80070ec:	00000000 	.word	0x00000000

080070f0 <__ieee754_exp>:
 80070f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f4:	ec55 4b10 	vmov	r4, r5, d0
 80070f8:	49b1      	ldr	r1, [pc, #708]	; (80073c0 <__ieee754_exp+0x2d0>)
 80070fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80070fe:	428b      	cmp	r3, r1
 8007100:	ed2d 8b04 	vpush	{d8-d9}
 8007104:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8007108:	d937      	bls.n	800717a <__ieee754_exp+0x8a>
 800710a:	49ae      	ldr	r1, [pc, #696]	; (80073c4 <__ieee754_exp+0x2d4>)
 800710c:	428b      	cmp	r3, r1
 800710e:	d916      	bls.n	800713e <__ieee754_exp+0x4e>
 8007110:	ee10 3a10 	vmov	r3, s0
 8007114:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8007118:	4313      	orrs	r3, r2
 800711a:	d009      	beq.n	8007130 <__ieee754_exp+0x40>
 800711c:	ee10 2a10 	vmov	r2, s0
 8007120:	462b      	mov	r3, r5
 8007122:	4620      	mov	r0, r4
 8007124:	4629      	mov	r1, r5
 8007126:	f7f9 f875 	bl	8000214 <__adddf3>
 800712a:	4604      	mov	r4, r0
 800712c:	460d      	mov	r5, r1
 800712e:	e000      	b.n	8007132 <__ieee754_exp+0x42>
 8007130:	bb06      	cbnz	r6, 8007174 <__ieee754_exp+0x84>
 8007132:	ecbd 8b04 	vpop	{d8-d9}
 8007136:	ec45 4b10 	vmov	d0, r4, r5
 800713a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713e:	a38a      	add	r3, pc, #552	; (adr r3, 8007368 <__ieee754_exp+0x278>)
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	ee10 0a10 	vmov	r0, s0
 8007148:	4629      	mov	r1, r5
 800714a:	f7f9 fca9 	bl	8000aa0 <__aeabi_dcmpgt>
 800714e:	b138      	cbz	r0, 8007160 <__ieee754_exp+0x70>
 8007150:	a387      	add	r3, pc, #540	; (adr r3, 8007370 <__ieee754_exp+0x280>)
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	4610      	mov	r0, r2
 8007158:	4619      	mov	r1, r3
 800715a:	f7f9 fa11 	bl	8000580 <__aeabi_dmul>
 800715e:	e7e4      	b.n	800712a <__ieee754_exp+0x3a>
 8007160:	a385      	add	r3, pc, #532	; (adr r3, 8007378 <__ieee754_exp+0x288>)
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	4620      	mov	r0, r4
 8007168:	4629      	mov	r1, r5
 800716a:	f7f9 fc7b 	bl	8000a64 <__aeabi_dcmplt>
 800716e:	2800      	cmp	r0, #0
 8007170:	f000 8087 	beq.w	8007282 <__ieee754_exp+0x192>
 8007174:	2400      	movs	r4, #0
 8007176:	2500      	movs	r5, #0
 8007178:	e7db      	b.n	8007132 <__ieee754_exp+0x42>
 800717a:	4a93      	ldr	r2, [pc, #588]	; (80073c8 <__ieee754_exp+0x2d8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	f240 80ac 	bls.w	80072da <__ieee754_exp+0x1ea>
 8007182:	4a92      	ldr	r2, [pc, #584]	; (80073cc <__ieee754_exp+0x2dc>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d87c      	bhi.n	8007282 <__ieee754_exp+0x192>
 8007188:	4b91      	ldr	r3, [pc, #580]	; (80073d0 <__ieee754_exp+0x2e0>)
 800718a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	ee10 0a10 	vmov	r0, s0
 8007196:	4629      	mov	r1, r5
 8007198:	f7f9 f83a 	bl	8000210 <__aeabi_dsub>
 800719c:	4b8d      	ldr	r3, [pc, #564]	; (80073d4 <__ieee754_exp+0x2e4>)
 800719e:	00f7      	lsls	r7, r6, #3
 80071a0:	443b      	add	r3, r7
 80071a2:	ed93 7b00 	vldr	d7, [r3]
 80071a6:	f1c6 0a01 	rsb	sl, r6, #1
 80071aa:	4680      	mov	r8, r0
 80071ac:	4689      	mov	r9, r1
 80071ae:	ebaa 0a06 	sub.w	sl, sl, r6
 80071b2:	eeb0 8a47 	vmov.f32	s16, s14
 80071b6:	eef0 8a67 	vmov.f32	s17, s15
 80071ba:	ec53 2b18 	vmov	r2, r3, d8
 80071be:	4640      	mov	r0, r8
 80071c0:	4649      	mov	r1, r9
 80071c2:	f7f9 f825 	bl	8000210 <__aeabi_dsub>
 80071c6:	4604      	mov	r4, r0
 80071c8:	460d      	mov	r5, r1
 80071ca:	4622      	mov	r2, r4
 80071cc:	462b      	mov	r3, r5
 80071ce:	4620      	mov	r0, r4
 80071d0:	4629      	mov	r1, r5
 80071d2:	f7f9 f9d5 	bl	8000580 <__aeabi_dmul>
 80071d6:	a36a      	add	r3, pc, #424	; (adr r3, 8007380 <__ieee754_exp+0x290>)
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	4606      	mov	r6, r0
 80071de:	460f      	mov	r7, r1
 80071e0:	f7f9 f9ce 	bl	8000580 <__aeabi_dmul>
 80071e4:	a368      	add	r3, pc, #416	; (adr r3, 8007388 <__ieee754_exp+0x298>)
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	f7f9 f811 	bl	8000210 <__aeabi_dsub>
 80071ee:	4632      	mov	r2, r6
 80071f0:	463b      	mov	r3, r7
 80071f2:	f7f9 f9c5 	bl	8000580 <__aeabi_dmul>
 80071f6:	a366      	add	r3, pc, #408	; (adr r3, 8007390 <__ieee754_exp+0x2a0>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	f7f9 f80a 	bl	8000214 <__adddf3>
 8007200:	4632      	mov	r2, r6
 8007202:	463b      	mov	r3, r7
 8007204:	f7f9 f9bc 	bl	8000580 <__aeabi_dmul>
 8007208:	a363      	add	r3, pc, #396	; (adr r3, 8007398 <__ieee754_exp+0x2a8>)
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	f7f8 ffff 	bl	8000210 <__aeabi_dsub>
 8007212:	4632      	mov	r2, r6
 8007214:	463b      	mov	r3, r7
 8007216:	f7f9 f9b3 	bl	8000580 <__aeabi_dmul>
 800721a:	a361      	add	r3, pc, #388	; (adr r3, 80073a0 <__ieee754_exp+0x2b0>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f7f8 fff8 	bl	8000214 <__adddf3>
 8007224:	4632      	mov	r2, r6
 8007226:	463b      	mov	r3, r7
 8007228:	f7f9 f9aa 	bl	8000580 <__aeabi_dmul>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4620      	mov	r0, r4
 8007232:	4629      	mov	r1, r5
 8007234:	f7f8 ffec 	bl	8000210 <__aeabi_dsub>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4606      	mov	r6, r0
 800723e:	460f      	mov	r7, r1
 8007240:	4620      	mov	r0, r4
 8007242:	4629      	mov	r1, r5
 8007244:	f7f9 f99c 	bl	8000580 <__aeabi_dmul>
 8007248:	ec41 0b19 	vmov	d9, r0, r1
 800724c:	f1ba 0f00 	cmp.w	sl, #0
 8007250:	d15d      	bne.n	800730e <__ieee754_exp+0x21e>
 8007252:	2200      	movs	r2, #0
 8007254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007258:	4630      	mov	r0, r6
 800725a:	4639      	mov	r1, r7
 800725c:	f7f8 ffd8 	bl	8000210 <__aeabi_dsub>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	ec51 0b19 	vmov	r0, r1, d9
 8007268:	f7f9 fab4 	bl	80007d4 <__aeabi_ddiv>
 800726c:	4622      	mov	r2, r4
 800726e:	462b      	mov	r3, r5
 8007270:	f7f8 ffce 	bl	8000210 <__aeabi_dsub>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	2000      	movs	r0, #0
 800727a:	4957      	ldr	r1, [pc, #348]	; (80073d8 <__ieee754_exp+0x2e8>)
 800727c:	f7f8 ffc8 	bl	8000210 <__aeabi_dsub>
 8007280:	e753      	b.n	800712a <__ieee754_exp+0x3a>
 8007282:	4856      	ldr	r0, [pc, #344]	; (80073dc <__ieee754_exp+0x2ec>)
 8007284:	a348      	add	r3, pc, #288	; (adr r3, 80073a8 <__ieee754_exp+0x2b8>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800728e:	4629      	mov	r1, r5
 8007290:	4620      	mov	r0, r4
 8007292:	f7f9 f975 	bl	8000580 <__aeabi_dmul>
 8007296:	e9d6 2300 	ldrd	r2, r3, [r6]
 800729a:	f7f8 ffbb 	bl	8000214 <__adddf3>
 800729e:	f7f9 fc09 	bl	8000ab4 <__aeabi_d2iz>
 80072a2:	4682      	mov	sl, r0
 80072a4:	f7f9 f902 	bl	80004ac <__aeabi_i2d>
 80072a8:	a341      	add	r3, pc, #260	; (adr r3, 80073b0 <__ieee754_exp+0x2c0>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	4606      	mov	r6, r0
 80072b0:	460f      	mov	r7, r1
 80072b2:	f7f9 f965 	bl	8000580 <__aeabi_dmul>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4620      	mov	r0, r4
 80072bc:	4629      	mov	r1, r5
 80072be:	f7f8 ffa7 	bl	8000210 <__aeabi_dsub>
 80072c2:	a33d      	add	r3, pc, #244	; (adr r3, 80073b8 <__ieee754_exp+0x2c8>)
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	4680      	mov	r8, r0
 80072ca:	4689      	mov	r9, r1
 80072cc:	4630      	mov	r0, r6
 80072ce:	4639      	mov	r1, r7
 80072d0:	f7f9 f956 	bl	8000580 <__aeabi_dmul>
 80072d4:	ec41 0b18 	vmov	d8, r0, r1
 80072d8:	e76f      	b.n	80071ba <__ieee754_exp+0xca>
 80072da:	4a41      	ldr	r2, [pc, #260]	; (80073e0 <__ieee754_exp+0x2f0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d811      	bhi.n	8007304 <__ieee754_exp+0x214>
 80072e0:	a323      	add	r3, pc, #140	; (adr r3, 8007370 <__ieee754_exp+0x280>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	ee10 0a10 	vmov	r0, s0
 80072ea:	4629      	mov	r1, r5
 80072ec:	f7f8 ff92 	bl	8000214 <__adddf3>
 80072f0:	4b39      	ldr	r3, [pc, #228]	; (80073d8 <__ieee754_exp+0x2e8>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	f7f9 fbd4 	bl	8000aa0 <__aeabi_dcmpgt>
 80072f8:	b138      	cbz	r0, 800730a <__ieee754_exp+0x21a>
 80072fa:	4b37      	ldr	r3, [pc, #220]	; (80073d8 <__ieee754_exp+0x2e8>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	4620      	mov	r0, r4
 8007300:	4629      	mov	r1, r5
 8007302:	e710      	b.n	8007126 <__ieee754_exp+0x36>
 8007304:	f04f 0a00 	mov.w	sl, #0
 8007308:	e75f      	b.n	80071ca <__ieee754_exp+0xda>
 800730a:	4682      	mov	sl, r0
 800730c:	e75d      	b.n	80071ca <__ieee754_exp+0xda>
 800730e:	4632      	mov	r2, r6
 8007310:	463b      	mov	r3, r7
 8007312:	2000      	movs	r0, #0
 8007314:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007318:	f7f8 ff7a 	bl	8000210 <__aeabi_dsub>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	ec51 0b19 	vmov	r0, r1, d9
 8007324:	f7f9 fa56 	bl	80007d4 <__aeabi_ddiv>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	ec51 0b18 	vmov	r0, r1, d8
 8007330:	f7f8 ff6e 	bl	8000210 <__aeabi_dsub>
 8007334:	4642      	mov	r2, r8
 8007336:	464b      	mov	r3, r9
 8007338:	f7f8 ff6a 	bl	8000210 <__aeabi_dsub>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	2000      	movs	r0, #0
 8007342:	4925      	ldr	r1, [pc, #148]	; (80073d8 <__ieee754_exp+0x2e8>)
 8007344:	f7f8 ff64 	bl	8000210 <__aeabi_dsub>
 8007348:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800734c:	4592      	cmp	sl, r2
 800734e:	db02      	blt.n	8007356 <__ieee754_exp+0x266>
 8007350:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007354:	e6e9      	b.n	800712a <__ieee754_exp+0x3a>
 8007356:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800735a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800735e:	2200      	movs	r2, #0
 8007360:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8007364:	e6f9      	b.n	800715a <__ieee754_exp+0x6a>
 8007366:	bf00      	nop
 8007368:	fefa39ef 	.word	0xfefa39ef
 800736c:	40862e42 	.word	0x40862e42
 8007370:	8800759c 	.word	0x8800759c
 8007374:	7e37e43c 	.word	0x7e37e43c
 8007378:	d52d3051 	.word	0xd52d3051
 800737c:	c0874910 	.word	0xc0874910
 8007380:	72bea4d0 	.word	0x72bea4d0
 8007384:	3e663769 	.word	0x3e663769
 8007388:	c5d26bf1 	.word	0xc5d26bf1
 800738c:	3ebbbd41 	.word	0x3ebbbd41
 8007390:	af25de2c 	.word	0xaf25de2c
 8007394:	3f11566a 	.word	0x3f11566a
 8007398:	16bebd93 	.word	0x16bebd93
 800739c:	3f66c16c 	.word	0x3f66c16c
 80073a0:	5555553e 	.word	0x5555553e
 80073a4:	3fc55555 	.word	0x3fc55555
 80073a8:	652b82fe 	.word	0x652b82fe
 80073ac:	3ff71547 	.word	0x3ff71547
 80073b0:	fee00000 	.word	0xfee00000
 80073b4:	3fe62e42 	.word	0x3fe62e42
 80073b8:	35793c76 	.word	0x35793c76
 80073bc:	3dea39ef 	.word	0x3dea39ef
 80073c0:	40862e41 	.word	0x40862e41
 80073c4:	7fefffff 	.word	0x7fefffff
 80073c8:	3fd62e42 	.word	0x3fd62e42
 80073cc:	3ff0a2b1 	.word	0x3ff0a2b1
 80073d0:	08008460 	.word	0x08008460
 80073d4:	08008470 	.word	0x08008470
 80073d8:	3ff00000 	.word	0x3ff00000
 80073dc:	08008450 	.word	0x08008450
 80073e0:	3e2fffff 	.word	0x3e2fffff
 80073e4:	00000000 	.word	0x00000000

080073e8 <__ieee754_rem_pio2>:
 80073e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	ed2d 8b02 	vpush	{d8}
 80073f0:	ec55 4b10 	vmov	r4, r5, d0
 80073f4:	4bca      	ldr	r3, [pc, #808]	; (8007720 <__ieee754_rem_pio2+0x338>)
 80073f6:	b08b      	sub	sp, #44	; 0x2c
 80073f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80073fc:	4598      	cmp	r8, r3
 80073fe:	4682      	mov	sl, r0
 8007400:	9502      	str	r5, [sp, #8]
 8007402:	dc08      	bgt.n	8007416 <__ieee754_rem_pio2+0x2e>
 8007404:	2200      	movs	r2, #0
 8007406:	2300      	movs	r3, #0
 8007408:	ed80 0b00 	vstr	d0, [r0]
 800740c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007410:	f04f 0b00 	mov.w	fp, #0
 8007414:	e028      	b.n	8007468 <__ieee754_rem_pio2+0x80>
 8007416:	4bc3      	ldr	r3, [pc, #780]	; (8007724 <__ieee754_rem_pio2+0x33c>)
 8007418:	4598      	cmp	r8, r3
 800741a:	dc78      	bgt.n	800750e <__ieee754_rem_pio2+0x126>
 800741c:	9b02      	ldr	r3, [sp, #8]
 800741e:	4ec2      	ldr	r6, [pc, #776]	; (8007728 <__ieee754_rem_pio2+0x340>)
 8007420:	2b00      	cmp	r3, #0
 8007422:	ee10 0a10 	vmov	r0, s0
 8007426:	a3b0      	add	r3, pc, #704	; (adr r3, 80076e8 <__ieee754_rem_pio2+0x300>)
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	4629      	mov	r1, r5
 800742e:	dd39      	ble.n	80074a4 <__ieee754_rem_pio2+0xbc>
 8007430:	f7f8 feee 	bl	8000210 <__aeabi_dsub>
 8007434:	45b0      	cmp	r8, r6
 8007436:	4604      	mov	r4, r0
 8007438:	460d      	mov	r5, r1
 800743a:	d01b      	beq.n	8007474 <__ieee754_rem_pio2+0x8c>
 800743c:	a3ac      	add	r3, pc, #688	; (adr r3, 80076f0 <__ieee754_rem_pio2+0x308>)
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f7f8 fee5 	bl	8000210 <__aeabi_dsub>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	e9ca 2300 	strd	r2, r3, [sl]
 800744e:	4620      	mov	r0, r4
 8007450:	4629      	mov	r1, r5
 8007452:	f7f8 fedd 	bl	8000210 <__aeabi_dsub>
 8007456:	a3a6      	add	r3, pc, #664	; (adr r3, 80076f0 <__ieee754_rem_pio2+0x308>)
 8007458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745c:	f7f8 fed8 	bl	8000210 <__aeabi_dsub>
 8007460:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007464:	f04f 0b01 	mov.w	fp, #1
 8007468:	4658      	mov	r0, fp
 800746a:	b00b      	add	sp, #44	; 0x2c
 800746c:	ecbd 8b02 	vpop	{d8}
 8007470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007474:	a3a0      	add	r3, pc, #640	; (adr r3, 80076f8 <__ieee754_rem_pio2+0x310>)
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	f7f8 fec9 	bl	8000210 <__aeabi_dsub>
 800747e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007700 <__ieee754_rem_pio2+0x318>)
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	4604      	mov	r4, r0
 8007486:	460d      	mov	r5, r1
 8007488:	f7f8 fec2 	bl	8000210 <__aeabi_dsub>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	e9ca 2300 	strd	r2, r3, [sl]
 8007494:	4620      	mov	r0, r4
 8007496:	4629      	mov	r1, r5
 8007498:	f7f8 feba 	bl	8000210 <__aeabi_dsub>
 800749c:	a398      	add	r3, pc, #608	; (adr r3, 8007700 <__ieee754_rem_pio2+0x318>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	e7db      	b.n	800745c <__ieee754_rem_pio2+0x74>
 80074a4:	f7f8 feb6 	bl	8000214 <__adddf3>
 80074a8:	45b0      	cmp	r8, r6
 80074aa:	4604      	mov	r4, r0
 80074ac:	460d      	mov	r5, r1
 80074ae:	d016      	beq.n	80074de <__ieee754_rem_pio2+0xf6>
 80074b0:	a38f      	add	r3, pc, #572	; (adr r3, 80076f0 <__ieee754_rem_pio2+0x308>)
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	f7f8 fead 	bl	8000214 <__adddf3>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	e9ca 2300 	strd	r2, r3, [sl]
 80074c2:	4620      	mov	r0, r4
 80074c4:	4629      	mov	r1, r5
 80074c6:	f7f8 fea3 	bl	8000210 <__aeabi_dsub>
 80074ca:	a389      	add	r3, pc, #548	; (adr r3, 80076f0 <__ieee754_rem_pio2+0x308>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f7f8 fea0 	bl	8000214 <__adddf3>
 80074d4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80074d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80074dc:	e7c4      	b.n	8007468 <__ieee754_rem_pio2+0x80>
 80074de:	a386      	add	r3, pc, #536	; (adr r3, 80076f8 <__ieee754_rem_pio2+0x310>)
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f7f8 fe96 	bl	8000214 <__adddf3>
 80074e8:	a385      	add	r3, pc, #532	; (adr r3, 8007700 <__ieee754_rem_pio2+0x318>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	4604      	mov	r4, r0
 80074f0:	460d      	mov	r5, r1
 80074f2:	f7f8 fe8f 	bl	8000214 <__adddf3>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	e9ca 2300 	strd	r2, r3, [sl]
 80074fe:	4620      	mov	r0, r4
 8007500:	4629      	mov	r1, r5
 8007502:	f7f8 fe85 	bl	8000210 <__aeabi_dsub>
 8007506:	a37e      	add	r3, pc, #504	; (adr r3, 8007700 <__ieee754_rem_pio2+0x318>)
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	e7e0      	b.n	80074d0 <__ieee754_rem_pio2+0xe8>
 800750e:	4b87      	ldr	r3, [pc, #540]	; (800772c <__ieee754_rem_pio2+0x344>)
 8007510:	4598      	cmp	r8, r3
 8007512:	f300 80d9 	bgt.w	80076c8 <__ieee754_rem_pio2+0x2e0>
 8007516:	f000 fe39 	bl	800818c <fabs>
 800751a:	ec55 4b10 	vmov	r4, r5, d0
 800751e:	ee10 0a10 	vmov	r0, s0
 8007522:	a379      	add	r3, pc, #484	; (adr r3, 8007708 <__ieee754_rem_pio2+0x320>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	4629      	mov	r1, r5
 800752a:	f7f9 f829 	bl	8000580 <__aeabi_dmul>
 800752e:	4b80      	ldr	r3, [pc, #512]	; (8007730 <__ieee754_rem_pio2+0x348>)
 8007530:	2200      	movs	r2, #0
 8007532:	f7f8 fe6f 	bl	8000214 <__adddf3>
 8007536:	f7f9 fabd 	bl	8000ab4 <__aeabi_d2iz>
 800753a:	4683      	mov	fp, r0
 800753c:	f7f8 ffb6 	bl	80004ac <__aeabi_i2d>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	ec43 2b18 	vmov	d8, r2, r3
 8007548:	a367      	add	r3, pc, #412	; (adr r3, 80076e8 <__ieee754_rem_pio2+0x300>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f7f9 f817 	bl	8000580 <__aeabi_dmul>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4620      	mov	r0, r4
 8007558:	4629      	mov	r1, r5
 800755a:	f7f8 fe59 	bl	8000210 <__aeabi_dsub>
 800755e:	a364      	add	r3, pc, #400	; (adr r3, 80076f0 <__ieee754_rem_pio2+0x308>)
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	4606      	mov	r6, r0
 8007566:	460f      	mov	r7, r1
 8007568:	ec51 0b18 	vmov	r0, r1, d8
 800756c:	f7f9 f808 	bl	8000580 <__aeabi_dmul>
 8007570:	f1bb 0f1f 	cmp.w	fp, #31
 8007574:	4604      	mov	r4, r0
 8007576:	460d      	mov	r5, r1
 8007578:	dc0d      	bgt.n	8007596 <__ieee754_rem_pio2+0x1ae>
 800757a:	4b6e      	ldr	r3, [pc, #440]	; (8007734 <__ieee754_rem_pio2+0x34c>)
 800757c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8007580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007584:	4543      	cmp	r3, r8
 8007586:	d006      	beq.n	8007596 <__ieee754_rem_pio2+0x1ae>
 8007588:	4622      	mov	r2, r4
 800758a:	462b      	mov	r3, r5
 800758c:	4630      	mov	r0, r6
 800758e:	4639      	mov	r1, r7
 8007590:	f7f8 fe3e 	bl	8000210 <__aeabi_dsub>
 8007594:	e00f      	b.n	80075b6 <__ieee754_rem_pio2+0x1ce>
 8007596:	462b      	mov	r3, r5
 8007598:	4622      	mov	r2, r4
 800759a:	4630      	mov	r0, r6
 800759c:	4639      	mov	r1, r7
 800759e:	f7f8 fe37 	bl	8000210 <__aeabi_dsub>
 80075a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80075a6:	9303      	str	r3, [sp, #12]
 80075a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80075ac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80075b0:	f1b8 0f10 	cmp.w	r8, #16
 80075b4:	dc02      	bgt.n	80075bc <__ieee754_rem_pio2+0x1d4>
 80075b6:	e9ca 0100 	strd	r0, r1, [sl]
 80075ba:	e039      	b.n	8007630 <__ieee754_rem_pio2+0x248>
 80075bc:	a34e      	add	r3, pc, #312	; (adr r3, 80076f8 <__ieee754_rem_pio2+0x310>)
 80075be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c2:	ec51 0b18 	vmov	r0, r1, d8
 80075c6:	f7f8 ffdb 	bl	8000580 <__aeabi_dmul>
 80075ca:	4604      	mov	r4, r0
 80075cc:	460d      	mov	r5, r1
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4630      	mov	r0, r6
 80075d4:	4639      	mov	r1, r7
 80075d6:	f7f8 fe1b 	bl	8000210 <__aeabi_dsub>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4680      	mov	r8, r0
 80075e0:	4689      	mov	r9, r1
 80075e2:	4630      	mov	r0, r6
 80075e4:	4639      	mov	r1, r7
 80075e6:	f7f8 fe13 	bl	8000210 <__aeabi_dsub>
 80075ea:	4622      	mov	r2, r4
 80075ec:	462b      	mov	r3, r5
 80075ee:	f7f8 fe0f 	bl	8000210 <__aeabi_dsub>
 80075f2:	a343      	add	r3, pc, #268	; (adr r3, 8007700 <__ieee754_rem_pio2+0x318>)
 80075f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f8:	4604      	mov	r4, r0
 80075fa:	460d      	mov	r5, r1
 80075fc:	ec51 0b18 	vmov	r0, r1, d8
 8007600:	f7f8 ffbe 	bl	8000580 <__aeabi_dmul>
 8007604:	4622      	mov	r2, r4
 8007606:	462b      	mov	r3, r5
 8007608:	f7f8 fe02 	bl	8000210 <__aeabi_dsub>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4604      	mov	r4, r0
 8007612:	460d      	mov	r5, r1
 8007614:	4640      	mov	r0, r8
 8007616:	4649      	mov	r1, r9
 8007618:	f7f8 fdfa 	bl	8000210 <__aeabi_dsub>
 800761c:	9a03      	ldr	r2, [sp, #12]
 800761e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b31      	cmp	r3, #49	; 0x31
 8007626:	dc24      	bgt.n	8007672 <__ieee754_rem_pio2+0x28a>
 8007628:	e9ca 0100 	strd	r0, r1, [sl]
 800762c:	4646      	mov	r6, r8
 800762e:	464f      	mov	r7, r9
 8007630:	e9da 8900 	ldrd	r8, r9, [sl]
 8007634:	4630      	mov	r0, r6
 8007636:	4642      	mov	r2, r8
 8007638:	464b      	mov	r3, r9
 800763a:	4639      	mov	r1, r7
 800763c:	f7f8 fde8 	bl	8000210 <__aeabi_dsub>
 8007640:	462b      	mov	r3, r5
 8007642:	4622      	mov	r2, r4
 8007644:	f7f8 fde4 	bl	8000210 <__aeabi_dsub>
 8007648:	9b02      	ldr	r3, [sp, #8]
 800764a:	2b00      	cmp	r3, #0
 800764c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007650:	f6bf af0a 	bge.w	8007468 <__ieee754_rem_pio2+0x80>
 8007654:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007658:	f8ca 3004 	str.w	r3, [sl, #4]
 800765c:	f8ca 8000 	str.w	r8, [sl]
 8007660:	f8ca 0008 	str.w	r0, [sl, #8]
 8007664:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007668:	f8ca 300c 	str.w	r3, [sl, #12]
 800766c:	f1cb 0b00 	rsb	fp, fp, #0
 8007670:	e6fa      	b.n	8007468 <__ieee754_rem_pio2+0x80>
 8007672:	a327      	add	r3, pc, #156	; (adr r3, 8007710 <__ieee754_rem_pio2+0x328>)
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	ec51 0b18 	vmov	r0, r1, d8
 800767c:	f7f8 ff80 	bl	8000580 <__aeabi_dmul>
 8007680:	4604      	mov	r4, r0
 8007682:	460d      	mov	r5, r1
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4640      	mov	r0, r8
 800768a:	4649      	mov	r1, r9
 800768c:	f7f8 fdc0 	bl	8000210 <__aeabi_dsub>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	4606      	mov	r6, r0
 8007696:	460f      	mov	r7, r1
 8007698:	4640      	mov	r0, r8
 800769a:	4649      	mov	r1, r9
 800769c:	f7f8 fdb8 	bl	8000210 <__aeabi_dsub>
 80076a0:	4622      	mov	r2, r4
 80076a2:	462b      	mov	r3, r5
 80076a4:	f7f8 fdb4 	bl	8000210 <__aeabi_dsub>
 80076a8:	a31b      	add	r3, pc, #108	; (adr r3, 8007718 <__ieee754_rem_pio2+0x330>)
 80076aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ae:	4604      	mov	r4, r0
 80076b0:	460d      	mov	r5, r1
 80076b2:	ec51 0b18 	vmov	r0, r1, d8
 80076b6:	f7f8 ff63 	bl	8000580 <__aeabi_dmul>
 80076ba:	4622      	mov	r2, r4
 80076bc:	462b      	mov	r3, r5
 80076be:	f7f8 fda7 	bl	8000210 <__aeabi_dsub>
 80076c2:	4604      	mov	r4, r0
 80076c4:	460d      	mov	r5, r1
 80076c6:	e75f      	b.n	8007588 <__ieee754_rem_pio2+0x1a0>
 80076c8:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <__ieee754_rem_pio2+0x350>)
 80076ca:	4598      	cmp	r8, r3
 80076cc:	dd36      	ble.n	800773c <__ieee754_rem_pio2+0x354>
 80076ce:	ee10 2a10 	vmov	r2, s0
 80076d2:	462b      	mov	r3, r5
 80076d4:	4620      	mov	r0, r4
 80076d6:	4629      	mov	r1, r5
 80076d8:	f7f8 fd9a 	bl	8000210 <__aeabi_dsub>
 80076dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80076e0:	e9ca 0100 	strd	r0, r1, [sl]
 80076e4:	e694      	b.n	8007410 <__ieee754_rem_pio2+0x28>
 80076e6:	bf00      	nop
 80076e8:	54400000 	.word	0x54400000
 80076ec:	3ff921fb 	.word	0x3ff921fb
 80076f0:	1a626331 	.word	0x1a626331
 80076f4:	3dd0b461 	.word	0x3dd0b461
 80076f8:	1a600000 	.word	0x1a600000
 80076fc:	3dd0b461 	.word	0x3dd0b461
 8007700:	2e037073 	.word	0x2e037073
 8007704:	3ba3198a 	.word	0x3ba3198a
 8007708:	6dc9c883 	.word	0x6dc9c883
 800770c:	3fe45f30 	.word	0x3fe45f30
 8007710:	2e000000 	.word	0x2e000000
 8007714:	3ba3198a 	.word	0x3ba3198a
 8007718:	252049c1 	.word	0x252049c1
 800771c:	397b839a 	.word	0x397b839a
 8007720:	3fe921fb 	.word	0x3fe921fb
 8007724:	4002d97b 	.word	0x4002d97b
 8007728:	3ff921fb 	.word	0x3ff921fb
 800772c:	413921fb 	.word	0x413921fb
 8007730:	3fe00000 	.word	0x3fe00000
 8007734:	08008480 	.word	0x08008480
 8007738:	7fefffff 	.word	0x7fefffff
 800773c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007740:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007744:	ee10 0a10 	vmov	r0, s0
 8007748:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800774c:	ee10 6a10 	vmov	r6, s0
 8007750:	460f      	mov	r7, r1
 8007752:	f7f9 f9af 	bl	8000ab4 <__aeabi_d2iz>
 8007756:	f7f8 fea9 	bl	80004ac <__aeabi_i2d>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4630      	mov	r0, r6
 8007760:	4639      	mov	r1, r7
 8007762:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007766:	f7f8 fd53 	bl	8000210 <__aeabi_dsub>
 800776a:	4b22      	ldr	r3, [pc, #136]	; (80077f4 <__ieee754_rem_pio2+0x40c>)
 800776c:	2200      	movs	r2, #0
 800776e:	f7f8 ff07 	bl	8000580 <__aeabi_dmul>
 8007772:	460f      	mov	r7, r1
 8007774:	4606      	mov	r6, r0
 8007776:	f7f9 f99d 	bl	8000ab4 <__aeabi_d2iz>
 800777a:	f7f8 fe97 	bl	80004ac <__aeabi_i2d>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4630      	mov	r0, r6
 8007784:	4639      	mov	r1, r7
 8007786:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800778a:	f7f8 fd41 	bl	8000210 <__aeabi_dsub>
 800778e:	4b19      	ldr	r3, [pc, #100]	; (80077f4 <__ieee754_rem_pio2+0x40c>)
 8007790:	2200      	movs	r2, #0
 8007792:	f7f8 fef5 	bl	8000580 <__aeabi_dmul>
 8007796:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800779a:	ad04      	add	r5, sp, #16
 800779c:	f04f 0803 	mov.w	r8, #3
 80077a0:	46a9      	mov	r9, r5
 80077a2:	2600      	movs	r6, #0
 80077a4:	2700      	movs	r7, #0
 80077a6:	4632      	mov	r2, r6
 80077a8:	463b      	mov	r3, r7
 80077aa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80077ae:	46c3      	mov	fp, r8
 80077b0:	3d08      	subs	r5, #8
 80077b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80077b6:	f7f9 f94b 	bl	8000a50 <__aeabi_dcmpeq>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d1f3      	bne.n	80077a6 <__ieee754_rem_pio2+0x3be>
 80077be:	4b0e      	ldr	r3, [pc, #56]	; (80077f8 <__ieee754_rem_pio2+0x410>)
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	2302      	movs	r3, #2
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	4622      	mov	r2, r4
 80077c8:	465b      	mov	r3, fp
 80077ca:	4651      	mov	r1, sl
 80077cc:	4648      	mov	r0, r9
 80077ce:	f000 f8df 	bl	8007990 <__kernel_rem_pio2>
 80077d2:	9b02      	ldr	r3, [sp, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	4683      	mov	fp, r0
 80077d8:	f6bf ae46 	bge.w	8007468 <__ieee754_rem_pio2+0x80>
 80077dc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80077e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80077e4:	f8ca 3004 	str.w	r3, [sl, #4]
 80077e8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80077ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80077f0:	e73a      	b.n	8007668 <__ieee754_rem_pio2+0x280>
 80077f2:	bf00      	nop
 80077f4:	41700000 	.word	0x41700000
 80077f8:	08008500 	.word	0x08008500
 80077fc:	00000000 	.word	0x00000000

08007800 <__kernel_cos>:
 8007800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	ec57 6b10 	vmov	r6, r7, d0
 8007808:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800780c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007810:	ed8d 1b00 	vstr	d1, [sp]
 8007814:	da07      	bge.n	8007826 <__kernel_cos+0x26>
 8007816:	ee10 0a10 	vmov	r0, s0
 800781a:	4639      	mov	r1, r7
 800781c:	f7f9 f94a 	bl	8000ab4 <__aeabi_d2iz>
 8007820:	2800      	cmp	r0, #0
 8007822:	f000 8088 	beq.w	8007936 <__kernel_cos+0x136>
 8007826:	4632      	mov	r2, r6
 8007828:	463b      	mov	r3, r7
 800782a:	4630      	mov	r0, r6
 800782c:	4639      	mov	r1, r7
 800782e:	f7f8 fea7 	bl	8000580 <__aeabi_dmul>
 8007832:	4b51      	ldr	r3, [pc, #324]	; (8007978 <__kernel_cos+0x178>)
 8007834:	2200      	movs	r2, #0
 8007836:	4604      	mov	r4, r0
 8007838:	460d      	mov	r5, r1
 800783a:	f7f8 fea1 	bl	8000580 <__aeabi_dmul>
 800783e:	a340      	add	r3, pc, #256	; (adr r3, 8007940 <__kernel_cos+0x140>)
 8007840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007844:	4682      	mov	sl, r0
 8007846:	468b      	mov	fp, r1
 8007848:	4620      	mov	r0, r4
 800784a:	4629      	mov	r1, r5
 800784c:	f7f8 fe98 	bl	8000580 <__aeabi_dmul>
 8007850:	a33d      	add	r3, pc, #244	; (adr r3, 8007948 <__kernel_cos+0x148>)
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	f7f8 fcdd 	bl	8000214 <__adddf3>
 800785a:	4622      	mov	r2, r4
 800785c:	462b      	mov	r3, r5
 800785e:	f7f8 fe8f 	bl	8000580 <__aeabi_dmul>
 8007862:	a33b      	add	r3, pc, #236	; (adr r3, 8007950 <__kernel_cos+0x150>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f7f8 fcd2 	bl	8000210 <__aeabi_dsub>
 800786c:	4622      	mov	r2, r4
 800786e:	462b      	mov	r3, r5
 8007870:	f7f8 fe86 	bl	8000580 <__aeabi_dmul>
 8007874:	a338      	add	r3, pc, #224	; (adr r3, 8007958 <__kernel_cos+0x158>)
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	f7f8 fccb 	bl	8000214 <__adddf3>
 800787e:	4622      	mov	r2, r4
 8007880:	462b      	mov	r3, r5
 8007882:	f7f8 fe7d 	bl	8000580 <__aeabi_dmul>
 8007886:	a336      	add	r3, pc, #216	; (adr r3, 8007960 <__kernel_cos+0x160>)
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f7f8 fcc0 	bl	8000210 <__aeabi_dsub>
 8007890:	4622      	mov	r2, r4
 8007892:	462b      	mov	r3, r5
 8007894:	f7f8 fe74 	bl	8000580 <__aeabi_dmul>
 8007898:	a333      	add	r3, pc, #204	; (adr r3, 8007968 <__kernel_cos+0x168>)
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f7f8 fcb9 	bl	8000214 <__adddf3>
 80078a2:	4622      	mov	r2, r4
 80078a4:	462b      	mov	r3, r5
 80078a6:	f7f8 fe6b 	bl	8000580 <__aeabi_dmul>
 80078aa:	4622      	mov	r2, r4
 80078ac:	462b      	mov	r3, r5
 80078ae:	f7f8 fe67 	bl	8000580 <__aeabi_dmul>
 80078b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078b6:	4604      	mov	r4, r0
 80078b8:	460d      	mov	r5, r1
 80078ba:	4630      	mov	r0, r6
 80078bc:	4639      	mov	r1, r7
 80078be:	f7f8 fe5f 	bl	8000580 <__aeabi_dmul>
 80078c2:	460b      	mov	r3, r1
 80078c4:	4602      	mov	r2, r0
 80078c6:	4629      	mov	r1, r5
 80078c8:	4620      	mov	r0, r4
 80078ca:	f7f8 fca1 	bl	8000210 <__aeabi_dsub>
 80078ce:	4b2b      	ldr	r3, [pc, #172]	; (800797c <__kernel_cos+0x17c>)
 80078d0:	4598      	cmp	r8, r3
 80078d2:	4606      	mov	r6, r0
 80078d4:	460f      	mov	r7, r1
 80078d6:	dc10      	bgt.n	80078fa <__kernel_cos+0xfa>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4650      	mov	r0, sl
 80078de:	4659      	mov	r1, fp
 80078e0:	f7f8 fc96 	bl	8000210 <__aeabi_dsub>
 80078e4:	460b      	mov	r3, r1
 80078e6:	4926      	ldr	r1, [pc, #152]	; (8007980 <__kernel_cos+0x180>)
 80078e8:	4602      	mov	r2, r0
 80078ea:	2000      	movs	r0, #0
 80078ec:	f7f8 fc90 	bl	8000210 <__aeabi_dsub>
 80078f0:	ec41 0b10 	vmov	d0, r0, r1
 80078f4:	b003      	add	sp, #12
 80078f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fa:	4b22      	ldr	r3, [pc, #136]	; (8007984 <__kernel_cos+0x184>)
 80078fc:	4920      	ldr	r1, [pc, #128]	; (8007980 <__kernel_cos+0x180>)
 80078fe:	4598      	cmp	r8, r3
 8007900:	bfcc      	ite	gt
 8007902:	4d21      	ldrgt	r5, [pc, #132]	; (8007988 <__kernel_cos+0x188>)
 8007904:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007908:	2400      	movs	r4, #0
 800790a:	4622      	mov	r2, r4
 800790c:	462b      	mov	r3, r5
 800790e:	2000      	movs	r0, #0
 8007910:	f7f8 fc7e 	bl	8000210 <__aeabi_dsub>
 8007914:	4622      	mov	r2, r4
 8007916:	4680      	mov	r8, r0
 8007918:	4689      	mov	r9, r1
 800791a:	462b      	mov	r3, r5
 800791c:	4650      	mov	r0, sl
 800791e:	4659      	mov	r1, fp
 8007920:	f7f8 fc76 	bl	8000210 <__aeabi_dsub>
 8007924:	4632      	mov	r2, r6
 8007926:	463b      	mov	r3, r7
 8007928:	f7f8 fc72 	bl	8000210 <__aeabi_dsub>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	4640      	mov	r0, r8
 8007932:	4649      	mov	r1, r9
 8007934:	e7da      	b.n	80078ec <__kernel_cos+0xec>
 8007936:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007970 <__kernel_cos+0x170>
 800793a:	e7db      	b.n	80078f4 <__kernel_cos+0xf4>
 800793c:	f3af 8000 	nop.w
 8007940:	be8838d4 	.word	0xbe8838d4
 8007944:	bda8fae9 	.word	0xbda8fae9
 8007948:	bdb4b1c4 	.word	0xbdb4b1c4
 800794c:	3e21ee9e 	.word	0x3e21ee9e
 8007950:	809c52ad 	.word	0x809c52ad
 8007954:	3e927e4f 	.word	0x3e927e4f
 8007958:	19cb1590 	.word	0x19cb1590
 800795c:	3efa01a0 	.word	0x3efa01a0
 8007960:	16c15177 	.word	0x16c15177
 8007964:	3f56c16c 	.word	0x3f56c16c
 8007968:	5555554c 	.word	0x5555554c
 800796c:	3fa55555 	.word	0x3fa55555
 8007970:	00000000 	.word	0x00000000
 8007974:	3ff00000 	.word	0x3ff00000
 8007978:	3fe00000 	.word	0x3fe00000
 800797c:	3fd33332 	.word	0x3fd33332
 8007980:	3ff00000 	.word	0x3ff00000
 8007984:	3fe90000 	.word	0x3fe90000
 8007988:	3fd20000 	.word	0x3fd20000
 800798c:	00000000 	.word	0x00000000

08007990 <__kernel_rem_pio2>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	ed2d 8b02 	vpush	{d8}
 8007998:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800799c:	f112 0f14 	cmn.w	r2, #20
 80079a0:	9308      	str	r3, [sp, #32]
 80079a2:	9101      	str	r1, [sp, #4]
 80079a4:	4bc6      	ldr	r3, [pc, #792]	; (8007cc0 <__kernel_rem_pio2+0x330>)
 80079a6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80079a8:	9009      	str	r0, [sp, #36]	; 0x24
 80079aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079ae:	9304      	str	r3, [sp, #16]
 80079b0:	9b08      	ldr	r3, [sp, #32]
 80079b2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80079b6:	bfa8      	it	ge
 80079b8:	1ed4      	subge	r4, r2, #3
 80079ba:	9306      	str	r3, [sp, #24]
 80079bc:	bfb2      	itee	lt
 80079be:	2400      	movlt	r4, #0
 80079c0:	2318      	movge	r3, #24
 80079c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80079c6:	f06f 0317 	mvn.w	r3, #23
 80079ca:	fb04 3303 	mla	r3, r4, r3, r3
 80079ce:	eb03 0a02 	add.w	sl, r3, r2
 80079d2:	9b04      	ldr	r3, [sp, #16]
 80079d4:	9a06      	ldr	r2, [sp, #24]
 80079d6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007cb0 <__kernel_rem_pio2+0x320>
 80079da:	eb03 0802 	add.w	r8, r3, r2
 80079de:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80079e0:	1aa7      	subs	r7, r4, r2
 80079e2:	ae20      	add	r6, sp, #128	; 0x80
 80079e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80079e8:	2500      	movs	r5, #0
 80079ea:	4545      	cmp	r5, r8
 80079ec:	dd18      	ble.n	8007a20 <__kernel_rem_pio2+0x90>
 80079ee:	9b08      	ldr	r3, [sp, #32]
 80079f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80079f4:	aa20      	add	r2, sp, #128	; 0x80
 80079f6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007cb0 <__kernel_rem_pio2+0x320>
 80079fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80079fe:	f1c3 0301 	rsb	r3, r3, #1
 8007a02:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007a06:	9307      	str	r3, [sp, #28]
 8007a08:	9b07      	ldr	r3, [sp, #28]
 8007a0a:	9a04      	ldr	r2, [sp, #16]
 8007a0c:	4443      	add	r3, r8
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	db2f      	blt.n	8007a72 <__kernel_rem_pio2+0xe2>
 8007a12:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007a16:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007a1a:	462f      	mov	r7, r5
 8007a1c:	2600      	movs	r6, #0
 8007a1e:	e01b      	b.n	8007a58 <__kernel_rem_pio2+0xc8>
 8007a20:	42ef      	cmn	r7, r5
 8007a22:	d407      	bmi.n	8007a34 <__kernel_rem_pio2+0xa4>
 8007a24:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007a28:	f7f8 fd40 	bl	80004ac <__aeabi_i2d>
 8007a2c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007a30:	3501      	adds	r5, #1
 8007a32:	e7da      	b.n	80079ea <__kernel_rem_pio2+0x5a>
 8007a34:	ec51 0b18 	vmov	r0, r1, d8
 8007a38:	e7f8      	b.n	8007a2c <__kernel_rem_pio2+0x9c>
 8007a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a3e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007a42:	f7f8 fd9d 	bl	8000580 <__aeabi_dmul>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a4e:	f7f8 fbe1 	bl	8000214 <__adddf3>
 8007a52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a56:	3601      	adds	r6, #1
 8007a58:	9b06      	ldr	r3, [sp, #24]
 8007a5a:	429e      	cmp	r6, r3
 8007a5c:	f1a7 0708 	sub.w	r7, r7, #8
 8007a60:	ddeb      	ble.n	8007a3a <__kernel_rem_pio2+0xaa>
 8007a62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a66:	3508      	adds	r5, #8
 8007a68:	ecab 7b02 	vstmia	fp!, {d7}
 8007a6c:	f108 0801 	add.w	r8, r8, #1
 8007a70:	e7ca      	b.n	8007a08 <__kernel_rem_pio2+0x78>
 8007a72:	9b04      	ldr	r3, [sp, #16]
 8007a74:	aa0c      	add	r2, sp, #48	; 0x30
 8007a76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a7c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007a7e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007a82:	9c04      	ldr	r4, [sp, #16]
 8007a84:	930a      	str	r3, [sp, #40]	; 0x28
 8007a86:	ab98      	add	r3, sp, #608	; 0x260
 8007a88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a8c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007a90:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007a94:	f8cd b008 	str.w	fp, [sp, #8]
 8007a98:	4625      	mov	r5, r4
 8007a9a:	2d00      	cmp	r5, #0
 8007a9c:	dc78      	bgt.n	8007b90 <__kernel_rem_pio2+0x200>
 8007a9e:	ec47 6b10 	vmov	d0, r6, r7
 8007aa2:	4650      	mov	r0, sl
 8007aa4:	f000 fc08 	bl	80082b8 <scalbn>
 8007aa8:	ec57 6b10 	vmov	r6, r7, d0
 8007aac:	2200      	movs	r2, #0
 8007aae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007ab2:	ee10 0a10 	vmov	r0, s0
 8007ab6:	4639      	mov	r1, r7
 8007ab8:	f7f8 fd62 	bl	8000580 <__aeabi_dmul>
 8007abc:	ec41 0b10 	vmov	d0, r0, r1
 8007ac0:	f000 fb7a 	bl	80081b8 <floor>
 8007ac4:	4b7f      	ldr	r3, [pc, #508]	; (8007cc4 <__kernel_rem_pio2+0x334>)
 8007ac6:	ec51 0b10 	vmov	r0, r1, d0
 8007aca:	2200      	movs	r2, #0
 8007acc:	f7f8 fd58 	bl	8000580 <__aeabi_dmul>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	4639      	mov	r1, r7
 8007ad8:	f7f8 fb9a 	bl	8000210 <__aeabi_dsub>
 8007adc:	460f      	mov	r7, r1
 8007ade:	4606      	mov	r6, r0
 8007ae0:	f7f8 ffe8 	bl	8000ab4 <__aeabi_d2iz>
 8007ae4:	9007      	str	r0, [sp, #28]
 8007ae6:	f7f8 fce1 	bl	80004ac <__aeabi_i2d>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	4630      	mov	r0, r6
 8007af0:	4639      	mov	r1, r7
 8007af2:	f7f8 fb8d 	bl	8000210 <__aeabi_dsub>
 8007af6:	f1ba 0f00 	cmp.w	sl, #0
 8007afa:	4606      	mov	r6, r0
 8007afc:	460f      	mov	r7, r1
 8007afe:	dd70      	ble.n	8007be2 <__kernel_rem_pio2+0x252>
 8007b00:	1e62      	subs	r2, r4, #1
 8007b02:	ab0c      	add	r3, sp, #48	; 0x30
 8007b04:	9d07      	ldr	r5, [sp, #28]
 8007b06:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007b0a:	f1ca 0118 	rsb	r1, sl, #24
 8007b0e:	fa40 f301 	asr.w	r3, r0, r1
 8007b12:	441d      	add	r5, r3
 8007b14:	408b      	lsls	r3, r1
 8007b16:	1ac0      	subs	r0, r0, r3
 8007b18:	ab0c      	add	r3, sp, #48	; 0x30
 8007b1a:	9507      	str	r5, [sp, #28]
 8007b1c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007b20:	f1ca 0317 	rsb	r3, sl, #23
 8007b24:	fa40 f303 	asr.w	r3, r0, r3
 8007b28:	9302      	str	r3, [sp, #8]
 8007b2a:	9b02      	ldr	r3, [sp, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dd66      	ble.n	8007bfe <__kernel_rem_pio2+0x26e>
 8007b30:	9b07      	ldr	r3, [sp, #28]
 8007b32:	2200      	movs	r2, #0
 8007b34:	3301      	adds	r3, #1
 8007b36:	9307      	str	r3, [sp, #28]
 8007b38:	4615      	mov	r5, r2
 8007b3a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007b3e:	4294      	cmp	r4, r2
 8007b40:	f300 8099 	bgt.w	8007c76 <__kernel_rem_pio2+0x2e6>
 8007b44:	f1ba 0f00 	cmp.w	sl, #0
 8007b48:	dd07      	ble.n	8007b5a <__kernel_rem_pio2+0x1ca>
 8007b4a:	f1ba 0f01 	cmp.w	sl, #1
 8007b4e:	f000 80a5 	beq.w	8007c9c <__kernel_rem_pio2+0x30c>
 8007b52:	f1ba 0f02 	cmp.w	sl, #2
 8007b56:	f000 80c1 	beq.w	8007cdc <__kernel_rem_pio2+0x34c>
 8007b5a:	9b02      	ldr	r3, [sp, #8]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d14e      	bne.n	8007bfe <__kernel_rem_pio2+0x26e>
 8007b60:	4632      	mov	r2, r6
 8007b62:	463b      	mov	r3, r7
 8007b64:	4958      	ldr	r1, [pc, #352]	; (8007cc8 <__kernel_rem_pio2+0x338>)
 8007b66:	2000      	movs	r0, #0
 8007b68:	f7f8 fb52 	bl	8000210 <__aeabi_dsub>
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	460f      	mov	r7, r1
 8007b70:	2d00      	cmp	r5, #0
 8007b72:	d044      	beq.n	8007bfe <__kernel_rem_pio2+0x26e>
 8007b74:	4650      	mov	r0, sl
 8007b76:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007cb8 <__kernel_rem_pio2+0x328>
 8007b7a:	f000 fb9d 	bl	80082b8 <scalbn>
 8007b7e:	4630      	mov	r0, r6
 8007b80:	4639      	mov	r1, r7
 8007b82:	ec53 2b10 	vmov	r2, r3, d0
 8007b86:	f7f8 fb43 	bl	8000210 <__aeabi_dsub>
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	e036      	b.n	8007bfe <__kernel_rem_pio2+0x26e>
 8007b90:	4b4e      	ldr	r3, [pc, #312]	; (8007ccc <__kernel_rem_pio2+0x33c>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	4630      	mov	r0, r6
 8007b96:	4639      	mov	r1, r7
 8007b98:	f7f8 fcf2 	bl	8000580 <__aeabi_dmul>
 8007b9c:	f7f8 ff8a 	bl	8000ab4 <__aeabi_d2iz>
 8007ba0:	f7f8 fc84 	bl	80004ac <__aeabi_i2d>
 8007ba4:	4b4a      	ldr	r3, [pc, #296]	; (8007cd0 <__kernel_rem_pio2+0x340>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	4680      	mov	r8, r0
 8007baa:	4689      	mov	r9, r1
 8007bac:	f7f8 fce8 	bl	8000580 <__aeabi_dmul>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	f7f8 fb2a 	bl	8000210 <__aeabi_dsub>
 8007bbc:	f7f8 ff7a 	bl	8000ab4 <__aeabi_d2iz>
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	f843 0b04 	str.w	r0, [r3], #4
 8007bc6:	3d01      	subs	r5, #1
 8007bc8:	9302      	str	r3, [sp, #8]
 8007bca:	ab70      	add	r3, sp, #448	; 0x1c0
 8007bcc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	4649      	mov	r1, r9
 8007bd8:	f7f8 fb1c 	bl	8000214 <__adddf3>
 8007bdc:	4606      	mov	r6, r0
 8007bde:	460f      	mov	r7, r1
 8007be0:	e75b      	b.n	8007a9a <__kernel_rem_pio2+0x10a>
 8007be2:	d105      	bne.n	8007bf0 <__kernel_rem_pio2+0x260>
 8007be4:	1e63      	subs	r3, r4, #1
 8007be6:	aa0c      	add	r2, sp, #48	; 0x30
 8007be8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007bec:	15c3      	asrs	r3, r0, #23
 8007bee:	e79b      	b.n	8007b28 <__kernel_rem_pio2+0x198>
 8007bf0:	4b38      	ldr	r3, [pc, #224]	; (8007cd4 <__kernel_rem_pio2+0x344>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f7f8 ff4a 	bl	8000a8c <__aeabi_dcmpge>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d139      	bne.n	8007c70 <__kernel_rem_pio2+0x2e0>
 8007bfc:	9002      	str	r0, [sp, #8]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2300      	movs	r3, #0
 8007c02:	4630      	mov	r0, r6
 8007c04:	4639      	mov	r1, r7
 8007c06:	f7f8 ff23 	bl	8000a50 <__aeabi_dcmpeq>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	f000 80b4 	beq.w	8007d78 <__kernel_rem_pio2+0x3e8>
 8007c10:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8007c14:	465b      	mov	r3, fp
 8007c16:	2200      	movs	r2, #0
 8007c18:	9904      	ldr	r1, [sp, #16]
 8007c1a:	428b      	cmp	r3, r1
 8007c1c:	da65      	bge.n	8007cea <__kernel_rem_pio2+0x35a>
 8007c1e:	2a00      	cmp	r2, #0
 8007c20:	d07b      	beq.n	8007d1a <__kernel_rem_pio2+0x38a>
 8007c22:	ab0c      	add	r3, sp, #48	; 0x30
 8007c24:	f1aa 0a18 	sub.w	sl, sl, #24
 8007c28:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 80a0 	beq.w	8007d72 <__kernel_rem_pio2+0x3e2>
 8007c32:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007cb8 <__kernel_rem_pio2+0x328>
 8007c36:	4650      	mov	r0, sl
 8007c38:	f000 fb3e 	bl	80082b8 <scalbn>
 8007c3c:	4f23      	ldr	r7, [pc, #140]	; (8007ccc <__kernel_rem_pio2+0x33c>)
 8007c3e:	ec55 4b10 	vmov	r4, r5, d0
 8007c42:	46d8      	mov	r8, fp
 8007c44:	2600      	movs	r6, #0
 8007c46:	f1b8 0f00 	cmp.w	r8, #0
 8007c4a:	f280 80cf 	bge.w	8007dec <__kernel_rem_pio2+0x45c>
 8007c4e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007cb0 <__kernel_rem_pio2+0x320>
 8007c52:	465f      	mov	r7, fp
 8007c54:	f04f 0800 	mov.w	r8, #0
 8007c58:	2f00      	cmp	r7, #0
 8007c5a:	f2c0 80fd 	blt.w	8007e58 <__kernel_rem_pio2+0x4c8>
 8007c5e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007c60:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007cd8 <__kernel_rem_pio2+0x348>
 8007c64:	ec55 4b18 	vmov	r4, r5, d8
 8007c68:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8007c6c:	2600      	movs	r6, #0
 8007c6e:	e0e5      	b.n	8007e3c <__kernel_rem_pio2+0x4ac>
 8007c70:	2302      	movs	r3, #2
 8007c72:	9302      	str	r3, [sp, #8]
 8007c74:	e75c      	b.n	8007b30 <__kernel_rem_pio2+0x1a0>
 8007c76:	f8db 3000 	ldr.w	r3, [fp]
 8007c7a:	b955      	cbnz	r5, 8007c92 <__kernel_rem_pio2+0x302>
 8007c7c:	b123      	cbz	r3, 8007c88 <__kernel_rem_pio2+0x2f8>
 8007c7e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007c82:	f8cb 3000 	str.w	r3, [fp]
 8007c86:	2301      	movs	r3, #1
 8007c88:	3201      	adds	r2, #1
 8007c8a:	f10b 0b04 	add.w	fp, fp, #4
 8007c8e:	461d      	mov	r5, r3
 8007c90:	e755      	b.n	8007b3e <__kernel_rem_pio2+0x1ae>
 8007c92:	1acb      	subs	r3, r1, r3
 8007c94:	f8cb 3000 	str.w	r3, [fp]
 8007c98:	462b      	mov	r3, r5
 8007c9a:	e7f5      	b.n	8007c88 <__kernel_rem_pio2+0x2f8>
 8007c9c:	1e62      	subs	r2, r4, #1
 8007c9e:	ab0c      	add	r3, sp, #48	; 0x30
 8007ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007ca8:	a90c      	add	r1, sp, #48	; 0x30
 8007caa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007cae:	e754      	b.n	8007b5a <__kernel_rem_pio2+0x1ca>
	...
 8007cbc:	3ff00000 	.word	0x3ff00000
 8007cc0:	08008648 	.word	0x08008648
 8007cc4:	40200000 	.word	0x40200000
 8007cc8:	3ff00000 	.word	0x3ff00000
 8007ccc:	3e700000 	.word	0x3e700000
 8007cd0:	41700000 	.word	0x41700000
 8007cd4:	3fe00000 	.word	0x3fe00000
 8007cd8:	08008608 	.word	0x08008608
 8007cdc:	1e62      	subs	r2, r4, #1
 8007cde:	ab0c      	add	r3, sp, #48	; 0x30
 8007ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007ce8:	e7de      	b.n	8007ca8 <__kernel_rem_pio2+0x318>
 8007cea:	a90c      	add	r1, sp, #48	; 0x30
 8007cec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	e790      	b.n	8007c18 <__kernel_rem_pio2+0x288>
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	d0fa      	beq.n	8007cf6 <__kernel_rem_pio2+0x366>
 8007d00:	9a08      	ldr	r2, [sp, #32]
 8007d02:	18e3      	adds	r3, r4, r3
 8007d04:	18a6      	adds	r6, r4, r2
 8007d06:	aa20      	add	r2, sp, #128	; 0x80
 8007d08:	1c65      	adds	r5, r4, #1
 8007d0a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007d0e:	9302      	str	r3, [sp, #8]
 8007d10:	9b02      	ldr	r3, [sp, #8]
 8007d12:	42ab      	cmp	r3, r5
 8007d14:	da04      	bge.n	8007d20 <__kernel_rem_pio2+0x390>
 8007d16:	461c      	mov	r4, r3
 8007d18:	e6b5      	b.n	8007a86 <__kernel_rem_pio2+0xf6>
 8007d1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e7eb      	b.n	8007cf8 <__kernel_rem_pio2+0x368>
 8007d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d26:	f7f8 fbc1 	bl	80004ac <__aeabi_i2d>
 8007d2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d30:	46b3      	mov	fp, r6
 8007d32:	461c      	mov	r4, r3
 8007d34:	2700      	movs	r7, #0
 8007d36:	f04f 0800 	mov.w	r8, #0
 8007d3a:	f04f 0900 	mov.w	r9, #0
 8007d3e:	9b06      	ldr	r3, [sp, #24]
 8007d40:	429f      	cmp	r7, r3
 8007d42:	dd06      	ble.n	8007d52 <__kernel_rem_pio2+0x3c2>
 8007d44:	ab70      	add	r3, sp, #448	; 0x1c0
 8007d46:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007d4a:	e9c3 8900 	strd	r8, r9, [r3]
 8007d4e:	3501      	adds	r5, #1
 8007d50:	e7de      	b.n	8007d10 <__kernel_rem_pio2+0x380>
 8007d52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007d56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007d5a:	f7f8 fc11 	bl	8000580 <__aeabi_dmul>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4640      	mov	r0, r8
 8007d64:	4649      	mov	r1, r9
 8007d66:	f7f8 fa55 	bl	8000214 <__adddf3>
 8007d6a:	3701      	adds	r7, #1
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	4689      	mov	r9, r1
 8007d70:	e7e5      	b.n	8007d3e <__kernel_rem_pio2+0x3ae>
 8007d72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007d76:	e754      	b.n	8007c22 <__kernel_rem_pio2+0x292>
 8007d78:	ec47 6b10 	vmov	d0, r6, r7
 8007d7c:	f1ca 0000 	rsb	r0, sl, #0
 8007d80:	f000 fa9a 	bl	80082b8 <scalbn>
 8007d84:	ec57 6b10 	vmov	r6, r7, d0
 8007d88:	4b9f      	ldr	r3, [pc, #636]	; (8008008 <__kernel_rem_pio2+0x678>)
 8007d8a:	ee10 0a10 	vmov	r0, s0
 8007d8e:	2200      	movs	r2, #0
 8007d90:	4639      	mov	r1, r7
 8007d92:	f7f8 fe7b 	bl	8000a8c <__aeabi_dcmpge>
 8007d96:	b300      	cbz	r0, 8007dda <__kernel_rem_pio2+0x44a>
 8007d98:	4b9c      	ldr	r3, [pc, #624]	; (800800c <__kernel_rem_pio2+0x67c>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	4639      	mov	r1, r7
 8007da0:	f7f8 fbee 	bl	8000580 <__aeabi_dmul>
 8007da4:	f7f8 fe86 	bl	8000ab4 <__aeabi_d2iz>
 8007da8:	4605      	mov	r5, r0
 8007daa:	f7f8 fb7f 	bl	80004ac <__aeabi_i2d>
 8007dae:	4b96      	ldr	r3, [pc, #600]	; (8008008 <__kernel_rem_pio2+0x678>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	f7f8 fbe5 	bl	8000580 <__aeabi_dmul>
 8007db6:	460b      	mov	r3, r1
 8007db8:	4602      	mov	r2, r0
 8007dba:	4639      	mov	r1, r7
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f7f8 fa27 	bl	8000210 <__aeabi_dsub>
 8007dc2:	f7f8 fe77 	bl	8000ab4 <__aeabi_d2iz>
 8007dc6:	f104 0b01 	add.w	fp, r4, #1
 8007dca:	ab0c      	add	r3, sp, #48	; 0x30
 8007dcc:	f10a 0a18 	add.w	sl, sl, #24
 8007dd0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007dd4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007dd8:	e72b      	b.n	8007c32 <__kernel_rem_pio2+0x2a2>
 8007dda:	4630      	mov	r0, r6
 8007ddc:	4639      	mov	r1, r7
 8007dde:	f7f8 fe69 	bl	8000ab4 <__aeabi_d2iz>
 8007de2:	ab0c      	add	r3, sp, #48	; 0x30
 8007de4:	46a3      	mov	fp, r4
 8007de6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007dea:	e722      	b.n	8007c32 <__kernel_rem_pio2+0x2a2>
 8007dec:	ab70      	add	r3, sp, #448	; 0x1c0
 8007dee:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007df2:	ab0c      	add	r3, sp, #48	; 0x30
 8007df4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007df8:	f7f8 fb58 	bl	80004ac <__aeabi_i2d>
 8007dfc:	4622      	mov	r2, r4
 8007dfe:	462b      	mov	r3, r5
 8007e00:	f7f8 fbbe 	bl	8000580 <__aeabi_dmul>
 8007e04:	4632      	mov	r2, r6
 8007e06:	e9c9 0100 	strd	r0, r1, [r9]
 8007e0a:	463b      	mov	r3, r7
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	4629      	mov	r1, r5
 8007e10:	f7f8 fbb6 	bl	8000580 <__aeabi_dmul>
 8007e14:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007e18:	4604      	mov	r4, r0
 8007e1a:	460d      	mov	r5, r1
 8007e1c:	e713      	b.n	8007c46 <__kernel_rem_pio2+0x2b6>
 8007e1e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007e22:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007e26:	f7f8 fbab 	bl	8000580 <__aeabi_dmul>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4620      	mov	r0, r4
 8007e30:	4629      	mov	r1, r5
 8007e32:	f7f8 f9ef 	bl	8000214 <__adddf3>
 8007e36:	3601      	adds	r6, #1
 8007e38:	4604      	mov	r4, r0
 8007e3a:	460d      	mov	r5, r1
 8007e3c:	9b04      	ldr	r3, [sp, #16]
 8007e3e:	429e      	cmp	r6, r3
 8007e40:	dc01      	bgt.n	8007e46 <__kernel_rem_pio2+0x4b6>
 8007e42:	45b0      	cmp	r8, r6
 8007e44:	daeb      	bge.n	8007e1e <__kernel_rem_pio2+0x48e>
 8007e46:	ab48      	add	r3, sp, #288	; 0x120
 8007e48:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007e4c:	e9c3 4500 	strd	r4, r5, [r3]
 8007e50:	3f01      	subs	r7, #1
 8007e52:	f108 0801 	add.w	r8, r8, #1
 8007e56:	e6ff      	b.n	8007c58 <__kernel_rem_pio2+0x2c8>
 8007e58:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	dc0b      	bgt.n	8007e76 <__kernel_rem_pio2+0x4e6>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	dc6e      	bgt.n	8007f40 <__kernel_rem_pio2+0x5b0>
 8007e62:	d045      	beq.n	8007ef0 <__kernel_rem_pio2+0x560>
 8007e64:	9b07      	ldr	r3, [sp, #28]
 8007e66:	f003 0007 	and.w	r0, r3, #7
 8007e6a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007e6e:	ecbd 8b02 	vpop	{d8}
 8007e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e76:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d1f3      	bne.n	8007e64 <__kernel_rem_pio2+0x4d4>
 8007e7c:	ab48      	add	r3, sp, #288	; 0x120
 8007e7e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007e82:	46d0      	mov	r8, sl
 8007e84:	46d9      	mov	r9, fp
 8007e86:	f1b9 0f00 	cmp.w	r9, #0
 8007e8a:	f1a8 0808 	sub.w	r8, r8, #8
 8007e8e:	dc64      	bgt.n	8007f5a <__kernel_rem_pio2+0x5ca>
 8007e90:	465c      	mov	r4, fp
 8007e92:	2c01      	cmp	r4, #1
 8007e94:	f1aa 0a08 	sub.w	sl, sl, #8
 8007e98:	dc7e      	bgt.n	8007f98 <__kernel_rem_pio2+0x608>
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	f1bb 0f01 	cmp.w	fp, #1
 8007ea2:	f300 8097 	bgt.w	8007fd4 <__kernel_rem_pio2+0x644>
 8007ea6:	9b02      	ldr	r3, [sp, #8]
 8007ea8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007eac:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f040 8099 	bne.w	8007fe8 <__kernel_rem_pio2+0x658>
 8007eb6:	9b01      	ldr	r3, [sp, #4]
 8007eb8:	e9c3 5600 	strd	r5, r6, [r3]
 8007ebc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007ec0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007ec4:	e7ce      	b.n	8007e64 <__kernel_rem_pio2+0x4d4>
 8007ec6:	ab48      	add	r3, sp, #288	; 0x120
 8007ec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	f7f8 f9a0 	bl	8000214 <__adddf3>
 8007ed4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007ed8:	f1bb 0f00 	cmp.w	fp, #0
 8007edc:	daf3      	bge.n	8007ec6 <__kernel_rem_pio2+0x536>
 8007ede:	9b02      	ldr	r3, [sp, #8]
 8007ee0:	b113      	cbz	r3, 8007ee8 <__kernel_rem_pio2+0x558>
 8007ee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	9b01      	ldr	r3, [sp, #4]
 8007eea:	e9c3 0100 	strd	r0, r1, [r3]
 8007eee:	e7b9      	b.n	8007e64 <__kernel_rem_pio2+0x4d4>
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	e7f0      	b.n	8007ed8 <__kernel_rem_pio2+0x548>
 8007ef6:	ab48      	add	r3, sp, #288	; 0x120
 8007ef8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f00:	f7f8 f988 	bl	8000214 <__adddf3>
 8007f04:	3c01      	subs	r4, #1
 8007f06:	2c00      	cmp	r4, #0
 8007f08:	daf5      	bge.n	8007ef6 <__kernel_rem_pio2+0x566>
 8007f0a:	9b02      	ldr	r3, [sp, #8]
 8007f0c:	b1e3      	cbz	r3, 8007f48 <__kernel_rem_pio2+0x5b8>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f14:	9c01      	ldr	r4, [sp, #4]
 8007f16:	e9c4 2300 	strd	r2, r3, [r4]
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007f22:	f7f8 f975 	bl	8000210 <__aeabi_dsub>
 8007f26:	ad4a      	add	r5, sp, #296	; 0x128
 8007f28:	2401      	movs	r4, #1
 8007f2a:	45a3      	cmp	fp, r4
 8007f2c:	da0f      	bge.n	8007f4e <__kernel_rem_pio2+0x5be>
 8007f2e:	9b02      	ldr	r3, [sp, #8]
 8007f30:	b113      	cbz	r3, 8007f38 <__kernel_rem_pio2+0x5a8>
 8007f32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f36:	4619      	mov	r1, r3
 8007f38:	9b01      	ldr	r3, [sp, #4]
 8007f3a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007f3e:	e791      	b.n	8007e64 <__kernel_rem_pio2+0x4d4>
 8007f40:	465c      	mov	r4, fp
 8007f42:	2000      	movs	r0, #0
 8007f44:	2100      	movs	r1, #0
 8007f46:	e7de      	b.n	8007f06 <__kernel_rem_pio2+0x576>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	e7e2      	b.n	8007f14 <__kernel_rem_pio2+0x584>
 8007f4e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007f52:	f7f8 f95f 	bl	8000214 <__adddf3>
 8007f56:	3401      	adds	r4, #1
 8007f58:	e7e7      	b.n	8007f2a <__kernel_rem_pio2+0x59a>
 8007f5a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8007f5e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8007f62:	4620      	mov	r0, r4
 8007f64:	4632      	mov	r2, r6
 8007f66:	463b      	mov	r3, r7
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f8 f953 	bl	8000214 <__adddf3>
 8007f6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4620      	mov	r0, r4
 8007f78:	4629      	mov	r1, r5
 8007f7a:	f7f8 f949 	bl	8000210 <__aeabi_dsub>
 8007f7e:	4632      	mov	r2, r6
 8007f80:	463b      	mov	r3, r7
 8007f82:	f7f8 f947 	bl	8000214 <__adddf3>
 8007f86:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007f8a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8007f8e:	ed88 7b00 	vstr	d7, [r8]
 8007f92:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007f96:	e776      	b.n	8007e86 <__kernel_rem_pio2+0x4f6>
 8007f98:	e9da 8900 	ldrd	r8, r9, [sl]
 8007f9c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	4632      	mov	r2, r6
 8007fa4:	463b      	mov	r3, r7
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	f7f8 f934 	bl	8000214 <__adddf3>
 8007fac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	f7f8 f92a 	bl	8000210 <__aeabi_dsub>
 8007fbc:	4632      	mov	r2, r6
 8007fbe:	463b      	mov	r3, r7
 8007fc0:	f7f8 f928 	bl	8000214 <__adddf3>
 8007fc4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007fc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007fcc:	ed8a 7b00 	vstr	d7, [sl]
 8007fd0:	3c01      	subs	r4, #1
 8007fd2:	e75e      	b.n	8007e92 <__kernel_rem_pio2+0x502>
 8007fd4:	ab48      	add	r3, sp, #288	; 0x120
 8007fd6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f7f8 f919 	bl	8000214 <__adddf3>
 8007fe2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007fe6:	e75a      	b.n	8007e9e <__kernel_rem_pio2+0x50e>
 8007fe8:	9b01      	ldr	r3, [sp, #4]
 8007fea:	9a01      	ldr	r2, [sp, #4]
 8007fec:	601d      	str	r5, [r3, #0]
 8007fee:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007ff2:	605c      	str	r4, [r3, #4]
 8007ff4:	609f      	str	r7, [r3, #8]
 8007ff6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007ffa:	60d3      	str	r3, [r2, #12]
 8007ffc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008000:	6110      	str	r0, [r2, #16]
 8008002:	6153      	str	r3, [r2, #20]
 8008004:	e72e      	b.n	8007e64 <__kernel_rem_pio2+0x4d4>
 8008006:	bf00      	nop
 8008008:	41700000 	.word	0x41700000
 800800c:	3e700000 	.word	0x3e700000

08008010 <__kernel_sin>:
 8008010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008014:	ed2d 8b04 	vpush	{d8-d9}
 8008018:	eeb0 8a41 	vmov.f32	s16, s2
 800801c:	eef0 8a61 	vmov.f32	s17, s3
 8008020:	ec55 4b10 	vmov	r4, r5, d0
 8008024:	b083      	sub	sp, #12
 8008026:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800802a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800802e:	9001      	str	r0, [sp, #4]
 8008030:	da06      	bge.n	8008040 <__kernel_sin+0x30>
 8008032:	ee10 0a10 	vmov	r0, s0
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 fd3c 	bl	8000ab4 <__aeabi_d2iz>
 800803c:	2800      	cmp	r0, #0
 800803e:	d051      	beq.n	80080e4 <__kernel_sin+0xd4>
 8008040:	4622      	mov	r2, r4
 8008042:	462b      	mov	r3, r5
 8008044:	4620      	mov	r0, r4
 8008046:	4629      	mov	r1, r5
 8008048:	f7f8 fa9a 	bl	8000580 <__aeabi_dmul>
 800804c:	4682      	mov	sl, r0
 800804e:	468b      	mov	fp, r1
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4620      	mov	r0, r4
 8008056:	4629      	mov	r1, r5
 8008058:	f7f8 fa92 	bl	8000580 <__aeabi_dmul>
 800805c:	a341      	add	r3, pc, #260	; (adr r3, 8008164 <__kernel_sin+0x154>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	4680      	mov	r8, r0
 8008064:	4689      	mov	r9, r1
 8008066:	4650      	mov	r0, sl
 8008068:	4659      	mov	r1, fp
 800806a:	f7f8 fa89 	bl	8000580 <__aeabi_dmul>
 800806e:	a33f      	add	r3, pc, #252	; (adr r3, 800816c <__kernel_sin+0x15c>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f7f8 f8cc 	bl	8000210 <__aeabi_dsub>
 8008078:	4652      	mov	r2, sl
 800807a:	465b      	mov	r3, fp
 800807c:	f7f8 fa80 	bl	8000580 <__aeabi_dmul>
 8008080:	a33c      	add	r3, pc, #240	; (adr r3, 8008174 <__kernel_sin+0x164>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	f7f8 f8c5 	bl	8000214 <__adddf3>
 800808a:	4652      	mov	r2, sl
 800808c:	465b      	mov	r3, fp
 800808e:	f7f8 fa77 	bl	8000580 <__aeabi_dmul>
 8008092:	a33a      	add	r3, pc, #232	; (adr r3, 800817c <__kernel_sin+0x16c>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f7f8 f8ba 	bl	8000210 <__aeabi_dsub>
 800809c:	4652      	mov	r2, sl
 800809e:	465b      	mov	r3, fp
 80080a0:	f7f8 fa6e 	bl	8000580 <__aeabi_dmul>
 80080a4:	a337      	add	r3, pc, #220	; (adr r3, 8008184 <__kernel_sin+0x174>)
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f7f8 f8b3 	bl	8000214 <__adddf3>
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	4606      	mov	r6, r0
 80080b2:	460f      	mov	r7, r1
 80080b4:	b9eb      	cbnz	r3, 80080f2 <__kernel_sin+0xe2>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4650      	mov	r0, sl
 80080bc:	4659      	mov	r1, fp
 80080be:	f7f8 fa5f 	bl	8000580 <__aeabi_dmul>
 80080c2:	a325      	add	r3, pc, #148	; (adr r3, 8008158 <__kernel_sin+0x148>)
 80080c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c8:	f7f8 f8a2 	bl	8000210 <__aeabi_dsub>
 80080cc:	4642      	mov	r2, r8
 80080ce:	464b      	mov	r3, r9
 80080d0:	f7f8 fa56 	bl	8000580 <__aeabi_dmul>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4620      	mov	r0, r4
 80080da:	4629      	mov	r1, r5
 80080dc:	f7f8 f89a 	bl	8000214 <__adddf3>
 80080e0:	4604      	mov	r4, r0
 80080e2:	460d      	mov	r5, r1
 80080e4:	ec45 4b10 	vmov	d0, r4, r5
 80080e8:	b003      	add	sp, #12
 80080ea:	ecbd 8b04 	vpop	{d8-d9}
 80080ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f2:	4b1b      	ldr	r3, [pc, #108]	; (8008160 <__kernel_sin+0x150>)
 80080f4:	ec51 0b18 	vmov	r0, r1, d8
 80080f8:	2200      	movs	r2, #0
 80080fa:	f7f8 fa41 	bl	8000580 <__aeabi_dmul>
 80080fe:	4632      	mov	r2, r6
 8008100:	ec41 0b19 	vmov	d9, r0, r1
 8008104:	463b      	mov	r3, r7
 8008106:	4640      	mov	r0, r8
 8008108:	4649      	mov	r1, r9
 800810a:	f7f8 fa39 	bl	8000580 <__aeabi_dmul>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	ec51 0b19 	vmov	r0, r1, d9
 8008116:	f7f8 f87b 	bl	8000210 <__aeabi_dsub>
 800811a:	4652      	mov	r2, sl
 800811c:	465b      	mov	r3, fp
 800811e:	f7f8 fa2f 	bl	8000580 <__aeabi_dmul>
 8008122:	ec53 2b18 	vmov	r2, r3, d8
 8008126:	f7f8 f873 	bl	8000210 <__aeabi_dsub>
 800812a:	a30b      	add	r3, pc, #44	; (adr r3, 8008158 <__kernel_sin+0x148>)
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	4606      	mov	r6, r0
 8008132:	460f      	mov	r7, r1
 8008134:	4640      	mov	r0, r8
 8008136:	4649      	mov	r1, r9
 8008138:	f7f8 fa22 	bl	8000580 <__aeabi_dmul>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4630      	mov	r0, r6
 8008142:	4639      	mov	r1, r7
 8008144:	f7f8 f866 	bl	8000214 <__adddf3>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4620      	mov	r0, r4
 800814e:	4629      	mov	r1, r5
 8008150:	f7f8 f85e 	bl	8000210 <__aeabi_dsub>
 8008154:	e7c4      	b.n	80080e0 <__kernel_sin+0xd0>
 8008156:	bf00      	nop
 8008158:	55555549 	.word	0x55555549
 800815c:	3fc55555 	.word	0x3fc55555
 8008160:	3fe00000 	.word	0x3fe00000
 8008164:	5acfd57c 	.word	0x5acfd57c
 8008168:	3de5d93a 	.word	0x3de5d93a
 800816c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008170:	3e5ae5e6 	.word	0x3e5ae5e6
 8008174:	57b1fe7d 	.word	0x57b1fe7d
 8008178:	3ec71de3 	.word	0x3ec71de3
 800817c:	19c161d5 	.word	0x19c161d5
 8008180:	3f2a01a0 	.word	0x3f2a01a0
 8008184:	1110f8a6 	.word	0x1110f8a6
 8008188:	3f811111 	.word	0x3f811111

0800818c <fabs>:
 800818c:	ec51 0b10 	vmov	r0, r1, d0
 8008190:	ee10 2a10 	vmov	r2, s0
 8008194:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008198:	ec43 2b10 	vmov	d0, r2, r3
 800819c:	4770      	bx	lr

0800819e <finite>:
 800819e:	b082      	sub	sp, #8
 80081a0:	ed8d 0b00 	vstr	d0, [sp]
 80081a4:	9801      	ldr	r0, [sp, #4]
 80081a6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80081aa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80081ae:	0fc0      	lsrs	r0, r0, #31
 80081b0:	b002      	add	sp, #8
 80081b2:	4770      	bx	lr
 80081b4:	0000      	movs	r0, r0
	...

080081b8 <floor>:
 80081b8:	ec51 0b10 	vmov	r0, r1, d0
 80081bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80081c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80081c8:	2e13      	cmp	r6, #19
 80081ca:	ee10 5a10 	vmov	r5, s0
 80081ce:	ee10 8a10 	vmov	r8, s0
 80081d2:	460c      	mov	r4, r1
 80081d4:	dc32      	bgt.n	800823c <floor+0x84>
 80081d6:	2e00      	cmp	r6, #0
 80081d8:	da14      	bge.n	8008204 <floor+0x4c>
 80081da:	a333      	add	r3, pc, #204	; (adr r3, 80082a8 <floor+0xf0>)
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	f7f8 f818 	bl	8000214 <__adddf3>
 80081e4:	2200      	movs	r2, #0
 80081e6:	2300      	movs	r3, #0
 80081e8:	f7f8 fc5a 	bl	8000aa0 <__aeabi_dcmpgt>
 80081ec:	b138      	cbz	r0, 80081fe <floor+0x46>
 80081ee:	2c00      	cmp	r4, #0
 80081f0:	da57      	bge.n	80082a2 <floor+0xea>
 80081f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80081f6:	431d      	orrs	r5, r3
 80081f8:	d001      	beq.n	80081fe <floor+0x46>
 80081fa:	4c2d      	ldr	r4, [pc, #180]	; (80082b0 <floor+0xf8>)
 80081fc:	2500      	movs	r5, #0
 80081fe:	4621      	mov	r1, r4
 8008200:	4628      	mov	r0, r5
 8008202:	e025      	b.n	8008250 <floor+0x98>
 8008204:	4f2b      	ldr	r7, [pc, #172]	; (80082b4 <floor+0xfc>)
 8008206:	4137      	asrs	r7, r6
 8008208:	ea01 0307 	and.w	r3, r1, r7
 800820c:	4303      	orrs	r3, r0
 800820e:	d01f      	beq.n	8008250 <floor+0x98>
 8008210:	a325      	add	r3, pc, #148	; (adr r3, 80082a8 <floor+0xf0>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f7f7 fffd 	bl	8000214 <__adddf3>
 800821a:	2200      	movs	r2, #0
 800821c:	2300      	movs	r3, #0
 800821e:	f7f8 fc3f 	bl	8000aa0 <__aeabi_dcmpgt>
 8008222:	2800      	cmp	r0, #0
 8008224:	d0eb      	beq.n	80081fe <floor+0x46>
 8008226:	2c00      	cmp	r4, #0
 8008228:	bfbe      	ittt	lt
 800822a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800822e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008232:	19a4      	addlt	r4, r4, r6
 8008234:	ea24 0407 	bic.w	r4, r4, r7
 8008238:	2500      	movs	r5, #0
 800823a:	e7e0      	b.n	80081fe <floor+0x46>
 800823c:	2e33      	cmp	r6, #51	; 0x33
 800823e:	dd0b      	ble.n	8008258 <floor+0xa0>
 8008240:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008244:	d104      	bne.n	8008250 <floor+0x98>
 8008246:	ee10 2a10 	vmov	r2, s0
 800824a:	460b      	mov	r3, r1
 800824c:	f7f7 ffe2 	bl	8000214 <__adddf3>
 8008250:	ec41 0b10 	vmov	d0, r0, r1
 8008254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008258:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800825c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008260:	fa23 f707 	lsr.w	r7, r3, r7
 8008264:	4207      	tst	r7, r0
 8008266:	d0f3      	beq.n	8008250 <floor+0x98>
 8008268:	a30f      	add	r3, pc, #60	; (adr r3, 80082a8 <floor+0xf0>)
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	f7f7 ffd1 	bl	8000214 <__adddf3>
 8008272:	2200      	movs	r2, #0
 8008274:	2300      	movs	r3, #0
 8008276:	f7f8 fc13 	bl	8000aa0 <__aeabi_dcmpgt>
 800827a:	2800      	cmp	r0, #0
 800827c:	d0bf      	beq.n	80081fe <floor+0x46>
 800827e:	2c00      	cmp	r4, #0
 8008280:	da02      	bge.n	8008288 <floor+0xd0>
 8008282:	2e14      	cmp	r6, #20
 8008284:	d103      	bne.n	800828e <floor+0xd6>
 8008286:	3401      	adds	r4, #1
 8008288:	ea25 0507 	bic.w	r5, r5, r7
 800828c:	e7b7      	b.n	80081fe <floor+0x46>
 800828e:	2301      	movs	r3, #1
 8008290:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008294:	fa03 f606 	lsl.w	r6, r3, r6
 8008298:	4435      	add	r5, r6
 800829a:	4545      	cmp	r5, r8
 800829c:	bf38      	it	cc
 800829e:	18e4      	addcc	r4, r4, r3
 80082a0:	e7f2      	b.n	8008288 <floor+0xd0>
 80082a2:	2500      	movs	r5, #0
 80082a4:	462c      	mov	r4, r5
 80082a6:	e7aa      	b.n	80081fe <floor+0x46>
 80082a8:	8800759c 	.word	0x8800759c
 80082ac:	7e37e43c 	.word	0x7e37e43c
 80082b0:	bff00000 	.word	0xbff00000
 80082b4:	000fffff 	.word	0x000fffff

080082b8 <scalbn>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	ec55 4b10 	vmov	r4, r5, d0
 80082be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80082c2:	4606      	mov	r6, r0
 80082c4:	462b      	mov	r3, r5
 80082c6:	b99a      	cbnz	r2, 80082f0 <scalbn+0x38>
 80082c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80082cc:	4323      	orrs	r3, r4
 80082ce:	d036      	beq.n	800833e <scalbn+0x86>
 80082d0:	4b39      	ldr	r3, [pc, #228]	; (80083b8 <scalbn+0x100>)
 80082d2:	4629      	mov	r1, r5
 80082d4:	ee10 0a10 	vmov	r0, s0
 80082d8:	2200      	movs	r2, #0
 80082da:	f7f8 f951 	bl	8000580 <__aeabi_dmul>
 80082de:	4b37      	ldr	r3, [pc, #220]	; (80083bc <scalbn+0x104>)
 80082e0:	429e      	cmp	r6, r3
 80082e2:	4604      	mov	r4, r0
 80082e4:	460d      	mov	r5, r1
 80082e6:	da10      	bge.n	800830a <scalbn+0x52>
 80082e8:	a32b      	add	r3, pc, #172	; (adr r3, 8008398 <scalbn+0xe0>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	e03a      	b.n	8008366 <scalbn+0xae>
 80082f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80082f4:	428a      	cmp	r2, r1
 80082f6:	d10c      	bne.n	8008312 <scalbn+0x5a>
 80082f8:	ee10 2a10 	vmov	r2, s0
 80082fc:	4620      	mov	r0, r4
 80082fe:	4629      	mov	r1, r5
 8008300:	f7f7 ff88 	bl	8000214 <__adddf3>
 8008304:	4604      	mov	r4, r0
 8008306:	460d      	mov	r5, r1
 8008308:	e019      	b.n	800833e <scalbn+0x86>
 800830a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800830e:	460b      	mov	r3, r1
 8008310:	3a36      	subs	r2, #54	; 0x36
 8008312:	4432      	add	r2, r6
 8008314:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008318:	428a      	cmp	r2, r1
 800831a:	dd08      	ble.n	800832e <scalbn+0x76>
 800831c:	2d00      	cmp	r5, #0
 800831e:	a120      	add	r1, pc, #128	; (adr r1, 80083a0 <scalbn+0xe8>)
 8008320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008324:	da1c      	bge.n	8008360 <scalbn+0xa8>
 8008326:	a120      	add	r1, pc, #128	; (adr r1, 80083a8 <scalbn+0xf0>)
 8008328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800832c:	e018      	b.n	8008360 <scalbn+0xa8>
 800832e:	2a00      	cmp	r2, #0
 8008330:	dd08      	ble.n	8008344 <scalbn+0x8c>
 8008332:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008336:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800833a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800833e:	ec45 4b10 	vmov	d0, r4, r5
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008348:	da19      	bge.n	800837e <scalbn+0xc6>
 800834a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800834e:	429e      	cmp	r6, r3
 8008350:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008354:	dd0a      	ble.n	800836c <scalbn+0xb4>
 8008356:	a112      	add	r1, pc, #72	; (adr r1, 80083a0 <scalbn+0xe8>)
 8008358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e2      	bne.n	8008326 <scalbn+0x6e>
 8008360:	a30f      	add	r3, pc, #60	; (adr r3, 80083a0 <scalbn+0xe8>)
 8008362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008366:	f7f8 f90b 	bl	8000580 <__aeabi_dmul>
 800836a:	e7cb      	b.n	8008304 <scalbn+0x4c>
 800836c:	a10a      	add	r1, pc, #40	; (adr r1, 8008398 <scalbn+0xe0>)
 800836e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0b8      	beq.n	80082e8 <scalbn+0x30>
 8008376:	a10e      	add	r1, pc, #56	; (adr r1, 80083b0 <scalbn+0xf8>)
 8008378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800837c:	e7b4      	b.n	80082e8 <scalbn+0x30>
 800837e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008382:	3236      	adds	r2, #54	; 0x36
 8008384:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008388:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800838c:	4620      	mov	r0, r4
 800838e:	4b0c      	ldr	r3, [pc, #48]	; (80083c0 <scalbn+0x108>)
 8008390:	2200      	movs	r2, #0
 8008392:	e7e8      	b.n	8008366 <scalbn+0xae>
 8008394:	f3af 8000 	nop.w
 8008398:	c2f8f359 	.word	0xc2f8f359
 800839c:	01a56e1f 	.word	0x01a56e1f
 80083a0:	8800759c 	.word	0x8800759c
 80083a4:	7e37e43c 	.word	0x7e37e43c
 80083a8:	8800759c 	.word	0x8800759c
 80083ac:	fe37e43c 	.word	0xfe37e43c
 80083b0:	c2f8f359 	.word	0xc2f8f359
 80083b4:	81a56e1f 	.word	0x81a56e1f
 80083b8:	43500000 	.word	0x43500000
 80083bc:	ffff3cb0 	.word	0xffff3cb0
 80083c0:	3c900000 	.word	0x3c900000

080083c4 <_init>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	bf00      	nop
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr

080083d0 <_fini>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	bf00      	nop
 80083d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d6:	bc08      	pop	{r3}
 80083d8:	469e      	mov	lr, r3
 80083da:	4770      	bx	lr
